
lonely-m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab34  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800ae04  0800ae04  0000be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800aea0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ae4  24000014  0800aeb4  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004af8  0800aeb4  0000caf8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000208b4  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eac  00000000  00000000  0002c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c8  00000000  00000000  000307a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001331  00000000  00000000  00032070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004b11  00000000  00000000  000333a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f3eb  00000000  00000000  00037eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015073b  00000000  00000000  0005729d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a79d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006958  00000000  00000000  001a7a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001ae374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800adec 	.word	0x0800adec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	0800adec 	.word	0x0800adec

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <IMU_accelConvert>:

    return temp;
}

//IMU convert
float IMU_accelConvert(uint8_t H_Byte, uint8_t L_Byte) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
	int16_t accel_raw = (int16_t)(H_Byte << 8) + L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b29a      	uxth	r2, r3
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	81fb      	strh	r3, [r7, #14]

	float accel = (accel_raw*IMU_SCALING_FACTOR_ACCEL)*IMU_g; // Convert to m/s^2
 8000620:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000630:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000634:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800065c <IMU_accelConvert+0x5c>
 8000638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800063c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000660 <IMU_accelConvert+0x60>
 8000640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000644:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	ee07 3a90 	vmov	s15, r3
}
 800064e:	eeb0 0a67 	vmov.f32	s0, s15
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	46fffe00 	.word	0x46fffe00
 8000660:	411ce80a 	.word	0x411ce80a

08000664 <IMU_gyroConvert>:

//Gyro convert
float IMU_gyroConvert(uint8_t H_Byte, uint8_t L_Byte) {
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	int16_t gyro_raw = (int16_t)(H_Byte << 8) + L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	b29b      	uxth	r3, r3
 800067e:	4413      	add	r3, r2
 8000680:	b29b      	uxth	r3, r3
 8000682:	81fb      	strh	r3, [r7, #14]

	float gyro = gyro_raw*IMU_SCALING_FACTOR_GYRO; // Convert to dps
 8000684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000690:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80006b8 <IMU_gyroConvert+0x54>
 8000694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000698:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80006bc <IMU_gyroConvert+0x58>
 800069c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a0:	edc7 7a02 	vstr	s15, [r7, #8]

	return gyro;
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	ee07 3a90 	vmov	s15, r3
}
 80006aa:	eeb0 0a67 	vmov.f32	s0, s15
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	44fa0000 	.word	0x44fa0000
 80006bc:	46fffe00 	.word	0x46fffe00

080006c0 <IMU_read>:

//Read register from IMU
HAL_StatusTypeDef IMU_read(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buffer, uint8_t num_bytes) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af02      	add	r7, sp, #8
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	607a      	str	r2, [r7, #4]
 80006ca:	461a      	mov	r2, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	72fb      	strb	r3, [r7, #11]
 80006d0:	4613      	mov	r3, r2
 80006d2:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 80006d4:	f00a f840 	bl	800a758 <vPortEnterCritical>

	HAL_I2C_Master_Transmit(IMU->hi2c, IMU_I2C_ADDR, &reg_addr, 1, IMU->I2C_TIMEOUT);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	889b      	ldrh	r3, [r3, #4]
 80006e0:	f107 020b 	add.w	r2, r7, #11
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	21d4      	movs	r1, #212	@ 0xd4
 80006ea:	f002 fa07 	bl	8002afc <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(IMU->hi2c, IMU_I2C_ADDR, (uint8_t *)rx_buffer, num_bytes, IMU->I2C_TIMEOUT);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	7abb      	ldrb	r3, [r7, #10]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	889b      	ldrh	r3, [r3, #4]
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	4613      	mov	r3, r2
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	21d4      	movs	r1, #212	@ 0xd4
 8000702:	f002 fb13 	bl	8002d2c <HAL_I2C_Master_Receive>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]

	taskEXIT_CRITICAL();
 800070a:	f00a f857 	bl	800a7bc <vPortExitCritical>
	return status;
 800070e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <IMU_write>:

//Write register from IMU
HAL_StatusTypeDef IMU_write(IMU* IMU, uint8_t* tx_buffer, uint8_t num_bytes) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af02      	add	r7, sp, #8
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	4613      	mov	r3, r2
 8000724:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000726:	f00a f817 	bl	800a758 <vPortEnterCritical>

	status = HAL_I2C_Master_Transmit(IMU->hi2c, IMU_I2C_ADDR, (uint8_t *)tx_buffer, num_bytes + 1, IMU->I2C_TIMEOUT);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6818      	ldr	r0, [r3, #0]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	b29b      	uxth	r3, r3
 8000732:	3301      	adds	r3, #1
 8000734:	b29a      	uxth	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	889b      	ldrh	r3, [r3, #4]
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4613      	mov	r3, r2
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	21d4      	movs	r1, #212	@ 0xd4
 8000742:	f002 f9db 	bl	8002afc <HAL_I2C_Master_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	75fb      	strb	r3, [r7, #23]

	taskEXIT_CRITICAL();
 800074a:	f00a f837 	bl	800a7bc <vPortExitCritical>
	return status;
 800074e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <IMU_init>:

//Initialize IMU
int IMU_init(IMU* IMU) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];

	//Main control register
	//This needs to be set first because this determines how
	//future register controls work
	buffer[0] = IMU_CTRL3_C;
 8000760:	2312      	movs	r3, #18
 8000762:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_CTRL3_C;
 8000764:	2304      	movs	r3, #4
 8000766:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2201      	movs	r2, #1
 800076e:	4619      	mov	r1, r3
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ffd1 	bl	8000718 <IMU_write>

	//Read WHO_AM_I register
	IMU_read(IMU, IMU_WHO_AM_I_REG_ADDR, buffer, 1);
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	2301      	movs	r3, #1
 800077c:	210f      	movs	r1, #15
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff9e 	bl	80006c0 <IMU_read>
	//Check if WHO_AM_I register is correct
	if (buffer[0] != IMU_WHO_AM_I_REG_VAL) {
 8000784:	7b3b      	ldrb	r3, [r7, #12]
 8000786:	2b6c      	cmp	r3, #108	@ 0x6c
 8000788:	d002      	beq.n	8000790 <IMU_init+0x38>
		return -1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e016      	b.n	80007be <IMU_init+0x66>
	}

	//Set up accelerometer
	buffer[0] = IMU_CTRL1_XL;
 8000790:	2310      	movs	r3, #16
 8000792:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_ACCEL; // 01010000 208hz, + or - 4g range
 8000794:	2350      	movs	r3, #80	@ 0x50
 8000796:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ffb9 	bl	8000718 <IMU_write>

	//Set up gyroscope
	buffer[0] = IMU_CTRL2_G;
 80007a6:	2311      	movs	r3, #17
 80007a8:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_GYRO; // 01011100 208hz, + or - 2000dps range
 80007aa:	235c      	movs	r3, #92	@ 0x5c
 80007ac:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffae 	bl	8000718 <IMU_write>
	buffer[0] = IMU_CTRL10_C;
	buffer[1] = IMU_DEFAULT_CONF_CTRL10_C;
	IMU_write(IMU, buffer, 1);
	*/

	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <IMU_getAccel>:

//Get acceleration from IMU
int IMU_getAccel(IMU* IMU, Accel* accel) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	IMU_read(IMU, IMU_OUTX_L_A, buf, 6);
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	2306      	movs	r3, #6
 80007d6:	2128      	movs	r1, #40	@ 0x28
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff71 	bl	80006c0 <IMU_read>
	//We are able to do a single read because when doing multiple reads, it will automatically increment the register address
	//This is good not only for code duplication, but also reduces overhead
	//The option to disable this is in the datasheet under CTRL3_C
	accel->XL_x = IMU_accelConvert(buf[1], buf[0]) + IMU->XL_x_offset;
 80007de:	7a7b      	ldrb	r3, [r7, #9]
 80007e0:	7a3a      	ldrb	r2, [r7, #8]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff0b 	bl	8000600 <IMU_accelConvert>
 80007ea:	eeb0 7a40 	vmov.f32	s14, s0
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80007f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	edc3 7a00 	vstr	s15, [r3]
	accel->XL_y = IMU_accelConvert(buf[3], buf[2]) + IMU->XL_y_offset;
 80007fe:	7afb      	ldrb	r3, [r7, #11]
 8000800:	7aba      	ldrb	r2, [r7, #10]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fefb 	bl	8000600 <IMU_accelConvert>
 800080a:	eeb0 7a40 	vmov.f32	s14, s0
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	edd3 7a03 	vldr	s15, [r3, #12]
 8000814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	edc3 7a01 	vstr	s15, [r3, #4]
	accel->XL_z = IMU_accelConvert(buf[5], buf[4]) + IMU->XL_z_offset;
 800081e:	7b7b      	ldrb	r3, [r7, #13]
 8000820:	7b3a      	ldrb	r2, [r7, #12]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff feeb 	bl	8000600 <IMU_accelConvert>
 800082a:	eeb0 7a40 	vmov.f32	s14, s0
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	edd3 7a04 	vldr	s15, [r3, #16]
 8000834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <IMU_getAngRate>:

//Get angular rate from IMU
int IMU_getAngRate(IMU* IMU, AngRate* AngRate) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	IMU_read(IMU, IMU_OUTX_L_G, buf, 6);
 8000852:	f107 0208 	add.w	r2, r7, #8
 8000856:	2306      	movs	r3, #6
 8000858:	2122      	movs	r1, #34	@ 0x22
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ff30 	bl	80006c0 <IMU_read>
	//Same as before, we can do a single read
	AngRate->G_x = IMU_gyroConvert(buf[1], buf[0])+IMU->G_x_offset;
 8000860:	7a7b      	ldrb	r3, [r7, #9]
 8000862:	7a3a      	ldrb	r2, [r7, #8]
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fefc 	bl	8000664 <IMU_gyroConvert>
 800086c:	eeb0 7a40 	vmov.f32	s14, s0
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	edd3 7a05 	vldr	s15, [r3, #20]
 8000876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	edc3 7a00 	vstr	s15, [r3]
	AngRate->G_y = IMU_gyroConvert(buf[3], buf[2])+IMU->G_y_offset;
 8000880:	7afb      	ldrb	r3, [r7, #11]
 8000882:	7aba      	ldrb	r2, [r7, #10]
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff feec 	bl	8000664 <IMU_gyroConvert>
 800088c:	eeb0 7a40 	vmov.f32	s14, s0
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	edd3 7a06 	vldr	s15, [r3, #24]
 8000896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	edc3 7a01 	vstr	s15, [r3, #4]
	AngRate->G_z = IMU_gyroConvert(buf[5], buf[4])+IMU->G_z_offset;
 80008a0:	7b7b      	ldrb	r3, [r7, #13]
 80008a2:	7b3a      	ldrb	r2, [r7, #12]
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fedc 	bl	8000664 <IMU_gyroConvert>
 80008ac:	eeb0 7a40 	vmov.f32	s14, s0
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80008b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	4613      	mov	r3, r2
 80008d6:	80fb      	strh	r3, [r7, #6]

	taskENTER_CRITICAL();
 80008d8:	f009 ff3e 	bl	800a758 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 80008e8:	2200      	movs	r2, #0
 80008ea:	4619      	mov	r1, r3
 80008ec:	f002 f850 	bl	8002990 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 80008f6:	88fa      	ldrh	r2, [r7, #6]
 80008f8:	23ff      	movs	r3, #255	@ 0xff
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f005 fcd0 	bl	80062a0 <HAL_SPI_Transmit>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000916:	2201      	movs	r2, #1
 8000918:	4619      	mov	r1, r3
 800091a:	f002 f839 	bl	8002990 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 800091e:	f009 ff4d 	bl	800a7bc <vPortExitCritical>

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4613      	mov	r3, r2
 8000938:	80fb      	strh	r3, [r7, #6]

	taskENTER_CRITICAL();
 800093a:	f009 ff0d 	bl	800a758 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	f002 f81f 	bl	8002990 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000958:	88fa      	ldrh	r2, [r7, #6]
 800095a:	23ff      	movs	r3, #255	@ 0xff
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	f005 fc9f 	bl	80062a0 <HAL_SPI_Transmit>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000972:	8b3a      	ldrh	r2, [r7, #24]
 8000974:	23ff      	movs	r3, #255	@ 0xff
 8000976:	6839      	ldr	r1, [r7, #0]
 8000978:	f005 fe80 	bl	800667c <HAL_SPI_Receive>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000992:	2201      	movs	r2, #1
 8000994:	4619      	mov	r1, r3
 8000996:	f001 fffb 	bl	8002990 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 800099a:	f009 ff0f 	bl	800a7bc <vPortExitCritical>

}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af02      	add	r7, sp, #8
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 80009b2:	230f      	movs	r3, #15
 80009b4:	733b      	strb	r3, [r7, #12]
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	f107 010c 	add.w	r1, r7, #12
 80009c2:	2201      	movs	r2, #1
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	2202      	movs	r2, #2
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ffae 	bl	800092a <spi_transmit_receive>

	return *rx;
 80009ce:	7a3b      	ldrb	r3, [r7, #8]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80009e0:	21c0      	movs	r1, #192	@ 0xc0
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffdf 	bl	80009a6 <read_status_register>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8000a0a:	e002      	b.n	8000a12 <wait_for_operation+0x16>
		++count;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffe0 	bl	80009d8 <flash_is_busy>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d008      	beq.n	8000a30 <wait_for_operation+0x34>
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d3ed      	bcc.n	8000a0c <wait_for_operation+0x10>
	}
}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
 8000a44:	4613      	mov	r3, r2
 8000a46:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8000a48:	231f      	movs	r3, #31
 8000a4a:	733b      	strb	r3, [r7, #12]
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	737b      	strb	r3, [r7, #13]
 8000a50:	78bb      	ldrb	r3, [r7, #2]
 8000a52:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff34 	bl	80008ca <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8000a62:	2132      	movs	r1, #50	@ 0x32
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ffc9 	bl	80009fc <wait_for_operation>
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	733b      	strb	r3, [r7, #12]
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8000a8e:	2313      	movs	r3, #19
 8000a90:	723b      	strb	r3, [r7, #8]
 8000a92:	2300      	movs	r3, #0
 8000a94:	727b      	strb	r3, [r7, #9]
 8000a96:	7b3b      	ldrb	r3, [r7, #12]
 8000a98:	72bb      	strb	r3, [r7, #10]
 8000a9a:	7b7b      	ldrb	r3, [r7, #13]
 8000a9c:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ff0f 	bl	80008ca <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8000aac:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ffa3 	bl	80009fc <wait_for_operation>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8000ac6:	21a0      	movs	r1, #160	@ 0xa0
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff6c 	bl	80009a6 <read_status_register>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000ad8:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	461a      	mov	r2, r3
 8000ade:	21a0      	movs	r1, #160	@ 0xa0
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ffa9 	bl	8000a38 <write_status_register>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8000af6:	21a0      	movs	r1, #160	@ 0xa0
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff54 	bl	80009a6 <read_status_register>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000b08:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000b10:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8000b12:	7bbb      	ldrb	r3, [r7, #14]
 8000b14:	461a      	mov	r2, r3
 8000b16:	21a0      	movs	r1, #160	@ 0xa0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff8d 	bl	8000a38 <write_status_register>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8000b2e:	2306      	movs	r3, #6
 8000b30:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2201      	movs	r2, #1
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fec5 	bl	80008ca <spi_transmit>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8000b50:	2304      	movs	r3, #4
 8000b52:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff feb4 	bl	80008ca <spi_transmit>
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	60f8      	str	r0, [r7, #12]
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	4611      	mov	r1, r2
 8000b76:	461a      	mov	r2, r3
 8000b78:	460b      	mov	r3, r1
 8000b7a:	80fb      	strh	r3, [r7, #6]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8000b80:	88bb      	ldrh	r3, [r7, #4]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	753b      	strb	r3, [r7, #20]
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8000b90:	2302      	movs	r3, #2
 8000b92:	743b      	strb	r3, [r7, #16]
 8000b94:	7d3b      	ldrb	r3, [r7, #20]
 8000b96:	747b      	strb	r3, [r7, #17]
 8000b98:	7d7b      	ldrb	r3, [r7, #21]
 8000b9a:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ba2:	d902      	bls.n	8000baa <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8000ba4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ba8:	80fb      	strh	r3, [r7, #6]

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	taskENTER_CRITICAL();
 8000baa:	f009 fdd5 	bl	800a758 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f001 fee7 	bl	8002990 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000bc8:	f107 0110 	add.w	r1, r7, #16
 8000bcc:	23ff      	movs	r3, #255	@ 0xff
 8000bce:	2203      	movs	r2, #3
 8000bd0:	f005 fb66 	bl	80062a0 <HAL_SPI_Transmit>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	23ff      	movs	r3, #255	@ 0xff
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	f005 fb59 	bl	80062a0 <HAL_SPI_Transmit>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	f001 fec2 	bl	8002990 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000c0c:	f009 fdd6 	bl	800a7bc <vPortExitCritical>
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	733b      	strb	r3, [r7, #12]
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8000c34:	2310      	movs	r3, #16
 8000c36:	723b      	strb	r3, [r7, #8]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	727b      	strb	r3, [r7, #9]
 8000c3c:	7b3b      	ldrb	r3, [r7, #12]
 8000c3e:	72bb      	strb	r3, [r7, #10]
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2204      	movs	r2, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fe3c 	bl	80008ca <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8000c52:	4904      	ldr	r1, [pc, #16]	@ (8000c64 <program_buffer_to_memory+0x4c>)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fed1 	bl	80009fc <wait_for_operation>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	000aae60 	.word	0x000aae60

08000c68 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fb0d 	bl	8001290 <ping_flash>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00d      	beq.n	8000c98 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000c7c:	21c0      	movs	r1, #192	@ 0xc0
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fe91 	bl	80009a6 <read_status_register>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
 8000c96:	e003      	b.n	8000ca0 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
	}

	return flash->last_write_failure_status;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 faea 	bl	8001290 <ping_flash>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00d      	beq.n	8000cde <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000cc2:	21c0      	movs	r1, #192	@ 0xc0
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff fe6e 	bl	80009a6 <read_status_register>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
 8000cdc:	e003      	b.n	8000ce6 <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
	}

	return flash->last_erase_failure_status;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217

}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff10 	bl	8000b26 <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8000d06:	887b      	ldrh	r3, [r7, #2]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 8000d16:	23d8      	movs	r3, #216	@ 0xd8
 8000d18:	723b      	strb	r3, [r7, #8]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	727b      	strb	r3, [r7, #9]
 8000d1e:	7b3b      	ldrb	r3, [r7, #12]
 8000d20:	72bb      	strb	r3, [r7, #10]
 8000d22:	7b7b      	ldrb	r3, [r7, #13]
 8000d24:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fdcb 	bl	80008ca <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff07 	bl	8000b48 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 8000d3a:	4905      	ldr	r1, [pc, #20]	@ (8000d50 <erase_block+0x5c>)
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff fe5d 	bl	80009fc <wait_for_operation>

	get_erase_failure_status(flash);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffb3 	bl	8000cae <get_erase_failure_status>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	003d0900 	.word	0x003d0900

08000d54 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa97 	bl	8001290 <ping_flash>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d033      	beq.n	8000dd0 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000d68:	21c0      	movs	r1, #192	@ 0xc0
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fe1b 	bl	80009a6 <read_status_register>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d107      	bne.n	8000d9a <get_ECC_status+0x46>
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d104      	bne.n	8000d9a <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
 8000d98:	e01f      	b.n	8000dda <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d107      	bne.n	8000db0 <get_ECC_status+0x5c>
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d004      	beq.n	8000db0 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
 8000dae:	e014      	b.n	8000dda <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d007      	beq.n	8000dc6 <get_ECC_status+0x72>
 8000db6:	7b7b      	ldrb	r3, [r7, #13]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d104      	bne.n	8000dc6 <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
 8000dc4:	e009      	b.n	8000dda <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8000dce:	e004      	b.n	8000dda <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
}
 8000dd8:	e7ff      	b.n	8000dda <get_ECC_status+0x86>
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b088      	sub	sp, #32
 8000de6:	af02      	add	r7, sp, #8
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	4611      	mov	r1, r2
 8000dee:	461a      	mov	r2, r3
 8000df0:	460b      	mov	r3, r1
 8000df2:	80fb      	strh	r3, [r7, #6]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	753b      	strb	r3, [r7, #20]
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8000e08:	2303      	movs	r3, #3
 8000e0a:	743b      	strb	r3, [r7, #16]
 8000e0c:	7d3b      	ldrb	r3, [r7, #20]
 8000e0e:	747b      	strb	r3, [r7, #17]
 8000e10:	7d7b      	ldrb	r3, [r7, #21]
 8000e12:	74bb      	strb	r3, [r7, #18]
 8000e14:	2300      	movs	r3, #0
 8000e16:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8000e18:	f107 0110 	add.w	r1, r7, #16
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2204      	movs	r2, #4
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f7ff fd80 	bl	800092a <spi_transmit_receive>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	461a      	mov	r2, r3
 8000e40:	460b      	mov	r3, r1
 8000e42:	80fb      	strh	r3, [r7, #6]
 8000e44:	4613      	mov	r3, r2
 8000e46:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f7ff fe10 	bl	8000a72 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 8000e52:	8b3b      	ldrh	r3, [r7, #24]
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff ffc2 	bl	8000de2 <read_flash_buffer>

	get_ECC_status(flash);
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff ff78 	bl	8000d54 <get_ECC_status>
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff fe4f 	bl	8000b26 <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 8000e88:	8b3b      	ldrh	r3, [r7, #24]
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff fe6b 	bl	8000b6a <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	4619      	mov	r1, r3
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff febd 	bl	8000c18 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f7ff fe52 	bl	8000b48 <disable_write>

	get_write_failure_status(flash);
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fedf 	bl	8000c68 <get_write_failure_status>
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8000eba:	21b0      	movs	r1, #176	@ 0xb0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fd72 	bl	80009a6 <read_status_register>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8000ece:	7bba      	ldrb	r2, [r7, #14]
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d005      	beq.n	8000ee2 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	21b0      	movs	r1, #176	@ 0xb0
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff fdab 	bl	8000a38 <write_status_register>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8000ef2:	21b0      	movs	r1, #176	@ 0xb0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fd56 	bl	80009a6 <read_status_register>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 8000f06:	7bba      	ldrb	r2, [r7, #14]
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d005      	beq.n	8000f1a <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	461a      	mov	r2, r3
 8000f12:	21b0      	movs	r1, #176	@ 0xb0
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff fd8f 	bl	8000a38 <write_status_register>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	f6ad 0d28 	subw	sp, sp, #2088	@ 0x828
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000f2e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8000f32:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 8000f34:	f107 0108 	add.w	r1, r7, #8
 8000f38:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000f3c:	f6a3 001c 	subw	r0, r3, #2076	@ 0x81c
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2300      	movs	r3, #0
 8000f46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f4a:	6800      	ldr	r0, [r0, #0]
 8000f4c:	f7ff ff71 	bl	8000e32 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	f887 381f 	strb.w	r3, [r7, #2079]	@ 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8a7 381c 	strh.w	r3, [r7, #2076]	@ 0x81c
 8000f5c:	e010      	b.n	8000f80 <find_write_ptr+0x5e>
		if (read_buffer[b] != 0xFF) {
 8000f5e:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 8000f62:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8000f66:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	2bff      	cmp	r3, #255	@ 0xff
 8000f6e:	d002      	beq.n	8000f76 <find_write_ptr+0x54>
			first_page_empty = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 381f 	strb.w	r3, [r7, #2079]	@ 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 8000f76:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f8a7 381c 	strh.w	r3, [r7, #2076]	@ 0x81c
 8000f80:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 8000f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f88:	d3e9      	bcc.n	8000f5e <find_write_ptr+0x3c>
		}
	}
	if (first_page_empty) {
 8000f8a:	f897 381f 	ldrb.w	r3, [r7, #2079]	@ 0x81f
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d010      	beq.n	8000fb4 <find_write_ptr+0x92>
		flash->current_page = 0;
 8000f92:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000f96:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
		flash->next_free_column = 0;
 8000fa2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8000fa6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		return;
 8000fb2:	e132      	b.n	800121a <find_write_ptr+0x2f8>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 8000fba:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8000fbe:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8000fc2:	e046      	b.n	8001052 <find_write_ptr+0x130>
		cur_search_page = min + (max-min) / 2;
 8000fc4:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8000fc8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	085b      	lsrs	r3, r3, #1
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4413      	add	r3, r2
 8000fda:	f8a7 380a 	strh.w	r3, [r7, #2058]	@ 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8000fde:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	@ 0x80a
 8000fe2:	f107 0108 	add.w	r1, r7, #8
 8000fe6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8000fea:	f6a2 001c 	subw	r0, r2, #2076	@ 0x81c
 8000fee:	2200      	movs	r2, #0
 8000ff0:	9200      	str	r2, [sp, #0]
 8000ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ff6:	6800      	ldr	r0, [r0, #0]
 8000ff8:	f7ff ff1b 	bl	8000e32 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f887 3813 	strb.w	r3, [r7, #2067]	@ 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8001002:	2300      	movs	r3, #0
 8001004:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
 8001008:	e011      	b.n	800102e <find_write_ptr+0x10c>
			if (read_buffer[b] != 0xFF) {
 800100a:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 800100e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001012:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d003      	beq.n	8001024 <find_write_ptr+0x102>
				cur_page_empty = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3813 	strb.w	r3, [r7, #2067]	@ 0x813
				break;
 8001022:	e009      	b.n	8001038 <find_write_ptr+0x116>
		for (uint16_t b = 0; b < 2048; b++) {
 8001024:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 8001028:	3301      	adds	r3, #1
 800102a:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
 800102e:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 8001032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001036:	d3e8      	bcc.n	800100a <find_write_ptr+0xe8>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 8001038:	f897 3813 	ldrb.w	r3, [r7, #2067]	@ 0x813
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <find_write_ptr+0x128>
			max = cur_search_page;
 8001040:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	@ 0x80a
 8001044:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8001048:	e003      	b.n	8001052 <find_write_ptr+0x130>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 800104a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	@ 0x80a
 800104e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8001052:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8001056:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d8b1      	bhi.n	8000fc4 <find_write_ptr+0xa2>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 8001060:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001064:	b29a      	uxth	r2, r3
 8001066:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800106a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 8001074:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001078:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001082:	f107 0108 	add.w	r1, r7, #8
 8001086:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800108a:	f6a2 001c 	subw	r0, r2, #2076	@ 0x81c
 800108e:	2200      	movs	r2, #0
 8001090:	9200      	str	r2, [sp, #0]
 8001092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001096:	6800      	ldr	r0, [r0, #0]
 8001098:	f7ff fecb 	bl	8000e32 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 800109c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80010a0:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80010a4:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d02d      	beq.n	8001108 <find_write_ptr+0x1e6>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 80010ac:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80010b0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80010ba:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 80010be:	4293      	cmp	r3, r2
 80010c0:	d109      	bne.n	80010d6 <find_write_ptr+0x1b4>
			flash->next_free_column = 2048;
 80010c2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80010c6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010d0:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 80010d4:	e0a1      	b.n	800121a <find_write_ptr+0x2f8>
			flash->current_page++;
 80010d6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80010da:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80010e4:	3301      	adds	r3, #1
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80010ec:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
			flash->next_free_column = 0;
 80010f6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80010fa:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		return;
 8001106:	e088      	b.n	800121a <find_write_ptr+0x2f8>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 800110e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001112:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 8001116:	e01e      	b.n	8001156 <find_write_ptr+0x234>
			if (read_buffer[b] != 0xFF) {
 8001118:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	@ 0x80e
 800111c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001120:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	2bff      	cmp	r3, #255	@ 0xff
 8001128:	d00e      	beq.n	8001148 <find_write_ptr+0x226>
				flash->next_free_column = b+1;
 800112a:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 800112e:	3301      	adds	r3, #1
 8001130:	b29a      	uxth	r2, r3
 8001132:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001136:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
				page_empty = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d
				break;
 8001146:	e00a      	b.n	800115e <find_write_ptr+0x23c>
		for (int16_t b = 2047; b >= 0; b--) {
 8001148:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	@ 0x80e
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 8001156:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	@ 0x80e
 800115a:	2b00      	cmp	r3, #0
 800115c:	dadc      	bge.n	8001118 <find_write_ptr+0x1f6>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 800115e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001162:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800116c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001170:	d809      	bhi.n	8001186 <find_write_ptr+0x264>
		flash->next_free_column = 512;
 8001172:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001176:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001180:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 8001184:	e049      	b.n	800121a <find_write_ptr+0x2f8>
	else if (flash->next_free_column <= 1024)
 8001186:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800118a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001198:	d809      	bhi.n	80011ae <find_write_ptr+0x28c>
		flash->next_free_column = 1024;
 800119a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800119e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a8:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 80011ac:	e035      	b.n	800121a <find_write_ptr+0x2f8>
	else if (flash->next_free_column <= 1536)
 80011ae:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011b2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80011bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80011c0:	d809      	bhi.n	80011d6 <find_write_ptr+0x2b4>
		flash->next_free_column = 1536;
 80011c2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011c6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80011d0:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 80011d4:	e021      	b.n	800121a <find_write_ptr+0x2f8>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 80011d6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011da:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80011e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011e8:	d217      	bcs.n	800121a <find_write_ptr+0x2f8>
		flash->next_free_column = 0;
 80011ea:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011ee:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		flash->current_page++;
 80011fa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80011fe:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001208:	3301      	adds	r3, #1
 800120a:	b29a      	uxth	r2, r3
 800120c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001210:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	}
}
 800121a:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	flash->cs_base = cs_base_in;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	flash->cs_pin = cs_pin_in;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
	flash->next_page_to_read = 0;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2200      	movs	r2, #0
 800124c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	flash->last_HAL_status = HAL_OK;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
	flash->last_write_failure_status = 0;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
	flash->last_erase_failure_status = 0;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217

	reset_flash(flash);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f000 f835 	bl	80012e0 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff fe1b 	bl	8000eb2 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff fe34 	bl	8000eea <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fe4d 	bl	8000f22 <find_write_ptr>
}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8001298:	239f      	movs	r3, #159	@ 0x9f
 800129a:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	f107 0110 	add.w	r1, r7, #16
 80012a4:	2203      	movs	r2, #3
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	2202      	movs	r2, #2
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fb3d 	bl	800092a <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 80012b0:	7b3b      	ldrb	r3, [r7, #12]
 80012b2:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 80012b4:	7b7b      	ldrb	r3, [r7, #13]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	7bba      	ldrb	r2, [r7, #14]
 80012bc:	4413      	add	r3, r2
 80012be:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2bef      	cmp	r3, #239	@ 0xef
 80012c4:	d106      	bne.n	80012d4 <ping_flash+0x44>
 80012c6:	8abb      	ldrh	r3, [r7, #20]
 80012c8:	f64a 2221 	movw	r2, #43553	@ 0xaa21
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d101      	bne.n	80012d4 <ping_flash+0x44>
		return 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <ping_flash+0x46>
	else
		return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fb75 	bl	80009d8 <flash_is_busy>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <reset_flash+0x18>
		return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e00d      	b.n	8001314 <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 80012f8:	23ff      	movs	r3, #255	@ 0xff
 80012fa:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2201      	movs	r2, #1
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fae0 	bl	80008ca <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 800130a:	4904      	ldr	r1, [pc, #16]	@ (800131c <reset_flash+0x3c>)
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff fb75 	bl	80009fc <wait_for_operation>

	return 1;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	0007a120 	.word	0x0007a120

08001320 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 8001330:	2300      	movs	r3, #0
 8001332:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 8001334:	e05a      	b.n	80013ec <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b29a      	uxth	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 8001342:	8a3a      	ldrh	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800134a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800134e:	429a      	cmp	r2, r3
 8001350:	dd05      	ble.n	800135e <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8001358:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800135c:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	18d1      	adds	r1, r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f8b3 0210 	ldrh.w	r0, [r3, #528]	@ 0x210
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8001370:	8a3a      	ldrh	r2, [r7, #16]
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff fd78 	bl	8000e6c <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <write_to_flash_contiguous+0x6c>
			write_failures++;
 8001386:	8a7b      	ldrh	r3, [r7, #18]
 8001388:	3301      	adds	r3, #1
 800138a:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 800138c:	8a3b      	ldrh	r3, [r7, #16]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800139a:	461a      	mov	r2, r3
 800139c:	8a3b      	ldrh	r3, [r7, #16]
 800139e:	4413      	add	r3, r2
 80013a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013a4:	da09      	bge.n	80013ba <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 80013ac:	8a3b      	ldrh	r3, [r7, #16]
 80013ae:	4413      	add	r3, r2
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 80013b8:	e018      	b.n	80013ec <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80013c0:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d105      	bne.n	80013d4 <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013ce:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 80013d2:	e00b      	b.n	80013ec <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80013e2:	3301      	adds	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	while (write_counter < num_bytes) {
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3a0      	bcc.n	8001336 <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 80013f4:	8a7b      	ldrh	r3, [r7, #18]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f923 	bl	8001658 <get_bytes_remaining>
 8001412:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	429a      	cmp	r2, r3
 800141a:	d901      	bls.n	8001420 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8001420:	2300      	movs	r3, #0
 8001422:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 8001424:	2300      	movs	r3, #0
 8001426:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8001430:	2b00      	cmp	r3, #0
 8001432:	d035      	beq.n	80014a0 <write_to_flash+0xa0>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001444:	d32c      	bcc.n	80014a0 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 800144c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001450:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001456:	e00e      	b.n	8001476 <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8001458:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	441a      	add	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8001464:	4619      	mov	r1, r3
 8001466:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001468:	440b      	add	r3, r1
 800146a:	7811      	ldrb	r1, [r2, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 8001470:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001472:	3301      	adds	r3, #1
 8001474:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001476:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001478:	8bfb      	ldrh	r3, [r7, #30]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3ec      	bcc.n	8001458 <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001484:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
		buffer_full = 1;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	4413      	add	r3, r2
 8001494:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 8001496:	8bfb      	ldrh	r3, [r7, #30]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 800149e:	e02a      	b.n	80014f6 <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014b0:	d221      	bcs.n	80014f6 <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80014b6:	e00e      	b.n	80014d6 <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 80014b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	441a      	add	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80014c4:	4619      	mov	r1, r3
 80014c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014c8:	440b      	add	r3, r1
 80014ca:	7811      	ldrb	r1, [r2, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 80014d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014d2:	3301      	adds	r3, #1
 80014d4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80014d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d8ec      	bhi.n	80014b8 <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f8b3 220e 	ldrh.w	r2, [r3, #526]	@ 0x20e
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e049      	b.n	800158a <write_to_flash+0x18a>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <write_to_flash+0x194>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001506:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4413      	add	r3, r2
 800150e:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fad4 	bl	8000abe <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 8001516:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00f      	beq.n	800153e <write_to_flash+0x13e>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001524:	4619      	mov	r1, r3
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fefa 	bl	8001320 <write_to_flash_contiguous>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001532:	4413      	add	r3, r2
 8001534:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		flash->write_buffer_size = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <write_to_flash+0x158>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fee9 	bl	8001320 <write_to_flash_contiguous>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001554:	4413      	add	r3, r2
 8001556:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}

	lock_flash(flash);
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fac8 	bl	8000aee <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 800155e:	2300      	movs	r3, #0
 8001560:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001562:	e009      	b.n	8001578 <write_to_flash+0x178>
		flash->write_buffer[i] = end_arr[i];
 8001564:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	441a      	add	r2, r3
 800156a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800156c:	7811      	ldrb	r1, [r2, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 8001572:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001574:	3301      	adds	r3, #1
 8001576:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001578:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800157a:	8afb      	ldrh	r3, [r7, #22]
 800157c:	429a      	cmp	r2, r3
 800157e:	d3f1      	bcc.n	8001564 <write_to_flash+0x164>
	}
	flash->write_buffer_size = end_size;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8afa      	ldrh	r2, [r7, #22]
 8001584:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e

	return write_failures;
 8001588:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e

}
 800158a:	4618      	mov	r0, r3
 800158c:	3730      	adds	r7, #48	@ 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	fffffe00 	.word	0xfffffe00

08001598 <reset_flash_read_pointer>:
	lock_flash(flash);

	return write_failures;
}

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fc2e 	bl	8000e32 <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	get_ECC_status(flash);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fbb5 	bl	8000d54 <get_ECC_status>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fa5d 	bl	8000abe <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8001604:	2300      	movs	r3, #0
 8001606:	81bb      	strh	r3, [r7, #12]
 8001608:	e011      	b.n	800162e <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 800160a:	89bb      	ldrh	r3, [r7, #12]
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fb6e 	bl	8000cf4 <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <erase_flash+0x36>
			erase_failures++;
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	3301      	adds	r3, #1
 8001626:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	81bb      	strh	r3, [r7, #12]
 800162e:	89bb      	ldrh	r3, [r7, #12]
 8001630:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8001634:	4293      	cmp	r3, r2
 8001636:	d9e8      	bls.n	800160a <erase_flash+0x18>
	}

	lock_flash(flash);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fa58 	bl	8000aee <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fc6f 	bl	8000f22 <find_write_ptr>
	flash->write_buffer_size = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e

	return erase_failures;
 800164c:	89fb      	ldrh	r3, [r7, #14]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001666:	02db      	lsls	r3, r3, #11
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f8b2 2212 	ldrh.w	r2, [r2, #530]	@ 0x212
 800166e:	441a      	add	r2, r3
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <get_bytes_remaining+0x30>)
 8001672:	1a9b      	subs	r3, r3, r2
			- flash->write_buffer_size;
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	f8b2 220e 	ldrh.w	r2, [r2, #526]	@ 0x20e
 800167a:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	07fe0000 	.word	0x07fe0000

0800168c <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 800168c:	b580      	push	{r7, lr}
 800168e:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 8001692:	af00      	add	r7, sp, #0
 8001694:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001698:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 800169c:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 800169e:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80016a2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	3304      	adds	r3, #4
 80016ac:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fb60 	bl	800ad78 <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 80016b8:	f107 0108 	add.w	r1, r7, #8
 80016bc:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 80016c0:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 80016c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	f7ff fe99 	bl	8001400 <write_to_flash>
}
 80016ce:	bf00      	nop
 80016d0:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016dc:	f000 fb56 	bl	8001d8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f000 fda8 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f81c 	bl	8001720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f000 f96c 	bl	80019c4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80016ec:	f000 f888 	bl	8001800 <MX_I2C2_Init>
  MX_SPI3_Init();
 80016f0:	f000 f8c6 	bl	8001880 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80016f4:	f000 f91a 	bl	800192c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016f8:	f006 fdbe 	bl	8008278 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016fc:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <main+0x3c>)
 80016fe:	2100      	movs	r1, #0
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <main+0x40>)
 8001702:	f006 fe03 	bl	800830c <osThreadNew>
 8001706:	4603      	mov	r3, r0
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <main+0x44>)
 800170a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800170c:	f006 fdd8 	bl	80082c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <main+0x38>
 8001714:	0800ae34 	.word	0x0800ae34
 8001718:	08001ae9 	.word	0x08001ae9
 800171c:	240001a0 	.word	0x240001a0

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b09c      	sub	sp, #112	@ 0x70
 8001724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172a:	224c      	movs	r2, #76	@ 0x4c
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f009 fb22 	bl	800ad78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2220      	movs	r2, #32
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f009 fb1c 	bl	800ad78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001740:	2002      	movs	r0, #2
 8001742:	f001 ff27 	bl	8003594 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <SystemClock_Config+0xdc>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001752:	4a2a      	ldr	r2, [pc, #168]	@ (80017fc <SystemClock_Config+0xdc>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6193      	str	r3, [r2, #24]
 800175a:	4b28      	ldr	r3, [pc, #160]	@ (80017fc <SystemClock_Config+0xdc>)
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001766:	bf00      	nop
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <SystemClock_Config+0xdc>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001774:	d1f8      	bne.n	8001768 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001776:	2302      	movs	r3, #2
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800177a:	2301      	movs	r3, #1
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800177e:	2340      	movs	r3, #64	@ 0x40
 8001780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001786:	2300      	movs	r3, #0
 8001788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800178a:	2304      	movs	r3, #4
 800178c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800178e:	230c      	movs	r3, #12
 8001790:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001796:	2303      	movs	r3, #3
 8001798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800179a:	2302      	movs	r3, #2
 800179c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800179e:	230c      	movs	r3, #12
 80017a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 ff2a 	bl	8003608 <HAL_RCC_OscConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017ba:	f000 fb13 	bl	8001de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	233f      	movs	r3, #63	@ 0x3f
 80017c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017d2:	2340      	movs	r3, #64	@ 0x40
 80017d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 faea 	bl	8003dbc <HAL_RCC_ClockConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80017ee:	f000 faf9 	bl	8001de4 <Error_Handler>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3770      	adds	r7, #112	@ 0x70
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	58024800 	.word	0x58024800

08001800 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001806:	4a1c      	ldr	r2, [pc, #112]	@ (8001878 <MX_I2C2_Init+0x78>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800180a:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <MX_I2C2_Init+0x74>)
 800180c:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <MX_I2C2_Init+0x7c>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001818:	2201      	movs	r2, #1
 800181a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <MX_I2C2_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001822:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <MX_I2C2_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800183a:	480e      	ldr	r0, [pc, #56]	@ (8001874 <MX_I2C2_Init+0x74>)
 800183c:	f001 f8c2 	bl	80029c4 <HAL_I2C_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001846:	f000 facd 	bl	8001de4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <MX_I2C2_Init+0x74>)
 800184e:	f001 fe09 	bl	8003464 <HAL_I2CEx_ConfigAnalogFilter>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001858:	f000 fac4 	bl	8001de4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	4805      	ldr	r0, [pc, #20]	@ (8001874 <MX_I2C2_Init+0x74>)
 8001860:	f001 fe4b 	bl	80034fa <HAL_I2CEx_ConfigDigitalFilter>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800186a:	f000 fabb 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24000030 	.word	0x24000030
 8001878:	40005800 	.word	0x40005800
 800187c:	00707cbb 	.word	0x00707cbb

08001880 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <MX_SPI3_Init+0xa4>)
 8001886:	4a28      	ldr	r2, [pc, #160]	@ (8001928 <MX_SPI3_Init+0xa8>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <MX_SPI3_Init+0xa4>)
 800188c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <MX_SPI3_Init+0xa4>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <MX_SPI3_Init+0xa4>)
 800189a:	2207      	movs	r2, #7
 800189c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018b4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80018b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018cc:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018d2:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018e0:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <MX_SPI3_Init+0xa4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MX_SPI3_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <MX_SPI3_Init+0xa4>)
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <MX_SPI3_Init+0xa4>)
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <MX_SPI3_Init+0xa4>)
 8001912:	f004 fba1 	bl	8006058 <HAL_SPI_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800191c:	f000 fa62 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24000084 	.word	0x24000084
 8001928:	40003c00 	.word	0x40003c00

0800192c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <MX_USART3_UART_Init+0x94>)
 8001934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800193c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001974:	4811      	ldr	r0, [pc, #68]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001976:	f005 f9dc 	bl	8006d32 <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001980:	f000 fa30 	bl	8001de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001984:	2100      	movs	r1, #0
 8001986:	480d      	ldr	r0, [pc, #52]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 8001988:	f006 fb77 	bl	800807a <HAL_UARTEx_SetTxFifoThreshold>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001992:	f000 fa27 	bl	8001de4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001996:	2100      	movs	r1, #0
 8001998:	4808      	ldr	r0, [pc, #32]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 800199a:	f006 fbac 	bl	80080f6 <HAL_UARTEx_SetRxFifoThreshold>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019a4:	f000 fa1e 	bl	8001de4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_USART3_UART_Init+0x90>)
 80019aa:	f006 fb2d 	bl	8008008 <HAL_UARTEx_DisableFifoMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019b4:	f000 fa16 	bl	8001de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2400010c 	.word	0x2400010c
 80019c0:	40004800 	.word	0x40004800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019da:	4b37      	ldr	r3, [pc, #220]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e0:	4a35      	ldr	r2, [pc, #212]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ea:	4b33      	ldr	r3, [pc, #204]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fe:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a08:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a16:	4b28      	ldr	r3, [pc, #160]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1c:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a26:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	4a17      	ldr	r2, [pc, #92]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_GPIO_Init+0xf4>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2104      	movs	r1, #4
 8001a74:	4811      	ldr	r0, [pc, #68]	@ (8001abc <MX_GPIO_Init+0xf8>)
 8001a76:	f000 ff8b 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Mode_Select_Pin */
  GPIO_InitStruct.Pin = Mode_Select_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode_Select_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <MX_GPIO_Init+0xfc>)
 8001a8e:	f000 fdbf 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001a92:	2304      	movs	r3, #4
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4804      	ldr	r0, [pc, #16]	@ (8001abc <MX_GPIO_Init+0xf8>)
 8001aaa:	f000 fdb1 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	@ 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58020c00 	.word	0x58020c00
 8001ac0:	58021800 	.word	0x58021800

08001ac4 <getTimestamp>:
        float accel[3];
        float gyro[3];
    } values;
};

uint64_t getTimestamp(void) {
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	uint32_t timestamp = HAL_GetTick();
 8001aca:	f000 fc39 	bl	8002340 <HAL_GetTick>
 8001ace:	6078      	str	r0, [r7, #4]
	return (uint64_t)timestamp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	4615      	mov	r5, r2
 8001ad8:	4622      	mov	r2, r4
 8001ada:	462b      	mov	r3, r5
}
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ae8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	f5ad 5d92 	sub.w	sp, sp, #4672	@ 0x1240
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001af4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001af8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  /* Infinite loop */
	  //TickType_t xLastWakeTime;
	  //const TickType_t xFrequency = 100; //Milliseconds
	  //xLastWakeTime = xTaskGetTickCount();
	  float pres = 0.0;
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	f241 223c 	movw	r2, #4668	@ 0x123c
 8001b02:	443a      	add	r2, r7
 8001b04:	6013      	str	r3, [r2, #0]
	  float temp = 0.0;
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	f241 2238 	movw	r2, #4664	@ 0x1238
 8001b0e:	443a      	add	r2, r7
 8001b10:	6013      	str	r3, [r2, #0]
	  #define block_offset (uint16_t)100*40
	  Accel accel = {0};
 8001b12:	f241 2328 	movw	r3, #4648	@ 0x1228
 8001b16:	443b      	add	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
	  AngRate gyro = {0};
 8001b20:	f241 231c 	movw	r3, #4636	@ 0x121c
 8001b24:	443b      	add	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
	  IMU IMU1 = {0};
 8001b2e:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 8001b32:	443b      	add	r3, r7
 8001b34:	2220      	movs	r2, #32
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f009 f91d 	bl	800ad78 <memset>
	  IMU1.hi2c = &hi2c2;
 8001b3e:	4b8c      	ldr	r3, [pc, #560]	@ (8001d70 <StartDefaultTask+0x288>)
 8001b40:	f241 12fc 	movw	r2, #4604	@ 0x11fc
 8001b44:	443a      	add	r2, r7
 8001b46:	6013      	str	r3, [r2, #0]
	  IMU1.I2C_TIMEOUT = 1000;
 8001b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4c:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 8001b50:	8013      	strh	r3, [r2, #0]
	  IMU1.G_x_offset = 0;
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	f241 2210 	movw	r2, #4624	@ 0x1210
 8001b5a:	443a      	add	r2, r7
 8001b5c:	6013      	str	r3, [r2, #0]
	  IMU1.G_y_offset = 0;
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	f241 2214 	movw	r2, #4628	@ 0x1214
 8001b66:	443a      	add	r2, r7
 8001b68:	6013      	str	r3, [r2, #0]
	  IMU1.G_z_offset = 0;
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f241 2218 	movw	r2, #4632	@ 0x1218
 8001b72:	443a      	add	r2, r7
 8001b74:	6013      	str	r3, [r2, #0]
	  IMU1.XL_x_offset = 0;
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	f241 2204 	movw	r2, #4612	@ 0x1204
 8001b7e:	443a      	add	r2, r7
 8001b80:	6013      	str	r3, [r2, #0]
	  IMU1.XL_y_offset = 0;
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f241 2208 	movw	r2, #4616	@ 0x1208
 8001b8a:	443a      	add	r2, r7
 8001b8c:	6013      	str	r3, [r2, #0]
	  IMU1.XL_z_offset = 0;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	f241 220c 	movw	r2, #4620	@ 0x120c
 8001b96:	443a      	add	r2, r7
 8001b98:	6013      	str	r3, [r2, #0]
	  //BAR1.CS_GPIO_Pin = GPIO_PIN_4;
	  //BAR1.pres_offset = 0;
	  //BAR1.alt_offset = 0;
	  union Data data;
	  W25N01GV_Flash flash;
	  init_flash(&flash, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 8001b9a:	f607 70b8 	addw	r0, r7, #4024	@ 0xfb8
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	4a74      	ldr	r2, [pc, #464]	@ (8001d74 <StartDefaultTask+0x28c>)
 8001ba2:	4975      	ldr	r1, [pc, #468]	@ (8001d78 <StartDefaultTask+0x290>)
 8001ba4:	f7ff fb3d 	bl	8001222 <init_flash>
	  if (IMU_init(&IMU1)) {
 8001ba8:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 8001bac:	443b      	add	r3, r7
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fdd2 	bl	8000758 <IMU_init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <StartDefaultTask+0xd6>
	  	Error_Handler(); //We have not read the who am I register, so something is probably wrong
 8001bba:	f000 f913 	bl	8001de4 <Error_Handler>
	  }
	  //if (BAR_init(&BAR1)) {
	  //  Error_Handler(); //We have not read the who am I register, so something is probably wrong
	  //}
	  // Detect if the jumper is on read or write mode
	  if (HAL_GPIO_ReadPin(Mode_Select_GPIO_Port, Mode_Select_Pin)) { // Read mode
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	486e      	ldr	r0, [pc, #440]	@ (8001d7c <StartDefaultTask+0x294>)
 8001bc2:	f000 fecd 	bl	8002960 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d031      	beq.n	8001c30 <StartDefaultTask+0x148>
	    //finish_flash_write(&flash); // Finish writing, if we haven't already
	    osDelay(10000); // 10 second delay so that the client can setup
 8001bcc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001bd0:	f006 fc2e 	bl	8008430 <osDelay>
	    uint32_t page = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f241 2234 	movw	r2, #4660	@ 0x1234
 8001bda:	443a      	add	r2, r7
 8001bdc:	6013      	str	r3, [r2, #0]
	    uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	    reset_flash_read_pointer(&flash);
 8001bde:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fcd8 	bl	8001598 <reset_flash_read_pointer>
	    while (page < flash.current_page) {
 8001be8:	e014      	b.n	8001c14 <StartDefaultTask+0x12c>
	  	  read_next_2KB_from_flash(&flash, read_buffer);
 8001bea:	4b65      	ldr	r3, [pc, #404]	@ (8001d80 <StartDefaultTask+0x298>)
 8001bec:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f607 72b8 	addw	r2, r7, #4024	@ 0xfb8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f7ff fcdb 	bl	80015b4 <read_next_2KB_from_flash>
	  	  HAL_UART_Transmit(&huart3, read_buffer, sizeof(read_buffer), 1000);
 8001bfe:	4960      	ldr	r1, [pc, #384]	@ (8001d80 <StartDefaultTask+0x298>)
 8001c00:	f501 5392 	add.w	r3, r1, #4672	@ 0x1240
 8001c04:	19d9      	adds	r1, r3, r7
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c0e:	485d      	ldr	r0, [pc, #372]	@ (8001d84 <StartDefaultTask+0x29c>)
 8001c10:	f005 f8df 	bl	8006dd2 <HAL_UART_Transmit>
	    while (page < flash.current_page) {
 8001c14:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001c18:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8001c1c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001c20:	461a      	mov	r2, r3
 8001c22:	f241 2334 	movw	r3, #4660	@ 0x1234
 8001c26:	443b      	add	r3, r7
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d3dd      	bcc.n	8001bea <StartDefaultTask+0x102>
	  	  write_to_flash(&flash, data.bytes, 40);
	    }
	    finish_flash_write(&flash);
	  }
  /* USER CODE END 5 */
}
 8001c2e:	e09a      	b.n	8001d66 <StartDefaultTask+0x27e>
	    erase_flash(&flash);
 8001c30:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fcdc 	bl	80015f2 <erase_flash>
	    add_test_delimiter(&flash);
 8001c3a:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fd24 	bl	800168c <add_test_delimiter>
	    uint8_t flash_offset[block_offset] = {0x00};
 8001c44:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c48:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	3304      	adds	r3, #4
 8001c52:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f009 f88d 	bl	800ad78 <memset>
	    write_to_flash(&flash, flash_offset, block_offset);
 8001c5e:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <StartDefaultTask+0x298>)
 8001c60:	f503 5392 	add.w	r3, r3, #4672	@ 0x1240
 8001c64:	443b      	add	r3, r7
 8001c66:	f607 70b8 	addw	r0, r7, #4024	@ 0xfb8
 8001c6a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7ff fbc6 	bl	8001400 <write_to_flash>
	    uint8_t data_start_header[10] = {0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00};
 8001c74:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8001c78:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8001c7c:	4a42      	ldr	r2, [pc, #264]	@ (8001d88 <StartDefaultTask+0x2a0>)
 8001c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c80:	c303      	stmia	r3!, {r0, r1}
 8001c82:	801a      	strh	r2, [r3, #0]
	    write_to_flash(&flash, data_start_header, 10);
 8001c84:	f607 71ac 	addw	r1, r7, #4012	@ 0xfac
 8001c88:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fbb6 	bl	8001400 <write_to_flash>
	  	  osDelay(100);
 8001c94:	2064      	movs	r0, #100	@ 0x64
 8001c96:	f006 fbcb 	bl	8008430 <osDelay>
	  	  IMU_getAccel(&IMU1, &accel);
 8001c9a:	f241 2228 	movw	r2, #4648	@ 0x1228
 8001c9e:	443a      	add	r2, r7
 8001ca0:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 8001ca4:	443b      	add	r3, r7
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fd8c 	bl	80007c6 <IMU_getAccel>
	  	  IMU_getAngRate(&IMU1, &gyro);
 8001cae:	f241 221c 	movw	r2, #4636	@ 0x121c
 8001cb2:	443a      	add	r2, r7
 8001cb4:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 8001cb8:	443b      	add	r3, r7
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fdc3 	bl	8000848 <IMU_getAngRate>
	  	  data.values.timestamp = getTimestamp();
 8001cc2:	f7ff feff 	bl	8001ac4 <getTimestamp>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 8001cce:	4439      	add	r1, r7
 8001cd0:	e9c1 2300 	strd	r2, r3, [r1]
	  	  data.values.pressure = pres;
 8001cd4:	f241 233c 	movw	r3, #4668	@ 0x123c
 8001cd8:	443b      	add	r3, r7
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f241 12d8 	movw	r2, #4568	@ 0x11d8
 8001ce0:	443a      	add	r2, r7
 8001ce2:	6013      	str	r3, [r2, #0]
	  	  data.values.temperature = temp;
 8001ce4:	f241 2338 	movw	r3, #4664	@ 0x1238
 8001ce8:	443b      	add	r3, r7
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f241 12dc 	movw	r2, #4572	@ 0x11dc
 8001cf0:	443a      	add	r2, r7
 8001cf2:	6013      	str	r3, [r2, #0]
	  	  data.values.accel[0] = accel.XL_x;
 8001cf4:	f241 2328 	movw	r3, #4648	@ 0x1228
 8001cf8:	443b      	add	r3, r7
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 8001d00:	6013      	str	r3, [r2, #0]
	  	  data.values.accel[1] = accel.XL_y;
 8001d02:	f241 232c 	movw	r3, #4652	@ 0x122c
 8001d06:	443b      	add	r3, r7
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f241 12e4 	movw	r2, #4580	@ 0x11e4
 8001d0e:	443a      	add	r2, r7
 8001d10:	6013      	str	r3, [r2, #0]
	  	  data.values.accel[2] = accel.XL_z;
 8001d12:	f241 2330 	movw	r3, #4656	@ 0x1230
 8001d16:	443b      	add	r3, r7
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f241 12e8 	movw	r2, #4584	@ 0x11e8
 8001d1e:	443a      	add	r2, r7
 8001d20:	6013      	str	r3, [r2, #0]
	  	  data.values.gyro[0] = gyro.G_x;
 8001d22:	f241 231c 	movw	r3, #4636	@ 0x121c
 8001d26:	443b      	add	r3, r7
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f241 12ec 	movw	r2, #4588	@ 0x11ec
 8001d2e:	443a      	add	r2, r7
 8001d30:	6013      	str	r3, [r2, #0]
	  	  data.values.gyro[1] = gyro.G_y;
 8001d32:	f507 5391 	add.w	r3, r7, #4640	@ 0x1220
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f241 12f0 	movw	r2, #4592	@ 0x11f0
 8001d3c:	443a      	add	r2, r7
 8001d3e:	6013      	str	r3, [r2, #0]
	  	  data.values.gyro[2] = gyro.G_z;
 8001d40:	f241 2324 	movw	r3, #4644	@ 0x1224
 8001d44:	443b      	add	r3, r7
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f241 12f4 	movw	r2, #4596	@ 0x11f4
 8001d4c:	443a      	add	r2, r7
 8001d4e:	6013      	str	r3, [r2, #0]
	  	  write_to_flash(&flash, data.bytes, 40);
 8001d50:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 8001d54:	4439      	add	r1, r7
 8001d56:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8001d5a:	2228      	movs	r2, #40	@ 0x28
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fb4f 	bl	8001400 <write_to_flash>
	  	  osDelay(100);
 8001d62:	bf00      	nop
 8001d64:	e796      	b.n	8001c94 <StartDefaultTask+0x1ac>
}
 8001d66:	f507 5792 	add.w	r7, r7, #4672	@ 0x1240
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	24000030 	.word	0x24000030
 8001d74:	58020c00 	.word	0x58020c00
 8001d78:	24000084 	.word	0x24000084
 8001d7c:	58021800 	.word	0x58021800
 8001d80:	ffffedcc 	.word	0xffffedcc
 8001d84:	2400010c 	.word	0x2400010c
 8001d88:	0800ae10 	.word	0x0800ae10

08001d8c <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d92:	463b      	mov	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d9e:	f000 fbbf 	bl	8002520 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001da2:	2301      	movs	r3, #1
 8001da4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001dae:	231f      	movs	r3, #31
 8001db0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001db2:	2387      	movs	r3, #135	@ 0x87
 8001db4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fbdd 	bl	8002590 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001dd6:	2004      	movs	r0, #4
 8001dd8:	f000 fbba 	bl	8002550 <HAL_MPU_Enable>

}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de8:	b672      	cpsid	i
}
 8001dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <Error_Handler+0x8>

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <HAL_MspInit+0x38>)
 8001df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <HAL_MspInit+0x38>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <HAL_MspInit+0x38>)
 8001e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	210f      	movs	r1, #15
 8001e18:	f06f 0001 	mvn.w	r0, #1
 8001e1c:	f000 fb59 	bl	80024d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58024400 	.word	0x58024400

08001e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0b8      	sub	sp, #224	@ 0xe0
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	22b8      	movs	r2, #184	@ 0xb8
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f008 ff93 	bl	800ad78 <memset>
  if(hi2c->Instance==I2C2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a26      	ldr	r2, [pc, #152]	@ (8001ef0 <HAL_I2C_MspInit+0xc4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d145      	bne.n	8001ee8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e5c:	f04f 0208 	mov.w	r2, #8
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fb2e 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001e7e:	f7ff ffb1 	bl	8001de4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_I2C_MspInit+0xc8>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e88:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_I2C_MspInit+0xc8>)
 8001e8a:	f043 0320 	orr.w	r3, r3, #32
 8001e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_I2C_MspInit+0xc8>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ebe:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <HAL_I2C_MspInit+0xcc>)
 8001ec6:	f000 fba3 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_I2C_MspInit+0xc8>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed0:	4a08      	ldr	r2, [pc, #32]	@ (8001ef4 <HAL_I2C_MspInit+0xc8>)
 8001ed2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_I2C_MspInit+0xc8>)
 8001edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ee0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001ee8:	bf00      	nop
 8001eea:	37e0      	adds	r7, #224	@ 0xe0
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40005800 	.word	0x40005800
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58021400 	.word	0x58021400

08001efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0b8      	sub	sp, #224	@ 0xe0
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	22b8      	movs	r2, #184	@ 0xb8
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f008 ff2b 	bl	800ad78 <memset>
  if(hspi->Instance==SPI3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <HAL_SPI_MspInit+0xc4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d145      	bne.n	8001fb8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001f2c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4618      	mov	r0, r3
 8001f42:	f002 fac7 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f4c:	f7ff ff4a 	bl	8001de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_SPI_MspInit+0xc8>)
 8001f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f56:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_SPI_MspInit+0xc8>)
 8001f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f60:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_SPI_MspInit+0xc8>)
 8001f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_SPI_MspInit+0xc8>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f74:	4a13      	ldr	r2, [pc, #76]	@ (8001fc4 <HAL_SPI_MspInit+0xc8>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <HAL_SPI_MspInit+0xc8>)
 8001f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f8c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001f90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fa6:	2306      	movs	r3, #6
 8001fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_SPI_MspInit+0xcc>)
 8001fb4:	f000 fb2c 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001fb8:	bf00      	nop
 8001fba:	37e0      	adds	r7, #224	@ 0xe0
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40003c00 	.word	0x40003c00
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	58020800 	.word	0x58020800

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0b8      	sub	sp, #224	@ 0xe0
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	22b8      	movs	r2, #184	@ 0xb8
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f008 fec3 	bl	800ad78 <memset>
  if(huart->Instance==USART3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a27      	ldr	r2, [pc, #156]	@ (8002094 <HAL_UART_MspInit+0xc8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d146      	bne.n	800208a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ffc:	f04f 0202 	mov.w	r2, #2
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fa5e 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800201e:	f7ff fee1 	bl	8001de4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_UART_MspInit+0xcc>)
 8002024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_UART_MspInit+0xcc>)
 800202a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_UART_MspInit+0xcc>)
 8002034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_UART_MspInit+0xcc>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002046:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <HAL_UART_MspInit+0xcc>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_UART_MspInit+0xcc>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800205e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002062:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002078:	2307      	movs	r3, #7
 800207a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	@ (800209c <HAL_UART_MspInit+0xd0>)
 8002086:	f000 fac3 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800208a:	bf00      	nop
 800208c:	37e0      	adds	r7, #224	@ 0xe0
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40004800 	.word	0x40004800
 8002098:	58024400 	.word	0x58024400
 800209c:	58020400 	.word	0x58020400

080020a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <NMI_Handler+0x4>

080020a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <HardFault_Handler+0x4>

080020b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <MemManage_Handler+0x4>

080020b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020da:	f000 f91d 	bl	8002318 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020de:	f007 fdcf 	bl	8009c80 <xTaskGetSchedulerState>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020e8:	f008 fbc6 	bl	800a878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f4:	4b32      	ldr	r3, [pc, #200]	@ (80021c0 <SystemInit+0xd0>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	4a31      	ldr	r2, [pc, #196]	@ (80021c0 <SystemInit+0xd0>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002104:	4b2f      	ldr	r3, [pc, #188]	@ (80021c4 <SystemInit+0xd4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	2b06      	cmp	r3, #6
 800210e:	d807      	bhi.n	8002120 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002110:	4b2c      	ldr	r3, [pc, #176]	@ (80021c4 <SystemInit+0xd4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 030f 	bic.w	r3, r3, #15
 8002118:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <SystemInit+0xd4>)
 800211a:	f043 0307 	orr.w	r3, r3, #7
 800211e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002120:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <SystemInit+0xd8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a28      	ldr	r2, [pc, #160]	@ (80021c8 <SystemInit+0xd8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800212c:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <SystemInit+0xd8>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002132:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <SystemInit+0xd8>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4924      	ldr	r1, [pc, #144]	@ (80021c8 <SystemInit+0xd8>)
 8002138:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <SystemInit+0xdc>)
 800213a:	4013      	ands	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800213e:	4b21      	ldr	r3, [pc, #132]	@ (80021c4 <SystemInit+0xd4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <SystemInit+0xd4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 030f 	bic.w	r3, r3, #15
 8002152:	4a1c      	ldr	r2, [pc, #112]	@ (80021c4 <SystemInit+0xd4>)
 8002154:	f043 0307 	orr.w	r3, r3, #7
 8002158:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800215a:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <SystemInit+0xd8>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <SystemInit+0xd8>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <SystemInit+0xd8>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <SystemInit+0xd8>)
 800216e:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <SystemInit+0xe0>)
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <SystemInit+0xd8>)
 8002174:	4a17      	ldr	r2, [pc, #92]	@ (80021d4 <SystemInit+0xe4>)
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <SystemInit+0xd8>)
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <SystemInit+0xe8>)
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <SystemInit+0xd8>)
 8002180:	2200      	movs	r2, #0
 8002182:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002184:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <SystemInit+0xd8>)
 8002186:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <SystemInit+0xe8>)
 8002188:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800218a:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <SystemInit+0xd8>)
 800218c:	2200      	movs	r2, #0
 800218e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002190:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <SystemInit+0xd8>)
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <SystemInit+0xe8>)
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <SystemInit+0xd8>)
 8002198:	2200      	movs	r2, #0
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <SystemInit+0xd8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <SystemInit+0xd8>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <SystemInit+0xd8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <SystemInit+0xec>)
 80021b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80021b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	52002000 	.word	0x52002000
 80021c8:	58024400 	.word	0x58024400
 80021cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80021d0:	02020200 	.word	0x02020200
 80021d4:	01ff0000 	.word	0x01ff0000
 80021d8:	01010280 	.word	0x01010280
 80021dc:	52004000 	.word	0x52004000

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002218 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021e4:	f7ff ff84 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	@ (8002220 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	@ (800222c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f008 fdbb 	bl	800ad88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7ff fa61 	bl	80016d8 <main>
  bx  lr
 8002216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800221c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002220:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002224:	0800aea0 	.word	0x0800aea0
  ldr r2, =_sbss
 8002228:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800222c:	24004af8 	.word	0x24004af8

08002230 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC3_IRQHandler>
	...

08002234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223a:	2003      	movs	r0, #3
 800223c:	f000 f93e 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002240:	f001 ff72 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_Init+0x68>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	4913      	ldr	r1, [pc, #76]	@ (80022a0 <HAL_Init+0x6c>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_Init+0x68>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <HAL_Init+0x6c>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	4a0b      	ldr	r2, [pc, #44]	@ (80022a4 <HAL_Init+0x70>)
 8002276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002278:	4a0b      	ldr	r2, [pc, #44]	@ (80022a8 <HAL_Init+0x74>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227e:	200f      	movs	r0, #15
 8002280:	f000 f814 	bl	80022ac <HAL_InitTick>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e002      	b.n	8002294 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800228e:	f7ff fdaf 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	58024400 	.word	0x58024400
 80022a0:	0800ae58 	.word	0x0800ae58
 80022a4:	24000004 	.word	0x24000004
 80022a8:	24000000 	.word	0x24000000

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022b4:	4b15      	ldr	r3, [pc, #84]	@ (800230c <HAL_InitTick+0x60>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e021      	b.n	8002304 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022c0:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <HAL_InitTick+0x64>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_InitTick+0x60>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f915 	bl	8002506 <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f8ed 	bl	80024d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	@ (8002314 <HAL_InitTick+0x68>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2400000c 	.word	0x2400000c
 8002310:	24000000 	.word	0x24000000
 8002314:	24000008 	.word	0x24000008

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	@ (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	2400000c 	.word	0x2400000c
 800233c:	240001a4 	.word	0x240001a4

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	@ (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	240001a4 	.word	0x240001a4

08002358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002368:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <__NVIC_SetPriorityGrouping+0x40>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <__NVIC_SetPriorityGrouping+0x44>)
 8002382:	4313      	orrs	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <__NVIC_SetPriorityGrouping+0x40>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	05fa0000 	.word	0x05fa0000

080023a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a4:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <__NVIC_GetPriorityGrouping+0x18>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	f003 0307 	and.w	r3, r3, #7
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	@ (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	@ (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	@ 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff8e 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	@ (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff47 	bl	8002358 <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff5e 	bl	80023a0 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff90 	bl	8002410 <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5f 	bl	80023bc <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffb2 	bl	8002478 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002524:	f3bf 8f5f 	dmb	sy
}
 8002528:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800252a:	4b07      	ldr	r3, [pc, #28]	@ (8002548 <HAL_MPU_Disable+0x28>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	4a06      	ldr	r2, [pc, #24]	@ (8002548 <HAL_MPU_Disable+0x28>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002534:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002536:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_MPU_Disable+0x2c>)
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	e000ed90 	.word	0xe000ed90

08002550 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002558:	4a0b      	ldr	r2, [pc, #44]	@ (8002588 <HAL_MPU_Enable+0x38>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_MPU_Enable+0x3c>)
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <HAL_MPU_Enable+0x3c>)
 8002568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800256e:	f3bf 8f4f 	dsb	sy
}
 8002572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002574:	f3bf 8f6f 	isb	sy
}
 8002578:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed90 	.word	0xe000ed90
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	785a      	ldrb	r2, [r3, #1]
 800259c:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_MPU_ConfigRegion+0x7c>)
 800259e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025a0:	4b1a      	ldr	r3, [pc, #104]	@ (800260c <HAL_MPU_ConfigRegion+0x7c>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4a19      	ldr	r2, [pc, #100]	@ (800260c <HAL_MPU_ConfigRegion+0x7c>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025ac:	4a17      	ldr	r2, [pc, #92]	@ (800260c <HAL_MPU_ConfigRegion+0x7c>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7b1b      	ldrb	r3, [r3, #12]
 80025b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7adb      	ldrb	r3, [r3, #11]
 80025be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7a9b      	ldrb	r3, [r3, #10]
 80025c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7b5b      	ldrb	r3, [r3, #13]
 80025ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7b9b      	ldrb	r3, [r3, #14]
 80025d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7bdb      	ldrb	r3, [r3, #15]
 80025de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7a5b      	ldrb	r3, [r3, #9]
 80025e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7a1b      	ldrb	r3, [r3, #8]
 80025ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f8:	4a04      	ldr	r2, [pc, #16]	@ (800260c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025fc:	6113      	str	r3, [r2, #16]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed90 	.word	0xe000ed90

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800261e:	4b86      	ldr	r3, [pc, #536]	@ (8002838 <HAL_GPIO_Init+0x228>)
 8002620:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002622:	e18c      	b.n	800293e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 817e 	beq.w	8002938 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d005      	beq.n	8002654 <HAL_GPIO_Init+0x44>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d130      	bne.n	80026b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800268a:	2201      	movs	r2, #1
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0201 	and.w	r2, r3, #1
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d017      	beq.n	80026f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d123      	bne.n	8002746 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	08da      	lsrs	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3208      	adds	r2, #8
 8002706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80d8 	beq.w	8002938 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002788:	4b2c      	ldr	r3, [pc, #176]	@ (800283c <HAL_GPIO_Init+0x22c>)
 800278a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800278e:	4a2b      	ldr	r2, [pc, #172]	@ (800283c <HAL_GPIO_Init+0x22c>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002798:	4b28      	ldr	r3, [pc, #160]	@ (800283c <HAL_GPIO_Init+0x22c>)
 800279a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a6:	4a26      	ldr	r2, [pc, #152]	@ (8002840 <HAL_GPIO_Init+0x230>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002844 <HAL_GPIO_Init+0x234>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d04a      	beq.n	8002868 <HAL_GPIO_Init+0x258>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <HAL_GPIO_Init+0x238>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d02b      	beq.n	8002832 <HAL_GPIO_Init+0x222>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <HAL_GPIO_Init+0x23c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d025      	beq.n	800282e <HAL_GPIO_Init+0x21e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002850 <HAL_GPIO_Init+0x240>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01f      	beq.n	800282a <HAL_GPIO_Init+0x21a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a19      	ldr	r2, [pc, #100]	@ (8002854 <HAL_GPIO_Init+0x244>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d019      	beq.n	8002826 <HAL_GPIO_Init+0x216>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_GPIO_Init+0x248>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0x212>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a17      	ldr	r2, [pc, #92]	@ (800285c <HAL_GPIO_Init+0x24c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00d      	beq.n	800281e <HAL_GPIO_Init+0x20e>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a16      	ldr	r2, [pc, #88]	@ (8002860 <HAL_GPIO_Init+0x250>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <HAL_GPIO_Init+0x20a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a15      	ldr	r2, [pc, #84]	@ (8002864 <HAL_GPIO_Init+0x254>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d101      	bne.n	8002816 <HAL_GPIO_Init+0x206>
 8002812:	2309      	movs	r3, #9
 8002814:	e029      	b.n	800286a <HAL_GPIO_Init+0x25a>
 8002816:	230a      	movs	r3, #10
 8002818:	e027      	b.n	800286a <HAL_GPIO_Init+0x25a>
 800281a:	2307      	movs	r3, #7
 800281c:	e025      	b.n	800286a <HAL_GPIO_Init+0x25a>
 800281e:	2306      	movs	r3, #6
 8002820:	e023      	b.n	800286a <HAL_GPIO_Init+0x25a>
 8002822:	2305      	movs	r3, #5
 8002824:	e021      	b.n	800286a <HAL_GPIO_Init+0x25a>
 8002826:	2304      	movs	r3, #4
 8002828:	e01f      	b.n	800286a <HAL_GPIO_Init+0x25a>
 800282a:	2303      	movs	r3, #3
 800282c:	e01d      	b.n	800286a <HAL_GPIO_Init+0x25a>
 800282e:	2302      	movs	r3, #2
 8002830:	e01b      	b.n	800286a <HAL_GPIO_Init+0x25a>
 8002832:	2301      	movs	r3, #1
 8002834:	e019      	b.n	800286a <HAL_GPIO_Init+0x25a>
 8002836:	bf00      	nop
 8002838:	58000080 	.word	0x58000080
 800283c:	58024400 	.word	0x58024400
 8002840:	58000400 	.word	0x58000400
 8002844:	58020000 	.word	0x58020000
 8002848:	58020400 	.word	0x58020400
 800284c:	58020800 	.word	0x58020800
 8002850:	58020c00 	.word	0x58020c00
 8002854:	58021000 	.word	0x58021000
 8002858:	58021400 	.word	0x58021400
 800285c:	58021800 	.word	0x58021800
 8002860:	58021c00 	.word	0x58021c00
 8002864:	58022400 	.word	0x58022400
 8002868:	2300      	movs	r3, #0
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f002 0203 	and.w	r2, r2, #3
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	4093      	lsls	r3, r2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800287a:	4938      	ldr	r1, [pc, #224]	@ (800295c <HAL_GPIO_Init+0x34c>)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	3302      	adds	r3, #2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	3301      	adds	r3, #1
 800293c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f ae6b 	bne.w	8002624 <HAL_GPIO_Init+0x14>
  }
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	3724      	adds	r7, #36	@ 0x24
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	58000400 	.word	0x58000400

08002960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e001      	b.n	8002982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
 800299c:	4613      	mov	r3, r2
 800299e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a0:	787b      	ldrb	r3, [r7, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029ac:	e003      	b.n	80029b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	041a      	lsls	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	619a      	str	r2, [r3, #24]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e08b      	b.n	8002aee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fa1e 	bl	8001e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	e006      	b.n	8002a4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d108      	bne.n	8002a66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	e007      	b.n	8002a76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_I2C_Init+0x134>)
 8002a82:	430b      	orrs	r3, r1
 8002a84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69d9      	ldr	r1, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	02008000 	.word	0x02008000

08002afc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	461a      	mov	r2, r3
 8002b08:	460b      	mov	r3, r1
 8002b0a:	817b      	strh	r3, [r7, #10]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	f040 80fd 	bne.w	8002d18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_I2C_Master_Transmit+0x30>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e0f6      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x21e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b34:	f7ff fc04 	bl	8002340 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2319      	movs	r3, #25
 8002b40:	2201      	movs	r2, #1
 8002b42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa0a 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0e1      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2221      	movs	r2, #33	@ 0x21
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2210      	movs	r2, #16
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	893a      	ldrh	r2, [r7, #8]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2bff      	cmp	r3, #255	@ 0xff
 8002b86:	d906      	bls.n	8002b96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	22ff      	movs	r2, #255	@ 0xff
 8002b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e007      	b.n	8002ba6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ba4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d024      	beq.n	8002bf8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	4b4e      	ldr	r3, [pc, #312]	@ (8002d24 <HAL_I2C_Master_Transmit+0x228>)
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fc05 	bl	8003400 <I2C_TransferConfig>
 8002bf6:	e066      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	8979      	ldrh	r1, [r7, #10]
 8002c00:	4b48      	ldr	r3, [pc, #288]	@ (8002d24 <HAL_I2C_Master_Transmit+0x228>)
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fbfa 	bl	8003400 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c0c:	e05b      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	6a39      	ldr	r1, [r7, #32]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f9fd 	bl	8003012 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07b      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d034      	beq.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ca>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d130      	bne.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2180      	movs	r1, #128	@ 0x80
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f976 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e04d      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2bff      	cmp	r3, #255	@ 0xff
 8002c86:	d90e      	bls.n	8002ca6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	22ff      	movs	r2, #255	@ 0xff
 8002c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fbae 	bl	8003400 <I2C_TransferConfig>
 8002ca4:	e00f      	b.n	8002cc6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fb9d 	bl	8003400 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d19e      	bne.n	8002c0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f9e3 	bl	80030a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e01a      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <HAL_I2C_Master_Transmit+0x22c>)
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	80002000 	.word	0x80002000
 8002d28:	fe00e800 	.word	0xfe00e800

08002d2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	f040 80db 	bne.w	8002f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_I2C_Master_Receive+0x30>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e0d4      	b.n	8002f06 <HAL_I2C_Master_Receive+0x1da>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d64:	f7ff faec 	bl	8002340 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2319      	movs	r3, #25
 8002d70:	2201      	movs	r2, #1
 8002d72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8f2 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0bf      	b.n	8002f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2222      	movs	r2, #34	@ 0x22
 8002d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2210      	movs	r2, #16
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	893a      	ldrh	r2, [r7, #8]
 8002da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2bff      	cmp	r3, #255	@ 0xff
 8002db6:	d90e      	bls.n	8002dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	22ff      	movs	r2, #255	@ 0xff
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	8979      	ldrh	r1, [r7, #10]
 8002dc6:	4b52      	ldr	r3, [pc, #328]	@ (8002f10 <HAL_I2C_Master_Receive+0x1e4>)
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fb16 	bl	8003400 <I2C_TransferConfig>
 8002dd4:	e06d      	b.n	8002eb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	8979      	ldrh	r1, [r7, #10]
 8002de8:	4b49      	ldr	r3, [pc, #292]	@ (8002f10 <HAL_I2C_Master_Receive+0x1e4>)
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fb05 	bl	8003400 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002df6:	e05c      	b.n	8002eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	6a39      	ldr	r1, [r7, #32]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f993 	bl	8003128 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e07c      	b.n	8002f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d034      	beq.n	8002eb2 <HAL_I2C_Master_Receive+0x186>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d130      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2200      	movs	r2, #0
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f880 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e04d      	b.n	8002f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2bff      	cmp	r3, #255	@ 0xff
 8002e72:	d90e      	bls.n	8002e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	22ff      	movs	r2, #255	@ 0xff
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	8979      	ldrh	r1, [r7, #10]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fab8 	bl	8003400 <I2C_TransferConfig>
 8002e90:	e00f      	b.n	8002eb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	8979      	ldrh	r1, [r7, #10]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 faa7 	bl	8003400 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d19d      	bne.n	8002df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	6a39      	ldr	r1, [r7, #32]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f8ed 	bl	80030a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e01a      	b.n	8002f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <HAL_I2C_Master_Receive+0x1e8>)
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	80002400 	.word	0x80002400
 8002f14:	fe00e800 	.word	0xfe00e800

08002f18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d103      	bne.n	8002f36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d007      	beq.n	8002f54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	619a      	str	r2, [r3, #24]
  }
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	e03b      	b.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f962 	bl	8003240 <I2C_IsErrorOccurred>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e041      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d02d      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7ff f9d7 	bl	8002340 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d122      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d113      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e00f      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d0b4      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800301e:	e033      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f90b 	bl	8003240 <I2C_IsErrorOccurred>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e031      	b.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d025      	beq.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7ff f980 	bl	8002340 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11a      	bne.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d013      	beq.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d1c4      	bne.n	8003020 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ac:	e02f      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f8c4 	bl	8003240 <I2C_IsErrorOccurred>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e02d      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7ff f93d 	bl	8002340 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11a      	bne.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d013      	beq.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e007      	b.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b20      	cmp	r3, #32
 800311a:	d1c8      	bne.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003138:	e071      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f87e 	bl	8003240 <I2C_IsErrorOccurred>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b20      	cmp	r3, #32
 800315a:	d13b      	bne.n	80031d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d138      	bne.n	80031d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d105      	bne.n	800317c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b10      	cmp	r3, #16
 8003188:	d121      	bne.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2210      	movs	r2, #16
 8003190:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2204      	movs	r2, #4
 8003196:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2220      	movs	r2, #32
 800319e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80031ac:	400b      	ands	r3, r1
 80031ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
 80031cc:	e002      	b.n	80031d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80031d4:	f7ff f8b4 	bl	8002340 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d302      	bcc.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d00f      	beq.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0220 	orr.w	r2, r3, #32
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d002      	beq.n	8003232 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d083      	beq.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fe00e800 	.word	0xfe00e800

08003240 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d068      	beq.n	800333e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2210      	movs	r2, #16
 8003272:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003274:	e049      	b.n	800330a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d045      	beq.n	800330a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7ff f85f 	bl	8002340 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_IsErrorOccurred+0x54>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d13a      	bne.n	800330a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d121      	bne.n	80032fc <I2C_IsErrorOccurred+0xbc>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032be:	d01d      	beq.n	80032fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d01a      	beq.n	80032fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032d6:	f7ff f833 	bl	8002340 <HAL_GetTick>
 80032da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032dc:	e00e      	b.n	80032fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032de:	f7ff f82f 	bl	8002340 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b19      	cmp	r3, #25
 80032ea:	d907      	bls.n	80032fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f043 0320 	orr.w	r3, r3, #32
 80032f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032fa:	e006      	b.n	800330a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	d1e9      	bne.n	80032de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b20      	cmp	r3, #32
 8003316:	d003      	beq.n	8003320 <I2C_IsErrorOccurred+0xe0>
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0aa      	beq.n	8003276 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2220      	movs	r2, #32
 800332e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f043 0308 	orr.w	r3, r3, #8
 8003378:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003382:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00b      	beq.n	80033ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff fdaf 	bl	8002f18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <I2C_IsErrorOccurred+0x1bc>)
 80033c6:	400b      	ands	r3, r1
 80033c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3728      	adds	r7, #40	@ 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	fe00e800 	.word	0xfe00e800

08003400 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	607b      	str	r3, [r7, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	817b      	strh	r3, [r7, #10]
 800340e:	4613      	mov	r3, r2
 8003410:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003412:	897b      	ldrh	r3, [r7, #10]
 8003414:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003418:	7a7b      	ldrb	r3, [r7, #9]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003420:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	4313      	orrs	r3, r2
 800342a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800342e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	0d5b      	lsrs	r3, r3, #21
 800343a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800343e:	4b08      	ldr	r3, [pc, #32]	@ (8003460 <I2C_TransferConfig+0x60>)
 8003440:	430b      	orrs	r3, r1
 8003442:	43db      	mvns	r3, r3
 8003444:	ea02 0103 	and.w	r1, r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	03ff63ff 	.word	0x03ff63ff

08003464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b20      	cmp	r3, #32
 8003478:	d138      	bne.n	80034ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003484:	2302      	movs	r3, #2
 8003486:	e032      	b.n	80034ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b085      	sub	sp, #20
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b20      	cmp	r3, #32
 800350e:	d139      	bne.n	8003584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800351a:	2302      	movs	r3, #2
 800351c:	e033      	b.n	8003586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2224      	movs	r2, #36	@ 0x24
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800354c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800359c:	4b19      	ldr	r3, [pc, #100]	@ (8003604 <HAL_PWREx_ConfigSupply+0x70>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d00a      	beq.n	80035be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035a8:	4b16      	ldr	r3, [pc, #88]	@ (8003604 <HAL_PWREx_ConfigSupply+0x70>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e01f      	b.n	80035fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e01d      	b.n	80035fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <HAL_PWREx_ConfigSupply+0x70>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 0207 	bic.w	r2, r3, #7
 80035c6:	490f      	ldr	r1, [pc, #60]	@ (8003604 <HAL_PWREx_ConfigSupply+0x70>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035ce:	f7fe feb7 	bl	8002340 <HAL_GetTick>
 80035d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035d4:	e009      	b.n	80035ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035d6:	f7fe feb3 	bl	8002340 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035e4:	d901      	bls.n	80035ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e007      	b.n	80035fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035ea:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <HAL_PWREx_ConfigSupply+0x70>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	d1ee      	bne.n	80035d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	58024800 	.word	0x58024800

08003608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	@ 0x30
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e3c8      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8087 	beq.w	8003736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003628:	4b88      	ldr	r3, [pc, #544]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003632:	4b86      	ldr	r3, [pc, #536]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003636:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363a:	2b10      	cmp	r3, #16
 800363c:	d007      	beq.n	800364e <HAL_RCC_OscConfig+0x46>
 800363e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003640:	2b18      	cmp	r3, #24
 8003642:	d110      	bne.n	8003666 <HAL_RCC_OscConfig+0x5e>
 8003644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d10b      	bne.n	8003666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364e:	4b7f      	ldr	r3, [pc, #508]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d06c      	beq.n	8003734 <HAL_RCC_OscConfig+0x12c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d168      	bne.n	8003734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e3a2      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x76>
 8003670:	4b76      	ldr	r3, [pc, #472]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a75      	ldr	r2, [pc, #468]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e02e      	b.n	80036dc <HAL_RCC_OscConfig+0xd4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x98>
 8003686:	4b71      	ldr	r3, [pc, #452]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a70      	ldr	r2, [pc, #448]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	4b6e      	ldr	r3, [pc, #440]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a6d      	ldr	r2, [pc, #436]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e01d      	b.n	80036dc <HAL_RCC_OscConfig+0xd4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0xbc>
 80036aa:	4b68      	ldr	r3, [pc, #416]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a67      	ldr	r2, [pc, #412]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b65      	ldr	r3, [pc, #404]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a64      	ldr	r2, [pc, #400]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xd4>
 80036c4:	4b61      	ldr	r3, [pc, #388]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a60      	ldr	r2, [pc, #384]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b5e      	ldr	r3, [pc, #376]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a5d      	ldr	r2, [pc, #372]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fe2c 	bl	8002340 <HAL_GetTick>
 80036e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe fe28 	bl	8002340 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e356      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fe:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xe4>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fe18 	bl	8002340 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe fe14 	bl	8002340 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e342      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003726:	4b49      	ldr	r3, [pc, #292]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x10c>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808c 	beq.w	800385c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003744:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800374c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800374e:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_RCC_OscConfig+0x162>
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	2b18      	cmp	r3, #24
 800375e:	d137      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1c8>
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d132      	bne.n	80037d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800376a:	4b38      	ldr	r3, [pc, #224]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_RCC_OscConfig+0x17a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e314      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003782:	4b32      	ldr	r3, [pc, #200]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0219 	bic.w	r2, r3, #25
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	492f      	ldr	r1, [pc, #188]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fdd4 	bl	8002340 <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379c:	f7fe fdd0 	bl	8002340 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e2fe      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ae:	4b27      	ldr	r3, [pc, #156]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b24      	ldr	r3, [pc, #144]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	4920      	ldr	r1, [pc, #128]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ce:	e045      	b.n	800385c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d026      	beq.n	8003826 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037d8:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 0219 	bic.w	r2, r3, #25
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4919      	ldr	r1, [pc, #100]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe fda9 	bl	8002340 <HAL_GetTick>
 80037ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f2:	f7fe fda5 	bl	8002340 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e2d3      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003810:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	061b      	lsls	r3, r3, #24
 800381e:	490b      	ldr	r1, [pc, #44]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	e01a      	b.n	800385c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a08      	ldr	r2, [pc, #32]	@ (800384c <HAL_RCC_OscConfig+0x244>)
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fe fd85 	bl	8002340 <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383a:	f7fe fd81 	bl	8002340 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d903      	bls.n	8003850 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e2af      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
 800384c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003850:	4b96      	ldr	r3, [pc, #600]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ee      	bne.n	800383a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d06a      	beq.n	800393e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003868:	4b90      	ldr	r3, [pc, #576]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003870:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003872:	4b8e      	ldr	r3, [pc, #568]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d007      	beq.n	800388e <HAL_RCC_OscConfig+0x286>
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b18      	cmp	r3, #24
 8003882:	d11b      	bne.n	80038bc <HAL_RCC_OscConfig+0x2b4>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d116      	bne.n	80038bc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800388e:	4b87      	ldr	r3, [pc, #540]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_RCC_OscConfig+0x29e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e282      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038a6:	4b81      	ldr	r3, [pc, #516]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	497d      	ldr	r1, [pc, #500]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038ba:	e040      	b.n	800393e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d023      	beq.n	800390c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038c4:	4b79      	ldr	r3, [pc, #484]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a78      	ldr	r2, [pc, #480]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80038ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe fd36 	bl	8002340 <HAL_GetTick>
 80038d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038d8:	f7fe fd32 	bl	8002340 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e260      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ea:	4b70      	ldr	r3, [pc, #448]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038f6:	4b6d      	ldr	r3, [pc, #436]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	4969      	ldr	r1, [pc, #420]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]
 800390a:	e018      	b.n	800393e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800390c:	4b67      	ldr	r3, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fd12 	bl	8002340 <HAL_GetTick>
 800391c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003920:	f7fe fd0e 	bl	8002340 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e23c      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003932:	4b5e      	ldr	r3, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d036      	beq.n	80039b8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d019      	beq.n	8003986 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b56      	ldr	r3, [pc, #344]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003956:	4a55      	ldr	r2, [pc, #340]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fe fcef 	bl	8002340 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003966:	f7fe fceb 	bl	8002340 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e219      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003978:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 800397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x35e>
 8003984:	e018      	b.n	80039b8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003986:	4b49      	ldr	r3, [pc, #292]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398a:	4a48      	ldr	r2, [pc, #288]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fe fcd5 	bl	8002340 <HAL_GetTick>
 8003996:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fcd1 	bl	8002340 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e1ff      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ac:	4b3f      	ldr	r3, [pc, #252]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d036      	beq.n	8003a32 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d019      	beq.n	8003a00 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039cc:	4b37      	ldr	r3, [pc, #220]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a36      	ldr	r2, [pc, #216]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80039d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039d8:	f7fe fcb2 	bl	8002340 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e0:	f7fe fcae 	bl	8002340 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1dc      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039f2:	4b2e      	ldr	r3, [pc, #184]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x3d8>
 80039fe:	e018      	b.n	8003a32 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a00:	4b2a      	ldr	r3, [pc, #168]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a29      	ldr	r2, [pc, #164]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fc98 	bl	8002340 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a14:	f7fe fc94 	bl	8002340 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1c2      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a26:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8086 	beq.w	8003b4c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x4a8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab0 <HAL_RCC_OscConfig+0x4a8>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a4c:	f7fe fc78 	bl	8002340 <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fe fc74 	bl	8002340 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e1a2      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <HAL_RCC_OscConfig+0x4a8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d106      	bne.n	8003a88 <HAL_RCC_OscConfig+0x480>
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a86:	e032      	b.n	8003aee <HAL_RCC_OscConfig+0x4e6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4ac>
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	4a02      	ldr	r2, [pc, #8]	@ (8003aac <HAL_RCC_OscConfig+0x4a4>)
 8003aa2:	f023 0304 	bic.w	r3, r3, #4
 8003aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa8:	e021      	b.n	8003aee <HAL_RCC_OscConfig+0x4e6>
 8003aaa:	bf00      	nop
 8003aac:	58024400 	.word	0x58024400
 8003ab0:	58024800 	.word	0x58024800
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x4ce>
 8003abc:	4b83      	ldr	r3, [pc, #524]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a82      	ldr	r2, [pc, #520]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003ac2:	f043 0304 	orr.w	r3, r3, #4
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac8:	4b80      	ldr	r3, [pc, #512]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4a7f      	ldr	r2, [pc, #508]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad4:	e00b      	b.n	8003aee <HAL_RCC_OscConfig+0x4e6>
 8003ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	4a7c      	ldr	r2, [pc, #496]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	4a79      	ldr	r2, [pc, #484]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d015      	beq.n	8003b22 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7fe fc23 	bl	8002340 <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fc1f 	bl	8002340 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e14b      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b14:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ee      	beq.n	8003afe <HAL_RCC_OscConfig+0x4f6>
 8003b20:	e014      	b.n	8003b4c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b22:	f7fe fc0d 	bl	8002340 <HAL_GetTick>
 8003b26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2a:	f7fe fc09 	bl	8002340 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e135      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b40:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 812a 	beq.w	8003daa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b56:	4b5d      	ldr	r3, [pc, #372]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b5e:	2b18      	cmp	r3, #24
 8003b60:	f000 80ba 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f040 8095 	bne.w	8003c98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b57      	ldr	r3, [pc, #348]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a56      	ldr	r2, [pc, #344]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003b74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fbe1 	bl	8002340 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe fbdd 	bl	8002340 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e10b      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b94:	4b4d      	ldr	r3, [pc, #308]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd0 <HAL_RCC_OscConfig+0x6c8>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	4945      	ldr	r1, [pc, #276]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	628b      	str	r3, [r1, #40]	@ 0x28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	025b      	lsls	r3, r3, #9
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	3b01      	subs	r3, #1
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003bea:	4938      	ldr	r1, [pc, #224]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003bf0:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	4a35      	ldr	r2, [pc, #212]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bfc:	4b33      	ldr	r3, [pc, #204]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c00:	4b34      	ldr	r3, [pc, #208]	@ (8003cd4 <HAL_RCC_OscConfig+0x6cc>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c08:	00d2      	lsls	r2, r2, #3
 8003c0a:	4930      	ldr	r1, [pc, #192]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c10:	4b2e      	ldr	r3, [pc, #184]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	f023 020c 	bic.w	r2, r3, #12
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	492b      	ldr	r1, [pc, #172]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c22:	4b2a      	ldr	r3, [pc, #168]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c26:	f023 0202 	bic.w	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	4927      	ldr	r1, [pc, #156]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c34:	4b25      	ldr	r3, [pc, #148]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a24      	ldr	r2, [pc, #144]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c40:	4b22      	ldr	r3, [pc, #136]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	4a21      	ldr	r2, [pc, #132]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	4a1e      	ldr	r2, [pc, #120]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c58:	4b1c      	ldr	r3, [pc, #112]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7fe fb66 	bl	8002340 <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe fb62 	bl	8002340 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e090      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x670>
 8003c96:	e088      	b.n	8003daa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fb4c 	bl	8002340 <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fb48 	bl	8002340 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e076      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cbe:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_RCC_OscConfig+0x6c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x6a4>
 8003cca:	e06e      	b.n	8003daa <HAL_RCC_OscConfig+0x7a2>
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	fffffc0c 	.word	0xfffffc0c
 8003cd4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cd8:	4b36      	ldr	r3, [pc, #216]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003cde:	4b35      	ldr	r3, [pc, #212]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d031      	beq.n	8003d50 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f003 0203 	and.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d12a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d122      	bne.n	8003d50 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d11a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	0a5b      	lsrs	r3, r3, #9
 8003d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d111      	bne.n	8003d50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	0c1b      	lsrs	r3, r3, #16
 8003d30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d108      	bne.n	8003d50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0e1b      	lsrs	r3, r3, #24
 8003d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e02b      	b.n	8003dac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d54:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d58:	08db      	lsrs	r3, r3, #3
 8003d5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d01f      	beq.n	8003daa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6e:	4a11      	ldr	r2, [pc, #68]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d76:	f7fe fae3 	bl	8002340 <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003d7c:	bf00      	nop
 8003d7e:	f7fe fadf 	bl	8002340 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d0f9      	beq.n	8003d7e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <HAL_RCC_OscConfig+0x7b0>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003d96:	00d2      	lsls	r2, r2, #3
 8003d98:	4906      	ldr	r1, [pc, #24]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <HAL_RCC_OscConfig+0x7ac>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3730      	adds	r7, #48	@ 0x30
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	58024400 	.word	0x58024400
 8003db8:	ffff0007 	.word	0xffff0007

08003dbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e19c      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b8a      	ldr	r3, [pc, #552]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d910      	bls.n	8003e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b87      	ldr	r3, [pc, #540]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 020f 	bic.w	r2, r3, #15
 8003de6:	4985      	ldr	r1, [pc, #532]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b83      	ldr	r3, [pc, #524]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e184      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	4b7b      	ldr	r3, [pc, #492]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d908      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e1c:	4b78      	ldr	r3, [pc, #480]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	4975      	ldr	r1, [pc, #468]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d010      	beq.n	8003e5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	4b70      	ldr	r3, [pc, #448]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d908      	bls.n	8003e5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	496a      	ldr	r1, [pc, #424]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	4b64      	ldr	r3, [pc, #400]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d908      	bls.n	8003e8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e78:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	495e      	ldr	r1, [pc, #376]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	4b59      	ldr	r3, [pc, #356]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d908      	bls.n	8003eb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ea6:	4b56      	ldr	r3, [pc, #344]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4953      	ldr	r1, [pc, #332]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d010      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d908      	bls.n	8003ee6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f023 020f 	bic.w	r2, r3, #15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4947      	ldr	r1, [pc, #284]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d055      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ef2:	4b43      	ldr	r3, [pc, #268]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4940      	ldr	r1, [pc, #256]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d121      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0f6      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f24:	4b36      	ldr	r3, [pc, #216]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d115      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0ea      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f3c:	4b30      	ldr	r3, [pc, #192]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0de      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d6      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f5c:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f023 0207 	bic.w	r2, r3, #7
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4925      	ldr	r1, [pc, #148]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fe f9e7 	bl	8002340 <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f76:	f7fe f9e3 	bl	8002340 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0be      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d1eb      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d010      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	4b14      	ldr	r3, [pc, #80]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d208      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fba:	4b11      	ldr	r3, [pc, #68]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f023 020f 	bic.w	r2, r3, #15
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	490e      	ldr	r1, [pc, #56]	@ (8004000 <HAL_RCC_ClockConfig+0x244>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d214      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 020f 	bic.w	r2, r3, #15
 8003fe2:	4906      	ldr	r1, [pc, #24]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <HAL_RCC_ClockConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e086      	b.n	800410a <HAL_RCC_ClockConfig+0x34e>
 8003ffc:	52002000 	.word	0x52002000
 8004000:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d010      	beq.n	8004032 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b3f      	ldr	r3, [pc, #252]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800401c:	429a      	cmp	r2, r3
 800401e:	d208      	bcs.n	8004032 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004020:	4b3c      	ldr	r3, [pc, #240]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	4939      	ldr	r1, [pc, #228]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 800402e:	4313      	orrs	r3, r2
 8004030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d010      	beq.n	8004060 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800404a:	429a      	cmp	r2, r3
 800404c:	d208      	bcs.n	8004060 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800404e:	4b31      	ldr	r3, [pc, #196]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	492e      	ldr	r1, [pc, #184]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 800405c:	4313      	orrs	r3, r2
 800405e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0310 	and.w	r3, r3, #16
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	4b28      	ldr	r3, [pc, #160]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004078:	429a      	cmp	r2, r3
 800407a:	d208      	bcs.n	800408e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800407c:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4922      	ldr	r1, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 800408a:	4313      	orrs	r3, r2
 800408c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	4b1d      	ldr	r3, [pc, #116]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d208      	bcs.n	80040bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	4917      	ldr	r1, [pc, #92]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040bc:	f000 f834 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	4912      	ldr	r1, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x35c>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040da:	4b0e      	ldr	r3, [pc, #56]	@ (8004114 <HAL_RCC_ClockConfig+0x358>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004118 <HAL_RCC_ClockConfig+0x35c>)
 80040e4:	5cd3      	ldrb	r3, [r2, r3]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
 80040f0:	4a0a      	ldr	r2, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x360>)
 80040f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004120 <HAL_RCC_ClockConfig+0x364>)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <HAL_RCC_ClockConfig+0x368>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe f8d4 	bl	80022ac <HAL_InitTick>
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	58024400 	.word	0x58024400
 8004118:	0800ae58 	.word	0x0800ae58
 800411c:	24000004 	.word	0x24000004
 8004120:	24000000 	.word	0x24000000
 8004124:	24000008 	.word	0x24000008

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	@ 0x24
 800412c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800412e:	4bb3      	ldr	r3, [pc, #716]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004136:	2b18      	cmp	r3, #24
 8004138:	f200 8155 	bhi.w	80043e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <HAL_RCC_GetSysClockFreq+0x1c>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	080041a9 	.word	0x080041a9
 8004148:	080043e7 	.word	0x080043e7
 800414c:	080043e7 	.word	0x080043e7
 8004150:	080043e7 	.word	0x080043e7
 8004154:	080043e7 	.word	0x080043e7
 8004158:	080043e7 	.word	0x080043e7
 800415c:	080043e7 	.word	0x080043e7
 8004160:	080043e7 	.word	0x080043e7
 8004164:	080041cf 	.word	0x080041cf
 8004168:	080043e7 	.word	0x080043e7
 800416c:	080043e7 	.word	0x080043e7
 8004170:	080043e7 	.word	0x080043e7
 8004174:	080043e7 	.word	0x080043e7
 8004178:	080043e7 	.word	0x080043e7
 800417c:	080043e7 	.word	0x080043e7
 8004180:	080043e7 	.word	0x080043e7
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080043e7 	.word	0x080043e7
 800418c:	080043e7 	.word	0x080043e7
 8004190:	080043e7 	.word	0x080043e7
 8004194:	080043e7 	.word	0x080043e7
 8004198:	080043e7 	.word	0x080043e7
 800419c:	080043e7 	.word	0x080043e7
 80041a0:	080043e7 	.word	0x080043e7
 80041a4:	080041db 	.word	0x080041db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041a8:	4b94      	ldr	r3, [pc, #592]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041b4:	4b91      	ldr	r3, [pc, #580]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	08db      	lsrs	r3, r3, #3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	4a90      	ldr	r2, [pc, #576]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80041c6:	e111      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80041c8:	4b8d      	ldr	r3, [pc, #564]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80041ca:	61bb      	str	r3, [r7, #24]
      break;
 80041cc:	e10e      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80041ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041d0:	61bb      	str	r3, [r7, #24]
      break;
 80041d2:	e10b      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80041d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80041d6:	61bb      	str	r3, [r7, #24]
      break;
 80041d8:	e108      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041da:	4b88      	ldr	r3, [pc, #544]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80041e4:	4b85      	ldr	r3, [pc, #532]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80041f0:	4b82      	ldr	r3, [pc, #520]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80041fa:	4b80      	ldr	r3, [pc, #512]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	08db      	lsrs	r3, r3, #3
 8004200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	fb02 f303 	mul.w	r3, r2, r3
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80e1 	beq.w	80043e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b02      	cmp	r3, #2
 8004222:	f000 8083 	beq.w	800432c <HAL_RCC_GetSysClockFreq+0x204>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b02      	cmp	r3, #2
 800422a:	f200 80a1 	bhi.w	8004370 <HAL_RCC_GetSysClockFreq+0x248>
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0x114>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d056      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800423a:	e099      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800423c:	4b6f      	ldr	r3, [pc, #444]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02d      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004248:	4b6c      	ldr	r3, [pc, #432]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	08db      	lsrs	r3, r3, #3
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	4a6b      	ldr	r2, [pc, #428]	@ (8004400 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
 8004258:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b62      	ldr	r3, [pc, #392]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a02 	vldr	s12, [r7, #8]
 8004286:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800440c <HAL_RCC_GetSysClockFreq+0x2e4>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80042a2:	e087      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004410 <HAL_RCC_GetSysClockFreq+0x2e8>
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	4b51      	ldr	r3, [pc, #324]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800440c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042e6:	e065      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004414 <HAL_RCC_GetSysClockFreq+0x2ec>
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a02 	vldr	s12, [r7, #8]
 800430e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800440c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800432a:	e043      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004418 <HAL_RCC_GetSysClockFreq+0x2f0>
 800433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004352:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800440c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800436e:	e021      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004414 <HAL_RCC_GetSysClockFreq+0x2ec>
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004392:	ed97 6a02 	vldr	s12, [r7, #8]
 8004396:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800440c <HAL_RCC_GetSysClockFreq+0x2e4>
 800439a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800439e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80043b4:	4b11      	ldr	r3, [pc, #68]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	0a5b      	lsrs	r3, r3, #9
 80043ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043be:	3301      	adds	r3, #1
 80043c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80043d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043d8:	ee17 3a90 	vmov	r3, s15
 80043dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80043de:	e005      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80043e6:	4b07      	ldr	r3, [pc, #28]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80043e8:	61bb      	str	r3, [r7, #24]
      break;
 80043ea:	bf00      	nop
  }

  return sysclockfreq;
 80043ec:	69bb      	ldr	r3, [r7, #24]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3724      	adds	r7, #36	@ 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	58024400 	.word	0x58024400
 8004400:	03d09000 	.word	0x03d09000
 8004404:	003d0900 	.word	0x003d0900
 8004408:	017d7840 	.word	0x017d7840
 800440c:	46000000 	.word	0x46000000
 8004410:	4c742400 	.word	0x4c742400
 8004414:	4a742400 	.word	0x4a742400
 8004418:	4bbebc20 	.word	0x4bbebc20

0800441c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004422:	f7ff fe81 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 8004426:	4602      	mov	r2, r0
 8004428:	4b10      	ldr	r3, [pc, #64]	@ (800446c <HAL_RCC_GetHCLKFreq+0x50>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	490f      	ldr	r1, [pc, #60]	@ (8004470 <HAL_RCC_GetHCLKFreq+0x54>)
 8004434:	5ccb      	ldrb	r3, [r1, r3]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004440:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <HAL_RCC_GetHCLKFreq+0x50>)
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	4a09      	ldr	r2, [pc, #36]	@ (8004470 <HAL_RCC_GetHCLKFreq+0x54>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	fa22 f303 	lsr.w	r3, r2, r3
 8004456:	4a07      	ldr	r2, [pc, #28]	@ (8004474 <HAL_RCC_GetHCLKFreq+0x58>)
 8004458:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800445a:	4a07      	ldr	r2, [pc, #28]	@ (8004478 <HAL_RCC_GetHCLKFreq+0x5c>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004460:	4b04      	ldr	r3, [pc, #16]	@ (8004474 <HAL_RCC_GetHCLKFreq+0x58>)
 8004462:	681b      	ldr	r3, [r3, #0]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	58024400 	.word	0x58024400
 8004470:	0800ae58 	.word	0x0800ae58
 8004474:	24000004 	.word	0x24000004
 8004478:	24000000 	.word	0x24000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004480:	f7ff ffcc 	bl	800441c <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	58024400 	.word	0x58024400
 80044a4:	0800ae58 	.word	0x0800ae58

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80044ac:	f7ff ffb6 	bl	800441c <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	0a1b      	lsrs	r3, r3, #8
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4904      	ldr	r1, [pc, #16]	@ (80044d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	58024400 	.word	0x58024400
 80044d0:	0800ae58 	.word	0x0800ae58

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d8:	b0c6      	sub	sp, #280	@ 0x118
 80044da:	af00      	add	r7, sp, #0
 80044dc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044e0:	2300      	movs	r3, #0
 80044e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80044f8:	2500      	movs	r5, #0
 80044fa:	ea54 0305 	orrs.w	r3, r4, r5
 80044fe:	d049      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004506:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800450c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004510:	d828      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004516:	d01a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004518:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451c:	d822      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004526:	d007      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004528:	e01c      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4bab      	ldr	r3, [pc, #684]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800452c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452e:	4aaa      	ldr	r2, [pc, #680]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004534:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004536:	e01a      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453c:	3308      	adds	r3, #8
 800453e:	2102      	movs	r1, #2
 8004540:	4618      	mov	r0, r3
 8004542:	f001 fc25 	bl	8005d90 <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800454c:	e00f      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004552:	3328      	adds	r3, #40	@ 0x28
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fccc 	bl	8005ef4 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004562:	e004      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800456c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004576:	4b98      	ldr	r3, [pc, #608]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004584:	4a94      	ldr	r2, [pc, #592]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004586:	430b      	orrs	r3, r1
 8004588:	6513      	str	r3, [r2, #80]	@ 0x50
 800458a:	e003      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80045a0:	f04f 0900 	mov.w	r9, #0
 80045a4:	ea58 0309 	orrs.w	r3, r8, r9
 80045a8:	d047      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80045aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d82a      	bhi.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045d1 	.word	0x080045d1
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045f5 	.word	0x080045f5
 80045c8:	08004613 	.word	0x08004613
 80045cc:	08004613 	.word	0x08004613
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4b81      	ldr	r3, [pc, #516]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4a80      	ldr	r2, [pc, #512]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045dc:	e01a      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e2:	3308      	adds	r3, #8
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 fbd2 	bl	8005d90 <RCCEx_PLL2_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045f2:	e00f      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f8:	3328      	adds	r3, #40	@ 0x28
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fc79 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461c:	4b6e      	ldr	r3, [pc, #440]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800461e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004620:	f023 0107 	bic.w	r1, r3, #7
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a6b      	ldr	r2, [pc, #428]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800462c:	430b      	orrs	r3, r1
 800462e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004636:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800463a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004646:	f04f 0b00 	mov.w	fp, #0
 800464a:	ea5a 030b 	orrs.w	r3, sl, fp
 800464e:	d05b      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004658:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800465c:	d03b      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800465e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004662:	d834      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004664:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004668:	d037      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800466a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800466e:	d82e      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004670:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004674:	d033      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004676:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800467a:	d828      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800467c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004680:	d01a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004686:	d822      	bhi.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800468c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004690:	d007      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004692:	e01c      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004694:	4b50      	ldr	r3, [pc, #320]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	4a4f      	ldr	r2, [pc, #316]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800469a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046a0:	e01e      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a6:	3308      	adds	r3, #8
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 fb70 	bl	8005d90 <RCCEx_PLL2_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80046b6:	e013      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046bc:	3328      	adds	r3, #40	@ 0x28
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f001 fc17 	bl	8005ef4 <RCCEx_PLL3_Config>
 80046c6:	4603      	mov	r3, r0
 80046c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046cc:	e008      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046d4:	e004      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80046d6:	bf00      	nop
 80046d8:	e002      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80046da:	bf00      	nop
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80046de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80046e8:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046f8:	4a37      	ldr	r2, [pc, #220]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046fa:	430b      	orrs	r3, r1
 80046fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fe:	e003      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004714:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004718:	2300      	movs	r3, #0
 800471a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800471e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004722:	460b      	mov	r3, r1
 8004724:	4313      	orrs	r3, r2
 8004726:	d05d      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004730:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004734:	d03b      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004736:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800473a:	d834      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800473c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004740:	d037      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004746:	d82e      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004748:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800474c:	d033      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800474e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004752:	d828      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004758:	d01a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800475a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800475e:	d822      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004768:	d007      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800476a:	e01c      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476c:	4b1a      	ldr	r3, [pc, #104]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	4a19      	ldr	r2, [pc, #100]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004778:	e01e      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800477e:	3308      	adds	r3, #8
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f001 fb04 	bl	8005d90 <RCCEx_PLL2_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800478e:	e013      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004794:	3328      	adds	r3, #40	@ 0x28
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fbab 	bl	8005ef4 <RCCEx_PLL3_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047a4:	e008      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047ac:	e004      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80047b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80047c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047d0:	4a01      	ldr	r2, [pc, #4]	@ (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d6:	e005      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80047d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80047f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80047fa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d03a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	2b30      	cmp	r3, #48	@ 0x30
 800480c:	d01f      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800480e:	2b30      	cmp	r3, #48	@ 0x30
 8004810:	d819      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004812:	2b20      	cmp	r3, #32
 8004814:	d00c      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004816:	2b20      	cmp	r3, #32
 8004818:	d815      	bhi.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d019      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800481e:	2b10      	cmp	r3, #16
 8004820:	d111      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004822:	4baa      	ldr	r3, [pc, #680]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	4aa9      	ldr	r2, [pc, #676]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800482c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800482e:	e011      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004834:	3308      	adds	r3, #8
 8004836:	2102      	movs	r1, #2
 8004838:	4618      	mov	r0, r3
 800483a:	f001 faa9 	bl	8005d90 <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800484e:	bf00      	nop
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800485c:	4b9b      	ldr	r3, [pc, #620]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800485e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004860:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	4a98      	ldr	r2, [pc, #608]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800486c:	430b      	orrs	r3, r1
 800486e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004876:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004890:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004894:	460b      	mov	r3, r1
 8004896:	4313      	orrs	r3, r2
 8004898:	d051      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048a4:	d035      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80048a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048aa:	d82e      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048b0:	d031      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80048b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048b6:	d828      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048bc:	d01a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80048be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c2:	d822      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048cc:	d007      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80048ce:	e01c      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b7e      	ldr	r3, [pc, #504]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	4a7d      	ldr	r2, [pc, #500]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048dc:	e01c      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	3308      	adds	r3, #8
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fa52 	bl	8005d90 <RCCEx_PLL2_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80048f2:	e011      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	3328      	adds	r3, #40	@ 0x28
 80048fa:	2100      	movs	r1, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 faf9 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004902:	4603      	mov	r3, r0
 8004904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004908:	e006      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004910:	e002      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004912:	bf00      	nop
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004920:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004924:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492e:	4a67      	ldr	r2, [pc, #412]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004930:	430b      	orrs	r3, r1
 8004932:	6513      	str	r3, [r2, #80]	@ 0x50
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800493a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800493e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800494a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800494e:	2300      	movs	r3, #0
 8004950:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004954:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d053      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800495e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004968:	d033      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800496a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800496e:	d82c      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004970:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004974:	d02f      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004976:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800497a:	d826      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800497c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004980:	d02b      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004982:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004986:	d820      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800498c:	d012      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800498e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004992:	d81a      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d022      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800499c:	d115      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a2:	3308      	adds	r3, #8
 80049a4:	2101      	movs	r1, #1
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 f9f2 	bl	8005d90 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049b2:	e015      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b8:	3328      	adds	r3, #40	@ 0x28
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fa99 	bl	8005ef4 <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80049c8:	e00a      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049d2:	bf00      	nop
 80049d4:	e004      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049e8:	4b38      	ldr	r3, [pc, #224]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80049f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f6:	4a35      	ldr	r2, [pc, #212]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004a1c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d058      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a32:	d033      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a38:	d82c      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3e:	d02f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a44:	d826      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a4a:	d02b      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004a4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004a50:	d820      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a56:	d012      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a5c:	d81a      	bhi.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d022      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004a62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a66:	d115      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	2101      	movs	r1, #1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 f98d 	bl	8005d90 <RCCEx_PLL2_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a7c:	e015      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a82:	3328      	adds	r3, #40	@ 0x28
 8004a84:	2101      	movs	r1, #1
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 fa34 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004a92:	e00a      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a9a:	e006      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004a9c:	bf00      	nop
 8004a9e:	e004      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004aa0:	bf00      	nop
 8004aa2:	e002      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004aa4:	bf00      	nop
 8004aa6:	e000      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ac2:	4a02      	ldr	r2, [pc, #8]	@ (8004acc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ac8:	e006      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004aca:	bf00      	nop
 8004acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004aee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4313      	orrs	r3, r2
 8004af6:	d037      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b02:	d00e      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b08:	d816      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b12:	d111      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b14:	4bc4      	ldr	r3, [pc, #784]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	4ac3      	ldr	r2, [pc, #780]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b20:	e00f      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b26:	3308      	adds	r3, #8
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f001 f930 	bl	8005d90 <RCCEx_PLL2_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b4a:	4bb7      	ldr	r3, [pc, #732]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b58:	4ab3      	ldr	r2, [pc, #716]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004b74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d039      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d81c      	bhi.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004b92:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bd5 	.word	0x08004bd5
 8004b9c:	08004ba9 	.word	0x08004ba9
 8004ba0:	08004bb7 	.word	0x08004bb7
 8004ba4:	08004bd5 	.word	0x08004bd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4b9f      	ldr	r3, [pc, #636]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4a9e      	ldr	r2, [pc, #632]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bb4:	e00f      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bba:	3308      	adds	r3, #8
 8004bbc:	2102      	movs	r1, #2
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 f8e6 	bl	8005d90 <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004bca:	e004      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004bde:	4b92      	ldr	r3, [pc, #584]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be2:	f023 0103 	bic.w	r1, r3, #3
 8004be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bec:	4a8e      	ldr	r2, [pc, #568]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bf2:	e003      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004c08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f000 8099 	beq.w	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1e:	4b83      	ldr	r3, [pc, #524]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a82      	ldr	r2, [pc, #520]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c2a:	f7fd fb89 	bl	8002340 <HAL_GetTick>
 8004c2e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c32:	e00b      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c34:	f7fd fb84 	bl	8002340 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b64      	cmp	r3, #100	@ 0x64
 8004c42:	d903      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c4a:	e005      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c4c:	4b77      	ldr	r3, [pc, #476]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ed      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d173      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c60:	4b71      	ldr	r3, [pc, #452]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c6c:	4053      	eors	r3, r2
 8004c6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d015      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c76:	4b6c      	ldr	r3, [pc, #432]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c82:	4b69      	ldr	r3, [pc, #420]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a68      	ldr	r2, [pc, #416]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8e:	4b66      	ldr	r3, [pc, #408]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	4a65      	ldr	r2, [pc, #404]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004c9a:	4a63      	ldr	r2, [pc, #396]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cae:	d118      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fb46 	bl	8002340 <HAL_GetTick>
 8004cb4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cb8:	e00d      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fd fb41 	bl	8002340 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004cc4:	1ad2      	subs	r2, r2, r3
 8004cc6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d903      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cd6:	4b54      	ldr	r3, [pc, #336]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0eb      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d129      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfa:	d10e      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d0c:	091a      	lsrs	r2, r3, #4
 8004d0e:	4b48      	ldr	r3, [pc, #288]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	4a45      	ldr	r2, [pc, #276]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6113      	str	r3, [r2, #16]
 8004d18:	e005      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004d1a:	4b43      	ldr	r3, [pc, #268]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	4a42      	ldr	r2, [pc, #264]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004d24:	6113      	str	r3, [r2, #16]
 8004d26:	4b40      	ldr	r3, [pc, #256]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d36:	4a3c      	ldr	r2, [pc, #240]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3c:	e008      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004d46:	e003      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f002 0301 	and.w	r3, r2, #1
 8004d5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d60:	2300      	movs	r3, #0
 8004d62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f000 808f 	beq.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d78:	2b28      	cmp	r3, #40	@ 0x28
 8004d7a:	d871      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004e69 	.word	0x08004e69
 8004d88:	08004e61 	.word	0x08004e61
 8004d8c:	08004e61 	.word	0x08004e61
 8004d90:	08004e61 	.word	0x08004e61
 8004d94:	08004e61 	.word	0x08004e61
 8004d98:	08004e61 	.word	0x08004e61
 8004d9c:	08004e61 	.word	0x08004e61
 8004da0:	08004e61 	.word	0x08004e61
 8004da4:	08004e35 	.word	0x08004e35
 8004da8:	08004e61 	.word	0x08004e61
 8004dac:	08004e61 	.word	0x08004e61
 8004db0:	08004e61 	.word	0x08004e61
 8004db4:	08004e61 	.word	0x08004e61
 8004db8:	08004e61 	.word	0x08004e61
 8004dbc:	08004e61 	.word	0x08004e61
 8004dc0:	08004e61 	.word	0x08004e61
 8004dc4:	08004e4b 	.word	0x08004e4b
 8004dc8:	08004e61 	.word	0x08004e61
 8004dcc:	08004e61 	.word	0x08004e61
 8004dd0:	08004e61 	.word	0x08004e61
 8004dd4:	08004e61 	.word	0x08004e61
 8004dd8:	08004e61 	.word	0x08004e61
 8004ddc:	08004e61 	.word	0x08004e61
 8004de0:	08004e61 	.word	0x08004e61
 8004de4:	08004e69 	.word	0x08004e69
 8004de8:	08004e61 	.word	0x08004e61
 8004dec:	08004e61 	.word	0x08004e61
 8004df0:	08004e61 	.word	0x08004e61
 8004df4:	08004e61 	.word	0x08004e61
 8004df8:	08004e61 	.word	0x08004e61
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	08004e61 	.word	0x08004e61
 8004e04:	08004e69 	.word	0x08004e69
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08004e61 	.word	0x08004e61
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e69 	.word	0x08004e69
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	58024800 	.word	0x58024800
 8004e30:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e38:	3308      	adds	r3, #8
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 ffa7 	bl	8005d90 <RCCEx_PLL2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e48:	e00f      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4e:	3328      	adds	r3, #40	@ 0x28
 8004e50:	2101      	movs	r1, #1
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 f84e 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004e5e:	e004      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e66:	e000      	b.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e72:	4bbf      	ldr	r3, [pc, #764]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e80:	4abb      	ldr	r2, [pc, #748]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e86:	e003      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f002 0302 	and.w	r3, r2, #2
 8004e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ea6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d041      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d824      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004eba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004f0d 	.word	0x08004f0d
 8004ec4:	08004ed9 	.word	0x08004ed9
 8004ec8:	08004eef 	.word	0x08004eef
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004f0d 	.word	0x08004f0d
 8004ed4:	08004f0d 	.word	0x08004f0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004edc:	3308      	adds	r3, #8
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 ff55 	bl	8005d90 <RCCEx_PLL2_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004eec:	e00f      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef2:	3328      	adds	r3, #40	@ 0x28
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fffc 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004f02:	e004      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004f16:	4b96      	ldr	r3, [pc, #600]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	f023 0107 	bic.w	r1, r3, #7
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f24:	4a92      	ldr	r2, [pc, #584]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f002 0304 	and.w	r3, r2, #4
 8004f40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d044      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	d825      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004f60:	a201      	add	r2, pc, #4	@ (adr r2, 8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004f81 	.word	0x08004f81
 8004f70:	08004f97 	.word	0x08004f97
 8004f74:	08004fb5 	.word	0x08004fb5
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004fb5 	.word	0x08004fb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f84:	3308      	adds	r3, #8
 8004f86:	2101      	movs	r1, #1
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 ff01 	bl	8005d90 <RCCEx_PLL2_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004f94:	e00f      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9a:	3328      	adds	r3, #40	@ 0x28
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ffa8 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004faa:	e004      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	f023 0107 	bic.w	r1, r3, #7
 8004fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	4a68      	ldr	r2, [pc, #416]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fd4:	e003      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f002 0320 	and.w	r3, r2, #32
 8004fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ff4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d055      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800500a:	d033      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800500c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005010:	d82c      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005016:	d02f      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d826      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800501e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005022:	d02b      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005024:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005028:	d820      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800502a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800502e:	d012      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005034:	d81a      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005036:	2b00      	cmp	r3, #0
 8005038:	d022      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800503a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800503e:	d115      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005044:	3308      	adds	r3, #8
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fea1 	bl	8005d90 <RCCEx_PLL2_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005054:	e015      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505a:	3328      	adds	r3, #40	@ 0x28
 800505c:	2102      	movs	r1, #2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff48 	bl	8005ef4 <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800506a:	e00a      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005072:	e006      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005074:	bf00      	nop
 8005076:	e004      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005078:	bf00      	nop
 800507a:	e002      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800507c:	bf00      	nop
 800507e:	e000      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508a:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005096:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800509a:	4a35      	ldr	r2, [pc, #212]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6553      	str	r3, [r2, #84]	@ 0x54
 80050a0:	e003      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80050b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d058      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80050ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050d6:	d033      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80050d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80050dc:	d82c      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e2:	d02f      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e8:	d826      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80050ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050ee:	d02b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80050f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050f4:	d820      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050fa:	d012      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80050fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005100:	d81a      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d022      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800510a:	d115      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005110:	3308      	adds	r3, #8
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fe3b 	bl	8005d90 <RCCEx_PLL2_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005120:	e015      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005126:	3328      	adds	r3, #40	@ 0x28
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fee2 	bl	8005ef4 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005136:	e00a      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005140:	bf00      	nop
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10e      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005162:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005166:	4a02      	ldr	r2, [pc, #8]	@ (8005170 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6593      	str	r3, [r2, #88]	@ 0x58
 800516c:	e006      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005188:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800518c:	2300      	movs	r3, #0
 800518e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005192:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005196:	460b      	mov	r3, r1
 8005198:	4313      	orrs	r3, r2
 800519a:	d055      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051a8:	d033      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80051aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80051ae:	d82c      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b4:	d02f      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ba:	d826      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051c0:	d02b      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80051c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80051c6:	d820      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051cc:	d012      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80051ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051d2:	d81a      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d022      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80051d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051dc:	d115      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e2:	3308      	adds	r3, #8
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fdd2 	bl	8005d90 <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80051f2:	e015      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f8:	3328      	adds	r3, #40	@ 0x28
 80051fa:	2102      	movs	r1, #2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fe79 	bl	8005ef4 <RCCEx_PLL3_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005208:	e00a      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005210:	e006      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005212:	bf00      	nop
 8005214:	e004      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800521e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005228:	4ba0      	ldr	r3, [pc, #640]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005234:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005238:	4a9c      	ldr	r2, [pc, #624]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800523a:	430b      	orrs	r3, r1
 800523c:	6593      	str	r3, [r2, #88]	@ 0x58
 800523e:	e003      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f002 0308 	and.w	r3, r2, #8
 8005254:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800525e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	d01e      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800526c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005274:	d10c      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527a:	3328      	adds	r3, #40	@ 0x28
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fe38 	bl	8005ef4 <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005290:	4b86      	ldr	r3, [pc, #536]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005294:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a0:	4a82      	ldr	r2, [pc, #520]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052a2:	430b      	orrs	r3, r1
 80052a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	f002 0310 	and.w	r3, r2, #16
 80052b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052b6:	2300      	movs	r3, #0
 80052b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d01e      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d2:	d10c      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d8:	3328      	adds	r3, #40	@ 0x28
 80052da:	2102      	movs	r1, #2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fe09 	bl	8005ef4 <RCCEx_PLL3_Config>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052ee:	4b6f      	ldr	r3, [pc, #444]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fe:	4a6b      	ldr	r2, [pc, #428]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005300:	430b      	orrs	r3, r1
 8005302:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005312:	2300      	movs	r3, #0
 8005314:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005316:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800531a:	460b      	mov	r3, r1
 800531c:	4313      	orrs	r3, r2
 800531e:	d03e      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005324:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532c:	d022      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800532e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005332:	d81b      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533c:	d00b      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800533e:	e015      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005344:	3308      	adds	r3, #8
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fd21 	bl	8005d90 <RCCEx_PLL2_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005354:	e00f      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535a:	3328      	adds	r3, #40	@ 0x28
 800535c:	2102      	movs	r1, #2
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fdc8 	bl	8005ef4 <RCCEx_PLL3_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800537e:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800538e:	4a47      	ldr	r2, [pc, #284]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005390:	430b      	orrs	r3, r1
 8005392:	6593      	str	r3, [r2, #88]	@ 0x58
 8005394:	e003      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800539a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80053aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ac:	2300      	movs	r3, #0
 80053ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80053b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80053b4:	460b      	mov	r3, r1
 80053b6:	4313      	orrs	r3, r2
 80053b8:	d03b      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053c6:	d01f      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80053c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053cc:	d818      	bhi.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80053ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d2:	d003      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80053d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053d8:	d007      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80053da:	e011      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053dc:	4b33      	ldr	r3, [pc, #204]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	4a32      	ldr	r2, [pc, #200]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80053e8:	e00f      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ee:	3328      	adds	r3, #40	@ 0x28
 80053f0:	2101      	movs	r1, #1
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fd7e 	bl	8005ef4 <RCCEx_PLL3_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80053fe:	e004      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005406:	e000      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10b      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005412:	4b26      	ldr	r3, [pc, #152]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005422:	4a22      	ldr	r2, [pc, #136]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005424:	430b      	orrs	r3, r1
 8005426:	6553      	str	r3, [r2, #84]	@ 0x54
 8005428:	e003      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800542e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800543e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005440:	2300      	movs	r3, #0
 8005442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005444:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005448:	460b      	mov	r3, r1
 800544a:	4313      	orrs	r3, r2
 800544c:	d034      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545c:	d007      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800545e:	e011      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005460:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	4a11      	ldr	r2, [pc, #68]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800546a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800546c:	e00e      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	3308      	adds	r3, #8
 8005474:	2102      	movs	r1, #2
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fc8a 	bl	8005d90 <RCCEx_PLL2_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005482:	e003      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800548a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10d      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005498:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a2:	4a02      	ldr	r2, [pc, #8]	@ (80054ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80054a4:	430b      	orrs	r3, r1
 80054a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80054a8:	e006      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80054c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054c6:	2300      	movs	r3, #0
 80054c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80054ca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054ce:	460b      	mov	r3, r1
 80054d0:	4313      	orrs	r3, r2
 80054d2:	d00c      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d8:	3328      	adds	r3, #40	@ 0x28
 80054da:	2102      	movs	r1, #2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd09 	bl	8005ef4 <RCCEx_PLL3_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80054fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054fc:	2300      	movs	r3, #0
 80054fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005500:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d036      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005514:	d018      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800551a:	d811      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800551c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005520:	d014      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005526:	d80b      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d011      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800552c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005530:	d106      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005532:	4bb7      	ldr	r3, [pc, #732]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	4ab6      	ldr	r2, [pc, #728]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800553c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005546:	e004      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005548:	bf00      	nop
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10a      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800555a:	4bad      	ldr	r3, [pc, #692]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800555c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005566:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005568:	4aa9      	ldr	r2, [pc, #676]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800556a:	430b      	orrs	r3, r1
 800556c:	6553      	str	r3, [r2, #84]	@ 0x54
 800556e:	e003      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005584:	653b      	str	r3, [r7, #80]	@ 0x50
 8005586:	2300      	movs	r3, #0
 8005588:	657b      	str	r3, [r7, #84]	@ 0x54
 800558a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800558e:	460b      	mov	r3, r1
 8005590:	4313      	orrs	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005594:	4b9e      	ldr	r3, [pc, #632]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a2:	4a9b      	ldr	r2, [pc, #620]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80055b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b6:	2300      	movs	r3, #0
 80055b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055c4:	4b92      	ldr	r3, [pc, #584]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055d2:	4a8f      	ldr	r2, [pc, #572]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80055e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055e6:	2300      	movs	r3, #0
 80055e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055f4:	4b86      	ldr	r3, [pc, #536]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	4a85      	ldr	r2, [pc, #532]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80055fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80055fe:	6113      	str	r3, [r2, #16]
 8005600:	4b83      	ldr	r3, [pc, #524]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005602:	6919      	ldr	r1, [r3, #16]
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800560c:	4a80      	ldr	r2, [pc, #512]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800560e:	430b      	orrs	r3, r1
 8005610:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800561e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005620:	2300      	movs	r3, #0
 8005622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005624:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800562e:	4b78      	ldr	r3, [pc, #480]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005632:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563c:	4a74      	ldr	r2, [pc, #464]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800563e:	430b      	orrs	r3, r1
 8005640:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800564e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005650:	2300      	movs	r3, #0
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
 8005654:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800565e:	4b6c      	ldr	r3, [pc, #432]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005662:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566e:	4a68      	ldr	r2, [pc, #416]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005670:	430b      	orrs	r3, r1
 8005672:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	2100      	movs	r1, #0
 800567e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005686:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800568a:	460b      	mov	r3, r1
 800568c:	4313      	orrs	r3, r2
 800568e:	d011      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	3308      	adds	r3, #8
 8005696:	2100      	movs	r1, #0
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fb79 	bl	8005d90 <RCCEx_PLL2_Config>
 800569e:	4603      	mov	r3, r0
 80056a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	2100      	movs	r1, #0
 80056be:	6239      	str	r1, [r7, #32]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	d011      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d4:	3308      	adds	r3, #8
 80056d6:	2101      	movs	r1, #1
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fb59 	bl	8005d90 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	2100      	movs	r1, #0
 80056fe:	61b9      	str	r1, [r7, #24]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800570a:	460b      	mov	r3, r1
 800570c:	4313      	orrs	r3, r2
 800570e:	d011      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005714:	3308      	adds	r3, #8
 8005716:	2102      	movs	r1, #2
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fb39 	bl	8005d90 <RCCEx_PLL2_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005730:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	2100      	movs	r1, #0
 800573e:	6139      	str	r1, [r7, #16]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d011      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005754:	3328      	adds	r3, #40	@ 0x28
 8005756:	2100      	movs	r1, #0
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fbcb 	bl	8005ef4 <RCCEx_PLL3_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005764:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005770:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	2100      	movs	r1, #0
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d011      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005794:	3328      	adds	r3, #40	@ 0x28
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fbab 	bl	8005ef4 <RCCEx_PLL3_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80057a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057bc:	2100      	movs	r1, #0
 80057be:	6039      	str	r1, [r7, #0]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057ca:	460b      	mov	r3, r1
 80057cc:	4313      	orrs	r3, r2
 80057ce:	d011      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d4:	3328      	adds	r3, #40	@ 0x28
 80057d6:	2102      	movs	r1, #2
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fb8b 	bl	8005ef4 <RCCEx_PLL3_Config>
 80057de:	4603      	mov	r3, r0
 80057e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80057e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80057f4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e000      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005808:	46bd      	mov	sp, r7
 800580a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580e:	bf00      	nop
 8005810:	58024400 	.word	0x58024400

08005814 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005818:	f7fe fe00 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4904      	ldr	r1, [pc, #16]	@ (800583c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58024400 	.word	0x58024400
 800583c:	0800ae58 	.word	0x0800ae58

08005840 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	@ 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005848:	4ba1      	ldr	r3, [pc, #644]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005852:	4b9f      	ldr	r3, [pc, #636]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005856:	0b1b      	lsrs	r3, r3, #12
 8005858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800585c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800585e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	091b      	lsrs	r3, r3, #4
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800586a:	4b99      	ldr	r3, [pc, #612]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8111 	beq.w	8005ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f000 8083 	beq.w	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b02      	cmp	r3, #2
 800589a:	f200 80a1 	bhi.w	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d056      	beq.n	8005958 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80058aa:	e099      	b.n	80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ac:	4b88      	ldr	r3, [pc, #544]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02d      	beq.n	8005914 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b8:	4b85      	ldr	r3, [pc, #532]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a84      	ldr	r2, [pc, #528]	@ (8005ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005912:	e087      	b.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005adc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a03 	vldr	s12, [r7, #12]
 800593a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005956:	e065      	b.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b59      	ldr	r3, [pc, #356]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a03 	vldr	s12, [r7, #12]
 800597e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800599a:	e043      	b.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b48      	ldr	r3, [pc, #288]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a03 	vldr	s12, [r7, #12]
 80059c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059de:	e021      	b.n	8005a24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b37      	ldr	r3, [pc, #220]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a24:	4b2a      	ldr	r3, [pc, #168]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a4a:	ee17 2a90 	vmov	r2, s15
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a78:	ee17 2a90 	vmov	r2, s15
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005a80:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	0e1b      	lsrs	r3, r3, #24
 8005a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 2a90 	vmov	r2, s15
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005aae:	e008      	b.n	8005ac2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	3724      	adds	r7, #36	@ 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	03d09000 	.word	0x03d09000
 8005ad8:	46000000 	.word	0x46000000
 8005adc:	4c742400 	.word	0x4c742400
 8005ae0:	4a742400 	.word	0x4a742400
 8005ae4:	4bbebc20 	.word	0x4bbebc20

08005ae8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b089      	sub	sp, #36	@ 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005af0:	4ba1      	ldr	r3, [pc, #644]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005afa:	4b9f      	ldr	r3, [pc, #636]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afe:	0d1b      	lsrs	r3, r3, #20
 8005b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b06:	4b9c      	ldr	r3, [pc, #624]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b12:	4b99      	ldr	r3, [pc, #612]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	08db      	lsrs	r3, r3, #3
 8005b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8111 	beq.w	8005d58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	f000 8083 	beq.w	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	f200 80a1 	bhi.w	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d056      	beq.n	8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b52:	e099      	b.n	8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b54:	4b88      	ldr	r3, [pc, #544]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d02d      	beq.n	8005bbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b60:	4b85      	ldr	r3, [pc, #532]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	08db      	lsrs	r3, r3, #3
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	4a84      	ldr	r2, [pc, #528]	@ (8005d7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	ee07 3a90 	vmov	s15, r3
 8005b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b8a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bba:	e087      	b.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bce:	4b6a      	ldr	r3, [pc, #424]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005be2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bfe:	e065      	b.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c12:	4b59      	ldr	r3, [pc, #356]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c42:	e043      	b.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	ee07 3a90 	vmov	s15, r3
 8005c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c56:	4b48      	ldr	r3, [pc, #288]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c86:	e021      	b.n	8005ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c9a:	4b37      	ldr	r3, [pc, #220]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	0a5b      	lsrs	r3, r3, #9
 8005cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ce6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cf2:	ee17 2a90 	vmov	r2, s15
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d20:	ee17 2a90 	vmov	r2, s15
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d28:	4b13      	ldr	r3, [pc, #76]	@ (8005d78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	0e1b      	lsrs	r3, r3, #24
 8005d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d4e:	ee17 2a90 	vmov	r2, s15
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d56:	e008      	b.n	8005d6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
}
 8005d6a:	bf00      	nop
 8005d6c:	3724      	adds	r7, #36	@ 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	03d09000 	.word	0x03d09000
 8005d80:	46000000 	.word	0x46000000
 8005d84:	4c742400 	.word	0x4c742400
 8005d88:	4a742400 	.word	0x4a742400
 8005d8c:	4bbebc20 	.word	0x4bbebc20

08005d90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d9e:	4b53      	ldr	r3, [pc, #332]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d101      	bne.n	8005dae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e099      	b.n	8005ee2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dae:	4b4f      	ldr	r3, [pc, #316]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4e      	ldr	r2, [pc, #312]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005db4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dba:	f7fc fac1 	bl	8002340 <HAL_GetTick>
 8005dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dc0:	e008      	b.n	8005dd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005dc2:	f7fc fabd 	bl	8002340 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e086      	b.n	8005ee2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dd4:	4b45      	ldr	r3, [pc, #276]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005de0:	4b42      	ldr	r3, [pc, #264]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	493f      	ldr	r1, [pc, #252]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	628b      	str	r3, [r1, #40]	@ 0x28
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	025b      	lsls	r3, r3, #9
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e24:	4931      	ldr	r1, [pc, #196]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e2a:	4b30      	ldr	r3, [pc, #192]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	492d      	ldr	r1, [pc, #180]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e40:	f023 0220 	bic.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4928      	ldr	r1, [pc, #160]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e4e:	4b27      	ldr	r3, [pc, #156]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	4a26      	ldr	r2, [pc, #152]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e54:	f023 0310 	bic.w	r3, r3, #16
 8005e58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e5a:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e5e:	4b24      	ldr	r3, [pc, #144]	@ (8005ef0 <RCCEx_PLL2_Config+0x160>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	69d2      	ldr	r2, [r2, #28]
 8005e66:	00d2      	lsls	r2, r2, #3
 8005e68:	4920      	ldr	r1, [pc, #128]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	4a1e      	ldr	r2, [pc, #120]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e74:	f043 0310 	orr.w	r3, r3, #16
 8005e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e80:	4b1a      	ldr	r3, [pc, #104]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e84:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e8c:	e00f      	b.n	8005eae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d106      	bne.n	8005ea2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e94:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	4a14      	ldr	r2, [pc, #80]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ea0:	e005      	b.n	8005eae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ea2:	4b12      	ldr	r3, [pc, #72]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	4a11      	ldr	r2, [pc, #68]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005eae:	4b0f      	ldr	r3, [pc, #60]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eba:	f7fc fa41 	bl	8002340 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ec0:	e008      	b.n	8005ed4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ec2:	f7fc fa3d 	bl	8002340 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e006      	b.n	8005ee2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ed4:	4b05      	ldr	r3, [pc, #20]	@ (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	ffff0007 	.word	0xffff0007

08005ef4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f02:	4b53      	ldr	r3, [pc, #332]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d101      	bne.n	8005f12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e099      	b.n	8006046 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f12:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a4e      	ldr	r2, [pc, #312]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fc fa0f 	bl	8002340 <HAL_GetTick>
 8005f22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f24:	e008      	b.n	8005f38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f26:	f7fc fa0b 	bl	8002340 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e086      	b.n	8006046 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f38:	4b45      	ldr	r3, [pc, #276]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f0      	bne.n	8005f26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f44:	4b42      	ldr	r3, [pc, #264]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	493f      	ldr	r1, [pc, #252]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	628b      	str	r3, [r1, #40]	@ 0x28
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	025b      	lsls	r3, r3, #9
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f88:	4931      	ldr	r1, [pc, #196]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f8e:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	492d      	ldr	r1, [pc, #180]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	4928      	ldr	r1, [pc, #160]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fb2:	4b27      	ldr	r3, [pc, #156]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb6:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fbe:	4b24      	ldr	r3, [pc, #144]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fc2:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <RCCEx_PLL3_Config+0x160>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	69d2      	ldr	r2, [r2, #28]
 8005fca:	00d2      	lsls	r2, r2, #3
 8005fcc:	4920      	ldr	r1, [pc, #128]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	4a19      	ldr	r2, [pc, #100]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ff0:	e00f      	b.n	8006012 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d106      	bne.n	8006006 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ff8:	4b15      	ldr	r3, [pc, #84]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	4a14      	ldr	r2, [pc, #80]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006002:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006004:	e005      	b.n	8006012 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006006:	4b12      	ldr	r3, [pc, #72]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8006008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600a:	4a11      	ldr	r2, [pc, #68]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 800600c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006010:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006012:	4b0f      	ldr	r3, [pc, #60]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a0e      	ldr	r2, [pc, #56]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601e:	f7fc f98f 	bl	8002340 <HAL_GetTick>
 8006022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006024:	e008      	b.n	8006038 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006026:	f7fc f98b 	bl	8002340 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e006      	b.n	8006046 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <RCCEx_PLL3_Config+0x15c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0f0      	beq.n	8006026 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
 8006054:	ffff0007 	.word	0xffff0007

08006058 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e10f      	b.n	800628a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a87      	ldr	r2, [pc, #540]	@ (8006294 <HAL_SPI_Init+0x23c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00f      	beq.n	800609a <HAL_SPI_Init+0x42>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a86      	ldr	r2, [pc, #536]	@ (8006298 <HAL_SPI_Init+0x240>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00a      	beq.n	800609a <HAL_SPI_Init+0x42>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a84      	ldr	r2, [pc, #528]	@ (800629c <HAL_SPI_Init+0x244>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d005      	beq.n	800609a <HAL_SPI_Init+0x42>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b0f      	cmp	r3, #15
 8006094:	d901      	bls.n	800609a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e0f7      	b.n	800628a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fe2e 	bl	8006cfc <SPI_GetPacketSize>
 80060a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006294 <HAL_SPI_Init+0x23c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00c      	beq.n	80060c6 <HAL_SPI_Init+0x6e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a79      	ldr	r2, [pc, #484]	@ (8006298 <HAL_SPI_Init+0x240>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d007      	beq.n	80060c6 <HAL_SPI_Init+0x6e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a78      	ldr	r2, [pc, #480]	@ (800629c <HAL_SPI_Init+0x244>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Init+0x6e>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d811      	bhi.n	80060ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80060ca:	4a72      	ldr	r2, [pc, #456]	@ (8006294 <HAL_SPI_Init+0x23c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a70      	ldr	r2, [pc, #448]	@ (8006298 <HAL_SPI_Init+0x240>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d004      	beq.n	80060e4 <HAL_SPI_Init+0x8c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a6f      	ldr	r2, [pc, #444]	@ (800629c <HAL_SPI_Init+0x244>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d104      	bne.n	80060ee <HAL_SPI_Init+0x96>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d901      	bls.n	80060ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0cd      	b.n	800628a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fb fefa 	bl	8001efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800612a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006134:	d119      	bne.n	800616a <HAL_SPI_Init+0x112>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800613e:	d103      	bne.n	8006148 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006144:	2b00      	cmp	r3, #0
 8006146:	d008      	beq.n	800615a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10c      	bne.n	800616a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006158:	d107      	bne.n	800616a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006168:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <HAL_SPI_Init+0x13e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b06      	cmp	r3, #6
 800617c:	d90b      	bls.n	8006196 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e007      	b.n	80061a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69da      	ldr	r2, [r3, #28]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ae:	431a      	orrs	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	ea42 0103 	orr.w	r1, r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	431a      	orrs	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006206:	ea42 0103 	orr.w	r1, r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d113      	bne.n	8006246 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006230:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006244:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40013000 	.word	0x40013000
 8006298:	40003800 	.word	0x40003800
 800629c:	40003c00 	.word	0x40003c00

080062a0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	4613      	mov	r3, r2
 80062ae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3320      	adds	r3, #32
 80062b6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062b8:	f7fc f842 	bl	8002340 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d001      	beq.n	80062ce <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
 80062cc:	e1d1      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Transmit+0x3a>
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e1c9      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_SPI_Transmit+0x4c>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e1c2      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2203      	movs	r2, #3
 80062f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006344:	d108      	bne.n	8006358 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	e009      	b.n	800636c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800636a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	4b96      	ldr	r3, [pc, #600]	@ (80065cc <HAL_SPI_Transmit+0x32c>)
 8006374:	4013      	ands	r3, r2
 8006376:	88f9      	ldrh	r1, [r7, #6]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	430b      	orrs	r3, r1
 800637e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
 800638e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006398:	d107      	bne.n	80063aa <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	d947      	bls.n	8006442 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80063b2:	e03f      	b.n	8006434 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d114      	bne.n	80063ec <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6812      	ldr	r2, [r2, #0]
 80063cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80063ea:	e023      	b.n	8006434 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ec:	f7fb ffa8 	bl	8002340 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d803      	bhi.n	8006404 <HAL_SPI_Transmit+0x164>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <HAL_SPI_Transmit+0x16a>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d114      	bne.n	8006434 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fba8 	bl	8006b60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e11e      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1b9      	bne.n	80063b4 <HAL_SPI_Transmit+0x114>
 8006440:	e0f1      	b.n	8006626 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b07      	cmp	r3, #7
 8006448:	f240 80e6 	bls.w	8006618 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800644c:	e05d      	b.n	800650a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b02      	cmp	r3, #2
 800645a:	d132      	bne.n	80064c2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d918      	bls.n	800649a <HAL_SPI_Transmit+0x1fa>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d014      	beq.n	800649a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6812      	ldr	r2, [r2, #0]
 800647a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b02      	subs	r3, #2
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006498:	e037      	b.n	800650a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a8:	1c9a      	adds	r2, r3, #2
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80064c0:	e023      	b.n	800650a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c2:	f7fb ff3d 	bl	8002340 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d803      	bhi.n	80064da <HAL_SPI_Transmit+0x23a>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_Transmit+0x240>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d114      	bne.n	800650a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fb3d 	bl	8006b60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e0b3      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d19b      	bne.n	800644e <HAL_SPI_Transmit+0x1ae>
 8006516:	e086      	b.n	8006626 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d154      	bne.n	80065d0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b03      	cmp	r3, #3
 8006530:	d918      	bls.n	8006564 <HAL_SPI_Transmit+0x2c4>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	2b40      	cmp	r3, #64	@ 0x40
 8006538:	d914      	bls.n	8006564 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654a:	1d1a      	adds	r2, r3, #4
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b04      	subs	r3, #4
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006562:	e059      	b.n	8006618 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d917      	bls.n	80065a0 <HAL_SPI_Transmit+0x300>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d013      	beq.n	80065a0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657c:	881a      	ldrh	r2, [r3, #0]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b02      	subs	r3, #2
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800659e:	e03b      	b.n	8006618 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3320      	adds	r3, #32
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b01      	subs	r3, #1
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065ca:	e025      	b.n	8006618 <HAL_SPI_Transmit+0x378>
 80065cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d0:	f7fb feb6 	bl	8002340 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d803      	bhi.n	80065e8 <HAL_SPI_Transmit+0x348>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d102      	bne.n	80065ee <HAL_SPI_Transmit+0x34e>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d114      	bne.n	8006618 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fab6 	bl	8006b60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e02c      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	f47f af79 	bne.w	8006518 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2200      	movs	r2, #0
 800662e:	2108      	movs	r1, #8
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fb35 	bl	8006ca0 <SPI_WaitOnFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fa87 	bl	8006b60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006670:	2300      	movs	r3, #0
  }
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop

0800667c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	b29b      	uxth	r3, r3
 8006694:	3301      	adds	r3, #1
 8006696:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3330      	adds	r3, #48	@ 0x30
 800669e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066a0:	f7fb fe4e 	bl	8002340 <HAL_GetTick>
 80066a4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d001      	beq.n	80066b6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
 80066b4:	e250      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <HAL_SPI_Receive+0x46>
 80066bc:	88fb      	ldrh	r3, [r7, #6]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e248      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_SPI_Receive+0x58>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e241      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2204      	movs	r2, #4
 80066e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	88fa      	ldrh	r2, [r7, #6]
 80066fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800672c:	d108      	bne.n	8006740 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e009      	b.n	8006754 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006752:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	4b95      	ldr	r3, [pc, #596]	@ (80069b0 <HAL_SPI_Receive+0x334>)
 800675c:	4013      	ands	r3, r2
 800675e:	88f9      	ldrh	r1, [r7, #6]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	430b      	orrs	r3, r1
 8006766:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006780:	d107      	bne.n	8006792 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006790:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d96c      	bls.n	8006874 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800679a:	e064      	b.n	8006866 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d114      	bne.n	80067dc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80067da:	e044      	b.n	8006866 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	8bfa      	ldrh	r2, [r7, #30]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d919      	bls.n	800681e <HAL_SPI_Receive+0x1a2>
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d014      	beq.n	800681e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067fe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006804:	1d1a      	adds	r2, r3, #4
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800681c:	e023      	b.n	8006866 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800681e:	f7fb fd8f 	bl	8002340 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d803      	bhi.n	8006836 <HAL_SPI_Receive+0x1ba>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d102      	bne.n	800683c <HAL_SPI_Receive+0x1c0>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d114      	bne.n	8006866 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f98f 	bl	8006b60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006848:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e178      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d194      	bne.n	800679c <HAL_SPI_Receive+0x120>
 8006872:	e15e      	b.n	8006b32 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b07      	cmp	r3, #7
 800687a:	f240 8153 	bls.w	8006b24 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800687e:	e08f      	b.n	80069a0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b01      	cmp	r3, #1
 8006894:	d114      	bne.n	80068c0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	8812      	ldrh	r2, [r2, #0]
 800689e:	b292      	uxth	r2, r2
 80068a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80068be:	e06f      	b.n	80069a0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8bfa      	ldrh	r2, [r7, #30]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d924      	bls.n	8006918 <HAL_SPI_Receive+0x29c>
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01f      	beq.n	8006918 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	8812      	ldrh	r2, [r2, #0]
 80068e0:	b292      	uxth	r2, r2
 80068e2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	8812      	ldrh	r2, [r2, #0]
 80068f6:	b292      	uxth	r2, r2
 80068f8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068fe:	1c9a      	adds	r2, r3, #2
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b02      	subs	r3, #2
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006916:	e043      	b.n	80069a0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	d119      	bne.n	8006958 <HAL_SPI_Receive+0x2dc>
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d014      	beq.n	8006958 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	b292      	uxth	r2, r2
 8006938:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800693e:	1c9a      	adds	r2, r3, #2
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006956:	e023      	b.n	80069a0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006958:	f7fb fcf2 	bl	8002340 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d803      	bhi.n	8006970 <HAL_SPI_Receive+0x2f4>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d102      	bne.n	8006976 <HAL_SPI_Receive+0x2fa>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d114      	bne.n	80069a0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f8f2 	bl	8006b60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006982:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e0db      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f47f af69 	bne.w	8006880 <HAL_SPI_Receive+0x204>
 80069ae:	e0c0      	b.n	8006b32 <HAL_SPI_Receive+0x4b6>
 80069b0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d117      	bne.n	80069fa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069f8:	e094      	b.n	8006b24 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8bfa      	ldrh	r2, [r7, #30]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d946      	bls.n	8006a96 <HAL_SPI_Receive+0x41a>
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d041      	beq.n	8006a96 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a1e:	7812      	ldrb	r2, [r2, #0]
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a72:	7812      	ldrb	r2, [r2, #0]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b04      	subs	r3, #4
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a94:	e046      	b.n	8006b24 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d81c      	bhi.n	8006adc <HAL_SPI_Receive+0x460>
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ada:	e023      	b.n	8006b24 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006adc:	f7fb fc30 	bl	8002340 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d803      	bhi.n	8006af4 <HAL_SPI_Receive+0x478>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d102      	bne.n	8006afa <HAL_SPI_Receive+0x47e>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d114      	bne.n	8006b24 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f830 	bl	8006b60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e019      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f47f af41 	bne.w	80069b4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f814 	bl	8006b60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006b56:	2300      	movs	r3, #0
  }
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0208 	orr.w	r2, r2, #8
 8006b7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0210 	orr.w	r2, r2, #16
 8006b8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0201 	bic.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6919      	ldr	r1, [r3, #16]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b3c      	ldr	r3, [pc, #240]	@ (8006c9c <SPI_CloseTransfer+0x13c>)
 8006bac:	400b      	ands	r3, r1
 8006bae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d014      	beq.n	8006bf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00f      	beq.n	8006bf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0220 	orr.w	r2, r2, #32
 8006bf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d014      	beq.n	8006c2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00f      	beq.n	8006c2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c12:	f043 0204 	orr.w	r2, r3, #4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699a      	ldr	r2, [r3, #24]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c3c:	f043 0201 	orr.w	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c66:	f043 0208 	orr.w	r2, r3, #8
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	fffffc90 	.word	0xfffffc90

08006ca0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cb0:	e010      	b.n	8006cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb2:	f7fb fb45 	bl	8002340 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d803      	bhi.n	8006cca <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d102      	bne.n	8006cd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e00f      	b.n	8006cf4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695a      	ldr	r2, [r3, #20]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d0df      	beq.n	8006cb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	3307      	adds	r3, #7
 8006d1a:	08db      	lsrs	r3, r3, #3
 8006d1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e042      	b.n	8006dca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d106      	bne.n	8006d5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7fb f938 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2224      	movs	r2, #36	@ 0x24
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0201 	bic.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 ff23 	bl	8007bc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8b4 	bl	8006ef0 <UART_SetConfig>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e01b      	b.n	8006dca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 ffa2 	bl	8007d0c <UART_CheckIdleState>
 8006dc8:	4603      	mov	r3, r0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b08a      	sub	sp, #40	@ 0x28
 8006dd6:	af02      	add	r7, sp, #8
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d17b      	bne.n	8006ee4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_UART_Transmit+0x26>
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e074      	b.n	8006ee6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2221      	movs	r2, #33	@ 0x21
 8006e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e0c:	f7fb fa98 	bl	8002340 <HAL_GetTick>
 8006e10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	88fa      	ldrh	r2, [r7, #6]
 8006e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2a:	d108      	bne.n	8006e3e <HAL_UART_Transmit+0x6c>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e003      	b.n	8006e46 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e46:	e030      	b.n	8006eaa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	@ 0x80
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f001 f804 	bl	8007e60 <UART_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e03d      	b.n	8006ee6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10b      	bne.n	8006e88 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	3302      	adds	r3, #2
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	e007      	b.n	8006e98 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	781a      	ldrb	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3301      	adds	r3, #1
 8006e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1c8      	bne.n	8006e48 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2140      	movs	r1, #64	@ 0x40
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 ffcd 	bl	8007e60 <UART_WaitOnFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e006      	b.n	8006ee6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e000      	b.n	8006ee6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ee4:	2302      	movs	r3, #2
  }
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3720      	adds	r7, #32
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ef4:	b092      	sub	sp, #72	@ 0x48
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4bbe      	ldr	r3, [pc, #760]	@ (8007218 <UART_SetConfig+0x328>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4ab3      	ldr	r2, [pc, #716]	@ (800721c <UART_SetConfig+0x32c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	4baf      	ldr	r3, [pc, #700]	@ (8007220 <UART_SetConfig+0x330>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	f023 010f 	bic.w	r1, r3, #15
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4aa6      	ldr	r2, [pc, #664]	@ (8007224 <UART_SetConfig+0x334>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d177      	bne.n	8007080 <UART_SetConfig+0x190>
 8006f90:	4ba5      	ldr	r3, [pc, #660]	@ (8007228 <UART_SetConfig+0x338>)
 8006f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f98:	2b28      	cmp	r3, #40	@ 0x28
 8006f9a:	d86d      	bhi.n	8007078 <UART_SetConfig+0x188>
 8006f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <UART_SetConfig+0xb4>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08007049 	.word	0x08007049
 8006fa8:	08007079 	.word	0x08007079
 8006fac:	08007079 	.word	0x08007079
 8006fb0:	08007079 	.word	0x08007079
 8006fb4:	08007079 	.word	0x08007079
 8006fb8:	08007079 	.word	0x08007079
 8006fbc:	08007079 	.word	0x08007079
 8006fc0:	08007079 	.word	0x08007079
 8006fc4:	08007051 	.word	0x08007051
 8006fc8:	08007079 	.word	0x08007079
 8006fcc:	08007079 	.word	0x08007079
 8006fd0:	08007079 	.word	0x08007079
 8006fd4:	08007079 	.word	0x08007079
 8006fd8:	08007079 	.word	0x08007079
 8006fdc:	08007079 	.word	0x08007079
 8006fe0:	08007079 	.word	0x08007079
 8006fe4:	08007059 	.word	0x08007059
 8006fe8:	08007079 	.word	0x08007079
 8006fec:	08007079 	.word	0x08007079
 8006ff0:	08007079 	.word	0x08007079
 8006ff4:	08007079 	.word	0x08007079
 8006ff8:	08007079 	.word	0x08007079
 8006ffc:	08007079 	.word	0x08007079
 8007000:	08007079 	.word	0x08007079
 8007004:	08007061 	.word	0x08007061
 8007008:	08007079 	.word	0x08007079
 800700c:	08007079 	.word	0x08007079
 8007010:	08007079 	.word	0x08007079
 8007014:	08007079 	.word	0x08007079
 8007018:	08007079 	.word	0x08007079
 800701c:	08007079 	.word	0x08007079
 8007020:	08007079 	.word	0x08007079
 8007024:	08007069 	.word	0x08007069
 8007028:	08007079 	.word	0x08007079
 800702c:	08007079 	.word	0x08007079
 8007030:	08007079 	.word	0x08007079
 8007034:	08007079 	.word	0x08007079
 8007038:	08007079 	.word	0x08007079
 800703c:	08007079 	.word	0x08007079
 8007040:	08007079 	.word	0x08007079
 8007044:	08007071 	.word	0x08007071
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e326      	b.n	800769e <UART_SetConfig+0x7ae>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e322      	b.n	800769e <UART_SetConfig+0x7ae>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e31e      	b.n	800769e <UART_SetConfig+0x7ae>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e31a      	b.n	800769e <UART_SetConfig+0x7ae>
 8007068:	2320      	movs	r3, #32
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706e:	e316      	b.n	800769e <UART_SetConfig+0x7ae>
 8007070:	2340      	movs	r3, #64	@ 0x40
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007076:	e312      	b.n	800769e <UART_SetConfig+0x7ae>
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707e:	e30e      	b.n	800769e <UART_SetConfig+0x7ae>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a69      	ldr	r2, [pc, #420]	@ (800722c <UART_SetConfig+0x33c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d130      	bne.n	80070ec <UART_SetConfig+0x1fc>
 800708a:	4b67      	ldr	r3, [pc, #412]	@ (8007228 <UART_SetConfig+0x338>)
 800708c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	2b05      	cmp	r3, #5
 8007094:	d826      	bhi.n	80070e4 <UART_SetConfig+0x1f4>
 8007096:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <UART_SetConfig+0x1ac>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070b5 	.word	0x080070b5
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	080070c5 	.word	0x080070c5
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e2f0      	b.n	800769e <UART_SetConfig+0x7ae>
 80070bc:	2304      	movs	r3, #4
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e2ec      	b.n	800769e <UART_SetConfig+0x7ae>
 80070c4:	2308      	movs	r3, #8
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e2e8      	b.n	800769e <UART_SetConfig+0x7ae>
 80070cc:	2310      	movs	r3, #16
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e2e4      	b.n	800769e <UART_SetConfig+0x7ae>
 80070d4:	2320      	movs	r3, #32
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070da:	e2e0      	b.n	800769e <UART_SetConfig+0x7ae>
 80070dc:	2340      	movs	r3, #64	@ 0x40
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e2:	e2dc      	b.n	800769e <UART_SetConfig+0x7ae>
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ea:	e2d8      	b.n	800769e <UART_SetConfig+0x7ae>
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a4f      	ldr	r2, [pc, #316]	@ (8007230 <UART_SetConfig+0x340>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d130      	bne.n	8007158 <UART_SetConfig+0x268>
 80070f6:	4b4c      	ldr	r3, [pc, #304]	@ (8007228 <UART_SetConfig+0x338>)
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	2b05      	cmp	r3, #5
 8007100:	d826      	bhi.n	8007150 <UART_SetConfig+0x260>
 8007102:	a201      	add	r2, pc, #4	@ (adr r2, 8007108 <UART_SetConfig+0x218>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007121 	.word	0x08007121
 800710c:	08007129 	.word	0x08007129
 8007110:	08007131 	.word	0x08007131
 8007114:	08007139 	.word	0x08007139
 8007118:	08007141 	.word	0x08007141
 800711c:	08007149 	.word	0x08007149
 8007120:	2300      	movs	r3, #0
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e2ba      	b.n	800769e <UART_SetConfig+0x7ae>
 8007128:	2304      	movs	r3, #4
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e2b6      	b.n	800769e <UART_SetConfig+0x7ae>
 8007130:	2308      	movs	r3, #8
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e2b2      	b.n	800769e <UART_SetConfig+0x7ae>
 8007138:	2310      	movs	r3, #16
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e2ae      	b.n	800769e <UART_SetConfig+0x7ae>
 8007140:	2320      	movs	r3, #32
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e2aa      	b.n	800769e <UART_SetConfig+0x7ae>
 8007148:	2340      	movs	r3, #64	@ 0x40
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e2a6      	b.n	800769e <UART_SetConfig+0x7ae>
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007156:	e2a2      	b.n	800769e <UART_SetConfig+0x7ae>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a35      	ldr	r2, [pc, #212]	@ (8007234 <UART_SetConfig+0x344>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d130      	bne.n	80071c4 <UART_SetConfig+0x2d4>
 8007162:	4b31      	ldr	r3, [pc, #196]	@ (8007228 <UART_SetConfig+0x338>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	2b05      	cmp	r3, #5
 800716c:	d826      	bhi.n	80071bc <UART_SetConfig+0x2cc>
 800716e:	a201      	add	r2, pc, #4	@ (adr r2, 8007174 <UART_SetConfig+0x284>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	0800718d 	.word	0x0800718d
 8007178:	08007195 	.word	0x08007195
 800717c:	0800719d 	.word	0x0800719d
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071b5 	.word	0x080071b5
 800718c:	2300      	movs	r3, #0
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e284      	b.n	800769e <UART_SetConfig+0x7ae>
 8007194:	2304      	movs	r3, #4
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e280      	b.n	800769e <UART_SetConfig+0x7ae>
 800719c:	2308      	movs	r3, #8
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e27c      	b.n	800769e <UART_SetConfig+0x7ae>
 80071a4:	2310      	movs	r3, #16
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e278      	b.n	800769e <UART_SetConfig+0x7ae>
 80071ac:	2320      	movs	r3, #32
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e274      	b.n	800769e <UART_SetConfig+0x7ae>
 80071b4:	2340      	movs	r3, #64	@ 0x40
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e270      	b.n	800769e <UART_SetConfig+0x7ae>
 80071bc:	2380      	movs	r3, #128	@ 0x80
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071c2:	e26c      	b.n	800769e <UART_SetConfig+0x7ae>
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <UART_SetConfig+0x348>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d142      	bne.n	8007254 <UART_SetConfig+0x364>
 80071ce:	4b16      	ldr	r3, [pc, #88]	@ (8007228 <UART_SetConfig+0x338>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d838      	bhi.n	800724c <UART_SetConfig+0x35c>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0x2f0>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f9 	.word	0x080071f9
 80071e4:	08007201 	.word	0x08007201
 80071e8:	08007209 	.word	0x08007209
 80071ec:	08007211 	.word	0x08007211
 80071f0:	0800723d 	.word	0x0800723d
 80071f4:	08007245 	.word	0x08007245
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e24e      	b.n	800769e <UART_SetConfig+0x7ae>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e24a      	b.n	800769e <UART_SetConfig+0x7ae>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e246      	b.n	800769e <UART_SetConfig+0x7ae>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e242      	b.n	800769e <UART_SetConfig+0x7ae>
 8007218:	cfff69f3 	.word	0xcfff69f3
 800721c:	58000c00 	.word	0x58000c00
 8007220:	11fff4ff 	.word	0x11fff4ff
 8007224:	40011000 	.word	0x40011000
 8007228:	58024400 	.word	0x58024400
 800722c:	40004400 	.word	0x40004400
 8007230:	40004800 	.word	0x40004800
 8007234:	40004c00 	.word	0x40004c00
 8007238:	40005000 	.word	0x40005000
 800723c:	2320      	movs	r3, #32
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007242:	e22c      	b.n	800769e <UART_SetConfig+0x7ae>
 8007244:	2340      	movs	r3, #64	@ 0x40
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724a:	e228      	b.n	800769e <UART_SetConfig+0x7ae>
 800724c:	2380      	movs	r3, #128	@ 0x80
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007252:	e224      	b.n	800769e <UART_SetConfig+0x7ae>
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4ab1      	ldr	r2, [pc, #708]	@ (8007520 <UART_SetConfig+0x630>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d176      	bne.n	800734c <UART_SetConfig+0x45c>
 800725e:	4bb1      	ldr	r3, [pc, #708]	@ (8007524 <UART_SetConfig+0x634>)
 8007260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007266:	2b28      	cmp	r3, #40	@ 0x28
 8007268:	d86c      	bhi.n	8007344 <UART_SetConfig+0x454>
 800726a:	a201      	add	r2, pc, #4	@ (adr r2, 8007270 <UART_SetConfig+0x380>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	08007315 	.word	0x08007315
 8007274:	08007345 	.word	0x08007345
 8007278:	08007345 	.word	0x08007345
 800727c:	08007345 	.word	0x08007345
 8007280:	08007345 	.word	0x08007345
 8007284:	08007345 	.word	0x08007345
 8007288:	08007345 	.word	0x08007345
 800728c:	08007345 	.word	0x08007345
 8007290:	0800731d 	.word	0x0800731d
 8007294:	08007345 	.word	0x08007345
 8007298:	08007345 	.word	0x08007345
 800729c:	08007345 	.word	0x08007345
 80072a0:	08007345 	.word	0x08007345
 80072a4:	08007345 	.word	0x08007345
 80072a8:	08007345 	.word	0x08007345
 80072ac:	08007345 	.word	0x08007345
 80072b0:	08007325 	.word	0x08007325
 80072b4:	08007345 	.word	0x08007345
 80072b8:	08007345 	.word	0x08007345
 80072bc:	08007345 	.word	0x08007345
 80072c0:	08007345 	.word	0x08007345
 80072c4:	08007345 	.word	0x08007345
 80072c8:	08007345 	.word	0x08007345
 80072cc:	08007345 	.word	0x08007345
 80072d0:	0800732d 	.word	0x0800732d
 80072d4:	08007345 	.word	0x08007345
 80072d8:	08007345 	.word	0x08007345
 80072dc:	08007345 	.word	0x08007345
 80072e0:	08007345 	.word	0x08007345
 80072e4:	08007345 	.word	0x08007345
 80072e8:	08007345 	.word	0x08007345
 80072ec:	08007345 	.word	0x08007345
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007345 	.word	0x08007345
 80072f8:	08007345 	.word	0x08007345
 80072fc:	08007345 	.word	0x08007345
 8007300:	08007345 	.word	0x08007345
 8007304:	08007345 	.word	0x08007345
 8007308:	08007345 	.word	0x08007345
 800730c:	08007345 	.word	0x08007345
 8007310:	0800733d 	.word	0x0800733d
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731a:	e1c0      	b.n	800769e <UART_SetConfig+0x7ae>
 800731c:	2304      	movs	r3, #4
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007322:	e1bc      	b.n	800769e <UART_SetConfig+0x7ae>
 8007324:	2308      	movs	r3, #8
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732a:	e1b8      	b.n	800769e <UART_SetConfig+0x7ae>
 800732c:	2310      	movs	r3, #16
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007332:	e1b4      	b.n	800769e <UART_SetConfig+0x7ae>
 8007334:	2320      	movs	r3, #32
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733a:	e1b0      	b.n	800769e <UART_SetConfig+0x7ae>
 800733c:	2340      	movs	r3, #64	@ 0x40
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007342:	e1ac      	b.n	800769e <UART_SetConfig+0x7ae>
 8007344:	2380      	movs	r3, #128	@ 0x80
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734a:	e1a8      	b.n	800769e <UART_SetConfig+0x7ae>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a75      	ldr	r2, [pc, #468]	@ (8007528 <UART_SetConfig+0x638>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d130      	bne.n	80073b8 <UART_SetConfig+0x4c8>
 8007356:	4b73      	ldr	r3, [pc, #460]	@ (8007524 <UART_SetConfig+0x634>)
 8007358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2b05      	cmp	r3, #5
 8007360:	d826      	bhi.n	80073b0 <UART_SetConfig+0x4c0>
 8007362:	a201      	add	r2, pc, #4	@ (adr r2, 8007368 <UART_SetConfig+0x478>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	08007381 	.word	0x08007381
 800736c:	08007389 	.word	0x08007389
 8007370:	08007391 	.word	0x08007391
 8007374:	08007399 	.word	0x08007399
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a9 	.word	0x080073a9
 8007380:	2300      	movs	r3, #0
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e18a      	b.n	800769e <UART_SetConfig+0x7ae>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e186      	b.n	800769e <UART_SetConfig+0x7ae>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e182      	b.n	800769e <UART_SetConfig+0x7ae>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e17e      	b.n	800769e <UART_SetConfig+0x7ae>
 80073a0:	2320      	movs	r3, #32
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e17a      	b.n	800769e <UART_SetConfig+0x7ae>
 80073a8:	2340      	movs	r3, #64	@ 0x40
 80073aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ae:	e176      	b.n	800769e <UART_SetConfig+0x7ae>
 80073b0:	2380      	movs	r3, #128	@ 0x80
 80073b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b6:	e172      	b.n	800769e <UART_SetConfig+0x7ae>
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5b      	ldr	r2, [pc, #364]	@ (800752c <UART_SetConfig+0x63c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d130      	bne.n	8007424 <UART_SetConfig+0x534>
 80073c2:	4b58      	ldr	r3, [pc, #352]	@ (8007524 <UART_SetConfig+0x634>)
 80073c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	d826      	bhi.n	800741c <UART_SetConfig+0x52c>
 80073ce:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <UART_SetConfig+0x4e4>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	080073f5 	.word	0x080073f5
 80073dc:	080073fd 	.word	0x080073fd
 80073e0:	08007405 	.word	0x08007405
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	08007415 	.word	0x08007415
 80073ec:	2300      	movs	r3, #0
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e154      	b.n	800769e <UART_SetConfig+0x7ae>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e150      	b.n	800769e <UART_SetConfig+0x7ae>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e14c      	b.n	800769e <UART_SetConfig+0x7ae>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e148      	b.n	800769e <UART_SetConfig+0x7ae>
 800740c:	2320      	movs	r3, #32
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e144      	b.n	800769e <UART_SetConfig+0x7ae>
 8007414:	2340      	movs	r3, #64	@ 0x40
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e140      	b.n	800769e <UART_SetConfig+0x7ae>
 800741c:	2380      	movs	r3, #128	@ 0x80
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e13c      	b.n	800769e <UART_SetConfig+0x7ae>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a41      	ldr	r2, [pc, #260]	@ (8007530 <UART_SetConfig+0x640>)
 800742a:	4293      	cmp	r3, r2
 800742c:	f040 8082 	bne.w	8007534 <UART_SetConfig+0x644>
 8007430:	4b3c      	ldr	r3, [pc, #240]	@ (8007524 <UART_SetConfig+0x634>)
 8007432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007434:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007438:	2b28      	cmp	r3, #40	@ 0x28
 800743a:	d86d      	bhi.n	8007518 <UART_SetConfig+0x628>
 800743c:	a201      	add	r2, pc, #4	@ (adr r2, 8007444 <UART_SetConfig+0x554>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	080074e9 	.word	0x080074e9
 8007448:	08007519 	.word	0x08007519
 800744c:	08007519 	.word	0x08007519
 8007450:	08007519 	.word	0x08007519
 8007454:	08007519 	.word	0x08007519
 8007458:	08007519 	.word	0x08007519
 800745c:	08007519 	.word	0x08007519
 8007460:	08007519 	.word	0x08007519
 8007464:	080074f1 	.word	0x080074f1
 8007468:	08007519 	.word	0x08007519
 800746c:	08007519 	.word	0x08007519
 8007470:	08007519 	.word	0x08007519
 8007474:	08007519 	.word	0x08007519
 8007478:	08007519 	.word	0x08007519
 800747c:	08007519 	.word	0x08007519
 8007480:	08007519 	.word	0x08007519
 8007484:	080074f9 	.word	0x080074f9
 8007488:	08007519 	.word	0x08007519
 800748c:	08007519 	.word	0x08007519
 8007490:	08007519 	.word	0x08007519
 8007494:	08007519 	.word	0x08007519
 8007498:	08007519 	.word	0x08007519
 800749c:	08007519 	.word	0x08007519
 80074a0:	08007519 	.word	0x08007519
 80074a4:	08007501 	.word	0x08007501
 80074a8:	08007519 	.word	0x08007519
 80074ac:	08007519 	.word	0x08007519
 80074b0:	08007519 	.word	0x08007519
 80074b4:	08007519 	.word	0x08007519
 80074b8:	08007519 	.word	0x08007519
 80074bc:	08007519 	.word	0x08007519
 80074c0:	08007519 	.word	0x08007519
 80074c4:	08007509 	.word	0x08007509
 80074c8:	08007519 	.word	0x08007519
 80074cc:	08007519 	.word	0x08007519
 80074d0:	08007519 	.word	0x08007519
 80074d4:	08007519 	.word	0x08007519
 80074d8:	08007519 	.word	0x08007519
 80074dc:	08007519 	.word	0x08007519
 80074e0:	08007519 	.word	0x08007519
 80074e4:	08007511 	.word	0x08007511
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e0d6      	b.n	800769e <UART_SetConfig+0x7ae>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e0d2      	b.n	800769e <UART_SetConfig+0x7ae>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e0ce      	b.n	800769e <UART_SetConfig+0x7ae>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e0ca      	b.n	800769e <UART_SetConfig+0x7ae>
 8007508:	2320      	movs	r3, #32
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750e:	e0c6      	b.n	800769e <UART_SetConfig+0x7ae>
 8007510:	2340      	movs	r3, #64	@ 0x40
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e0c2      	b.n	800769e <UART_SetConfig+0x7ae>
 8007518:	2380      	movs	r3, #128	@ 0x80
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e0be      	b.n	800769e <UART_SetConfig+0x7ae>
 8007520:	40011400 	.word	0x40011400
 8007524:	58024400 	.word	0x58024400
 8007528:	40007800 	.word	0x40007800
 800752c:	40007c00 	.word	0x40007c00
 8007530:	40011800 	.word	0x40011800
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4aad      	ldr	r2, [pc, #692]	@ (80077f0 <UART_SetConfig+0x900>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d176      	bne.n	800762c <UART_SetConfig+0x73c>
 800753e:	4bad      	ldr	r3, [pc, #692]	@ (80077f4 <UART_SetConfig+0x904>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007546:	2b28      	cmp	r3, #40	@ 0x28
 8007548:	d86c      	bhi.n	8007624 <UART_SetConfig+0x734>
 800754a:	a201      	add	r2, pc, #4	@ (adr r2, 8007550 <UART_SetConfig+0x660>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	080075f5 	.word	0x080075f5
 8007554:	08007625 	.word	0x08007625
 8007558:	08007625 	.word	0x08007625
 800755c:	08007625 	.word	0x08007625
 8007560:	08007625 	.word	0x08007625
 8007564:	08007625 	.word	0x08007625
 8007568:	08007625 	.word	0x08007625
 800756c:	08007625 	.word	0x08007625
 8007570:	080075fd 	.word	0x080075fd
 8007574:	08007625 	.word	0x08007625
 8007578:	08007625 	.word	0x08007625
 800757c:	08007625 	.word	0x08007625
 8007580:	08007625 	.word	0x08007625
 8007584:	08007625 	.word	0x08007625
 8007588:	08007625 	.word	0x08007625
 800758c:	08007625 	.word	0x08007625
 8007590:	08007605 	.word	0x08007605
 8007594:	08007625 	.word	0x08007625
 8007598:	08007625 	.word	0x08007625
 800759c:	08007625 	.word	0x08007625
 80075a0:	08007625 	.word	0x08007625
 80075a4:	08007625 	.word	0x08007625
 80075a8:	08007625 	.word	0x08007625
 80075ac:	08007625 	.word	0x08007625
 80075b0:	0800760d 	.word	0x0800760d
 80075b4:	08007625 	.word	0x08007625
 80075b8:	08007625 	.word	0x08007625
 80075bc:	08007625 	.word	0x08007625
 80075c0:	08007625 	.word	0x08007625
 80075c4:	08007625 	.word	0x08007625
 80075c8:	08007625 	.word	0x08007625
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007615 	.word	0x08007615
 80075d4:	08007625 	.word	0x08007625
 80075d8:	08007625 	.word	0x08007625
 80075dc:	08007625 	.word	0x08007625
 80075e0:	08007625 	.word	0x08007625
 80075e4:	08007625 	.word	0x08007625
 80075e8:	08007625 	.word	0x08007625
 80075ec:	08007625 	.word	0x08007625
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e050      	b.n	800769e <UART_SetConfig+0x7ae>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e04c      	b.n	800769e <UART_SetConfig+0x7ae>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e048      	b.n	800769e <UART_SetConfig+0x7ae>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e044      	b.n	800769e <UART_SetConfig+0x7ae>
 8007614:	2320      	movs	r3, #32
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e040      	b.n	800769e <UART_SetConfig+0x7ae>
 800761c:	2340      	movs	r3, #64	@ 0x40
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e03c      	b.n	800769e <UART_SetConfig+0x7ae>
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e038      	b.n	800769e <UART_SetConfig+0x7ae>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a71      	ldr	r2, [pc, #452]	@ (80077f8 <UART_SetConfig+0x908>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d130      	bne.n	8007698 <UART_SetConfig+0x7a8>
 8007636:	4b6f      	ldr	r3, [pc, #444]	@ (80077f4 <UART_SetConfig+0x904>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b05      	cmp	r3, #5
 8007640:	d826      	bhi.n	8007690 <UART_SetConfig+0x7a0>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x758>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007661 	.word	0x08007661
 800764c:	08007669 	.word	0x08007669
 8007650:	08007671 	.word	0x08007671
 8007654:	08007679 	.word	0x08007679
 8007658:	08007681 	.word	0x08007681
 800765c:	08007689 	.word	0x08007689
 8007660:	2302      	movs	r3, #2
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e01a      	b.n	800769e <UART_SetConfig+0x7ae>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e016      	b.n	800769e <UART_SetConfig+0x7ae>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e012      	b.n	800769e <UART_SetConfig+0x7ae>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e00e      	b.n	800769e <UART_SetConfig+0x7ae>
 8007680:	2320      	movs	r3, #32
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007686:	e00a      	b.n	800769e <UART_SetConfig+0x7ae>
 8007688:	2340      	movs	r3, #64	@ 0x40
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e006      	b.n	800769e <UART_SetConfig+0x7ae>
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e002      	b.n	800769e <UART_SetConfig+0x7ae>
 8007698:	2380      	movs	r3, #128	@ 0x80
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a55      	ldr	r2, [pc, #340]	@ (80077f8 <UART_SetConfig+0x908>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	f040 80f8 	bne.w	800789a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	dc46      	bgt.n	8007740 <UART_SetConfig+0x850>
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	db75      	blt.n	80077a2 <UART_SetConfig+0x8b2>
 80076b6:	3b02      	subs	r3, #2
 80076b8:	2b1e      	cmp	r3, #30
 80076ba:	d872      	bhi.n	80077a2 <UART_SetConfig+0x8b2>
 80076bc:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <UART_SetConfig+0x7d4>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	08007747 	.word	0x08007747
 80076c8:	080077a3 	.word	0x080077a3
 80076cc:	0800774f 	.word	0x0800774f
 80076d0:	080077a3 	.word	0x080077a3
 80076d4:	080077a3 	.word	0x080077a3
 80076d8:	080077a3 	.word	0x080077a3
 80076dc:	0800775f 	.word	0x0800775f
 80076e0:	080077a3 	.word	0x080077a3
 80076e4:	080077a3 	.word	0x080077a3
 80076e8:	080077a3 	.word	0x080077a3
 80076ec:	080077a3 	.word	0x080077a3
 80076f0:	080077a3 	.word	0x080077a3
 80076f4:	080077a3 	.word	0x080077a3
 80076f8:	080077a3 	.word	0x080077a3
 80076fc:	0800776f 	.word	0x0800776f
 8007700:	080077a3 	.word	0x080077a3
 8007704:	080077a3 	.word	0x080077a3
 8007708:	080077a3 	.word	0x080077a3
 800770c:	080077a3 	.word	0x080077a3
 8007710:	080077a3 	.word	0x080077a3
 8007714:	080077a3 	.word	0x080077a3
 8007718:	080077a3 	.word	0x080077a3
 800771c:	080077a3 	.word	0x080077a3
 8007720:	080077a3 	.word	0x080077a3
 8007724:	080077a3 	.word	0x080077a3
 8007728:	080077a3 	.word	0x080077a3
 800772c:	080077a3 	.word	0x080077a3
 8007730:	080077a3 	.word	0x080077a3
 8007734:	080077a3 	.word	0x080077a3
 8007738:	080077a3 	.word	0x080077a3
 800773c:	08007795 	.word	0x08007795
 8007740:	2b40      	cmp	r3, #64	@ 0x40
 8007742:	d02a      	beq.n	800779a <UART_SetConfig+0x8aa>
 8007744:	e02d      	b.n	80077a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007746:	f7fe f865 	bl	8005814 <HAL_RCCEx_GetD3PCLK1Freq>
 800774a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800774c:	e02f      	b.n	80077ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800774e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe f874 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800775c:	e027      	b.n	80077ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800775e:	f107 0318 	add.w	r3, r7, #24
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe f9c0 	bl	8005ae8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800776c:	e01f      	b.n	80077ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800776e:	4b21      	ldr	r3, [pc, #132]	@ (80077f4 <UART_SetConfig+0x904>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800777a:	4b1e      	ldr	r3, [pc, #120]	@ (80077f4 <UART_SetConfig+0x904>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	08db      	lsrs	r3, r3, #3
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	4a1d      	ldr	r2, [pc, #116]	@ (80077fc <UART_SetConfig+0x90c>)
 8007786:	fa22 f303 	lsr.w	r3, r2, r3
 800778a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800778c:	e00f      	b.n	80077ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800778e:	4b1b      	ldr	r3, [pc, #108]	@ (80077fc <UART_SetConfig+0x90c>)
 8007790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007792:	e00c      	b.n	80077ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007794:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <UART_SetConfig+0x910>)
 8007796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007798:	e009      	b.n	80077ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a0:	e005      	b.n	80077ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80077ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 81ee 	beq.w	8007b92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ba:	4a12      	ldr	r2, [pc, #72]	@ (8007804 <UART_SetConfig+0x914>)
 80077bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	4413      	add	r3, r2
 80077d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d305      	bcc.n	80077e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d910      	bls.n	8007808 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077ec:	e1d1      	b.n	8007b92 <UART_SetConfig+0xca2>
 80077ee:	bf00      	nop
 80077f0:	40011c00 	.word	0x40011c00
 80077f4:	58024400 	.word	0x58024400
 80077f8:	58000c00 	.word	0x58000c00
 80077fc:	03d09000 	.word	0x03d09000
 8007800:	003d0900 	.word	0x003d0900
 8007804:	0800ae68 	.word	0x0800ae68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800780a:	2200      	movs	r2, #0
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	60fa      	str	r2, [r7, #12]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007814:	4ac0      	ldr	r2, [pc, #768]	@ (8007b18 <UART_SetConfig+0xc28>)
 8007816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800781a:	b29b      	uxth	r3, r3
 800781c:	2200      	movs	r2, #0
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800782a:	f7f8 fd71 	bl	8000310 <__aeabi_uldivmod>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	020b      	lsls	r3, r1, #8
 8007840:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007844:	0202      	lsls	r2, r0, #8
 8007846:	6979      	ldr	r1, [r7, #20]
 8007848:	6849      	ldr	r1, [r1, #4]
 800784a:	0849      	lsrs	r1, r1, #1
 800784c:	2000      	movs	r0, #0
 800784e:	460c      	mov	r4, r1
 8007850:	4605      	mov	r5, r0
 8007852:	eb12 0804 	adds.w	r8, r2, r4
 8007856:	eb43 0905 	adc.w	r9, r3, r5
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	469a      	mov	sl, r3
 8007862:	4693      	mov	fp, r2
 8007864:	4652      	mov	r2, sl
 8007866:	465b      	mov	r3, fp
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f8 fd50 	bl	8000310 <__aeabi_uldivmod>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4613      	mov	r3, r2
 8007876:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800787e:	d308      	bcc.n	8007892 <UART_SetConfig+0x9a2>
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007886:	d204      	bcs.n	8007892 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800788e:	60da      	str	r2, [r3, #12]
 8007890:	e17f      	b.n	8007b92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007898:	e17b      	b.n	8007b92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a2:	f040 80bd 	bne.w	8007a20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80078a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	dc48      	bgt.n	8007940 <UART_SetConfig+0xa50>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	db7b      	blt.n	80079aa <UART_SetConfig+0xaba>
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d879      	bhi.n	80079aa <UART_SetConfig+0xaba>
 80078b6:	a201      	add	r2, pc, #4	@ (adr r2, 80078bc <UART_SetConfig+0x9cc>)
 80078b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078bc:	08007947 	.word	0x08007947
 80078c0:	0800794f 	.word	0x0800794f
 80078c4:	080079ab 	.word	0x080079ab
 80078c8:	080079ab 	.word	0x080079ab
 80078cc:	08007957 	.word	0x08007957
 80078d0:	080079ab 	.word	0x080079ab
 80078d4:	080079ab 	.word	0x080079ab
 80078d8:	080079ab 	.word	0x080079ab
 80078dc:	08007967 	.word	0x08007967
 80078e0:	080079ab 	.word	0x080079ab
 80078e4:	080079ab 	.word	0x080079ab
 80078e8:	080079ab 	.word	0x080079ab
 80078ec:	080079ab 	.word	0x080079ab
 80078f0:	080079ab 	.word	0x080079ab
 80078f4:	080079ab 	.word	0x080079ab
 80078f8:	080079ab 	.word	0x080079ab
 80078fc:	08007977 	.word	0x08007977
 8007900:	080079ab 	.word	0x080079ab
 8007904:	080079ab 	.word	0x080079ab
 8007908:	080079ab 	.word	0x080079ab
 800790c:	080079ab 	.word	0x080079ab
 8007910:	080079ab 	.word	0x080079ab
 8007914:	080079ab 	.word	0x080079ab
 8007918:	080079ab 	.word	0x080079ab
 800791c:	080079ab 	.word	0x080079ab
 8007920:	080079ab 	.word	0x080079ab
 8007924:	080079ab 	.word	0x080079ab
 8007928:	080079ab 	.word	0x080079ab
 800792c:	080079ab 	.word	0x080079ab
 8007930:	080079ab 	.word	0x080079ab
 8007934:	080079ab 	.word	0x080079ab
 8007938:	080079ab 	.word	0x080079ab
 800793c:	0800799d 	.word	0x0800799d
 8007940:	2b40      	cmp	r3, #64	@ 0x40
 8007942:	d02e      	beq.n	80079a2 <UART_SetConfig+0xab2>
 8007944:	e031      	b.n	80079aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007946:	f7fc fd99 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 800794a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800794c:	e033      	b.n	80079b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800794e:	f7fc fdab 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8007952:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007954:	e02f      	b.n	80079b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800795a:	4618      	mov	r0, r3
 800795c:	f7fd ff70 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007964:	e027      	b.n	80079b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007966:	f107 0318 	add.w	r3, r7, #24
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe f8bc 	bl	8005ae8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007974:	e01f      	b.n	80079b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007976:	4b69      	ldr	r3, [pc, #420]	@ (8007b1c <UART_SetConfig+0xc2c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007982:	4b66      	ldr	r3, [pc, #408]	@ (8007b1c <UART_SetConfig+0xc2c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	08db      	lsrs	r3, r3, #3
 8007988:	f003 0303 	and.w	r3, r3, #3
 800798c:	4a64      	ldr	r2, [pc, #400]	@ (8007b20 <UART_SetConfig+0xc30>)
 800798e:	fa22 f303 	lsr.w	r3, r2, r3
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007994:	e00f      	b.n	80079b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007996:	4b62      	ldr	r3, [pc, #392]	@ (8007b20 <UART_SetConfig+0xc30>)
 8007998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800799a:	e00c      	b.n	80079b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800799c:	4b61      	ldr	r3, [pc, #388]	@ (8007b24 <UART_SetConfig+0xc34>)
 800799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a0:	e009      	b.n	80079b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a8:	e005      	b.n	80079b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80079b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80ea 	beq.w	8007b92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	4a55      	ldr	r2, [pc, #340]	@ (8007b18 <UART_SetConfig+0xc28>)
 80079c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d0:	005a      	lsls	r2, r3, #1
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	085b      	lsrs	r3, r3, #1
 80079d8:	441a      	add	r2, r3
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	2b0f      	cmp	r3, #15
 80079e8:	d916      	bls.n	8007a18 <UART_SetConfig+0xb28>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f0:	d212      	bcs.n	8007a18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f023 030f 	bic.w	r3, r3, #15
 80079fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	085b      	lsrs	r3, r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007a14:	60da      	str	r2, [r3, #12]
 8007a16:	e0bc      	b.n	8007b92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a1e:	e0b8      	b.n	8007b92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	dc4b      	bgt.n	8007ac0 <UART_SetConfig+0xbd0>
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f2c0 8087 	blt.w	8007b3c <UART_SetConfig+0xc4c>
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	f200 8084 	bhi.w	8007b3c <UART_SetConfig+0xc4c>
 8007a34:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <UART_SetConfig+0xb4c>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007ac7 	.word	0x08007ac7
 8007a40:	08007acf 	.word	0x08007acf
 8007a44:	08007b3d 	.word	0x08007b3d
 8007a48:	08007b3d 	.word	0x08007b3d
 8007a4c:	08007ad7 	.word	0x08007ad7
 8007a50:	08007b3d 	.word	0x08007b3d
 8007a54:	08007b3d 	.word	0x08007b3d
 8007a58:	08007b3d 	.word	0x08007b3d
 8007a5c:	08007ae7 	.word	0x08007ae7
 8007a60:	08007b3d 	.word	0x08007b3d
 8007a64:	08007b3d 	.word	0x08007b3d
 8007a68:	08007b3d 	.word	0x08007b3d
 8007a6c:	08007b3d 	.word	0x08007b3d
 8007a70:	08007b3d 	.word	0x08007b3d
 8007a74:	08007b3d 	.word	0x08007b3d
 8007a78:	08007b3d 	.word	0x08007b3d
 8007a7c:	08007af7 	.word	0x08007af7
 8007a80:	08007b3d 	.word	0x08007b3d
 8007a84:	08007b3d 	.word	0x08007b3d
 8007a88:	08007b3d 	.word	0x08007b3d
 8007a8c:	08007b3d 	.word	0x08007b3d
 8007a90:	08007b3d 	.word	0x08007b3d
 8007a94:	08007b3d 	.word	0x08007b3d
 8007a98:	08007b3d 	.word	0x08007b3d
 8007a9c:	08007b3d 	.word	0x08007b3d
 8007aa0:	08007b3d 	.word	0x08007b3d
 8007aa4:	08007b3d 	.word	0x08007b3d
 8007aa8:	08007b3d 	.word	0x08007b3d
 8007aac:	08007b3d 	.word	0x08007b3d
 8007ab0:	08007b3d 	.word	0x08007b3d
 8007ab4:	08007b3d 	.word	0x08007b3d
 8007ab8:	08007b3d 	.word	0x08007b3d
 8007abc:	08007b2f 	.word	0x08007b2f
 8007ac0:	2b40      	cmp	r3, #64	@ 0x40
 8007ac2:	d037      	beq.n	8007b34 <UART_SetConfig+0xc44>
 8007ac4:	e03a      	b.n	8007b3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac6:	f7fc fcd9 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8007aca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007acc:	e03c      	b.n	8007b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ace:	f7fc fceb 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8007ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ad4:	e038      	b.n	8007b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd feb0 	bl	8005840 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ae4:	e030      	b.n	8007b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ae6:	f107 0318 	add.w	r3, r7, #24
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd fffc 	bl	8005ae8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007af4:	e028      	b.n	8007b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af6:	4b09      	ldr	r3, [pc, #36]	@ (8007b1c <UART_SetConfig+0xc2c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d012      	beq.n	8007b28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b02:	4b06      	ldr	r3, [pc, #24]	@ (8007b1c <UART_SetConfig+0xc2c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	08db      	lsrs	r3, r3, #3
 8007b08:	f003 0303 	and.w	r3, r3, #3
 8007b0c:	4a04      	ldr	r2, [pc, #16]	@ (8007b20 <UART_SetConfig+0xc30>)
 8007b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b14:	e018      	b.n	8007b48 <UART_SetConfig+0xc58>
 8007b16:	bf00      	nop
 8007b18:	0800ae68 	.word	0x0800ae68
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	03d09000 	.word	0x03d09000
 8007b24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007b28:	4b24      	ldr	r3, [pc, #144]	@ (8007bbc <UART_SetConfig+0xccc>)
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b2c:	e00c      	b.n	8007b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b2e:	4b24      	ldr	r3, [pc, #144]	@ (8007bc0 <UART_SetConfig+0xcd0>)
 8007b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b32:	e009      	b.n	8007b48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b3a:	e005      	b.n	8007b48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b46:	bf00      	nop
    }

    if (pclk != 0U)
 8007b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d021      	beq.n	8007b92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b52:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <UART_SetConfig+0xcd4>)
 8007b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	441a      	add	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b70:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	2b0f      	cmp	r3, #15
 8007b76:	d909      	bls.n	8007b8c <UART_SetConfig+0xc9c>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b7e:	d205      	bcs.n	8007b8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	e002      	b.n	8007b92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2200      	movs	r2, #0
 8007bac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007bae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3748      	adds	r7, #72	@ 0x48
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bbc:	03d09000 	.word	0x03d09000
 8007bc0:	003d0900 	.word	0x003d0900
 8007bc4:	0800ae68 	.word	0x0800ae68

08007bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d01a      	beq.n	8007cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cc6:	d10a      	bne.n	8007cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00a      	beq.n	8007d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	605a      	str	r2, [r3, #4]
  }
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b098      	sub	sp, #96	@ 0x60
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d1c:	f7fa fb10 	bl	8002340 <HAL_GetTick>
 8007d20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b08      	cmp	r3, #8
 8007d2e:	d12f      	bne.n	8007d90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f88e 	bl	8007e60 <UART_WaitOnFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d022      	beq.n	8007d90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e6      	bne.n	8007d4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	e063      	b.n	8007e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0304 	and.w	r3, r3, #4
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d149      	bne.n	8007e32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da6:	2200      	movs	r2, #0
 8007da8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f857 	bl	8007e60 <UART_WaitOnFlagUntilTimeout>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d03c      	beq.n	8007e32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e6      	bne.n	8007db8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f023 0301 	bic.w	r3, r3, #1
 8007e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e0a:	61fa      	str	r2, [r7, #28]
 8007e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	69b9      	ldr	r1, [r7, #24]
 8007e10:	69fa      	ldr	r2, [r7, #28]
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	617b      	str	r3, [r7, #20]
   return(result);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e5      	bne.n	8007dea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2220      	movs	r2, #32
 8007e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e012      	b.n	8007e58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3758      	adds	r7, #88	@ 0x58
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e70:	e04f      	b.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e78:	d04b      	beq.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7a:	f7fa fa61 	bl	8002340 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e04e      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d037      	beq.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b80      	cmp	r3, #128	@ 0x80
 8007ea6:	d034      	beq.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b40      	cmp	r3, #64	@ 0x40
 8007eac:	d031      	beq.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d110      	bne.n	8007ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f839 	bl	8007f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e029      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eec:	d111      	bne.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f81f 	bl	8007f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e00f      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69da      	ldr	r2, [r3, #28]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	bf0c      	ite	eq
 8007f22:	2301      	moveq	r3, #1
 8007f24:	2300      	movne	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d0a0      	beq.n	8007e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b095      	sub	sp, #84	@ 0x54
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e6      	bne.n	8007f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	4b1e      	ldr	r3, [pc, #120]	@ (8008004 <UART_EndRxTransfer+0xc8>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e5      	bne.n	8007f76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d118      	bne.n	8007fe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f023 0310 	bic.w	r3, r3, #16
 8007fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6979      	ldr	r1, [r7, #20]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e6      	bne.n	8007fb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ff8:	bf00      	nop
 8007ffa:	3754      	adds	r7, #84	@ 0x54
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	effffffe 	.word	0xeffffffe

08008008 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UARTEx_DisableFifoMode+0x16>
 800801a:	2302      	movs	r3, #2
 800801c:	e027      	b.n	800806e <HAL_UARTEx_DisableFifoMode+0x66>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2224      	movs	r2, #36	@ 0x24
 800802a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0201 	bic.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800804c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800808a:	2b01      	cmp	r3, #1
 800808c:	d101      	bne.n	8008092 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800808e:	2302      	movs	r3, #2
 8008090:	e02d      	b.n	80080ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2224      	movs	r2, #36	@ 0x24
 800809e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f850 	bl	8008174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b084      	sub	sp, #16
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800810a:	2302      	movs	r3, #2
 800810c:	e02d      	b.n	800816a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2224      	movs	r2, #36	@ 0x24
 800811a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f812 	bl	8008174 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008180:	2b00      	cmp	r3, #0
 8008182:	d108      	bne.n	8008196 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008194:	e031      	b.n	80081fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008196:	2310      	movs	r3, #16
 8008198:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800819a:	2310      	movs	r3, #16
 800819c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	0e5b      	lsrs	r3, r3, #25
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	0f5b      	lsrs	r3, r3, #29
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	7b3a      	ldrb	r2, [r7, #12]
 80081c2:	4911      	ldr	r1, [pc, #68]	@ (8008208 <UARTEx_SetNbDataToProcess+0x94>)
 80081c4:	5c8a      	ldrb	r2, [r1, r2]
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081ca:	7b3a      	ldrb	r2, [r7, #12]
 80081cc:	490f      	ldr	r1, [pc, #60]	@ (800820c <UARTEx_SetNbDataToProcess+0x98>)
 80081ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	7b7a      	ldrb	r2, [r7, #13]
 80081e0:	4909      	ldr	r1, [pc, #36]	@ (8008208 <UARTEx_SetNbDataToProcess+0x94>)
 80081e2:	5c8a      	ldrb	r2, [r1, r2]
 80081e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081e8:	7b7a      	ldrb	r2, [r7, #13]
 80081ea:	4908      	ldr	r1, [pc, #32]	@ (800820c <UARTEx_SetNbDataToProcess+0x98>)
 80081ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80081fa:	bf00      	nop
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	0800ae80 	.word	0x0800ae80
 800820c:	0800ae88 	.word	0x0800ae88

08008210 <__NVIC_SetPriority>:
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	6039      	str	r1, [r7, #0]
 800821a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800821c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008220:	2b00      	cmp	r3, #0
 8008222:	db0a      	blt.n	800823a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	490c      	ldr	r1, [pc, #48]	@ (800825c <__NVIC_SetPriority+0x4c>)
 800822a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800822e:	0112      	lsls	r2, r2, #4
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	440b      	add	r3, r1
 8008234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008238:	e00a      	b.n	8008250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	b2da      	uxtb	r2, r3
 800823e:	4908      	ldr	r1, [pc, #32]	@ (8008260 <__NVIC_SetPriority+0x50>)
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	3b04      	subs	r3, #4
 8008248:	0112      	lsls	r2, r2, #4
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	440b      	add	r3, r1
 800824e:	761a      	strb	r2, [r3, #24]
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	e000e100 	.word	0xe000e100
 8008260:	e000ed00 	.word	0xe000ed00

08008264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008268:	2100      	movs	r1, #0
 800826a:	f06f 0004 	mvn.w	r0, #4
 800826e:	f7ff ffcf 	bl	8008210 <__NVIC_SetPriority>
#endif
}
 8008272:	bf00      	nop
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800827e:	f3ef 8305 	mrs	r3, IPSR
 8008282:	603b      	str	r3, [r7, #0]
  return(result);
 8008284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800828a:	f06f 0305 	mvn.w	r3, #5
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	e00c      	b.n	80082ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008292:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <osKernelInitialize+0x44>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800829a:	4b08      	ldr	r3, [pc, #32]	@ (80082bc <osKernelInitialize+0x44>)
 800829c:	2201      	movs	r2, #1
 800829e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e002      	b.n	80082ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082ac:	687b      	ldr	r3, [r7, #4]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	240001a8 	.word	0x240001a8

080082c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082c6:	f3ef 8305 	mrs	r3, IPSR
 80082ca:	603b      	str	r3, [r7, #0]
  return(result);
 80082cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <osKernelStart+0x1a>
    stat = osErrorISR;
 80082d2:	f06f 0305 	mvn.w	r3, #5
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	e010      	b.n	80082fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082da:	4b0b      	ldr	r3, [pc, #44]	@ (8008308 <osKernelStart+0x48>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d109      	bne.n	80082f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082e2:	f7ff ffbf 	bl	8008264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082e6:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <osKernelStart+0x48>)
 80082e8:	2202      	movs	r2, #2
 80082ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082ec:	f001 f87a 	bl	80093e4 <vTaskStartScheduler>
      stat = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	607b      	str	r3, [r7, #4]
 80082f4:	e002      	b.n	80082fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082fc:	687b      	ldr	r3, [r7, #4]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	240001a8 	.word	0x240001a8

0800830c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b08e      	sub	sp, #56	@ 0x38
 8008310:	af04      	add	r7, sp, #16
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008318:	2300      	movs	r3, #0
 800831a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800831c:	f3ef 8305 	mrs	r3, IPSR
 8008320:	617b      	str	r3, [r7, #20]
  return(result);
 8008322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008324:	2b00      	cmp	r3, #0
 8008326:	d17e      	bne.n	8008426 <osThreadNew+0x11a>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d07b      	beq.n	8008426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800832e:	2380      	movs	r3, #128	@ 0x80
 8008330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008332:	2318      	movs	r3, #24
 8008334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800833a:	f04f 33ff 	mov.w	r3, #4294967295
 800833e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d045      	beq.n	80083d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <osThreadNew+0x48>
        name = attr->name;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <osThreadNew+0x6e>
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	2b38      	cmp	r3, #56	@ 0x38
 800836c:	d805      	bhi.n	800837a <osThreadNew+0x6e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <osThreadNew+0x72>
        return (NULL);
 800837a:	2300      	movs	r3, #0
 800837c:	e054      	b.n	8008428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	089b      	lsrs	r3, r3, #2
 800838c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00e      	beq.n	80083b4 <osThreadNew+0xa8>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b5b      	cmp	r3, #91	@ 0x5b
 800839c:	d90a      	bls.n	80083b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <osThreadNew+0xa8>
        mem = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	e010      	b.n	80083d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <osThreadNew+0xca>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <osThreadNew+0xca>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <osThreadNew+0xca>
          mem = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]
 80083d0:	e001      	b.n	80083d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d110      	bne.n	80083fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083e4:	9202      	str	r2, [sp, #8]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	6a3a      	ldr	r2, [r7, #32]
 80083f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fe1a 	bl	800902c <xTaskCreateStatic>
 80083f8:	4603      	mov	r3, r0
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	e013      	b.n	8008426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d110      	bne.n	8008426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	b29a      	uxth	r2, r3
 8008408:	f107 0310 	add.w	r3, r7, #16
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fe68 	bl	80090ec <xTaskCreate>
 800841c:	4603      	mov	r3, r0
 800841e:	2b01      	cmp	r3, #1
 8008420:	d001      	beq.n	8008426 <osThreadNew+0x11a>
            hTask = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008426:	693b      	ldr	r3, [r7, #16]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3728      	adds	r7, #40	@ 0x28
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008438:	f3ef 8305 	mrs	r3, IPSR
 800843c:	60bb      	str	r3, [r7, #8]
  return(result);
 800843e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008440:	2b00      	cmp	r3, #0
 8008442:	d003      	beq.n	800844c <osDelay+0x1c>
    stat = osErrorISR;
 8008444:	f06f 0305 	mvn.w	r3, #5
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	e007      	b.n	800845c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d002      	beq.n	800845c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 ff8e 	bl	8009378 <vTaskDelay>
    }
  }

  return (stat);
 800845c:	68fb      	ldr	r3, [r7, #12]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4a07      	ldr	r2, [pc, #28]	@ (8008494 <vApplicationGetIdleTaskMemory+0x2c>)
 8008478:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	4a06      	ldr	r2, [pc, #24]	@ (8008498 <vApplicationGetIdleTaskMemory+0x30>)
 800847e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2280      	movs	r2, #128	@ 0x80
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	240001ac 	.word	0x240001ac
 8008498:	24000208 	.word	0x24000208

0800849c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4a07      	ldr	r2, [pc, #28]	@ (80084c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80084ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4a06      	ldr	r2, [pc, #24]	@ (80084cc <vApplicationGetTimerTaskMemory+0x30>)
 80084b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084ba:	601a      	str	r2, [r3, #0]
}
 80084bc:	bf00      	nop
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	24000408 	.word	0x24000408
 80084cc:	24000464 	.word	0x24000464

080084d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f103 0208 	add.w	r2, r3, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295
 80084e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f103 0208 	add.w	r2, r3, #8
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f103 0208 	add.w	r2, r3, #8
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d103      	bne.n	8008592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	e00c      	b.n	80085ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3308      	adds	r3, #8
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e002      	b.n	80085a0 <vListInsert+0x2e>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d2f6      	bcs.n	800859a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	601a      	str	r2, [r3, #0]
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6892      	ldr	r2, [r2, #8]
 80085fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d103      	bne.n	8008618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	1e5a      	subs	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10b      	bne.n	8008664 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800865e:	bf00      	nop
 8008660:	bf00      	nop
 8008662:	e7fd      	b.n	8008660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008664:	f002 f878 	bl	800a758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	68f9      	ldr	r1, [r7, #12]
 8008672:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	441a      	add	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008694:	3b01      	subs	r3, #1
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800869a:	fb01 f303 	mul.w	r3, r1, r3
 800869e:	441a      	add	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	22ff      	movs	r2, #255	@ 0xff
 80086a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	22ff      	movs	r2, #255	@ 0xff
 80086b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d114      	bne.n	80086e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d01a      	beq.n	80086f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3310      	adds	r3, #16
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 f91a 	bl	8009900 <xTaskRemoveFromEventList>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d012      	beq.n	80086f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <xQueueGenericReset+0xd0>)
 80086d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	e009      	b.n	80086f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3310      	adds	r3, #16
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fef1 	bl	80084d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3324      	adds	r3, #36	@ 0x24
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff feec 	bl	80084d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086f8:	f002 f860 	bl	800a7bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086fc:	2301      	movs	r3, #1
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08e      	sub	sp, #56	@ 0x38
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	e7fd      	b.n	8008734 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <xQueueGenericCreateStatic+0x56>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <xQueueGenericCreateStatic+0x5a>
 8008762:	2301      	movs	r3, #1
 8008764:	e000      	b.n	8008768 <xQueueGenericCreateStatic+0x5c>
 8008766:	2300      	movs	r3, #0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	623b      	str	r3, [r7, #32]
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <xQueueGenericCreateStatic+0x84>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <xQueueGenericCreateStatic+0x88>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <xQueueGenericCreateStatic+0x8a>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10b      	bne.n	80087b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	61fb      	str	r3, [r7, #28]
}
 80087ac:	bf00      	nop
 80087ae:	bf00      	nop
 80087b0:	e7fd      	b.n	80087ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087b2:	2350      	movs	r3, #80	@ 0x50
 80087b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b50      	cmp	r3, #80	@ 0x50
 80087ba:	d00b      	beq.n	80087d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	61bb      	str	r3, [r7, #24]
}
 80087ce:	bf00      	nop
 80087d0:	bf00      	nop
 80087d2:	e7fd      	b.n	80087d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80087da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00d      	beq.n	80087fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80087ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	4613      	mov	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 f805 	bl	8008806 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087fe:	4618      	mov	r0, r3
 8008800:	3730      	adds	r7, #48	@ 0x30
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d103      	bne.n	8008822 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	e002      	b.n	8008828 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008834:	2101      	movs	r1, #1
 8008836:	69b8      	ldr	r0, [r7, #24]
 8008838:	f7ff fefe 	bl	8008638 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008844:	bf00      	nop
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08e      	sub	sp, #56	@ 0x38
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800885a:	2300      	movs	r3, #0
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10b      	bne.n	8008880 <xQueueGenericSend+0x34>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <xQueueGenericSend+0x42>
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <xQueueGenericSend+0x46>
 800888e:	2301      	movs	r3, #1
 8008890:	e000      	b.n	8008894 <xQueueGenericSend+0x48>
 8008892:	2300      	movs	r3, #0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <xQueueGenericSend+0x64>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d103      	bne.n	80088be <xQueueGenericSend+0x72>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <xQueueGenericSend+0x76>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <xQueueGenericSend+0x78>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <xQueueGenericSend+0x94>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	623b      	str	r3, [r7, #32]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088e0:	f001 f9ce 	bl	8009c80 <xTaskGetSchedulerState>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <xQueueGenericSend+0xa4>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <xQueueGenericSend+0xa8>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <xQueueGenericSend+0xaa>
 80088f4:	2300      	movs	r3, #0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <xQueueGenericSend+0xc6>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	61fb      	str	r3, [r7, #28]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008912:	f001 ff21 	bl	800a758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891e:	429a      	cmp	r2, r3
 8008920:	d302      	bcc.n	8008928 <xQueueGenericSend+0xdc>
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d129      	bne.n	800897c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800892e:	f000 fa0f 	bl	8008d50 <prvCopyDataToQueue>
 8008932:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d010      	beq.n	800895e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	3324      	adds	r3, #36	@ 0x24
 8008940:	4618      	mov	r0, r3
 8008942:	f000 ffdd 	bl	8009900 <xTaskRemoveFromEventList>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d013      	beq.n	8008974 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800894c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a4c <xQueueGenericSend+0x200>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	e00a      	b.n	8008974 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800895e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d007      	beq.n	8008974 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008964:	4b39      	ldr	r3, [pc, #228]	@ (8008a4c <xQueueGenericSend+0x200>)
 8008966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008974:	f001 ff22 	bl	800a7bc <vPortExitCritical>
				return pdPASS;
 8008978:	2301      	movs	r3, #1
 800897a:	e063      	b.n	8008a44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008982:	f001 ff1b 	bl	800a7bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008986:	2300      	movs	r3, #0
 8008988:	e05c      	b.n	8008a44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800898a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f817 	bl	80099c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800899a:	2301      	movs	r3, #1
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800899e:	f001 ff0d 	bl	800a7bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089a2:	f000 fd87 	bl	80094b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089a6:	f001 fed7 	bl	800a758 <vPortEnterCritical>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d103      	bne.n	80089c0 <xQueueGenericSend+0x174>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089c6:	b25b      	sxtb	r3, r3
 80089c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089cc:	d103      	bne.n	80089d6 <xQueueGenericSend+0x18a>
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089d6:	f001 fef1 	bl	800a7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089da:	1d3a      	adds	r2, r7, #4
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 f806 	bl	80099f4 <xTaskCheckForTimeOut>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d124      	bne.n	8008a38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089f0:	f000 faa6 	bl	8008f40 <prvIsQueueFull>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d018      	beq.n	8008a2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	3310      	adds	r3, #16
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 ff2a 	bl	800985c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a0a:	f000 fa31 	bl	8008e70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a0e:	f000 fd5f 	bl	80094d0 <xTaskResumeAll>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f47f af7c 	bne.w	8008912 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a4c <xQueueGenericSend+0x200>)
 8008a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a20:	601a      	str	r2, [r3, #0]
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	e772      	b.n	8008912 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a2e:	f000 fa1f 	bl	8008e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a32:	f000 fd4d 	bl	80094d0 <xTaskResumeAll>
 8008a36:	e76c      	b.n	8008912 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a3a:	f000 fa19 	bl	8008e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a3e:	f000 fd47 	bl	80094d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3738      	adds	r7, #56	@ 0x38
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	e000ed04 	.word	0xe000ed04

08008a50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b090      	sub	sp, #64	@ 0x40
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10b      	bne.n	8008a80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	e7fd      	b.n	8008a7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d103      	bne.n	8008a8e <xQueueGenericSendFromISR+0x3e>
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <xQueueGenericSendFromISR+0x42>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <xQueueGenericSendFromISR+0x44>
 8008a92:	2300      	movs	r3, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10b      	bne.n	8008ab0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008aaa:	bf00      	nop
 8008aac:	bf00      	nop
 8008aae:	e7fd      	b.n	8008aac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d103      	bne.n	8008abe <xQueueGenericSendFromISR+0x6e>
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <xQueueGenericSendFromISR+0x72>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <xQueueGenericSendFromISR+0x74>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	623b      	str	r3, [r7, #32]
}
 8008ada:	bf00      	nop
 8008adc:	bf00      	nop
 8008ade:	e7fd      	b.n	8008adc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ae0:	f001 ff1a 	bl	800a918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ae4:	f3ef 8211 	mrs	r2, BASEPRI
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	61fa      	str	r2, [r7, #28]
 8008afa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008afc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008afe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <xQueueGenericSendFromISR+0xc2>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d12f      	bne.n	8008b72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b28:	f000 f912 	bl	8008d50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b34:	d112      	bne.n	8008b5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d016      	beq.n	8008b6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	3324      	adds	r3, #36	@ 0x24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fedc 	bl	8009900 <xTaskRemoveFromEventList>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00e      	beq.n	8008b6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00b      	beq.n	8008b6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	601a      	str	r2, [r3, #0]
 8008b5a:	e007      	b.n	8008b6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b60:	3301      	adds	r3, #1
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	b25a      	sxtb	r2, r3
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b70:	e001      	b.n	8008b76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b78:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3740      	adds	r7, #64	@ 0x40
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08c      	sub	sp, #48	@ 0x30
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10b      	bne.n	8008bbe <xQueueReceive+0x32>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	623b      	str	r3, [r7, #32]
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	e7fd      	b.n	8008bba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <xQueueReceive+0x40>
 8008bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xQueueReceive+0x44>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <xQueueReceive+0x46>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <xQueueReceive+0x62>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	61fb      	str	r3, [r7, #28]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bee:	f001 f847 	bl	8009c80 <xTaskGetSchedulerState>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <xQueueReceive+0x72>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueReceive+0x76>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueReceive+0x78>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10b      	bne.n	8008c20 <xQueueReceive+0x94>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61bb      	str	r3, [r7, #24]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c20:	f001 fd9a 	bl	800a758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01f      	beq.n	8008c70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c34:	f000 f8f6 	bl	8008e24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	1e5a      	subs	r2, r3, #1
 8008c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00f      	beq.n	8008c68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fe57 	bl	8009900 <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b3c      	ldr	r3, [pc, #240]	@ (8008d4c <xQueueReceive+0x1c0>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c68:	f001 fda8 	bl	800a7bc <vPortExitCritical>
				return pdPASS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e069      	b.n	8008d44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c76:	f001 fda1 	bl	800a7bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e062      	b.n	8008d44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c84:	f107 0310 	add.w	r3, r7, #16
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fe9d 	bl	80099c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c92:	f001 fd93 	bl	800a7bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c96:	f000 fc0d 	bl	80094b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c9a:	f001 fd5d 	bl	800a758 <vPortEnterCritical>
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d103      	bne.n	8008cb4 <xQueueReceive+0x128>
 8008cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cba:	b25b      	sxtb	r3, r3
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d103      	bne.n	8008cca <xQueueReceive+0x13e>
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cca:	f001 fd77 	bl	800a7bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cce:	1d3a      	adds	r2, r7, #4
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fe8c 	bl	80099f4 <xTaskCheckForTimeOut>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d123      	bne.n	8008d2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ce4:	f000 f916 	bl	8008f14 <prvIsQueueEmpty>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d017      	beq.n	8008d1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf0:	3324      	adds	r3, #36	@ 0x24
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fdb0 	bl	800985c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cfe:	f000 f8b7 	bl	8008e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d02:	f000 fbe5 	bl	80094d0 <xTaskResumeAll>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d189      	bne.n	8008c20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d4c <xQueueReceive+0x1c0>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	e780      	b.n	8008c20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d20:	f000 f8a6 	bl	8008e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d24:	f000 fbd4 	bl	80094d0 <xTaskResumeAll>
 8008d28:	e77a      	b.n	8008c20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d2c:	f000 f8a0 	bl	8008e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d30:	f000 fbce 	bl	80094d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d36:	f000 f8ed 	bl	8008f14 <prvIsQueueEmpty>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f43f af6f 	beq.w	8008c20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3730      	adds	r7, #48	@ 0x30
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10d      	bne.n	8008d8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d14d      	bne.n	8008e12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 ff9e 	bl	8009cbc <xTaskPriorityDisinherit>
 8008d80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	609a      	str	r2, [r3, #8]
 8008d88:	e043      	b.n	8008e12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d119      	bne.n	8008dc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6858      	ldr	r0, [r3, #4]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	f002 f818 	bl	800add0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d32b      	bcc.n	8008e12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	e026      	b.n	8008e12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68d8      	ldr	r0, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	f001 fffe 	bl	800add0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ddc:	425b      	negs	r3, r3
 8008dde:	441a      	add	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d207      	bcs.n	8008e00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689a      	ldr	r2, [r3, #8]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df8:	425b      	negs	r3, r3
 8008dfa:	441a      	add	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d105      	bne.n	8008e12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e1a:	697b      	ldr	r3, [r7, #20]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d018      	beq.n	8008e68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3e:	441a      	add	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d303      	bcc.n	8008e58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	68d9      	ldr	r1, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e60:	461a      	mov	r2, r3
 8008e62:	6838      	ldr	r0, [r7, #0]
 8008e64:	f001 ffb4 	bl	800add0 <memcpy>
	}
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e78:	f001 fc6e 	bl	800a758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e84:	e011      	b.n	8008eaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d012      	beq.n	8008eb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3324      	adds	r3, #36	@ 0x24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fd34 	bl	8009900 <xTaskRemoveFromEventList>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e9e:	f000 fe0d 	bl	8009abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dce9      	bgt.n	8008e86 <prvUnlockQueue+0x16>
 8008eb2:	e000      	b.n	8008eb6 <prvUnlockQueue+0x46>
					break;
 8008eb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	22ff      	movs	r2, #255	@ 0xff
 8008eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008ebe:	f001 fc7d 	bl	800a7bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ec2:	f001 fc49 	bl	800a758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ecc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ece:	e011      	b.n	8008ef4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d012      	beq.n	8008efe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3310      	adds	r3, #16
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fd0f 	bl	8009900 <xTaskRemoveFromEventList>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ee8:	f000 fde8 	bl	8009abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dce9      	bgt.n	8008ed0 <prvUnlockQueue+0x60>
 8008efc:	e000      	b.n	8008f00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008efe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	22ff      	movs	r2, #255	@ 0xff
 8008f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f08:	f001 fc58 	bl	800a7bc <vPortExitCritical>
}
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f1c:	f001 fc1c 	bl	800a758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	e001      	b.n	8008f32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f32:	f001 fc43 	bl	800a7bc <vPortExitCritical>

	return xReturn;
 8008f36:	68fb      	ldr	r3, [r7, #12]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f48:	f001 fc06 	bl	800a758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d102      	bne.n	8008f5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e001      	b.n	8008f62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f62:	f001 fc2b 	bl	800a7bc <vPortExitCritical>

	return xReturn;
 8008f66:	68fb      	ldr	r3, [r7, #12]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	e014      	b.n	8008faa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f80:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc0 <vQueueAddToRegistry+0x50>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10b      	bne.n	8008fa4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f8c:	490c      	ldr	r1, [pc, #48]	@ (8008fc0 <vQueueAddToRegistry+0x50>)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f96:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc0 <vQueueAddToRegistry+0x50>)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fa2:	e006      	b.n	8008fb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	d9e7      	bls.n	8008f80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	24000864 	.word	0x24000864

08008fc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fd4:	f001 fbc0 	bl	800a758 <vPortEnterCritical>
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fde:	b25b      	sxtb	r3, r3
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe4:	d103      	bne.n	8008fee <vQueueWaitForMessageRestricted+0x2a>
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d103      	bne.n	8009004 <vQueueWaitForMessageRestricted+0x40>
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009004:	f001 fbda 	bl	800a7bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900c:	2b00      	cmp	r3, #0
 800900e:	d106      	bne.n	800901e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	3324      	adds	r3, #36	@ 0x24
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fc45 	bl	80098a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800901e:	6978      	ldr	r0, [r7, #20]
 8009020:	f7ff ff26 	bl	8008e70 <prvUnlockQueue>
	}
 8009024:	bf00      	nop
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08e      	sub	sp, #56	@ 0x38
 8009030:	af04      	add	r7, sp, #16
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800903a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	623b      	str	r3, [r7, #32]
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	e7fd      	b.n	8009054 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <xTaskCreateStatic+0x4a>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	61fb      	str	r3, [r7, #28]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009076:	235c      	movs	r3, #92	@ 0x5c
 8009078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b5c      	cmp	r3, #92	@ 0x5c
 800907e:	d00b      	beq.n	8009098 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	61bb      	str	r3, [r7, #24]
}
 8009092:	bf00      	nop
 8009094:	bf00      	nop
 8009096:	e7fd      	b.n	8009094 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009098:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01e      	beq.n	80090de <xTaskCreateStatic+0xb2>
 80090a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01b      	beq.n	80090de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090b8:	2300      	movs	r3, #0
 80090ba:	9303      	str	r3, [sp, #12]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f850 	bl	8009176 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090d8:	f000 f8de 	bl	8009298 <prvAddNewTaskToReadyList>
 80090dc:	e001      	b.n	80090e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090e2:	697b      	ldr	r3, [r7, #20]
	}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3728      	adds	r7, #40	@ 0x28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	@ 0x30
 80090f0:	af04      	add	r7, sp, #16
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	4613      	mov	r3, r2
 80090fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4618      	mov	r0, r3
 8009102:	f001 fc4b 	bl	800a99c <pvPortMalloc>
 8009106:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00e      	beq.n	800912c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800910e:	205c      	movs	r0, #92	@ 0x5c
 8009110:	f001 fc44 	bl	800a99c <pvPortMalloc>
 8009114:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	631a      	str	r2, [r3, #48]	@ 0x30
 8009122:	e005      	b.n	8009130 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009124:	6978      	ldr	r0, [r7, #20]
 8009126:	f001 fd07 	bl	800ab38 <vPortFree>
 800912a:	e001      	b.n	8009130 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800912c:	2300      	movs	r3, #0
 800912e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d017      	beq.n	8009166 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800913e:	88fa      	ldrh	r2, [r7, #6]
 8009140:	2300      	movs	r3, #0
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 f80e 	bl	8009176 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800915a:	69f8      	ldr	r0, [r7, #28]
 800915c:	f000 f89c 	bl	8009298 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009160:	2301      	movs	r3, #1
 8009162:	61bb      	str	r3, [r7, #24]
 8009164:	e002      	b.n	800916c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800916c:	69bb      	ldr	r3, [r7, #24]
	}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b088      	sub	sp, #32
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	461a      	mov	r2, r3
 800918e:	21a5      	movs	r1, #165	@ 0xa5
 8009190:	f001 fdf2 	bl	800ad78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800919e:	440b      	add	r3, r1
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	f023 0307 	bic.w	r3, r3, #7
 80091ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	617b      	str	r3, [r7, #20]
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01f      	beq.n	8009216 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091d6:	2300      	movs	r3, #0
 80091d8:	61fb      	str	r3, [r7, #28]
 80091da:	e012      	b.n	8009202 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	7819      	ldrb	r1, [r3, #0]
 80091e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	4413      	add	r3, r2
 80091ea:	3334      	adds	r3, #52	@ 0x34
 80091ec:	460a      	mov	r2, r1
 80091ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4413      	add	r3, r2
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d006      	beq.n	800920a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	3301      	adds	r3, #1
 8009200:	61fb      	str	r3, [r7, #28]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	2b0f      	cmp	r3, #15
 8009206:	d9e9      	bls.n	80091dc <prvInitialiseNewTask+0x66>
 8009208:	e000      	b.n	800920c <prvInitialiseNewTask+0x96>
			{
				break;
 800920a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009214:	e003      	b.n	800921e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	2b37      	cmp	r3, #55	@ 0x37
 8009222:	d901      	bls.n	8009228 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009224:	2337      	movs	r3, #55	@ 0x37
 8009226:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800922c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009232:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	2200      	movs	r2, #0
 8009238:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	3304      	adds	r3, #4
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff f966 	bl	8008510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	3318      	adds	r3, #24
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff f961 	bl	8008510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009252:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009262:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	2200      	movs	r2, #0
 8009268:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	68f9      	ldr	r1, [r7, #12]
 8009276:	69b8      	ldr	r0, [r7, #24]
 8009278:	f001 f93e 	bl	800a4f8 <pxPortInitialiseStack>
 800927c:	4602      	mov	r2, r0
 800927e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009280:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800928e:	bf00      	nop
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092a0:	f001 fa5a 	bl	800a758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092a4:	4b2d      	ldr	r3, [pc, #180]	@ (800935c <prvAddNewTaskToReadyList+0xc4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3301      	adds	r3, #1
 80092aa:	4a2c      	ldr	r2, [pc, #176]	@ (800935c <prvAddNewTaskToReadyList+0xc4>)
 80092ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009360 <prvAddNewTaskToReadyList+0xc8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009360 <prvAddNewTaskToReadyList+0xc8>)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092bc:	4b27      	ldr	r3, [pc, #156]	@ (800935c <prvAddNewTaskToReadyList+0xc4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d110      	bne.n	80092e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092c4:	f000 fc1e 	bl	8009b04 <prvInitialiseTaskLists>
 80092c8:	e00d      	b.n	80092e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092ca:	4b26      	ldr	r3, [pc, #152]	@ (8009364 <prvAddNewTaskToReadyList+0xcc>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d109      	bne.n	80092e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092d2:	4b23      	ldr	r3, [pc, #140]	@ (8009360 <prvAddNewTaskToReadyList+0xc8>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092dc:	429a      	cmp	r2, r3
 80092de:	d802      	bhi.n	80092e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009360 <prvAddNewTaskToReadyList+0xc8>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092e6:	4b20      	ldr	r3, [pc, #128]	@ (8009368 <prvAddNewTaskToReadyList+0xd0>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009368 <prvAddNewTaskToReadyList+0xd0>)
 80092ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009368 <prvAddNewTaskToReadyList+0xd0>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fc:	4b1b      	ldr	r3, [pc, #108]	@ (800936c <prvAddNewTaskToReadyList+0xd4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d903      	bls.n	800930c <prvAddNewTaskToReadyList+0x74>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009308:	4a18      	ldr	r2, [pc, #96]	@ (800936c <prvAddNewTaskToReadyList+0xd4>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4a15      	ldr	r2, [pc, #84]	@ (8009370 <prvAddNewTaskToReadyList+0xd8>)
 800931a:	441a      	add	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7ff f901 	bl	800852a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009328:	f001 fa48 	bl	800a7bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800932c:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <prvAddNewTaskToReadyList+0xcc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00e      	beq.n	8009352 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009334:	4b0a      	ldr	r3, [pc, #40]	@ (8009360 <prvAddNewTaskToReadyList+0xc8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933e:	429a      	cmp	r2, r3
 8009340:	d207      	bcs.n	8009352 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009342:	4b0c      	ldr	r3, [pc, #48]	@ (8009374 <prvAddNewTaskToReadyList+0xdc>)
 8009344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	24000d78 	.word	0x24000d78
 8009360:	240008a4 	.word	0x240008a4
 8009364:	24000d84 	.word	0x24000d84
 8009368:	24000d94 	.word	0x24000d94
 800936c:	24000d80 	.word	0x24000d80
 8009370:	240008a8 	.word	0x240008a8
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d018      	beq.n	80093bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800938a:	4b14      	ldr	r3, [pc, #80]	@ (80093dc <vTaskDelay+0x64>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <vTaskDelay+0x32>
	__asm volatile
 8009392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	60bb      	str	r3, [r7, #8]
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	e7fd      	b.n	80093a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093aa:	f000 f883 	bl	80094b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093ae:	2100      	movs	r1, #0
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fcf3 	bl	8009d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093b6:	f000 f88b 	bl	80094d0 <xTaskResumeAll>
 80093ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d107      	bne.n	80093d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80093c2:	4b07      	ldr	r3, [pc, #28]	@ (80093e0 <vTaskDelay+0x68>)
 80093c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	24000da0 	.word	0x24000da0
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	@ 0x28
 80093e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093f2:	463a      	mov	r2, r7
 80093f4:	1d39      	adds	r1, r7, #4
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff f834 	bl	8008468 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	9202      	str	r2, [sp, #8]
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	2300      	movs	r3, #0
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	2300      	movs	r3, #0
 8009410:	460a      	mov	r2, r1
 8009412:	4922      	ldr	r1, [pc, #136]	@ (800949c <vTaskStartScheduler+0xb8>)
 8009414:	4822      	ldr	r0, [pc, #136]	@ (80094a0 <vTaskStartScheduler+0xbc>)
 8009416:	f7ff fe09 	bl	800902c <xTaskCreateStatic>
 800941a:	4603      	mov	r3, r0
 800941c:	4a21      	ldr	r2, [pc, #132]	@ (80094a4 <vTaskStartScheduler+0xc0>)
 800941e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009420:	4b20      	ldr	r3, [pc, #128]	@ (80094a4 <vTaskStartScheduler+0xc0>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009428:	2301      	movs	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e001      	b.n	8009432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d102      	bne.n	800943e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009438:	f000 fd04 	bl	8009e44 <xTimerCreateTimerTask>
 800943c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d116      	bne.n	8009472 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	613b      	str	r3, [r7, #16]
}
 8009456:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009458:	4b13      	ldr	r3, [pc, #76]	@ (80094a8 <vTaskStartScheduler+0xc4>)
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009460:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <vTaskStartScheduler+0xc8>)
 8009462:	2201      	movs	r2, #1
 8009464:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009466:	4b12      	ldr	r3, [pc, #72]	@ (80094b0 <vTaskStartScheduler+0xcc>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800946c:	f001 f8d0 	bl	800a610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009470:	e00f      	b.n	8009492 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009478:	d10b      	bne.n	8009492 <vTaskStartScheduler+0xae>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	60fb      	str	r3, [r7, #12]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <vTaskStartScheduler+0xaa>
}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	0800ae1c 	.word	0x0800ae1c
 80094a0:	08009ad5 	.word	0x08009ad5
 80094a4:	24000d9c 	.word	0x24000d9c
 80094a8:	24000d98 	.word	0x24000d98
 80094ac:	24000d84 	.word	0x24000d84
 80094b0:	24000d7c 	.word	0x24000d7c

080094b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094b8:	4b04      	ldr	r3, [pc, #16]	@ (80094cc <vTaskSuspendAll+0x18>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3301      	adds	r3, #1
 80094be:	4a03      	ldr	r2, [pc, #12]	@ (80094cc <vTaskSuspendAll+0x18>)
 80094c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094c2:	bf00      	nop
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	24000da0 	.word	0x24000da0

080094d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094da:	2300      	movs	r3, #0
 80094dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094de:	4b42      	ldr	r3, [pc, #264]	@ (80095e8 <xTaskResumeAll+0x118>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10b      	bne.n	80094fe <xTaskResumeAll+0x2e>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	603b      	str	r3, [r7, #0]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094fe:	f001 f92b 	bl	800a758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009502:	4b39      	ldr	r3, [pc, #228]	@ (80095e8 <xTaskResumeAll+0x118>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3b01      	subs	r3, #1
 8009508:	4a37      	ldr	r2, [pc, #220]	@ (80095e8 <xTaskResumeAll+0x118>)
 800950a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800950c:	4b36      	ldr	r3, [pc, #216]	@ (80095e8 <xTaskResumeAll+0x118>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d162      	bne.n	80095da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009514:	4b35      	ldr	r3, [pc, #212]	@ (80095ec <xTaskResumeAll+0x11c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d05e      	beq.n	80095da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800951c:	e02f      	b.n	800957e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951e:	4b34      	ldr	r3, [pc, #208]	@ (80095f0 <xTaskResumeAll+0x120>)
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3318      	adds	r3, #24
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff f85a 	bl	80085e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff f855 	bl	80085e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953e:	4b2d      	ldr	r3, [pc, #180]	@ (80095f4 <xTaskResumeAll+0x124>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d903      	bls.n	800954e <xTaskResumeAll+0x7e>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	4a2a      	ldr	r2, [pc, #168]	@ (80095f4 <xTaskResumeAll+0x124>)
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4a27      	ldr	r2, [pc, #156]	@ (80095f8 <xTaskResumeAll+0x128>)
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fe ffe0 	bl	800852a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956e:	4b23      	ldr	r3, [pc, #140]	@ (80095fc <xTaskResumeAll+0x12c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009574:	429a      	cmp	r2, r3
 8009576:	d302      	bcc.n	800957e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009578:	4b21      	ldr	r3, [pc, #132]	@ (8009600 <xTaskResumeAll+0x130>)
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800957e:	4b1c      	ldr	r3, [pc, #112]	@ (80095f0 <xTaskResumeAll+0x120>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1cb      	bne.n	800951e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800958c:	f000 fb58 	bl	8009c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009590:	4b1c      	ldr	r3, [pc, #112]	@ (8009604 <xTaskResumeAll+0x134>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d010      	beq.n	80095be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800959c:	f000 f846 	bl	800962c <xTaskIncrementTick>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80095a6:	4b16      	ldr	r3, [pc, #88]	@ (8009600 <xTaskResumeAll+0x130>)
 80095a8:	2201      	movs	r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1f1      	bne.n	800959c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80095b8:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <xTaskResumeAll+0x134>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095be:	4b10      	ldr	r3, [pc, #64]	@ (8009600 <xTaskResumeAll+0x130>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d009      	beq.n	80095da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095c6:	2301      	movs	r3, #1
 80095c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009608 <xTaskResumeAll+0x138>)
 80095cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095da:	f001 f8ef 	bl	800a7bc <vPortExitCritical>

	return xAlreadyYielded;
 80095de:	68bb      	ldr	r3, [r7, #8]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	24000da0 	.word	0x24000da0
 80095ec:	24000d78 	.word	0x24000d78
 80095f0:	24000d38 	.word	0x24000d38
 80095f4:	24000d80 	.word	0x24000d80
 80095f8:	240008a8 	.word	0x240008a8
 80095fc:	240008a4 	.word	0x240008a4
 8009600:	24000d8c 	.word	0x24000d8c
 8009604:	24000d88 	.word	0x24000d88
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009612:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <xTaskGetTickCount+0x1c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009618:	687b      	ldr	r3, [r7, #4]
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	24000d7c 	.word	0x24000d7c

0800962c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009632:	2300      	movs	r3, #0
 8009634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009636:	4b4f      	ldr	r3, [pc, #316]	@ (8009774 <xTaskIncrementTick+0x148>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f040 8090 	bne.w	8009760 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009640:	4b4d      	ldr	r3, [pc, #308]	@ (8009778 <xTaskIncrementTick+0x14c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009648:	4a4b      	ldr	r2, [pc, #300]	@ (8009778 <xTaskIncrementTick+0x14c>)
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d121      	bne.n	8009698 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009654:	4b49      	ldr	r3, [pc, #292]	@ (800977c <xTaskIncrementTick+0x150>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <xTaskIncrementTick+0x4a>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	603b      	str	r3, [r7, #0]
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	e7fd      	b.n	8009672 <xTaskIncrementTick+0x46>
 8009676:	4b41      	ldr	r3, [pc, #260]	@ (800977c <xTaskIncrementTick+0x150>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	4b40      	ldr	r3, [pc, #256]	@ (8009780 <xTaskIncrementTick+0x154>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a3e      	ldr	r2, [pc, #248]	@ (800977c <xTaskIncrementTick+0x150>)
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	4a3e      	ldr	r2, [pc, #248]	@ (8009780 <xTaskIncrementTick+0x154>)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4b3e      	ldr	r3, [pc, #248]	@ (8009784 <xTaskIncrementTick+0x158>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3301      	adds	r3, #1
 8009690:	4a3c      	ldr	r2, [pc, #240]	@ (8009784 <xTaskIncrementTick+0x158>)
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	f000 fad4 	bl	8009c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009698:	4b3b      	ldr	r3, [pc, #236]	@ (8009788 <xTaskIncrementTick+0x15c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d349      	bcc.n	8009736 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a2:	4b36      	ldr	r3, [pc, #216]	@ (800977c <xTaskIncrementTick+0x150>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d104      	bne.n	80096b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ac:	4b36      	ldr	r3, [pc, #216]	@ (8009788 <xTaskIncrementTick+0x15c>)
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	601a      	str	r2, [r3, #0]
					break;
 80096b4:	e03f      	b.n	8009736 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b6:	4b31      	ldr	r3, [pc, #196]	@ (800977c <xTaskIncrementTick+0x150>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d203      	bcs.n	80096d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096ce:	4a2e      	ldr	r2, [pc, #184]	@ (8009788 <xTaskIncrementTick+0x15c>)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096d4:	e02f      	b.n	8009736 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	3304      	adds	r3, #4
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe ff82 	bl	80085e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	3318      	adds	r3, #24
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe ff79 	bl	80085e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f6:	4b25      	ldr	r3, [pc, #148]	@ (800978c <xTaskIncrementTick+0x160>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d903      	bls.n	8009706 <xTaskIncrementTick+0xda>
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009702:	4a22      	ldr	r2, [pc, #136]	@ (800978c <xTaskIncrementTick+0x160>)
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4a1f      	ldr	r2, [pc, #124]	@ (8009790 <xTaskIncrementTick+0x164>)
 8009714:	441a      	add	r2, r3
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	3304      	adds	r3, #4
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f7fe ff04 	bl	800852a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009726:	4b1b      	ldr	r3, [pc, #108]	@ (8009794 <xTaskIncrementTick+0x168>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972c:	429a      	cmp	r2, r3
 800972e:	d3b8      	bcc.n	80096a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009734:	e7b5      	b.n	80096a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009736:	4b17      	ldr	r3, [pc, #92]	@ (8009794 <xTaskIncrementTick+0x168>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973c:	4914      	ldr	r1, [pc, #80]	@ (8009790 <xTaskIncrementTick+0x164>)
 800973e:	4613      	mov	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	440b      	add	r3, r1
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d901      	bls.n	8009752 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800974e:	2301      	movs	r3, #1
 8009750:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009752:	4b11      	ldr	r3, [pc, #68]	@ (8009798 <xTaskIncrementTick+0x16c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800975a:	2301      	movs	r3, #1
 800975c:	617b      	str	r3, [r7, #20]
 800975e:	e004      	b.n	800976a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009760:	4b0e      	ldr	r3, [pc, #56]	@ (800979c <xTaskIncrementTick+0x170>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	4a0d      	ldr	r2, [pc, #52]	@ (800979c <xTaskIncrementTick+0x170>)
 8009768:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800976a:	697b      	ldr	r3, [r7, #20]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	24000da0 	.word	0x24000da0
 8009778:	24000d7c 	.word	0x24000d7c
 800977c:	24000d30 	.word	0x24000d30
 8009780:	24000d34 	.word	0x24000d34
 8009784:	24000d90 	.word	0x24000d90
 8009788:	24000d98 	.word	0x24000d98
 800978c:	24000d80 	.word	0x24000d80
 8009790:	240008a8 	.word	0x240008a8
 8009794:	240008a4 	.word	0x240008a4
 8009798:	24000d8c 	.word	0x24000d8c
 800979c:	24000d88 	.word	0x24000d88

080097a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097a6:	4b28      	ldr	r3, [pc, #160]	@ (8009848 <vTaskSwitchContext+0xa8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097ae:	4b27      	ldr	r3, [pc, #156]	@ (800984c <vTaskSwitchContext+0xac>)
 80097b0:	2201      	movs	r2, #1
 80097b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097b4:	e042      	b.n	800983c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80097b6:	4b25      	ldr	r3, [pc, #148]	@ (800984c <vTaskSwitchContext+0xac>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097bc:	4b24      	ldr	r3, [pc, #144]	@ (8009850 <vTaskSwitchContext+0xb0>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e011      	b.n	80097e8 <vTaskSwitchContext+0x48>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10b      	bne.n	80097e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	607b      	str	r3, [r7, #4]
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	e7fd      	b.n	80097de <vTaskSwitchContext+0x3e>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	491a      	ldr	r1, [pc, #104]	@ (8009854 <vTaskSwitchContext+0xb4>)
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	440b      	add	r3, r1
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d0e3      	beq.n	80097c4 <vTaskSwitchContext+0x24>
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4a13      	ldr	r2, [pc, #76]	@ (8009854 <vTaskSwitchContext+0xb4>)
 8009808:	4413      	add	r3, r2
 800980a:	60bb      	str	r3, [r7, #8]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	3308      	adds	r3, #8
 800981e:	429a      	cmp	r2, r3
 8009820:	d104      	bne.n	800982c <vTaskSwitchContext+0x8c>
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	605a      	str	r2, [r3, #4]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	4a09      	ldr	r2, [pc, #36]	@ (8009858 <vTaskSwitchContext+0xb8>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	4a06      	ldr	r2, [pc, #24]	@ (8009850 <vTaskSwitchContext+0xb0>)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6013      	str	r3, [r2, #0]
}
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	24000da0 	.word	0x24000da0
 800984c:	24000d8c 	.word	0x24000d8c
 8009850:	24000d80 	.word	0x24000d80
 8009854:	240008a8 	.word	0x240008a8
 8009858:	240008a4 	.word	0x240008a4

0800985c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10b      	bne.n	8009884 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60fb      	str	r3, [r7, #12]
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	e7fd      	b.n	8009880 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009884:	4b07      	ldr	r3, [pc, #28]	@ (80098a4 <vTaskPlaceOnEventList+0x48>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3318      	adds	r3, #24
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7fe fe70 	bl	8008572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009892:	2101      	movs	r1, #1
 8009894:	6838      	ldr	r0, [r7, #0]
 8009896:	f000 fa81 	bl	8009d9c <prvAddCurrentTaskToDelayedList>
}
 800989a:	bf00      	nop
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	240008a4 	.word	0x240008a4

080098a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10b      	bne.n	80098d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	617b      	str	r3, [r7, #20]
}
 80098cc:	bf00      	nop
 80098ce:	bf00      	nop
 80098d0:	e7fd      	b.n	80098ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098d2:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <vTaskPlaceOnEventListRestricted+0x54>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3318      	adds	r3, #24
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7fe fe25 	bl	800852a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80098e6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	68b8      	ldr	r0, [r7, #8]
 80098f0:	f000 fa54 	bl	8009d9c <prvAddCurrentTaskToDelayedList>
	}
 80098f4:	bf00      	nop
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	240008a4 	.word	0x240008a4

08009900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10b      	bne.n	800992e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60fb      	str	r3, [r7, #12]
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	e7fd      	b.n	800992a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	3318      	adds	r3, #24
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fe56 	bl	80085e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009938:	4b1d      	ldr	r3, [pc, #116]	@ (80099b0 <xTaskRemoveFromEventList+0xb0>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d11d      	bne.n	800997c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	3304      	adds	r3, #4
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fe4d 	bl	80085e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800994e:	4b19      	ldr	r3, [pc, #100]	@ (80099b4 <xTaskRemoveFromEventList+0xb4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d903      	bls.n	800995e <xTaskRemoveFromEventList+0x5e>
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995a:	4a16      	ldr	r2, [pc, #88]	@ (80099b4 <xTaskRemoveFromEventList+0xb4>)
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4a13      	ldr	r2, [pc, #76]	@ (80099b8 <xTaskRemoveFromEventList+0xb8>)
 800996c:	441a      	add	r2, r3
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	3304      	adds	r3, #4
 8009972:	4619      	mov	r1, r3
 8009974:	4610      	mov	r0, r2
 8009976:	f7fe fdd8 	bl	800852a <vListInsertEnd>
 800997a:	e005      	b.n	8009988 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	3318      	adds	r3, #24
 8009980:	4619      	mov	r1, r3
 8009982:	480e      	ldr	r0, [pc, #56]	@ (80099bc <xTaskRemoveFromEventList+0xbc>)
 8009984:	f7fe fdd1 	bl	800852a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998c:	4b0c      	ldr	r3, [pc, #48]	@ (80099c0 <xTaskRemoveFromEventList+0xc0>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	429a      	cmp	r2, r3
 8009994:	d905      	bls.n	80099a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009996:	2301      	movs	r3, #1
 8009998:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800999a:	4b0a      	ldr	r3, [pc, #40]	@ (80099c4 <xTaskRemoveFromEventList+0xc4>)
 800999c:	2201      	movs	r2, #1
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e001      	b.n	80099a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099a6:	697b      	ldr	r3, [r7, #20]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	24000da0 	.word	0x24000da0
 80099b4:	24000d80 	.word	0x24000d80
 80099b8:	240008a8 	.word	0x240008a8
 80099bc:	24000d38 	.word	0x24000d38
 80099c0:	240008a4 	.word	0x240008a4
 80099c4:	24000d8c 	.word	0x24000d8c

080099c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099d0:	4b06      	ldr	r3, [pc, #24]	@ (80099ec <vTaskInternalSetTimeOutState+0x24>)
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099d8:	4b05      	ldr	r3, [pc, #20]	@ (80099f0 <vTaskInternalSetTimeOutState+0x28>)
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	605a      	str	r2, [r3, #4]
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	24000d90 	.word	0x24000d90
 80099f0:	24000d7c 	.word	0x24000d7c

080099f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10b      	bne.n	8009a1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	613b      	str	r3, [r7, #16]
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	e7fd      	b.n	8009a18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	60fb      	str	r3, [r7, #12]
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
 8009a38:	e7fd      	b.n	8009a36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a3a:	f000 fe8d 	bl	800a758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab4 <xTaskCheckForTimeOut+0xc0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a56:	d102      	bne.n	8009a5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e023      	b.n	8009aa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <xTaskCheckForTimeOut+0xc4>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d007      	beq.n	8009a7a <xTaskCheckForTimeOut+0x86>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d302      	bcc.n	8009a7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e015      	b.n	8009aa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d20b      	bcs.n	8009a9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ff99 	bl	80099c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a96:	2300      	movs	r3, #0
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e004      	b.n	8009aa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009aa6:	f000 fe89 	bl	800a7bc <vPortExitCritical>

	return xReturn;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3720      	adds	r7, #32
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	24000d7c 	.word	0x24000d7c
 8009ab8:	24000d90 	.word	0x24000d90

08009abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	@ (8009ad0 <vTaskMissedYield+0x14>)
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	24000d8c 	.word	0x24000d8c

08009ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009adc:	f000 f852 	bl	8009b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ae0:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <prvIdleTask+0x28>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d9f9      	bls.n	8009adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ae8:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <prvIdleTask+0x2c>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009af8:	e7f0      	b.n	8009adc <prvIdleTask+0x8>
 8009afa:	bf00      	nop
 8009afc:	240008a8 	.word	0x240008a8
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	e00c      	b.n	8009b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4a12      	ldr	r2, [pc, #72]	@ (8009b64 <prvInitialiseTaskLists+0x60>)
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe fcd6 	bl	80084d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3301      	adds	r3, #1
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b37      	cmp	r3, #55	@ 0x37
 8009b2e:	d9ef      	bls.n	8009b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b30:	480d      	ldr	r0, [pc, #52]	@ (8009b68 <prvInitialiseTaskLists+0x64>)
 8009b32:	f7fe fccd 	bl	80084d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b36:	480d      	ldr	r0, [pc, #52]	@ (8009b6c <prvInitialiseTaskLists+0x68>)
 8009b38:	f7fe fcca 	bl	80084d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b3c:	480c      	ldr	r0, [pc, #48]	@ (8009b70 <prvInitialiseTaskLists+0x6c>)
 8009b3e:	f7fe fcc7 	bl	80084d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b42:	480c      	ldr	r0, [pc, #48]	@ (8009b74 <prvInitialiseTaskLists+0x70>)
 8009b44:	f7fe fcc4 	bl	80084d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b48:	480b      	ldr	r0, [pc, #44]	@ (8009b78 <prvInitialiseTaskLists+0x74>)
 8009b4a:	f7fe fcc1 	bl	80084d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b7c <prvInitialiseTaskLists+0x78>)
 8009b50:	4a05      	ldr	r2, [pc, #20]	@ (8009b68 <prvInitialiseTaskLists+0x64>)
 8009b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b54:	4b0a      	ldr	r3, [pc, #40]	@ (8009b80 <prvInitialiseTaskLists+0x7c>)
 8009b56:	4a05      	ldr	r2, [pc, #20]	@ (8009b6c <prvInitialiseTaskLists+0x68>)
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	240008a8 	.word	0x240008a8
 8009b68:	24000d08 	.word	0x24000d08
 8009b6c:	24000d1c 	.word	0x24000d1c
 8009b70:	24000d38 	.word	0x24000d38
 8009b74:	24000d4c 	.word	0x24000d4c
 8009b78:	24000d64 	.word	0x24000d64
 8009b7c:	24000d30 	.word	0x24000d30
 8009b80:	24000d34 	.word	0x24000d34

08009b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b8a:	e019      	b.n	8009bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b8c:	f000 fde4 	bl	800a758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b90:	4b10      	ldr	r3, [pc, #64]	@ (8009bd4 <prvCheckTasksWaitingTermination+0x50>)
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fd21 	bl	80085e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd8 <prvCheckTasksWaitingTermination+0x54>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8009bd8 <prvCheckTasksWaitingTermination+0x54>)
 8009baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bac:	4b0b      	ldr	r3, [pc, #44]	@ (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bb6:	f000 fe01 	bl	800a7bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f810 	bl	8009be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bc0:	4b06      	ldr	r3, [pc, #24]	@ (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e1      	bne.n	8009b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	24000d4c 	.word	0x24000d4c
 8009bd8:	24000d78 	.word	0x24000d78
 8009bdc:	24000d60 	.word	0x24000d60

08009be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 ff9e 	bl	800ab38 <vPortFree>
				vPortFree( pxTCB );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 ff9b 	bl	800ab38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c02:	e019      	b.n	8009c38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d103      	bne.n	8009c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 ff92 	bl	800ab38 <vPortFree>
	}
 8009c14:	e010      	b.n	8009c38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d00b      	beq.n	8009c38 <prvDeleteTCB+0x58>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	60fb      	str	r3, [r7, #12]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <prvDeleteTCB+0x54>
	}
 8009c38:	bf00      	nop
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c46:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <prvResetNextTaskUnblockTime+0x38>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d104      	bne.n	8009c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <prvResetNextTaskUnblockTime+0x3c>)
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295
 8009c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c58:	e008      	b.n	8009c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5a:	4b07      	ldr	r3, [pc, #28]	@ (8009c78 <prvResetNextTaskUnblockTime+0x38>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	4a04      	ldr	r2, [pc, #16]	@ (8009c7c <prvResetNextTaskUnblockTime+0x3c>)
 8009c6a:	6013      	str	r3, [r2, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	24000d30 	.word	0x24000d30
 8009c7c:	24000d98 	.word	0x24000d98

08009c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <xTaskGetSchedulerState+0x34>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	e008      	b.n	8009ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c94:	4b08      	ldr	r3, [pc, #32]	@ (8009cb8 <xTaskGetSchedulerState+0x38>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	607b      	str	r3, [r7, #4]
 8009ca0:	e001      	b.n	8009ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ca6:	687b      	ldr	r3, [r7, #4]
	}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	24000d84 	.word	0x24000d84
 8009cb8:	24000da0 	.word	0x24000da0

08009cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d058      	beq.n	8009d84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8009d90 <xTaskPriorityDisinherit+0xd4>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d00b      	beq.n	8009cf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60fb      	str	r3, [r7, #12]
}
 8009cee:	bf00      	nop
 8009cf0:	bf00      	nop
 8009cf2:	e7fd      	b.n	8009cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10b      	bne.n	8009d14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60bb      	str	r3, [r7, #8]
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	e7fd      	b.n	8009d10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d18:	1e5a      	subs	r2, r3, #1
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d02c      	beq.n	8009d84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d128      	bne.n	8009d84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fc54 	bl	80085e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d54:	4b0f      	ldr	r3, [pc, #60]	@ (8009d94 <xTaskPriorityDisinherit+0xd8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d903      	bls.n	8009d64 <xTaskPriorityDisinherit+0xa8>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d60:	4a0c      	ldr	r2, [pc, #48]	@ (8009d94 <xTaskPriorityDisinherit+0xd8>)
 8009d62:	6013      	str	r3, [r2, #0]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4a09      	ldr	r2, [pc, #36]	@ (8009d98 <xTaskPriorityDisinherit+0xdc>)
 8009d72:	441a      	add	r2, r3
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	f7fe fbd5 	bl	800852a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d84:	697b      	ldr	r3, [r7, #20]
	}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	240008a4 	.word	0x240008a4
 8009d94:	24000d80 	.word	0x24000d80
 8009d98:	240008a8 	.word	0x240008a8

08009d9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009da6:	4b21      	ldr	r3, [pc, #132]	@ (8009e2c <prvAddCurrentTaskToDelayedList+0x90>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dac:	4b20      	ldr	r3, [pc, #128]	@ (8009e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fc16 	bl	80085e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d10a      	bne.n	8009dd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d007      	beq.n	8009dd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4819      	ldr	r0, [pc, #100]	@ (8009e34 <prvAddCurrentTaskToDelayedList+0x98>)
 8009dd0:	f7fe fbab 	bl	800852a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dd4:	e026      	b.n	8009e24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4413      	add	r3, r2
 8009ddc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dde:	4b14      	ldr	r3, [pc, #80]	@ (8009e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d209      	bcs.n	8009e02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dee:	4b12      	ldr	r3, [pc, #72]	@ (8009e38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	f7fe fbb9 	bl	8008572 <vListInsert>
}
 8009e00:	e010      	b.n	8009e24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e02:	4b0e      	ldr	r3, [pc, #56]	@ (8009e3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4b0a      	ldr	r3, [pc, #40]	@ (8009e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	f7fe fbaf 	bl	8008572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e14:	4b0a      	ldr	r3, [pc, #40]	@ (8009e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d202      	bcs.n	8009e24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e1e:	4a08      	ldr	r2, [pc, #32]	@ (8009e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6013      	str	r3, [r2, #0]
}
 8009e24:	bf00      	nop
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	24000d7c 	.word	0x24000d7c
 8009e30:	240008a4 	.word	0x240008a4
 8009e34:	24000d64 	.word	0x24000d64
 8009e38:	24000d34 	.word	0x24000d34
 8009e3c:	24000d30 	.word	0x24000d30
 8009e40:	24000d98 	.word	0x24000d98

08009e44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08a      	sub	sp, #40	@ 0x28
 8009e48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e4e:	f000 fb13 	bl	800a478 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e52:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec8 <xTimerCreateTimerTask+0x84>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d021      	beq.n	8009e9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e62:	1d3a      	adds	r2, r7, #4
 8009e64:	f107 0108 	add.w	r1, r7, #8
 8009e68:	f107 030c 	add.w	r3, r7, #12
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fb15 	bl	800849c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	9202      	str	r2, [sp, #8]
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	2300      	movs	r3, #0
 8009e82:	460a      	mov	r2, r1
 8009e84:	4911      	ldr	r1, [pc, #68]	@ (8009ecc <xTimerCreateTimerTask+0x88>)
 8009e86:	4812      	ldr	r0, [pc, #72]	@ (8009ed0 <xTimerCreateTimerTask+0x8c>)
 8009e88:	f7ff f8d0 	bl	800902c <xTaskCreateStatic>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	4a11      	ldr	r2, [pc, #68]	@ (8009ed4 <xTimerCreateTimerTask+0x90>)
 8009e90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e92:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <xTimerCreateTimerTask+0x90>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10b      	bne.n	8009ebc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	613b      	str	r3, [r7, #16]
}
 8009eb6:	bf00      	nop
 8009eb8:	bf00      	nop
 8009eba:	e7fd      	b.n	8009eb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ebc:	697b      	ldr	r3, [r7, #20]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	24000dd4 	.word	0x24000dd4
 8009ecc:	0800ae24 	.word	0x0800ae24
 8009ed0:	0800a011 	.word	0x0800a011
 8009ed4:	24000dd8 	.word	0x24000dd8

08009ed8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	@ 0x28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10b      	bne.n	8009f08 <xTimerGenericCommand+0x30>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	623b      	str	r3, [r7, #32]
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	e7fd      	b.n	8009f04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f08:	4b19      	ldr	r3, [pc, #100]	@ (8009f70 <xTimerGenericCommand+0x98>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d02a      	beq.n	8009f66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b05      	cmp	r3, #5
 8009f20:	dc18      	bgt.n	8009f54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f22:	f7ff fead 	bl	8009c80 <xTaskGetSchedulerState>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d109      	bne.n	8009f40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f2c:	4b10      	ldr	r3, [pc, #64]	@ (8009f70 <xTimerGenericCommand+0x98>)
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	f107 0110 	add.w	r1, r7, #16
 8009f34:	2300      	movs	r3, #0
 8009f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f38:	f7fe fc88 	bl	800884c <xQueueGenericSend>
 8009f3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f3e:	e012      	b.n	8009f66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f40:	4b0b      	ldr	r3, [pc, #44]	@ (8009f70 <xTimerGenericCommand+0x98>)
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	f107 0110 	add.w	r1, r7, #16
 8009f48:	2300      	movs	r3, #0
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f7fe fc7e 	bl	800884c <xQueueGenericSend>
 8009f50:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f52:	e008      	b.n	8009f66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f54:	4b06      	ldr	r3, [pc, #24]	@ (8009f70 <xTimerGenericCommand+0x98>)
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	f107 0110 	add.w	r1, r7, #16
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	f7fe fd76 	bl	8008a50 <xQueueGenericSendFromISR>
 8009f64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3728      	adds	r7, #40	@ 0x28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	24000dd4 	.word	0x24000dd4

08009f74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af02      	add	r7, sp, #8
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7e:	4b23      	ldr	r3, [pc, #140]	@ (800a00c <prvProcessExpiredTimer+0x98>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7fe fb29 	bl	80085e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d023      	beq.n	8009fe8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	699a      	ldr	r2, [r3, #24]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	18d1      	adds	r1, r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	6978      	ldr	r0, [r7, #20]
 8009fae:	f000 f8d5 	bl	800a15c <prvInsertTimerInActiveList>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d020      	beq.n	8009ffa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fb8:	2300      	movs	r3, #0
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f7ff ff88 	bl	8009ed8 <xTimerGenericCommand>
 8009fc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d114      	bne.n	8009ffa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	60fb      	str	r3, [r7, #12]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fee:	f023 0301 	bic.w	r3, r3, #1
 8009ff2:	b2da      	uxtb	r2, r3
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	6978      	ldr	r0, [r7, #20]
 800a000:	4798      	blx	r3
}
 800a002:	bf00      	nop
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	24000dcc 	.word	0x24000dcc

0800a010 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 f859 	bl	800a0d4 <prvGetNextExpireTime>
 800a022:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	4619      	mov	r1, r3
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f805 	bl	800a038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a02e:	f000 f8d7 	bl	800a1e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a032:	bf00      	nop
 800a034:	e7f0      	b.n	800a018 <prvTimerTask+0x8>
	...

0800a038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a042:	f7ff fa37 	bl	80094b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a046:	f107 0308 	add.w	r3, r7, #8
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 f866 	bl	800a11c <prvSampleTimeNow>
 800a050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d130      	bne.n	800a0ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <prvProcessTimerOrBlockTask+0x3c>
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	429a      	cmp	r2, r3
 800a064:	d806      	bhi.n	800a074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a066:	f7ff fa33 	bl	80094d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a06a:	68f9      	ldr	r1, [r7, #12]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff ff81 	bl	8009f74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a072:	e024      	b.n	800a0be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d008      	beq.n	800a08c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a07a:	4b13      	ldr	r3, [pc, #76]	@ (800a0c8 <prvProcessTimerOrBlockTask+0x90>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <prvProcessTimerOrBlockTask+0x50>
 800a084:	2301      	movs	r3, #1
 800a086:	e000      	b.n	800a08a <prvProcessTimerOrBlockTask+0x52>
 800a088:	2300      	movs	r3, #0
 800a08a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a08c:	4b0f      	ldr	r3, [pc, #60]	@ (800a0cc <prvProcessTimerOrBlockTask+0x94>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4619      	mov	r1, r3
 800a09a:	f7fe ff93 	bl	8008fc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a09e:	f7ff fa17 	bl	80094d0 <xTaskResumeAll>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0a8:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <prvProcessTimerOrBlockTask+0x98>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
}
 800a0b8:	e001      	b.n	800a0be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0ba:	f7ff fa09 	bl	80094d0 <xTaskResumeAll>
}
 800a0be:	bf00      	nop
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	24000dd0 	.word	0x24000dd0
 800a0cc:	24000dd4 	.word	0x24000dd4
 800a0d0:	e000ed04 	.word	0xe000ed04

0800a0d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <prvGetNextExpireTime+0x44>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <prvGetNextExpireTime+0x16>
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	e000      	b.n	800a0ec <prvGetNextExpireTime+0x18>
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d105      	bne.n	800a104 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0f8:	4b07      	ldr	r3, [pc, #28]	@ (800a118 <prvGetNextExpireTime+0x44>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e001      	b.n	800a108 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	24000dcc 	.word	0x24000dcc

0800a11c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a124:	f7ff fa72 	bl	800960c <xTaskGetTickCount>
 800a128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a12a:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <prvSampleTimeNow+0x3c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d205      	bcs.n	800a140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a134:	f000 f93a 	bl	800a3ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e002      	b.n	800a146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a146:	4a04      	ldr	r2, [pc, #16]	@ (800a158 <prvSampleTimeNow+0x3c>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a14c:	68fb      	ldr	r3, [r7, #12]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	24000ddc 	.word	0x24000ddc

0800a15c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d812      	bhi.n	800a1a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e01b      	b.n	800a1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a196:	4b10      	ldr	r3, [pc, #64]	@ (800a1d8 <prvInsertTimerInActiveList+0x7c>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fe f9e6 	bl	8008572 <vListInsert>
 800a1a6:	e012      	b.n	800a1ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d206      	bcs.n	800a1be <prvInsertTimerInActiveList+0x62>
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d302      	bcc.n	800a1be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e007      	b.n	800a1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1be:	4b07      	ldr	r3, [pc, #28]	@ (800a1dc <prvInsertTimerInActiveList+0x80>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f7fe f9d2 	bl	8008572 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1ce:	697b      	ldr	r3, [r7, #20]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	24000dd0 	.word	0x24000dd0
 800a1dc:	24000dcc 	.word	0x24000dcc

0800a1e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08e      	sub	sp, #56	@ 0x38
 800a1e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1e6:	e0ce      	b.n	800a386 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	da19      	bge.n	800a222 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1ee:	1d3b      	adds	r3, r7, #4
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10b      	bne.n	800a212 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	61fb      	str	r3, [r7, #28]
}
 800a20c:	bf00      	nop
 800a20e:	bf00      	nop
 800a210:	e7fd      	b.n	800a20e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a218:	6850      	ldr	r0, [r2, #4]
 800a21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a21c:	6892      	ldr	r2, [r2, #8]
 800a21e:	4611      	mov	r1, r2
 800a220:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f2c0 80ae 	blt.w	800a386 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d004      	beq.n	800a240 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a238:	3304      	adds	r3, #4
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe f9d2 	bl	80085e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a240:	463b      	mov	r3, r7
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff ff6a 	bl	800a11c <prvSampleTimeNow>
 800a248:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b09      	cmp	r3, #9
 800a24e:	f200 8097 	bhi.w	800a380 <prvProcessReceivedCommands+0x1a0>
 800a252:	a201      	add	r2, pc, #4	@ (adr r2, 800a258 <prvProcessReceivedCommands+0x78>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a281 	.word	0x0800a281
 800a260:	0800a281 	.word	0x0800a281
 800a264:	0800a2f7 	.word	0x0800a2f7
 800a268:	0800a30b 	.word	0x0800a30b
 800a26c:	0800a357 	.word	0x0800a357
 800a270:	0800a281 	.word	0x0800a281
 800a274:	0800a281 	.word	0x0800a281
 800a278:	0800a2f7 	.word	0x0800a2f7
 800a27c:	0800a30b 	.word	0x0800a30b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	18d1      	adds	r1, r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a29e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a0:	f7ff ff5c 	bl	800a15c <prvInsertTimerInActiveList>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d06c      	beq.n	800a384 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d061      	beq.n	800a384 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	441a      	add	r2, r3
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2d2:	f7ff fe01 	bl	8009ed8 <xTimerGenericCommand>
 800a2d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2d8:	6a3b      	ldr	r3, [r7, #32]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d152      	bne.n	800a384 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	61bb      	str	r3, [r7, #24]
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	e7fd      	b.n	800a2f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	b2da      	uxtb	r2, r3
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a308:	e03d      	b.n	800a386 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a310:	f043 0301 	orr.w	r3, r3, #1
 800a314:	b2da      	uxtb	r2, r3
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	617b      	str	r3, [r7, #20]
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	e7fd      	b.n	800a33e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	699a      	ldr	r2, [r3, #24]
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	18d1      	adds	r1, r2, r3
 800a34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a34e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a350:	f7ff ff04 	bl	800a15c <prvInsertTimerInActiveList>
					break;
 800a354:	e017      	b.n	800a386 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a366:	f000 fbe7 	bl	800ab38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a36a:	e00c      	b.n	800a386 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a372:	f023 0301 	bic.w	r3, r3, #1
 800a376:	b2da      	uxtb	r2, r3
 800a378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a37e:	e002      	b.n	800a386 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a380:	bf00      	nop
 800a382:	e000      	b.n	800a386 <prvProcessReceivedCommands+0x1a6>
					break;
 800a384:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a386:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <prvProcessReceivedCommands+0x1c8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	1d39      	adds	r1, r7, #4
 800a38c:	2200      	movs	r2, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fbfc 	bl	8008b8c <xQueueReceive>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	f47f af26 	bne.w	800a1e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	3730      	adds	r7, #48	@ 0x30
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	24000dd4 	.word	0x24000dd4

0800a3ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3b2:	e049      	b.n	800a448 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3b4:	4b2e      	ldr	r3, [pc, #184]	@ (800a470 <prvSwitchTimerLists+0xc4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3be:	4b2c      	ldr	r3, [pc, #176]	@ (800a470 <prvSwitchTimerLists+0xc4>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe f909 	bl	80085e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d02f      	beq.n	800a448 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d90e      	bls.n	800a418 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a406:	4b1a      	ldr	r3, [pc, #104]	@ (800a470 <prvSwitchTimerLists+0xc4>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3304      	adds	r3, #4
 800a40e:	4619      	mov	r1, r3
 800a410:	4610      	mov	r0, r2
 800a412:	f7fe f8ae 	bl	8008572 <vListInsert>
 800a416:	e017      	b.n	800a448 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a418:	2300      	movs	r3, #0
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	2300      	movs	r3, #0
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	2100      	movs	r1, #0
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f7ff fd58 	bl	8009ed8 <xTimerGenericCommand>
 800a428:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	603b      	str	r3, [r7, #0]
}
 800a442:	bf00      	nop
 800a444:	bf00      	nop
 800a446:	e7fd      	b.n	800a444 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a448:	4b09      	ldr	r3, [pc, #36]	@ (800a470 <prvSwitchTimerLists+0xc4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1b0      	bne.n	800a3b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a452:	4b07      	ldr	r3, [pc, #28]	@ (800a470 <prvSwitchTimerLists+0xc4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a458:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <prvSwitchTimerLists+0xc8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a04      	ldr	r2, [pc, #16]	@ (800a470 <prvSwitchTimerLists+0xc4>)
 800a45e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a460:	4a04      	ldr	r2, [pc, #16]	@ (800a474 <prvSwitchTimerLists+0xc8>)
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	6013      	str	r3, [r2, #0]
}
 800a466:	bf00      	nop
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	24000dcc 	.word	0x24000dcc
 800a474:	24000dd0 	.word	0x24000dd0

0800a478 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a47e:	f000 f96b 	bl	800a758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a482:	4b15      	ldr	r3, [pc, #84]	@ (800a4d8 <prvCheckForValidListAndQueue+0x60>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d120      	bne.n	800a4cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a48a:	4814      	ldr	r0, [pc, #80]	@ (800a4dc <prvCheckForValidListAndQueue+0x64>)
 800a48c:	f7fe f820 	bl	80084d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a490:	4813      	ldr	r0, [pc, #76]	@ (800a4e0 <prvCheckForValidListAndQueue+0x68>)
 800a492:	f7fe f81d 	bl	80084d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a496:	4b13      	ldr	r3, [pc, #76]	@ (800a4e4 <prvCheckForValidListAndQueue+0x6c>)
 800a498:	4a10      	ldr	r2, [pc, #64]	@ (800a4dc <prvCheckForValidListAndQueue+0x64>)
 800a49a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a49c:	4b12      	ldr	r3, [pc, #72]	@ (800a4e8 <prvCheckForValidListAndQueue+0x70>)
 800a49e:	4a10      	ldr	r2, [pc, #64]	@ (800a4e0 <prvCheckForValidListAndQueue+0x68>)
 800a4a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	4b11      	ldr	r3, [pc, #68]	@ (800a4ec <prvCheckForValidListAndQueue+0x74>)
 800a4a8:	4a11      	ldr	r2, [pc, #68]	@ (800a4f0 <prvCheckForValidListAndQueue+0x78>)
 800a4aa:	2110      	movs	r1, #16
 800a4ac:	200a      	movs	r0, #10
 800a4ae:	f7fe f92d 	bl	800870c <xQueueGenericCreateStatic>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4a08      	ldr	r2, [pc, #32]	@ (800a4d8 <prvCheckForValidListAndQueue+0x60>)
 800a4b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4b8:	4b07      	ldr	r3, [pc, #28]	@ (800a4d8 <prvCheckForValidListAndQueue+0x60>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d005      	beq.n	800a4cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4c0:	4b05      	ldr	r3, [pc, #20]	@ (800a4d8 <prvCheckForValidListAndQueue+0x60>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	490b      	ldr	r1, [pc, #44]	@ (800a4f4 <prvCheckForValidListAndQueue+0x7c>)
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe fd52 	bl	8008f70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4cc:	f000 f976 	bl	800a7bc <vPortExitCritical>
}
 800a4d0:	bf00      	nop
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	24000dd4 	.word	0x24000dd4
 800a4dc:	24000da4 	.word	0x24000da4
 800a4e0:	24000db8 	.word	0x24000db8
 800a4e4:	24000dcc 	.word	0x24000dcc
 800a4e8:	24000dd0 	.word	0x24000dd0
 800a4ec:	24000e80 	.word	0x24000e80
 800a4f0:	24000de0 	.word	0x24000de0
 800a4f4:	0800ae2c 	.word	0x0800ae2c

0800a4f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	3b04      	subs	r3, #4
 800a508:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3b04      	subs	r3, #4
 800a516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f023 0201 	bic.w	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3b04      	subs	r3, #4
 800a526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a528:	4a0c      	ldr	r2, [pc, #48]	@ (800a55c <pxPortInitialiseStack+0x64>)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3b14      	subs	r3, #20
 800a532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3b04      	subs	r3, #4
 800a53e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f06f 0202 	mvn.w	r2, #2
 800a546:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3b20      	subs	r3, #32
 800a54c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a54e:	68fb      	ldr	r3, [r7, #12]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3714      	adds	r7, #20
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	0800a561 	.word	0x0800a561

0800a560 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a56a:	4b13      	ldr	r3, [pc, #76]	@ (800a5b8 <prvTaskExitError+0x58>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a572:	d00b      	beq.n	800a58c <prvTaskExitError+0x2c>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	60fb      	str	r3, [r7, #12]
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <prvTaskExitError+0x28>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60bb      	str	r3, [r7, #8]
}
 800a59e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5a0:	bf00      	nop
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0fc      	beq.n	800a5a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	24000010 	.word	0x24000010
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5c0:	4b07      	ldr	r3, [pc, #28]	@ (800a5e0 <pxCurrentTCBConst2>)
 800a5c2:	6819      	ldr	r1, [r3, #0]
 800a5c4:	6808      	ldr	r0, [r1, #0]
 800a5c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ca:	f380 8809 	msr	PSP, r0
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8811 	msr	BASEPRI, r0
 800a5da:	4770      	bx	lr
 800a5dc:	f3af 8000 	nop.w

0800a5e0 <pxCurrentTCBConst2>:
 800a5e0:	240008a4 	.word	0x240008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop

0800a5e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5e8:	4808      	ldr	r0, [pc, #32]	@ (800a60c <prvPortStartFirstTask+0x24>)
 800a5ea:	6800      	ldr	r0, [r0, #0]
 800a5ec:	6800      	ldr	r0, [r0, #0]
 800a5ee:	f380 8808 	msr	MSP, r0
 800a5f2:	f04f 0000 	mov.w	r0, #0
 800a5f6:	f380 8814 	msr	CONTROL, r0
 800a5fa:	b662      	cpsie	i
 800a5fc:	b661      	cpsie	f
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	df00      	svc	0
 800a608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a60a:	bf00      	nop
 800a60c:	e000ed08 	.word	0xe000ed08

0800a610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a616:	4b47      	ldr	r3, [pc, #284]	@ (800a734 <xPortStartScheduler+0x124>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a47      	ldr	r2, [pc, #284]	@ (800a738 <xPortStartScheduler+0x128>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10b      	bne.n	800a638 <xPortStartScheduler+0x28>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	613b      	str	r3, [r7, #16]
}
 800a632:	bf00      	nop
 800a634:	bf00      	nop
 800a636:	e7fd      	b.n	800a634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a638:	4b3e      	ldr	r3, [pc, #248]	@ (800a734 <xPortStartScheduler+0x124>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a3f      	ldr	r2, [pc, #252]	@ (800a73c <xPortStartScheduler+0x12c>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d10b      	bne.n	800a65a <xPortStartScheduler+0x4a>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	60fb      	str	r3, [r7, #12]
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop
 800a658:	e7fd      	b.n	800a656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a65a:	4b39      	ldr	r3, [pc, #228]	@ (800a740 <xPortStartScheduler+0x130>)
 800a65c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	b2db      	uxtb	r3, r3
 800a664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	22ff      	movs	r2, #255	@ 0xff
 800a66a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	b2db      	uxtb	r3, r3
 800a672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	4b31      	ldr	r3, [pc, #196]	@ (800a744 <xPortStartScheduler+0x134>)
 800a680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a682:	4b31      	ldr	r3, [pc, #196]	@ (800a748 <xPortStartScheduler+0x138>)
 800a684:	2207      	movs	r2, #7
 800a686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a688:	e009      	b.n	800a69e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a68a:	4b2f      	ldr	r3, [pc, #188]	@ (800a748 <xPortStartScheduler+0x138>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3b01      	subs	r3, #1
 800a690:	4a2d      	ldr	r2, [pc, #180]	@ (800a748 <xPortStartScheduler+0x138>)
 800a692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a694:	78fb      	ldrb	r3, [r7, #3]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6a6:	2b80      	cmp	r3, #128	@ 0x80
 800a6a8:	d0ef      	beq.n	800a68a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6aa:	4b27      	ldr	r3, [pc, #156]	@ (800a748 <xPortStartScheduler+0x138>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1c3 0307 	rsb	r3, r3, #7
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d00b      	beq.n	800a6ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	60bb      	str	r3, [r7, #8]
}
 800a6c8:	bf00      	nop
 800a6ca:	bf00      	nop
 800a6cc:	e7fd      	b.n	800a6ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a748 <xPortStartScheduler+0x138>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a748 <xPortStartScheduler+0x138>)
 800a6d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a748 <xPortStartScheduler+0x138>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6e0:	4a19      	ldr	r2, [pc, #100]	@ (800a748 <xPortStartScheduler+0x138>)
 800a6e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6ec:	4b17      	ldr	r3, [pc, #92]	@ (800a74c <xPortStartScheduler+0x13c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a16      	ldr	r2, [pc, #88]	@ (800a74c <xPortStartScheduler+0x13c>)
 800a6f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6f8:	4b14      	ldr	r3, [pc, #80]	@ (800a74c <xPortStartScheduler+0x13c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a13      	ldr	r2, [pc, #76]	@ (800a74c <xPortStartScheduler+0x13c>)
 800a6fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a704:	f000 f8da 	bl	800a8bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a708:	4b11      	ldr	r3, [pc, #68]	@ (800a750 <xPortStartScheduler+0x140>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a70e:	f000 f8f9 	bl	800a904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a712:	4b10      	ldr	r3, [pc, #64]	@ (800a754 <xPortStartScheduler+0x144>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a0f      	ldr	r2, [pc, #60]	@ (800a754 <xPortStartScheduler+0x144>)
 800a718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a71c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a71e:	f7ff ff63 	bl	800a5e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a722:	f7ff f83d 	bl	80097a0 <vTaskSwitchContext>
	prvTaskExitError();
 800a726:	f7ff ff1b 	bl	800a560 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	e000ed00 	.word	0xe000ed00
 800a738:	410fc271 	.word	0x410fc271
 800a73c:	410fc270 	.word	0x410fc270
 800a740:	e000e400 	.word	0xe000e400
 800a744:	24000ed0 	.word	0x24000ed0
 800a748:	24000ed4 	.word	0x24000ed4
 800a74c:	e000ed20 	.word	0xe000ed20
 800a750:	24000010 	.word	0x24000010
 800a754:	e000ef34 	.word	0xe000ef34

0800a758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	607b      	str	r3, [r7, #4]
}
 800a770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a772:	4b10      	ldr	r3, [pc, #64]	@ (800a7b4 <vPortEnterCritical+0x5c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3301      	adds	r3, #1
 800a778:	4a0e      	ldr	r2, [pc, #56]	@ (800a7b4 <vPortEnterCritical+0x5c>)
 800a77a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a77c:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <vPortEnterCritical+0x5c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d110      	bne.n	800a7a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a784:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b8 <vPortEnterCritical+0x60>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00b      	beq.n	800a7a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	603b      	str	r3, [r7, #0]
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	e7fd      	b.n	800a7a2 <vPortEnterCritical+0x4a>
	}
}
 800a7a6:	bf00      	nop
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	24000010 	.word	0x24000010
 800a7b8:	e000ed04 	.word	0xe000ed04

0800a7bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7c2:	4b12      	ldr	r3, [pc, #72]	@ (800a80c <vPortExitCritical+0x50>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10b      	bne.n	800a7e2 <vPortExitCritical+0x26>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	607b      	str	r3, [r7, #4]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a80c <vPortExitCritical+0x50>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	4a08      	ldr	r2, [pc, #32]	@ (800a80c <vPortExitCritical+0x50>)
 800a7ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7ec:	4b07      	ldr	r3, [pc, #28]	@ (800a80c <vPortExitCritical+0x50>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d105      	bne.n	800a800 <vPortExitCritical+0x44>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f383 8811 	msr	BASEPRI, r3
}
 800a7fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	24000010 	.word	0x24000010

0800a810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a810:	f3ef 8009 	mrs	r0, PSP
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	4b15      	ldr	r3, [pc, #84]	@ (800a870 <pxCurrentTCBConst>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	f01e 0f10 	tst.w	lr, #16
 800a820:	bf08      	it	eq
 800a822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82a:	6010      	str	r0, [r2, #0]
 800a82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a834:	f380 8811 	msr	BASEPRI, r0
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f7fe ffae 	bl	80097a0 <vTaskSwitchContext>
 800a844:	f04f 0000 	mov.w	r0, #0
 800a848:	f380 8811 	msr	BASEPRI, r0
 800a84c:	bc09      	pop	{r0, r3}
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	6808      	ldr	r0, [r1, #0]
 800a852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	f01e 0f10 	tst.w	lr, #16
 800a85a:	bf08      	it	eq
 800a85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a860:	f380 8809 	msr	PSP, r0
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst>:
 800a870:	240008a4 	.word	0x240008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	607b      	str	r3, [r7, #4]
}
 800a890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a892:	f7fe fecb 	bl	800962c <xTaskIncrementTick>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a89c:	4b06      	ldr	r3, [pc, #24]	@ (800a8b8 <xPortSysTickHandler+0x40>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f383 8811 	msr	BASEPRI, r3
}
 800a8ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f4 <vPortSetupTimerInterrupt+0x38>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f8 <vPortSetupTimerInterrupt+0x3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8fc <vPortSetupTimerInterrupt+0x40>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	099b      	lsrs	r3, r3, #6
 800a8d8:	4a09      	ldr	r2, [pc, #36]	@ (800a900 <vPortSetupTimerInterrupt+0x44>)
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8de:	4b04      	ldr	r3, [pc, #16]	@ (800a8f0 <vPortSetupTimerInterrupt+0x34>)
 800a8e0:	2207      	movs	r2, #7
 800a8e2:	601a      	str	r2, [r3, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	e000e010 	.word	0xe000e010
 800a8f4:	e000e018 	.word	0xe000e018
 800a8f8:	24000000 	.word	0x24000000
 800a8fc:	10624dd3 	.word	0x10624dd3
 800a900:	e000e014 	.word	0xe000e014

0800a904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a914 <vPortEnableVFP+0x10>
 800a908:	6801      	ldr	r1, [r0, #0]
 800a90a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a90e:	6001      	str	r1, [r0, #0]
 800a910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a912:	bf00      	nop
 800a914:	e000ed88 	.word	0xe000ed88

0800a918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a91e:	f3ef 8305 	mrs	r3, IPSR
 800a922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b0f      	cmp	r3, #15
 800a928:	d915      	bls.n	800a956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a92a:	4a18      	ldr	r2, [pc, #96]	@ (800a98c <vPortValidateInterruptPriority+0x74>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a934:	4b16      	ldr	r3, [pc, #88]	@ (800a990 <vPortValidateInterruptPriority+0x78>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	7afa      	ldrb	r2, [r7, #11]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d20b      	bcs.n	800a956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a956:	4b0f      	ldr	r3, [pc, #60]	@ (800a994 <vPortValidateInterruptPriority+0x7c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a95e:	4b0e      	ldr	r3, [pc, #56]	@ (800a998 <vPortValidateInterruptPriority+0x80>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d90b      	bls.n	800a97e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	603b      	str	r3, [r7, #0]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <vPortValidateInterruptPriority+0x62>
	}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	e000e3f0 	.word	0xe000e3f0
 800a990:	24000ed0 	.word	0x24000ed0
 800a994:	e000ed0c 	.word	0xe000ed0c
 800a998:	24000ed4 	.word	0x24000ed4

0800a99c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08a      	sub	sp, #40	@ 0x28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9a8:	f7fe fd84 	bl	80094b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9ac:	4b5c      	ldr	r3, [pc, #368]	@ (800ab20 <pvPortMalloc+0x184>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9b4:	f000 f924 	bl	800ac00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9b8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab24 <pvPortMalloc+0x188>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f040 8095 	bne.w	800aaf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01e      	beq.n	800aa0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a9cc:	2208      	movs	r2, #8
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f003 0307 	and.w	r3, r3, #7
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d015      	beq.n	800aa0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f023 0307 	bic.w	r3, r3, #7
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00b      	beq.n	800aa0a <pvPortMalloc+0x6e>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	617b      	str	r3, [r7, #20]
}
 800aa04:	bf00      	nop
 800aa06:	bf00      	nop
 800aa08:	e7fd      	b.n	800aa06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d06f      	beq.n	800aaf0 <pvPortMalloc+0x154>
 800aa10:	4b45      	ldr	r3, [pc, #276]	@ (800ab28 <pvPortMalloc+0x18c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d86a      	bhi.n	800aaf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa1a:	4b44      	ldr	r3, [pc, #272]	@ (800ab2c <pvPortMalloc+0x190>)
 800aa1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa1e:	4b43      	ldr	r3, [pc, #268]	@ (800ab2c <pvPortMalloc+0x190>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa24:	e004      	b.n	800aa30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d903      	bls.n	800aa42 <pvPortMalloc+0xa6>
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1f1      	bne.n	800aa26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa42:	4b37      	ldr	r3, [pc, #220]	@ (800ab20 <pvPortMalloc+0x184>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d051      	beq.n	800aaf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2208      	movs	r2, #8
 800aa52:	4413      	add	r3, r2
 800aa54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	1ad2      	subs	r2, r2, r3
 800aa66:	2308      	movs	r3, #8
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d920      	bls.n	800aab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4413      	add	r3, r2
 800aa74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	f003 0307 	and.w	r3, r3, #7
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00b      	beq.n	800aa98 <pvPortMalloc+0xfc>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	613b      	str	r3, [r7, #16]
}
 800aa92:	bf00      	nop
 800aa94:	bf00      	nop
 800aa96:	e7fd      	b.n	800aa94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaaa:	69b8      	ldr	r0, [r7, #24]
 800aaac:	f000 f90a 	bl	800acc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aab0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab28 <pvPortMalloc+0x18c>)
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	4a1b      	ldr	r2, [pc, #108]	@ (800ab28 <pvPortMalloc+0x18c>)
 800aabc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aabe:	4b1a      	ldr	r3, [pc, #104]	@ (800ab28 <pvPortMalloc+0x18c>)
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab30 <pvPortMalloc+0x194>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d203      	bcs.n	800aad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaca:	4b17      	ldr	r3, [pc, #92]	@ (800ab28 <pvPortMalloc+0x18c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a18      	ldr	r2, [pc, #96]	@ (800ab30 <pvPortMalloc+0x194>)
 800aad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <pvPortMalloc+0x188>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	431a      	orrs	r2, r3
 800aadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aae6:	4b13      	ldr	r3, [pc, #76]	@ (800ab34 <pvPortMalloc+0x198>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3301      	adds	r3, #1
 800aaec:	4a11      	ldr	r2, [pc, #68]	@ (800ab34 <pvPortMalloc+0x198>)
 800aaee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aaf0:	f7fe fcee 	bl	80094d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f003 0307 	and.w	r3, r3, #7
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00b      	beq.n	800ab16 <pvPortMalloc+0x17a>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	60fb      	str	r3, [r7, #12]
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	e7fd      	b.n	800ab12 <pvPortMalloc+0x176>
	return pvReturn;
 800ab16:	69fb      	ldr	r3, [r7, #28]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3728      	adds	r7, #40	@ 0x28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	24004ae0 	.word	0x24004ae0
 800ab24:	24004af4 	.word	0x24004af4
 800ab28:	24004ae4 	.word	0x24004ae4
 800ab2c:	24004ad8 	.word	0x24004ad8
 800ab30:	24004ae8 	.word	0x24004ae8
 800ab34:	24004aec 	.word	0x24004aec

0800ab38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d04f      	beq.n	800abea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab4a:	2308      	movs	r3, #8
 800ab4c:	425b      	negs	r3, r3
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4413      	add	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	4b25      	ldr	r3, [pc, #148]	@ (800abf4 <vPortFree+0xbc>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4013      	ands	r3, r2
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <vPortFree+0x46>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	60fb      	str	r3, [r7, #12]
}
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
 800ab7c:	e7fd      	b.n	800ab7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00b      	beq.n	800ab9e <vPortFree+0x66>
	__asm volatile
 800ab86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8a:	f383 8811 	msr	BASEPRI, r3
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	60bb      	str	r3, [r7, #8]
}
 800ab98:	bf00      	nop
 800ab9a:	bf00      	nop
 800ab9c:	e7fd      	b.n	800ab9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	4b14      	ldr	r3, [pc, #80]	@ (800abf4 <vPortFree+0xbc>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4013      	ands	r3, r2
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01e      	beq.n	800abea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d11a      	bne.n	800abea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	685a      	ldr	r2, [r3, #4]
 800abb8:	4b0e      	ldr	r3, [pc, #56]	@ (800abf4 <vPortFree+0xbc>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	43db      	mvns	r3, r3
 800abbe:	401a      	ands	r2, r3
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abc4:	f7fe fc76 	bl	80094b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	4b0a      	ldr	r3, [pc, #40]	@ (800abf8 <vPortFree+0xc0>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4413      	add	r3, r2
 800abd2:	4a09      	ldr	r2, [pc, #36]	@ (800abf8 <vPortFree+0xc0>)
 800abd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abd6:	6938      	ldr	r0, [r7, #16]
 800abd8:	f000 f874 	bl	800acc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abdc:	4b07      	ldr	r3, [pc, #28]	@ (800abfc <vPortFree+0xc4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	4a06      	ldr	r2, [pc, #24]	@ (800abfc <vPortFree+0xc4>)
 800abe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abe6:	f7fe fc73 	bl	80094d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abea:	bf00      	nop
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	24004af4 	.word	0x24004af4
 800abf8:	24004ae4 	.word	0x24004ae4
 800abfc:	24004af0 	.word	0x24004af0

0800ac00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac0c:	4b27      	ldr	r3, [pc, #156]	@ (800acac <prvHeapInit+0xac>)
 800ac0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00c      	beq.n	800ac34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3307      	adds	r3, #7
 800ac1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f023 0307 	bic.w	r3, r3, #7
 800ac26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	4a1f      	ldr	r2, [pc, #124]	@ (800acac <prvHeapInit+0xac>)
 800ac30:	4413      	add	r3, r2
 800ac32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac38:	4a1d      	ldr	r2, [pc, #116]	@ (800acb0 <prvHeapInit+0xb0>)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac3e:	4b1c      	ldr	r3, [pc, #112]	@ (800acb0 <prvHeapInit+0xb0>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	4413      	add	r3, r2
 800ac4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac4c:	2208      	movs	r2, #8
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	1a9b      	subs	r3, r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4a15      	ldr	r2, [pc, #84]	@ (800acb4 <prvHeapInit+0xb4>)
 800ac60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac62:	4b14      	ldr	r3, [pc, #80]	@ (800acb4 <prvHeapInit+0xb4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2200      	movs	r2, #0
 800ac68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac6a:	4b12      	ldr	r3, [pc, #72]	@ (800acb4 <prvHeapInit+0xb4>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	1ad2      	subs	r2, r2, r3
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac80:	4b0c      	ldr	r3, [pc, #48]	@ (800acb4 <prvHeapInit+0xb4>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	4a0a      	ldr	r2, [pc, #40]	@ (800acb8 <prvHeapInit+0xb8>)
 800ac8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	4a09      	ldr	r2, [pc, #36]	@ (800acbc <prvHeapInit+0xbc>)
 800ac96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac98:	4b09      	ldr	r3, [pc, #36]	@ (800acc0 <prvHeapInit+0xc0>)
 800ac9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ac9e:	601a      	str	r2, [r3, #0]
}
 800aca0:	bf00      	nop
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	24000ed8 	.word	0x24000ed8
 800acb0:	24004ad8 	.word	0x24004ad8
 800acb4:	24004ae0 	.word	0x24004ae0
 800acb8:	24004ae8 	.word	0x24004ae8
 800acbc:	24004ae4 	.word	0x24004ae4
 800acc0:	24004af4 	.word	0x24004af4

0800acc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800accc:	4b28      	ldr	r3, [pc, #160]	@ (800ad70 <prvInsertBlockIntoFreeList+0xac>)
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e002      	b.n	800acd8 <prvInsertBlockIntoFreeList+0x14>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d8f7      	bhi.n	800acd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	4413      	add	r3, r2
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d108      	bne.n	800ad06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	441a      	add	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	441a      	add	r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d118      	bne.n	800ad4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	4b15      	ldr	r3, [pc, #84]	@ (800ad74 <prvInsertBlockIntoFreeList+0xb0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d00d      	beq.n	800ad42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	441a      	add	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	e008      	b.n	800ad54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad42:	4b0c      	ldr	r3, [pc, #48]	@ (800ad74 <prvInsertBlockIntoFreeList+0xb0>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	e003      	b.n	800ad54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d002      	beq.n	800ad62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad62:	bf00      	nop
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	24004ad8 	.word	0x24004ad8
 800ad74:	24004ae0 	.word	0x24004ae0

0800ad78 <memset>:
 800ad78:	4402      	add	r2, r0
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d100      	bne.n	800ad82 <memset+0xa>
 800ad80:	4770      	bx	lr
 800ad82:	f803 1b01 	strb.w	r1, [r3], #1
 800ad86:	e7f9      	b.n	800ad7c <memset+0x4>

0800ad88 <__libc_init_array>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	4d0d      	ldr	r5, [pc, #52]	@ (800adc0 <__libc_init_array+0x38>)
 800ad8c:	4c0d      	ldr	r4, [pc, #52]	@ (800adc4 <__libc_init_array+0x3c>)
 800ad8e:	1b64      	subs	r4, r4, r5
 800ad90:	10a4      	asrs	r4, r4, #2
 800ad92:	2600      	movs	r6, #0
 800ad94:	42a6      	cmp	r6, r4
 800ad96:	d109      	bne.n	800adac <__libc_init_array+0x24>
 800ad98:	4d0b      	ldr	r5, [pc, #44]	@ (800adc8 <__libc_init_array+0x40>)
 800ad9a:	4c0c      	ldr	r4, [pc, #48]	@ (800adcc <__libc_init_array+0x44>)
 800ad9c:	f000 f826 	bl	800adec <_init>
 800ada0:	1b64      	subs	r4, r4, r5
 800ada2:	10a4      	asrs	r4, r4, #2
 800ada4:	2600      	movs	r6, #0
 800ada6:	42a6      	cmp	r6, r4
 800ada8:	d105      	bne.n	800adb6 <__libc_init_array+0x2e>
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb0:	4798      	blx	r3
 800adb2:	3601      	adds	r6, #1
 800adb4:	e7ee      	b.n	800ad94 <__libc_init_array+0xc>
 800adb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adba:	4798      	blx	r3
 800adbc:	3601      	adds	r6, #1
 800adbe:	e7f2      	b.n	800ada6 <__libc_init_array+0x1e>
 800adc0:	0800ae98 	.word	0x0800ae98
 800adc4:	0800ae98 	.word	0x0800ae98
 800adc8:	0800ae98 	.word	0x0800ae98
 800adcc:	0800ae9c 	.word	0x0800ae9c

0800add0 <memcpy>:
 800add0:	440a      	add	r2, r1
 800add2:	4291      	cmp	r1, r2
 800add4:	f100 33ff 	add.w	r3, r0, #4294967295
 800add8:	d100      	bne.n	800addc <memcpy+0xc>
 800adda:	4770      	bx	lr
 800addc:	b510      	push	{r4, lr}
 800adde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ade2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ade6:	4291      	cmp	r1, r2
 800ade8:	d1f9      	bne.n	800adde <memcpy+0xe>
 800adea:	bd10      	pop	{r4, pc}

0800adec <_init>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	bf00      	nop
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr

0800adf8 <_fini>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr
