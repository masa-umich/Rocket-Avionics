
limestone-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019498  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003158  08019768  08019768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c8c0  0801c8c0  0001d8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c8c8  0801c8c8  0001d8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c8cc  0801c8cc  0001d8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000094  24000000  0801c8d0  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000094  0801c964  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004a18  080212e7  00022a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004a78  08021347  00022a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000a16c  24004ad8  080213a7  00022ad8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400ec44  080213a7  00022c44  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00022ad8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a090  00000000  00000000  00022b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000084b2  00000000  00000000  0005cb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002af8  00000000  00000000  00065048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002210  00000000  00000000  00067b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000452fa  00000000  00000000  00069d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000457ee  00000000  00000000  000af04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001776d5  00000000  00000000  000f4838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0026bf0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bd04  00000000  00000000  0026bf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00277c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004ad8 	.word	0x24004ad8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019750 	.word	0x08019750

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004adc 	.word	0x24004adc
 800030c:	08019750 	.word	0x08019750

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <vApplicationGetIdleTaskMemory+0x2c>)
 80006b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <vApplicationGetIdleTaskMemory+0x30>)
 80006b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	24004af4 	.word	0x24004af4
 80006d0:	24004b48 	.word	0x24004b48

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006da:	f000 fc87 	bl	8000fec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006de:	4b49      	ldr	r3, [pc, #292]	@ (8000804 <main+0x130>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d11b      	bne.n	8000722 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ea:	f3bf 8f4f 	dsb	sy
}
 80006ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006f0:	f3bf 8f6f 	isb	sy
}
 80006f4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006f6:	4b43      	ldr	r3, [pc, #268]	@ (8000804 <main+0x130>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006fe:	f3bf 8f4f 	dsb	sy
}
 8000702:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000704:	f3bf 8f6f 	isb	sy
}
 8000708:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800070a:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <main+0x130>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a3d      	ldr	r2, [pc, #244]	@ (8000804 <main+0x130>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000716:	f3bf 8f4f 	dsb	sy
}
 800071a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800071c:	f3bf 8f6f 	isb	sy
}
 8000720:	e000      	b.n	8000724 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000722:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000724:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <main+0x130>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800072c:	2b00      	cmp	r3, #0
 800072e:	d138      	bne.n	80007a2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000730:	4b34      	ldr	r3, [pc, #208]	@ (8000804 <main+0x130>)
 8000732:	2200      	movs	r2, #0
 8000734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800073e:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <main+0x130>)
 8000740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000748:	0b5b      	lsrs	r3, r3, #13
 800074a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800074e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000758:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800075a:	6a3b      	ldr	r3, [r7, #32]
 800075c:	015a      	lsls	r2, r3, #5
 800075e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000762:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000764:	69fa      	ldr	r2, [r7, #28]
 8000766:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000768:	4926      	ldr	r1, [pc, #152]	@ (8000804 <main+0x130>)
 800076a:	4313      	orrs	r3, r2
 800076c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	1e5a      	subs	r2, r3, #1
 8000774:	61fa      	str	r2, [r7, #28]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1ef      	bne.n	800075a <main+0x86>
    } while(sets-- != 0U);
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	623a      	str	r2, [r7, #32]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1e5      	bne.n	8000750 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000784:	f3bf 8f4f 	dsb	sy
}
 8000788:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800078a:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <main+0x130>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <main+0x130>)
 8000790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000794:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000796:	f3bf 8f4f 	dsb	sy
}
 800079a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800079c:	f3bf 8f6f 	isb	sy
}
 80007a0:	e000      	b.n	80007a4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007a2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f001 fb42 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f832 	bl	8000810 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->VTOR = FLASH_BASE; // fuck this stupid bug kys
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <main+0x130>)
 80007ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007b2:	609a      	str	r2, [r3, #8]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 fb12 	bl	8000ddc <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b8:	f000 f89a 	bl	80008f0 <MX_I2C1_Init>
  MX_I2C5_Init();
 80007bc:	f000 f8d6 	bl	800096c <MX_I2C5_Init>
  MX_SPI1_Init();
 80007c0:	f000 f912 	bl	80009e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007c4:	f000 f966 	bl	8000a94 <MX_SPI2_Init>
  MX_SPI4_Init();
 80007c8:	f000 f9ba 	bl	8000b40 <MX_SPI4_Init>
  MX_SPI5_Init();
 80007cc:	f000 fa0e 	bl	8000bec <MX_SPI5_Init>
  MX_SPI6_Init();
 80007d0:	f000 fa62 	bl	8000c98 <MX_SPI6_Init>
  MX_USART10_UART_Init();
 80007d4:	f000 fab6 	bl	8000d44 <MX_USART10_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <main+0x134>)
 80007da:	463c      	mov	r4, r7
 80007dc:	461d      	mov	r5, r3
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ea:	463b      	mov	r3, r7
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f008 fd64 	bl	80092bc <osThreadCreate>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <main+0x138>)
 80007f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007fa:	f008 fd48 	bl	800928e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0x12a>
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	08019774 	.word	0x08019774
 800080c:	2400512c 	.word	0x2400512c

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	@ 0x70
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081a:	224c      	movs	r2, #76	@ 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f018 f8f1 	bl	8018a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f018 f8eb 	bl	8018a06 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000830:	2002      	movs	r0, #2
 8000832:	f003 fc1d 	bl	8004070 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <SystemClock_Config+0xdc>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000842:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <SystemClock_Config+0xdc>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <SystemClock_Config+0xdc>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000856:	bf00      	nop
 8000858:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <SystemClock_Config+0xdc>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000864:	d1f8      	bne.n	8000858 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000866:	2302      	movs	r3, #2
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV8;
 800086a:	2319      	movs	r3, #25
 800086c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800086e:	2340      	movs	r3, #64	@ 0x40
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000876:	2300      	movs	r3, #0
 8000878:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087a:	2304      	movs	r3, #4
 800087c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800087e:	2360      	movs	r3, #96	@ 0x60
 8000880:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000886:	2303      	movs	r3, #3
 8000888:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800088e:	2304      	movs	r3, #4
 8000890:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000892:	2300      	movs	r3, #0
 8000894:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fc40 	bl	8004124 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008aa:	f000 fbda 	bl	8001062 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	233f      	movs	r3, #63	@ 0x3f
 80008b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c2:	2340      	movs	r3, #64	@ 0x40
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2100      	movs	r1, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 ffff 	bl	80048d8 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008e0:	f000 fbbf 	bl	8001062 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3770      	adds	r7, #112	@ 0x70
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024800 	.word	0x58024800

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_I2C1_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <MX_I2C1_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_I2C1_Init+0x74>)
 80008fc:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000900:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_I2C1_Init+0x74>)
 800090a:	2201      	movs	r2, #1
 800090c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092c:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_I2C1_Init+0x74>)
 800092e:	f003 fa6b 	bl	8003e08 <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 fb93 	bl	8001062 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000940:	f003 fafe 	bl	8003f40 <HAL_I2CEx_ConfigAnalogFilter>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800094a:	f000 fb8a 	bl	8001062 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_I2C1_Init+0x74>)
 8000952:	f003 fb40 	bl	8003fd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 fb81 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24004d48 	.word	0x24004d48
 8000968:	40005400 	.word	0x40005400

0800096c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_I2C5_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <MX_I2C5_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000E14;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_I2C5_Init+0x74>)
 8000978:	f640 6214 	movw	r2, #3604	@ 0xe14
 800097c:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_I2C5_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_I2C5_Init+0x74>)
 8000986:	2201      	movs	r2, #1
 8000988:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <MX_I2C5_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_I2C5_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C5_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_I2C5_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C5_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_I2C5_Init+0x74>)
 80009aa:	f003 fa2d 	bl	8003e08 <HAL_I2C_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C5_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 fb55 	bl	8001062 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <MX_I2C5_Init+0x74>)
 80009bc:	f003 fac0 	bl	8003f40 <HAL_I2CEx_ConfigAnalogFilter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C5_Init+0x5e>
  {
    Error_Handler();
 80009c6:	f000 fb4c 	bl	8001062 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C5_Init+0x74>)
 80009ce:	f003 fb02 	bl	8003fd6 <HAL_I2CEx_ConfigDigitalFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C5_Init+0x70>
  {
    Error_Handler();
 80009d8:	f000 fb43 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24004d9c 	.word	0x24004d9c
 80009e4:	40006400 	.word	0x40006400

080009e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009ec:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 80009ee:	4a28      	ldr	r2, [pc, #160]	@ (8000a90 <MX_SPI1_Init+0xa8>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 80009f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a02:	2203      	movs	r2, #3
 8000a04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a12:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_SPI1_Init+0xa4>)
 8000a78:	f006 f8be 	bl	8006bf8 <HAL_SPI_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a82:	f000 faee 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	24004df0 	.word	0x24004df0
 8000a90:	40013000 	.word	0x40013000

08000a94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000a9a:	4a28      	ldr	r2, [pc, #160]	@ (8000b3c <MX_SPI2_Init+0xa8>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000aa0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000aae:	2203      	movs	r2, #3
 8000ab0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ac0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ac4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_SPI2_Init+0xa4>)
 8000b24:	f006 f868 	bl	8006bf8 <HAL_SPI_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b2e:	f000 fa98 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24004e78 	.word	0x24004e78
 8000b3c:	40003800 	.word	0x40003800

08000b40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b44:	4b27      	ldr	r3, [pc, #156]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <MX_SPI4_Init+0xa8>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b4c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b5a:	2207      	movs	r2, #7
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b6c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_SPI4_Init+0xa4>)
 8000bd0:	f006 f812 	bl	8006bf8 <HAL_SPI_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000bda:	f000 fa42 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	24004f00 	.word	0x24004f00
 8000be8:	40013400 	.word	0x40013400

08000bec <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000bf2:	4a28      	ldr	r2, [pc, #160]	@ (8000c94 <MX_SPI5_Init+0xa8>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000bf8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bfc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c06:	2203      	movs	r2, #3
 8000c08:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c18:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c1c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c42:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_SPI5_Init+0xa4>)
 8000c7c:	f005 ffbc 	bl	8006bf8 <HAL_SPI_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000c86:	f000 f9ec 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	24004f88 	.word	0x24004f88
 8000c94:	40015000 	.word	0x40015000

08000c98 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <MX_SPI6_Init+0xa8>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000ca4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cc4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cc8:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cee:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_SPI6_Init+0xa4>)
 8000d28:	f005 ff66 	bl	8006bf8 <HAL_SPI_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8000d32:	f000 f996 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24005010 	.word	0x24005010
 8000d40:	58001400 	.word	0x58001400

08000d44 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <MX_USART10_UART_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000d8e:	f006 fb59 	bl	8007444 <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f963 	bl	8001062 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000da0:	f007 fc65 	bl	800866e <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f000 f95a 	bl	8001062 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000db2:	f007 fc9a 	bl	80086ea <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 f951 	bl	8001062 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <MX_USART10_UART_Init+0x90>)
 8000dc2:	f007 fc1b 	bl	80085fc <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f949 	bl	8001062 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	24005098 	.word	0x24005098
 8000dd8:	40011c00 	.word	0x40011c00

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	@ 0x30
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a6d      	ldr	r2, [pc, #436]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b6b      	ldr	r3, [pc, #428]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e10:	4b67      	ldr	r3, [pc, #412]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a66      	ldr	r2, [pc, #408]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b63      	ldr	r3, [pc, #396]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b60      	ldr	r3, [pc, #384]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a5e      	ldr	r2, [pc, #376]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a57      	ldr	r2, [pc, #348]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b54      	ldr	r3, [pc, #336]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b51      	ldr	r3, [pc, #324]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e88:	4b49      	ldr	r3, [pc, #292]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a48      	ldr	r2, [pc, #288]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b45      	ldr	r3, [pc, #276]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea6:	4b42      	ldr	r3, [pc, #264]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <MX_GPIO_Init+0x1d4>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSRT_GPIO_Port, RF_NSRT_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	483a      	ldr	r0, [pc, #232]	@ (8000fb4 <MX_GPIO_Init+0x1d8>)
 8000eca:	f002 ff69 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC_CS1_Pin|TC_CS2_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000ed4:	4838      	ldr	r0, [pc, #224]	@ (8000fb8 <MX_GPIO_Init+0x1dc>)
 8000ed6:	f002 ff63 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VLV_CTRL_GPIO_Port, VLV_CTRL_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee0:	4836      	ldr	r0, [pc, #216]	@ (8000fbc <MX_GPIO_Init+0x1e0>)
 8000ee2:	f002 ff5d 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000eec:	4834      	ldr	r0, [pc, #208]	@ (8000fc0 <MX_GPIO_Init+0x1e4>)
 8000eee:	f002 ff57 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	4833      	ldr	r0, [pc, #204]	@ (8000fc4 <MX_GPIO_Init+0x1e8>)
 8000ef8:	f002 ff52 	bl	8003da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4829      	ldr	r0, [pc, #164]	@ (8000fb4 <MX_GPIO_Init+0x1d8>)
 8000f10:	f002 fd9e 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSRT_Pin */
  GPIO_InitStruct.Pin = RF_NSRT_Pin;
 8000f14:	2304      	movs	r3, #4
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RF_NSRT_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4822      	ldr	r0, [pc, #136]	@ (8000fb4 <MX_GPIO_Init+0x1d8>)
 8000f2c:	f002 fd90 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS1_Pin TC_CS2_Pin */
  GPIO_InitStruct.Pin = TC_CS1_Pin|TC_CS2_Pin;
 8000f30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <MX_GPIO_Init+0x1dc>)
 8000f4a:	f002 fd81 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = VLV_CTRL_Pin;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(VLV_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4815      	ldr	r0, [pc, #84]	@ (8000fbc <MX_GPIO_Init+0x1e0>)
 8000f68:	f002 fd72 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_RED_Pin;
 8000f6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <MX_GPIO_Init+0x1e4>)
 8000f86:	f002 fd63 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4808      	ldr	r0, [pc, #32]	@ (8000fc4 <MX_GPIO_Init+0x1e8>)
 8000fa2:	f002 fd55 	bl	8003a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3730      	adds	r7, #48	@ 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	58020c00 	.word	0x58020c00
 8000fbc:	58020000 	.word	0x58020000
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	58021000 	.word	0x58021000

08000fc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000fd0:	f007 fc18 	bl	8008804 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <StartDefaultTask+0x20>)
 8000fd8:	f002 fefb 	bl	8003dd2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000fdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe0:	f008 f9b8 	bl	8009354 <osDelay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000fe4:	bf00      	nop
 8000fe6:	e7f5      	b.n	8000fd4 <StartDefaultTask+0xc>
 8000fe8:	58021000 	.word	0x58021000

08000fec <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ffe:	f001 f865 	bl	80020cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001002:	2301      	movs	r3, #1
 8001004:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001006:	2300      	movs	r3, #0
 8001008:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800100e:	231f      	movs	r3, #31
 8001010:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001012:	2387      	movs	r3, #135	@ 0x87
 8001014:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001016:	2300      	movs	r3, #0
 8001018:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800101a:	2303      	movs	r3, #3
 800101c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800101e:	2301      	movs	r3, #1
 8001020:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001022:	2301      	movs	r3, #1
 8001024:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f883 	bl	800213c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8001036:	2006      	movs	r0, #6
 8001038:	f001 f860 	bl	80020fc <HAL_MPU_Enable>

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001054:	d101      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001056:	f000 ff25 	bl	8001ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001066:	bf00      	nop
 8001068:	e7fd      	b.n	8001066 <Error_Handler+0x4>
	...

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <HAL_MspInit+0x38>)
 8001074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_MspInit+0x38>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001082:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_MspInit+0x38>)
 8001084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	210f      	movs	r1, #15
 8001094:	f06f 0001 	mvn.w	r0, #1
 8001098:	f000 fff0 	bl	800207c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	58024400 	.word	0x58024400

080010a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0bc      	sub	sp, #240	@ 0xf0
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	22b8      	movs	r2, #184	@ 0xb8
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f017 fc9c 	bl	8018a06 <memset>
  if(hi2c->Instance==I2C1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001250 <HAL_I2C_MspInit+0x1a8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d146      	bne.n	8001166 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d8:	f04f 0208 	mov.w	r2, #8
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 ffc0 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010fa:	f7ff ffb2 	bl	8001062 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b55      	ldr	r3, [pc, #340]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a53      	ldr	r2, [pc, #332]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b51      	ldr	r3, [pc, #324]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
 800111a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800111c:	23c0      	movs	r3, #192	@ 0xc0
 800111e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001134:	2304      	movs	r3, #4
 8001136:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800113e:	4619      	mov	r1, r3
 8001140:	4845      	ldr	r0, [pc, #276]	@ (8001258 <HAL_I2C_MspInit+0x1b0>)
 8001142:	f002 fc85 	bl	8003a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001146:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800114c:	4a41      	ldr	r2, [pc, #260]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001152:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800115c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001164:	e070      	b.n	8001248 <HAL_I2C_MspInit+0x1a0>
  else if(hi2c->Instance==I2C5)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a3c      	ldr	r2, [pc, #240]	@ (800125c <HAL_I2C_MspInit+0x1b4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d16b      	bne.n	8001248 <HAL_I2C_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8001170:	f04f 0208 	mov.w	r2, #8
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4618      	mov	r0, r3
 8001188:	f003 ff74 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001192:	f7ff ff66 	bl	8001062 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	4a26      	ldr	r2, [pc, #152]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011da:	2312      	movs	r3, #18
 80011dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 80011ec:	2306      	movs	r3, #6
 80011ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011f6:	4619      	mov	r1, r3
 80011f8:	4819      	ldr	r0, [pc, #100]	@ (8001260 <HAL_I2C_MspInit+0x1b8>)
 80011fa:	f002 fc29 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 8001218:	2306      	movs	r3, #6
 800121a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001222:	4619      	mov	r1, r3
 8001224:	480f      	ldr	r0, [pc, #60]	@ (8001264 <HAL_I2C_MspInit+0x1bc>)
 8001226:	f002 fc13 	bl	8003a50 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 800122c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001230:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 8001232:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001236:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_I2C_MspInit+0x1ac>)
 800123c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	bf00      	nop
 800124a:	37f0      	adds	r7, #240	@ 0xf0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40005400 	.word	0x40005400
 8001254:	58024400 	.word	0x58024400
 8001258:	58020400 	.word	0x58020400
 800125c:	40006400 	.word	0x40006400
 8001260:	58020800 	.word	0x58020800
 8001264:	58020000 	.word	0x58020000

08001268 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0c4      	sub	sp, #272	@ 0x110
 800126c:	af00      	add	r7, sp, #0
 800126e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001272:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001276:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800128c:	22b8      	movs	r2, #184	@ 0xb8
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f017 fbb8 	bl	8018a06 <memset>
  if(hspi->Instance==SPI1)
 8001296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4ac3      	ldr	r2, [pc, #780]	@ (80015b0 <HAL_SPI_MspInit+0x348>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d16b      	bne.n	8001380 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 fed8 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 80012ca:	f7ff feca 	bl	8001062 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	4bb9      	ldr	r3, [pc, #740]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80012d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d4:	4ab7      	ldr	r2, [pc, #732]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80012d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012de:	4bb5      	ldr	r3, [pc, #724]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80012e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	4bb1      	ldr	r3, [pc, #708]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f2:	4ab0      	ldr	r2, [pc, #704]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fc:	4bad      	ldr	r3, [pc, #692]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800130a:	4baa      	ldr	r3, [pc, #680]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	4aa8      	ldr	r2, [pc, #672]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 8001312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131a:	4ba6      	ldr	r3, [pc, #664]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
 8001326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001340:	2305      	movs	r3, #5
 8001342:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001346:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800134a:	4619      	mov	r1, r3
 800134c:	489a      	ldr	r0, [pc, #616]	@ (80015b8 <HAL_SPI_MspInit+0x350>)
 800134e:	f002 fb7f 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001352:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001356:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136c:	2305      	movs	r3, #5
 800136e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001372:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001376:	4619      	mov	r1, r3
 8001378:	4890      	ldr	r0, [pc, #576]	@ (80015bc <HAL_SPI_MspInit+0x354>)
 800137a:	f002 fb69 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 800137e:	e1c7      	b.n	8001710 <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI2)
 8001380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001384:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a8c      	ldr	r2, [pc, #560]	@ (80015c0 <HAL_SPI_MspInit+0x358>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d16b      	bne.n	800146a <HAL_SPI_MspInit+0x202>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001392:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800139e:	2300      	movs	r3, #0
 80013a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fe63 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 80013b4:	f7ff fe55 	bl	8001062 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013b8:	4b7e      	ldr	r3, [pc, #504]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013be:	4a7d      	ldr	r2, [pc, #500]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013c8:	4b7a      	ldr	r3, [pc, #488]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80013d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	4b77      	ldr	r3, [pc, #476]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	4a75      	ldr	r2, [pc, #468]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e6:	4b73      	ldr	r3, [pc, #460]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b6f      	ldr	r3, [pc, #444]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	4a6e      	ldr	r2, [pc, #440]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001404:	4b6b      	ldr	r3, [pc, #428]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001412:	2308      	movs	r3, #8
 8001414:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142a:	2305      	movs	r3, #5
 800142c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001434:	4619      	mov	r1, r3
 8001436:	4863      	ldr	r0, [pc, #396]	@ (80015c4 <HAL_SPI_MspInit+0x35c>)
 8001438:	f002 fb0a 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800143c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001440:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001456:	2305      	movs	r3, #5
 8001458:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001460:	4619      	mov	r1, r3
 8001462:	4859      	ldr	r0, [pc, #356]	@ (80015c8 <HAL_SPI_MspInit+0x360>)
 8001464:	f002 faf4 	bl	8003a50 <HAL_GPIO_Init>
}
 8001468:	e152      	b.n	8001710 <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI4)
 800146a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800146e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a55      	ldr	r2, [pc, #340]	@ (80015cc <HAL_SPI_MspInit+0x364>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d147      	bne.n	800150c <HAL_SPI_MspInit+0x2a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800147c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fdee 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 800149e:	f7ff fde0 	bl	8001062 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a2:	4b44      	ldr	r3, [pc, #272]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80014a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014a8:	4a42      	ldr	r2, [pc, #264]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80014aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014b2:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80014b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c0:	4b3c      	ldr	r3, [pc, #240]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c6:	4a3b      	ldr	r2, [pc, #236]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d0:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80014de:	f44f 53c3 	mov.w	r3, #6240	@ 0x1860
 80014e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014f8:	2305      	movs	r3, #5
 80014fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fe:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001502:	4619      	mov	r1, r3
 8001504:	4832      	ldr	r0, [pc, #200]	@ (80015d0 <HAL_SPI_MspInit+0x368>)
 8001506:	f002 faa3 	bl	8003a50 <HAL_GPIO_Init>
}
 800150a:	e101      	b.n	8001710 <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI5)
 800150c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001510:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2e      	ldr	r2, [pc, #184]	@ (80015d4 <HAL_SPI_MspInit+0x36c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d15e      	bne.n	80015dc <HAL_SPI_MspInit+0x374>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800151e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001522:	f04f 0300 	mov.w	r3, #0
 8001526:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fd9d 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_SPI_MspInit+0x2dc>
      Error_Handler();
 8001540:	f7ff fd8f 	bl	8001062 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001544:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 8001546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800154a:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 800154c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001550:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001554:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 8001556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800155a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001568:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_SPI_MspInit+0x34c>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001580:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001584:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800159a:	2305      	movs	r3, #5
 800159c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80015a4:	4619      	mov	r1, r3
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <HAL_SPI_MspInit+0x370>)
 80015a8:	f002 fa52 	bl	8003a50 <HAL_GPIO_Init>
}
 80015ac:	e0b0      	b.n	8001710 <HAL_SPI_MspInit+0x4a8>
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58020c00 	.word	0x58020c00
 80015bc:	58021800 	.word	0x58021800
 80015c0:	40003800 	.word	0x40003800
 80015c4:	58020800 	.word	0x58020800
 80015c8:	58020400 	.word	0x58020400
 80015cc:	40013400 	.word	0x40013400
 80015d0:	58021000 	.word	0x58021000
 80015d4:	40015000 	.word	0x40015000
 80015d8:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 80015dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a4c      	ldr	r2, [pc, #304]	@ (800171c <HAL_SPI_MspInit+0x4b4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	f040 8090 	bne.w	8001710 <HAL_SPI_MspInit+0x4a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80015f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001602:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001606:	4618      	mov	r0, r3
 8001608:	f003 fd34 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_SPI_MspInit+0x3ae>
      Error_Handler();
 8001612:	f7ff fd26 	bl	8001062 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 8001618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800161c:	4a40      	ldr	r2, [pc, #256]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 800161e:	f043 0320 	orr.w	r3, r3, #32
 8001622:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001626:	4b3e      	ldr	r3, [pc, #248]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 8001628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163a:	4a39      	ldr	r2, [pc, #228]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001644:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164a:	f003 0201 	and.w	r2, r3, #1
 800164e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001652:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001660:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 800166a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_SPI_MspInit+0x4b8>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800167c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800168a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800168e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001690:	2301      	movs	r3, #1
 8001692:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80016a8:	2305      	movs	r3, #5
 80016aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016b2:	4619      	mov	r1, r3
 80016b4:	481b      	ldr	r0, [pc, #108]	@ (8001724 <HAL_SPI_MspInit+0x4bc>)
 80016b6:	f002 f9cb 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016ba:	2360      	movs	r3, #96	@ 0x60
 80016bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80016d2:	2308      	movs	r3, #8
 80016d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	@ (8001724 <HAL_SPI_MspInit+0x4bc>)
 80016e0:	f002 f9b6 	bl	8003a50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80016fe:	2305      	movs	r3, #5
 8001700:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001704:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	@ (8001728 <HAL_SPI_MspInit+0x4c0>)
 800170c:	f002 f9a0 	bl	8003a50 <HAL_GPIO_Init>
}
 8001710:	bf00      	nop
 8001712:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58001400 	.word	0x58001400
 8001720:	58024400 	.word	0x58024400
 8001724:	58020000 	.word	0x58020000
 8001728:	58021800 	.word	0x58021800

0800172c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b0b8      	sub	sp, #224	@ 0xe0
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	22b8      	movs	r2, #184	@ 0xb8
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f017 f95a 	bl	8018a06 <memset>
  if(huart->Instance==USART10)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a31      	ldr	r2, [pc, #196]	@ (800181c <HAL_UART_MspInit+0xf0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d15a      	bne.n	8001812 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800175c:	f04f 0201 	mov.w	r2, #1
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fc7e 	bl	8005074 <HAL_RCCEx_PeriphCLKConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800177e:	f7ff fc70 	bl	8001062 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8001782:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <HAL_UART_MspInit+0xf4>)
 8001784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001788:	4a25      	ldr	r2, [pc, #148]	@ (8001820 <HAL_UART_MspInit+0xf4>)
 800178a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_UART_MspInit+0xf4>)
 8001794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_UART_MspInit+0xf4>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <HAL_UART_MspInit+0xf4>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <HAL_UART_MspInit+0xf4>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017be:	2304      	movs	r3, #4
 80017c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80017d6:	2304      	movs	r3, #4
 80017d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017e0:	4619      	mov	r1, r3
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <HAL_UART_MspInit+0xf8>)
 80017e4:	f002 f934 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017e8:	2308      	movs	r3, #8
 80017ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 8001800:	230b      	movs	r3, #11
 8001802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001806:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	@ (8001824 <HAL_UART_MspInit+0xf8>)
 800180e:	f002 f91f 	bl	8003a50 <HAL_GPIO_Init>

  /* USER CODE END USART10_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	37e0      	adds	r7, #224	@ 0xe0
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40011c00 	.word	0x40011c00
 8001820:	58024400 	.word	0x58024400
 8001824:	58021000 	.word	0x58021000

08001828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b090      	sub	sp, #64	@ 0x40
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	d827      	bhi.n	8001886 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001836:	2200      	movs	r2, #0
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	201c      	movs	r0, #28
 800183c:	f000 fc1e 	bl	800207c <HAL_NVIC_SetPriority>

     /* Enable the TIM2 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001840:	201c      	movs	r0, #28
 8001842:	f000 fc35 	bl	80020b0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001846:	4a29      	ldr	r2, [pc, #164]	@ (80018ec <HAL_InitTick+0xc4>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800184c:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <HAL_InitTick+0xc8>)
 800184e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001852:	4a27      	ldr	r2, [pc, #156]	@ (80018f0 <HAL_InitTick+0xc8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <HAL_InitTick+0xc8>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800186a:	f107 0210 	add.w	r2, r7, #16
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fbbb 	bl	8004ff0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800187a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800187e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001880:	2b00      	cmp	r3, #0
 8001882:	d106      	bne.n	8001892 <HAL_InitTick+0x6a>
 8001884:	e001      	b.n	800188a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e02c      	b.n	80018e4 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800188a:	f003 fb85 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 800188e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001890:	e004      	b.n	800189c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001892:	f003 fb81 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 8001896:	4603      	mov	r3, r0
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800189c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800189e:	4a15      	ldr	r2, [pc, #84]	@ (80018f4 <HAL_InitTick+0xcc>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9b      	lsrs	r3, r3, #18
 80018a6:	3b01      	subs	r3, #1
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018b8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018be:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80018cc:	480a      	ldr	r0, [pc, #40]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018ce:	f005 fad2 	bl	8006e76 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d104      	bne.n	80018e2 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80018d8:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <HAL_InitTick+0xd0>)
 80018da:	f005 fb2d 	bl	8006f38 <HAL_TIM_Base_Start_IT>
 80018de:	4603      	mov	r3, r0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3740      	adds	r7, #64	@ 0x40
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	24000008 	.word	0x24000008
 80018f0:	58024400 	.word	0x58024400
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	24005130 	.word	0x24005130

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <NMI_Handler+0x4>

08001904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <MemManage_Handler+0x4>

08001914 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <UsageFault_Handler+0x4>

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <TIM2_IRQHandler+0x10>)
 800193a:	f005 fb83 	bl	8007044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24005130 	.word	0x24005130

08001948 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_kill>:

int _kill(int pid, int sig)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <_kill+0x20>)
 8001964:	2216      	movs	r2, #22
 8001966:	601a      	str	r2, [r3, #0]
  return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	2400eaf4 	.word	0x2400eaf4

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe5 	bl	8001958 <_kill>
  while (1) {}    /* Make sure we hang here */
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <_exit+0x12>

08001992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00a      	b.n	80019ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a4:	f3af 8000 	nop.w
 80019a8:	4601      	mov	r1, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dbf0      	blt.n	80019a4 <_read+0x12>
  }

  return len;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e009      	b.n	80019f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbf1      	blt.n	80019de <_write+0x12>
  }
  return len;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_close>:

int _close(int file)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_isatty>:

int _isatty(int file)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d205      	bcs.n	8001aa8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad8 <_sbrk+0x6c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	24050000 	.word	0x24050000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	2400517c 	.word	0x2400517c
 8001ad4:	2400ec48 	.word	0x2400ec48
 8001ad8:	2400eaf4 	.word	0x2400eaf4

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <SystemInit+0xd0>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a31      	ldr	r2, [pc, #196]	@ (8001bac <SystemInit+0xd0>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001af0:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <SystemInit+0xd4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d807      	bhi.n	8001b0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001afc:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <SystemInit+0xd4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 030f 	bic.w	r3, r3, #15
 8001b04:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <SystemInit+0xd4>)
 8001b06:	f043 0307 	orr.w	r3, r3, #7
 8001b0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	@ (8001bb4 <SystemInit+0xd8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a28      	ldr	r2, [pc, #160]	@ (8001bb4 <SystemInit+0xd8>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <SystemInit+0xd8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <SystemInit+0xd8>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4924      	ldr	r1, [pc, #144]	@ (8001bb4 <SystemInit+0xd8>)
 8001b24:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <SystemInit+0xdc>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <SystemInit+0xd4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <SystemInit+0xd4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 030f 	bic.w	r3, r3, #15
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <SystemInit+0xd4>)
 8001b40:	f043 0307 	orr.w	r3, r3, #7
 8001b44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <SystemInit+0xd8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <SystemInit+0xd8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <SystemInit+0xd8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <SystemInit+0xd8>)
 8001b5a:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <SystemInit+0xe0>)
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <SystemInit+0xd8>)
 8001b60:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <SystemInit+0xe4>)
 8001b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <SystemInit+0xd8>)
 8001b66:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <SystemInit+0xe8>)
 8001b68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <SystemInit+0xd8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <SystemInit+0xd8>)
 8001b72:	4a14      	ldr	r2, [pc, #80]	@ (8001bc4 <SystemInit+0xe8>)
 8001b74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <SystemInit+0xd8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <SystemInit+0xd8>)
 8001b7e:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <SystemInit+0xe8>)
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <SystemInit+0xd8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <SystemInit+0xd8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <SystemInit+0xd8>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <SystemInit+0xd8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <SystemInit+0xec>)
 8001b9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ba0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00
 8001bb0:	52002000 	.word	0x52002000
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bbc:	02020200 	.word	0x02020200
 8001bc0:	01ff0000 	.word	0x01ff0000
 8001bc4:	01010280 	.word	0x01010280
 8001bc8:	52004000 	.word	0x52004000

08001bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd0:	f7ff ff84 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd6:	490d      	ldr	r1, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bec:	4c0a      	ldr	r4, [pc, #40]	@ (8001c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f016 ff53 	bl	8018aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfe:	f7fe fd69 	bl	80006d4 <main>
  bx  lr
 8001c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c04:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c0c:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 8001c10:	0801c8d0 	.word	0x0801c8d0
  ldr r2, =_sbss
 8001c14:	24004ad8 	.word	0x24004ad8
  ldr r4, =_ebss
 8001c18:	2400ec44 	.word	0x2400ec44

08001c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC3_IRQHandler>

08001c1e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <LAN8742_RegisterBusIO+0x28>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <LAN8742_RegisterBusIO+0x28>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <LAN8742_RegisterBusIO+0x28>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e014      	b.n	8001c76 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d139      	bne.n	8001d12 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e01c      	b.n	8001cf2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f107 020c 	add.w	r2, r7, #12
 8001cc0:	2112      	movs	r1, #18
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	4798      	blx	r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da03      	bge.n	8001cd4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001ccc:	f06f 0304 	mvn.w	r3, #4
 8001cd0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001cd2:	e00b      	b.n	8001cec <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d105      	bne.n	8001cec <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
         break;
 8001cea:	e005      	b.n	8001cf8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b1f      	cmp	r3, #31
 8001cf6:	d9df      	bls.n	8001cb8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b1f      	cmp	r3, #31
 8001cfe:	d902      	bls.n	8001d06 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d00:	f06f 0302 	mvn.w	r3, #2
 8001d04:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001d12:	693b      	ldr	r3, [r7, #16]
 }
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6810      	ldr	r0, [r2, #0]
 8001d30:	f107 020c 	add.w	r2, r7, #12
 8001d34:	2101      	movs	r1, #1
 8001d36:	4798      	blx	r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	da02      	bge.n	8001d44 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d3e:	f06f 0304 	mvn.w	r3, #4
 8001d42:	e06e      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6810      	ldr	r0, [r2, #0]
 8001d4c:	f107 020c 	add.w	r2, r7, #12
 8001d50:	2101      	movs	r1, #1
 8001d52:	4798      	blx	r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	da02      	bge.n	8001d60 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d5a:	f06f 0304 	mvn.w	r3, #4
 8001d5e:	e060      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e059      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6810      	ldr	r0, [r2, #0]
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4798      	blx	r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da02      	bge.n	8001d8a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d84:	f06f 0304 	mvn.w	r3, #4
 8001d88:	e04b      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11b      	bne.n	8001dcc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <LAN8742_GetLinkState+0x90>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e03a      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e033      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e02c      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001dc8:	2305      	movs	r3, #5
 8001dca:	e02a      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6810      	ldr	r0, [r2, #0]
 8001dd4:	f107 020c 	add.w	r2, r7, #12
 8001dd8:	211f      	movs	r1, #31
 8001dda:	4798      	blx	r3
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	da02      	bge.n	8001de8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001de2:	f06f 0304 	mvn.w	r3, #4
 8001de6:	e01c      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001df2:	2306      	movs	r3, #6
 8001df4:	e015      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 031c 	and.w	r3, r3, #28
 8001dfc:	2b18      	cmp	r3, #24
 8001dfe:	d101      	bne.n	8001e04 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e00:	2302      	movs	r3, #2
 8001e02:	e00e      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 031c 	and.w	r3, r3, #28
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d101      	bne.n	8001e12 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e007      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 031c 	and.w	r3, r3, #28
 8001e18:	2b14      	cmp	r3, #20
 8001e1a:	d101      	bne.n	8001e20 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	e000      	b.n	8001e22 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e20:	2305      	movs	r3, #5
    }
  }
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e32:	2003      	movs	r0, #3
 8001e34:	f000 f917 	bl	8002066 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e38:	f002 ff04 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <HAL_Init+0x68>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	4913      	ldr	r1, [pc, #76]	@ (8001e98 <HAL_Init+0x6c>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e56:	4b0f      	ldr	r3, [pc, #60]	@ (8001e94 <HAL_Init+0x68>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e98 <HAL_Init+0x6c>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <HAL_Init+0x70>)
 8001e6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_Init+0x74>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff fcd6 	bl	8001828 <HAL_InitTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e002      	b.n	8001e8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e86:	f7ff f8f1 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	58024400 	.word	0x58024400
 8001e98:	0801c65c 	.word	0x0801c65c
 8001e9c:	24000004 	.word	0x24000004
 8001ea0:	24000000 	.word	0x24000000

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2400000c 	.word	0x2400000c
 8001ec8:	24005180 	.word	0x24005180

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	24005180 	.word	0x24005180

08001ee4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001ef4:	4904      	ldr	r1, [pc, #16]	@ (8001f08 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	58000400 	.word	0x58000400

08001f0c <__NVIC_SetPriorityGrouping>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x40>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x40>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00
 8001f50:	05fa0000 	.word	0x05fa0000

08001f54 <__NVIC_GetPriorityGrouping>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff4c 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800208a:	f7ff ff63 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 800208e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7ff ffb3 	bl	8002000 <NVIC_EncodePriority>
 800209a:	4602      	mov	r2, r0
 800209c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff82 	bl	8001fac <__NVIC_SetPriority>
}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff56 	bl	8001f70 <__NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020d0:	f3bf 8f5f 	dmb	sy
}
 80020d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_MPU_Disable+0x28>)
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	4a06      	ldr	r2, [pc, #24]	@ (80020f4 <HAL_MPU_Disable+0x28>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_MPU_Disable+0x2c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00
 80020f8:	e000ed90 	.word	0xe000ed90

080020fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_MPU_Enable+0x38>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_MPU_Enable+0x3c>)
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_MPU_Enable+0x3c>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800211a:	f3bf 8f4f 	dsb	sy
}
 800211e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002120:	f3bf 8f6f 	isb	sy
}
 8002124:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed90 	.word	0xe000ed90
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	785a      	ldrb	r2, [r3, #1]
 8002148:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 800214a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800214c:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002158:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7b1b      	ldrb	r3, [r3, #12]
 8002164:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7adb      	ldrb	r3, [r3, #11]
 800216a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800216c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7a9b      	ldrb	r3, [r3, #10]
 8002172:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002174:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7b5b      	ldrb	r3, [r3, #13]
 800217a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800217c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7b9b      	ldrb	r3, [r3, #14]
 8002182:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7bdb      	ldrb	r3, [r3, #15]
 800218a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800218c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7a5b      	ldrb	r3, [r3, #9]
 8002192:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7a1b      	ldrb	r3, [r3, #8]
 800219a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800219c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a8:	6113      	str	r3, [r2, #16]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed90 	.word	0xe000ed90

080021bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e3      	b.n	8002396 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d106      	bne.n	80021e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2223      	movs	r2, #35	@ 0x23
 80021dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f006 fdff 	bl	8008de4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e6:	4b6e      	ldr	r3, [pc, #440]	@ (80023a0 <HAL_ETH_Init+0x1e4>)
 80021e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ec:	4a6c      	ldr	r2, [pc, #432]	@ (80023a0 <HAL_ETH_Init+0x1e4>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f6:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <HAL_ETH_Init+0x1e4>)
 80021f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7a1b      	ldrb	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff fe69 	bl	8001ee4 <HAL_SYSCFG_ETHInterfaceSelect>
 8002212:	e003      	b.n	800221c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002214:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002218:	f7ff fe64 	bl	8001ee4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800221c:	4b61      	ldr	r3, [pc, #388]	@ (80023a4 <HAL_ETH_Init+0x1e8>)
 800221e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002236:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7ff fe48 	bl	8001ecc <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800223e:	e011      	b.n	8002264 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002240:	f7ff fe44 	bl	8001ecc <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800224e:	d909      	bls.n	8002264 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2204      	movs	r2, #4
 8002254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	22e0      	movs	r2, #224	@ 0xe0
 800225c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e098      	b.n	8002396 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e4      	bne.n	8002240 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fe0a 	bl	8002e90 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800227c:	f002 fe5c 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8002280:	4603      	mov	r3, r0
 8002282:	4a49      	ldr	r2, [pc, #292]	@ (80023a8 <HAL_ETH_Init+0x1ec>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	0c9a      	lsrs	r2, r3, #18
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3a01      	subs	r2, #1
 8002290:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fffb 	bl	8003290 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80022a6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022b6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	22e0      	movs	r2, #224	@ 0xe0
 80022d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e05d      	b.n	8002396 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80022e6:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_ETH_Init+0x1f0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6952      	ldr	r2, [r2, #20]
 80022ee:	0051      	lsls	r1, r2, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022fa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f001 f863 	bl	80033ca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 f8a9 	bl	800345c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	3305      	adds	r3, #5
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	021a      	lsls	r2, r3, #8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	3303      	adds	r3, #3
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	061a      	lsls	r2, r3, #24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	3302      	adds	r3, #2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	3301      	adds	r3, #1
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002348:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002356:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002358:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_ETH_Init+0x1f4>)
 800236a:	430b      	orrs	r3, r1
 800236c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <HAL_ETH_Init+0x1f8>)
 800237e:	430b      	orrs	r3, r1
 8002380:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2210      	movs	r2, #16
 8002390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58000400 	.word	0x58000400
 80023a8:	431bde83 	.word	0x431bde83
 80023ac:	ffff8001 	.word	0xffff8001
 80023b0:	0c020060 	.word	0x0c020060
 80023b4:	0c20c000 	.word	0x0c20c000

080023b8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d165      	bne.n	8002496 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2223      	movs	r2, #35	@ 0x23
 80023ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2204      	movs	r2, #4
 80023dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9e4 	bl	80027ac <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023fc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002408:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002418:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002424:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002430:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002434:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0202 	orr.w	r2, r2, #2
 800245a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002474:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002480:	430b      	orrs	r3, r1
 8002482:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002486:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2223      	movs	r2, #35	@ 0x23
 800248e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ae:	2b23      	cmp	r3, #35	@ 0x23
 80024b0:	d165      	bne.n	800257e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2223      	movs	r2, #35	@ 0x23
 80024b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c2:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b30      	ldr	r3, [pc, #192]	@ (800258c <HAL_ETH_Stop_IT+0xec>)
 80024cc:	400b      	ands	r3, r1
 80024ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024d2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024de:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6812      	ldr	r2, [r2, #0]
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800250a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0202 	bic.w	r2, r2, #2
 8002540:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e00e      	b.n	8002566 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3212      	adds	r2, #18
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d9ed      	bls.n	8002548 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2210      	movs	r2, #16
 8002576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	ffff2f3e 	.word	0xffff2f3e

08002590 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e03a      	b.n	800262a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ba:	2b23      	cmp	r3, #35	@ 0x23
 80025bc:	d134      	bne.n	8002628 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80025c6:	2201      	movs	r2, #1
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 ffa4 	bl	8003518 <ETH_Prepare_Tx_Descriptors>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f043 0202 	orr.w	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01f      	b.n	800262a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80025ea:	f3bf 8f4f 	dsb	sy
}
 80025ee:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d904      	bls.n	800260c <HAL_ETH_Transmit_IT+0x7c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	1f1a      	subs	r2, r3, #4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3106      	adds	r1, #6
 8002618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800261c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002620:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b088      	sub	sp, #32
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0a2      	b.n	80027a4 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002664:	2b23      	cmp	r3, #35	@ 0x23
 8002666:	d001      	beq.n	800266c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e09b      	b.n	80027a4 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	3212      	adds	r2, #18
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002682:	f1c3 0304 	rsb	r3, r3, #4
 8002686:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002688:	e064      	b.n	8002754 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_ETH_ReadData+0x88>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03a      	beq.n	8002730 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80026f6:	2301      	movs	r3, #1
 80026f8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800270a:	461a      	mov	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f006 fd20 	bl	8009154 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d902      	bls.n	8002742 <HAL_ETH_ReadData+0x110>
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3b04      	subs	r3, #4
 8002740:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	3212      	adds	r2, #18
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002758:	2b00      	cmp	r3, #0
 800275a:	db06      	blt.n	800276a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d202      	bcs.n	800276a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d08f      	beq.n	800268a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	441a      	add	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f814 	bl	80027ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d108      	bne.n	80027a2 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80027b8:	2301      	movs	r3, #1
 80027ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	3212      	adds	r2, #18
 80027c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80027d4:	e038      	b.n	8002848 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d112      	bne.n	8002804 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	4618      	mov	r0, r3
 80027e4:	f006 fc86 	bl	80090f4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	74fb      	strb	r3, [r7, #19]
 80027f2:	e007      	b.n	8002804 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	461a      	mov	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	461a      	mov	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01e      	beq.n	8002848 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	2b00      	cmp	r3, #0
 8002810:	d004      	beq.n	800281c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	e003      	b.n	8002824 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002822:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d902      	bls.n	8002836 <ETH_UpdateDescriptor+0x8a>
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3b04      	subs	r3, #4
 8002834:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	3212      	adds	r2, #18
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	617b      	str	r3, [r7, #20]
      desccount--;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3b01      	subs	r3, #1
 8002846:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <ETH_UpdateDescriptor+0xa8>
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1c0      	bne.n	80027d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	429a      	cmp	r2, r3
 800285c:	d01b      	beq.n	8002896 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002868:	f3bf 8f5f 	dmb	sy
}
 800286c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	18ca      	adds	r2, r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002886:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002896:	bf00      	nop
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3318      	adds	r3, #24
 80028aa:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028bc:	e047      	b.n	800294e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80028be:	2301      	movs	r3, #1
 80028c0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	3304      	adds	r3, #4
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	3301      	adds	r3, #1
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d902      	bls.n	80028ea <HAL_ETH_ReleaseTxPacket+0x4c>
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	3b04      	subs	r3, #4
 80028e8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80028ee:	7bbb      	ldrb	r3, [r7, #14]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d02c      	beq.n	800294e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68d9      	ldr	r1, [r3, #12]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db1f      	blt.n	800294a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3304      	adds	r3, #4
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4618      	mov	r0, r3
 8002918:	f006 fc84 	bl	8009224 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	3304      	adds	r3, #4
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	2200      	movs	r2, #0
 8002928:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3301      	adds	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d902      	bls.n	800293c <HAL_ETH_ReleaseTxPacket+0x9e>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	3b04      	subs	r3, #4
 800293a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002948:	e001      	b.n	800294e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_ETH_ReleaseTxPacket+0xbc>
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1b1      	bne.n	80028be <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e03e      	b.n	8002a04 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800298e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	055b      	lsls	r3, r3, #21
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f043 030c 	orr.w	r3, r3, #12
 80029b2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80029c6:	f7ff fa81 	bl	8001ecc <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029cc:	e009      	b.n	80029e2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80029ce:	f7ff fa7d 	bl	8001ecc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029dc:	d901      	bls.n	80029e2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e010      	b.n	8002a04 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ed      	bne.n	80029ce <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e03c      	b.n	8002aa8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a36:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	041b      	lsls	r3, r3, #16
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 030c 	bic.w	r3, r3, #12
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002a72:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002a7a:	f7ff fa27 	bl	8001ecc <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a80:	e009      	b.n	8002a96 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002a82:	f7ff fa23 	bl	8001ecc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a90:	d901      	bls.n	8002a96 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e008      	b.n	8002aa8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1ed      	bne.n	8002a82 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40028000 	.word	0x40028000

08002ab4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e1c3      	b.n	8002e50 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf0c      	ite	eq
 8002b0e:	2301      	moveq	r3, #1
 8002b10:	2300      	movne	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002c42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	461a      	mov	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0e5b      	lsrs	r3, r3, #25
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002ddc:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002dec:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e00b      	b.n	8002e88 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d105      	bne.n	8002e86 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f865 	bl	8002f4c <ETH_SetMACConfig>

    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002eaa:	f002 f845 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8002eae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f1c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d804      	bhi.n	8002ec2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e022      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d204      	bcs.n	8002ed4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e019      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	@ (8002f24 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d915      	bls.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d804      	bhi.n	8002eee <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e00c      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f2c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d804      	bhi.n	8002f00 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e003      	b.n	8002f08 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	02160ebf 	.word	0x02160ebf
 8002f20:	03938700 	.word	0x03938700
 8002f24:	05f5e0ff 	.word	0x05f5e0ff
 8002f28:	08f0d17f 	.word	0x08f0d17f
 8002f2c:	0ee6b27f 	.word	0x0ee6b27f

08002f30 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002f5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002f66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	7b1b      	ldrb	r3, [r3, #12]
 8002f6c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7b5b      	ldrb	r3, [r3, #13]
 8002f74:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	7b9b      	ldrb	r3, [r3, #14]
 8002f7c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	7bdb      	ldrb	r3, [r3, #15]
 8002f84:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	7c12      	ldrb	r2, [r2, #16]
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d102      	bne.n	8002f96 <ETH_SetMACConfig+0x4a>
 8002f90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f94:	e000      	b.n	8002f98 <ETH_SetMACConfig+0x4c>
 8002f96:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	7c52      	ldrb	r2, [r2, #17]
 8002f9e:	2a00      	cmp	r2, #0
 8002fa0:	d102      	bne.n	8002fa8 <ETH_SetMACConfig+0x5c>
 8002fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fa6:	e000      	b.n	8002faa <ETH_SetMACConfig+0x5e>
 8002fa8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002faa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	7c9b      	ldrb	r3, [r3, #18]
 8002fb0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002fb2:	431a      	orrs	r2, r3
               macconf->Speed |
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002fb8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002fbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	7f1b      	ldrb	r3, [r3, #28]
 8002fc4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002fc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	7f5b      	ldrb	r3, [r3, #29]
 8002fcc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002fce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	7f92      	ldrb	r2, [r2, #30]
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d102      	bne.n	8002fde <ETH_SetMACConfig+0x92>
 8002fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fdc:	e000      	b.n	8002fe0 <ETH_SetMACConfig+0x94>
 8002fde:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002fe0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7fdb      	ldrb	r3, [r3, #31]
 8002fe6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002fe8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	d102      	bne.n	8002ffa <ETH_SetMACConfig+0xae>
 8002ff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ff8:	e000      	b.n	8002ffc <ETH_SetMACConfig+0xb0>
 8002ffa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002ffc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003002:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800300a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800300c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b56      	ldr	r3, [pc, #344]	@ (8003178 <ETH_SetMACConfig+0x22c>)
 800301e:	4013      	ands	r3, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	68f9      	ldr	r1, [r7, #12]
 8003026:	430b      	orrs	r3, r1
 8003028:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800302e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003036:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003038:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003040:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800304a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800304c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003054:	2a00      	cmp	r2, #0
 8003056:	d102      	bne.n	800305e <ETH_SetMACConfig+0x112>
 8003058:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800305c:	e000      	b.n	8003060 <ETH_SetMACConfig+0x114>
 800305e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003060:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4b42      	ldr	r3, [pc, #264]	@ (800317c <ETH_SetMACConfig+0x230>)
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	68f9      	ldr	r1, [r7, #12]
 800307a:	430b      	orrs	r3, r1
 800307c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003084:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4b3a      	ldr	r3, [pc, #232]	@ (8003180 <ETH_SetMACConfig+0x234>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	430b      	orrs	r3, r1
 80030a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80030ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80030b6:	2a00      	cmp	r2, #0
 80030b8:	d101      	bne.n	80030be <ETH_SetMACConfig+0x172>
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	e000      	b.n	80030c0 <ETH_SetMACConfig+0x174>
 80030be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80030c0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030d2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	68f9      	ldr	r1, [r7, #12]
 80030de:	430b      	orrs	r3, r1
 80030e0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80030e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80030f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	f023 0103 	bic.w	r1, r3, #3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	430a      	orrs	r2, r1
 800310a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003116:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003132:	2a00      	cmp	r2, #0
 8003134:	d101      	bne.n	800313a <ETH_SetMACConfig+0x1ee>
 8003136:	2240      	movs	r2, #64	@ 0x40
 8003138:	e000      	b.n	800313c <ETH_SetMACConfig+0x1f0>
 800313a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800313c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003144:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003146:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800314e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800315c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	430a      	orrs	r2, r1
 8003168:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	00048083 	.word	0x00048083
 800317c:	c0f88000 	.word	0xc0f88000
 8003180:	fffffef0 	.word	0xfffffef0

08003184 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b38      	ldr	r3, [pc, #224]	@ (800327c <ETH_SetDMAConfig+0xf8>)
 800319a:	4013      	ands	r3, r2
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6811      	ldr	r1, [r2, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031aa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	791b      	ldrb	r3, [r3, #4]
 80031b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80031b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	7b1b      	ldrb	r3, [r3, #12]
 80031bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <ETH_SetDMAConfig+0xfc>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	68f9      	ldr	r1, [r7, #12]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031dc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	7b5b      	ldrb	r3, [r3, #13]
 80031e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80031f8:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <ETH_SetDMAConfig+0x100>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	430b      	orrs	r3, r1
 8003204:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003208:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	7d1b      	ldrb	r3, [r3, #20]
 8003214:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003216:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	7f5b      	ldrb	r3, [r3, #29]
 800321c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800322a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800322e:	4b16      	ldr	r3, [pc, #88]	@ (8003288 <ETH_SetDMAConfig+0x104>)
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	430b      	orrs	r3, r1
 800323a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800323e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	7f1b      	ldrb	r3, [r3, #28]
 8003246:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003258:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <ETH_SetDMAConfig+0x108>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	68f9      	ldr	r1, [r7, #12]
 8003266:	430b      	orrs	r3, r1
 8003268:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800326c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	ffff87fd 	.word	0xffff87fd
 8003280:	ffff2ffe 	.word	0xffff2ffe
 8003284:	fffec000 	.word	0xfffec000
 8003288:	ffc0efef 	.word	0xffc0efef
 800328c:	7fc0ffff 	.word	0x7fc0ffff

08003290 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b0a4      	sub	sp, #144	@ 0x90
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800329e:	2300      	movs	r3, #0
 80032a0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80032cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032d0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80032e8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80032ec:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80032f4:	2300      	movs	r3, #0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800330a:	2300      	movs	r3, #0
 800330c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800330e:	2300      	movs	r3, #0
 8003310:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003312:	2300      	movs	r3, #0
 8003314:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003328:	2320      	movs	r3, #32
 800332a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800333a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003340:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003344:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800336a:	2300      	movs	r3, #0
 800336c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fde6 	bl	8002f4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003380:	2301      	movs	r3, #1
 8003382:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003384:	2301      	movs	r3, #1
 8003386:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800339a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800339e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80033a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80033b0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fee1 	bl	8003184 <ETH_SetDMAConfig>
}
 80033c2:	bf00      	nop
 80033c4:	3790      	adds	r7, #144	@ 0x90
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e01d      	b.n	8003414 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68d9      	ldr	r1, [r3, #12]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2200      	movs	r2, #0
 80033f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	3206      	adds	r2, #6
 800340a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3301      	adds	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d9de      	bls.n	80033d8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003428:	461a      	mov	r2, r3
 800342a:	2303      	movs	r3, #3
 800342c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800344c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	e023      	b.n	80034b2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6919      	ldr	r1, [r3, #16]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	3212      	adds	r2, #18
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3301      	adds	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d9d8      	bls.n	800346a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034de:	461a      	mov	r2, r3
 80034e0:	2303      	movs	r3, #3
 80034e2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034f2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003506:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003518:	b480      	push	{r7}
 800351a:	b091      	sub	sp, #68	@ 0x44
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3318      	adds	r3, #24
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800355a:	d007      	beq.n	800356c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003560:	3304      	adds	r3, #4
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	e266      	b.n	8003a3e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d044      	beq.n	8003606 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b75      	ldr	r3, [pc, #468]	@ (8003758 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003582:	4013      	ands	r3, r2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003588:	431a      	orrs	r2, r3
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80035a8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d027      	beq.n	8003606 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80035d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	431a      	orrs	r2, r3
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80035f4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003604:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00e      	beq.n	8003630 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	4b51      	ldr	r3, [pc, #324]	@ (800375c <ETH_Prepare_Tx_Descriptors+0x244>)
 8003618:	4013      	ands	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	6992      	ldr	r2, [r2, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d036      	beq.n	80036b6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003654:	f3bf 8f5f 	dmb	sy
}
 8003658:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003668:	3301      	adds	r3, #1
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366e:	2b03      	cmp	r3, #3
 8003670:	d902      	bls.n	8003678 <ETH_Prepare_Tx_Descriptors+0x160>
 8003672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003674:	3b04      	subs	r3, #4
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800367c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003684:	3301      	adds	r3, #1
 8003686:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003694:	d10f      	bne.n	80036b6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80036a0:	f3bf 8f5f 	dmb	sy
}
 80036a4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	e1c3      	b.n	8003a3e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b8:	3301      	adds	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	4b24      	ldr	r3, [pc, #144]	@ (800375c <ETH_Prepare_Tx_Descriptors+0x244>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d0:	6852      	ldr	r2, [r2, #4]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80036d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003760 <ETH_Prepare_Tx_Descriptors+0x248>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fa:	6852      	ldr	r2, [r2, #4]
 80036fc:	0412      	lsls	r2, r2, #16
 80036fe:	431a      	orrs	r2, r3
 8003700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	e008      	b.n	8003718 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003712:	4013      	ands	r3, r2
 8003714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003716:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d021      	beq.n	8003768 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	04db      	lsls	r3, r3, #19
 8003732:	431a      	orrs	r2, r3
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800373e:	4013      	ands	r3, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	69d2      	ldr	r2, [r2, #28]
 8003744:	431a      	orrs	r2, r3
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	e02e      	b.n	80037b6 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003758:	ffff0000 	.word	0xffff0000
 800375c:	ffffc000 	.word	0xffffc000
 8003760:	c000ffff 	.word	0xc000ffff
 8003764:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4b7b      	ldr	r3, [pc, #492]	@ (800395c <ETH_Prepare_Tx_Descriptors+0x444>)
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	431a      	orrs	r2, r3
 8003776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003778:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	431a      	orrs	r2, r3
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80037ec:	f3bf 8f5f 	dmb	sy
}
 80037f0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80da 	beq.w	80039c0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	431a      	orrs	r2, r3
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800381e:	e0cf      	b.n	80039c0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800382c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800382e:	3301      	adds	r3, #1
 8003830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003834:	2b03      	cmp	r3, #3
 8003836:	d902      	bls.n	800383e <ETH_Prepare_Tx_Descriptors+0x326>
 8003838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383a:	3b04      	subs	r3, #4
 800383c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003846:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800385c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003860:	d007      	beq.n	8003872 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003866:	3304      	adds	r3, #4
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d029      	beq.n	80038c6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800387a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800387e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003880:	2300      	movs	r3, #0
 8003882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003884:	e019      	b.n	80038ba <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003886:	f3bf 8f5f 	dmb	sy
}
 800388a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389a:	3301      	adds	r3, #1
 800389c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800389e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d902      	bls.n	80038aa <ETH_Prepare_Tx_Descriptors+0x392>
 80038a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a6:	3b04      	subs	r3, #4
 80038a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80038b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b6:	3301      	adds	r3, #1
 80038b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3e1      	bcc.n	8003886 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0bb      	b.n	8003a3e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	3301      	adds	r3, #1
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80038cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003960 <ETH_Prepare_Tx_Descriptors+0x448>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e6:	6852      	ldr	r2, [r2, #4]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80038f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80038fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800390c:	4013      	ands	r3, r2
 800390e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	0412      	lsls	r2, r2, #16
 8003914:	431a      	orrs	r2, r3
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	e008      	b.n	800392e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	4b0f      	ldr	r3, [pc, #60]	@ (8003964 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003928:	4013      	ands	r3, r2
 800392a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d018      	beq.n	800396c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003940:	4013      	ands	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	69d2      	ldr	r2, [r2, #28]
 8003946:	431a      	orrs	r2, r3
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	e020      	b.n	800399c <ETH_Prepare_Tx_Descriptors+0x484>
 800395a:	bf00      	nop
 800395c:	ffff8000 	.word	0xffff8000
 8003960:	ffffc000 	.word	0xffffc000
 8003964:	c000ffff 	.word	0xc000ffff
 8003968:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4b36      	ldr	r3, [pc, #216]	@ (8003a4c <ETH_Prepare_Tx_Descriptors+0x534>)
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	6852      	ldr	r2, [r2, #4]
 8003978:	431a      	orrs	r2, r3
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	431a      	orrs	r2, r3
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	3301      	adds	r3, #1
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80039a2:	f3bf 8f5f 	dmb	sy
}
 80039a6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f47f af2b 	bne.w	8003820 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	e005      	b.n	80039ea <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fe:	3304      	adds	r3, #4
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a0a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a10:	613b      	str	r3, [r7, #16]
  return(result);
 8003a12:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2301      	movs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f383 8810 	msr	PRIMASK, r3
}
 8003a20:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	4413      	add	r3, r2
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3744      	adds	r7, #68	@ 0x44
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	ffff8000 	.word	0xffff8000

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	@ 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a5e:	4b86      	ldr	r3, [pc, #536]	@ (8003c78 <HAL_GPIO_Init+0x228>)
 8003a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a62:	e18c      	b.n	8003d7e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 817e 	beq.w	8003d78 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d005      	beq.n	8003a94 <HAL_GPIO_Init+0x44>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d130      	bne.n	8003af6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aca:	2201      	movs	r2, #1
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f003 0201 	and.w	r2, r3, #1
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d017      	beq.n	8003b32 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d123      	bne.n	8003b86 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	08da      	lsrs	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3208      	adds	r2, #8
 8003b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	220f      	movs	r2, #15
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	08da      	lsrs	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0203 	and.w	r2, r3, #3
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80d8 	beq.w	8003d78 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_GPIO_Init+0x22c>)
 8003bca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bce:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <HAL_GPIO_Init+0x22c>)
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003bd8:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_GPIO_Init+0x22c>)
 8003bda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be6:	4a26      	ldr	r2, [pc, #152]	@ (8003c80 <HAL_GPIO_Init+0x230>)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c84 <HAL_GPIO_Init+0x234>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d04a      	beq.n	8003ca8 <HAL_GPIO_Init+0x258>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <HAL_GPIO_Init+0x238>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d02b      	beq.n	8003c72 <HAL_GPIO_Init+0x222>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <HAL_GPIO_Init+0x23c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d025      	beq.n	8003c6e <HAL_GPIO_Init+0x21e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <HAL_GPIO_Init+0x240>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01f      	beq.n	8003c6a <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <HAL_GPIO_Init+0x244>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d019      	beq.n	8003c66 <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <HAL_GPIO_Init+0x248>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <HAL_GPIO_Init+0x24c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00d      	beq.n	8003c5e <HAL_GPIO_Init+0x20e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a16      	ldr	r2, [pc, #88]	@ (8003ca0 <HAL_GPIO_Init+0x250>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <HAL_GPIO_Init+0x20a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <HAL_GPIO_Init+0x254>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <HAL_GPIO_Init+0x206>
 8003c52:	2309      	movs	r3, #9
 8003c54:	e029      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c56:	230a      	movs	r3, #10
 8003c58:	e027      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c5a:	2307      	movs	r3, #7
 8003c5c:	e025      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c5e:	2306      	movs	r3, #6
 8003c60:	e023      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c62:	2305      	movs	r3, #5
 8003c64:	e021      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e01f      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e01d      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e01b      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e019      	b.n	8003caa <HAL_GPIO_Init+0x25a>
 8003c76:	bf00      	nop
 8003c78:	58000080 	.word	0x58000080
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58000400 	.word	0x58000400
 8003c84:	58020000 	.word	0x58020000
 8003c88:	58020400 	.word	0x58020400
 8003c8c:	58020800 	.word	0x58020800
 8003c90:	58020c00 	.word	0x58020c00
 8003c94:	58021000 	.word	0x58021000
 8003c98:	58021400 	.word	0x58021400
 8003c9c:	58021800 	.word	0x58021800
 8003ca0:	58021c00 	.word	0x58021c00
 8003ca4:	58022400 	.word	0x58022400
 8003ca8:	2300      	movs	r3, #0
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f002 0203 	and.w	r2, r2, #3
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	4093      	lsls	r3, r2
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cba:	4938      	ldr	r1, [pc, #224]	@ (8003d9c <HAL_GPIO_Init+0x34c>)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f47f ae6b 	bne.w	8003a64 <HAL_GPIO_Init+0x14>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	3724      	adds	r7, #36	@ 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	58000400 	.word	0x58000400

08003da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
 8003dac:	4613      	mov	r3, r2
 8003dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003db0:	787b      	ldrb	r3, [r7, #1]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003dbc:	e003      	b.n	8003dc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dbe:	887b      	ldrh	r3, [r7, #2]
 8003dc0:	041a      	lsls	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	619a      	str	r2, [r3, #24]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003de4:	887a      	ldrh	r2, [r7, #2]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4013      	ands	r3, r2
 8003dea:	041a      	lsls	r2, r3, #16
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	887b      	ldrh	r3, [r7, #2]
 8003df2:	400b      	ands	r3, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	619a      	str	r2, [r3, #24]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e08b      	b.n	8003f32 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd f93a 	bl	80010a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	@ 0x24
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	e006      	b.n	8003e90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d108      	bne.n	8003eaa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	e007      	b.n	8003eba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <HAL_I2C_Init+0x134>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69d9      	ldr	r1, [r3, #28]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	02008000 	.word	0x02008000

08003f40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d138      	bne.n	8003fc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e032      	b.n	8003fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	@ 0x24
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	e000      	b.n	8003fca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
  }
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d139      	bne.n	8004060 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e033      	b.n	8004062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2224      	movs	r2, #36	@ 0x24
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004028:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004078:	4b29      	ldr	r3, [pc, #164]	@ (8004120 <HAL_PWREx_ConfigSupply+0xb0>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	2b06      	cmp	r3, #6
 8004082:	d00a      	beq.n	800409a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004084:	4b26      	ldr	r3, [pc, #152]	@ (8004120 <HAL_PWREx_ConfigSupply+0xb0>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	429a      	cmp	r2, r3
 8004090:	d001      	beq.n	8004096 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e03f      	b.n	8004116 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e03d      	b.n	8004116 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800409a:	4b21      	ldr	r3, [pc, #132]	@ (8004120 <HAL_PWREx_ConfigSupply+0xb0>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80040a2:	491f      	ldr	r1, [pc, #124]	@ (8004120 <HAL_PWREx_ConfigSupply+0xb0>)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040aa:	f7fd ff0f 	bl	8001ecc <HAL_GetTick>
 80040ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040b0:	e009      	b.n	80040c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040b2:	f7fd ff0b 	bl	8001ecc <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040c0:	d901      	bls.n	80040c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e027      	b.n	8004116 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040c6:	4b16      	ldr	r3, [pc, #88]	@ (8004120 <HAL_PWREx_ConfigSupply+0xb0>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d2:	d1ee      	bne.n	80040b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b1e      	cmp	r3, #30
 80040d8:	d008      	beq.n	80040ec <HAL_PWREx_ConfigSupply+0x7c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80040de:	d005      	beq.n	80040ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b1d      	cmp	r3, #29
 80040e4:	d002      	beq.n	80040ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b2d      	cmp	r3, #45	@ 0x2d
 80040ea:	d113      	bne.n	8004114 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80040ec:	f7fd feee 	bl	8001ecc <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040f2:	e009      	b.n	8004108 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040f4:	f7fd feea 	bl	8001ecc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004102:	d901      	bls.n	8004108 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e006      	b.n	8004116 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_PWREx_ConfigSupply+0xb0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0311 	and.w	r3, r3, #17
 8004110:	2b11      	cmp	r3, #17
 8004112:	d1ef      	bne.n	80040f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	58024800 	.word	0x58024800

08004124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08c      	sub	sp, #48	@ 0x30
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e3c8      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8087 	beq.w	8004252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004144:	4b88      	ldr	r3, [pc, #544]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800414e:	4b86      	ldr	r3, [pc, #536]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	2b10      	cmp	r3, #16
 8004158:	d007      	beq.n	800416a <HAL_RCC_OscConfig+0x46>
 800415a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800415c:	2b18      	cmp	r3, #24
 800415e:	d110      	bne.n	8004182 <HAL_RCC_OscConfig+0x5e>
 8004160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d10b      	bne.n	8004182 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416a:	4b7f      	ldr	r3, [pc, #508]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d06c      	beq.n	8004250 <HAL_RCC_OscConfig+0x12c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d168      	bne.n	8004250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e3a2      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418a:	d106      	bne.n	800419a <HAL_RCC_OscConfig+0x76>
 800418c:	4b76      	ldr	r3, [pc, #472]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a75      	ldr	r2, [pc, #468]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	e02e      	b.n	80041f8 <HAL_RCC_OscConfig+0xd4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x98>
 80041a2:	4b71      	ldr	r3, [pc, #452]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a70      	ldr	r2, [pc, #448]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b6e      	ldr	r3, [pc, #440]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6d      	ldr	r2, [pc, #436]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xd4>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0xbc>
 80041c6:	4b68      	ldr	r3, [pc, #416]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a67      	ldr	r2, [pc, #412]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b65      	ldr	r3, [pc, #404]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a64      	ldr	r2, [pc, #400]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xd4>
 80041e0:	4b61      	ldr	r3, [pc, #388]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a60      	ldr	r2, [pc, #384]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd fe64 	bl	8001ecc <HAL_GetTick>
 8004204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fd fe60 	bl	8001ecc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e356      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421a:	4b53      	ldr	r3, [pc, #332]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xe4>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fe50 	bl	8001ecc <HAL_GetTick>
 800422c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fd fe4c 	bl	8001ecc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	@ 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e342      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004242:	4b49      	ldr	r3, [pc, #292]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x10c>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 808c 	beq.w	8004378 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004260:	4b41      	ldr	r3, [pc, #260]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004268:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800426a:	4b3f      	ldr	r3, [pc, #252]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_RCC_OscConfig+0x162>
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2b18      	cmp	r3, #24
 800427a:	d137      	bne.n	80042ec <HAL_RCC_OscConfig+0x1c8>
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d132      	bne.n	80042ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004286:	4b38      	ldr	r3, [pc, #224]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x17a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e314      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800429e:	4b32      	ldr	r3, [pc, #200]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0219 	bic.w	r2, r3, #25
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	492f      	ldr	r1, [pc, #188]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fd fe0c 	bl	8001ecc <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fd fe08 	bl	8001ecc <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e2fe      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ca:	4b27      	ldr	r3, [pc, #156]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	061b      	lsls	r3, r3, #24
 80042e4:	4920      	ldr	r1, [pc, #128]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ea:	e045      	b.n	8004378 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d026      	beq.n	8004342 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 0219 	bic.w	r2, r3, #25
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4919      	ldr	r1, [pc, #100]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fd fde1 	bl	8001ecc <HAL_GetTick>
 800430a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430e:	f7fd fddd 	bl	8001ecc <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e2d3      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004320:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b0e      	ldr	r3, [pc, #56]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	490b      	ldr	r1, [pc, #44]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
 8004340:	e01a      	b.n	8004378 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a08      	ldr	r2, [pc, #32]	@ (8004368 <HAL_RCC_OscConfig+0x244>)
 8004348:	f023 0301 	bic.w	r3, r3, #1
 800434c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd fdbd 	bl	8001ecc <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd fdb9 	bl	8001ecc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d903      	bls.n	800436c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e2af      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
 8004368:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800436c:	4b96      	ldr	r3, [pc, #600]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ee      	bne.n	8004356 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d06a      	beq.n	800445a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004384:	4b90      	ldr	r3, [pc, #576]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800438e:	4b8e      	ldr	r3, [pc, #568]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d007      	beq.n	80043aa <HAL_RCC_OscConfig+0x286>
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b18      	cmp	r3, #24
 800439e:	d11b      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2b4>
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d116      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043aa:	4b87      	ldr	r3, [pc, #540]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x29e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e282      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c2:	4b81      	ldr	r3, [pc, #516]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	497d      	ldr	r1, [pc, #500]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043d6:	e040      	b.n	800445a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d023      	beq.n	8004428 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043e0:	4b79      	ldr	r3, [pc, #484]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a78      	ldr	r2, [pc, #480]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80043e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fd6e 	bl	8001ecc <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043f4:	f7fd fd6a 	bl	8001ecc <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e260      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004406:	4b70      	ldr	r3, [pc, #448]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004412:	4b6d      	ldr	r3, [pc, #436]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	061b      	lsls	r3, r3, #24
 8004420:	4969      	ldr	r1, [pc, #420]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
 8004426:	e018      	b.n	800445a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004428:	4b67      	ldr	r3, [pc, #412]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a66      	ldr	r2, [pc, #408]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 800442e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fd4a 	bl	8001ecc <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800443c:	f7fd fd46 	bl	8001ecc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e23c      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800444e:	4b5e      	ldr	r3, [pc, #376]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d036      	beq.n	80044d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800446e:	4b56      	ldr	r3, [pc, #344]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004472:	4a55      	ldr	r2, [pc, #340]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd fd27 	bl	8001ecc <HAL_GetTick>
 800447e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd fd23 	bl	8001ecc <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e219      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004494:	4b4c      	ldr	r3, [pc, #304]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x35e>
 80044a0:	e018      	b.n	80044d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a2:	4b49      	ldr	r3, [pc, #292]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	4a48      	ldr	r2, [pc, #288]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ae:	f7fd fd0d 	bl	8001ecc <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd fd09 	bl	8001ecc <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e1ff      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044c8:	4b3f      	ldr	r3, [pc, #252]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d036      	beq.n	800454e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d019      	beq.n	800451c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044e8:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a36      	ldr	r2, [pc, #216]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80044ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044f4:	f7fd fcea 	bl	8001ecc <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044fc:	f7fd fce6 	bl	8001ecc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1dc      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800450e:	4b2e      	ldr	r3, [pc, #184]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x3d8>
 800451a:	e018      	b.n	800454e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800451c:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a29      	ldr	r2, [pc, #164]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004526:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004528:	f7fd fcd0 	bl	8001ecc <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004530:	f7fd fccc 	bl	8001ecc <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1c2      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004542:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8086 	beq.w	8004668 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800455c:	4b1b      	ldr	r3, [pc, #108]	@ (80045cc <HAL_RCC_OscConfig+0x4a8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1a      	ldr	r2, [pc, #104]	@ (80045cc <HAL_RCC_OscConfig+0x4a8>)
 8004562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004568:	f7fd fcb0 	bl	8001ecc <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004570:	f7fd fcac 	bl	8001ecc <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e1a2      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004582:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <HAL_RCC_OscConfig+0x4a8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d106      	bne.n	80045a4 <HAL_RCC_OscConfig+0x480>
 8004596:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a2:	e032      	b.n	800460a <HAL_RCC_OscConfig+0x4e6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d111      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4ac>
 80045ac:	4b06      	ldr	r3, [pc, #24]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b0:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045bc:	4a02      	ldr	r2, [pc, #8]	@ (80045c8 <HAL_RCC_OscConfig+0x4a4>)
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c4:	e021      	b.n	800460a <HAL_RCC_OscConfig+0x4e6>
 80045c6:	bf00      	nop
 80045c8:	58024400 	.word	0x58024400
 80045cc:	58024800 	.word	0x58024800
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCC_OscConfig+0x4ce>
 80045d8:	4b83      	ldr	r3, [pc, #524]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a82      	ldr	r2, [pc, #520]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e4:	4b80      	ldr	r3, [pc, #512]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a7f      	ldr	r2, [pc, #508]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f0:	e00b      	b.n	800460a <HAL_RCC_OscConfig+0x4e6>
 80045f2:	4b7d      	ldr	r3, [pc, #500]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a7c      	ldr	r2, [pc, #496]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	4b7a      	ldr	r3, [pc, #488]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	4a79      	ldr	r2, [pc, #484]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d015      	beq.n	800463e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fd fc5b 	bl	8001ecc <HAL_GetTick>
 8004616:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fd fc57 	bl	8001ecc <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e14b      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004630:	4b6d      	ldr	r3, [pc, #436]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ee      	beq.n	800461a <HAL_RCC_OscConfig+0x4f6>
 800463c:	e014      	b.n	8004668 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fd fc45 	bl	8001ecc <HAL_GetTick>
 8004642:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd fc41 	bl	8001ecc <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e135      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800465c:	4b62      	ldr	r3, [pc, #392]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ee      	bne.n	8004646 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 812a 	beq.w	80048c6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004672:	4b5d      	ldr	r3, [pc, #372]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800467a:	2b18      	cmp	r3, #24
 800467c:	f000 80ba 	beq.w	80047f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	2b02      	cmp	r3, #2
 8004686:	f040 8095 	bne.w	80047b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468a:	4b57      	ldr	r3, [pc, #348]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a56      	ldr	r2, [pc, #344]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004690:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fc19 	bl	8001ecc <HAL_GetTick>
 800469a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469e:	f7fd fc15 	bl	8001ecc <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e10b      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b0:	4b4d      	ldr	r3, [pc, #308]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046bc:	4b4a      	ldr	r3, [pc, #296]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80046be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046c0:	4b4a      	ldr	r3, [pc, #296]	@ (80047ec <HAL_RCC_OscConfig+0x6c8>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	430a      	orrs	r2, r1
 80046d0:	4945      	ldr	r1, [pc, #276]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	3b01      	subs	r3, #1
 80046dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e4:	3b01      	subs	r3, #1
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f0:	3b01      	subs	r3, #1
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	3b01      	subs	r3, #1
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004706:	4938      	ldr	r1, [pc, #224]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004708:	4313      	orrs	r3, r2
 800470a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800470c:	4b36      	ldr	r3, [pc, #216]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	4a35      	ldr	r2, [pc, #212]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004718:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800471a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800471c:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <HAL_RCC_OscConfig+0x6cc>)
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004724:	00d2      	lsls	r2, r2, #3
 8004726:	4930      	ldr	r1, [pc, #192]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004728:	4313      	orrs	r3, r2
 800472a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800472c:	4b2e      	ldr	r3, [pc, #184]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	f023 020c 	bic.w	r2, r3, #12
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	492b      	ldr	r1, [pc, #172]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800473e:	4b2a      	ldr	r3, [pc, #168]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	f023 0202 	bic.w	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	4927      	ldr	r1, [pc, #156]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800474c:	4313      	orrs	r3, r2
 800474e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004750:	4b25      	ldr	r3, [pc, #148]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	4a24      	ldr	r2, [pc, #144]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475c:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4a21      	ldr	r2, [pc, #132]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004768:	4b1f      	ldr	r3, [pc, #124]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800476e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004774:	4b1c      	ldr	r3, [pc, #112]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	4a1b      	ldr	r2, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 800477a:	f043 0301 	orr.w	r3, r3, #1
 800477e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd fb9e 	bl	8001ecc <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd fb9a 	bl	8001ecc <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e090      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x670>
 80047b2:	e088      	b.n	80048c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b0c      	ldr	r3, [pc, #48]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a0b      	ldr	r2, [pc, #44]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80047ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fb84 	bl	8001ecc <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd fb80 	bl	8001ecc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e076      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047da:	4b03      	ldr	r3, [pc, #12]	@ (80047e8 <HAL_RCC_OscConfig+0x6c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x6a4>
 80047e6:	e06e      	b.n	80048c6 <HAL_RCC_OscConfig+0x7a2>
 80047e8:	58024400 	.word	0x58024400
 80047ec:	fffffc0c 	.word	0xfffffc0c
 80047f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047f4:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047fa:	4b35      	ldr	r3, [pc, #212]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	2b01      	cmp	r3, #1
 8004806:	d031      	beq.n	800486c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f003 0203 	and.w	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d12a      	bne.n	800486c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d122      	bne.n	800486c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d11a      	bne.n	800486c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	0a5b      	lsrs	r3, r3, #9
 800483a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d111      	bne.n	800486c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d108      	bne.n	800486c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	0e1b      	lsrs	r3, r3, #24
 800485e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e02b      	b.n	80048c8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004870:	4b17      	ldr	r3, [pc, #92]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 8004872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004874:	08db      	lsrs	r3, r3, #3
 8004876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800487a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d01f      	beq.n	80048c6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004886:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	4a11      	ldr	r2, [pc, #68]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004892:	f7fd fb1b 	bl	8001ecc <HAL_GetTick>
 8004896:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004898:	bf00      	nop
 800489a:	f7fd fb17 	bl	8001ecc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d0f9      	beq.n	800489a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048a6:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 80048a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <HAL_RCC_OscConfig+0x7b0>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048b2:	00d2      	lsls	r2, r2, #3
 80048b4:	4906      	ldr	r1, [pc, #24]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048be:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <HAL_RCC_OscConfig+0x7ac>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3730      	adds	r7, #48	@ 0x30
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	58024400 	.word	0x58024400
 80048d4:	ffff0007 	.word	0xffff0007

080048d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e19c      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d910      	bls.n	800491c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fa:	4b87      	ldr	r3, [pc, #540]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 020f 	bic.w	r2, r3, #15
 8004902:	4985      	ldr	r1, [pc, #532]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	4313      	orrs	r3, r2
 8004908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490a:	4b83      	ldr	r3, [pc, #524]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e184      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004934:	429a      	cmp	r2, r3
 8004936:	d908      	bls.n	800494a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004938:	4b78      	ldr	r3, [pc, #480]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	4975      	ldr	r1, [pc, #468]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004946:	4313      	orrs	r3, r2
 8004948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	4b70      	ldr	r3, [pc, #448]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004962:	429a      	cmp	r2, r3
 8004964:	d908      	bls.n	8004978 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004966:	4b6d      	ldr	r3, [pc, #436]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	496a      	ldr	r1, [pc, #424]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004974:	4313      	orrs	r3, r2
 8004976:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	4b64      	ldr	r3, [pc, #400]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004990:	429a      	cmp	r2, r3
 8004992:	d908      	bls.n	80049a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004994:	4b61      	ldr	r3, [pc, #388]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	495e      	ldr	r1, [pc, #376]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	4b59      	ldr	r3, [pc, #356]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049be:	429a      	cmp	r2, r3
 80049c0:	d908      	bls.n	80049d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049c2:	4b56      	ldr	r3, [pc, #344]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4953      	ldr	r1, [pc, #332]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4b4d      	ldr	r3, [pc, #308]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d908      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f0:	4b4a      	ldr	r3, [pc, #296]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f023 020f 	bic.w	r2, r3, #15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4947      	ldr	r1, [pc, #284]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d055      	beq.n	8004aba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a0e:	4b43      	ldr	r3, [pc, #268]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4940      	ldr	r1, [pc, #256]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a28:	4b3c      	ldr	r3, [pc, #240]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d121      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0f6      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a40:	4b36      	ldr	r3, [pc, #216]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d115      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0ea      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a58:	4b30      	ldr	r3, [pc, #192]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0de      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a68:	4b2c      	ldr	r3, [pc, #176]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0d6      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a78:	4b28      	ldr	r3, [pc, #160]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f023 0207 	bic.w	r2, r3, #7
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4925      	ldr	r1, [pc, #148]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8a:	f7fd fa1f 	bl	8001ecc <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a92:	f7fd fa1b 	bl	8001ecc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e0be      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d1eb      	bne.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d010      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d208      	bcs.n	8004ae8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad6:	4b11      	ldr	r3, [pc, #68]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f023 020f 	bic.w	r2, r3, #15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	490e      	ldr	r1, [pc, #56]	@ (8004b1c <HAL_RCC_ClockConfig+0x244>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d214      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b08      	ldr	r3, [pc, #32]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f023 020f 	bic.w	r2, r3, #15
 8004afe:	4906      	ldr	r1, [pc, #24]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <HAL_RCC_ClockConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e086      	b.n	8004c26 <HAL_RCC_ClockConfig+0x34e>
 8004b18:	52002000 	.word	0x52002000
 8004b1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d010      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	4b3f      	ldr	r3, [pc, #252]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d208      	bcs.n	8004b4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4939      	ldr	r1, [pc, #228]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d010      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d208      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b6a:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	492e      	ldr	r1, [pc, #184]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	4b28      	ldr	r3, [pc, #160]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d208      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b98:	4b25      	ldr	r3, [pc, #148]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4922      	ldr	r1, [pc, #136]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d010      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d208      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	4917      	ldr	r1, [pc, #92]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bd8:	f000 f834 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	4912      	ldr	r1, [pc, #72]	@ (8004c34 <HAL_RCC_ClockConfig+0x35c>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <HAL_RCC_ClockConfig+0x358>)
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8004c34 <HAL_RCC_ClockConfig+0x35c>)
 8004c00:	5cd3      	ldrb	r3, [r2, r3]
 8004c02:	f003 031f 	and.w	r3, r3, #31
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c38 <HAL_RCC_ClockConfig+0x360>)
 8004c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c10:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <HAL_RCC_ClockConfig+0x364>)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c16:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <HAL_RCC_ClockConfig+0x368>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc fe04 	bl	8001828 <HAL_InitTick>
 8004c20:	4603      	mov	r3, r0
 8004c22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	58024400 	.word	0x58024400
 8004c34:	0801c65c 	.word	0x0801c65c
 8004c38:	24000004 	.word	0x24000004
 8004c3c:	24000000 	.word	0x24000000
 8004c40:	24000008 	.word	0x24000008

08004c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b089      	sub	sp, #36	@ 0x24
 8004c48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4a:	4bb3      	ldr	r3, [pc, #716]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c52:	2b18      	cmp	r3, #24
 8004c54:	f200 8155 	bhi.w	8004f02 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c58:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004f03 	.word	0x08004f03
 8004c68:	08004f03 	.word	0x08004f03
 8004c6c:	08004f03 	.word	0x08004f03
 8004c70:	08004f03 	.word	0x08004f03
 8004c74:	08004f03 	.word	0x08004f03
 8004c78:	08004f03 	.word	0x08004f03
 8004c7c:	08004f03 	.word	0x08004f03
 8004c80:	08004ceb 	.word	0x08004ceb
 8004c84:	08004f03 	.word	0x08004f03
 8004c88:	08004f03 	.word	0x08004f03
 8004c8c:	08004f03 	.word	0x08004f03
 8004c90:	08004f03 	.word	0x08004f03
 8004c94:	08004f03 	.word	0x08004f03
 8004c98:	08004f03 	.word	0x08004f03
 8004c9c:	08004f03 	.word	0x08004f03
 8004ca0:	08004cf1 	.word	0x08004cf1
 8004ca4:	08004f03 	.word	0x08004f03
 8004ca8:	08004f03 	.word	0x08004f03
 8004cac:	08004f03 	.word	0x08004f03
 8004cb0:	08004f03 	.word	0x08004f03
 8004cb4:	08004f03 	.word	0x08004f03
 8004cb8:	08004f03 	.word	0x08004f03
 8004cbc:	08004f03 	.word	0x08004f03
 8004cc0:	08004cf7 	.word	0x08004cf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc4:	4b94      	ldr	r3, [pc, #592]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cd0:	4b91      	ldr	r3, [pc, #580]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	08db      	lsrs	r3, r3, #3
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	4a90      	ldr	r2, [pc, #576]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ce2:	e111      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ce6:	61bb      	str	r3, [r7, #24]
      break;
 8004ce8:	e10e      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004cea:	4b8d      	ldr	r3, [pc, #564]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cec:	61bb      	str	r3, [r7, #24]
      break;
 8004cee:	e10b      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cf2:	61bb      	str	r3, [r7, #24]
      break;
 8004cf4:	e108      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cf6:	4b88      	ldr	r3, [pc, #544]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d00:	4b85      	ldr	r3, [pc, #532]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d0c:	4b82      	ldr	r3, [pc, #520]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d16:	4b80      	ldr	r3, [pc, #512]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1a:	08db      	lsrs	r3, r3, #3
 8004d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80e1 	beq.w	8004efc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f000 8083 	beq.w	8004e48 <HAL_RCC_GetSysClockFreq+0x204>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	f200 80a1 	bhi.w	8004e8c <HAL_RCC_GetSysClockFreq+0x248>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x114>
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d056      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d56:	e099      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d58:	4b6f      	ldr	r3, [pc, #444]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02d      	beq.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d64:	4b6c      	ldr	r3, [pc, #432]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	08db      	lsrs	r3, r3, #3
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8004f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	ee07 3a90 	vmov	s15, r3
 8004d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b62      	ldr	r3, [pc, #392]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004da2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004dbe:	e087      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd2:	4b51      	ldr	r3, [pc, #324]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004de6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e02:	e065      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e16:	4b40      	ldr	r3, [pc, #256]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e46:	e043      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004f34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e8a:	e021      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ece:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ed0:	4b11      	ldr	r3, [pc, #68]	@ (8004f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	0a5b      	lsrs	r3, r3, #9
 8004ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eda:	3301      	adds	r3, #1
 8004edc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef4:	ee17 3a90 	vmov	r3, s15
 8004ef8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004efa:	e005      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]
      break;
 8004f00:	e002      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f02:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f04:	61bb      	str	r3, [r7, #24]
      break;
 8004f06:	bf00      	nop
  }

  return sysclockfreq;
 8004f08:	69bb      	ldr	r3, [r7, #24]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3724      	adds	r7, #36	@ 0x24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	03d09000 	.word	0x03d09000
 8004f20:	003d0900 	.word	0x003d0900
 8004f24:	02dc6c00 	.word	0x02dc6c00
 8004f28:	46000000 	.word	0x46000000
 8004f2c:	4c742400 	.word	0x4c742400
 8004f30:	4a742400 	.word	0x4a742400
 8004f34:	4c371b00 	.word	0x4c371b00

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f3e:	f7ff fe81 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490f      	ldr	r1, [pc, #60]	@ (8004f8c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f66:	5cd3      	ldrb	r3, [r2, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	4a07      	ldr	r2, [pc, #28]	@ (8004f90 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f76:	4a07      	ldr	r2, [pc, #28]	@ (8004f94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	0801c65c 	.word	0x0801c65c
 8004f90:	24000004 	.word	0x24000004
 8004f94:	24000000 	.word	0x24000000

08004f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f9c:	f7ff ffcc 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4904      	ldr	r1, [pc, #16]	@ (8004fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	0801c65c 	.word	0x0801c65c

08004fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fc8:	f7ff ffb6 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4904      	ldr	r1, [pc, #16]	@ (8004fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	0801c65c 	.word	0x0801c65c

08004ff0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	223f      	movs	r2, #63	@ 0x3f
 8004ffe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005000:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0207 	and.w	r2, r3, #7
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800500c:	4b17      	ldr	r3, [pc, #92]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005018:	4b14      	ldr	r3, [pc, #80]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005024:	4b11      	ldr	r3, [pc, #68]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005030:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800503c:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005048:	4b08      	ldr	r3, [pc, #32]	@ (800506c <HAL_RCC_GetClockConfig+0x7c>)
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <HAL_RCC_GetClockConfig+0x80>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	601a      	str	r2, [r3, #0]
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	58024400 	.word	0x58024400
 8005070:	52002000 	.word	0x52002000

08005074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005078:	b0c6      	sub	sp, #280	@ 0x118
 800507a:	af00      	add	r7, sp, #0
 800507c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005094:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005098:	2500      	movs	r5, #0
 800509a:	ea54 0305 	orrs.w	r3, r4, r5
 800509e:	d049      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050aa:	d02f      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80050ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050b0:	d828      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050b6:	d01a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050bc:	d822      	bhi.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c6:	d007      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050c8:	e01c      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050ca:	4bab      	ldr	r3, [pc, #684]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4aaa      	ldr	r2, [pc, #680]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050d6:	e01a      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050dc:	3308      	adds	r3, #8
 80050de:	2102      	movs	r1, #2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f001 fc25 	bl	8006930 <RCCEx_PLL2_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050ec:	e00f      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f2:	3328      	adds	r3, #40	@ 0x28
 80050f4:	2102      	movs	r1, #2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 fccc 	bl	8006a94 <RCCEx_PLL3_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005102:	e004      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800510a:	e000      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800510c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800510e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005116:	4b98      	ldr	r3, [pc, #608]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005124:	4a94      	ldr	r2, [pc, #592]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005126:	430b      	orrs	r3, r1
 8005128:	6513      	str	r3, [r2, #80]	@ 0x50
 800512a:	e003      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005140:	f04f 0900 	mov.w	r9, #0
 8005144:	ea58 0309 	orrs.w	r3, r8, r9
 8005148:	d047      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	2b04      	cmp	r3, #4
 8005152:	d82a      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005171 	.word	0x08005171
 8005160:	0800517f 	.word	0x0800517f
 8005164:	08005195 	.word	0x08005195
 8005168:	080051b3 	.word	0x080051b3
 800516c:	080051b3 	.word	0x080051b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005170:	4b81      	ldr	r3, [pc, #516]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	4a80      	ldr	r2, [pc, #512]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800517a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800517c:	e01a      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005182:	3308      	adds	r3, #8
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fbd2 	bl	8006930 <RCCEx_PLL2_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005192:	e00f      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005198:	3328      	adds	r3, #40	@ 0x28
 800519a:	2100      	movs	r1, #0
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fc79 	bl	8006a94 <RCCEx_PLL3_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051a8:	e004      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051b0:	e000      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80051b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c0:	f023 0107 	bic.w	r1, r3, #7
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80051e6:	f04f 0b00 	mov.w	fp, #0
 80051ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80051ee:	d05b      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051f8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80051fc:	d03b      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80051fe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005202:	d834      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005208:	d037      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800520a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800520e:	d82e      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005210:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005214:	d033      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005216:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800521a:	d828      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800521c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005220:	d01a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005226:	d822      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800522c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005230:	d007      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005232:	e01c      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005234:	4b50      	ldr	r3, [pc, #320]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	4a4f      	ldr	r2, [pc, #316]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800523a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800523e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005240:	e01e      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005246:	3308      	adds	r3, #8
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f001 fb70 	bl	8006930 <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005256:	e013      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525c:	3328      	adds	r3, #40	@ 0x28
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f001 fc17 	bl	8006a94 <RCCEx_PLL3_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800526c:	e008      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005274:	e004      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800527e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005288:	4b3b      	ldr	r3, [pc, #236]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800528a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005298:	4a37      	ldr	r2, [pc, #220]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800529a:	430b      	orrs	r3, r1
 800529c:	6593      	str	r3, [r2, #88]	@ 0x58
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80052b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80052c2:	460b      	mov	r3, r1
 80052c4:	4313      	orrs	r3, r2
 80052c6:	d05d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80052c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80052d4:	d03b      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80052d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80052da:	d834      	bhi.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80052dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052e0:	d037      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80052e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052e6:	d82e      	bhi.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80052e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052ec:	d033      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80052ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80052f2:	d828      	bhi.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80052f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052f8:	d01a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80052fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fe:	d822      	bhi.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005304:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005308:	d007      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800530a:	e01c      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530c:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	4a19      	ldr	r2, [pc, #100]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005318:	e01e      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800531a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531e:	3308      	adds	r3, #8
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f001 fb04 	bl	8006930 <RCCEx_PLL2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800532e:	e013      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	3328      	adds	r3, #40	@ 0x28
 8005336:	2100      	movs	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f001 fbab 	bl	8006a94 <RCCEx_PLL3_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800534c:	e004      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800534e:	bf00      	nop
 8005350:	e002      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005352:	bf00      	nop
 8005354:	e000      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005360:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005364:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005370:	4a01      	ldr	r2, [pc, #4]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005372:	430b      	orrs	r3, r1
 8005374:	6593      	str	r3, [r2, #88]	@ 0x58
 8005376:	e005      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005390:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005394:	2300      	movs	r3, #0
 8005396:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800539a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800539e:	460b      	mov	r3, r1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	d03a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	2b30      	cmp	r3, #48	@ 0x30
 80053ac:	d01f      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80053ae:	2b30      	cmp	r3, #48	@ 0x30
 80053b0:	d819      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d00c      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d815      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d019      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d111      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c2:	4baa      	ldr	r3, [pc, #680]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	4aa9      	ldr	r2, [pc, #676]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80053ce:	e011      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d4:	3308      	adds	r3, #8
 80053d6:	2102      	movs	r1, #2
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 faa9 	bl	8006930 <RCCEx_PLL2_Config>
 80053de:	4603      	mov	r3, r0
 80053e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80053e4:	e006      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053ec:	e002      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80053f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053fc:	4b9b      	ldr	r3, [pc, #620]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005400:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540a:	4a98      	ldr	r2, [pc, #608]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800540c:	430b      	orrs	r3, r1
 800540e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005410:	e003      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005416:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005426:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005430:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	d051      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005440:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005444:	d035      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005446:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800544a:	d82e      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800544c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005450:	d031      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005452:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005456:	d828      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545c:	d01a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800545e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005462:	d822      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546c:	d007      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800546e:	e01c      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005470:	4b7e      	ldr	r3, [pc, #504]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	4a7d      	ldr	r2, [pc, #500]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800547a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800547c:	e01c      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800547e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005482:	3308      	adds	r3, #8
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fa52 	bl	8006930 <RCCEx_PLL2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005492:	e011      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005498:	3328      	adds	r3, #40	@ 0x28
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f001 faf9 	bl	8006a94 <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054a8:	e006      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054b0:	e002      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80054b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054c0:	4b6a      	ldr	r3, [pc, #424]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80054c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ce:	4a67      	ldr	r2, [pc, #412]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80054ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4313      	orrs	r3, r2
 80054fc:	d053      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80054fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005508:	d033      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800550a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800550e:	d82c      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005510:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005514:	d02f      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005516:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800551a:	d826      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800551c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005520:	d02b      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005522:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005526:	d820      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800552c:	d012      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800552e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005532:	d81a      	bhi.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d022      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800553c:	d115      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800553e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005542:	3308      	adds	r3, #8
 8005544:	2101      	movs	r1, #1
 8005546:	4618      	mov	r0, r3
 8005548:	f001 f9f2 	bl	8006930 <RCCEx_PLL2_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005552:	e015      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005558:	3328      	adds	r3, #40	@ 0x28
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f001 fa99 	bl	8006a94 <RCCEx_PLL3_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005568:	e00a      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005570:	e006      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800557e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005588:	4b38      	ldr	r3, [pc, #224]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800558a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005596:	4a35      	ldr	r2, [pc, #212]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005598:	430b      	orrs	r3, r1
 800559a:	6513      	str	r3, [r2, #80]	@ 0x50
 800559c:	e003      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055b6:	2300      	movs	r3, #0
 80055b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80055bc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055c0:	460b      	mov	r3, r1
 80055c2:	4313      	orrs	r3, r2
 80055c4:	d058      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80055c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d2:	d033      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80055d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d8:	d82c      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055de:	d02f      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d826      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055ea:	d02b      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80055ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80055f0:	d820      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055f6:	d012      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80055f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055fc:	d81a      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d022      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005606:	d115      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560c:	3308      	adds	r3, #8
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f98d 	bl	8006930 <RCCEx_PLL2_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800561c:	e015      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005622:	3328      	adds	r3, #40	@ 0x28
 8005624:	2101      	movs	r1, #1
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fa34 	bl	8006a94 <RCCEx_PLL3_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005632:	e00a      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800563a:	e006      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800563c:	bf00      	nop
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10e      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005652:	4b06      	ldr	r3, [pc, #24]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800565a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005662:	4a02      	ldr	r2, [pc, #8]	@ (800566c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58
 8005668:	e006      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005674:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800568e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d037      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a2:	d00e      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a8:	d816      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056b2:	d111      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b4:	4bc4      	ldr	r3, [pc, #784]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	4ac3      	ldr	r2, [pc, #780]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056c0:	e00f      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c6:	3308      	adds	r3, #8
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f930 	bl	8006930 <RCCEx_PLL2_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056d6:	e004      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056de:	e000      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80056e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056ea:	4bb7      	ldr	r3, [pc, #732]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80056f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f8:	4ab3      	ldr	r2, [pc, #716]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80056fe:	e003      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005704:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005714:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800571e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d039      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800572e:	2b03      	cmp	r3, #3
 8005730:	d81c      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005732:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	08005775 	.word	0x08005775
 800573c:	08005749 	.word	0x08005749
 8005740:	08005757 	.word	0x08005757
 8005744:	08005775 	.word	0x08005775
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005748:	4b9f      	ldr	r3, [pc, #636]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	4a9e      	ldr	r2, [pc, #632]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800574e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005754:	e00f      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800575a:	3308      	adds	r3, #8
 800575c:	2102      	movs	r1, #2
 800575e:	4618      	mov	r0, r3
 8005760:	f001 f8e6 	bl	8006930 <RCCEx_PLL2_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800576a:	e004      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800577e:	4b92      	ldr	r3, [pc, #584]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005782:	f023 0103 	bic.w	r1, r3, #3
 8005786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800578c:	4a8e      	ldr	r2, [pc, #568]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800578e:	430b      	orrs	r3, r1
 8005790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005792:	e003      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005798:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80057a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f000 8099 	beq.w	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057be:	4b83      	ldr	r3, [pc, #524]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a82      	ldr	r2, [pc, #520]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ca:	f7fc fb7f 	bl	8001ecc <HAL_GetTick>
 80057ce:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d2:	e00b      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d4:	f7fc fb7a 	bl	8001ecc <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b64      	cmp	r3, #100	@ 0x64
 80057e2:	d903      	bls.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057ea:	e005      	b.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ec:	4b77      	ldr	r3, [pc, #476]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0ed      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80057f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d173      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005800:	4b71      	ldr	r3, [pc, #452]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800580c:	4053      	eors	r3, r2
 800580e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005812:	2b00      	cmp	r3, #0
 8005814:	d015      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005816:	4b6c      	ldr	r3, [pc, #432]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800581e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005822:	4b69      	ldr	r3, [pc, #420]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005826:	4a68      	ldr	r2, [pc, #416]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800582e:	4b66      	ldr	r3, [pc, #408]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005832:	4a65      	ldr	r2, [pc, #404]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005838:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800583a:	4a63      	ldr	r2, [pc, #396]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800583c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005840:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800584a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584e:	d118      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fc fb3c 	bl	8001ecc <HAL_GetTick>
 8005854:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005858:	e00d      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fc fb37 	bl	8001ecc <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	f241 3388 	movw	r3, #5000	@ 0x1388
 800586a:	429a      	cmp	r2, r3
 800586c:	d903      	bls.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005874:	e005      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005876:	4b54      	ldr	r3, [pc, #336]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0eb      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005886:	2b00      	cmp	r3, #0
 8005888:	d129      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800589a:	d10e      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x846>
 800589c:	4b4a      	ldr	r3, [pc, #296]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058ac:	091a      	lsrs	r2, r3, #4
 80058ae:	4b48      	ldr	r3, [pc, #288]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	4a45      	ldr	r2, [pc, #276]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6113      	str	r3, [r2, #16]
 80058b8:	e005      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80058ba:	4b43      	ldr	r3, [pc, #268]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	4a42      	ldr	r2, [pc, #264]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058c4:	6113      	str	r3, [r2, #16]
 80058c6:	4b40      	ldr	r3, [pc, #256]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d6:	4a3c      	ldr	r2, [pc, #240]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	6713      	str	r3, [r2, #112]	@ 0x70
 80058dc:	e008      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 0301 	and.w	r3, r2, #1
 80058fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005906:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	f000 808f 	beq.w	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005916:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005918:	2b28      	cmp	r3, #40	@ 0x28
 800591a:	d871      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005a09 	.word	0x08005a09
 8005928:	08005a01 	.word	0x08005a01
 800592c:	08005a01 	.word	0x08005a01
 8005930:	08005a01 	.word	0x08005a01
 8005934:	08005a01 	.word	0x08005a01
 8005938:	08005a01 	.word	0x08005a01
 800593c:	08005a01 	.word	0x08005a01
 8005940:	08005a01 	.word	0x08005a01
 8005944:	080059d5 	.word	0x080059d5
 8005948:	08005a01 	.word	0x08005a01
 800594c:	08005a01 	.word	0x08005a01
 8005950:	08005a01 	.word	0x08005a01
 8005954:	08005a01 	.word	0x08005a01
 8005958:	08005a01 	.word	0x08005a01
 800595c:	08005a01 	.word	0x08005a01
 8005960:	08005a01 	.word	0x08005a01
 8005964:	080059eb 	.word	0x080059eb
 8005968:	08005a01 	.word	0x08005a01
 800596c:	08005a01 	.word	0x08005a01
 8005970:	08005a01 	.word	0x08005a01
 8005974:	08005a01 	.word	0x08005a01
 8005978:	08005a01 	.word	0x08005a01
 800597c:	08005a01 	.word	0x08005a01
 8005980:	08005a01 	.word	0x08005a01
 8005984:	08005a09 	.word	0x08005a09
 8005988:	08005a01 	.word	0x08005a01
 800598c:	08005a01 	.word	0x08005a01
 8005990:	08005a01 	.word	0x08005a01
 8005994:	08005a01 	.word	0x08005a01
 8005998:	08005a01 	.word	0x08005a01
 800599c:	08005a01 	.word	0x08005a01
 80059a0:	08005a01 	.word	0x08005a01
 80059a4:	08005a09 	.word	0x08005a09
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	08005a01 	.word	0x08005a01
 80059b4:	08005a01 	.word	0x08005a01
 80059b8:	08005a01 	.word	0x08005a01
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	08005a01 	.word	0x08005a01
 80059c4:	08005a09 	.word	0x08005a09
 80059c8:	58024400 	.word	0x58024400
 80059cc:	58024800 	.word	0x58024800
 80059d0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d8:	3308      	adds	r3, #8
 80059da:	2101      	movs	r1, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 ffa7 	bl	8006930 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ee:	3328      	adds	r3, #40	@ 0x28
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 f84e 	bl	8006a94 <RCCEx_PLL3_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a12:	4bbf      	ldr	r3, [pc, #764]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a20:	4abb      	ldr	r2, [pc, #748]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 0302 	and.w	r3, r2, #2
 8005a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d041      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d824      	bhi.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005aad 	.word	0x08005aad
 8005a64:	08005a79 	.word	0x08005a79
 8005a68:	08005a8f 	.word	0x08005a8f
 8005a6c:	08005aad 	.word	0x08005aad
 8005a70:	08005aad 	.word	0x08005aad
 8005a74:	08005aad 	.word	0x08005aad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 ff55 	bl	8006930 <RCCEx_PLL2_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e00f      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a92:	3328      	adds	r3, #40	@ 0x28
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fffc 	bl	8006a94 <RCCEx_PLL3_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e004      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005aaa:	e000      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ab6:	4b96      	ldr	r3, [pc, #600]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aba:	f023 0107 	bic.w	r1, r3, #7
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac4:	4a92      	ldr	r2, [pc, #584]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005aca:	e003      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ad0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f002 0304 	and.w	r3, r2, #4
 8005ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aea:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005aee:	460b      	mov	r3, r1
 8005af0:	4313      	orrs	r3, r2
 8005af2:	d044      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d825      	bhi.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b55 	.word	0x08005b55
 8005b0c:	08005b21 	.word	0x08005b21
 8005b10:	08005b37 	.word	0x08005b37
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b55 	.word	0x08005b55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b24:	3308      	adds	r3, #8
 8005b26:	2101      	movs	r1, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 ff01 	bl	8006930 <RCCEx_PLL2_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b34:	e00f      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3a:	3328      	adds	r3, #40	@ 0x28
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 ffa8 	bl	8006a94 <RCCEx_PLL3_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b4a:	e004      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10b      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b62:	f023 0107 	bic.w	r1, r3, #7
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6e:	4a68      	ldr	r2, [pc, #416]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b70:	430b      	orrs	r3, r1
 8005b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b74:	e003      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f002 0320 	and.w	r3, r2, #32
 8005b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	d055      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005baa:	d033      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bb0:	d82c      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb6:	d02f      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bbc:	d826      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005bbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bc2:	d02b      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005bc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bc8:	d820      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bce:	d012      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bd4:	d81a      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d022      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bde:	d115      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be4:	3308      	adds	r3, #8
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fea1 	bl	8006930 <RCCEx_PLL2_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e015      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfa:	3328      	adds	r3, #40	@ 0x28
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 ff48 	bl	8006a94 <RCCEx_PLL3_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e00a      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c12:	e006      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c2a:	4b39      	ldr	r3, [pc, #228]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c3a:	4a35      	ldr	r2, [pc, #212]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c60:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d058      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c76:	d033      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005c78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005c7c:	d82c      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	d02f      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c88:	d826      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c8e:	d02b      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005c90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c94:	d820      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c9a:	d012      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ca0:	d81a      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d022      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005caa:	d115      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 fe3b 	bl	8006930 <RCCEx_PLL2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cc0:	e015      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc6:	3328      	adds	r3, #40	@ 0x28
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fee2 	bl	8006a94 <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cd6:	e00a      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e004      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10e      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cf6:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d06:	4a02      	ldr	r2, [pc, #8]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005d0e:	bf00      	nop
 8005d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005d32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d055      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d44:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d48:	d033      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005d4a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d4e:	d82c      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d54:	d02f      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d5a:	d826      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005d5c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d60:	d02b      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005d62:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d66:	d820      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d6c:	d012      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005d6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d72:	d81a      	bhi.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d022      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d7c:	d115      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d82:	3308      	adds	r3, #8
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fdd2 	bl	8006930 <RCCEx_PLL2_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005d92:	e015      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d98:	3328      	adds	r3, #40	@ 0x28
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fe79 	bl	8006a94 <RCCEx_PLL3_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005db0:	e006      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005db2:	bf00      	nop
 8005db4:	e004      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005db6:	bf00      	nop
 8005db8:	e002      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005dc8:	4ba0      	ldr	r3, [pc, #640]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dcc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dd8:	4a9c      	ldr	r2, [pc, #624]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dde:	e003      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f002 0308 	and.w	r3, r2, #8
 8005df4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005dfe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e02:	460b      	mov	r3, r1
 8005e04:	4313      	orrs	r3, r2
 8005e06:	d01e      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1a:	3328      	adds	r3, #40	@ 0x28
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fe38 	bl	8006a94 <RCCEx_PLL3_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005e30:	4b86      	ldr	r3, [pc, #536]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e40:	4a82      	ldr	r2, [pc, #520]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f002 0310 	and.w	r3, r2, #16
 8005e52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e56:	2300      	movs	r3, #0
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e5c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d01e      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e72:	d10c      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e78:	3328      	adds	r3, #40	@ 0x28
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fe09 	bl	8006a94 <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005eb6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	d03e      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ecc:	d022      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ed2:	d81b      	bhi.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005edc:	d00b      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005ede:	e015      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fd21 	bl	8006930 <RCCEx_PLL2_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ef4:	e00f      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efa:	3328      	adds	r3, #40	@ 0x28
 8005efc:	2102      	movs	r1, #2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fdc8 	bl	8006a94 <RCCEx_PLL3_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f0a:	e004      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f12:	e000      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f2e:	4a47      	ldr	r2, [pc, #284]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f34:	e003      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f50:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d03b      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f66:	d01f      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f6c:	d818      	bhi.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f72:	d003      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f78:	d007      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005f7a:	e011      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f7c:	4b33      	ldr	r3, [pc, #204]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	4a32      	ldr	r2, [pc, #200]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f88:	e00f      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8e:	3328      	adds	r3, #40	@ 0x28
 8005f90:	2101      	movs	r1, #1
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fd7e 	bl	8006a94 <RCCEx_PLL3_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005f9e:	e004      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fa6:	e000      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005faa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fb2:	4b26      	ldr	r3, [pc, #152]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fc2:	4a22      	ldr	r2, [pc, #136]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005fc8:	e003      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005fde:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fe4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d034      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ffc:	d007      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005ffe:	e011      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006000:	4b12      	ldr	r3, [pc, #72]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	4a11      	ldr	r2, [pc, #68]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800600c:	e00e      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006012:	3308      	adds	r3, #8
 8006014:	2102      	movs	r1, #2
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fc8a 	bl	8006930 <RCCEx_PLL2_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006022:	e003      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800602a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10d      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006034:	4b05      	ldr	r3, [pc, #20]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006038:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006042:	4a02      	ldr	r2, [pc, #8]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006044:	430b      	orrs	r3, r1
 8006046:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006048:	e006      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800604a:	bf00      	nop
 800604c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006064:	663b      	str	r3, [r7, #96]	@ 0x60
 8006066:	2300      	movs	r3, #0
 8006068:	667b      	str	r3, [r7, #100]	@ 0x64
 800606a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800606e:	460b      	mov	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	d00c      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006078:	3328      	adds	r3, #40	@ 0x28
 800607a:	2102      	movs	r1, #2
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fd09 	bl	8006a94 <RCCEx_PLL3_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800609a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800609c:	2300      	movs	r3, #0
 800609e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060a0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80060a4:	460b      	mov	r3, r1
 80060a6:	4313      	orrs	r3, r2
 80060a8:	d036      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060b4:	d018      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80060b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ba:	d811      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c0:	d014      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80060c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c6:	d80b      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d011      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80060cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060d0:	d106      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d2:	4bb7      	ldr	r3, [pc, #732]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	4ab6      	ldr	r2, [pc, #728]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80060de:	e008      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060e6:	e004      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80060e8:	bf00      	nop
 80060ea:	e002      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80060ec:	bf00      	nop
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80060f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060fa:	4bad      	ldr	r3, [pc, #692]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006108:	4aa9      	ldr	r2, [pc, #676]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800610a:	430b      	orrs	r3, r1
 800610c:	6553      	str	r3, [r2, #84]	@ 0x54
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006114:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006124:	653b      	str	r3, [r7, #80]	@ 0x50
 8006126:	2300      	movs	r3, #0
 8006128:	657b      	str	r3, [r7, #84]	@ 0x54
 800612a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800612e:	460b      	mov	r3, r1
 8006130:	4313      	orrs	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006134:	4b9e      	ldr	r3, [pc, #632]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006138:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006142:	4a9b      	ldr	r2, [pc, #620]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006144:	430b      	orrs	r3, r1
 8006146:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006156:	2300      	movs	r3, #0
 8006158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800615a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006164:	4b92      	ldr	r3, [pc, #584]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006168:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006172:	4a8f      	ldr	r2, [pc, #572]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006174:	430b      	orrs	r3, r1
 8006176:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006184:	643b      	str	r3, [r7, #64]	@ 0x40
 8006186:	2300      	movs	r3, #0
 8006188:	647b      	str	r3, [r7, #68]	@ 0x44
 800618a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800618e:	460b      	mov	r3, r1
 8006190:	4313      	orrs	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006194:	4b86      	ldr	r3, [pc, #536]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	4a85      	ldr	r2, [pc, #532]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800619a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800619e:	6113      	str	r3, [r2, #16]
 80061a0:	4b83      	ldr	r3, [pc, #524]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061a2:	6919      	ldr	r1, [r3, #16]
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061ac:	4a80      	ldr	r2, [pc, #512]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061ae:	430b      	orrs	r3, r1
 80061b0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80061be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061c0:	2300      	movs	r3, #0
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061c4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80061c8:	460b      	mov	r3, r1
 80061ca:	4313      	orrs	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061ce:	4b78      	ldr	r3, [pc, #480]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061dc:	4a74      	ldr	r2, [pc, #464]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80061de:	430b      	orrs	r3, r1
 80061e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80061ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f0:	2300      	movs	r3, #0
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80061f8:	460b      	mov	r3, r1
 80061fa:	4313      	orrs	r3, r2
 80061fc:	d00a      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061fe:	4b6c      	ldr	r3, [pc, #432]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006202:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620e:	4a68      	ldr	r2, [pc, #416]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006210:	430b      	orrs	r3, r1
 8006212:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	2100      	movs	r1, #0
 800621e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006226:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800622a:	460b      	mov	r3, r1
 800622c:	4313      	orrs	r3, r2
 800622e:	d011      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006234:	3308      	adds	r3, #8
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fb79 	bl	8006930 <RCCEx_PLL2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800624c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006250:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	2100      	movs	r1, #0
 800625e:	6239      	str	r1, [r7, #32]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
 8006266:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800626a:	460b      	mov	r3, r1
 800626c:	4313      	orrs	r3, r2
 800626e:	d011      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006274:	3308      	adds	r3, #8
 8006276:	2101      	movs	r1, #1
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fb59 	bl	8006930 <RCCEx_PLL2_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006290:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	2100      	movs	r1, #0
 800629e:	61b9      	str	r1, [r7, #24]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d011      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b4:	3308      	adds	r3, #8
 80062b6:	2102      	movs	r1, #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fb39 	bl	8006930 <RCCEx_PLL2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80062c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	2100      	movs	r1, #0
 80062de:	6139      	str	r1, [r7, #16]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80062ea:	460b      	mov	r3, r1
 80062ec:	4313      	orrs	r3, r2
 80062ee:	d011      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	3328      	adds	r3, #40	@ 0x28
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fbcb 	bl	8006a94 <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006310:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	2100      	movs	r1, #0
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	d011      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006334:	3328      	adds	r3, #40	@ 0x28
 8006336:	2101      	movs	r1, #1
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fbab 	bl	8006a94 <RCCEx_PLL3_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006348:	2b00      	cmp	r3, #0
 800634a:	d003      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	2100      	movs	r1, #0
 800635e:	6039      	str	r1, [r7, #0]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	e9d7 1200 	ldrd	r1, r2, [r7]
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	d011      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006374:	3328      	adds	r3, #40	@ 0x28
 8006376:	2102      	movs	r1, #2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fb8b 	bl	8006a94 <RCCEx_PLL3_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006394:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80063a8:	46bd      	mov	sp, r7
 80063aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400

080063b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80063b8:	f7fe fdbe 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	091b      	lsrs	r3, r3, #4
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	4904      	ldr	r1, [pc, #16]	@ (80063dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80063ca:	5ccb      	ldrb	r3, [r1, r3]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	58024400 	.word	0x58024400
 80063dc:	0801c65c 	.word	0x0801c65c

080063e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	@ 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80063f2:	4b9f      	ldr	r3, [pc, #636]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	0b1b      	lsrs	r3, r3, #12
 80063f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800640a:	4b99      	ldr	r3, [pc, #612]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800640c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640e:	08db      	lsrs	r3, r3, #3
 8006410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	fb02 f303 	mul.w	r3, r2, r3
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006422:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8111 	beq.w	8006650 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b02      	cmp	r3, #2
 8006432:	f000 8083 	beq.w	800653c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b02      	cmp	r3, #2
 800643a:	f200 80a1 	bhi.w	8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d056      	beq.n	80064f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800644a:	e099      	b.n	8006580 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800644c:	4b88      	ldr	r3, [pc, #544]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02d      	beq.n	80064b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006458:	4b85      	ldr	r3, [pc, #532]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	08db      	lsrs	r3, r3, #3
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	4a84      	ldr	r2, [pc, #528]	@ (8006674 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
 8006468:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006482:	4b7b      	ldr	r3, [pc, #492]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006492:	ed97 6a03 	vldr	s12, [r7, #12]
 8006496:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800649a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80064b2:	e087      	b.n	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800667c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f6:	e065      	b.n	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b59      	ldr	r3, [pc, #356]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800650c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a03 	vldr	s12, [r7, #12]
 800651e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800653a:	e043      	b.n	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b48      	ldr	r3, [pc, #288]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006562:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800657e:	e021      	b.n	80065c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b37      	ldr	r3, [pc, #220]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006678 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80065c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	0a5b      	lsrs	r3, r3, #9
 80065ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065de:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ea:	ee17 2a90 	vmov	r2, s15
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80065f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065fc:	ee07 3a90 	vmov	s15, r3
 8006600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006604:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006608:	ee37 7a87 	vadd.f32	s14, s15, s14
 800660c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006618:	ee17 2a90 	vmov	r2, s15
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006620:	4b13      	ldr	r3, [pc, #76]	@ (8006670 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	0e1b      	lsrs	r3, r3, #24
 8006626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800663a:	edd7 6a07 	vldr	s13, [r7, #28]
 800663e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006646:	ee17 2a90 	vmov	r2, s15
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800664e:	e008      	b.n	8006662 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	609a      	str	r2, [r3, #8]
}
 8006662:	bf00      	nop
 8006664:	3724      	adds	r7, #36	@ 0x24
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	46000000 	.word	0x46000000
 800667c:	4c742400 	.word	0x4c742400
 8006680:	4a742400 	.word	0x4a742400
 8006684:	4c371b00 	.word	0x4c371b00

08006688 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006690:	4ba1      	ldr	r3, [pc, #644]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006694:	f003 0303 	and.w	r3, r3, #3
 8006698:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800669a:	4b9f      	ldr	r3, [pc, #636]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	0d1b      	lsrs	r3, r3, #20
 80066a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80066a6:	4b9c      	ldr	r3, [pc, #624]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80066b2:	4b99      	ldr	r3, [pc, #612]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8111 	beq.w	80068f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	f000 8083 	beq.w	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	f200 80a1 	bhi.w	8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d056      	beq.n	80067a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80066f2:	e099      	b.n	8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066f4:	4b88      	ldr	r3, [pc, #544]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02d      	beq.n	800675c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006700:	4b85      	ldr	r3, [pc, #532]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	08db      	lsrs	r3, r3, #3
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	4a84      	ldr	r2, [pc, #528]	@ (800691c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800670c:	fa22 f303 	lsr.w	r3, r2, r3
 8006710:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800672a:	4b7b      	ldr	r3, [pc, #492]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673a:	ed97 6a03 	vldr	s12, [r7, #12]
 800673e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800674a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800674e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006756:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800675a:	e087      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006766:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006924 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800676a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676e:	4b6a      	ldr	r3, [pc, #424]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006782:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800678a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800679a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800679e:	e065      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067b2:	4b59      	ldr	r3, [pc, #356]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067e2:	e043      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800692c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80067f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f6:	4b48      	ldr	r3, [pc, #288]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006806:	ed97 6a03 	vldr	s12, [r7, #12]
 800680a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800680e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800681a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006826:	e021      	b.n	800686c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683a:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800684a:	ed97 6a03 	vldr	s12, [r7, #12]
 800684e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800685e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800686a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800686c:	4b2a      	ldr	r3, [pc, #168]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006870:	0a5b      	lsrs	r3, r3, #9
 8006872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006886:	edd7 6a07 	vldr	s13, [r7, #28]
 800688a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800688e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006892:	ee17 2a90 	vmov	r2, s15
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800689a:	4b1f      	ldr	r3, [pc, #124]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c0:	ee17 2a90 	vmov	r2, s15
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80068c8:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068cc:	0e1b      	lsrs	r3, r3, #24
 80068ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ee:	ee17 2a90 	vmov	r2, s15
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80068f6:	e008      	b.n	800690a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]
}
 800690a:	bf00      	nop
 800690c:	3724      	adds	r7, #36	@ 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	58024400 	.word	0x58024400
 800691c:	03d09000 	.word	0x03d09000
 8006920:	46000000 	.word	0x46000000
 8006924:	4c742400 	.word	0x4c742400
 8006928:	4a742400 	.word	0x4a742400
 800692c:	4c371b00 	.word	0x4c371b00

08006930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800693e:	4b53      	ldr	r3, [pc, #332]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b03      	cmp	r3, #3
 8006948:	d101      	bne.n	800694e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e099      	b.n	8006a82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800694e:	4b4f      	ldr	r3, [pc, #316]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a4e      	ldr	r2, [pc, #312]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006954:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695a:	f7fb fab7 	bl	8001ecc <HAL_GetTick>
 800695e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006960:	e008      	b.n	8006974 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006962:	f7fb fab3 	bl	8001ecc <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e086      	b.n	8006a82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006974:	4b45      	ldr	r3, [pc, #276]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f0      	bne.n	8006962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006980:	4b42      	ldr	r3, [pc, #264]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	031b      	lsls	r3, r3, #12
 800698e:	493f      	ldr	r1, [pc, #252]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006990:	4313      	orrs	r3, r2
 8006992:	628b      	str	r3, [r1, #40]	@ 0x28
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	3b01      	subs	r3, #1
 800699a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	025b      	lsls	r3, r3, #9
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	3b01      	subs	r3, #1
 80069be:	061b      	lsls	r3, r3, #24
 80069c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069c4:	4931      	ldr	r1, [pc, #196]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069ca:	4b30      	ldr	r3, [pc, #192]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	492d      	ldr	r1, [pc, #180]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069dc:	4b2b      	ldr	r3, [pc, #172]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	f023 0220 	bic.w	r2, r3, #32
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	4928      	ldr	r1, [pc, #160]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069ee:	4b27      	ldr	r3, [pc, #156]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	4a26      	ldr	r2, [pc, #152]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069f4:	f023 0310 	bic.w	r3, r3, #16
 80069f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069fa:	4b24      	ldr	r3, [pc, #144]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 80069fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069fe:	4b24      	ldr	r3, [pc, #144]	@ (8006a90 <RCCEx_PLL2_Config+0x160>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	69d2      	ldr	r2, [r2, #28]
 8006a06:	00d2      	lsls	r2, r2, #3
 8006a08:	4920      	ldr	r1, [pc, #128]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a12:	4a1e      	ldr	r2, [pc, #120]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a14:	f043 0310 	orr.w	r3, r3, #16
 8006a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a20:	4b1a      	ldr	r3, [pc, #104]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a24:	4a19      	ldr	r2, [pc, #100]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a2c:	e00f      	b.n	8006a4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d106      	bne.n	8006a42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a34:	4b15      	ldr	r3, [pc, #84]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	4a14      	ldr	r2, [pc, #80]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a40:	e005      	b.n	8006a4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a42:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	4a11      	ldr	r2, [pc, #68]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a0e      	ldr	r2, [pc, #56]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a5a:	f7fb fa37 	bl	8001ecc <HAL_GetTick>
 8006a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a60:	e008      	b.n	8006a74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a62:	f7fb fa33 	bl	8001ecc <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e006      	b.n	8006a82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a74:	4b05      	ldr	r3, [pc, #20]	@ (8006a8c <RCCEx_PLL2_Config+0x15c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0f0      	beq.n	8006a62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	ffff0007 	.word	0xffff0007

08006a94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aa2:	4b53      	ldr	r3, [pc, #332]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d101      	bne.n	8006ab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e099      	b.n	8006be6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006abe:	f7fb fa05 	bl	8001ecc <HAL_GetTick>
 8006ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ac4:	e008      	b.n	8006ad8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ac6:	f7fb fa01 	bl	8001ecc <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e086      	b.n	8006be6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ad8:	4b45      	ldr	r3, [pc, #276]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f0      	bne.n	8006ac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ae4:	4b42      	ldr	r3, [pc, #264]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	051b      	lsls	r3, r3, #20
 8006af2:	493f      	ldr	r1, [pc, #252]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	025b      	lsls	r3, r3, #9
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	041b      	lsls	r3, r3, #16
 8006b16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	061b      	lsls	r3, r3, #24
 8006b24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b28:	4931      	ldr	r1, [pc, #196]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b2e:	4b30      	ldr	r3, [pc, #192]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	492d      	ldr	r1, [pc, #180]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b40:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b44:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	4928      	ldr	r1, [pc, #160]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b52:	4b27      	ldr	r3, [pc, #156]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	4a26      	ldr	r2, [pc, #152]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b5e:	4b24      	ldr	r3, [pc, #144]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b62:	4b24      	ldr	r3, [pc, #144]	@ (8006bf4 <RCCEx_PLL3_Config+0x160>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	69d2      	ldr	r2, [r2, #28]
 8006b6a:	00d2      	lsls	r2, r2, #3
 8006b6c:	4920      	ldr	r1, [pc, #128]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b72:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b84:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b88:	4a19      	ldr	r2, [pc, #100]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006b90:	e00f      	b.n	8006bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d106      	bne.n	8006ba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b98:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	4a14      	ldr	r2, [pc, #80]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006b9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ba4:	e005      	b.n	8006bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ba6:	4b12      	ldr	r3, [pc, #72]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006baa:	4a11      	ldr	r2, [pc, #68]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006bac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bbe:	f7fb f985 	bl	8001ecc <HAL_GetTick>
 8006bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bc4:	e008      	b.n	8006bd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bc6:	f7fb f981 	bl	8001ecc <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e006      	b.n	8006be6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bd8:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <RCCEx_PLL3_Config+0x15c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	58024400 	.word	0x58024400
 8006bf4:	ffff0007 	.word	0xffff0007

08006bf8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e10f      	b.n	8006e2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a87      	ldr	r2, [pc, #540]	@ (8006e34 <HAL_SPI_Init+0x23c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00f      	beq.n	8006c3a <HAL_SPI_Init+0x42>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a86      	ldr	r2, [pc, #536]	@ (8006e38 <HAL_SPI_Init+0x240>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00a      	beq.n	8006c3a <HAL_SPI_Init+0x42>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a84      	ldr	r2, [pc, #528]	@ (8006e3c <HAL_SPI_Init+0x244>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d005      	beq.n	8006c3a <HAL_SPI_Init+0x42>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	2b0f      	cmp	r3, #15
 8006c34:	d901      	bls.n	8006c3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e0f7      	b.n	8006e2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f900 	bl	8006e40 <SPI_GetPacketSize>
 8006c40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a7b      	ldr	r2, [pc, #492]	@ (8006e34 <HAL_SPI_Init+0x23c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00c      	beq.n	8006c66 <HAL_SPI_Init+0x6e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a79      	ldr	r2, [pc, #484]	@ (8006e38 <HAL_SPI_Init+0x240>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d007      	beq.n	8006c66 <HAL_SPI_Init+0x6e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a78      	ldr	r2, [pc, #480]	@ (8006e3c <HAL_SPI_Init+0x244>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d002      	beq.n	8006c66 <HAL_SPI_Init+0x6e>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d811      	bhi.n	8006c8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c6a:	4a72      	ldr	r2, [pc, #456]	@ (8006e34 <HAL_SPI_Init+0x23c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a70      	ldr	r2, [pc, #448]	@ (8006e38 <HAL_SPI_Init+0x240>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <HAL_SPI_Init+0x8c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6f      	ldr	r2, [pc, #444]	@ (8006e3c <HAL_SPI_Init+0x244>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d104      	bne.n	8006c8e <HAL_SPI_Init+0x96>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d901      	bls.n	8006c8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e0cd      	b.n	8006e2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fa fae0 	bl	8001268 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0201 	bic.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006cca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cd4:	d119      	bne.n	8006d0a <HAL_SPI_Init+0x112>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cde:	d103      	bne.n	8006ce8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10c      	bne.n	8006d0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cf8:	d107      	bne.n	8006d0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <HAL_SPI_Init+0x13e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b06      	cmp	r3, #6
 8006d1c:	d90b      	bls.n	8006d36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e007      	b.n	8006d46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d58:	ea42 0103 	orr.w	r1, r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da6:	ea42 0103 	orr.w	r1, r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d113      	bne.n	8006de6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006de4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40013000 	.word	0x40013000
 8006e38:	40003800 	.word	0x40003800
 8006e3c:	40003c00 	.word	0x40003c00

08006e40 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	08db      	lsrs	r3, r3, #3
 8006e60:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e049      	b.n	8006f1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f841 	bl	8006f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 f9f5 	bl	80072a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d001      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e05e      	b.n	800700e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800701c <HAL_TIM_Base_Start_IT+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02c      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7a:	d027      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a27      	ldr	r2, [pc, #156]	@ (8007020 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a26      	ldr	r2, [pc, #152]	@ (8007024 <HAL_TIM_Base_Start_IT+0xec>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d01d      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a24      	ldr	r2, [pc, #144]	@ (8007028 <HAL_TIM_Base_Start_IT+0xf0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d018      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a23      	ldr	r2, [pc, #140]	@ (800702c <HAL_TIM_Base_Start_IT+0xf4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a21      	ldr	r2, [pc, #132]	@ (8007030 <HAL_TIM_Base_Start_IT+0xf8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a20      	ldr	r2, [pc, #128]	@ (8007034 <HAL_TIM_Base_Start_IT+0xfc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <HAL_TIM_Base_Start_IT+0x100>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <HAL_TIM_Base_Start_IT+0x94>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <HAL_TIM_Base_Start_IT+0x104>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d115      	bne.n	8006ff8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007040 <HAL_TIM_Base_Start_IT+0x108>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b06      	cmp	r3, #6
 8006fdc:	d015      	beq.n	800700a <HAL_TIM_Base_Start_IT+0xd2>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe4:	d011      	beq.n	800700a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	e008      	b.n	800700a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0201 	orr.w	r2, r2, #1
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	e000      	b.n	800700c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40010000 	.word	0x40010000
 8007020:	40000400 	.word	0x40000400
 8007024:	40000800 	.word	0x40000800
 8007028:	40000c00 	.word	0x40000c00
 800702c:	40010400 	.word	0x40010400
 8007030:	40001800 	.word	0x40001800
 8007034:	40014000 	.word	0x40014000
 8007038:	4000e000 	.word	0x4000e000
 800703c:	4000e400 	.word	0x4000e400
 8007040:	00010007 	.word	0x00010007

08007044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d020      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01b      	beq.n	80070a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f06f 0202 	mvn.w	r2, #2
 8007078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f8e9 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8007094:	e005      	b.n	80070a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8db 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8ec 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 0304 	and.w	r3, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d020      	beq.n	80070f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01b      	beq.n	80070f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f06f 0204 	mvn.w	r2, #4
 80070c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8c3 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 80070e0:	e005      	b.n	80070ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8b5 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8c6 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0308 	and.w	r3, r3, #8
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d020      	beq.n	8007140 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01b      	beq.n	8007140 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0208 	mvn.w	r2, #8
 8007110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2204      	movs	r2, #4
 8007116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f89d 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 800712c:	e005      	b.n	800713a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f88f 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8a0 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	2b00      	cmp	r3, #0
 8007148:	d020      	beq.n	800718c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01b      	beq.n	800718c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0210 	mvn.w	r2, #16
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2208      	movs	r2, #8
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f877 	bl	8007266 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f869 	bl	8007252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f87a 	bl	800727a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0201 	mvn.w	r2, #1
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7f9 ff4a 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f91f 	bl	800741c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00c      	beq.n	8007202 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80071fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f917 	bl	8007430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800721e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f834 	bl	800728e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00c      	beq.n	800724a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d007      	beq.n	800724a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f06f 0220 	mvn.w	r2, #32
 8007242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f8df 	bl	8007408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a4a      	ldr	r2, [pc, #296]	@ (80073e0 <TIM_Base_SetConfig+0x13c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c2:	d00f      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a47      	ldr	r2, [pc, #284]	@ (80073e4 <TIM_Base_SetConfig+0x140>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00b      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a46      	ldr	r2, [pc, #280]	@ (80073e8 <TIM_Base_SetConfig+0x144>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a45      	ldr	r2, [pc, #276]	@ (80073ec <TIM_Base_SetConfig+0x148>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_Base_SetConfig+0x40>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a44      	ldr	r2, [pc, #272]	@ (80073f0 <TIM_Base_SetConfig+0x14c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d108      	bne.n	80072f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a39      	ldr	r2, [pc, #228]	@ (80073e0 <TIM_Base_SetConfig+0x13c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d027      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007304:	d023      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a36      	ldr	r2, [pc, #216]	@ (80073e4 <TIM_Base_SetConfig+0x140>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d01f      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a35      	ldr	r2, [pc, #212]	@ (80073e8 <TIM_Base_SetConfig+0x144>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01b      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a34      	ldr	r2, [pc, #208]	@ (80073ec <TIM_Base_SetConfig+0x148>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d017      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a33      	ldr	r2, [pc, #204]	@ (80073f0 <TIM_Base_SetConfig+0x14c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d013      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a32      	ldr	r2, [pc, #200]	@ (80073f4 <TIM_Base_SetConfig+0x150>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00f      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a31      	ldr	r2, [pc, #196]	@ (80073f8 <TIM_Base_SetConfig+0x154>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00b      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a30      	ldr	r2, [pc, #192]	@ (80073fc <TIM_Base_SetConfig+0x158>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2f      	ldr	r2, [pc, #188]	@ (8007400 <TIM_Base_SetConfig+0x15c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_Base_SetConfig+0xaa>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2e      	ldr	r2, [pc, #184]	@ (8007404 <TIM_Base_SetConfig+0x160>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d108      	bne.n	8007360 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4313      	orrs	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a16      	ldr	r2, [pc, #88]	@ (80073e0 <TIM_Base_SetConfig+0x13c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00f      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a18      	ldr	r2, [pc, #96]	@ (80073f0 <TIM_Base_SetConfig+0x14c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00b      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a17      	ldr	r2, [pc, #92]	@ (80073f4 <TIM_Base_SetConfig+0x150>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d007      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a16      	ldr	r2, [pc, #88]	@ (80073f8 <TIM_Base_SetConfig+0x154>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_Base_SetConfig+0x108>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <TIM_Base_SetConfig+0x158>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d103      	bne.n	80073b4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d105      	bne.n	80073d2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]
  }
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40010400 	.word	0x40010400
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800
 8007400:	4000e000 	.word	0x4000e000
 8007404:	4000e400 	.word	0x4000e400

08007408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e042      	b.n	80074dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fa f95f 	bl	800172c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2224      	movs	r2, #36	@ 0x24
 8007472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fe94 	bl	80081bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f825 	bl	80074e4 <UART_SetConfig>
 800749a:	4603      	mov	r3, r0
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e01b      	b.n	80074dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 ff13 	bl	8008300 <UART_CheckIdleState>
 80074da:	4603      	mov	r3, r0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e8:	b092      	sub	sp, #72	@ 0x48
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	431a      	orrs	r2, r3
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4313      	orrs	r3, r2
 800750a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4bbe      	ldr	r3, [pc, #760]	@ (800780c <UART_SetConfig+0x328>)
 8007514:	4013      	ands	r3, r2
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800751c:	430b      	orrs	r3, r1
 800751e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4ab3      	ldr	r2, [pc, #716]	@ (8007810 <UART_SetConfig+0x32c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800754c:	4313      	orrs	r3, r2
 800754e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	4baf      	ldr	r3, [pc, #700]	@ (8007814 <UART_SetConfig+0x330>)
 8007558:	4013      	ands	r3, r2
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007560:	430b      	orrs	r3, r1
 8007562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	f023 010f 	bic.w	r1, r3, #15
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4aa6      	ldr	r2, [pc, #664]	@ (8007818 <UART_SetConfig+0x334>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d177      	bne.n	8007674 <UART_SetConfig+0x190>
 8007584:	4ba5      	ldr	r3, [pc, #660]	@ (800781c <UART_SetConfig+0x338>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800758c:	2b28      	cmp	r3, #40	@ 0x28
 800758e:	d86d      	bhi.n	800766c <UART_SetConfig+0x188>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <UART_SetConfig+0xb4>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	0800763d 	.word	0x0800763d
 800759c:	0800766d 	.word	0x0800766d
 80075a0:	0800766d 	.word	0x0800766d
 80075a4:	0800766d 	.word	0x0800766d
 80075a8:	0800766d 	.word	0x0800766d
 80075ac:	0800766d 	.word	0x0800766d
 80075b0:	0800766d 	.word	0x0800766d
 80075b4:	0800766d 	.word	0x0800766d
 80075b8:	08007645 	.word	0x08007645
 80075bc:	0800766d 	.word	0x0800766d
 80075c0:	0800766d 	.word	0x0800766d
 80075c4:	0800766d 	.word	0x0800766d
 80075c8:	0800766d 	.word	0x0800766d
 80075cc:	0800766d 	.word	0x0800766d
 80075d0:	0800766d 	.word	0x0800766d
 80075d4:	0800766d 	.word	0x0800766d
 80075d8:	0800764d 	.word	0x0800764d
 80075dc:	0800766d 	.word	0x0800766d
 80075e0:	0800766d 	.word	0x0800766d
 80075e4:	0800766d 	.word	0x0800766d
 80075e8:	0800766d 	.word	0x0800766d
 80075ec:	0800766d 	.word	0x0800766d
 80075f0:	0800766d 	.word	0x0800766d
 80075f4:	0800766d 	.word	0x0800766d
 80075f8:	08007655 	.word	0x08007655
 80075fc:	0800766d 	.word	0x0800766d
 8007600:	0800766d 	.word	0x0800766d
 8007604:	0800766d 	.word	0x0800766d
 8007608:	0800766d 	.word	0x0800766d
 800760c:	0800766d 	.word	0x0800766d
 8007610:	0800766d 	.word	0x0800766d
 8007614:	0800766d 	.word	0x0800766d
 8007618:	0800765d 	.word	0x0800765d
 800761c:	0800766d 	.word	0x0800766d
 8007620:	0800766d 	.word	0x0800766d
 8007624:	0800766d 	.word	0x0800766d
 8007628:	0800766d 	.word	0x0800766d
 800762c:	0800766d 	.word	0x0800766d
 8007630:	0800766d 	.word	0x0800766d
 8007634:	0800766d 	.word	0x0800766d
 8007638:	08007665 	.word	0x08007665
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e326      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007644:	2304      	movs	r3, #4
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e322      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800764c:	2308      	movs	r3, #8
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e31e      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e31a      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800765c:	2320      	movs	r3, #32
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e316      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007664:	2340      	movs	r3, #64	@ 0x40
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e312      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800766c:	2380      	movs	r3, #128	@ 0x80
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e30e      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a69      	ldr	r2, [pc, #420]	@ (8007820 <UART_SetConfig+0x33c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d130      	bne.n	80076e0 <UART_SetConfig+0x1fc>
 800767e:	4b67      	ldr	r3, [pc, #412]	@ (800781c <UART_SetConfig+0x338>)
 8007680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b05      	cmp	r3, #5
 8007688:	d826      	bhi.n	80076d8 <UART_SetConfig+0x1f4>
 800768a:	a201      	add	r2, pc, #4	@ (adr r2, 8007690 <UART_SetConfig+0x1ac>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	080076a9 	.word	0x080076a9
 8007694:	080076b1 	.word	0x080076b1
 8007698:	080076b9 	.word	0x080076b9
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076d1 	.word	0x080076d1
 80076a8:	2300      	movs	r3, #0
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e2f0      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076b0:	2304      	movs	r3, #4
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e2ec      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076b8:	2308      	movs	r3, #8
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e2e8      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076c0:	2310      	movs	r3, #16
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e2e4      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076c8:	2320      	movs	r3, #32
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e2e0      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076d0:	2340      	movs	r3, #64	@ 0x40
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e2dc      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076d8:	2380      	movs	r3, #128	@ 0x80
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e2d8      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a4f      	ldr	r2, [pc, #316]	@ (8007824 <UART_SetConfig+0x340>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d130      	bne.n	800774c <UART_SetConfig+0x268>
 80076ea:	4b4c      	ldr	r3, [pc, #304]	@ (800781c <UART_SetConfig+0x338>)
 80076ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d826      	bhi.n	8007744 <UART_SetConfig+0x260>
 80076f6:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <UART_SetConfig+0x218>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007715 	.word	0x08007715
 8007700:	0800771d 	.word	0x0800771d
 8007704:	08007725 	.word	0x08007725
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007735 	.word	0x08007735
 8007710:	0800773d 	.word	0x0800773d
 8007714:	2300      	movs	r3, #0
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e2ba      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800771c:	2304      	movs	r3, #4
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e2b6      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007724:	2308      	movs	r3, #8
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e2b2      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800772c:	2310      	movs	r3, #16
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007732:	e2ae      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007734:	2320      	movs	r3, #32
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e2aa      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800773c:	2340      	movs	r3, #64	@ 0x40
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e2a6      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007744:	2380      	movs	r3, #128	@ 0x80
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e2a2      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a35      	ldr	r2, [pc, #212]	@ (8007828 <UART_SetConfig+0x344>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d130      	bne.n	80077b8 <UART_SetConfig+0x2d4>
 8007756:	4b31      	ldr	r3, [pc, #196]	@ (800781c <UART_SetConfig+0x338>)
 8007758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	2b05      	cmp	r3, #5
 8007760:	d826      	bhi.n	80077b0 <UART_SetConfig+0x2cc>
 8007762:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <UART_SetConfig+0x284>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007781 	.word	0x08007781
 800776c:	08007789 	.word	0x08007789
 8007770:	08007791 	.word	0x08007791
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	2300      	movs	r3, #0
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007786:	e284      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007788:	2304      	movs	r3, #4
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778e:	e280      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007790:	2308      	movs	r3, #8
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007796:	e27c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007798:	2310      	movs	r3, #16
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779e:	e278      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80077a0:	2320      	movs	r3, #32
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a6:	e274      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80077a8:	2340      	movs	r3, #64	@ 0x40
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e270      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80077b0:	2380      	movs	r3, #128	@ 0x80
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e26c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1b      	ldr	r2, [pc, #108]	@ (800782c <UART_SetConfig+0x348>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d142      	bne.n	8007848 <UART_SetConfig+0x364>
 80077c2:	4b16      	ldr	r3, [pc, #88]	@ (800781c <UART_SetConfig+0x338>)
 80077c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b05      	cmp	r3, #5
 80077cc:	d838      	bhi.n	8007840 <UART_SetConfig+0x35c>
 80077ce:	a201      	add	r2, pc, #4	@ (adr r2, 80077d4 <UART_SetConfig+0x2f0>)
 80077d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d4:	080077ed 	.word	0x080077ed
 80077d8:	080077f5 	.word	0x080077f5
 80077dc:	080077fd 	.word	0x080077fd
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007831 	.word	0x08007831
 80077e8:	08007839 	.word	0x08007839
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e24e      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e24a      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80077fc:	2308      	movs	r3, #8
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e246      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007804:	2310      	movs	r3, #16
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780a:	e242      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800780c:	cfff69f3 	.word	0xcfff69f3
 8007810:	58000c00 	.word	0x58000c00
 8007814:	11fff4ff 	.word	0x11fff4ff
 8007818:	40011000 	.word	0x40011000
 800781c:	58024400 	.word	0x58024400
 8007820:	40004400 	.word	0x40004400
 8007824:	40004800 	.word	0x40004800
 8007828:	40004c00 	.word	0x40004c00
 800782c:	40005000 	.word	0x40005000
 8007830:	2320      	movs	r3, #32
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e22c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007838:	2340      	movs	r3, #64	@ 0x40
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e228      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e224      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4ab1      	ldr	r2, [pc, #708]	@ (8007b14 <UART_SetConfig+0x630>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d176      	bne.n	8007940 <UART_SetConfig+0x45c>
 8007852:	4bb1      	ldr	r3, [pc, #708]	@ (8007b18 <UART_SetConfig+0x634>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800785a:	2b28      	cmp	r3, #40	@ 0x28
 800785c:	d86c      	bhi.n	8007938 <UART_SetConfig+0x454>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <UART_SetConfig+0x380>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007909 	.word	0x08007909
 8007868:	08007939 	.word	0x08007939
 800786c:	08007939 	.word	0x08007939
 8007870:	08007939 	.word	0x08007939
 8007874:	08007939 	.word	0x08007939
 8007878:	08007939 	.word	0x08007939
 800787c:	08007939 	.word	0x08007939
 8007880:	08007939 	.word	0x08007939
 8007884:	08007911 	.word	0x08007911
 8007888:	08007939 	.word	0x08007939
 800788c:	08007939 	.word	0x08007939
 8007890:	08007939 	.word	0x08007939
 8007894:	08007939 	.word	0x08007939
 8007898:	08007939 	.word	0x08007939
 800789c:	08007939 	.word	0x08007939
 80078a0:	08007939 	.word	0x08007939
 80078a4:	08007919 	.word	0x08007919
 80078a8:	08007939 	.word	0x08007939
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007939 	.word	0x08007939
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007939 	.word	0x08007939
 80078bc:	08007939 	.word	0x08007939
 80078c0:	08007939 	.word	0x08007939
 80078c4:	08007921 	.word	0x08007921
 80078c8:	08007939 	.word	0x08007939
 80078cc:	08007939 	.word	0x08007939
 80078d0:	08007939 	.word	0x08007939
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007939 	.word	0x08007939
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007939 	.word	0x08007939
 80078f0:	08007939 	.word	0x08007939
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
 8007904:	08007931 	.word	0x08007931
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e1c0      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007910:	2304      	movs	r3, #4
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e1bc      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007918:	2308      	movs	r3, #8
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e1b8      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007920:	2310      	movs	r3, #16
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e1b4      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007928:	2320      	movs	r3, #32
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e1b0      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007930:	2340      	movs	r3, #64	@ 0x40
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e1ac      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007938:	2380      	movs	r3, #128	@ 0x80
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e1a8      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a75      	ldr	r2, [pc, #468]	@ (8007b1c <UART_SetConfig+0x638>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d130      	bne.n	80079ac <UART_SetConfig+0x4c8>
 800794a:	4b73      	ldr	r3, [pc, #460]	@ (8007b18 <UART_SetConfig+0x634>)
 800794c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b05      	cmp	r3, #5
 8007954:	d826      	bhi.n	80079a4 <UART_SetConfig+0x4c0>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x478>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007975 	.word	0x08007975
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007985 	.word	0x08007985
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007995 	.word	0x08007995
 8007970:	0800799d 	.word	0x0800799d
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e18a      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800797c:	2304      	movs	r3, #4
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e186      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007984:	2308      	movs	r3, #8
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e182      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e17e      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e17a      	b.n	8007c92 <UART_SetConfig+0x7ae>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e176      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e172      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a5b      	ldr	r2, [pc, #364]	@ (8007b20 <UART_SetConfig+0x63c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d130      	bne.n	8007a18 <UART_SetConfig+0x534>
 80079b6:	4b58      	ldr	r3, [pc, #352]	@ (8007b18 <UART_SetConfig+0x634>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d826      	bhi.n	8007a10 <UART_SetConfig+0x52c>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x4e4>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e154      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e150      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e14c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e148      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007a00:	2320      	movs	r3, #32
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e144      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007a08:	2340      	movs	r3, #64	@ 0x40
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e140      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007a10:	2380      	movs	r3, #128	@ 0x80
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e13c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a41      	ldr	r2, [pc, #260]	@ (8007b24 <UART_SetConfig+0x640>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	f040 8082 	bne.w	8007b28 <UART_SetConfig+0x644>
 8007a24:	4b3c      	ldr	r3, [pc, #240]	@ (8007b18 <UART_SetConfig+0x634>)
 8007a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a2c:	2b28      	cmp	r3, #40	@ 0x28
 8007a2e:	d86d      	bhi.n	8007b0c <UART_SetConfig+0x628>
 8007a30:	a201      	add	r2, pc, #4	@ (adr r2, 8007a38 <UART_SetConfig+0x554>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007add 	.word	0x08007add
 8007a3c:	08007b0d 	.word	0x08007b0d
 8007a40:	08007b0d 	.word	0x08007b0d
 8007a44:	08007b0d 	.word	0x08007b0d
 8007a48:	08007b0d 	.word	0x08007b0d
 8007a4c:	08007b0d 	.word	0x08007b0d
 8007a50:	08007b0d 	.word	0x08007b0d
 8007a54:	08007b0d 	.word	0x08007b0d
 8007a58:	08007ae5 	.word	0x08007ae5
 8007a5c:	08007b0d 	.word	0x08007b0d
 8007a60:	08007b0d 	.word	0x08007b0d
 8007a64:	08007b0d 	.word	0x08007b0d
 8007a68:	08007b0d 	.word	0x08007b0d
 8007a6c:	08007b0d 	.word	0x08007b0d
 8007a70:	08007b0d 	.word	0x08007b0d
 8007a74:	08007b0d 	.word	0x08007b0d
 8007a78:	08007aed 	.word	0x08007aed
 8007a7c:	08007b0d 	.word	0x08007b0d
 8007a80:	08007b0d 	.word	0x08007b0d
 8007a84:	08007b0d 	.word	0x08007b0d
 8007a88:	08007b0d 	.word	0x08007b0d
 8007a8c:	08007b0d 	.word	0x08007b0d
 8007a90:	08007b0d 	.word	0x08007b0d
 8007a94:	08007b0d 	.word	0x08007b0d
 8007a98:	08007af5 	.word	0x08007af5
 8007a9c:	08007b0d 	.word	0x08007b0d
 8007aa0:	08007b0d 	.word	0x08007b0d
 8007aa4:	08007b0d 	.word	0x08007b0d
 8007aa8:	08007b0d 	.word	0x08007b0d
 8007aac:	08007b0d 	.word	0x08007b0d
 8007ab0:	08007b0d 	.word	0x08007b0d
 8007ab4:	08007b0d 	.word	0x08007b0d
 8007ab8:	08007afd 	.word	0x08007afd
 8007abc:	08007b0d 	.word	0x08007b0d
 8007ac0:	08007b0d 	.word	0x08007b0d
 8007ac4:	08007b0d 	.word	0x08007b0d
 8007ac8:	08007b0d 	.word	0x08007b0d
 8007acc:	08007b0d 	.word	0x08007b0d
 8007ad0:	08007b0d 	.word	0x08007b0d
 8007ad4:	08007b0d 	.word	0x08007b0d
 8007ad8:	08007b05 	.word	0x08007b05
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e0d6      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e0d2      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e0ce      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e0ca      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007afc:	2320      	movs	r3, #32
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e0c6      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007b04:	2340      	movs	r3, #64	@ 0x40
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e0c2      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007b0c:	2380      	movs	r3, #128	@ 0x80
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e0be      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007b14:	40011400 	.word	0x40011400
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	40007800 	.word	0x40007800
 8007b20:	40007c00 	.word	0x40007c00
 8007b24:	40011800 	.word	0x40011800
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4aad      	ldr	r2, [pc, #692]	@ (8007de4 <UART_SetConfig+0x900>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d176      	bne.n	8007c20 <UART_SetConfig+0x73c>
 8007b32:	4bad      	ldr	r3, [pc, #692]	@ (8007de8 <UART_SetConfig+0x904>)
 8007b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b3a:	2b28      	cmp	r3, #40	@ 0x28
 8007b3c:	d86c      	bhi.n	8007c18 <UART_SetConfig+0x734>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <UART_SetConfig+0x660>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007be9 	.word	0x08007be9
 8007b48:	08007c19 	.word	0x08007c19
 8007b4c:	08007c19 	.word	0x08007c19
 8007b50:	08007c19 	.word	0x08007c19
 8007b54:	08007c19 	.word	0x08007c19
 8007b58:	08007c19 	.word	0x08007c19
 8007b5c:	08007c19 	.word	0x08007c19
 8007b60:	08007c19 	.word	0x08007c19
 8007b64:	08007bf1 	.word	0x08007bf1
 8007b68:	08007c19 	.word	0x08007c19
 8007b6c:	08007c19 	.word	0x08007c19
 8007b70:	08007c19 	.word	0x08007c19
 8007b74:	08007c19 	.word	0x08007c19
 8007b78:	08007c19 	.word	0x08007c19
 8007b7c:	08007c19 	.word	0x08007c19
 8007b80:	08007c19 	.word	0x08007c19
 8007b84:	08007bf9 	.word	0x08007bf9
 8007b88:	08007c19 	.word	0x08007c19
 8007b8c:	08007c19 	.word	0x08007c19
 8007b90:	08007c19 	.word	0x08007c19
 8007b94:	08007c19 	.word	0x08007c19
 8007b98:	08007c19 	.word	0x08007c19
 8007b9c:	08007c19 	.word	0x08007c19
 8007ba0:	08007c19 	.word	0x08007c19
 8007ba4:	08007c01 	.word	0x08007c01
 8007ba8:	08007c19 	.word	0x08007c19
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007c19 	.word	0x08007c19
 8007bb4:	08007c19 	.word	0x08007c19
 8007bb8:	08007c19 	.word	0x08007c19
 8007bbc:	08007c19 	.word	0x08007c19
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c09 	.word	0x08007c09
 8007bc8:	08007c19 	.word	0x08007c19
 8007bcc:	08007c19 	.word	0x08007c19
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c19 	.word	0x08007c19
 8007bd8:	08007c19 	.word	0x08007c19
 8007bdc:	08007c19 	.word	0x08007c19
 8007be0:	08007c19 	.word	0x08007c19
 8007be4:	08007c11 	.word	0x08007c11
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bee:	e050      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf6:	e04c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	e048      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c06:	e044      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c08:	2320      	movs	r3, #32
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0e:	e040      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c10:	2340      	movs	r3, #64	@ 0x40
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c16:	e03c      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c18:	2380      	movs	r3, #128	@ 0x80
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1e:	e038      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a71      	ldr	r2, [pc, #452]	@ (8007dec <UART_SetConfig+0x908>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d130      	bne.n	8007c8c <UART_SetConfig+0x7a8>
 8007c2a:	4b6f      	ldr	r3, [pc, #444]	@ (8007de8 <UART_SetConfig+0x904>)
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d826      	bhi.n	8007c84 <UART_SetConfig+0x7a0>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <UART_SetConfig+0x758>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c55 	.word	0x08007c55
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	08007c65 	.word	0x08007c65
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c75 	.word	0x08007c75
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5a:	e01a      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c62:	e016      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6a:	e012      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c72:	e00e      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c74:	2320      	movs	r3, #32
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e00a      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c7c:	2340      	movs	r3, #64	@ 0x40
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c82:	e006      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e002      	b.n	8007c92 <UART_SetConfig+0x7ae>
 8007c8c:	2380      	movs	r3, #128	@ 0x80
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a55      	ldr	r2, [pc, #340]	@ (8007dec <UART_SetConfig+0x908>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	f040 80f8 	bne.w	8007e8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	dc46      	bgt.n	8007d34 <UART_SetConfig+0x850>
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	db75      	blt.n	8007d96 <UART_SetConfig+0x8b2>
 8007caa:	3b02      	subs	r3, #2
 8007cac:	2b1e      	cmp	r3, #30
 8007cae:	d872      	bhi.n	8007d96 <UART_SetConfig+0x8b2>
 8007cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <UART_SetConfig+0x7d4>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007d3b 	.word	0x08007d3b
 8007cbc:	08007d97 	.word	0x08007d97
 8007cc0:	08007d43 	.word	0x08007d43
 8007cc4:	08007d97 	.word	0x08007d97
 8007cc8:	08007d97 	.word	0x08007d97
 8007ccc:	08007d97 	.word	0x08007d97
 8007cd0:	08007d53 	.word	0x08007d53
 8007cd4:	08007d97 	.word	0x08007d97
 8007cd8:	08007d97 	.word	0x08007d97
 8007cdc:	08007d97 	.word	0x08007d97
 8007ce0:	08007d97 	.word	0x08007d97
 8007ce4:	08007d97 	.word	0x08007d97
 8007ce8:	08007d97 	.word	0x08007d97
 8007cec:	08007d97 	.word	0x08007d97
 8007cf0:	08007d63 	.word	0x08007d63
 8007cf4:	08007d97 	.word	0x08007d97
 8007cf8:	08007d97 	.word	0x08007d97
 8007cfc:	08007d97 	.word	0x08007d97
 8007d00:	08007d97 	.word	0x08007d97
 8007d04:	08007d97 	.word	0x08007d97
 8007d08:	08007d97 	.word	0x08007d97
 8007d0c:	08007d97 	.word	0x08007d97
 8007d10:	08007d97 	.word	0x08007d97
 8007d14:	08007d97 	.word	0x08007d97
 8007d18:	08007d97 	.word	0x08007d97
 8007d1c:	08007d97 	.word	0x08007d97
 8007d20:	08007d97 	.word	0x08007d97
 8007d24:	08007d97 	.word	0x08007d97
 8007d28:	08007d97 	.word	0x08007d97
 8007d2c:	08007d97 	.word	0x08007d97
 8007d30:	08007d89 	.word	0x08007d89
 8007d34:	2b40      	cmp	r3, #64	@ 0x40
 8007d36:	d02a      	beq.n	8007d8e <UART_SetConfig+0x8aa>
 8007d38:	e02d      	b.n	8007d96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007d3a:	f7fe fb3b 	bl	80063b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007d40:	e02f      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fb4a 	bl	80063e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d50:	e027      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fc96 	bl	8006688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d60:	e01f      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d62:	4b21      	ldr	r3, [pc, #132]	@ (8007de8 <UART_SetConfig+0x904>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007de8 <UART_SetConfig+0x904>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	08db      	lsrs	r3, r3, #3
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	4a1d      	ldr	r2, [pc, #116]	@ (8007df0 <UART_SetConfig+0x90c>)
 8007d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d80:	e00f      	b.n	8007da2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007d82:	4b1b      	ldr	r3, [pc, #108]	@ (8007df0 <UART_SetConfig+0x90c>)
 8007d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d86:	e00c      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d88:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <UART_SetConfig+0x910>)
 8007d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d8c:	e009      	b.n	8007da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d94:	e005      	b.n	8007da2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007da0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 81ee 	beq.w	8008186 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dae:	4a12      	ldr	r2, [pc, #72]	@ (8007df8 <UART_SetConfig+0x914>)
 8007db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dbc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	4413      	add	r3, r2
 8007dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d305      	bcc.n	8007dda <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d910      	bls.n	8007dfc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007de0:	e1d1      	b.n	8008186 <UART_SetConfig+0xca2>
 8007de2:	bf00      	nop
 8007de4:	40011c00 	.word	0x40011c00
 8007de8:	58024400 	.word	0x58024400
 8007dec:	58000c00 	.word	0x58000c00
 8007df0:	03d09000 	.word	0x03d09000
 8007df4:	003d0900 	.word	0x003d0900
 8007df8:	0801c66c 	.word	0x0801c66c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dfe:	2200      	movs	r2, #0
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	60fa      	str	r2, [r7, #12]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	4ac0      	ldr	r2, [pc, #768]	@ (800810c <UART_SetConfig+0xc28>)
 8007e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2200      	movs	r2, #0
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e1e:	f7f8 fac7 	bl	80003b0 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	020b      	lsls	r3, r1, #8
 8007e34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e38:	0202      	lsls	r2, r0, #8
 8007e3a:	6979      	ldr	r1, [r7, #20]
 8007e3c:	6849      	ldr	r1, [r1, #4]
 8007e3e:	0849      	lsrs	r1, r1, #1
 8007e40:	2000      	movs	r0, #0
 8007e42:	460c      	mov	r4, r1
 8007e44:	4605      	mov	r5, r0
 8007e46:	eb12 0804 	adds.w	r8, r2, r4
 8007e4a:	eb43 0905 	adc.w	r9, r3, r5
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	469a      	mov	sl, r3
 8007e56:	4693      	mov	fp, r2
 8007e58:	4652      	mov	r2, sl
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	4649      	mov	r1, r9
 8007e60:	f7f8 faa6 	bl	80003b0 <__aeabi_uldivmod>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4613      	mov	r3, r2
 8007e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e72:	d308      	bcc.n	8007e86 <UART_SetConfig+0x9a2>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e7a:	d204      	bcs.n	8007e86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e82:	60da      	str	r2, [r3, #12]
 8007e84:	e17f      	b.n	8008186 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e8c:	e17b      	b.n	8008186 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e96:	f040 80bd 	bne.w	8008014 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	2b20      	cmp	r3, #32
 8007ea0:	dc48      	bgt.n	8007f34 <UART_SetConfig+0xa50>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	db7b      	blt.n	8007f9e <UART_SetConfig+0xaba>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d879      	bhi.n	8007f9e <UART_SetConfig+0xaba>
 8007eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <UART_SetConfig+0x9cc>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f3b 	.word	0x08007f3b
 8007eb4:	08007f43 	.word	0x08007f43
 8007eb8:	08007f9f 	.word	0x08007f9f
 8007ebc:	08007f9f 	.word	0x08007f9f
 8007ec0:	08007f4b 	.word	0x08007f4b
 8007ec4:	08007f9f 	.word	0x08007f9f
 8007ec8:	08007f9f 	.word	0x08007f9f
 8007ecc:	08007f9f 	.word	0x08007f9f
 8007ed0:	08007f5b 	.word	0x08007f5b
 8007ed4:	08007f9f 	.word	0x08007f9f
 8007ed8:	08007f9f 	.word	0x08007f9f
 8007edc:	08007f9f 	.word	0x08007f9f
 8007ee0:	08007f9f 	.word	0x08007f9f
 8007ee4:	08007f9f 	.word	0x08007f9f
 8007ee8:	08007f9f 	.word	0x08007f9f
 8007eec:	08007f9f 	.word	0x08007f9f
 8007ef0:	08007f6b 	.word	0x08007f6b
 8007ef4:	08007f9f 	.word	0x08007f9f
 8007ef8:	08007f9f 	.word	0x08007f9f
 8007efc:	08007f9f 	.word	0x08007f9f
 8007f00:	08007f9f 	.word	0x08007f9f
 8007f04:	08007f9f 	.word	0x08007f9f
 8007f08:	08007f9f 	.word	0x08007f9f
 8007f0c:	08007f9f 	.word	0x08007f9f
 8007f10:	08007f9f 	.word	0x08007f9f
 8007f14:	08007f9f 	.word	0x08007f9f
 8007f18:	08007f9f 	.word	0x08007f9f
 8007f1c:	08007f9f 	.word	0x08007f9f
 8007f20:	08007f9f 	.word	0x08007f9f
 8007f24:	08007f9f 	.word	0x08007f9f
 8007f28:	08007f9f 	.word	0x08007f9f
 8007f2c:	08007f9f 	.word	0x08007f9f
 8007f30:	08007f91 	.word	0x08007f91
 8007f34:	2b40      	cmp	r3, #64	@ 0x40
 8007f36:	d02e      	beq.n	8007f96 <UART_SetConfig+0xab2>
 8007f38:	e031      	b.n	8007f9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f3a:	f7fd f82d 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 8007f3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f40:	e033      	b.n	8007faa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f42:	f7fd f83f 	bl	8004fc4 <HAL_RCC_GetPCLK2Freq>
 8007f46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f48:	e02f      	b.n	8007faa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe fa46 	bl	80063e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f58:	e027      	b.n	8007faa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5a:	f107 0318 	add.w	r3, r7, #24
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fb92 	bl	8006688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f68:	e01f      	b.n	8007faa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f6a:	4b69      	ldr	r3, [pc, #420]	@ (8008110 <UART_SetConfig+0xc2c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f76:	4b66      	ldr	r3, [pc, #408]	@ (8008110 <UART_SetConfig+0xc2c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	4a64      	ldr	r2, [pc, #400]	@ (8008114 <UART_SetConfig+0xc30>)
 8007f82:	fa22 f303 	lsr.w	r3, r2, r3
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f88:	e00f      	b.n	8007faa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007f8a:	4b62      	ldr	r3, [pc, #392]	@ (8008114 <UART_SetConfig+0xc30>)
 8007f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8e:	e00c      	b.n	8007faa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f90:	4b61      	ldr	r3, [pc, #388]	@ (8008118 <UART_SetConfig+0xc34>)
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f94:	e009      	b.n	8007faa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	e005      	b.n	8007faa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 80ea 	beq.w	8008186 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	4a55      	ldr	r2, [pc, #340]	@ (800810c <UART_SetConfig+0xc28>)
 8007fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fc4:	005a      	lsls	r2, r3, #1
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	085b      	lsrs	r3, r3, #1
 8007fcc:	441a      	add	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	d916      	bls.n	800800c <UART_SetConfig+0xb28>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe4:	d212      	bcs.n	800800c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	f023 030f 	bic.w	r3, r3, #15
 8007fee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ffe:	4313      	orrs	r3, r2
 8008000:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008008:	60da      	str	r2, [r3, #12]
 800800a:	e0bc      	b.n	8008186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008012:	e0b8      	b.n	8008186 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008014:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008018:	2b20      	cmp	r3, #32
 800801a:	dc4b      	bgt.n	80080b4 <UART_SetConfig+0xbd0>
 800801c:	2b00      	cmp	r3, #0
 800801e:	f2c0 8087 	blt.w	8008130 <UART_SetConfig+0xc4c>
 8008022:	2b20      	cmp	r3, #32
 8008024:	f200 8084 	bhi.w	8008130 <UART_SetConfig+0xc4c>
 8008028:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0xb4c>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	080080bb 	.word	0x080080bb
 8008034:	080080c3 	.word	0x080080c3
 8008038:	08008131 	.word	0x08008131
 800803c:	08008131 	.word	0x08008131
 8008040:	080080cb 	.word	0x080080cb
 8008044:	08008131 	.word	0x08008131
 8008048:	08008131 	.word	0x08008131
 800804c:	08008131 	.word	0x08008131
 8008050:	080080db 	.word	0x080080db
 8008054:	08008131 	.word	0x08008131
 8008058:	08008131 	.word	0x08008131
 800805c:	08008131 	.word	0x08008131
 8008060:	08008131 	.word	0x08008131
 8008064:	08008131 	.word	0x08008131
 8008068:	08008131 	.word	0x08008131
 800806c:	08008131 	.word	0x08008131
 8008070:	080080eb 	.word	0x080080eb
 8008074:	08008131 	.word	0x08008131
 8008078:	08008131 	.word	0x08008131
 800807c:	08008131 	.word	0x08008131
 8008080:	08008131 	.word	0x08008131
 8008084:	08008131 	.word	0x08008131
 8008088:	08008131 	.word	0x08008131
 800808c:	08008131 	.word	0x08008131
 8008090:	08008131 	.word	0x08008131
 8008094:	08008131 	.word	0x08008131
 8008098:	08008131 	.word	0x08008131
 800809c:	08008131 	.word	0x08008131
 80080a0:	08008131 	.word	0x08008131
 80080a4:	08008131 	.word	0x08008131
 80080a8:	08008131 	.word	0x08008131
 80080ac:	08008131 	.word	0x08008131
 80080b0:	08008123 	.word	0x08008123
 80080b4:	2b40      	cmp	r3, #64	@ 0x40
 80080b6:	d037      	beq.n	8008128 <UART_SetConfig+0xc44>
 80080b8:	e03a      	b.n	8008130 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ba:	f7fc ff6d 	bl	8004f98 <HAL_RCC_GetPCLK1Freq>
 80080be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080c0:	e03c      	b.n	800813c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080c2:	f7fc ff7f 	bl	8004fc4 <HAL_RCC_GetPCLK2Freq>
 80080c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080c8:	e038      	b.n	800813c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe f986 	bl	80063e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d8:	e030      	b.n	800813c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080da:	f107 0318 	add.w	r3, r7, #24
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fad2 	bl	8006688 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e8:	e028      	b.n	800813c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080ea:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <UART_SetConfig+0xc2c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d012      	beq.n	800811c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080f6:	4b06      	ldr	r3, [pc, #24]	@ (8008110 <UART_SetConfig+0xc2c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	08db      	lsrs	r3, r3, #3
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	4a04      	ldr	r2, [pc, #16]	@ (8008114 <UART_SetConfig+0xc30>)
 8008102:	fa22 f303 	lsr.w	r3, r2, r3
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008108:	e018      	b.n	800813c <UART_SetConfig+0xc58>
 800810a:	bf00      	nop
 800810c:	0801c66c 	.word	0x0801c66c
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800811c:	4b24      	ldr	r3, [pc, #144]	@ (80081b0 <UART_SetConfig+0xccc>)
 800811e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008120:	e00c      	b.n	800813c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008122:	4b24      	ldr	r3, [pc, #144]	@ (80081b4 <UART_SetConfig+0xcd0>)
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008126:	e009      	b.n	800813c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812e:	e005      	b.n	800813c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800813a:	bf00      	nop
    }

    if (pclk != 0U)
 800813c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d021      	beq.n	8008186 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008146:	4a1c      	ldr	r2, [pc, #112]	@ (80081b8 <UART_SetConfig+0xcd4>)
 8008148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800814c:	461a      	mov	r2, r3
 800814e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008150:	fbb3 f2f2 	udiv	r2, r3, r2
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	441a      	add	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	2b0f      	cmp	r3, #15
 800816a:	d909      	bls.n	8008180 <UART_SetConfig+0xc9c>
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008172:	d205      	bcs.n	8008180 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008176:	b29a      	uxth	r2, r3
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	e002      	b.n	8008186 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2201      	movs	r2, #1
 800818a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2201      	movs	r2, #1
 8008192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2200      	movs	r2, #0
 80081a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80081a2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3748      	adds	r7, #72	@ 0x48
 80081aa:	46bd      	mov	sp, r7
 80081ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b0:	03d09000 	.word	0x03d09000
 80081b4:	003d0900 	.word	0x003d0900
 80081b8:	0801c66c 	.word	0x0801c66c

080081bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00a      	beq.n	80081e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820c:	f003 0302 	and.w	r3, r3, #2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	f003 0310 	and.w	r3, r3, #16
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ba:	d10a      	bne.n	80082d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b098      	sub	sp, #96	@ 0x60
 8008304:	af02      	add	r7, sp, #8
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008310:	f7f9 fddc 	bl	8001ecc <HAL_GetTick>
 8008314:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b08      	cmp	r3, #8
 8008322:	d12f      	bne.n	8008384 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800832c:	2200      	movs	r2, #0
 800832e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f88e 	bl	8008454 <UART_WaitOnFlagUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d022      	beq.n	8008384 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800834c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008352:	653b      	str	r3, [r7, #80]	@ 0x50
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800835c:	647b      	str	r3, [r7, #68]	@ 0x44
 800835e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800836a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e6      	bne.n	800833e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e063      	b.n	800844c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b04      	cmp	r3, #4
 8008390:	d149      	bne.n	8008426 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800839a:	2200      	movs	r2, #0
 800839c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f857 	bl	8008454 <UART_WaitOnFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d03c      	beq.n	8008426 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	623b      	str	r3, [r7, #32]
   return(result);
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80083cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083fe:	61fa      	str	r2, [r7, #28]
 8008400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	69b9      	ldr	r1, [r7, #24]
 8008404:	69fa      	ldr	r2, [r7, #28]
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	617b      	str	r3, [r7, #20]
   return(result);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e012      	b.n	800844c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2220      	movs	r2, #32
 800842a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3758      	adds	r7, #88	@ 0x58
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	4613      	mov	r3, r2
 8008462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008464:	e04f      	b.n	8008506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846c:	d04b      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800846e:	f7f9 fd2d 	bl	8001ecc <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	69ba      	ldr	r2, [r7, #24]
 800847a:	429a      	cmp	r2, r3
 800847c:	d302      	bcc.n	8008484 <UART_WaitOnFlagUntilTimeout+0x30>
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e04e      	b.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d037      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b80      	cmp	r3, #128	@ 0x80
 800849a:	d034      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b40      	cmp	r3, #64	@ 0x40
 80084a0:	d031      	beq.n	8008506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d110      	bne.n	80084d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2208      	movs	r2, #8
 80084b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 f839 	bl	8008530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2208      	movs	r2, #8
 80084c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e029      	b.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084e0:	d111      	bne.n	8008506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 f81f 	bl	8008530 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2220      	movs	r2, #32
 80084f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e00f      	b.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69da      	ldr	r2, [r3, #28]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4013      	ands	r3, r2
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	429a      	cmp	r2, r3
 8008522:	d0a0      	beq.n	8008466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b095      	sub	sp, #84	@ 0x54
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800854c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008556:	643b      	str	r3, [r7, #64]	@ 0x40
 8008558:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800855c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	61fb      	str	r3, [r7, #28]
   return(result);
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	4b1e      	ldr	r3, [pc, #120]	@ (80085f8 <UART_EndRxTransfer+0xc8>)
 800857e:	4013      	ands	r3, r2
 8008580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800858a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800858c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008592:	e841 2300 	strex	r3, r2, [r1]
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1e5      	bne.n	800856a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d118      	bne.n	80085d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f023 0310 	bic.w	r3, r3, #16
 80085ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6979      	ldr	r1, [r7, #20]
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	613b      	str	r3, [r7, #16]
   return(result);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e6      	bne.n	80085a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085ec:	bf00      	nop
 80085ee:	3754      	adds	r7, #84	@ 0x54
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	effffffe 	.word	0xeffffffe

080085fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_UARTEx_DisableFifoMode+0x16>
 800860e:	2302      	movs	r3, #2
 8008610:	e027      	b.n	8008662 <HAL_UARTEx_DisableFifoMode+0x66>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2224      	movs	r2, #36	@ 0x24
 800861e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0201 	bic.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2220      	movs	r2, #32
 8008654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008682:	2302      	movs	r3, #2
 8008684:	e02d      	b.n	80086e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2224      	movs	r2, #36	@ 0x24
 8008692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0201 	bic.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f850 	bl	8008768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086fe:	2302      	movs	r3, #2
 8008700:	e02d      	b.n	800875e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2224      	movs	r2, #36	@ 0x24
 800870e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	683a      	ldr	r2, [r7, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f812 	bl	8008768 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008774:	2b00      	cmp	r3, #0
 8008776:	d108      	bne.n	800878a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008788:	e031      	b.n	80087ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800878a:	2310      	movs	r3, #16
 800878c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800878e:	2310      	movs	r3, #16
 8008790:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	0e5b      	lsrs	r3, r3, #25
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 0307 	and.w	r3, r3, #7
 80087a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	0f5b      	lsrs	r3, r3, #29
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	7b3a      	ldrb	r2, [r7, #12]
 80087b6:	4911      	ldr	r1, [pc, #68]	@ (80087fc <UARTEx_SetNbDataToProcess+0x94>)
 80087b8:	5c8a      	ldrb	r2, [r1, r2]
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087be:	7b3a      	ldrb	r2, [r7, #12]
 80087c0:	490f      	ldr	r1, [pc, #60]	@ (8008800 <UARTEx_SetNbDataToProcess+0x98>)
 80087c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	7b7a      	ldrb	r2, [r7, #13]
 80087d4:	4909      	ldr	r1, [pc, #36]	@ (80087fc <UARTEx_SetNbDataToProcess+0x94>)
 80087d6:	5c8a      	ldrb	r2, [r1, r2]
 80087d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087dc:	7b7a      	ldrb	r2, [r7, #13]
 80087de:	4908      	ldr	r1, [pc, #32]	@ (8008800 <UARTEx_SetNbDataToProcess+0x98>)
 80087e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	0801c684 	.word	0x0801c684
 8008800:	0801c68c 	.word	0x0801c68c

08008804 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008804:	b5b0      	push	{r4, r5, r7, lr}
 8008806:	b08c      	sub	sp, #48	@ 0x30
 8008808:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800880a:	2100      	movs	r1, #0
 800880c:	2000      	movs	r0, #0
 800880e:	f003 fdab 	bl	800c368 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8008812:	4b1a      	ldr	r3, [pc, #104]	@ (800887c <MX_LWIP_Init+0x78>)
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008818:	4b19      	ldr	r3, [pc, #100]	@ (8008880 <MX_LWIP_Init+0x7c>)
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800881e:	4b19      	ldr	r3, [pc, #100]	@ (8008884 <MX_LWIP_Init+0x80>)
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008824:	4b18      	ldr	r3, [pc, #96]	@ (8008888 <MX_LWIP_Init+0x84>)
 8008826:	9302      	str	r3, [sp, #8]
 8008828:	4b18      	ldr	r3, [pc, #96]	@ (800888c <MX_LWIP_Init+0x88>)
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	2300      	movs	r3, #0
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4b14      	ldr	r3, [pc, #80]	@ (8008884 <MX_LWIP_Init+0x80>)
 8008832:	4a13      	ldr	r2, [pc, #76]	@ (8008880 <MX_LWIP_Init+0x7c>)
 8008834:	4911      	ldr	r1, [pc, #68]	@ (800887c <MX_LWIP_Init+0x78>)
 8008836:	4816      	ldr	r0, [pc, #88]	@ (8008890 <MX_LWIP_Init+0x8c>)
 8008838:	f004 fc18 	bl	800d06c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800883c:	4814      	ldr	r0, [pc, #80]	@ (8008890 <MX_LWIP_Init+0x8c>)
 800883e:	f004 fdcf 	bl	800d3e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008842:	4813      	ldr	r0, [pc, #76]	@ (8008890 <MX_LWIP_Init+0x8c>)
 8008844:	f004 fddc 	bl	800d400 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008848:	4912      	ldr	r1, [pc, #72]	@ (8008894 <MX_LWIP_Init+0x90>)
 800884a:	4811      	ldr	r0, [pc, #68]	@ (8008890 <MX_LWIP_Init+0x8c>)
 800884c:	f004 fede 	bl	800d60c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8008850:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <MX_LWIP_Init+0x94>)
 8008852:	1d3c      	adds	r4, r7, #4
 8008854:	461d      	mov	r5, r3
 8008856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800885a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800885e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	490a      	ldr	r1, [pc, #40]	@ (8008890 <MX_LWIP_Init+0x8c>)
 8008866:	4618      	mov	r0, r3
 8008868:	f000 fd28 	bl	80092bc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800886c:	4808      	ldr	r0, [pc, #32]	@ (8008890 <MX_LWIP_Init+0x8c>)
 800886e:	f00c f831 	bl	80148d4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008872:	bf00      	nop
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bdb0      	pop	{r4, r5, r7, pc}
 800887a:	bf00      	nop
 800887c:	240051bc 	.word	0x240051bc
 8008880:	240051c0 	.word	0x240051c0
 8008884:	240051c4 	.word	0x240051c4
 8008888:	0800c2a5 	.word	0x0800c2a5
 800888c:	08008d39 	.word	0x08008d39
 8008890:	24005184 	.word	0x24005184
 8008894:	0800889d 	.word	0x0800889d
 8008898:	08019798 	.word	0x08019798

0800889c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80088b0:	b5b0      	push	{r4, r5, r7, lr}
 80088b2:	b0ac      	sub	sp, #176	@ 0xb0
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80088ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80088ce:	2264      	movs	r2, #100	@ 0x64
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f010 f897 	bl	8018a06 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80088d8:	4b93      	ldr	r3, [pc, #588]	@ (8008b28 <low_level_init+0x278>)
 80088da:	4a94      	ldr	r2, [pc, #592]	@ (8008b2c <low_level_init+0x27c>)
 80088dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80088de:	2300      	movs	r3, #0
 80088e0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 80088e4:	2380      	movs	r3, #128	@ 0x80
 80088e6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 80088ea:	23e1      	movs	r3, #225	@ 0xe1
 80088ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 80088fc:	2300      	movs	r3, #0
 80088fe:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8008902:	4a89      	ldr	r2, [pc, #548]	@ (8008b28 <low_level_init+0x278>)
 8008904:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008908:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800890a:	4b87      	ldr	r3, [pc, #540]	@ (8008b28 <low_level_init+0x278>)
 800890c:	2201      	movs	r2, #1
 800890e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008910:	4b85      	ldr	r3, [pc, #532]	@ (8008b28 <low_level_init+0x278>)
 8008912:	4a87      	ldr	r2, [pc, #540]	@ (8008b30 <low_level_init+0x280>)
 8008914:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008916:	4b84      	ldr	r3, [pc, #528]	@ (8008b28 <low_level_init+0x278>)
 8008918:	4a86      	ldr	r2, [pc, #536]	@ (8008b34 <low_level_init+0x284>)
 800891a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800891c:	4b82      	ldr	r3, [pc, #520]	@ (8008b28 <low_level_init+0x278>)
 800891e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008922:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008924:	4880      	ldr	r0, [pc, #512]	@ (8008b28 <low_level_init+0x278>)
 8008926:	f7f9 fc49 	bl	80021bc <HAL_ETH_Init>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008930:	2238      	movs	r2, #56	@ 0x38
 8008932:	2100      	movs	r1, #0
 8008934:	4880      	ldr	r0, [pc, #512]	@ (8008b38 <low_level_init+0x288>)
 8008936:	f010 f866 	bl	8018a06 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800893a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b38 <low_level_init+0x288>)
 800893c:	2221      	movs	r2, #33	@ 0x21
 800893e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008940:	4b7d      	ldr	r3, [pc, #500]	@ (8008b38 <low_level_init+0x288>)
 8008942:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008946:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008948:	4b7b      	ldr	r3, [pc, #492]	@ (8008b38 <low_level_init+0x288>)
 800894a:	2200      	movs	r2, #0
 800894c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800894e:	487b      	ldr	r0, [pc, #492]	@ (8008b3c <low_level_init+0x28c>)
 8008950:	f004 fa46 	bl	800cde0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2206      	movs	r2, #6
 8008958:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800895c:	4b72      	ldr	r3, [pc, #456]	@ (8008b28 <low_level_init+0x278>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008968:	4b6f      	ldr	r3, [pc, #444]	@ (8008b28 <low_level_init+0x278>)
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	785a      	ldrb	r2, [r3, #1]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008974:	4b6c      	ldr	r3, [pc, #432]	@ (8008b28 <low_level_init+0x278>)
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	789a      	ldrb	r2, [r3, #2]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008980:	4b69      	ldr	r3, [pc, #420]	@ (8008b28 <low_level_init+0x278>)
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	78da      	ldrb	r2, [r3, #3]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800898c:	4b66      	ldr	r3, [pc, #408]	@ (8008b28 <low_level_init+0x278>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	791a      	ldrb	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008998:	4b63      	ldr	r3, [pc, #396]	@ (8008b28 <low_level_init+0x278>)
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	795a      	ldrb	r2, [r3, #5]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80089aa:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80089b2:	f043 030a 	orr.w	r3, r3, #10
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80089be:	2300      	movs	r3, #0
 80089c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089c2:	2300      	movs	r3, #0
 80089c4:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80089c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089ca:	2101      	movs	r1, #1
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fd71 	bl	80094b4 <osSemaphoreCreate>
 80089d2:	4603      	mov	r3, r0
 80089d4:	4a5a      	ldr	r2, [pc, #360]	@ (8008b40 <low_level_init+0x290>)
 80089d6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80089d8:	2300      	movs	r3, #0
 80089da:	627b      	str	r3, [r7, #36]	@ 0x24
 80089dc:	2300      	movs	r3, #0
 80089de:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80089e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fd64 	bl	80094b4 <osSemaphoreCreate>
 80089ec:	4603      	mov	r3, r0
 80089ee:	4a55      	ldr	r2, [pc, #340]	@ (8008b44 <low_level_init+0x294>)
 80089f0:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80089f2:	4b53      	ldr	r3, [pc, #332]	@ (8008b40 <low_level_init+0x290>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2100      	movs	r1, #0
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fd8d 	bl	8009518 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80089fe:	4b51      	ldr	r3, [pc, #324]	@ (8008b44 <low_level_init+0x294>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2100      	movs	r1, #0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fd87 	bl	8009518 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b48 <low_level_init+0x298>)
 8008a0c:	f107 0408 	add.w	r4, r7, #8
 8008a10:	461d      	mov	r5, r3
 8008a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fc49 	bl	80092bc <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008a2a:	4948      	ldr	r1, [pc, #288]	@ (8008b4c <low_level_init+0x29c>)
 8008a2c:	4848      	ldr	r0, [pc, #288]	@ (8008b50 <low_level_init+0x2a0>)
 8008a2e:	f7f9 f8f6 	bl	8001c1e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008a32:	4847      	ldr	r0, [pc, #284]	@ (8008b50 <low_level_init+0x2a0>)
 8008a34:	f7f9 f925 	bl	8001c82 <LAN8742_Init>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d006      	beq.n	8008a4c <low_level_init+0x19c>
  {
    netif_set_link_down(netif);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f004 fdb4 	bl	800d5ac <netif_set_link_down>
    netif_set_down(netif);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f004 fd47 	bl	800d4d8 <netif_set_down>
 8008a4a:	e06a      	b.n	8008b22 <low_level_init+0x272>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8008a4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d164      	bne.n	8008b1e <low_level_init+0x26e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008a54:	483e      	ldr	r0, [pc, #248]	@ (8008b50 <low_level_init+0x2a0>)
 8008a56:	f7f9 f961 	bl	8001d1c <LAN8742_GetLinkState>
 8008a5a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	dc06      	bgt.n	8008a74 <low_level_init+0x1c4>
    {
      netif_set_link_down(netif);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f004 fda0 	bl	800d5ac <netif_set_link_down>
      netif_set_down(netif);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f004 fd33 	bl	800d4d8 <netif_set_down>
 8008a72:	e056      	b.n	8008b22 <low_level_init+0x272>
    }
    else
    {
      switch (PHYLinkState)
 8008a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a78:	3b02      	subs	r3, #2
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d82a      	bhi.n	8008ad4 <low_level_init+0x224>
 8008a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <low_level_init+0x1d4>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008aa7 	.word	0x08008aa7
 8008a8c:	08008ab7 	.word	0x08008ab7
 8008a90:	08008ac7 	.word	0x08008ac7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8008a9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8008aa4:	e01f      	b.n	8008ae6 <low_level_init+0x236>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8008aac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8008ab4:	e017      	b.n	8008ae6 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8008ac4:	e00f      	b.n	8008ae6 <low_level_init+0x236>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8008ad2:	e008      	b.n	8008ae6 <low_level_init+0x236>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8008ad4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8008adc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8008ae4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008ae6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008aea:	4619      	mov	r1, r3
 8008aec:	480e      	ldr	r0, [pc, #56]	@ (8008b28 <low_level_init+0x278>)
 8008aee:	f7f9 ffe1 	bl	8002ab4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008af6:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8008af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008afc:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008afe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008b02:	4619      	mov	r1, r3
 8008b04:	4808      	ldr	r0, [pc, #32]	@ (8008b28 <low_level_init+0x278>)
 8008b06:	f7fa f9a9 	bl	8002e5c <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8008b0a:	4807      	ldr	r0, [pc, #28]	@ (8008b28 <low_level_init+0x278>)
 8008b0c:	f7f9 fc54 	bl	80023b8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f004 fc75 	bl	800d400 <netif_set_up>
    netif_set_link_up(netif);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f004 fd10 	bl	800d53c <netif_set_link_up>
 8008b1c:	e001      	b.n	8008b22 <low_level_init+0x272>
    }

  }
  else
  {
    Error_Handler();
 8008b1e:	f7f8 faa0 	bl	8001062 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008b22:	37b0      	adds	r7, #176	@ 0xb0
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bdb0      	pop	{r4, r5, r7, pc}
 8008b28:	240051d8 	.word	0x240051d8
 8008b2c:	40028000 	.word	0x40028000
 8008b30:	24004a78 	.word	0x24004a78
 8008b34:	24004a18 	.word	0x24004a18
 8008b38:	24005288 	.word	0x24005288
 8008b3c:	0801c694 	.word	0x0801c694
 8008b40:	240051d0 	.word	0x240051d0
 8008b44:	240051d4 	.word	0x240051d4
 8008b48:	080197bc 	.word	0x080197bc
 8008b4c:	24000010 	.word	0x24000010
 8008b50:	240052c0 	.word	0x240052c0

08008b54 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b092      	sub	sp, #72	@ 0x48
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	2230      	movs	r2, #48	@ 0x30
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f00f ff46 	bl	8018a06 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008b7a:	f107 030c 	add.w	r3, r7, #12
 8008b7e:	2230      	movs	r2, #48	@ 0x30
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f00f ff3f 	bl	8018a06 <memset>

  for(q = p; q != NULL; q = q->next)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b8c:	e045      	b.n	8008c1a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d902      	bls.n	8008b9a <low_level_output+0x46>
      return ERR_IF;
 8008b94:	f06f 030b 	mvn.w	r3, #11
 8008b98:	e07f      	b.n	8008c9a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8008b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b9c:	6859      	ldr	r1, [r3, #4]
 8008b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	3348      	adds	r3, #72	@ 0x48
 8008baa:	443b      	add	r3, r7
 8008bac:	3b3c      	subs	r3, #60	@ 0x3c
 8008bae:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb2:	895b      	ldrh	r3, [r3, #10]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bb8:	4613      	mov	r3, r2
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	3348      	adds	r3, #72	@ 0x48
 8008bc2:	443b      	add	r3, r7
 8008bc4:	3b38      	subs	r3, #56	@ 0x38
 8008bc6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d011      	beq.n	8008bf2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	f107 000c 	add.w	r0, r7, #12
 8008bd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bd8:	460b      	mov	r3, r1
 8008bda:	005b      	lsls	r3, r3, #1
 8008bdc:	440b      	add	r3, r1
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	18c1      	adds	r1, r0, r3
 8008be2:	4613      	mov	r3, r2
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	3348      	adds	r3, #72	@ 0x48
 8008bec:	443b      	add	r3, r7
 8008bee:	3b34      	subs	r3, #52	@ 0x34
 8008bf0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d109      	bne.n	8008c0e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	3348      	adds	r3, #72	@ 0x48
 8008c06:	443b      	add	r3, r7
 8008c08:	3b34      	subs	r3, #52	@ 0x34
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c10:	3301      	adds	r3, #1
 8008c12:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1b6      	bne.n	8008b8e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	891b      	ldrh	r3, [r3, #8]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4b1f      	ldr	r3, [pc, #124]	@ (8008ca4 <low_level_output+0x150>)
 8008c28:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008c2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ca4 <low_level_output+0x150>)
 8008c2c:	f107 030c 	add.w	r3, r7, #12
 8008c30:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008c32:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca4 <low_level_output+0x150>)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8008c38:	6838      	ldr	r0, [r7, #0]
 8008c3a:	f005 f93b 	bl	800deb4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8008c3e:	4919      	ldr	r1, [pc, #100]	@ (8008ca4 <low_level_output+0x150>)
 8008c40:	4819      	ldr	r0, [pc, #100]	@ (8008ca8 <low_level_output+0x154>)
 8008c42:	f7f9 fca5 	bl	8002590 <HAL_ETH_Transmit_IT>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008c52:	e01b      	b.n	8008c8c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8008c54:	4814      	ldr	r0, [pc, #80]	@ (8008ca8 <low_level_output+0x154>)
 8008c56:	f7fa f96b 	bl	8002f30 <HAL_ETH_GetError>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00d      	beq.n	8008c80 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8008c64:	4b11      	ldr	r3, [pc, #68]	@ (8008cac <low_level_output+0x158>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fc53 	bl	8009518 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8008c72:	480d      	ldr	r0, [pc, #52]	@ (8008ca8 <low_level_output+0x154>)
 8008c74:	f7f9 fe13 	bl	800289e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8008c78:	23fe      	movs	r3, #254	@ 0xfe
 8008c7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008c7e:	e005      	b.n	8008c8c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8008c80:	6838      	ldr	r0, [r7, #0]
 8008c82:	f005 f871 	bl	800dd68 <pbuf_free>
        errval =  ERR_IF;
 8008c86:	23f4      	movs	r3, #244	@ 0xf4
 8008c88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8008c8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008c90:	f113 0f02 	cmn.w	r3, #2
 8008c94:	d0d3      	beq.n	8008c3e <low_level_output+0xea>

  return errval;
 8008c96:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3748      	adds	r7, #72	@ 0x48
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	24005288 	.word	0x24005288
 8008ca8:	240051d8 	.word	0x240051d8
 8008cac:	240051d4 	.word	0x240051d4

08008cb0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008cbc:	4b07      	ldr	r3, [pc, #28]	@ (8008cdc <low_level_input+0x2c>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4805      	ldr	r0, [pc, #20]	@ (8008ce0 <low_level_input+0x30>)
 8008ccc:	f7f9 fcb1 	bl	8002632 <HAL_ETH_ReadData>
  }

  return p;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	240051cc 	.word	0x240051cc
 8008ce0:	240051d8 	.word	0x240051d8

08008ce4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8008d34 <ethernetif_input+0x50>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fc0b 	bl	8009518 <osSemaphoreWait>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f5      	bne.n	8008cf4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008d08:	68b8      	ldr	r0, [r7, #8]
 8008d0a:	f7ff ffd1 	bl	8008cb0 <low_level_input>
 8008d0e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f005 f81e 	bl	800dd68 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1ea      	bne.n	8008d08 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008d32:	e7df      	b.n	8008cf4 <ethernetif_input+0x10>
 8008d34:	240051d0 	.word	0x240051d0

08008d38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <ethernetif_init+0x1c>
 8008d46:	4b0e      	ldr	r3, [pc, #56]	@ (8008d80 <ethernetif_init+0x48>)
 8008d48:	f240 2219 	movw	r2, #537	@ 0x219
 8008d4c:	490d      	ldr	r1, [pc, #52]	@ (8008d84 <ethernetif_init+0x4c>)
 8008d4e:	480e      	ldr	r0, [pc, #56]	@ (8008d88 <ethernetif_init+0x50>)
 8008d50:	f00f fdf4 	bl	801893c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2273      	movs	r2, #115	@ 0x73
 8008d58:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2274      	movs	r2, #116	@ 0x74
 8008d60:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a09      	ldr	r2, [pc, #36]	@ (8008d8c <ethernetif_init+0x54>)
 8008d68:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a08      	ldr	r2, [pc, #32]	@ (8008d90 <ethernetif_init+0x58>)
 8008d6e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff fd9d 	bl	80088b0 <low_level_init>

  return ERR_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	080197d8 	.word	0x080197d8
 8008d84:	080197f4 	.word	0x080197f4
 8008d88:	08019804 	.word	0x08019804
 8008d8c:	08016795 	.word	0x08016795
 8008d90:	08008b55 	.word	0x08008b55

08008d94 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	4809      	ldr	r0, [pc, #36]	@ (8008dc8 <pbuf_free_custom+0x34>)
 8008da4:	f004 f90c 	bl	800cfc0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008da8:	4b08      	ldr	r3, [pc, #32]	@ (8008dcc <pbuf_free_custom+0x38>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d107      	bne.n	8008dc0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008db0:	4b06      	ldr	r3, [pc, #24]	@ (8008dcc <pbuf_free_custom+0x38>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008db6:	4b06      	ldr	r3, [pc, #24]	@ (8008dd0 <pbuf_free_custom+0x3c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fbfa 	bl	80095b4 <osSemaphoreRelease>
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	0801c694 	.word	0x0801c694
 8008dcc:	240051cc 	.word	0x240051cc
 8008dd0:	240051d0 	.word	0x240051d0

08008dd4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008dd8:	f7f9 f878 	bl	8001ecc <HAL_GetTick>
 8008ddc:	4603      	mov	r3, r0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08e      	sub	sp, #56	@ 0x38
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	609a      	str	r2, [r3, #8]
 8008df8:	60da      	str	r2, [r3, #12]
 8008dfa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a49      	ldr	r2, [pc, #292]	@ (8008f28 <HAL_ETH_MspInit+0x144>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	f040 808b 	bne.w	8008f1e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008e08:	4b48      	ldr	r3, [pc, #288]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e0e:	4a47      	ldr	r2, [pc, #284]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008e18:	4b44      	ldr	r3, [pc, #272]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e22:	623b      	str	r3, [r7, #32]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008e26:	4b41      	ldr	r3, [pc, #260]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008e36:	4b3d      	ldr	r3, [pc, #244]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008e44:	4b39      	ldr	r3, [pc, #228]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e4a:	4a38      	ldr	r2, [pc, #224]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e50:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008e54:	4b35      	ldr	r3, [pc, #212]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5e:	61bb      	str	r3, [r7, #24]
 8008e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e62:	4b32      	ldr	r3, [pc, #200]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e68:	4a30      	ldr	r2, [pc, #192]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e6a:	f043 0304 	orr.w	r3, r3, #4
 8008e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e72:	4b2e      	ldr	r3, [pc, #184]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e80:	4b2a      	ldr	r3, [pc, #168]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e86:	4a29      	ldr	r2, [pc, #164]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e90:	4b26      	ldr	r3, [pc, #152]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e9e:	4b23      	ldr	r3, [pc, #140]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ea4:	4a21      	ldr	r2, [pc, #132]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008ea6:	f043 0302 	orr.w	r3, r3, #2
 8008eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008eae:	4b1f      	ldr	r3, [pc, #124]	@ (8008f2c <HAL_ETH_MspInit+0x148>)
 8008eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8008ebc:	2332      	movs	r3, #50	@ 0x32
 8008ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008ecc:	230b      	movs	r3, #11
 8008ece:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4816      	ldr	r0, [pc, #88]	@ (8008f30 <HAL_ETH_MspInit+0x14c>)
 8008ed8:	f7fa fdba 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008edc:	2386      	movs	r3, #134	@ 0x86
 8008ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008eec:	230b      	movs	r3, #11
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	480f      	ldr	r0, [pc, #60]	@ (8008f34 <HAL_ETH_MspInit+0x150>)
 8008ef8:	f7fa fdaa 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008efc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f02:	2302      	movs	r3, #2
 8008f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008f0e:	230b      	movs	r3, #11
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f16:	4619      	mov	r1, r3
 8008f18:	4807      	ldr	r0, [pc, #28]	@ (8008f38 <HAL_ETH_MspInit+0x154>)
 8008f1a:	f7fa fd99 	bl	8003a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008f1e:	bf00      	nop
 8008f20:	3738      	adds	r7, #56	@ 0x38
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40028000 	.word	0x40028000
 8008f2c:	58024400 	.word	0x58024400
 8008f30:	58020800 	.word	0x58020800
 8008f34:	58020000 	.word	0x58020000
 8008f38:	58020400 	.word	0x58020400

08008f3c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008f40:	4802      	ldr	r0, [pc, #8]	@ (8008f4c <ETH_PHY_IO_Init+0x10>)
 8008f42:	f7f9 ffa5 	bl	8002e90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	240051d8 	.word	0x240051d8

08008f50 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008f50:	b480      	push	{r7}
 8008f52:	af00      	add	r7, sp, #0
  return 0;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	68f9      	ldr	r1, [r7, #12]
 8008f72:	4807      	ldr	r0, [pc, #28]	@ (8008f90 <ETH_PHY_IO_ReadReg+0x30>)
 8008f74:	f7f9 fcf6 	bl	8002964 <HAL_ETH_ReadPHYRegister>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	e000      	b.n	8008f86 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	240051d8 	.word	0x240051d8

08008f94 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	68f9      	ldr	r1, [r7, #12]
 8008fa6:	4807      	ldr	r0, [pc, #28]	@ (8008fc4 <ETH_PHY_IO_WriteReg+0x30>)
 8008fa8:	f7f9 fd30 	bl	8002a0c <HAL_ETH_WritePHYRegister>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	e000      	b.n	8008fba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	240051d8 	.word	0x240051d8

08008fc8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008fcc:	f7f8 ff7e 	bl	8001ecc <HAL_GetTick>
 8008fd0:	4603      	mov	r3, r0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b0a0      	sub	sp, #128	@ 0x80
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008fe0:	f107 0308 	add.w	r3, r7, #8
 8008fe4:	2264      	movs	r2, #100	@ 0x64
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f00f fd0c 	bl	8018a06 <memset>
  int32_t PHYLinkState = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009002:	483a      	ldr	r0, [pc, #232]	@ (80090ec <ethernet_link_thread+0x114>)
 8009004:	f7f8 fe8a 	bl	8001d1c <LAN8742_GetLinkState>
 8009008:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800900a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800900c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009010:	089b      	lsrs	r3, r3, #2
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00c      	beq.n	8009036 <ethernet_link_thread+0x5e>
 800901c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800901e:	2b01      	cmp	r3, #1
 8009020:	dc09      	bgt.n	8009036 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009022:	4833      	ldr	r0, [pc, #204]	@ (80090f0 <ethernet_link_thread+0x118>)
 8009024:	f7f9 fa3c 	bl	80024a0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009028:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800902a:	f004 fa55 	bl	800d4d8 <netif_set_down>
    netif_set_link_down(netif);
 800902e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009030:	f004 fabc 	bl	800d5ac <netif_set_link_down>
 8009034:	e055      	b.n	80090e2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009038:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b00      	cmp	r3, #0
 8009042:	d14e      	bne.n	80090e2 <ethernet_link_thread+0x10a>
 8009044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009046:	2b01      	cmp	r3, #1
 8009048:	dd4b      	ble.n	80090e2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800904a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800904c:	3b02      	subs	r3, #2
 800904e:	2b03      	cmp	r3, #3
 8009050:	d82a      	bhi.n	80090a8 <ethernet_link_thread+0xd0>
 8009052:	a201      	add	r2, pc, #4	@ (adr r2, 8009058 <ethernet_link_thread+0x80>)
 8009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009058:	08009069 	.word	0x08009069
 800905c:	0800907b 	.word	0x0800907b
 8009060:	0800908b 	.word	0x0800908b
 8009064:	0800909b 	.word	0x0800909b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800906c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800906e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009072:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009074:	2301      	movs	r3, #1
 8009076:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009078:	e017      	b.n	80090aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800907a:	2300      	movs	r3, #0
 800907c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800907e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009082:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009084:	2301      	movs	r3, #1
 8009086:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009088:	e00f      	b.n	80090aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800908a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800908e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009090:	2300      	movs	r3, #0
 8009092:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009094:	2301      	movs	r3, #1
 8009096:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009098:	e007      	b.n	80090aa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800909a:	2300      	movs	r3, #0
 800909c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800909e:	2300      	movs	r3, #0
 80090a0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80090a6:	e000      	b.n	80090aa <ethernet_link_thread+0xd2>
    default:
      break;
 80090a8:	bf00      	nop
    }

    if(linkchanged)
 80090aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d018      	beq.n	80090e2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4619      	mov	r1, r3
 80090b6:	480e      	ldr	r0, [pc, #56]	@ (80090f0 <ethernet_link_thread+0x118>)
 80090b8:	f7f9 fcfc 	bl	8002ab4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80090bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090be:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80090c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090c2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80090c4:	f107 0308 	add.w	r3, r7, #8
 80090c8:	4619      	mov	r1, r3
 80090ca:	4809      	ldr	r0, [pc, #36]	@ (80090f0 <ethernet_link_thread+0x118>)
 80090cc:	f7f9 fec6 	bl	8002e5c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80090d0:	4807      	ldr	r0, [pc, #28]	@ (80090f0 <ethernet_link_thread+0x118>)
 80090d2:	f7f9 f971 	bl	80023b8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80090d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090d8:	f004 f992 	bl	800d400 <netif_set_up>
      netif_set_link_up(netif);
 80090dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090de:	f004 fa2d 	bl	800d53c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80090e2:	2064      	movs	r0, #100	@ 0x64
 80090e4:	f000 f936 	bl	8009354 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80090e8:	e78b      	b.n	8009002 <ethernet_link_thread+0x2a>
 80090ea:	bf00      	nop
 80090ec:	240052c0 	.word	0x240052c0
 80090f0:	240051d8 	.word	0x240051d8

080090f4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80090fc:	4812      	ldr	r0, [pc, #72]	@ (8009148 <HAL_ETH_RxAllocateCallback+0x54>)
 80090fe:	f003 feeb 	bl	800ced8 <memp_malloc_pool>
 8009102:	60f8      	str	r0, [r7, #12]
  if (p)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d014      	beq.n	8009134 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f103 0220 	add.w	r2, r3, #32
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4a0d      	ldr	r2, [pc, #52]	@ (800914c <HAL_ETH_RxAllocateCallback+0x58>)
 8009118:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009122:	9201      	str	r2, [sp, #4]
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2241      	movs	r2, #65	@ 0x41
 800912a:	2100      	movs	r1, #0
 800912c:	2000      	movs	r0, #0
 800912e:	f004 fc61 	bl	800d9f4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009132:	e005      	b.n	8009140 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009134:	4b06      	ldr	r3, [pc, #24]	@ (8009150 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009136:	2201      	movs	r2, #1
 8009138:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	0801c694 	.word	0x0801c694
 800914c:	08008d95 	.word	0x08008d95
 8009150:	240051cc 	.word	0x240051cc

08009154 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009154:	b480      	push	{r7}
 8009156:	b08d      	sub	sp, #52	@ 0x34
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3b20      	subs	r3, #32
 8009172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8009174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	2200      	movs	r2, #0
 800917e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009182:	887a      	ldrh	r2, [r7, #2]
 8009184:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e003      	b.n	800919e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800919c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80091a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091aa:	e009      	b.n	80091c0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	891a      	ldrh	r2, [r3, #8]
 80091b0:	887b      	ldrh	r3, [r7, #2]
 80091b2:	4413      	add	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80091ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1f2      	bne.n	80091ac <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	623a      	str	r2, [r7, #32]
 80091cc:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dd1d      	ble.n	8009210 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	f003 021f 	and.w	r2, r3, #31
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80091e4:	f3bf 8f4f 	dsb	sy
}
 80091e8:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80091ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009220 <HAL_ETH_RxLinkCallback+0xcc>)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	3320      	adds	r3, #32
 80091f6:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	3b20      	subs	r3, #32
 80091fc:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	dcf2      	bgt.n	80091ea <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8009204:	f3bf 8f4f 	dsb	sy
}
 8009208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800920a:	f3bf 8f6f 	isb	sy
}
 800920e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8009210:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009212:	bf00      	nop
 8009214:	3734      	adds	r7, #52	@ 0x34
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	e000ed00 	.word	0xe000ed00

08009224 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f004 fd9b 	bl	800dd68 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009232:	bf00      	nop
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	4603      	mov	r3, r0
 8009242:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800924c:	2b84      	cmp	r3, #132	@ 0x84
 800924e:	d005      	beq.n	800925c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009250:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4413      	add	r3, r2
 8009258:	3303      	adds	r3, #3
 800925a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800925c:	68fb      	ldr	r3, [r7, #12]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009270:	f3ef 8305 	mrs	r3, IPSR
 8009274:	607b      	str	r3, [r7, #4]
  return(result);
 8009276:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009278:	2b00      	cmp	r3, #0
 800927a:	bf14      	ite	ne
 800927c:	2301      	movne	r3, #1
 800927e:	2300      	moveq	r3, #0
 8009280:	b2db      	uxtb	r3, r3
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009292:	f001 fc7d 	bl	800ab90 <vTaskStartScheduler>
  
  return osOK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	bd80      	pop	{r7, pc}

0800929c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80092a0:	f7ff ffe3 	bl	800926a <inHandlerMode>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80092aa:	f001 fd8f 	bl	800adcc <xTaskGetTickCountFromISR>
 80092ae:	4603      	mov	r3, r0
 80092b0:	e002      	b.n	80092b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80092b2:	f001 fd7b 	bl	800adac <xTaskGetTickCount>
 80092b6:	4603      	mov	r3, r0
  }
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd80      	pop	{r7, pc}

080092bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092be:	b089      	sub	sp, #36	@ 0x24
 80092c0:	af04      	add	r7, sp, #16
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d020      	beq.n	8009310 <osThreadCreate+0x54>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01c      	beq.n	8009310 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685c      	ldr	r4, [r3, #4]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691e      	ldr	r6, [r3, #16]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff ffa6 	bl	800923a <makeFreeRtosPriority>
 80092ee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092f8:	9202      	str	r2, [sp, #8]
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	9100      	str	r1, [sp, #0]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	4632      	mov	r2, r6
 8009302:	4629      	mov	r1, r5
 8009304:	4620      	mov	r0, r4
 8009306:	f001 fa75 	bl	800a7f4 <xTaskCreateStatic>
 800930a:	4603      	mov	r3, r0
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	e01c      	b.n	800934a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685c      	ldr	r4, [r3, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800931c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff ff88 	bl	800923a <makeFreeRtosPriority>
 800932a:	4602      	mov	r2, r0
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	9200      	str	r2, [sp, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	4632      	mov	r2, r6
 8009338:	4629      	mov	r1, r5
 800933a:	4620      	mov	r0, r4
 800933c:	f001 faba 	bl	800a8b4 <xTaskCreate>
 8009340:	4603      	mov	r3, r0
 8009342:	2b01      	cmp	r3, #1
 8009344:	d001      	beq.n	800934a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	e000      	b.n	800934c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800934a:	68fb      	ldr	r3, [r7, #12]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009354 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <osDelay+0x16>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	e000      	b.n	800936c <osDelay+0x18>
 800936a:	2301      	movs	r3, #1
 800936c:	4618      	mov	r0, r3
 800936e:	f001 fbd9 	bl	800ab24 <vTaskDelay>
  
  return osOK;
 8009372:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4619      	mov	r1, r3
 8009392:	2001      	movs	r0, #1
 8009394:	f000 fc47 	bl	8009c26 <xQueueCreateMutexStatic>
 8009398:	4603      	mov	r3, r0
 800939a:	e003      	b.n	80093a4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800939c:	2001      	movs	r0, #1
 800939e:	f000 fc2a 	bl	8009bf6 <xQueueCreateMutex>
 80093a2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <osMutexWait+0x18>
    return osErrorParameter;
 80093c0:	2380      	movs	r3, #128	@ 0x80
 80093c2:	e03a      	b.n	800943a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ce:	d103      	bne.n	80093d8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80093d0:	f04f 33ff 	mov.w	r3, #4294967295
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e009      	b.n	80093ec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <osMutexWait+0x40>
      ticks = 1;
 80093e8:	2301      	movs	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80093ec:	f7ff ff3d 	bl	800926a <inHandlerMode>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d017      	beq.n	8009426 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	461a      	mov	r2, r3
 80093fc:	2100      	movs	r1, #0
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 f84e 	bl	800a4a0 <xQueueReceiveFromISR>
 8009404:	4603      	mov	r3, r0
 8009406:	2b01      	cmp	r3, #1
 8009408:	d001      	beq.n	800940e <osMutexWait+0x62>
      return osErrorOS;
 800940a:	23ff      	movs	r3, #255	@ 0xff
 800940c:	e015      	b.n	800943a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d011      	beq.n	8009438 <osMutexWait+0x8c>
 8009414:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <osMutexWait+0x98>)
 8009416:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	e008      	b.n	8009438 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 ff29 	bl	800a280 <xQueueSemaphoreTake>
 800942e:	4603      	mov	r3, r0
 8009430:	2b01      	cmp	r3, #1
 8009432:	d001      	beq.n	8009438 <osMutexWait+0x8c>
    return osErrorOS;
 8009434:	23ff      	movs	r3, #255	@ 0xff
 8009436:	e000      	b.n	800943a <osMutexWait+0x8e>
  }
  
  return osOK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	e000ed04 	.word	0xe000ed04

08009448 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009450:	2300      	movs	r3, #0
 8009452:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009458:	f7ff ff07 	bl	800926a <inHandlerMode>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d016      	beq.n	8009490 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009462:	f107 0308 	add.w	r3, r7, #8
 8009466:	4619      	mov	r1, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fd97 	bl	8009f9c <xQueueGiveFromISR>
 800946e:	4603      	mov	r3, r0
 8009470:	2b01      	cmp	r3, #1
 8009472:	d001      	beq.n	8009478 <osMutexRelease+0x30>
      return osErrorOS;
 8009474:	23ff      	movs	r3, #255	@ 0xff
 8009476:	e017      	b.n	80094a8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d013      	beq.n	80094a6 <osMutexRelease+0x5e>
 800947e:	4b0c      	ldr	r3, [pc, #48]	@ (80094b0 <osMutexRelease+0x68>)
 8009480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	e00a      	b.n	80094a6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009490:	2300      	movs	r3, #0
 8009492:	2200      	movs	r2, #0
 8009494:	2100      	movs	r1, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fbe0 	bl	8009c5c <xQueueGenericSend>
 800949c:	4603      	mov	r3, r0
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d001      	beq.n	80094a6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80094a2:	23ff      	movs	r3, #255	@ 0xff
 80094a4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80094a6:	68fb      	ldr	r3, [r7, #12]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	e000ed04 	.word	0xe000ed04

080094b4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00f      	beq.n	80094e6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d10a      	bne.n	80094e2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2203      	movs	r2, #3
 80094d2:	9200      	str	r2, [sp, #0]
 80094d4:	2200      	movs	r2, #0
 80094d6:	2100      	movs	r1, #0
 80094d8:	2001      	movs	r0, #1
 80094da:	f000 fa9b 	bl	8009a14 <xQueueGenericCreateStatic>
 80094de:	4603      	mov	r3, r0
 80094e0:	e016      	b.n	8009510 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e014      	b.n	8009510 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d110      	bne.n	800950e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80094ec:	2203      	movs	r2, #3
 80094ee:	2100      	movs	r1, #0
 80094f0:	2001      	movs	r0, #1
 80094f2:	f000 fb0c 	bl	8009b0e <xQueueGenericCreate>
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <osSemaphoreCreate+0x56>
 80094fe:	2300      	movs	r3, #0
 8009500:	2200      	movs	r2, #0
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fba9 	bl	8009c5c <xQueueGenericSend>
      return sema;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	e000      	b.n	8009510 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800950e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800952c:	2380      	movs	r3, #128	@ 0x80
 800952e:	e03a      	b.n	80095a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d103      	bne.n	8009544 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800953c:	f04f 33ff 	mov.w	r3, #4294967295
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e009      	b.n	8009558 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d006      	beq.n	8009558 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <osSemaphoreWait+0x40>
      ticks = 1;
 8009554:	2301      	movs	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009558:	f7ff fe87 	bl	800926a <inHandlerMode>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d017      	beq.n	8009592 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	461a      	mov	r2, r3
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 ff98 	bl	800a4a0 <xQueueReceiveFromISR>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009576:	23ff      	movs	r3, #255	@ 0xff
 8009578:	e015      	b.n	80095a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d011      	beq.n	80095a4 <osSemaphoreWait+0x8c>
 8009580:	4b0b      	ldr	r3, [pc, #44]	@ (80095b0 <osSemaphoreWait+0x98>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	e008      	b.n	80095a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009592:	68f9      	ldr	r1, [r7, #12]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fe73 	bl	800a280 <xQueueSemaphoreTake>
 800959a:	4603      	mov	r3, r0
 800959c:	2b01      	cmp	r3, #1
 800959e:	d001      	beq.n	80095a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80095a0:	23ff      	movs	r3, #255	@ 0xff
 80095a2:	e000      	b.n	80095a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80095c4:	f7ff fe51 	bl	800926a <inHandlerMode>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d016      	beq.n	80095fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80095ce:	f107 0308 	add.w	r3, r7, #8
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fce1 	bl	8009f9c <xQueueGiveFromISR>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d001      	beq.n	80095e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80095e0:	23ff      	movs	r3, #255	@ 0xff
 80095e2:	e017      	b.n	8009614 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d013      	beq.n	8009612 <osSemaphoreRelease+0x5e>
 80095ea:	4b0c      	ldr	r3, [pc, #48]	@ (800961c <osSemaphoreRelease+0x68>)
 80095ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	e00a      	b.n	8009612 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80095fc:	2300      	movs	r3, #0
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb2a 	bl	8009c5c <xQueueGenericSend>
 8009608:	4603      	mov	r3, r0
 800960a:	2b01      	cmp	r3, #1
 800960c:	d001      	beq.n	8009612 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800960e:	23ff      	movs	r3, #255	@ 0xff
 8009610:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b085      	sub	sp, #20
 8009624:	af02      	add	r7, sp, #8
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d011      	beq.n	8009656 <osMessageCreate+0x36>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00d      	beq.n	8009656 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6859      	ldr	r1, [r3, #4]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	2400      	movs	r4, #0
 800964c:	9400      	str	r4, [sp, #0]
 800964e:	f000 f9e1 	bl	8009a14 <xQueueGenericCreateStatic>
 8009652:	4603      	mov	r3, r0
 8009654:	e008      	b.n	8009668 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	4619      	mov	r1, r3
 8009662:	f000 fa54 	bl	8009b0e <xQueueGenericCreate>
 8009666:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bd90      	pop	{r4, r7, pc}

08009670 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800967c:	2300      	movs	r3, #0
 800967e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d101      	bne.n	800968e <osMessagePut+0x1e>
    ticks = 1;
 800968a:	2301      	movs	r3, #1
 800968c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800968e:	f7ff fdec 	bl	800926a <inHandlerMode>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d018      	beq.n	80096ca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009698:	f107 0210 	add.w	r2, r7, #16
 800969c:	f107 0108 	add.w	r1, r7, #8
 80096a0:	2300      	movs	r3, #0
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 fbdc 	bl	8009e60 <xQueueGenericSendFromISR>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d001      	beq.n	80096b2 <osMessagePut+0x42>
      return osErrorOS;
 80096ae:	23ff      	movs	r3, #255	@ 0xff
 80096b0:	e018      	b.n	80096e4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d014      	beq.n	80096e2 <osMessagePut+0x72>
 80096b8:	4b0c      	ldr	r3, [pc, #48]	@ (80096ec <osMessagePut+0x7c>)
 80096ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	e00b      	b.n	80096e2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80096ca:	f107 0108 	add.w	r1, r7, #8
 80096ce:	2300      	movs	r3, #0
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fac2 	bl	8009c5c <xQueueGenericSend>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d001      	beq.n	80096e2 <osMessagePut+0x72>
      return osErrorOS;
 80096de:	23ff      	movs	r3, #255	@ 0xff
 80096e0:	e000      	b.n	80096e4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	e000ed04 	.word	0xe000ed04

080096f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b08b      	sub	sp, #44	@ 0x2c
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10a      	bne.n	8009720 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800970a:	2380      	movs	r3, #128	@ 0x80
 800970c:	617b      	str	r3, [r7, #20]
    return event;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	461c      	mov	r4, r3
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800971a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800971e:	e054      	b.n	80097ca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009720:	2300      	movs	r3, #0
 8009722:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d103      	bne.n	8009738 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009730:	f04f 33ff 	mov.w	r3, #4294967295
 8009734:	627b      	str	r3, [r7, #36]	@ 0x24
 8009736:	e009      	b.n	800974c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d006      	beq.n	800974c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <osMessageGet+0x5c>
      ticks = 1;
 8009748:	2301      	movs	r3, #1
 800974a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800974c:	f7ff fd8d 	bl	800926a <inHandlerMode>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d01c      	beq.n	8009790 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009756:	f107 0220 	add.w	r2, r7, #32
 800975a:	f107 0314 	add.w	r3, r7, #20
 800975e:	3304      	adds	r3, #4
 8009760:	4619      	mov	r1, r3
 8009762:	68b8      	ldr	r0, [r7, #8]
 8009764:	f000 fe9c 	bl	800a4a0 <xQueueReceiveFromISR>
 8009768:	4603      	mov	r3, r0
 800976a:	2b01      	cmp	r3, #1
 800976c:	d102      	bne.n	8009774 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800976e:	2310      	movs	r3, #16
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	e001      	b.n	8009778 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d01d      	beq.n	80097ba <osMessageGet+0xca>
 800977e:	4b15      	ldr	r3, [pc, #84]	@ (80097d4 <osMessageGet+0xe4>)
 8009780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	e014      	b.n	80097ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009790:	f107 0314 	add.w	r3, r7, #20
 8009794:	3304      	adds	r3, #4
 8009796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009798:	4619      	mov	r1, r3
 800979a:	68b8      	ldr	r0, [r7, #8]
 800979c:	f000 fc8e 	bl	800a0bc <xQueueReceive>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d102      	bne.n	80097ac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80097a6:	2310      	movs	r3, #16
 80097a8:	617b      	str	r3, [r7, #20]
 80097aa:	e006      	b.n	80097ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <osMessageGet+0xc6>
 80097b2:	2300      	movs	r3, #0
 80097b4:	e000      	b.n	80097b8 <osMessageGet+0xc8>
 80097b6:	2340      	movs	r3, #64	@ 0x40
 80097b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	461c      	mov	r4, r3
 80097be:	f107 0314 	add.w	r3, r7, #20
 80097c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	372c      	adds	r7, #44	@ 0x2c
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd90      	pop	{r4, r7, pc}
 80097d2:	bf00      	nop
 80097d4:	e000ed04 	.word	0xe000ed04

080097d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f103 0208 	add.w	r2, r3, #8
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295
 80097f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f103 0208 	add.w	r2, r3, #8
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f103 0208 	add.w	r2, r3, #8
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
}
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800987a:	b480      	push	{r7}
 800987c:	b085      	sub	sp, #20
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d103      	bne.n	800989a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	e00c      	b.n	80098b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3308      	adds	r3, #8
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	e002      	b.n	80098a8 <vListInsert+0x2e>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d2f6      	bcs.n	80098a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	601a      	str	r2, [r3, #0]
}
 80098e0:	bf00      	nop
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	6892      	ldr	r2, [r2, #8]
 8009902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	6852      	ldr	r2, [r2, #4]
 800990c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	429a      	cmp	r2, r3
 8009916:	d103      	bne.n	8009920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	1e5a      	subs	r2, r3, #1
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10b      	bne.n	800996c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009966:	bf00      	nop
 8009968:	bf00      	nop
 800996a:	e7fd      	b.n	8009968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800996c:	f002 f894 	bl	800ba98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009978:	68f9      	ldr	r1, [r7, #12]
 800997a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800997c:	fb01 f303 	mul.w	r3, r1, r3
 8009980:	441a      	add	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999c:	3b01      	subs	r3, #1
 800999e:	68f9      	ldr	r1, [r7, #12]
 80099a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	441a      	add	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	22ff      	movs	r2, #255	@ 0xff
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	22ff      	movs	r2, #255	@ 0xff
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d114      	bne.n	80099ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01a      	beq.n	8009a00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3310      	adds	r3, #16
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fb4a 	bl	800b068 <xTaskRemoveFromEventList>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d012      	beq.n	8009a00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099da:	4b0d      	ldr	r3, [pc, #52]	@ (8009a10 <xQueueGenericReset+0xd0>)
 80099dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	e009      	b.n	8009a00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3310      	adds	r3, #16
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fef1 	bl	80097d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3324      	adds	r3, #36	@ 0x24
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff feec 	bl	80097d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a00:	f002 f87c 	bl	800bafc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a04:	2301      	movs	r3, #1
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	e000ed04 	.word	0xe000ed04

08009a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08e      	sub	sp, #56	@ 0x38
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	e7fd      	b.n	8009a3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10b      	bne.n	8009a5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	e7fd      	b.n	8009a5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <xQueueGenericCreateStatic+0x56>
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <xQueueGenericCreateStatic+0x5a>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <xQueueGenericCreateStatic+0x5c>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10b      	bne.n	8009a8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	623b      	str	r3, [r7, #32]
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	e7fd      	b.n	8009a88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <xQueueGenericCreateStatic+0x84>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <xQueueGenericCreateStatic+0x88>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e000      	b.n	8009a9e <xQueueGenericCreateStatic+0x8a>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	61fb      	str	r3, [r7, #28]
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	e7fd      	b.n	8009ab6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009aba:	2348      	movs	r3, #72	@ 0x48
 8009abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b48      	cmp	r3, #72	@ 0x48
 8009ac2:	d00b      	beq.n	8009adc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	61bb      	str	r3, [r7, #24]
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009adc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00d      	beq.n	8009b04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009af0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	4613      	mov	r3, r2
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	68b9      	ldr	r1, [r7, #8]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 f840 	bl	8009b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3730      	adds	r7, #48	@ 0x30
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b08a      	sub	sp, #40	@ 0x28
 8009b12:	af02      	add	r7, sp, #8
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	613b      	str	r3, [r7, #16]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	3348      	adds	r3, #72	@ 0x48
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f002 f8c7 	bl	800bcdc <pvPortMalloc>
 8009b4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d011      	beq.n	8009b7a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	3348      	adds	r3, #72	@ 0x48
 8009b5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	68b9      	ldr	r1, [r7, #8]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f805 	bl	8009b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3720      	adds	r7, #32
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d103      	bne.n	8009ba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	e002      	b.n	8009ba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	69b8      	ldr	r0, [r7, #24]
 8009bb6:	f7ff fec3 	bl	8009940 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bba:	bf00      	nop
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00e      	beq.n	8009bee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009be2:	2300      	movs	r3, #0
 8009be4:	2200      	movs	r2, #0
 8009be6:	2100      	movs	r1, #0
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f837 	bl	8009c5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b086      	sub	sp, #24
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c00:	2301      	movs	r3, #1
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	2300      	movs	r3, #0
 8009c06:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009c08:	79fb      	ldrb	r3, [r7, #7]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6939      	ldr	r1, [r7, #16]
 8009c0e:	6978      	ldr	r0, [r7, #20]
 8009c10:	f7ff ff7d 	bl	8009b0e <xQueueGenericCreate>
 8009c14:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff ffd3 	bl	8009bc2 <prvInitialiseMutex>

		return xNewQueue;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
	}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b088      	sub	sp, #32
 8009c2a:	af02      	add	r7, sp, #8
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	6039      	str	r1, [r7, #0]
 8009c30:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c32:	2301      	movs	r3, #1
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	2300      	movs	r3, #0
 8009c38:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	6939      	ldr	r1, [r7, #16]
 8009c44:	6978      	ldr	r0, [r7, #20]
 8009c46:	f7ff fee5 	bl	8009a14 <xQueueGenericCreateStatic>
 8009c4a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7ff ffb8 	bl	8009bc2 <prvInitialiseMutex>

		return xNewQueue;
 8009c52:	68fb      	ldr	r3, [r7, #12]
	}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08e      	sub	sp, #56	@ 0x38
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10b      	bne.n	8009c90 <xQueueGenericSend+0x34>
	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	e7fd      	b.n	8009c8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d103      	bne.n	8009c9e <xQueueGenericSend+0x42>
 8009c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <xQueueGenericSend+0x46>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <xQueueGenericSend+0x48>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <xQueueGenericSend+0x64>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	e7fd      	b.n	8009cbc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d103      	bne.n	8009cce <xQueueGenericSend+0x72>
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <xQueueGenericSend+0x76>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <xQueueGenericSend+0x78>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10b      	bne.n	8009cf0 <xQueueGenericSend+0x94>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	623b      	str	r3, [r7, #32]
}
 8009cea:	bf00      	nop
 8009cec:	bf00      	nop
 8009cee:	e7fd      	b.n	8009cec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cf0:	f001 fb7a 	bl	800b3e8 <xTaskGetSchedulerState>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <xQueueGenericSend+0xa4>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <xQueueGenericSend+0xa8>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <xQueueGenericSend+0xaa>
 8009d04:	2300      	movs	r3, #0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10b      	bne.n	8009d22 <xQueueGenericSend+0xc6>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	61fb      	str	r3, [r7, #28]
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	e7fd      	b.n	8009d1e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d22:	f001 feb9 	bl	800ba98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xQueueGenericSend+0xdc>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d129      	bne.n	8009d8c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d3e:	f000 fc49 	bl	800a5d4 <prvCopyDataToQueue>
 8009d42:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d010      	beq.n	8009d6e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	3324      	adds	r3, #36	@ 0x24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 f989 	bl	800b068 <xTaskRemoveFromEventList>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d013      	beq.n	8009d84 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8009e5c <xQueueGenericSend+0x200>)
 8009d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	e00a      	b.n	8009d84 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d74:	4b39      	ldr	r3, [pc, #228]	@ (8009e5c <xQueueGenericSend+0x200>)
 8009d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d84:	f001 feba 	bl	800bafc <vPortExitCritical>
				return pdPASS;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e063      	b.n	8009e54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d103      	bne.n	8009d9a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d92:	f001 feb3 	bl	800bafc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e05c      	b.n	8009e54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d106      	bne.n	8009dae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009da0:	f107 0314 	add.w	r3, r7, #20
 8009da4:	4618      	mov	r0, r3
 8009da6:	f001 f9c3 	bl	800b130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009daa:	2301      	movs	r3, #1
 8009dac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dae:	f001 fea5 	bl	800bafc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009db2:	f000 ff4f 	bl	800ac54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009db6:	f001 fe6f 	bl	800ba98 <vPortEnterCritical>
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dc0:	b25b      	sxtb	r3, r3
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d103      	bne.n	8009dd0 <xQueueGenericSend+0x174>
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dd6:	b25b      	sxtb	r3, r3
 8009dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ddc:	d103      	bne.n	8009de6 <xQueueGenericSend+0x18a>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009de6:	f001 fe89 	bl	800bafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dea:	1d3a      	adds	r2, r7, #4
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f001 f9b2 	bl	800b15c <xTaskCheckForTimeOut>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d124      	bne.n	8009e48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e00:	f000 fce0 	bl	800a7c4 <prvIsQueueFull>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d018      	beq.n	8009e3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0c:	3310      	adds	r3, #16
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	4611      	mov	r1, r2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f001 f902 	bl	800b01c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e1a:	f000 fc6b 	bl	800a6f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e1e:	f000 ff27 	bl	800ac70 <xTaskResumeAll>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f47f af7c 	bne.w	8009d22 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e5c <xQueueGenericSend+0x200>)
 8009e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	e772      	b.n	8009d22 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e3e:	f000 fc59 	bl	800a6f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e42:	f000 ff15 	bl	800ac70 <xTaskResumeAll>
 8009e46:	e76c      	b.n	8009d22 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e4a:	f000 fc53 	bl	800a6f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e4e:	f000 ff0f 	bl	800ac70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3738      	adds	r7, #56	@ 0x38
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b090      	sub	sp, #64	@ 0x40
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d103      	bne.n	8009e9e <xQueueGenericSendFromISR+0x3e>
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d101      	bne.n	8009ea2 <xQueueGenericSendFromISR+0x42>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e000      	b.n	8009ea4 <xQueueGenericSendFromISR+0x44>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10b      	bne.n	8009ec0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
 8009ebe:	e7fd      	b.n	8009ebc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d103      	bne.n	8009ece <xQueueGenericSendFromISR+0x6e>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d101      	bne.n	8009ed2 <xQueueGenericSendFromISR+0x72>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <xQueueGenericSendFromISR+0x74>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10b      	bne.n	8009ef0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	623b      	str	r3, [r7, #32]
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	e7fd      	b.n	8009eec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ef0:	f001 feb2 	bl	800bc58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ef4:	f3ef 8211 	mrs	r2, BASEPRI
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	61fa      	str	r2, [r7, #28]
 8009f0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d302      	bcc.n	8009f22 <xQueueGenericSendFromISR+0xc2>
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d12f      	bne.n	8009f82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f38:	f000 fb4c 	bl	800a5d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f44:	d112      	bne.n	8009f6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d016      	beq.n	8009f7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f50:	3324      	adds	r3, #36	@ 0x24
 8009f52:	4618      	mov	r0, r3
 8009f54:	f001 f888 	bl	800b068 <xTaskRemoveFromEventList>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00e      	beq.n	8009f7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00b      	beq.n	8009f7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e007      	b.n	8009f7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009f70:	3301      	adds	r3, #1
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	b25a      	sxtb	r2, r3
 8009f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009f80:	e001      	b.n	8009f86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3740      	adds	r7, #64	@ 0x40
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08e      	sub	sp, #56	@ 0x38
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10b      	bne.n	8009fc8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	623b      	str	r3, [r7, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	bf00      	nop
 8009fc6:	e7fd      	b.n	8009fc4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	61fb      	str	r3, [r7, #28]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d103      	bne.n	8009ff8 <xQueueGiveFromISR+0x5c>
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <xQueueGiveFromISR+0x60>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e000      	b.n	8009ffe <xQueueGiveFromISR+0x62>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	61bb      	str	r3, [r7, #24]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a01a:	f001 fe1d 	bl	800bc58 <vPortValidateInterruptPriority>
	__asm volatile
 800a01e:	f3ef 8211 	mrs	r2, BASEPRI
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	617a      	str	r2, [r7, #20]
 800a034:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a036:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a038:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a046:	429a      	cmp	r2, r3
 800a048:	d22b      	bcs.n	800a0a2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a05c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a064:	d112      	bne.n	800a08c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d016      	beq.n	800a09c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	3324      	adds	r3, #36	@ 0x24
 800a072:	4618      	mov	r0, r3
 800a074:	f000 fff8 	bl	800b068 <xTaskRemoveFromEventList>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00e      	beq.n	800a09c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2201      	movs	r2, #1
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	e007      	b.n	800a09c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a08c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a090:	3301      	adds	r3, #1
 800a092:	b2db      	uxtb	r3, r3
 800a094:	b25a      	sxtb	r2, r3
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a09c:	2301      	movs	r3, #1
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a0:	e001      	b.n	800a0a6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f383 8811 	msr	BASEPRI, r3
}
 800a0b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3738      	adds	r7, #56	@ 0x38
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08c      	sub	sp, #48	@ 0x30
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10b      	bne.n	800a0ee <xQueueReceive+0x32>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	623b      	str	r3, [r7, #32]
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	e7fd      	b.n	800a0ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <xQueueReceive+0x40>
 800a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <xQueueReceive+0x44>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e000      	b.n	800a102 <xQueueReceive+0x46>
 800a100:	2300      	movs	r3, #0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <xQueueReceive+0x62>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	61fb      	str	r3, [r7, #28]
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a11e:	f001 f963 	bl	800b3e8 <xTaskGetSchedulerState>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <xQueueReceive+0x72>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <xQueueReceive+0x76>
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <xQueueReceive+0x78>
 800a132:	2300      	movs	r3, #0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10b      	bne.n	800a150 <xQueueReceive+0x94>
	__asm volatile
 800a138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	61bb      	str	r3, [r7, #24]
}
 800a14a:	bf00      	nop
 800a14c:	bf00      	nop
 800a14e:	e7fd      	b.n	800a14c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a150:	f001 fca2 	bl	800ba98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01f      	beq.n	800a1a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a164:	f000 faa0 	bl	800a6a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	1e5a      	subs	r2, r3, #1
 800a16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00f      	beq.n	800a198 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17a:	3310      	adds	r3, #16
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 ff73 	bl	800b068 <xTaskRemoveFromEventList>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d007      	beq.n	800a198 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a188:	4b3c      	ldr	r3, [pc, #240]	@ (800a27c <xQueueReceive+0x1c0>)
 800a18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a198:	f001 fcb0 	bl	800bafc <vPortExitCritical>
				return pdPASS;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e069      	b.n	800a274 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d103      	bne.n	800a1ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1a6:	f001 fca9 	bl	800bafc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e062      	b.n	800a274 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d106      	bne.n	800a1c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1b4:	f107 0310 	add.w	r3, r7, #16
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 ffb9 	bl	800b130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1c2:	f001 fc9b 	bl	800bafc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1c6:	f000 fd45 	bl	800ac54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1ca:	f001 fc65 	bl	800ba98 <vPortEnterCritical>
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1d4:	b25b      	sxtb	r3, r3
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d103      	bne.n	800a1e4 <xQueueReceive+0x128>
 800a1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1ea:	b25b      	sxtb	r3, r3
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f0:	d103      	bne.n	800a1fa <xQueueReceive+0x13e>
 800a1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1fa:	f001 fc7f 	bl	800bafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1fe:	1d3a      	adds	r2, r7, #4
 800a200:	f107 0310 	add.w	r3, r7, #16
 800a204:	4611      	mov	r1, r2
 800a206:	4618      	mov	r0, r3
 800a208:	f000 ffa8 	bl	800b15c <xTaskCheckForTimeOut>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d123      	bne.n	800a25a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a214:	f000 fac0 	bl	800a798 <prvIsQueueEmpty>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d017      	beq.n	800a24e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	3324      	adds	r3, #36	@ 0x24
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f000 fef8 	bl	800b01c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a22c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a22e:	f000 fa61 	bl	800a6f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a232:	f000 fd1d 	bl	800ac70 <xTaskResumeAll>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d189      	bne.n	800a150 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a23c:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <xQueueReceive+0x1c0>)
 800a23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	e780      	b.n	800a150 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a24e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a250:	f000 fa50 	bl	800a6f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a254:	f000 fd0c 	bl	800ac70 <xTaskResumeAll>
 800a258:	e77a      	b.n	800a150 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a25c:	f000 fa4a 	bl	800a6f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a260:	f000 fd06 	bl	800ac70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a264:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a266:	f000 fa97 	bl	800a798 <prvIsQueueEmpty>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f43f af6f 	beq.w	800a150 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a272:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a274:	4618      	mov	r0, r3
 800a276:	3730      	adds	r7, #48	@ 0x30
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	@ 0x38
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a292:	2300      	movs	r3, #0
 800a294:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10b      	bne.n	800a2b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	623b      	str	r3, [r7, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	e7fd      	b.n	800a2b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00b      	beq.n	800a2d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	61fb      	str	r3, [r7, #28]
}
 800a2ce:	bf00      	nop
 800a2d0:	bf00      	nop
 800a2d2:	e7fd      	b.n	800a2d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2d4:	f001 f888 	bl	800b3e8 <xTaskGetSchedulerState>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d102      	bne.n	800a2e4 <xQueueSemaphoreTake+0x64>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <xQueueSemaphoreTake+0x68>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e000      	b.n	800a2ea <xQueueSemaphoreTake+0x6a>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10b      	bne.n	800a306 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	61bb      	str	r3, [r7, #24]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a306:	f001 fbc7 	bl	800ba98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a312:	2b00      	cmp	r3, #0
 800a314:	d024      	beq.n	800a360 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a318:	1e5a      	subs	r2, r3, #1
 800a31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d104      	bne.n	800a330 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a326:	f001 fa0b 	bl	800b740 <pvTaskIncrementMutexHeldCount>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00f      	beq.n	800a358 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33a:	3310      	adds	r3, #16
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fe93 	bl	800b068 <xTaskRemoveFromEventList>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d007      	beq.n	800a358 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a348:	4b54      	ldr	r3, [pc, #336]	@ (800a49c <xQueueSemaphoreTake+0x21c>)
 800a34a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a358:	f001 fbd0 	bl	800bafc <vPortExitCritical>
				return pdPASS;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e098      	b.n	800a492 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d112      	bne.n	800a38c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00b      	beq.n	800a384 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	617b      	str	r3, [r7, #20]
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	e7fd      	b.n	800a380 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a384:	f001 fbba 	bl	800bafc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a388:	2300      	movs	r3, #0
 800a38a:	e082      	b.n	800a492 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a392:	f107 030c 	add.w	r3, r7, #12
 800a396:	4618      	mov	r0, r3
 800a398:	f000 feca 	bl	800b130 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3a0:	f001 fbac 	bl	800bafc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3a4:	f000 fc56 	bl	800ac54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3a8:	f001 fb76 	bl	800ba98 <vPortEnterCritical>
 800a3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3b2:	b25b      	sxtb	r3, r3
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b8:	d103      	bne.n	800a3c2 <xQueueSemaphoreTake+0x142>
 800a3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3c8:	b25b      	sxtb	r3, r3
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ce:	d103      	bne.n	800a3d8 <xQueueSemaphoreTake+0x158>
 800a3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3d8:	f001 fb90 	bl	800bafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3dc:	463a      	mov	r2, r7
 800a3de:	f107 030c 	add.w	r3, r7, #12
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 feb9 	bl	800b15c <xTaskCheckForTimeOut>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d132      	bne.n	800a456 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3f2:	f000 f9d1 	bl	800a798 <prvIsQueueEmpty>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d026      	beq.n	800a44a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a404:	f001 fb48 	bl	800ba98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 f809 	bl	800b424 <xTaskPriorityInherit>
 800a412:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a414:	f001 fb72 	bl	800bafc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41a:	3324      	adds	r3, #36	@ 0x24
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	4611      	mov	r1, r2
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fdfb 	bl	800b01c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a426:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a428:	f000 f964 	bl	800a6f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a42c:	f000 fc20 	bl	800ac70 <xTaskResumeAll>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	f47f af67 	bne.w	800a306 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a438:	4b18      	ldr	r3, [pc, #96]	@ (800a49c <xQueueSemaphoreTake+0x21c>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	e75d      	b.n	800a306 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a44a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a44c:	f000 f952 	bl	800a6f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a450:	f000 fc0e 	bl	800ac70 <xTaskResumeAll>
 800a454:	e757      	b.n	800a306 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a458:	f000 f94c 	bl	800a6f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a45c:	f000 fc08 	bl	800ac70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a462:	f000 f999 	bl	800a798 <prvIsQueueEmpty>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f43f af4c 	beq.w	800a306 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00d      	beq.n	800a490 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a474:	f001 fb10 	bl	800ba98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a47a:	f000 f893 	bl	800a5a4 <prvGetDisinheritPriorityAfterTimeout>
 800a47e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f001 f8ca 	bl	800b620 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a48c:	f001 fb36 	bl	800bafc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a492:	4618      	mov	r0, r3
 800a494:	3738      	adds	r7, #56	@ 0x38
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	e000ed04 	.word	0xe000ed04

0800a4a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08e      	sub	sp, #56	@ 0x38
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10b      	bne.n	800a4ce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	623b      	str	r3, [r7, #32]
}
 800a4c8:	bf00      	nop
 800a4ca:	bf00      	nop
 800a4cc:	e7fd      	b.n	800a4ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <xQueueReceiveFromISR+0x3c>
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <xQueueReceiveFromISR+0x40>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e000      	b.n	800a4e2 <xQueueReceiveFromISR+0x42>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	61fb      	str	r3, [r7, #28]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4fe:	f001 fbab 	bl	800bc58 <vPortValidateInterruptPriority>
	__asm volatile
 800a502:	f3ef 8211 	mrs	r2, BASEPRI
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	61ba      	str	r2, [r7, #24]
 800a518:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a51a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a51c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a522:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a526:	2b00      	cmp	r3, #0
 800a528:	d02f      	beq.n	800a58a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a534:	68b9      	ldr	r1, [r7, #8]
 800a536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a538:	f000 f8b6 	bl	800a6a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53e:	1e5a      	subs	r2, r3, #1
 800a540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a542:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a544:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54c:	d112      	bne.n	800a574 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d016      	beq.n	800a584 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a558:	3310      	adds	r3, #16
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fd84 	bl	800b068 <xTaskRemoveFromEventList>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00e      	beq.n	800a584 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00b      	beq.n	800a584 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	e007      	b.n	800a584 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a578:	3301      	adds	r3, #1
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	b25a      	sxtb	r2, r3
 800a57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a584:	2301      	movs	r3, #1
 800a586:	637b      	str	r3, [r7, #52]	@ 0x34
 800a588:	e001      	b.n	800a58e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a590:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f383 8811 	msr	BASEPRI, r3
}
 800a598:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3738      	adds	r7, #56	@ 0x38
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f1c3 0307 	rsb	r3, r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	e001      	b.n	800a5c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10d      	bne.n	800a60e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d14d      	bne.n	800a696 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 ff86 	bl	800b510 <xTaskPriorityDisinherit>
 800a604:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	609a      	str	r2, [r3, #8]
 800a60c:	e043      	b.n	800a696 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d119      	bne.n	800a648 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6858      	ldr	r0, [r3, #4]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61c:	461a      	mov	r2, r3
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	f00e fa67 	bl	8018af2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62c:	441a      	add	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d32b      	bcc.n	800a696 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
 800a646:	e026      	b.n	800a696 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	68d8      	ldr	r0, [r3, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a650:	461a      	mov	r2, r3
 800a652:	68b9      	ldr	r1, [r7, #8]
 800a654:	f00e fa4d 	bl	8018af2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a660:	425b      	negs	r3, r3
 800a662:	441a      	add	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d207      	bcs.n	800a684 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67c:	425b      	negs	r3, r3
 800a67e:	441a      	add	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b02      	cmp	r3, #2
 800a688:	d105      	bne.n	800a696 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3b01      	subs	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a69e:	697b      	ldr	r3, [r7, #20]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d018      	beq.n	800a6ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	68da      	ldr	r2, [r3, #12]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c2:	441a      	add	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d303      	bcc.n	800a6dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68d9      	ldr	r1, [r3, #12]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	6838      	ldr	r0, [r7, #0]
 800a6e8:	f00e fa03 	bl	8018af2 <memcpy>
	}
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a6fc:	f001 f9cc 	bl	800ba98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a706:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a708:	e011      	b.n	800a72e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d012      	beq.n	800a738 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	3324      	adds	r3, #36	@ 0x24
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fca6 	bl	800b068 <xTaskRemoveFromEventList>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a722:	f000 fd7f 	bl	800b224 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	3b01      	subs	r3, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a732:	2b00      	cmp	r3, #0
 800a734:	dce9      	bgt.n	800a70a <prvUnlockQueue+0x16>
 800a736:	e000      	b.n	800a73a <prvUnlockQueue+0x46>
					break;
 800a738:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	22ff      	movs	r2, #255	@ 0xff
 800a73e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a742:	f001 f9db 	bl	800bafc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a746:	f001 f9a7 	bl	800ba98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a750:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a752:	e011      	b.n	800a778 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d012      	beq.n	800a782 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3310      	adds	r3, #16
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fc81 	bl	800b068 <xTaskRemoveFromEventList>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a76c:	f000 fd5a 	bl	800b224 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	3b01      	subs	r3, #1
 800a774:	b2db      	uxtb	r3, r3
 800a776:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dce9      	bgt.n	800a754 <prvUnlockQueue+0x60>
 800a780:	e000      	b.n	800a784 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a782:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	22ff      	movs	r2, #255	@ 0xff
 800a788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a78c:	f001 f9b6 	bl	800bafc <vPortExitCritical>
}
 800a790:	bf00      	nop
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7a0:	f001 f97a 	bl	800ba98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	e001      	b.n	800a7b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7b6:	f001 f9a1 	bl	800bafc <vPortExitCritical>

	return xReturn;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7cc:	f001 f964 	bl	800ba98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d102      	bne.n	800a7e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	e001      	b.n	800a7e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7e6:	f001 f989 	bl	800bafc <vPortExitCritical>

	return xReturn;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b08e      	sub	sp, #56	@ 0x38
 800a7f8:	af04      	add	r7, sp, #16
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10b      	bne.n	800a820 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	623b      	str	r3, [r7, #32]
}
 800a81a:	bf00      	nop
 800a81c:	bf00      	nop
 800a81e:	e7fd      	b.n	800a81c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <xTaskCreateStatic+0x4a>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	61fb      	str	r3, [r7, #28]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a83e:	2354      	movs	r3, #84	@ 0x54
 800a840:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b54      	cmp	r3, #84	@ 0x54
 800a846:	d00b      	beq.n	800a860 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	61bb      	str	r3, [r7, #24]
}
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
 800a85e:	e7fd      	b.n	800a85c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a860:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01e      	beq.n	800a8a6 <xTaskCreateStatic+0xb2>
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01b      	beq.n	800a8a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a870:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a876:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	2202      	movs	r2, #2
 800a87c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a880:	2300      	movs	r3, #0
 800a882:	9303      	str	r3, [sp, #12]
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	9302      	str	r3, [sp, #8]
 800a888:	f107 0314 	add.w	r3, r7, #20
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f850 	bl	800a93e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a89e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8a0:	f000 f8d6 	bl	800aa50 <prvAddNewTaskToReadyList>
 800a8a4:	e001      	b.n	800a8aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8aa:	697b      	ldr	r3, [r7, #20]
	}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3728      	adds	r7, #40	@ 0x28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08c      	sub	sp, #48	@ 0x30
 800a8b8:	af04      	add	r7, sp, #16
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8c4:	88fb      	ldrh	r3, [r7, #6]
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 fa07 	bl	800bcdc <pvPortMalloc>
 800a8ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8d6:	2054      	movs	r0, #84	@ 0x54
 800a8d8:	f001 fa00 	bl	800bcdc <pvPortMalloc>
 800a8dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a8ea:	e005      	b.n	800a8f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8ec:	6978      	ldr	r0, [r7, #20]
 800a8ee:	f001 fac3 	bl	800be78 <vPortFree>
 800a8f2:	e001      	b.n	800a8f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d017      	beq.n	800a92e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a906:	88fa      	ldrh	r2, [r7, #6]
 800a908:	2300      	movs	r3, #0
 800a90a:	9303      	str	r3, [sp, #12]
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 f80e 	bl	800a93e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a922:	69f8      	ldr	r0, [r7, #28]
 800a924:	f000 f894 	bl	800aa50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a928:	2301      	movs	r3, #1
 800a92a:	61bb      	str	r3, [r7, #24]
 800a92c:	e002      	b.n	800a934 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295
 800a932:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a934:	69bb      	ldr	r3, [r7, #24]
	}
 800a936:	4618      	mov	r0, r3
 800a938:	3720      	adds	r7, #32
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b088      	sub	sp, #32
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
 800a94a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a956:	440b      	add	r3, r1
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	f023 0307 	bic.w	r3, r3, #7
 800a964:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f003 0307 	and.w	r3, r3, #7
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	617b      	str	r3, [r7, #20]
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d01f      	beq.n	800a9ce <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a98e:	2300      	movs	r3, #0
 800a990:	61fb      	str	r3, [r7, #28]
 800a992:	e012      	b.n	800a9ba <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	7819      	ldrb	r1, [r3, #0]
 800a99c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	3334      	adds	r3, #52	@ 0x34
 800a9a4:	460a      	mov	r2, r1
 800a9a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d006      	beq.n	800a9c2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	61fb      	str	r3, [r7, #28]
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	2b0f      	cmp	r3, #15
 800a9be:	d9e9      	bls.n	800a994 <prvInitialiseNewTask+0x56>
 800a9c0:	e000      	b.n	800a9c4 <prvInitialiseNewTask+0x86>
			{
				break;
 800a9c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a9cc:	e003      	b.n	800a9d6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d8:	2b06      	cmp	r3, #6
 800a9da:	d901      	bls.n	800a9e0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9dc:	2306      	movs	r3, #6
 800a9de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ea:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe ff0e 	bl	8009818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fe:	3318      	adds	r3, #24
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fe ff09 	bl	8009818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0e:	f1c3 0207 	rsb	r2, r3, #7
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	2200      	movs	r2, #0
 800aa20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	68f9      	ldr	r1, [r7, #12]
 800aa2e:	69b8      	ldr	r0, [r7, #24]
 800aa30:	f000 ff00 	bl	800b834 <pxPortInitialiseStack>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa46:	bf00      	nop
 800aa48:	3720      	adds	r7, #32
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa58:	f001 f81e 	bl	800ba98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa5c:	4b2a      	ldr	r3, [pc, #168]	@ (800ab08 <prvAddNewTaskToReadyList+0xb8>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a29      	ldr	r2, [pc, #164]	@ (800ab08 <prvAddNewTaskToReadyList+0xb8>)
 800aa64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa66:	4b29      	ldr	r3, [pc, #164]	@ (800ab0c <prvAddNewTaskToReadyList+0xbc>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d109      	bne.n	800aa82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa6e:	4a27      	ldr	r2, [pc, #156]	@ (800ab0c <prvAddNewTaskToReadyList+0xbc>)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa74:	4b24      	ldr	r3, [pc, #144]	@ (800ab08 <prvAddNewTaskToReadyList+0xb8>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d110      	bne.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa7c:	f000 fbf6 	bl	800b26c <prvInitialiseTaskLists>
 800aa80:	e00d      	b.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa82:	4b23      	ldr	r3, [pc, #140]	@ (800ab10 <prvAddNewTaskToReadyList+0xc0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d109      	bne.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa8a:	4b20      	ldr	r3, [pc, #128]	@ (800ab0c <prvAddNewTaskToReadyList+0xbc>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d802      	bhi.n	800aa9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa98:	4a1c      	ldr	r2, [pc, #112]	@ (800ab0c <prvAddNewTaskToReadyList+0xbc>)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa9e:	4b1d      	ldr	r3, [pc, #116]	@ (800ab14 <prvAddNewTaskToReadyList+0xc4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab14 <prvAddNewTaskToReadyList+0xc4>)
 800aaa6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaac:	2201      	movs	r2, #1
 800aaae:	409a      	lsls	r2, r3
 800aab0:	4b19      	ldr	r3, [pc, #100]	@ (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	4a18      	ldr	r2, [pc, #96]	@ (800ab18 <prvAddNewTaskToReadyList+0xc8>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4a15      	ldr	r2, [pc, #84]	@ (800ab1c <prvAddNewTaskToReadyList+0xcc>)
 800aac8:	441a      	add	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7fe feae 	bl	8009832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aad6:	f001 f811 	bl	800bafc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aada:	4b0d      	ldr	r3, [pc, #52]	@ (800ab10 <prvAddNewTaskToReadyList+0xc0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00e      	beq.n	800ab00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aae2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab0c <prvAddNewTaskToReadyList+0xbc>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d207      	bcs.n	800ab00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aaf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab20 <prvAddNewTaskToReadyList+0xd0>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	240053e0 	.word	0x240053e0
 800ab0c:	240052e0 	.word	0x240052e0
 800ab10:	240053ec 	.word	0x240053ec
 800ab14:	240053fc 	.word	0x240053fc
 800ab18:	240053e8 	.word	0x240053e8
 800ab1c:	240052e4 	.word	0x240052e4
 800ab20:	e000ed04 	.word	0xe000ed04

0800ab24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d018      	beq.n	800ab68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab36:	4b14      	ldr	r3, [pc, #80]	@ (800ab88 <vTaskDelay+0x64>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <vTaskDelay+0x32>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	60bb      	str	r3, [r7, #8]
}
 800ab50:	bf00      	nop
 800ab52:	bf00      	nop
 800ab54:	e7fd      	b.n	800ab52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab56:	f000 f87d 	bl	800ac54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 fe03 	bl	800b768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab62:	f000 f885 	bl	800ac70 <xTaskResumeAll>
 800ab66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d107      	bne.n	800ab7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ab6e:	4b07      	ldr	r3, [pc, #28]	@ (800ab8c <vTaskDelay+0x68>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	24005408 	.word	0x24005408
 800ab8c:	e000ed04 	.word	0xe000ed04

0800ab90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	@ 0x28
 800ab94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab9e:	463a      	mov	r2, r7
 800aba0:	1d39      	adds	r1, r7, #4
 800aba2:	f107 0308 	add.w	r3, r7, #8
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f5 fd7a 	bl	80006a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	9202      	str	r2, [sp, #8]
 800abb4:	9301      	str	r3, [sp, #4]
 800abb6:	2300      	movs	r3, #0
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	2300      	movs	r3, #0
 800abbc:	460a      	mov	r2, r1
 800abbe:	491f      	ldr	r1, [pc, #124]	@ (800ac3c <vTaskStartScheduler+0xac>)
 800abc0:	481f      	ldr	r0, [pc, #124]	@ (800ac40 <vTaskStartScheduler+0xb0>)
 800abc2:	f7ff fe17 	bl	800a7f4 <xTaskCreateStatic>
 800abc6:	4603      	mov	r3, r0
 800abc8:	4a1e      	ldr	r2, [pc, #120]	@ (800ac44 <vTaskStartScheduler+0xb4>)
 800abca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800abcc:	4b1d      	ldr	r3, [pc, #116]	@ (800ac44 <vTaskStartScheduler+0xb4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800abd4:	2301      	movs	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	e001      	b.n	800abde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d116      	bne.n	800ac12 <vTaskStartScheduler+0x82>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	613b      	str	r3, [r7, #16]
}
 800abf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800abf8:	4b13      	ldr	r3, [pc, #76]	@ (800ac48 <vTaskStartScheduler+0xb8>)
 800abfa:	f04f 32ff 	mov.w	r2, #4294967295
 800abfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac00:	4b12      	ldr	r3, [pc, #72]	@ (800ac4c <vTaskStartScheduler+0xbc>)
 800ac02:	2201      	movs	r2, #1
 800ac04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac06:	4b12      	ldr	r3, [pc, #72]	@ (800ac50 <vTaskStartScheduler+0xc0>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac0c:	f000 fea0 	bl	800b950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac10:	e00f      	b.n	800ac32 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac18:	d10b      	bne.n	800ac32 <vTaskStartScheduler+0xa2>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	60fb      	str	r3, [r7, #12]
}
 800ac2c:	bf00      	nop
 800ac2e:	bf00      	nop
 800ac30:	e7fd      	b.n	800ac2e <vTaskStartScheduler+0x9e>
}
 800ac32:	bf00      	nop
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0801982c 	.word	0x0801982c
 800ac40:	0800b23d 	.word	0x0800b23d
 800ac44:	24005404 	.word	0x24005404
 800ac48:	24005400 	.word	0x24005400
 800ac4c:	240053ec 	.word	0x240053ec
 800ac50:	240053e4 	.word	0x240053e4

0800ac54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ac58:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <vTaskSuspendAll+0x18>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	4a03      	ldr	r2, [pc, #12]	@ (800ac6c <vTaskSuspendAll+0x18>)
 800ac60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ac62:	bf00      	nop
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	24005408 	.word	0x24005408

0800ac70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac7e:	4b42      	ldr	r3, [pc, #264]	@ (800ad88 <xTaskResumeAll+0x118>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d10b      	bne.n	800ac9e <xTaskResumeAll+0x2e>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac8a:	f383 8811 	msr	BASEPRI, r3
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f3bf 8f4f 	dsb	sy
 800ac96:	603b      	str	r3, [r7, #0]
}
 800ac98:	bf00      	nop
 800ac9a:	bf00      	nop
 800ac9c:	e7fd      	b.n	800ac9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac9e:	f000 fefb 	bl	800ba98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aca2:	4b39      	ldr	r3, [pc, #228]	@ (800ad88 <xTaskResumeAll+0x118>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	4a37      	ldr	r2, [pc, #220]	@ (800ad88 <xTaskResumeAll+0x118>)
 800acaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acac:	4b36      	ldr	r3, [pc, #216]	@ (800ad88 <xTaskResumeAll+0x118>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d161      	bne.n	800ad78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800acb4:	4b35      	ldr	r3, [pc, #212]	@ (800ad8c <xTaskResumeAll+0x11c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d05d      	beq.n	800ad78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acbc:	e02e      	b.n	800ad1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acbe:	4b34      	ldr	r3, [pc, #208]	@ (800ad90 <xTaskResumeAll+0x120>)
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3318      	adds	r3, #24
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fe0e 	bl	80098ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe fe09 	bl	80098ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acde:	2201      	movs	r2, #1
 800ace0:	409a      	lsls	r2, r3
 800ace2:	4b2c      	ldr	r3, [pc, #176]	@ (800ad94 <xTaskResumeAll+0x124>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	4a2a      	ldr	r2, [pc, #168]	@ (800ad94 <xTaskResumeAll+0x124>)
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4a27      	ldr	r2, [pc, #156]	@ (800ad98 <xTaskResumeAll+0x128>)
 800acfa:	441a      	add	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3304      	adds	r3, #4
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f7fe fd95 	bl	8009832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad0c:	4b23      	ldr	r3, [pc, #140]	@ (800ad9c <xTaskResumeAll+0x12c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d302      	bcc.n	800ad1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ad16:	4b22      	ldr	r3, [pc, #136]	@ (800ada0 <xTaskResumeAll+0x130>)
 800ad18:	2201      	movs	r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ad90 <xTaskResumeAll+0x120>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1cc      	bne.n	800acbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad2a:	f000 fb3d 	bl	800b3a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad2e:	4b1d      	ldr	r3, [pc, #116]	@ (800ada4 <xTaskResumeAll+0x134>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d010      	beq.n	800ad5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad3a:	f000 f859 	bl	800adf0 <xTaskIncrementTick>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ad44:	4b16      	ldr	r3, [pc, #88]	@ (800ada0 <xTaskResumeAll+0x130>)
 800ad46:	2201      	movs	r2, #1
 800ad48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1f1      	bne.n	800ad3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ad56:	4b13      	ldr	r3, [pc, #76]	@ (800ada4 <xTaskResumeAll+0x134>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad5c:	4b10      	ldr	r3, [pc, #64]	@ (800ada0 <xTaskResumeAll+0x130>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d009      	beq.n	800ad78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad64:	2301      	movs	r3, #1
 800ad66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad68:	4b0f      	ldr	r3, [pc, #60]	@ (800ada8 <xTaskResumeAll+0x138>)
 800ad6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad78:	f000 fec0 	bl	800bafc <vPortExitCritical>

	return xAlreadyYielded;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	24005408 	.word	0x24005408
 800ad8c:	240053e0 	.word	0x240053e0
 800ad90:	240053a0 	.word	0x240053a0
 800ad94:	240053e8 	.word	0x240053e8
 800ad98:	240052e4 	.word	0x240052e4
 800ad9c:	240052e0 	.word	0x240052e0
 800ada0:	240053f4 	.word	0x240053f4
 800ada4:	240053f0 	.word	0x240053f0
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800adb2:	4b05      	ldr	r3, [pc, #20]	@ (800adc8 <xTaskGetTickCount+0x1c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800adb8:	687b      	ldr	r3, [r7, #4]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	240053e4 	.word	0x240053e4

0800adcc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800add2:	f000 ff41 	bl	800bc58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800add6:	2300      	movs	r3, #0
 800add8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800adda:	4b04      	ldr	r3, [pc, #16]	@ (800adec <xTaskGetTickCountFromISR+0x20>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ade0:	683b      	ldr	r3, [r7, #0]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	240053e4 	.word	0x240053e4

0800adf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adf6:	2300      	movs	r3, #0
 800adf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adfa:	4b4f      	ldr	r3, [pc, #316]	@ (800af38 <xTaskIncrementTick+0x148>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f040 808f 	bne.w	800af22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae04:	4b4d      	ldr	r3, [pc, #308]	@ (800af3c <xTaskIncrementTick+0x14c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae0c:	4a4b      	ldr	r2, [pc, #300]	@ (800af3c <xTaskIncrementTick+0x14c>)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d121      	bne.n	800ae5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae18:	4b49      	ldr	r3, [pc, #292]	@ (800af40 <xTaskIncrementTick+0x150>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00b      	beq.n	800ae3a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	603b      	str	r3, [r7, #0]
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
 800ae38:	e7fd      	b.n	800ae36 <xTaskIncrementTick+0x46>
 800ae3a:	4b41      	ldr	r3, [pc, #260]	@ (800af40 <xTaskIncrementTick+0x150>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	4b40      	ldr	r3, [pc, #256]	@ (800af44 <xTaskIncrementTick+0x154>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a3e      	ldr	r2, [pc, #248]	@ (800af40 <xTaskIncrementTick+0x150>)
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	4a3e      	ldr	r2, [pc, #248]	@ (800af44 <xTaskIncrementTick+0x154>)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6013      	str	r3, [r2, #0]
 800ae4e:	4b3e      	ldr	r3, [pc, #248]	@ (800af48 <xTaskIncrementTick+0x158>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3301      	adds	r3, #1
 800ae54:	4a3c      	ldr	r2, [pc, #240]	@ (800af48 <xTaskIncrementTick+0x158>)
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	f000 faa6 	bl	800b3a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae5c:	4b3b      	ldr	r3, [pc, #236]	@ (800af4c <xTaskIncrementTick+0x15c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d348      	bcc.n	800aef8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae66:	4b36      	ldr	r3, [pc, #216]	@ (800af40 <xTaskIncrementTick+0x150>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d104      	bne.n	800ae7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae70:	4b36      	ldr	r3, [pc, #216]	@ (800af4c <xTaskIncrementTick+0x15c>)
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295
 800ae76:	601a      	str	r2, [r3, #0]
					break;
 800ae78:	e03e      	b.n	800aef8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae7a:	4b31      	ldr	r3, [pc, #196]	@ (800af40 <xTaskIncrementTick+0x150>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d203      	bcs.n	800ae9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae92:	4a2e      	ldr	r2, [pc, #184]	@ (800af4c <xTaskIncrementTick+0x15c>)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae98:	e02e      	b.n	800aef8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fe fd24 	bl	80098ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d004      	beq.n	800aeb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	3318      	adds	r3, #24
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe fd1b 	bl	80098ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeba:	2201      	movs	r2, #1
 800aebc:	409a      	lsls	r2, r3
 800aebe:	4b24      	ldr	r3, [pc, #144]	@ (800af50 <xTaskIncrementTick+0x160>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	4a22      	ldr	r2, [pc, #136]	@ (800af50 <xTaskIncrementTick+0x160>)
 800aec6:	6013      	str	r3, [r2, #0]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4a1f      	ldr	r2, [pc, #124]	@ (800af54 <xTaskIncrementTick+0x164>)
 800aed6:	441a      	add	r2, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	3304      	adds	r3, #4
 800aedc:	4619      	mov	r1, r3
 800aede:	4610      	mov	r0, r2
 800aee0:	f7fe fca7 	bl	8009832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee8:	4b1b      	ldr	r3, [pc, #108]	@ (800af58 <xTaskIncrementTick+0x168>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d3b9      	bcc.n	800ae66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef6:	e7b6      	b.n	800ae66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aef8:	4b17      	ldr	r3, [pc, #92]	@ (800af58 <xTaskIncrementTick+0x168>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefe:	4915      	ldr	r1, [pc, #84]	@ (800af54 <xTaskIncrementTick+0x164>)
 800af00:	4613      	mov	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	440b      	add	r3, r1
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d901      	bls.n	800af14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af10:	2301      	movs	r3, #1
 800af12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af14:	4b11      	ldr	r3, [pc, #68]	@ (800af5c <xTaskIncrementTick+0x16c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af1c:	2301      	movs	r3, #1
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e004      	b.n	800af2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af22:	4b0f      	ldr	r3, [pc, #60]	@ (800af60 <xTaskIncrementTick+0x170>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3301      	adds	r3, #1
 800af28:	4a0d      	ldr	r2, [pc, #52]	@ (800af60 <xTaskIncrementTick+0x170>)
 800af2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af2c:	697b      	ldr	r3, [r7, #20]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	24005408 	.word	0x24005408
 800af3c:	240053e4 	.word	0x240053e4
 800af40:	24005398 	.word	0x24005398
 800af44:	2400539c 	.word	0x2400539c
 800af48:	240053f8 	.word	0x240053f8
 800af4c:	24005400 	.word	0x24005400
 800af50:	240053e8 	.word	0x240053e8
 800af54:	240052e4 	.word	0x240052e4
 800af58:	240052e0 	.word	0x240052e0
 800af5c:	240053f4 	.word	0x240053f4
 800af60:	240053f0 	.word	0x240053f0

0800af64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af6a:	4b27      	ldr	r3, [pc, #156]	@ (800b008 <vTaskSwitchContext+0xa4>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af72:	4b26      	ldr	r3, [pc, #152]	@ (800b00c <vTaskSwitchContext+0xa8>)
 800af74:	2201      	movs	r2, #1
 800af76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af78:	e040      	b.n	800affc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800af7a:	4b24      	ldr	r3, [pc, #144]	@ (800b00c <vTaskSwitchContext+0xa8>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af80:	4b23      	ldr	r3, [pc, #140]	@ (800b010 <vTaskSwitchContext+0xac>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	fab3 f383 	clz	r3, r3
 800af8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800af8e:	7afb      	ldrb	r3, [r7, #11]
 800af90:	f1c3 031f 	rsb	r3, r3, #31
 800af94:	617b      	str	r3, [r7, #20]
 800af96:	491f      	ldr	r1, [pc, #124]	@ (800b014 <vTaskSwitchContext+0xb0>)
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4613      	mov	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	440b      	add	r3, r1
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10b      	bne.n	800afc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	607b      	str	r3, [r7, #4]
}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	e7fd      	b.n	800afbe <vTaskSwitchContext+0x5a>
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	4613      	mov	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4a11      	ldr	r2, [pc, #68]	@ (800b014 <vTaskSwitchContext+0xb0>)
 800afce:	4413      	add	r3, r2
 800afd0:	613b      	str	r3, [r7, #16]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	605a      	str	r2, [r3, #4]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3308      	adds	r3, #8
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d104      	bne.n	800aff2 <vTaskSwitchContext+0x8e>
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	605a      	str	r2, [r3, #4]
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	4a07      	ldr	r2, [pc, #28]	@ (800b018 <vTaskSwitchContext+0xb4>)
 800affa:	6013      	str	r3, [r2, #0]
}
 800affc:	bf00      	nop
 800affe:	371c      	adds	r7, #28
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	24005408 	.word	0x24005408
 800b00c:	240053f4 	.word	0x240053f4
 800b010:	240053e8 	.word	0x240053e8
 800b014:	240052e4 	.word	0x240052e4
 800b018:	240052e0 	.word	0x240052e0

0800b01c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10b      	bne.n	800b044 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	60fb      	str	r3, [r7, #12]
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b044:	4b07      	ldr	r3, [pc, #28]	@ (800b064 <vTaskPlaceOnEventList+0x48>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	3318      	adds	r3, #24
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7fe fc14 	bl	800987a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b052:	2101      	movs	r1, #1
 800b054:	6838      	ldr	r0, [r7, #0]
 800b056:	f000 fb87 	bl	800b768 <prvAddCurrentTaskToDelayedList>
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	240052e0 	.word	0x240052e0

0800b068 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10b      	bne.n	800b096 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	60fb      	str	r3, [r7, #12]
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	e7fd      	b.n	800b092 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	3318      	adds	r3, #24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fc26 	bl	80098ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0a0:	4b1d      	ldr	r3, [pc, #116]	@ (800b118 <xTaskRemoveFromEventList+0xb0>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d11c      	bne.n	800b0e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe fc1d 	bl	80098ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	409a      	lsls	r2, r3
 800b0ba:	4b18      	ldr	r3, [pc, #96]	@ (800b11c <xTaskRemoveFromEventList+0xb4>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	4a16      	ldr	r2, [pc, #88]	@ (800b11c <xTaskRemoveFromEventList+0xb4>)
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4a13      	ldr	r2, [pc, #76]	@ (800b120 <xTaskRemoveFromEventList+0xb8>)
 800b0d2:	441a      	add	r2, r3
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f7fe fba9 	bl	8009832 <vListInsertEnd>
 800b0e0:	e005      	b.n	800b0ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	3318      	adds	r3, #24
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	480e      	ldr	r0, [pc, #56]	@ (800b124 <xTaskRemoveFromEventList+0xbc>)
 800b0ea:	f7fe fba2 	bl	8009832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b128 <xTaskRemoveFromEventList+0xc0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d905      	bls.n	800b108 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b100:	4b0a      	ldr	r3, [pc, #40]	@ (800b12c <xTaskRemoveFromEventList+0xc4>)
 800b102:	2201      	movs	r2, #1
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	e001      	b.n	800b10c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b108:	2300      	movs	r3, #0
 800b10a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b10c:	697b      	ldr	r3, [r7, #20]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	24005408 	.word	0x24005408
 800b11c:	240053e8 	.word	0x240053e8
 800b120:	240052e4 	.word	0x240052e4
 800b124:	240053a0 	.word	0x240053a0
 800b128:	240052e0 	.word	0x240052e0
 800b12c:	240053f4 	.word	0x240053f4

0800b130 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b138:	4b06      	ldr	r3, [pc, #24]	@ (800b154 <vTaskInternalSetTimeOutState+0x24>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b140:	4b05      	ldr	r3, [pc, #20]	@ (800b158 <vTaskInternalSetTimeOutState+0x28>)
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	605a      	str	r2, [r3, #4]
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	240053f8 	.word	0x240053f8
 800b158:	240053e4 	.word	0x240053e4

0800b15c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	613b      	str	r3, [r7, #16]
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	e7fd      	b.n	800b180 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10b      	bne.n	800b1a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	60fb      	str	r3, [r7, #12]
}
 800b19c:	bf00      	nop
 800b19e:	bf00      	nop
 800b1a0:	e7fd      	b.n	800b19e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b1a2:	f000 fc79 	bl	800ba98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b1a6:	4b1d      	ldr	r3, [pc, #116]	@ (800b21c <xTaskCheckForTimeOut+0xc0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1be:	d102      	bne.n	800b1c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61fb      	str	r3, [r7, #28]
 800b1c4:	e023      	b.n	800b20e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	4b15      	ldr	r3, [pc, #84]	@ (800b220 <xTaskCheckForTimeOut+0xc4>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d007      	beq.n	800b1e2 <xTaskCheckForTimeOut+0x86>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d302      	bcc.n	800b1e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	61fb      	str	r3, [r7, #28]
 800b1e0:	e015      	b.n	800b20e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d20b      	bcs.n	800b204 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	1ad2      	subs	r2, r2, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f7ff ff99 	bl	800b130 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	e004      	b.n	800b20e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b20a:	2301      	movs	r3, #1
 800b20c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b20e:	f000 fc75 	bl	800bafc <vPortExitCritical>

	return xReturn;
 800b212:	69fb      	ldr	r3, [r7, #28]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3720      	adds	r7, #32
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	240053e4 	.word	0x240053e4
 800b220:	240053f8 	.word	0x240053f8

0800b224 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b224:	b480      	push	{r7}
 800b226:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b228:	4b03      	ldr	r3, [pc, #12]	@ (800b238 <vTaskMissedYield+0x14>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	601a      	str	r2, [r3, #0]
}
 800b22e:	bf00      	nop
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	240053f4 	.word	0x240053f4

0800b23c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b244:	f000 f852 	bl	800b2ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b248:	4b06      	ldr	r3, [pc, #24]	@ (800b264 <prvIdleTask+0x28>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d9f9      	bls.n	800b244 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b250:	4b05      	ldr	r3, [pc, #20]	@ (800b268 <prvIdleTask+0x2c>)
 800b252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b256:	601a      	str	r2, [r3, #0]
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b260:	e7f0      	b.n	800b244 <prvIdleTask+0x8>
 800b262:	bf00      	nop
 800b264:	240052e4 	.word	0x240052e4
 800b268:	e000ed04 	.word	0xe000ed04

0800b26c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b272:	2300      	movs	r3, #0
 800b274:	607b      	str	r3, [r7, #4]
 800b276:	e00c      	b.n	800b292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	4613      	mov	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4a12      	ldr	r2, [pc, #72]	@ (800b2cc <prvInitialiseTaskLists+0x60>)
 800b284:	4413      	add	r3, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe faa6 	bl	80097d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3301      	adds	r3, #1
 800b290:	607b      	str	r3, [r7, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b06      	cmp	r3, #6
 800b296:	d9ef      	bls.n	800b278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b298:	480d      	ldr	r0, [pc, #52]	@ (800b2d0 <prvInitialiseTaskLists+0x64>)
 800b29a:	f7fe fa9d 	bl	80097d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b29e:	480d      	ldr	r0, [pc, #52]	@ (800b2d4 <prvInitialiseTaskLists+0x68>)
 800b2a0:	f7fe fa9a 	bl	80097d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b2a4:	480c      	ldr	r0, [pc, #48]	@ (800b2d8 <prvInitialiseTaskLists+0x6c>)
 800b2a6:	f7fe fa97 	bl	80097d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b2aa:	480c      	ldr	r0, [pc, #48]	@ (800b2dc <prvInitialiseTaskLists+0x70>)
 800b2ac:	f7fe fa94 	bl	80097d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b2b0:	480b      	ldr	r0, [pc, #44]	@ (800b2e0 <prvInitialiseTaskLists+0x74>)
 800b2b2:	f7fe fa91 	bl	80097d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b2e4 <prvInitialiseTaskLists+0x78>)
 800b2b8:	4a05      	ldr	r2, [pc, #20]	@ (800b2d0 <prvInitialiseTaskLists+0x64>)
 800b2ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b2bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e8 <prvInitialiseTaskLists+0x7c>)
 800b2be:	4a05      	ldr	r2, [pc, #20]	@ (800b2d4 <prvInitialiseTaskLists+0x68>)
 800b2c0:	601a      	str	r2, [r3, #0]
}
 800b2c2:	bf00      	nop
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	240052e4 	.word	0x240052e4
 800b2d0:	24005370 	.word	0x24005370
 800b2d4:	24005384 	.word	0x24005384
 800b2d8:	240053a0 	.word	0x240053a0
 800b2dc:	240053b4 	.word	0x240053b4
 800b2e0:	240053cc 	.word	0x240053cc
 800b2e4:	24005398 	.word	0x24005398
 800b2e8:	2400539c 	.word	0x2400539c

0800b2ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2f2:	e019      	b.n	800b328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2f4:	f000 fbd0 	bl	800ba98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f8:	4b10      	ldr	r3, [pc, #64]	@ (800b33c <prvCheckTasksWaitingTermination+0x50>)
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3304      	adds	r3, #4
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe faf1 	bl	80098ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b30a:	4b0d      	ldr	r3, [pc, #52]	@ (800b340 <prvCheckTasksWaitingTermination+0x54>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	3b01      	subs	r3, #1
 800b310:	4a0b      	ldr	r2, [pc, #44]	@ (800b340 <prvCheckTasksWaitingTermination+0x54>)
 800b312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b314:	4b0b      	ldr	r3, [pc, #44]	@ (800b344 <prvCheckTasksWaitingTermination+0x58>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	3b01      	subs	r3, #1
 800b31a:	4a0a      	ldr	r2, [pc, #40]	@ (800b344 <prvCheckTasksWaitingTermination+0x58>)
 800b31c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b31e:	f000 fbed 	bl	800bafc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f810 	bl	800b348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b328:	4b06      	ldr	r3, [pc, #24]	@ (800b344 <prvCheckTasksWaitingTermination+0x58>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1e1      	bne.n	800b2f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b330:	bf00      	nop
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	240053b4 	.word	0x240053b4
 800b340:	240053e0 	.word	0x240053e0
 800b344:	240053c8 	.word	0x240053c8

0800b348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b356:	2b00      	cmp	r3, #0
 800b358:	d108      	bne.n	800b36c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 fd8a 	bl	800be78 <vPortFree>
				vPortFree( pxTCB );
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fd87 	bl	800be78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b36a:	e019      	b.n	800b3a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b372:	2b01      	cmp	r3, #1
 800b374:	d103      	bne.n	800b37e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fd7e 	bl	800be78 <vPortFree>
	}
 800b37c:	e010      	b.n	800b3a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b384:	2b02      	cmp	r3, #2
 800b386:	d00b      	beq.n	800b3a0 <prvDeleteTCB+0x58>
	__asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	60fb      	str	r3, [r7, #12]
}
 800b39a:	bf00      	nop
 800b39c:	bf00      	nop
 800b39e:	e7fd      	b.n	800b39c <prvDeleteTCB+0x54>
	}
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <prvResetNextTaskUnblockTime+0x38>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d104      	bne.n	800b3c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3c0:	e008      	b.n	800b3d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c2:	4b07      	ldr	r3, [pc, #28]	@ (800b3e0 <prvResetNextTaskUnblockTime+0x38>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	4a04      	ldr	r2, [pc, #16]	@ (800b3e4 <prvResetNextTaskUnblockTime+0x3c>)
 800b3d2:	6013      	str	r3, [r2, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	24005398 	.word	0x24005398
 800b3e4:	24005400 	.word	0x24005400

0800b3e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800b41c <xTaskGetSchedulerState+0x34>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d102      	bne.n	800b3fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	607b      	str	r3, [r7, #4]
 800b3fa:	e008      	b.n	800b40e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3fc:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <xTaskGetSchedulerState+0x38>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b404:	2302      	movs	r3, #2
 800b406:	607b      	str	r3, [r7, #4]
 800b408:	e001      	b.n	800b40e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b40a:	2300      	movs	r3, #0
 800b40c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b40e:	687b      	ldr	r3, [r7, #4]
	}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	240053ec 	.word	0x240053ec
 800b420:	24005408 	.word	0x24005408

0800b424 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d05e      	beq.n	800b4f8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43e:	4b31      	ldr	r3, [pc, #196]	@ (800b504 <xTaskPriorityInherit+0xe0>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b444:	429a      	cmp	r2, r3
 800b446:	d24e      	bcs.n	800b4e6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	db06      	blt.n	800b45e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b450:	4b2c      	ldr	r3, [pc, #176]	@ (800b504 <xTaskPriorityInherit+0xe0>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b456:	f1c3 0207 	rsb	r2, r3, #7
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6959      	ldr	r1, [r3, #20]
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4a26      	ldr	r2, [pc, #152]	@ (800b508 <xTaskPriorityInherit+0xe4>)
 800b470:	4413      	add	r3, r2
 800b472:	4299      	cmp	r1, r3
 800b474:	d12f      	bne.n	800b4d6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	3304      	adds	r3, #4
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fa36 	bl	80098ec <uxListRemove>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48a:	2201      	movs	r2, #1
 800b48c:	fa02 f303 	lsl.w	r3, r2, r3
 800b490:	43da      	mvns	r2, r3
 800b492:	4b1e      	ldr	r3, [pc, #120]	@ (800b50c <xTaskPriorityInherit+0xe8>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4013      	ands	r3, r2
 800b498:	4a1c      	ldr	r2, [pc, #112]	@ (800b50c <xTaskPriorityInherit+0xe8>)
 800b49a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b49c:	4b19      	ldr	r3, [pc, #100]	@ (800b504 <xTaskPriorityInherit+0xe0>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	409a      	lsls	r2, r3
 800b4ae:	4b17      	ldr	r3, [pc, #92]	@ (800b50c <xTaskPriorityInherit+0xe8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	4a15      	ldr	r2, [pc, #84]	@ (800b50c <xTaskPriorityInherit+0xe8>)
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4a10      	ldr	r2, [pc, #64]	@ (800b508 <xTaskPriorityInherit+0xe4>)
 800b4c6:	441a      	add	r2, r3
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	4610      	mov	r0, r2
 800b4d0:	f7fe f9af 	bl	8009832 <vListInsertEnd>
 800b4d4:	e004      	b.n	800b4e0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b504 <xTaskPriorityInherit+0xe0>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e008      	b.n	800b4f8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4ea:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <xTaskPriorityInherit+0xe0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d201      	bcs.n	800b4f8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
	}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	240052e0 	.word	0x240052e0
 800b508:	240052e4 	.word	0x240052e4
 800b50c:	240053e8 	.word	0x240053e8

0800b510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b51c:	2300      	movs	r3, #0
 800b51e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d070      	beq.n	800b608 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b526:	4b3b      	ldr	r3, [pc, #236]	@ (800b614 <xTaskPriorityDisinherit+0x104>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d00b      	beq.n	800b548 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	60fb      	str	r3, [r7, #12]
}
 800b542:	bf00      	nop
 800b544:	bf00      	nop
 800b546:	e7fd      	b.n	800b544 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d10b      	bne.n	800b568 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	60bb      	str	r3, [r7, #8]
}
 800b562:	bf00      	nop
 800b564:	bf00      	nop
 800b566:	e7fd      	b.n	800b564 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b56c:	1e5a      	subs	r2, r3, #1
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d044      	beq.n	800b608 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b582:	2b00      	cmp	r3, #0
 800b584:	d140      	bne.n	800b608 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	3304      	adds	r3, #4
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fe f9ae 	bl	80098ec <uxListRemove>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d115      	bne.n	800b5c2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b59a:	491f      	ldr	r1, [pc, #124]	@ (800b618 <xTaskPriorityDisinherit+0x108>)
 800b59c:	4613      	mov	r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	440b      	add	r3, r1
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10a      	bne.n	800b5c2 <xTaskPriorityDisinherit+0xb2>
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b6:	43da      	mvns	r2, r3
 800b5b8:	4b18      	ldr	r3, [pc, #96]	@ (800b61c <xTaskPriorityDisinherit+0x10c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4013      	ands	r3, r2
 800b5be:	4a17      	ldr	r2, [pc, #92]	@ (800b61c <xTaskPriorityDisinherit+0x10c>)
 800b5c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ce:	f1c3 0207 	rsb	r2, r3, #7
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5da:	2201      	movs	r2, #1
 800b5dc:	409a      	lsls	r2, r3
 800b5de:	4b0f      	ldr	r3, [pc, #60]	@ (800b61c <xTaskPriorityDisinherit+0x10c>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	4a0d      	ldr	r2, [pc, #52]	@ (800b61c <xTaskPriorityDisinherit+0x10c>)
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4a08      	ldr	r2, [pc, #32]	@ (800b618 <xTaskPriorityDisinherit+0x108>)
 800b5f6:	441a      	add	r2, r3
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	4610      	mov	r0, r2
 800b600:	f7fe f917 	bl	8009832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b604:	2301      	movs	r3, #1
 800b606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b608:	697b      	ldr	r3, [r7, #20]
	}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	240052e0 	.word	0x240052e0
 800b618:	240052e4 	.word	0x240052e4
 800b61c:	240053e8 	.word	0x240053e8

0800b620 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b62e:	2301      	movs	r3, #1
 800b630:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d079      	beq.n	800b72c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10b      	bne.n	800b658 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	60fb      	str	r3, [r7, #12]
}
 800b652:	bf00      	nop
 800b654:	bf00      	nop
 800b656:	e7fd      	b.n	800b654 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d902      	bls.n	800b668 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	e002      	b.n	800b66e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b66c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b672:	69fa      	ldr	r2, [r7, #28]
 800b674:	429a      	cmp	r2, r3
 800b676:	d059      	beq.n	800b72c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d154      	bne.n	800b72c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b682:	4b2c      	ldr	r3, [pc, #176]	@ (800b734 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69ba      	ldr	r2, [r7, #24]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d10b      	bne.n	800b6a4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	60bb      	str	r3, [r7, #8]
}
 800b69e:	bf00      	nop
 800b6a0:	bf00      	nop
 800b6a2:	e7fd      	b.n	800b6a0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	db04      	blt.n	800b6c2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	f1c3 0207 	rsb	r2, r3, #7
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	6959      	ldr	r1, [r3, #20]
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4a19      	ldr	r2, [pc, #100]	@ (800b738 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b6d2:	4413      	add	r3, r2
 800b6d4:	4299      	cmp	r1, r3
 800b6d6:	d129      	bne.n	800b72c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe f905 	bl	80098ec <uxListRemove>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f2:	43da      	mvns	r2, r3
 800b6f4:	4b11      	ldr	r3, [pc, #68]	@ (800b73c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	4a10      	ldr	r2, [pc, #64]	@ (800b73c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b6fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	2201      	movs	r2, #1
 800b704:	409a      	lsls	r2, r3
 800b706:	4b0d      	ldr	r3, [pc, #52]	@ (800b73c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	4a0b      	ldr	r2, [pc, #44]	@ (800b73c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4a06      	ldr	r2, [pc, #24]	@ (800b738 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b71e:	441a      	add	r2, r3
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	3304      	adds	r3, #4
 800b724:	4619      	mov	r1, r3
 800b726:	4610      	mov	r0, r2
 800b728:	f7fe f883 	bl	8009832 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b72c:	bf00      	nop
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	240052e0 	.word	0x240052e0
 800b738:	240052e4 	.word	0x240052e4
 800b73c:	240053e8 	.word	0x240053e8

0800b740 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b744:	4b07      	ldr	r3, [pc, #28]	@ (800b764 <pvTaskIncrementMutexHeldCount+0x24>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d004      	beq.n	800b756 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b74c:	4b05      	ldr	r3, [pc, #20]	@ (800b764 <pvTaskIncrementMutexHeldCount+0x24>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b752:	3201      	adds	r2, #1
 800b754:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800b756:	4b03      	ldr	r3, [pc, #12]	@ (800b764 <pvTaskIncrementMutexHeldCount+0x24>)
 800b758:	681b      	ldr	r3, [r3, #0]
	}
 800b75a:	4618      	mov	r0, r3
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	240052e0 	.word	0x240052e0

0800b768 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b772:	4b29      	ldr	r3, [pc, #164]	@ (800b818 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b778:	4b28      	ldr	r3, [pc, #160]	@ (800b81c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3304      	adds	r3, #4
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe f8b4 	bl	80098ec <uxListRemove>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10b      	bne.n	800b7a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b78a:	4b24      	ldr	r3, [pc, #144]	@ (800b81c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b790:	2201      	movs	r2, #1
 800b792:	fa02 f303 	lsl.w	r3, r2, r3
 800b796:	43da      	mvns	r2, r3
 800b798:	4b21      	ldr	r3, [pc, #132]	@ (800b820 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4013      	ands	r3, r2
 800b79e:	4a20      	ldr	r2, [pc, #128]	@ (800b820 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b7a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d10a      	bne.n	800b7c0 <prvAddCurrentTaskToDelayedList+0x58>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d007      	beq.n	800b7c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b81c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	481a      	ldr	r0, [pc, #104]	@ (800b824 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b7ba:	f7fe f83a 	bl	8009832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7be:	e026      	b.n	800b80e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7c8:	4b14      	ldr	r3, [pc, #80]	@ (800b81c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d209      	bcs.n	800b7ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7d8:	4b13      	ldr	r3, [pc, #76]	@ (800b828 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b81c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7fe f848 	bl	800987a <vListInsert>
}
 800b7ea:	e010      	b.n	800b80e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b82c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b81c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	f7fe f83e 	bl	800987a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b830 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	429a      	cmp	r2, r3
 800b806:	d202      	bcs.n	800b80e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b808:	4a09      	ldr	r2, [pc, #36]	@ (800b830 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	6013      	str	r3, [r2, #0]
}
 800b80e:	bf00      	nop
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	240053e4 	.word	0x240053e4
 800b81c:	240052e0 	.word	0x240052e0
 800b820:	240053e8 	.word	0x240053e8
 800b824:	240053cc 	.word	0x240053cc
 800b828:	2400539c 	.word	0x2400539c
 800b82c:	24005398 	.word	0x24005398
 800b830:	24005400 	.word	0x24005400

0800b834 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	3b04      	subs	r3, #4
 800b844:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b84c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	3b04      	subs	r3, #4
 800b852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f023 0201 	bic.w	r2, r3, #1
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	3b04      	subs	r3, #4
 800b862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b864:	4a0c      	ldr	r2, [pc, #48]	@ (800b898 <pxPortInitialiseStack+0x64>)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3b14      	subs	r3, #20
 800b86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	3b04      	subs	r3, #4
 800b87a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f06f 0202 	mvn.w	r2, #2
 800b882:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3b20      	subs	r3, #32
 800b888:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b88a:	68fb      	ldr	r3, [r7, #12]
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3714      	adds	r7, #20
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	0800b89d 	.word	0x0800b89d

0800b89c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8a6:	4b13      	ldr	r3, [pc, #76]	@ (800b8f4 <prvTaskExitError+0x58>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ae:	d00b      	beq.n	800b8c8 <prvTaskExitError+0x2c>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	60fb      	str	r3, [r7, #12]
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	e7fd      	b.n	800b8c4 <prvTaskExitError+0x28>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60bb      	str	r3, [r7, #8]
}
 800b8da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8dc:	bf00      	nop
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0fc      	beq.n	800b8de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8e4:	bf00      	nop
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	24000024 	.word	0x24000024
	...

0800b900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b900:	4b07      	ldr	r3, [pc, #28]	@ (800b920 <pxCurrentTCBConst2>)
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	6808      	ldr	r0, [r1, #0]
 800b906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	f380 8809 	msr	PSP, r0
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f04f 0000 	mov.w	r0, #0
 800b916:	f380 8811 	msr	BASEPRI, r0
 800b91a:	4770      	bx	lr
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst2>:
 800b920:	240052e0 	.word	0x240052e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b928:	4808      	ldr	r0, [pc, #32]	@ (800b94c <prvPortStartFirstTask+0x24>)
 800b92a:	6800      	ldr	r0, [r0, #0]
 800b92c:	6800      	ldr	r0, [r0, #0]
 800b92e:	f380 8808 	msr	MSP, r0
 800b932:	f04f 0000 	mov.w	r0, #0
 800b936:	f380 8814 	msr	CONTROL, r0
 800b93a:	b662      	cpsie	i
 800b93c:	b661      	cpsie	f
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	df00      	svc	0
 800b948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b94a:	bf00      	nop
 800b94c:	e000ed08 	.word	0xe000ed08

0800b950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b956:	4b47      	ldr	r3, [pc, #284]	@ (800ba74 <xPortStartScheduler+0x124>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a47      	ldr	r2, [pc, #284]	@ (800ba78 <xPortStartScheduler+0x128>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d10b      	bne.n	800b978 <xPortStartScheduler+0x28>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	613b      	str	r3, [r7, #16]
}
 800b972:	bf00      	nop
 800b974:	bf00      	nop
 800b976:	e7fd      	b.n	800b974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b978:	4b3e      	ldr	r3, [pc, #248]	@ (800ba74 <xPortStartScheduler+0x124>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba7c <xPortStartScheduler+0x12c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d10b      	bne.n	800b99a <xPortStartScheduler+0x4a>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60fb      	str	r3, [r7, #12]
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	e7fd      	b.n	800b996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b99a:	4b39      	ldr	r3, [pc, #228]	@ (800ba80 <xPortStartScheduler+0x130>)
 800b99c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	22ff      	movs	r2, #255	@ 0xff
 800b9aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	4b31      	ldr	r3, [pc, #196]	@ (800ba84 <xPortStartScheduler+0x134>)
 800b9c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9c2:	4b31      	ldr	r3, [pc, #196]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9c4:	2207      	movs	r2, #7
 800b9c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9c8:	e009      	b.n	800b9de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b9ca:	4b2f      	ldr	r3, [pc, #188]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	4a2d      	ldr	r2, [pc, #180]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9d4:	78fb      	ldrb	r3, [r7, #3]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9e6:	2b80      	cmp	r3, #128	@ 0x80
 800b9e8:	d0ef      	beq.n	800b9ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9ea:	4b27      	ldr	r3, [pc, #156]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1c3 0307 	rsb	r3, r3, #7
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d00b      	beq.n	800ba0e <xPortStartScheduler+0xbe>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60bb      	str	r3, [r7, #8]
}
 800ba08:	bf00      	nop
 800ba0a:	bf00      	nop
 800ba0c:	e7fd      	b.n	800ba0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	021b      	lsls	r3, r3, #8
 800ba14:	4a1c      	ldr	r2, [pc, #112]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba18:	4b1b      	ldr	r3, [pc, #108]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba20:	4a19      	ldr	r2, [pc, #100]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba2c:	4b17      	ldr	r3, [pc, #92]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a16      	ldr	r2, [pc, #88]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ba36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba38:	4b14      	ldr	r3, [pc, #80]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a13      	ldr	r2, [pc, #76]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ba42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba44:	f000 f8da 	bl	800bbfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba48:	4b11      	ldr	r3, [pc, #68]	@ (800ba90 <xPortStartScheduler+0x140>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba4e:	f000 f8f9 	bl	800bc44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba52:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <xPortStartScheduler+0x144>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a0f      	ldr	r2, [pc, #60]	@ (800ba94 <xPortStartScheduler+0x144>)
 800ba58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ba5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba5e:	f7ff ff63 	bl	800b928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba62:	f7ff fa7f 	bl	800af64 <vTaskSwitchContext>
	prvTaskExitError();
 800ba66:	f7ff ff19 	bl	800b89c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	e000ed00 	.word	0xe000ed00
 800ba78:	410fc271 	.word	0x410fc271
 800ba7c:	410fc270 	.word	0x410fc270
 800ba80:	e000e400 	.word	0xe000e400
 800ba84:	2400540c 	.word	0x2400540c
 800ba88:	24005410 	.word	0x24005410
 800ba8c:	e000ed20 	.word	0xe000ed20
 800ba90:	24000024 	.word	0x24000024
 800ba94:	e000ef34 	.word	0xe000ef34

0800ba98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	607b      	str	r3, [r7, #4]
}
 800bab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bab2:	4b10      	ldr	r3, [pc, #64]	@ (800baf4 <vPortEnterCritical+0x5c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3301      	adds	r3, #1
 800bab8:	4a0e      	ldr	r2, [pc, #56]	@ (800baf4 <vPortEnterCritical+0x5c>)
 800baba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800babc:	4b0d      	ldr	r3, [pc, #52]	@ (800baf4 <vPortEnterCritical+0x5c>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d110      	bne.n	800bae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bac4:	4b0c      	ldr	r3, [pc, #48]	@ (800baf8 <vPortEnterCritical+0x60>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <vPortEnterCritical+0x4e>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	603b      	str	r3, [r7, #0]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <vPortEnterCritical+0x4a>
	}
}
 800bae6:	bf00      	nop
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	24000024 	.word	0x24000024
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb02:	4b12      	ldr	r3, [pc, #72]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10b      	bne.n	800bb22 <vPortExitCritical+0x26>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	607b      	str	r3, [r7, #4]
}
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
 800bb20:	e7fd      	b.n	800bb1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb22:	4b0a      	ldr	r3, [pc, #40]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	4a08      	ldr	r2, [pc, #32]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb2c:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d105      	bne.n	800bb40 <vPortExitCritical+0x44>
 800bb34:	2300      	movs	r3, #0
 800bb36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	f383 8811 	msr	BASEPRI, r3
}
 800bb3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	24000024 	.word	0x24000024

0800bb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb50:	f3ef 8009 	mrs	r0, PSP
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4b15      	ldr	r3, [pc, #84]	@ (800bbb0 <pxCurrentTCBConst>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	f01e 0f10 	tst.w	lr, #16
 800bb60:	bf08      	it	eq
 800bb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	6010      	str	r0, [r2, #0]
 800bb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb74:	f380 8811 	msr	BASEPRI, r0
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f7ff f9f0 	bl	800af64 <vTaskSwitchContext>
 800bb84:	f04f 0000 	mov.w	r0, #0
 800bb88:	f380 8811 	msr	BASEPRI, r0
 800bb8c:	bc09      	pop	{r0, r3}
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	6808      	ldr	r0, [r1, #0]
 800bb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	f01e 0f10 	tst.w	lr, #16
 800bb9a:	bf08      	it	eq
 800bb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bba0:	f380 8809 	msr	PSP, r0
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w

0800bbb0 <pxCurrentTCBConst>:
 800bbb0:	240052e0 	.word	0x240052e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	607b      	str	r3, [r7, #4]
}
 800bbd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbd2:	f7ff f90d 	bl	800adf0 <xTaskIncrementTick>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbdc:	4b06      	ldr	r3, [pc, #24]	@ (800bbf8 <SysTick_Handler+0x40>)
 800bbde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f383 8811 	msr	BASEPRI, r3
}
 800bbee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	e000ed04 	.word	0xe000ed04

0800bbfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc00:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc06:	4b0b      	ldr	r3, [pc, #44]	@ (800bc34 <vPortSetupTimerInterrupt+0x38>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc38 <vPortSetupTimerInterrupt+0x3c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	@ (800bc3c <vPortSetupTimerInterrupt+0x40>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	099b      	lsrs	r3, r3, #6
 800bc18:	4a09      	ldr	r2, [pc, #36]	@ (800bc40 <vPortSetupTimerInterrupt+0x44>)
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc1e:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc20:	2207      	movs	r2, #7
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	e000e010 	.word	0xe000e010
 800bc34:	e000e018 	.word	0xe000e018
 800bc38:	24000000 	.word	0x24000000
 800bc3c:	10624dd3 	.word	0x10624dd3
 800bc40:	e000e014 	.word	0xe000e014

0800bc44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bc54 <vPortEnableVFP+0x10>
 800bc48:	6801      	ldr	r1, [r0, #0]
 800bc4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bc4e:	6001      	str	r1, [r0, #0]
 800bc50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc52:	bf00      	nop
 800bc54:	e000ed88 	.word	0xe000ed88

0800bc58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc5e:	f3ef 8305 	mrs	r3, IPSR
 800bc62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d915      	bls.n	800bc96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc6a:	4a18      	ldr	r2, [pc, #96]	@ (800bccc <vPortValidateInterruptPriority+0x74>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc74:	4b16      	ldr	r3, [pc, #88]	@ (800bcd0 <vPortValidateInterruptPriority+0x78>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	7afa      	ldrb	r2, [r7, #11]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d20b      	bcs.n	800bc96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	607b      	str	r3, [r7, #4]
}
 800bc90:	bf00      	nop
 800bc92:	bf00      	nop
 800bc94:	e7fd      	b.n	800bc92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc96:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd4 <vPortValidateInterruptPriority+0x7c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd8 <vPortValidateInterruptPriority+0x80>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d90b      	bls.n	800bcbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	603b      	str	r3, [r7, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <vPortValidateInterruptPriority+0x62>
	}
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	e000e3f0 	.word	0xe000e3f0
 800bcd0:	2400540c 	.word	0x2400540c
 800bcd4:	e000ed0c 	.word	0xe000ed0c
 800bcd8:	24005410 	.word	0x24005410

0800bcdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	@ 0x28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bce8:	f7fe ffb4 	bl	800ac54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bcec:	4b5c      	ldr	r3, [pc, #368]	@ (800be60 <pvPortMalloc+0x184>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bcf4:	f000 f924 	bl	800bf40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcf8:	4b5a      	ldr	r3, [pc, #360]	@ (800be64 <pvPortMalloc+0x188>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4013      	ands	r3, r2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 8095 	bne.w	800be30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d01e      	beq.n	800bd4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bd0c:	2208      	movs	r2, #8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4413      	add	r3, r2
 800bd12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d015      	beq.n	800bd4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f023 0307 	bic.w	r3, r3, #7
 800bd24:	3308      	adds	r3, #8
 800bd26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <pvPortMalloc+0x6e>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	617b      	str	r3, [r7, #20]
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	e7fd      	b.n	800bd46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d06f      	beq.n	800be30 <pvPortMalloc+0x154>
 800bd50:	4b45      	ldr	r3, [pc, #276]	@ (800be68 <pvPortMalloc+0x18c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d86a      	bhi.n	800be30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd5a:	4b44      	ldr	r3, [pc, #272]	@ (800be6c <pvPortMalloc+0x190>)
 800bd5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd5e:	4b43      	ldr	r3, [pc, #268]	@ (800be6c <pvPortMalloc+0x190>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd64:	e004      	b.n	800bd70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d903      	bls.n	800bd82 <pvPortMalloc+0xa6>
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f1      	bne.n	800bd66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd82:	4b37      	ldr	r3, [pc, #220]	@ (800be60 <pvPortMalloc+0x184>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d051      	beq.n	800be30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2208      	movs	r2, #8
 800bd92:	4413      	add	r3, r2
 800bd94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	2308      	movs	r3, #8
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d920      	bls.n	800bdf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	f003 0307 	and.w	r3, r3, #7
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <pvPortMalloc+0xfc>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	1ad2      	subs	r2, r2, r3
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bdea:	69b8      	ldr	r0, [r7, #24]
 800bdec:	f000 f90a 	bl	800c004 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdf0:	4b1d      	ldr	r3, [pc, #116]	@ (800be68 <pvPortMalloc+0x18c>)
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	4a1b      	ldr	r2, [pc, #108]	@ (800be68 <pvPortMalloc+0x18c>)
 800bdfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800be68 <pvPortMalloc+0x18c>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	4b1b      	ldr	r3, [pc, #108]	@ (800be70 <pvPortMalloc+0x194>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d203      	bcs.n	800be12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be0a:	4b17      	ldr	r3, [pc, #92]	@ (800be68 <pvPortMalloc+0x18c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a18      	ldr	r2, [pc, #96]	@ (800be70 <pvPortMalloc+0x194>)
 800be10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	4b13      	ldr	r3, [pc, #76]	@ (800be64 <pvPortMalloc+0x188>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	431a      	orrs	r2, r3
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be26:	4b13      	ldr	r3, [pc, #76]	@ (800be74 <pvPortMalloc+0x198>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	4a11      	ldr	r2, [pc, #68]	@ (800be74 <pvPortMalloc+0x198>)
 800be2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be30:	f7fe ff1e 	bl	800ac70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	f003 0307 	and.w	r3, r3, #7
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00b      	beq.n	800be56 <pvPortMalloc+0x17a>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	60fb      	str	r3, [r7, #12]
}
 800be50:	bf00      	nop
 800be52:	bf00      	nop
 800be54:	e7fd      	b.n	800be52 <pvPortMalloc+0x176>
	return pvReturn;
 800be56:	69fb      	ldr	r3, [r7, #28]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3728      	adds	r7, #40	@ 0x28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	2400b81c 	.word	0x2400b81c
 800be64:	2400b830 	.word	0x2400b830
 800be68:	2400b820 	.word	0x2400b820
 800be6c:	2400b814 	.word	0x2400b814
 800be70:	2400b824 	.word	0x2400b824
 800be74:	2400b828 	.word	0x2400b828

0800be78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d04f      	beq.n	800bf2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be8a:	2308      	movs	r3, #8
 800be8c:	425b      	negs	r3, r3
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	4413      	add	r3, r2
 800be92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	4b25      	ldr	r3, [pc, #148]	@ (800bf34 <vPortFree+0xbc>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4013      	ands	r3, r2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10b      	bne.n	800bebe <vPortFree+0x46>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	60fb      	str	r3, [r7, #12]
}
 800beb8:	bf00      	nop
 800beba:	bf00      	nop
 800bebc:	e7fd      	b.n	800beba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00b      	beq.n	800bede <vPortFree+0x66>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	60bb      	str	r3, [r7, #8]
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	e7fd      	b.n	800beda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	4b14      	ldr	r3, [pc, #80]	@ (800bf34 <vPortFree+0xbc>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4013      	ands	r3, r2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01e      	beq.n	800bf2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11a      	bne.n	800bf2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	4b0e      	ldr	r3, [pc, #56]	@ (800bf34 <vPortFree+0xbc>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	43db      	mvns	r3, r3
 800befe:	401a      	ands	r2, r3
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bf04:	f7fe fea6 	bl	800ac54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf38 <vPortFree+0xc0>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4413      	add	r3, r2
 800bf12:	4a09      	ldr	r2, [pc, #36]	@ (800bf38 <vPortFree+0xc0>)
 800bf14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf16:	6938      	ldr	r0, [r7, #16]
 800bf18:	f000 f874 	bl	800c004 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf1c:	4b07      	ldr	r3, [pc, #28]	@ (800bf3c <vPortFree+0xc4>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3301      	adds	r3, #1
 800bf22:	4a06      	ldr	r2, [pc, #24]	@ (800bf3c <vPortFree+0xc4>)
 800bf24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf26:	f7fe fea3 	bl	800ac70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf2a:	bf00      	nop
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	2400b830 	.word	0x2400b830
 800bf38:	2400b820 	.word	0x2400b820
 800bf3c:	2400b82c 	.word	0x2400b82c

0800bf40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf46:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800bf4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf4c:	4b27      	ldr	r3, [pc, #156]	@ (800bfec <prvHeapInit+0xac>)
 800bf4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f003 0307 	and.w	r3, r3, #7
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00c      	beq.n	800bf74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3307      	adds	r3, #7
 800bf5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f023 0307 	bic.w	r3, r3, #7
 800bf66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	4a1f      	ldr	r2, [pc, #124]	@ (800bfec <prvHeapInit+0xac>)
 800bf70:	4413      	add	r3, r2
 800bf72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf78:	4a1d      	ldr	r2, [pc, #116]	@ (800bff0 <prvHeapInit+0xb0>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf7e:	4b1c      	ldr	r3, [pc, #112]	@ (800bff0 <prvHeapInit+0xb0>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	4413      	add	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	1a9b      	subs	r3, r3, r2
 800bf92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0307 	bic.w	r3, r3, #7
 800bf9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4a15      	ldr	r2, [pc, #84]	@ (800bff4 <prvHeapInit+0xb4>)
 800bfa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bfa2:	4b14      	ldr	r3, [pc, #80]	@ (800bff4 <prvHeapInit+0xb4>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bfaa:	4b12      	ldr	r3, [pc, #72]	@ (800bff4 <prvHeapInit+0xb4>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	1ad2      	subs	r2, r2, r3
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bff4 <prvHeapInit+0xb4>)
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	4a0a      	ldr	r2, [pc, #40]	@ (800bff8 <prvHeapInit+0xb8>)
 800bfce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	4a09      	ldr	r2, [pc, #36]	@ (800bffc <prvHeapInit+0xbc>)
 800bfd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfd8:	4b09      	ldr	r3, [pc, #36]	@ (800c000 <prvHeapInit+0xc0>)
 800bfda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bfde:	601a      	str	r2, [r3, #0]
}
 800bfe0:	bf00      	nop
 800bfe2:	3714      	adds	r7, #20
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	24005414 	.word	0x24005414
 800bff0:	2400b814 	.word	0x2400b814
 800bff4:	2400b81c 	.word	0x2400b81c
 800bff8:	2400b824 	.word	0x2400b824
 800bffc:	2400b820 	.word	0x2400b820
 800c000:	2400b830 	.word	0x2400b830

0800c004 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c00c:	4b28      	ldr	r3, [pc, #160]	@ (800c0b0 <prvInsertBlockIntoFreeList+0xac>)
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	e002      	b.n	800c018 <prvInsertBlockIntoFreeList+0x14>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d8f7      	bhi.n	800c012 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	4413      	add	r3, r2
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d108      	bne.n	800c046 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	685a      	ldr	r2, [r3, #4]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	441a      	add	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	68ba      	ldr	r2, [r7, #8]
 800c050:	441a      	add	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d118      	bne.n	800c08c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b15      	ldr	r3, [pc, #84]	@ (800c0b4 <prvInsertBlockIntoFreeList+0xb0>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d00d      	beq.n	800c082 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	441a      	add	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	e008      	b.n	800c094 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c082:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b4 <prvInsertBlockIntoFreeList+0xb0>)
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	e003      	b.n	800c094 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d002      	beq.n	800c0a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0a2:	bf00      	nop
 800c0a4:	3714      	adds	r7, #20
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	2400b814 	.word	0x2400b814
 800c0b4:	2400b81c 	.word	0x2400b81c

0800c0b8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c0c2:	f007 fb95 	bl	80137f0 <sys_timeouts_sleeptime>
 800c0c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ce:	d10b      	bne.n	800c0e8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c0d0:	4813      	ldr	r0, [pc, #76]	@ (800c120 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0d2:	f00c fae2 	bl	801869a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f00c fa54 	bl	8018588 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c0e0:	480f      	ldr	r0, [pc, #60]	@ (800c120 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0e2:	f00c facb 	bl	801867c <sys_mutex_lock>
    return;
 800c0e6:	e018      	b.n	800c11a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c0ee:	f007 fb45 	bl	801377c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c0f2:	e7e6      	b.n	800c0c2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c0f4:	480a      	ldr	r0, [pc, #40]	@ (800c120 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0f6:	f00c fad0 	bl	801869a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f00c fa42 	bl	8018588 <sys_arch_mbox_fetch>
 800c104:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c106:	4806      	ldr	r0, [pc, #24]	@ (800c120 <tcpip_timeouts_mbox_fetch+0x68>)
 800c108:	f00c fab8 	bl	801867c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d102      	bne.n	800c11a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c114:	f007 fb32 	bl	801377c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c118:	e7d3      	b.n	800c0c2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	2400b840 	.word	0x2400b840

0800c124 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c12c:	4810      	ldr	r0, [pc, #64]	@ (800c170 <tcpip_thread+0x4c>)
 800c12e:	f00c faa5 	bl	801867c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c132:	4b10      	ldr	r3, [pc, #64]	@ (800c174 <tcpip_thread+0x50>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c13a:	4b0e      	ldr	r3, [pc, #56]	@ (800c174 <tcpip_thread+0x50>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	4a0e      	ldr	r2, [pc, #56]	@ (800c178 <tcpip_thread+0x54>)
 800c140:	6812      	ldr	r2, [r2, #0]
 800c142:	4610      	mov	r0, r2
 800c144:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c146:	f107 030c 	add.w	r3, r7, #12
 800c14a:	4619      	mov	r1, r3
 800c14c:	480b      	ldr	r0, [pc, #44]	@ (800c17c <tcpip_thread+0x58>)
 800c14e:	f7ff ffb3 	bl	800c0b8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d106      	bne.n	800c166 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c158:	4b09      	ldr	r3, [pc, #36]	@ (800c180 <tcpip_thread+0x5c>)
 800c15a:	2291      	movs	r2, #145	@ 0x91
 800c15c:	4909      	ldr	r1, [pc, #36]	@ (800c184 <tcpip_thread+0x60>)
 800c15e:	480a      	ldr	r0, [pc, #40]	@ (800c188 <tcpip_thread+0x64>)
 800c160:	f00c fbec 	bl	801893c <iprintf>
      continue;
 800c164:	e003      	b.n	800c16e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 f80f 	bl	800c18c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c16e:	e7ea      	b.n	800c146 <tcpip_thread+0x22>
 800c170:	2400b840 	.word	0x2400b840
 800c174:	2400b834 	.word	0x2400b834
 800c178:	2400b838 	.word	0x2400b838
 800c17c:	2400b83c 	.word	0x2400b83c
 800c180:	08019834 	.word	0x08019834
 800c184:	08019864 	.word	0x08019864
 800c188:	08019884 	.word	0x08019884

0800c18c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d026      	beq.n	800c1ea <tcpip_thread_handle_msg+0x5e>
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	dc2b      	bgt.n	800c1f8 <tcpip_thread_handle_msg+0x6c>
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <tcpip_thread_handle_msg+0x1e>
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d015      	beq.n	800c1d4 <tcpip_thread_handle_msg+0x48>
 800c1a8:	e026      	b.n	800c1f8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	6850      	ldr	r0, [r2, #4]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	6892      	ldr	r2, [r2, #8]
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	4798      	blx	r3
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d004      	beq.n	800c1ca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f001 fdcf 	bl	800dd68 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c1ca:	6879      	ldr	r1, [r7, #4]
 800c1cc:	2009      	movs	r0, #9
 800c1ce:	f000 ff1b 	bl	800d008 <memp_free>
      break;
 800c1d2:	e018      	b.n	800c206 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	6892      	ldr	r2, [r2, #8]
 800c1dc:	4610      	mov	r0, r2
 800c1de:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	2008      	movs	r0, #8
 800c1e4:	f000 ff10 	bl	800d008 <memp_free>
      break;
 800c1e8:	e00d      	b.n	800c206 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	6892      	ldr	r2, [r2, #8]
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	4798      	blx	r3
      break;
 800c1f6:	e006      	b.n	800c206 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c1f8:	4b05      	ldr	r3, [pc, #20]	@ (800c210 <tcpip_thread_handle_msg+0x84>)
 800c1fa:	22cf      	movs	r2, #207	@ 0xcf
 800c1fc:	4905      	ldr	r1, [pc, #20]	@ (800c214 <tcpip_thread_handle_msg+0x88>)
 800c1fe:	4806      	ldr	r0, [pc, #24]	@ (800c218 <tcpip_thread_handle_msg+0x8c>)
 800c200:	f00c fb9c 	bl	801893c <iprintf>
      break;
 800c204:	bf00      	nop
  }
}
 800c206:	bf00      	nop
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	08019834 	.word	0x08019834
 800c214:	08019864 	.word	0x08019864
 800c218:	08019884 	.word	0x08019884

0800c21c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c228:	481a      	ldr	r0, [pc, #104]	@ (800c294 <tcpip_inpkt+0x78>)
 800c22a:	f00c f9ec 	bl	8018606 <sys_mbox_valid>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d105      	bne.n	800c240 <tcpip_inpkt+0x24>
 800c234:	4b18      	ldr	r3, [pc, #96]	@ (800c298 <tcpip_inpkt+0x7c>)
 800c236:	22fc      	movs	r2, #252	@ 0xfc
 800c238:	4918      	ldr	r1, [pc, #96]	@ (800c29c <tcpip_inpkt+0x80>)
 800c23a:	4819      	ldr	r0, [pc, #100]	@ (800c2a0 <tcpip_inpkt+0x84>)
 800c23c:	f00c fb7e 	bl	801893c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c240:	2009      	movs	r0, #9
 800c242:	f000 fe6b 	bl	800cf1c <memp_malloc>
 800c246:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c24e:	f04f 33ff 	mov.w	r3, #4294967295
 800c252:	e01a      	b.n	800c28a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c26c:	6979      	ldr	r1, [r7, #20]
 800c26e:	4809      	ldr	r0, [pc, #36]	@ (800c294 <tcpip_inpkt+0x78>)
 800c270:	f00c f970 	bl	8018554 <sys_mbox_trypost>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d006      	beq.n	800c288 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c27a:	6979      	ldr	r1, [r7, #20]
 800c27c:	2009      	movs	r0, #9
 800c27e:	f000 fec3 	bl	800d008 <memp_free>
    return ERR_MEM;
 800c282:	f04f 33ff 	mov.w	r3, #4294967295
 800c286:	e000      	b.n	800c28a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c288:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	2400b83c 	.word	0x2400b83c
 800c298:	08019834 	.word	0x08019834
 800c29c:	080198ac 	.word	0x080198ac
 800c2a0:	08019884 	.word	0x08019884

0800c2a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c2b4:	f003 0318 	and.w	r3, r3, #24
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c2bc:	4a08      	ldr	r2, [pc, #32]	@ (800c2e0 <tcpip_input+0x3c>)
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff ffab 	bl	800c21c <tcpip_inpkt>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	e005      	b.n	800c2d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c2ca:	4a06      	ldr	r2, [pc, #24]	@ (800c2e4 <tcpip_input+0x40>)
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff ffa4 	bl	800c21c <tcpip_inpkt>
 800c2d4:	4603      	mov	r3, r0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3708      	adds	r7, #8
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	08018365 	.word	0x08018365
 800c2e4:	08017231 	.word	0x08017231

0800c2e8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c2f2:	4819      	ldr	r0, [pc, #100]	@ (800c358 <tcpip_try_callback+0x70>)
 800c2f4:	f00c f987 	bl	8018606 <sys_mbox_valid>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d106      	bne.n	800c30c <tcpip_try_callback+0x24>
 800c2fe:	4b17      	ldr	r3, [pc, #92]	@ (800c35c <tcpip_try_callback+0x74>)
 800c300:	f240 125d 	movw	r2, #349	@ 0x15d
 800c304:	4916      	ldr	r1, [pc, #88]	@ (800c360 <tcpip_try_callback+0x78>)
 800c306:	4817      	ldr	r0, [pc, #92]	@ (800c364 <tcpip_try_callback+0x7c>)
 800c308:	f00c fb18 	bl	801893c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c30c:	2008      	movs	r0, #8
 800c30e:	f000 fe05 	bl	800cf1c <memp_malloc>
 800c312:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d102      	bne.n	800c320 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	e017      	b.n	800c350 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	4808      	ldr	r0, [pc, #32]	@ (800c358 <tcpip_try_callback+0x70>)
 800c336:	f00c f90d 	bl	8018554 <sys_mbox_trypost>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d006      	beq.n	800c34e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c340:	68f9      	ldr	r1, [r7, #12]
 800c342:	2008      	movs	r0, #8
 800c344:	f000 fe60 	bl	800d008 <memp_free>
    return ERR_MEM;
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	e000      	b.n	800c350 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	2400b83c 	.word	0x2400b83c
 800c35c:	08019834 	.word	0x08019834
 800c360:	080198ac 	.word	0x080198ac
 800c364:	08019884 	.word	0x08019884

0800c368 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c372:	f000 f92d 	bl	800c5d0 <lwip_init>

  tcpip_init_done = initfunc;
 800c376:	4a17      	ldr	r2, [pc, #92]	@ (800c3d4 <tcpip_init+0x6c>)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c37c:	4a16      	ldr	r2, [pc, #88]	@ (800c3d8 <tcpip_init+0x70>)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c382:	2106      	movs	r1, #6
 800c384:	4815      	ldr	r0, [pc, #84]	@ (800c3dc <tcpip_init+0x74>)
 800c386:	f00c f8c3 	bl	8018510 <sys_mbox_new>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d006      	beq.n	800c39e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c390:	4b13      	ldr	r3, [pc, #76]	@ (800c3e0 <tcpip_init+0x78>)
 800c392:	f240 2261 	movw	r2, #609	@ 0x261
 800c396:	4913      	ldr	r1, [pc, #76]	@ (800c3e4 <tcpip_init+0x7c>)
 800c398:	4813      	ldr	r0, [pc, #76]	@ (800c3e8 <tcpip_init+0x80>)
 800c39a:	f00c facf 	bl	801893c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c39e:	4813      	ldr	r0, [pc, #76]	@ (800c3ec <tcpip_init+0x84>)
 800c3a0:	f00c f950 	bl	8018644 <sys_mutex_new>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d006      	beq.n	800c3b8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c3e0 <tcpip_init+0x78>)
 800c3ac:	f240 2265 	movw	r2, #613	@ 0x265
 800c3b0:	490f      	ldr	r1, [pc, #60]	@ (800c3f0 <tcpip_init+0x88>)
 800c3b2:	480d      	ldr	r0, [pc, #52]	@ (800c3e8 <tcpip_init+0x80>)
 800c3b4:	f00c fac2 	bl	801893c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	490c      	ldr	r1, [pc, #48]	@ (800c3f4 <tcpip_init+0x8c>)
 800c3c4:	480c      	ldr	r0, [pc, #48]	@ (800c3f8 <tcpip_init+0x90>)
 800c3c6:	f00c f975 	bl	80186b4 <sys_thread_new>
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	2400b834 	.word	0x2400b834
 800c3d8:	2400b838 	.word	0x2400b838
 800c3dc:	2400b83c 	.word	0x2400b83c
 800c3e0:	08019834 	.word	0x08019834
 800c3e4:	080198bc 	.word	0x080198bc
 800c3e8:	08019884 	.word	0x08019884
 800c3ec:	2400b840 	.word	0x2400b840
 800c3f0:	080198e0 	.word	0x080198e0
 800c3f4:	0800c125 	.word	0x0800c125
 800c3f8:	08019904 	.word	0x08019904

0800c3fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	4603      	mov	r3, r0
 800c404:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c406:	88fb      	ldrh	r3, [r7, #6]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	b21a      	sxth	r2, r3
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	0a1b      	lsrs	r3, r3, #8
 800c410:	b29b      	uxth	r3, r3
 800c412:	b21b      	sxth	r3, r3
 800c414:	4313      	orrs	r3, r2
 800c416:	b21b      	sxth	r3, r3
 800c418:	b29b      	uxth	r3, r3
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	370c      	adds	r7, #12
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c426:	b480      	push	{r7}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	061a      	lsls	r2, r3, #24
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	021b      	lsls	r3, r3, #8
 800c436:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c43a:	431a      	orrs	r2, r3
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	0a1b      	lsrs	r3, r3, #8
 800c440:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c444:	431a      	orrs	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	0e1b      	lsrs	r3, r3, #24
 800c44a:	4313      	orrs	r3, r2
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c458:	b480      	push	{r7}
 800c45a:	b089      	sub	sp, #36	@ 0x24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00d      	beq.n	800c498 <lwip_standard_chksum+0x40>
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	dd0a      	ble.n	800c498 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c482:	69fa      	ldr	r2, [r7, #28]
 800c484:	1c53      	adds	r3, r2, #1
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	f107 030e 	add.w	r3, r7, #14
 800c48c:	3301      	adds	r3, #1
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	701a      	strb	r2, [r3, #0]
    len--;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	3b01      	subs	r3, #1
 800c496:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c49c:	e00a      	b.n	800c4b4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	1c9a      	adds	r2, r3, #2
 800c4a2:	61ba      	str	r2, [r7, #24]
 800c4a4:	881b      	ldrh	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	3b02      	subs	r3, #2
 800c4b2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	dcf1      	bgt.n	800c49e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dd04      	ble.n	800c4ca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c4c0:	f107 030e 	add.w	r3, r7, #14
 800c4c4:	69ba      	ldr	r2, [r7, #24]
 800c4c6:	7812      	ldrb	r2, [r2, #0]
 800c4c8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c4ca:	89fb      	ldrh	r3, [r7, #14]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	0c1a      	lsrs	r2, r3, #16
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	4413      	add	r3, r2
 800c4de:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	0c1a      	lsrs	r2, r3, #16
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	4413      	add	r3, r2
 800c4ea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d007      	beq.n	800c502 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	0a1b      	lsrs	r3, r3, #8
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	b29b      	uxth	r3, r3
}
 800c506:	4618      	mov	r0, r3
 800c508:	3724      	adds	r7, #36	@ 0x24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b082      	sub	sp, #8
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	460b      	mov	r3, r1
 800c51c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c51e:	887b      	ldrh	r3, [r7, #2]
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff ff98 	bl	800c458 <lwip_standard_chksum>
 800c528:	4603      	mov	r3, r0
 800c52a:	43db      	mvns	r3, r3
 800c52c:	b29b      	uxth	r3, r3
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b086      	sub	sp, #24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	e02b      	b.n	800c5a4 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	895b      	ldrh	r3, [r3, #10]
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7ff ff7e 	bl	800c458 <lwip_standard_chksum>
 800c55c:	4603      	mov	r3, r0
 800c55e:	461a      	mov	r2, r3
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	4413      	add	r3, r2
 800c564:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	0c1a      	lsrs	r2, r3, #16
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	4413      	add	r3, r2
 800c570:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	895b      	ldrh	r3, [r3, #10]
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00e      	beq.n	800c59e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	bf0c      	ite	eq
 800c586:	2301      	moveq	r3, #1
 800c588:	2300      	movne	r3, #0
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	b29a      	uxth	r2, r3
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	0a1b      	lsrs	r3, r3, #8
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	613b      	str	r3, [r7, #16]
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1d0      	bne.n	800c54c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d007      	beq.n	800c5c0 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	021b      	lsls	r3, r3, #8
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	0a1b      	lsrs	r3, r3, #8
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	43db      	mvns	r3, r3
 800c5c6:	b29b      	uxth	r3, r3
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c5da:	f00c f825 	bl	8018628 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c5de:	f000 f8d5 	bl	800c78c <mem_init>
  memp_init();
 800c5e2:	f000 fc2d 	bl	800ce40 <memp_init>
  pbuf_init();
  netif_init();
 800c5e6:	f000 fd39 	bl	800d05c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c5ea:	f007 f939 	bl	8013860 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c5ee:	f001 fe65 	bl	800e2bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c5f2:	f007 f87b 	bl	80136ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c5f6:	bf00      	nop
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c60a:	4b05      	ldr	r3, [pc, #20]	@ (800c620 <ptr_to_mem+0x20>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	88fb      	ldrh	r3, [r7, #6]
 800c610:	4413      	add	r3, r2
}
 800c612:	4618      	mov	r0, r3
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	2400b85c 	.word	0x2400b85c

0800c624 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c62c:	4b05      	ldr	r3, [pc, #20]	@ (800c644 <mem_to_ptr+0x20>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	b29b      	uxth	r3, r3
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	2400b85c 	.word	0x2400b85c

0800c648 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c650:	4b45      	ldr	r3, [pc, #276]	@ (800c768 <plug_holes+0x120>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	429a      	cmp	r2, r3
 800c658:	d206      	bcs.n	800c668 <plug_holes+0x20>
 800c65a:	4b44      	ldr	r3, [pc, #272]	@ (800c76c <plug_holes+0x124>)
 800c65c:	f240 12df 	movw	r2, #479	@ 0x1df
 800c660:	4943      	ldr	r1, [pc, #268]	@ (800c770 <plug_holes+0x128>)
 800c662:	4844      	ldr	r0, [pc, #272]	@ (800c774 <plug_holes+0x12c>)
 800c664:	f00c f96a 	bl	801893c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c668:	4b43      	ldr	r3, [pc, #268]	@ (800c778 <plug_holes+0x130>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d306      	bcc.n	800c680 <plug_holes+0x38>
 800c672:	4b3e      	ldr	r3, [pc, #248]	@ (800c76c <plug_holes+0x124>)
 800c674:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c678:	4940      	ldr	r1, [pc, #256]	@ (800c77c <plug_holes+0x134>)
 800c67a:	483e      	ldr	r0, [pc, #248]	@ (800c774 <plug_holes+0x12c>)
 800c67c:	f00c f95e 	bl	801893c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	791b      	ldrb	r3, [r3, #4]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d006      	beq.n	800c696 <plug_holes+0x4e>
 800c688:	4b38      	ldr	r3, [pc, #224]	@ (800c76c <plug_holes+0x124>)
 800c68a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c68e:	493c      	ldr	r1, [pc, #240]	@ (800c780 <plug_holes+0x138>)
 800c690:	4838      	ldr	r0, [pc, #224]	@ (800c774 <plug_holes+0x12c>)
 800c692:	f00c f953 	bl	801893c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	881b      	ldrh	r3, [r3, #0]
 800c69a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c69e:	d906      	bls.n	800c6ae <plug_holes+0x66>
 800c6a0:	4b32      	ldr	r3, [pc, #200]	@ (800c76c <plug_holes+0x124>)
 800c6a2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c6a6:	4937      	ldr	r1, [pc, #220]	@ (800c784 <plug_holes+0x13c>)
 800c6a8:	4832      	ldr	r0, [pc, #200]	@ (800c774 <plug_holes+0x12c>)
 800c6aa:	f00c f947 	bl	801893c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7ff ffa4 	bl	800c600 <ptr_to_mem>
 800c6b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d024      	beq.n	800c70c <plug_holes+0xc4>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	791b      	ldrb	r3, [r3, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d120      	bne.n	800c70c <plug_holes+0xc4>
 800c6ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c778 <plug_holes+0x130>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d01b      	beq.n	800c70c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c6d4:	4b2c      	ldr	r3, [pc, #176]	@ (800c788 <plug_holes+0x140>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d102      	bne.n	800c6e4 <plug_holes+0x9c>
      lfree = mem;
 800c6de:	4a2a      	ldr	r2, [pc, #168]	@ (800c788 <plug_holes+0x140>)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	881a      	ldrh	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c6f4:	d00a      	beq.n	800c70c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff ff80 	bl	800c600 <ptr_to_mem>
 800c700:	4604      	mov	r4, r0
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7ff ff8e 	bl	800c624 <mem_to_ptr>
 800c708:	4603      	mov	r3, r0
 800c70a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	885b      	ldrh	r3, [r3, #2]
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff ff75 	bl	800c600 <ptr_to_mem>
 800c716:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d01f      	beq.n	800c760 <plug_holes+0x118>
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	791b      	ldrb	r3, [r3, #4]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d11b      	bne.n	800c760 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c728:	4b17      	ldr	r3, [pc, #92]	@ (800c788 <plug_holes+0x140>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d102      	bne.n	800c738 <plug_holes+0xf0>
      lfree = pmem;
 800c732:	4a15      	ldr	r2, [pc, #84]	@ (800c788 <plug_holes+0x140>)
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	881a      	ldrh	r2, [r3, #0]
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c748:	d00a      	beq.n	800c760 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7ff ff56 	bl	800c600 <ptr_to_mem>
 800c754:	4604      	mov	r4, r0
 800c756:	68b8      	ldr	r0, [r7, #8]
 800c758:	f7ff ff64 	bl	800c624 <mem_to_ptr>
 800c75c:	4603      	mov	r3, r0
 800c75e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c760:	bf00      	nop
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	bd90      	pop	{r4, r7, pc}
 800c768:	2400b85c 	.word	0x2400b85c
 800c76c:	08019914 	.word	0x08019914
 800c770:	08019944 	.word	0x08019944
 800c774:	0801995c 	.word	0x0801995c
 800c778:	2400b860 	.word	0x2400b860
 800c77c:	08019984 	.word	0x08019984
 800c780:	080199a0 	.word	0x080199a0
 800c784:	080199bc 	.word	0x080199bc
 800c788:	2400b868 	.word	0x2400b868

0800c78c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c792:	4b1d      	ldr	r3, [pc, #116]	@ (800c808 <mem_init+0x7c>)
 800c794:	4a1d      	ldr	r2, [pc, #116]	@ (800c80c <mem_init+0x80>)
 800c796:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c798:	4b1b      	ldr	r3, [pc, #108]	@ (800c808 <mem_init+0x7c>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c7a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c7b2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800c7b6:	f7ff ff23 	bl	800c600 <ptr_to_mem>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	4a14      	ldr	r2, [pc, #80]	@ (800c810 <mem_init+0x84>)
 800c7be:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c7c0:	4b13      	ldr	r3, [pc, #76]	@ (800c810 <mem_init+0x84>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c7c8:	4b11      	ldr	r3, [pc, #68]	@ (800c810 <mem_init+0x84>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c7d0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c810 <mem_init+0x84>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800c7da:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c808 <mem_init+0x7c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a0c      	ldr	r2, [pc, #48]	@ (800c814 <mem_init+0x88>)
 800c7e2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c7e4:	480c      	ldr	r0, [pc, #48]	@ (800c818 <mem_init+0x8c>)
 800c7e6:	f00b ff2d 	bl	8018644 <sys_mutex_new>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d006      	beq.n	800c7fe <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c81c <mem_init+0x90>)
 800c7f2:	f240 221f 	movw	r2, #543	@ 0x21f
 800c7f6:	490a      	ldr	r1, [pc, #40]	@ (800c820 <mem_init+0x94>)
 800c7f8:	480a      	ldr	r0, [pc, #40]	@ (800c824 <mem_init+0x98>)
 800c7fa:	f00c f89f 	bl	801893c <iprintf>
  }
}
 800c7fe:	bf00      	nop
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	2400b85c 	.word	0x2400b85c
 800c80c:	30004000 	.word	0x30004000
 800c810:	2400b860 	.word	0x2400b860
 800c814:	2400b868 	.word	0x2400b868
 800c818:	2400b864 	.word	0x2400b864
 800c81c:	08019914 	.word	0x08019914
 800c820:	080199e8 	.word	0x080199e8
 800c824:	0801995c 	.word	0x0801995c

0800c828 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff fef7 	bl	800c624 <mem_to_ptr>
 800c836:	4603      	mov	r3, r0
 800c838:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff fede 	bl	800c600 <ptr_to_mem>
 800c844:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	885b      	ldrh	r3, [r3, #2]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff fed8 	bl	800c600 <ptr_to_mem>
 800c850:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c85a:	d818      	bhi.n	800c88e <mem_link_valid+0x66>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	885b      	ldrh	r3, [r3, #2]
 800c860:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c864:	d813      	bhi.n	800c88e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c86a:	8afa      	ldrh	r2, [r7, #22]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d004      	beq.n	800c87a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	8afa      	ldrh	r2, [r7, #22]
 800c876:	429a      	cmp	r2, r3
 800c878:	d109      	bne.n	800c88e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c87a:	4b08      	ldr	r3, [pc, #32]	@ (800c89c <mem_link_valid+0x74>)
 800c87c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	429a      	cmp	r2, r3
 800c882:	d006      	beq.n	800c892 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	885b      	ldrh	r3, [r3, #2]
 800c888:	8afa      	ldrh	r2, [r7, #22]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d001      	beq.n	800c892 <mem_link_valid+0x6a>
    return 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	e000      	b.n	800c894 <mem_link_valid+0x6c>
  }
  return 1;
 800c892:	2301      	movs	r3, #1
}
 800c894:	4618      	mov	r0, r3
 800c896:	3718      	adds	r7, #24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	2400b860 	.word	0x2400b860

0800c8a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d070      	beq.n	800c990 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f003 0303 	and.w	r3, r3, #3
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00d      	beq.n	800c8d4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c8b8:	4b37      	ldr	r3, [pc, #220]	@ (800c998 <mem_free+0xf8>)
 800c8ba:	f240 2273 	movw	r2, #627	@ 0x273
 800c8be:	4937      	ldr	r1, [pc, #220]	@ (800c99c <mem_free+0xfc>)
 800c8c0:	4837      	ldr	r0, [pc, #220]	@ (800c9a0 <mem_free+0x100>)
 800c8c2:	f00c f83b 	bl	801893c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c8c6:	f00b ff1b 	bl	8018700 <sys_arch_protect>
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f00b ff25 	bl	801871c <sys_arch_unprotect>
    return;
 800c8d2:	e05e      	b.n	800c992 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3b08      	subs	r3, #8
 800c8d8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c8da:	4b32      	ldr	r3, [pc, #200]	@ (800c9a4 <mem_free+0x104>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d306      	bcc.n	800c8f2 <mem_free+0x52>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f103 020c 	add.w	r2, r3, #12
 800c8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c9a8 <mem_free+0x108>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d90d      	bls.n	800c90e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c8f2:	4b29      	ldr	r3, [pc, #164]	@ (800c998 <mem_free+0xf8>)
 800c8f4:	f240 227f 	movw	r2, #639	@ 0x27f
 800c8f8:	492c      	ldr	r1, [pc, #176]	@ (800c9ac <mem_free+0x10c>)
 800c8fa:	4829      	ldr	r0, [pc, #164]	@ (800c9a0 <mem_free+0x100>)
 800c8fc:	f00c f81e 	bl	801893c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c900:	f00b fefe 	bl	8018700 <sys_arch_protect>
 800c904:	6138      	str	r0, [r7, #16]
 800c906:	6938      	ldr	r0, [r7, #16]
 800c908:	f00b ff08 	bl	801871c <sys_arch_unprotect>
    return;
 800c90c:	e041      	b.n	800c992 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c90e:	4828      	ldr	r0, [pc, #160]	@ (800c9b0 <mem_free+0x110>)
 800c910:	f00b feb4 	bl	801867c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	791b      	ldrb	r3, [r3, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d110      	bne.n	800c93e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c91c:	4b1e      	ldr	r3, [pc, #120]	@ (800c998 <mem_free+0xf8>)
 800c91e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c922:	4924      	ldr	r1, [pc, #144]	@ (800c9b4 <mem_free+0x114>)
 800c924:	481e      	ldr	r0, [pc, #120]	@ (800c9a0 <mem_free+0x100>)
 800c926:	f00c f809 	bl	801893c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c92a:	4821      	ldr	r0, [pc, #132]	@ (800c9b0 <mem_free+0x110>)
 800c92c:	f00b feb5 	bl	801869a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c930:	f00b fee6 	bl	8018700 <sys_arch_protect>
 800c934:	6178      	str	r0, [r7, #20]
 800c936:	6978      	ldr	r0, [r7, #20]
 800c938:	f00b fef0 	bl	801871c <sys_arch_unprotect>
    return;
 800c93c:	e029      	b.n	800c992 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c93e:	69f8      	ldr	r0, [r7, #28]
 800c940:	f7ff ff72 	bl	800c828 <mem_link_valid>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d110      	bne.n	800c96c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c94a:	4b13      	ldr	r3, [pc, #76]	@ (800c998 <mem_free+0xf8>)
 800c94c:	f240 2295 	movw	r2, #661	@ 0x295
 800c950:	4919      	ldr	r1, [pc, #100]	@ (800c9b8 <mem_free+0x118>)
 800c952:	4813      	ldr	r0, [pc, #76]	@ (800c9a0 <mem_free+0x100>)
 800c954:	f00b fff2 	bl	801893c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c958:	4815      	ldr	r0, [pc, #84]	@ (800c9b0 <mem_free+0x110>)
 800c95a:	f00b fe9e 	bl	801869a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c95e:	f00b fecf 	bl	8018700 <sys_arch_protect>
 800c962:	61b8      	str	r0, [r7, #24]
 800c964:	69b8      	ldr	r0, [r7, #24]
 800c966:	f00b fed9 	bl	801871c <sys_arch_unprotect>
    return;
 800c96a:	e012      	b.n	800c992 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	2200      	movs	r2, #0
 800c970:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c972:	4b12      	ldr	r3, [pc, #72]	@ (800c9bc <mem_free+0x11c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d202      	bcs.n	800c982 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c97c:	4a0f      	ldr	r2, [pc, #60]	@ (800c9bc <mem_free+0x11c>)
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c982:	69f8      	ldr	r0, [r7, #28]
 800c984:	f7ff fe60 	bl	800c648 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c988:	4809      	ldr	r0, [pc, #36]	@ (800c9b0 <mem_free+0x110>)
 800c98a:	f00b fe86 	bl	801869a <sys_mutex_unlock>
 800c98e:	e000      	b.n	800c992 <mem_free+0xf2>
    return;
 800c990:	bf00      	nop
}
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	08019914 	.word	0x08019914
 800c99c:	08019a04 	.word	0x08019a04
 800c9a0:	0801995c 	.word	0x0801995c
 800c9a4:	2400b85c 	.word	0x2400b85c
 800c9a8:	2400b860 	.word	0x2400b860
 800c9ac:	08019a28 	.word	0x08019a28
 800c9b0:	2400b864 	.word	0x2400b864
 800c9b4:	08019a44 	.word	0x08019a44
 800c9b8:	08019a6c 	.word	0x08019a6c
 800c9bc:	2400b868 	.word	0x2400b868

0800c9c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b088      	sub	sp, #32
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c9cc:	887b      	ldrh	r3, [r7, #2]
 800c9ce:	3303      	adds	r3, #3
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	f023 0303 	bic.w	r3, r3, #3
 800c9d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c9d8:	8bfb      	ldrh	r3, [r7, #30]
 800c9da:	2b0b      	cmp	r3, #11
 800c9dc:	d801      	bhi.n	800c9e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c9de:	230c      	movs	r3, #12
 800c9e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c9e2:	8bfb      	ldrh	r3, [r7, #30]
 800c9e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800c9e8:	d803      	bhi.n	800c9f2 <mem_trim+0x32>
 800c9ea:	8bfa      	ldrh	r2, [r7, #30]
 800c9ec:	887b      	ldrh	r3, [r7, #2]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d201      	bcs.n	800c9f6 <mem_trim+0x36>
    return NULL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e0d8      	b.n	800cba8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c9f6:	4b6e      	ldr	r3, [pc, #440]	@ (800cbb0 <mem_trim+0x1f0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d304      	bcc.n	800ca0a <mem_trim+0x4a>
 800ca00:	4b6c      	ldr	r3, [pc, #432]	@ (800cbb4 <mem_trim+0x1f4>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d306      	bcc.n	800ca18 <mem_trim+0x58>
 800ca0a:	4b6b      	ldr	r3, [pc, #428]	@ (800cbb8 <mem_trim+0x1f8>)
 800ca0c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ca10:	496a      	ldr	r1, [pc, #424]	@ (800cbbc <mem_trim+0x1fc>)
 800ca12:	486b      	ldr	r0, [pc, #428]	@ (800cbc0 <mem_trim+0x200>)
 800ca14:	f00b ff92 	bl	801893c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ca18:	4b65      	ldr	r3, [pc, #404]	@ (800cbb0 <mem_trim+0x1f0>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d304      	bcc.n	800ca2c <mem_trim+0x6c>
 800ca22:	4b64      	ldr	r3, [pc, #400]	@ (800cbb4 <mem_trim+0x1f4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d307      	bcc.n	800ca3c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca2c:	f00b fe68 	bl	8018700 <sys_arch_protect>
 800ca30:	60b8      	str	r0, [r7, #8]
 800ca32:	68b8      	ldr	r0, [r7, #8]
 800ca34:	f00b fe72 	bl	801871c <sys_arch_unprotect>
    return rmem;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	e0b5      	b.n	800cba8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3b08      	subs	r3, #8
 800ca40:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ca42:	69b8      	ldr	r0, [r7, #24]
 800ca44:	f7ff fdee 	bl	800c624 <mem_to_ptr>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	881a      	ldrh	r2, [r3, #0]
 800ca50:	8afb      	ldrh	r3, [r7, #22]
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	3b08      	subs	r3, #8
 800ca58:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ca5a:	8bfa      	ldrh	r2, [r7, #30]
 800ca5c:	8abb      	ldrh	r3, [r7, #20]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d906      	bls.n	800ca70 <mem_trim+0xb0>
 800ca62:	4b55      	ldr	r3, [pc, #340]	@ (800cbb8 <mem_trim+0x1f8>)
 800ca64:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ca68:	4956      	ldr	r1, [pc, #344]	@ (800cbc4 <mem_trim+0x204>)
 800ca6a:	4855      	ldr	r0, [pc, #340]	@ (800cbc0 <mem_trim+0x200>)
 800ca6c:	f00b ff66 	bl	801893c <iprintf>
  if (newsize > size) {
 800ca70:	8bfa      	ldrh	r2, [r7, #30]
 800ca72:	8abb      	ldrh	r3, [r7, #20]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d901      	bls.n	800ca7c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e095      	b.n	800cba8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ca7c:	8bfa      	ldrh	r2, [r7, #30]
 800ca7e:	8abb      	ldrh	r3, [r7, #20]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d101      	bne.n	800ca88 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	e08f      	b.n	800cba8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca88:	484f      	ldr	r0, [pc, #316]	@ (800cbc8 <mem_trim+0x208>)
 800ca8a:	f00b fdf7 	bl	801867c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fdb4 	bl	800c600 <ptr_to_mem>
 800ca98:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	791b      	ldrb	r3, [r3, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d13f      	bne.n	800cb22 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800caaa:	d106      	bne.n	800caba <mem_trim+0xfa>
 800caac:	4b42      	ldr	r3, [pc, #264]	@ (800cbb8 <mem_trim+0x1f8>)
 800caae:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cab2:	4946      	ldr	r1, [pc, #280]	@ (800cbcc <mem_trim+0x20c>)
 800cab4:	4842      	ldr	r0, [pc, #264]	@ (800cbc0 <mem_trim+0x200>)
 800cab6:	f00b ff41 	bl	801893c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cac0:	8afa      	ldrh	r2, [r7, #22]
 800cac2:	8bfb      	ldrh	r3, [r7, #30]
 800cac4:	4413      	add	r3, r2
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	3308      	adds	r3, #8
 800caca:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cacc:	4b40      	ldr	r3, [pc, #256]	@ (800cbd0 <mem_trim+0x210>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d106      	bne.n	800cae4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cad6:	89fb      	ldrh	r3, [r7, #14]
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff fd91 	bl	800c600 <ptr_to_mem>
 800cade:	4603      	mov	r3, r0
 800cae0:	4a3b      	ldr	r2, [pc, #236]	@ (800cbd0 <mem_trim+0x210>)
 800cae2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cae4:	89fb      	ldrh	r3, [r7, #14]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fd8a 	bl	800c600 <ptr_to_mem>
 800caec:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	2200      	movs	r2, #0
 800caf2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	89ba      	ldrh	r2, [r7, #12]
 800caf8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	8afa      	ldrh	r2, [r7, #22]
 800cafe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	89fa      	ldrh	r2, [r7, #14]
 800cb04:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	881b      	ldrh	r3, [r3, #0]
 800cb0a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cb0e:	d047      	beq.n	800cba0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	881b      	ldrh	r3, [r3, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff fd73 	bl	800c600 <ptr_to_mem>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	89fb      	ldrh	r3, [r7, #14]
 800cb1e:	8053      	strh	r3, [r2, #2]
 800cb20:	e03e      	b.n	800cba0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cb22:	8bfb      	ldrh	r3, [r7, #30]
 800cb24:	f103 0214 	add.w	r2, r3, #20
 800cb28:	8abb      	ldrh	r3, [r7, #20]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d838      	bhi.n	800cba0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cb2e:	8afa      	ldrh	r2, [r7, #22]
 800cb30:	8bfb      	ldrh	r3, [r7, #30]
 800cb32:	4413      	add	r3, r2
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	3308      	adds	r3, #8
 800cb38:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	881b      	ldrh	r3, [r3, #0]
 800cb3e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cb42:	d106      	bne.n	800cb52 <mem_trim+0x192>
 800cb44:	4b1c      	ldr	r3, [pc, #112]	@ (800cbb8 <mem_trim+0x1f8>)
 800cb46:	f240 3216 	movw	r2, #790	@ 0x316
 800cb4a:	4920      	ldr	r1, [pc, #128]	@ (800cbcc <mem_trim+0x20c>)
 800cb4c:	481c      	ldr	r0, [pc, #112]	@ (800cbc0 <mem_trim+0x200>)
 800cb4e:	f00b fef5 	bl	801893c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cb52:	89fb      	ldrh	r3, [r7, #14]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff fd53 	bl	800c600 <ptr_to_mem>
 800cb5a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cb5c:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <mem_trim+0x210>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d202      	bcs.n	800cb6c <mem_trim+0x1ac>
      lfree = mem2;
 800cb66:	4a1a      	ldr	r2, [pc, #104]	@ (800cbd0 <mem_trim+0x210>)
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	881a      	ldrh	r2, [r3, #0]
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	8afa      	ldrh	r2, [r7, #22]
 800cb7e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	89fa      	ldrh	r2, [r7, #14]
 800cb84:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cb8e:	d007      	beq.n	800cba0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f7ff fd33 	bl	800c600 <ptr_to_mem>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	89fb      	ldrh	r3, [r7, #14]
 800cb9e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cba0:	4809      	ldr	r0, [pc, #36]	@ (800cbc8 <mem_trim+0x208>)
 800cba2:	f00b fd7a 	bl	801869a <sys_mutex_unlock>
  return rmem;
 800cba6:	687b      	ldr	r3, [r7, #4]
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3720      	adds	r7, #32
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	2400b85c 	.word	0x2400b85c
 800cbb4:	2400b860 	.word	0x2400b860
 800cbb8:	08019914 	.word	0x08019914
 800cbbc:	08019aa0 	.word	0x08019aa0
 800cbc0:	0801995c 	.word	0x0801995c
 800cbc4:	08019ab8 	.word	0x08019ab8
 800cbc8:	2400b864 	.word	0x2400b864
 800cbcc:	08019ad8 	.word	0x08019ad8
 800cbd0:	2400b868 	.word	0x2400b868

0800cbd4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cbde:	88fb      	ldrh	r3, [r7, #6]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d101      	bne.n	800cbe8 <mem_malloc+0x14>
    return NULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e0e2      	b.n	800cdae <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	3303      	adds	r3, #3
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	f023 0303 	bic.w	r3, r3, #3
 800cbf2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cbf4:	8bbb      	ldrh	r3, [r7, #28]
 800cbf6:	2b0b      	cmp	r3, #11
 800cbf8:	d801      	bhi.n	800cbfe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cbfa:	230c      	movs	r3, #12
 800cbfc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cbfe:	8bbb      	ldrh	r3, [r7, #28]
 800cc00:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cc04:	d803      	bhi.n	800cc0e <mem_malloc+0x3a>
 800cc06:	8bba      	ldrh	r2, [r7, #28]
 800cc08:	88fb      	ldrh	r3, [r7, #6]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d201      	bcs.n	800cc12 <mem_malloc+0x3e>
    return NULL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	e0cd      	b.n	800cdae <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cc12:	4869      	ldr	r0, [pc, #420]	@ (800cdb8 <mem_malloc+0x1e4>)
 800cc14:	f00b fd32 	bl	801867c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cc18:	4b68      	ldr	r3, [pc, #416]	@ (800cdbc <mem_malloc+0x1e8>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fd01 	bl	800c624 <mem_to_ptr>
 800cc22:	4603      	mov	r3, r0
 800cc24:	83fb      	strh	r3, [r7, #30]
 800cc26:	e0b7      	b.n	800cd98 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cc28:	8bfb      	ldrh	r3, [r7, #30]
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7ff fce8 	bl	800c600 <ptr_to_mem>
 800cc30:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	791b      	ldrb	r3, [r3, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f040 80a7 	bne.w	800cd8a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	461a      	mov	r2, r3
 800cc42:	8bfb      	ldrh	r3, [r7, #30]
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	f1a3 0208 	sub.w	r2, r3, #8
 800cc4a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	f0c0 809c 	bcc.w	800cd8a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	8bfb      	ldrh	r3, [r7, #30]
 800cc5a:	1ad3      	subs	r3, r2, r3
 800cc5c:	f1a3 0208 	sub.w	r2, r3, #8
 800cc60:	8bbb      	ldrh	r3, [r7, #28]
 800cc62:	3314      	adds	r3, #20
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d333      	bcc.n	800ccd0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cc68:	8bfa      	ldrh	r2, [r7, #30]
 800cc6a:	8bbb      	ldrh	r3, [r7, #28]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	3308      	adds	r3, #8
 800cc72:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cc74:	8a7b      	ldrh	r3, [r7, #18]
 800cc76:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800cc7a:	d106      	bne.n	800cc8a <mem_malloc+0xb6>
 800cc7c:	4b50      	ldr	r3, [pc, #320]	@ (800cdc0 <mem_malloc+0x1ec>)
 800cc7e:	f240 3287 	movw	r2, #903	@ 0x387
 800cc82:	4950      	ldr	r1, [pc, #320]	@ (800cdc4 <mem_malloc+0x1f0>)
 800cc84:	4850      	ldr	r0, [pc, #320]	@ (800cdc8 <mem_malloc+0x1f4>)
 800cc86:	f00b fe59 	bl	801893c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cc8a:	8a7b      	ldrh	r3, [r7, #18]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff fcb7 	bl	800c600 <ptr_to_mem>
 800cc92:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	881a      	ldrh	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	8bfa      	ldrh	r2, [r7, #30]
 800cca6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	8a7a      	ldrh	r2, [r7, #18]
 800ccac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ccbc:	d00b      	beq.n	800ccd6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff fc9c 	bl	800c600 <ptr_to_mem>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	8a7b      	ldrh	r3, [r7, #18]
 800cccc:	8053      	strh	r3, [r2, #2]
 800ccce:	e002      	b.n	800ccd6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ccd6:	4b39      	ldr	r3, [pc, #228]	@ (800cdbc <mem_malloc+0x1e8>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	697a      	ldr	r2, [r7, #20]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d127      	bne.n	800cd30 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cce0:	4b36      	ldr	r3, [pc, #216]	@ (800cdbc <mem_malloc+0x1e8>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cce6:	e005      	b.n	800ccf4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	881b      	ldrh	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fc87 	bl	800c600 <ptr_to_mem>
 800ccf2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	791b      	ldrb	r3, [r3, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <mem_malloc+0x132>
 800ccfc:	4b33      	ldr	r3, [pc, #204]	@ (800cdcc <mem_malloc+0x1f8>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	69ba      	ldr	r2, [r7, #24]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d1f0      	bne.n	800cce8 <mem_malloc+0x114>
          }
          lfree = cur;
 800cd06:	4a2d      	ldr	r2, [pc, #180]	@ (800cdbc <mem_malloc+0x1e8>)
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cd0c:	4b2b      	ldr	r3, [pc, #172]	@ (800cdbc <mem_malloc+0x1e8>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	4b2e      	ldr	r3, [pc, #184]	@ (800cdcc <mem_malloc+0x1f8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d00b      	beq.n	800cd30 <mem_malloc+0x15c>
 800cd18:	4b28      	ldr	r3, [pc, #160]	@ (800cdbc <mem_malloc+0x1e8>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	791b      	ldrb	r3, [r3, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d006      	beq.n	800cd30 <mem_malloc+0x15c>
 800cd22:	4b27      	ldr	r3, [pc, #156]	@ (800cdc0 <mem_malloc+0x1ec>)
 800cd24:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800cd28:	4929      	ldr	r1, [pc, #164]	@ (800cdd0 <mem_malloc+0x1fc>)
 800cd2a:	4827      	ldr	r0, [pc, #156]	@ (800cdc8 <mem_malloc+0x1f4>)
 800cd2c:	f00b fe06 	bl	801893c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cd30:	4821      	ldr	r0, [pc, #132]	@ (800cdb8 <mem_malloc+0x1e4>)
 800cd32:	f00b fcb2 	bl	801869a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cd36:	8bba      	ldrh	r2, [r7, #28]
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	4a23      	ldr	r2, [pc, #140]	@ (800cdcc <mem_malloc+0x1f8>)
 800cd40:	6812      	ldr	r2, [r2, #0]
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d906      	bls.n	800cd54 <mem_malloc+0x180>
 800cd46:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc0 <mem_malloc+0x1ec>)
 800cd48:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cd4c:	4921      	ldr	r1, [pc, #132]	@ (800cdd4 <mem_malloc+0x200>)
 800cd4e:	481e      	ldr	r0, [pc, #120]	@ (800cdc8 <mem_malloc+0x1f4>)
 800cd50:	f00b fdf4 	bl	801893c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f003 0303 	and.w	r3, r3, #3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d006      	beq.n	800cd6c <mem_malloc+0x198>
 800cd5e:	4b18      	ldr	r3, [pc, #96]	@ (800cdc0 <mem_malloc+0x1ec>)
 800cd60:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800cd64:	491c      	ldr	r1, [pc, #112]	@ (800cdd8 <mem_malloc+0x204>)
 800cd66:	4818      	ldr	r0, [pc, #96]	@ (800cdc8 <mem_malloc+0x1f4>)
 800cd68:	f00b fde8 	bl	801893c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f003 0303 	and.w	r3, r3, #3
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d006      	beq.n	800cd84 <mem_malloc+0x1b0>
 800cd76:	4b12      	ldr	r3, [pc, #72]	@ (800cdc0 <mem_malloc+0x1ec>)
 800cd78:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800cd7c:	4917      	ldr	r1, [pc, #92]	@ (800cddc <mem_malloc+0x208>)
 800cd7e:	4812      	ldr	r0, [pc, #72]	@ (800cdc8 <mem_malloc+0x1f4>)
 800cd80:	f00b fddc 	bl	801893c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	3308      	adds	r3, #8
 800cd88:	e011      	b.n	800cdae <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cd8a:	8bfb      	ldrh	r3, [r7, #30]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff fc37 	bl	800c600 <ptr_to_mem>
 800cd92:	4603      	mov	r3, r0
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd98:	8bfa      	ldrh	r2, [r7, #30]
 800cd9a:	8bbb      	ldrh	r3, [r7, #28]
 800cd9c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800cda0:	429a      	cmp	r2, r3
 800cda2:	f4ff af41 	bcc.w	800cc28 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cda6:	4804      	ldr	r0, [pc, #16]	@ (800cdb8 <mem_malloc+0x1e4>)
 800cda8:	f00b fc77 	bl	801869a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3720      	adds	r7, #32
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	2400b864 	.word	0x2400b864
 800cdbc:	2400b868 	.word	0x2400b868
 800cdc0:	08019914 	.word	0x08019914
 800cdc4:	08019ad8 	.word	0x08019ad8
 800cdc8:	0801995c 	.word	0x0801995c
 800cdcc:	2400b860 	.word	0x2400b860
 800cdd0:	08019aec 	.word	0x08019aec
 800cdd4:	08019b08 	.word	0x08019b08
 800cdd8:	08019b38 	.word	0x08019b38
 800cddc:	08019b68 	.word	0x08019b68

0800cde0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	3303      	adds	r3, #3
 800cdf6:	f023 0303 	bic.w	r3, r3, #3
 800cdfa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	e011      	b.n	800ce26 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3301      	adds	r3, #1
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	885b      	ldrh	r3, [r3, #2]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	dbe7      	blt.n	800ce02 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ce32:	bf00      	nop
 800ce34:	bf00      	nop
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ce46:	2300      	movs	r3, #0
 800ce48:	80fb      	strh	r3, [r7, #6]
 800ce4a:	e009      	b.n	800ce60 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ce4c:	88fb      	ldrh	r3, [r7, #6]
 800ce4e:	4a08      	ldr	r2, [pc, #32]	@ (800ce70 <memp_init+0x30>)
 800ce50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7ff ffc3 	bl	800cde0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ce5a:	88fb      	ldrh	r3, [r7, #6]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	80fb      	strh	r3, [r7, #6]
 800ce60:	88fb      	ldrh	r3, [r7, #6]
 800ce62:	2b0c      	cmp	r3, #12
 800ce64:	d9f2      	bls.n	800ce4c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ce66:	bf00      	nop
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	0801c73c 	.word	0x0801c73c

0800ce74 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ce7c:	f00b fc40 	bl	8018700 <sys_arch_protect>
 800ce80:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d015      	beq.n	800cebc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	6812      	ldr	r2, [r2, #0]
 800ce98:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	f003 0303 	and.w	r3, r3, #3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d006      	beq.n	800ceb2 <do_memp_malloc_pool+0x3e>
 800cea4:	4b09      	ldr	r3, [pc, #36]	@ (800cecc <do_memp_malloc_pool+0x58>)
 800cea6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ceaa:	4909      	ldr	r1, [pc, #36]	@ (800ced0 <do_memp_malloc_pool+0x5c>)
 800ceac:	4809      	ldr	r0, [pc, #36]	@ (800ced4 <do_memp_malloc_pool+0x60>)
 800ceae:	f00b fd45 	bl	801893c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f00b fc32 	bl	801871c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	e003      	b.n	800cec4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f00b fc2d 	bl	801871c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	08019b8c 	.word	0x08019b8c
 800ced0:	08019bbc 	.word	0x08019bbc
 800ced4:	08019be0 	.word	0x08019be0

0800ced8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d106      	bne.n	800cef4 <memp_malloc_pool+0x1c>
 800cee6:	4b0a      	ldr	r3, [pc, #40]	@ (800cf10 <memp_malloc_pool+0x38>)
 800cee8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ceec:	4909      	ldr	r1, [pc, #36]	@ (800cf14 <memp_malloc_pool+0x3c>)
 800ceee:	480a      	ldr	r0, [pc, #40]	@ (800cf18 <memp_malloc_pool+0x40>)
 800cef0:	f00b fd24 	bl	801893c <iprintf>
  if (desc == NULL) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <memp_malloc_pool+0x26>
    return NULL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	e003      	b.n	800cf06 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff ffb8 	bl	800ce74 <do_memp_malloc_pool>
 800cf04:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	08019b8c 	.word	0x08019b8c
 800cf14:	08019c08 	.word	0x08019c08
 800cf18:	08019be0 	.word	0x08019be0

0800cf1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	2b0c      	cmp	r3, #12
 800cf2a:	d908      	bls.n	800cf3e <memp_malloc+0x22>
 800cf2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf58 <memp_malloc+0x3c>)
 800cf2e:	f240 1257 	movw	r2, #343	@ 0x157
 800cf32:	490a      	ldr	r1, [pc, #40]	@ (800cf5c <memp_malloc+0x40>)
 800cf34:	480a      	ldr	r0, [pc, #40]	@ (800cf60 <memp_malloc+0x44>)
 800cf36:	f00b fd01 	bl	801893c <iprintf>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e008      	b.n	800cf50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	4a08      	ldr	r2, [pc, #32]	@ (800cf64 <memp_malloc+0x48>)
 800cf42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ff94 	bl	800ce74 <do_memp_malloc_pool>
 800cf4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	08019b8c 	.word	0x08019b8c
 800cf5c:	08019c1c 	.word	0x08019c1c
 800cf60:	08019be0 	.word	0x08019be0
 800cf64:	0801c73c 	.word	0x0801c73c

0800cf68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	f003 0303 	and.w	r3, r3, #3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d006      	beq.n	800cf8a <do_memp_free_pool+0x22>
 800cf7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <do_memp_free_pool+0x4c>)
 800cf7e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cf82:	490d      	ldr	r1, [pc, #52]	@ (800cfb8 <do_memp_free_pool+0x50>)
 800cf84:	480d      	ldr	r0, [pc, #52]	@ (800cfbc <do_memp_free_pool+0x54>)
 800cf86:	f00b fcd9 	bl	801893c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cf8e:	f00b fbb7 	bl	8018700 <sys_arch_protect>
 800cf92:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cfa6:	68b8      	ldr	r0, [r7, #8]
 800cfa8:	f00b fbb8 	bl	801871c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cfac:	bf00      	nop
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08019b8c 	.word	0x08019b8c
 800cfb8:	08019c3c 	.word	0x08019c3c
 800cfbc:	08019be0 	.word	0x08019be0

0800cfc0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d106      	bne.n	800cfde <memp_free_pool+0x1e>
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cffc <memp_free_pool+0x3c>)
 800cfd2:	f240 1295 	movw	r2, #405	@ 0x195
 800cfd6:	490a      	ldr	r1, [pc, #40]	@ (800d000 <memp_free_pool+0x40>)
 800cfd8:	480a      	ldr	r0, [pc, #40]	@ (800d004 <memp_free_pool+0x44>)
 800cfda:	f00b fcaf 	bl	801893c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <memp_free_pool+0x34>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d004      	beq.n	800cff4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cfea:	6839      	ldr	r1, [r7, #0]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff ffbb 	bl	800cf68 <do_memp_free_pool>
 800cff2:	e000      	b.n	800cff6 <memp_free_pool+0x36>
    return;
 800cff4:	bf00      	nop
}
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	08019b8c 	.word	0x08019b8c
 800d000:	08019c08 	.word	0x08019c08
 800d004:	08019be0 	.word	0x08019be0

0800d008 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	6039      	str	r1, [r7, #0]
 800d012:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b0c      	cmp	r3, #12
 800d018:	d907      	bls.n	800d02a <memp_free+0x22>
 800d01a:	4b0c      	ldr	r3, [pc, #48]	@ (800d04c <memp_free+0x44>)
 800d01c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d020:	490b      	ldr	r1, [pc, #44]	@ (800d050 <memp_free+0x48>)
 800d022:	480c      	ldr	r0, [pc, #48]	@ (800d054 <memp_free+0x4c>)
 800d024:	f00b fc8a 	bl	801893c <iprintf>
 800d028:	e00c      	b.n	800d044 <memp_free+0x3c>

  if (mem == NULL) {
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d008      	beq.n	800d042 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	4a09      	ldr	r2, [pc, #36]	@ (800d058 <memp_free+0x50>)
 800d034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff ff94 	bl	800cf68 <do_memp_free_pool>
 800d040:	e000      	b.n	800d044 <memp_free+0x3c>
    return;
 800d042:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	08019b8c 	.word	0x08019b8c
 800d050:	08019c5c 	.word	0x08019c5c
 800d054:	08019be0 	.word	0x08019be0
 800d058:	0801c73c 	.word	0x0801c73c

0800d05c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d060:	bf00      	nop
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
	...

0800d06c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d108      	bne.n	800d092 <netif_add+0x26>
 800d080:	4b5b      	ldr	r3, [pc, #364]	@ (800d1f0 <netif_add+0x184>)
 800d082:	f240 1227 	movw	r2, #295	@ 0x127
 800d086:	495b      	ldr	r1, [pc, #364]	@ (800d1f4 <netif_add+0x188>)
 800d088:	485b      	ldr	r0, [pc, #364]	@ (800d1f8 <netif_add+0x18c>)
 800d08a:	f00b fc57 	bl	801893c <iprintf>
 800d08e:	2300      	movs	r3, #0
 800d090:	e0a9      	b.n	800d1e6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	d108      	bne.n	800d0aa <netif_add+0x3e>
 800d098:	4b55      	ldr	r3, [pc, #340]	@ (800d1f0 <netif_add+0x184>)
 800d09a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d09e:	4957      	ldr	r1, [pc, #348]	@ (800d1fc <netif_add+0x190>)
 800d0a0:	4855      	ldr	r0, [pc, #340]	@ (800d1f8 <netif_add+0x18c>)
 800d0a2:	f00b fc4b 	bl	801893c <iprintf>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e09d      	b.n	800d1e6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d0b0:	4b53      	ldr	r3, [pc, #332]	@ (800d200 <netif_add+0x194>)
 800d0b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d101      	bne.n	800d0be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d0ba:	4b51      	ldr	r3, [pc, #324]	@ (800d200 <netif_add+0x194>)
 800d0bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d0c4:	4b4e      	ldr	r3, [pc, #312]	@ (800d200 <netif_add+0x194>)
 800d0c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	4a49      	ldr	r2, [pc, #292]	@ (800d204 <netif_add+0x198>)
 800d0de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	3324      	adds	r3, #36	@ 0x24
 800d0f2:	2204      	movs	r2, #4
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f00b fc85 	bl	8018a06 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a3a      	ldr	r2, [r7, #32]
 800d106:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d108:	4b3f      	ldr	r3, [pc, #252]	@ (800d208 <netif_add+0x19c>)
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d116:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	68b9      	ldr	r1, [r7, #8]
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f000 f914 	bl	800d34c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	4798      	blx	r3
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <netif_add+0xc8>
    return NULL;
 800d130:	2300      	movs	r3, #0
 800d132:	e058      	b.n	800d1e6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d13a:	2bff      	cmp	r3, #255	@ 0xff
 800d13c:	d103      	bne.n	800d146 <netif_add+0xda>
        netif->num = 0;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d14a:	4b30      	ldr	r3, [pc, #192]	@ (800d20c <netif_add+0x1a0>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	617b      	str	r3, [r7, #20]
 800d150:	e02b      	b.n	800d1aa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	429a      	cmp	r2, r3
 800d158:	d106      	bne.n	800d168 <netif_add+0xfc>
 800d15a:	4b25      	ldr	r3, [pc, #148]	@ (800d1f0 <netif_add+0x184>)
 800d15c:	f240 128b 	movw	r2, #395	@ 0x18b
 800d160:	492b      	ldr	r1, [pc, #172]	@ (800d210 <netif_add+0x1a4>)
 800d162:	4825      	ldr	r0, [pc, #148]	@ (800d1f8 <netif_add+0x18c>)
 800d164:	f00b fbea 	bl	801893c <iprintf>
        num_netifs++;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	3301      	adds	r3, #1
 800d16c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	2bff      	cmp	r3, #255	@ 0xff
 800d172:	dd06      	ble.n	800d182 <netif_add+0x116>
 800d174:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f0 <netif_add+0x184>)
 800d176:	f240 128d 	movw	r2, #397	@ 0x18d
 800d17a:	4926      	ldr	r1, [pc, #152]	@ (800d214 <netif_add+0x1a8>)
 800d17c:	481e      	ldr	r0, [pc, #120]	@ (800d1f8 <netif_add+0x18c>)
 800d17e:	f00b fbdd 	bl	801893c <iprintf>
        if (netif2->num == netif->num) {
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d18e:	429a      	cmp	r2, r3
 800d190:	d108      	bne.n	800d1a4 <netif_add+0x138>
          netif->num++;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d198:	3301      	adds	r3, #1
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800d1a2:	e005      	b.n	800d1b0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	617b      	str	r3, [r7, #20]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1d0      	bne.n	800d152 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1be      	bne.n	800d134 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d1bc:	2bfe      	cmp	r3, #254	@ 0xfe
 800d1be:	d103      	bne.n	800d1c8 <netif_add+0x15c>
    netif_num = 0;
 800d1c0:	4b11      	ldr	r3, [pc, #68]	@ (800d208 <netif_add+0x19c>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	e006      	b.n	800d1d6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d208 <netif_add+0x19c>)
 800d1d4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d20c <netif_add+0x1a0>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d1de:	4a0b      	ldr	r2, [pc, #44]	@ (800d20c <netif_add+0x1a0>)
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	08019c78 	.word	0x08019c78
 800d1f4:	08019d0c 	.word	0x08019d0c
 800d1f8:	08019cc8 	.word	0x08019cc8
 800d1fc:	08019d28 	.word	0x08019d28
 800d200:	0801c7c0 	.word	0x0801c7c0
 800d204:	0800d62f 	.word	0x0800d62f
 800d208:	2400e960 	.word	0x2400e960
 800d20c:	2400e958 	.word	0x2400e958
 800d210:	08019d4c 	.word	0x08019d4c
 800d214:	08019d60 	.word	0x08019d60

0800d218 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d222:	6839      	ldr	r1, [r7, #0]
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f002 fb93 	bl	800f950 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f006 ffa3 	bl	8014178 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d106      	bne.n	800d25c <netif_do_set_ipaddr+0x20>
 800d24e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2c4 <netif_do_set_ipaddr+0x88>)
 800d250:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d254:	491c      	ldr	r1, [pc, #112]	@ (800d2c8 <netif_do_set_ipaddr+0x8c>)
 800d256:	481d      	ldr	r0, [pc, #116]	@ (800d2cc <netif_do_set_ipaddr+0x90>)
 800d258:	f00b fb70 	bl	801893c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d106      	bne.n	800d270 <netif_do_set_ipaddr+0x34>
 800d262:	4b18      	ldr	r3, [pc, #96]	@ (800d2c4 <netif_do_set_ipaddr+0x88>)
 800d264:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d268:	4917      	ldr	r1, [pc, #92]	@ (800d2c8 <netif_do_set_ipaddr+0x8c>)
 800d26a:	4818      	ldr	r0, [pc, #96]	@ (800d2cc <netif_do_set_ipaddr+0x90>)
 800d26c:	f00b fb66 	bl	801893c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	3304      	adds	r3, #4
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d01c      	beq.n	800d2b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	3304      	adds	r3, #4
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d28e:	f107 0314 	add.w	r3, r7, #20
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7ff ffbf 	bl	800d218 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <netif_do_set_ipaddr+0x6a>
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	e000      	b.n	800d2a8 <netif_do_set_ipaddr+0x6c>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d2ac:	2101      	movs	r1, #1
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f000 f8d2 	bl	800d458 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e000      	b.n	800d2ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d2b8:	2300      	movs	r3, #0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3718      	adds	r7, #24
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08019c78 	.word	0x08019c78
 800d2c8:	08019d90 	.word	0x08019d90
 800d2cc:	08019cc8 	.word	0x08019cc8

0800d2d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d00a      	beq.n	800d300 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <netif_do_set_netmask+0x26>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	e000      	b.n	800d2f8 <netif_do_set_netmask+0x28>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d30e:	b480      	push	{r7}
 800d310:	b085      	sub	sp, #20
 800d312:	af00      	add	r7, sp, #0
 800d314:	60f8      	str	r0, [r7, #12]
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	330c      	adds	r3, #12
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	429a      	cmp	r2, r3
 800d326:	d00a      	beq.n	800d33e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d002      	beq.n	800d334 <netif_do_set_gw+0x26>
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	e000      	b.n	800d336 <netif_do_set_gw+0x28>
 800d334:	2300      	movs	r3, #0
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d33a:	2301      	movs	r3, #1
 800d33c:	e000      	b.n	800d340 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b088      	sub	sp, #32
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d368:	4b1c      	ldr	r3, [pc, #112]	@ (800d3dc <netif_set_addr+0x90>)
 800d36a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d101      	bne.n	800d376 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d372:	4b1a      	ldr	r3, [pc, #104]	@ (800d3dc <netif_set_addr+0x90>)
 800d374:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d101      	bne.n	800d380 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d37c:	4b17      	ldr	r3, [pc, #92]	@ (800d3dc <netif_set_addr+0x90>)
 800d37e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <netif_set_addr+0x42>
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <netif_set_addr+0x46>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <netif_set_addr+0x48>
 800d392:	2300      	movs	r3, #0
 800d394:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d006      	beq.n	800d3aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d39c:	f107 0310 	add.w	r3, r7, #16
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f7ff ff49 	bl	800d23c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d3aa:	69fa      	ldr	r2, [r7, #28]
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f7ff ff8e 	bl	800d2d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d3b4:	69ba      	ldr	r2, [r7, #24]
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f7ff ffa8 	bl	800d30e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d106      	bne.n	800d3d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d3c4:	f107 0310 	add.w	r3, r7, #16
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7ff ff35 	bl	800d23c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d3d2:	bf00      	nop
 800d3d4:	3720      	adds	r7, #32
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	0801c7c0 	.word	0x0801c7c0

0800d3e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d3e8:	4a04      	ldr	r2, [pc, #16]	@ (800d3fc <netif_set_default+0x1c>)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d3ee:	bf00      	nop
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	2400e95c 	.word	0x2400e95c

0800d400 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d107      	bne.n	800d41e <netif_set_up+0x1e>
 800d40e:	4b0f      	ldr	r3, [pc, #60]	@ (800d44c <netif_set_up+0x4c>)
 800d410:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d414:	490e      	ldr	r1, [pc, #56]	@ (800d450 <netif_set_up+0x50>)
 800d416:	480f      	ldr	r0, [pc, #60]	@ (800d454 <netif_set_up+0x54>)
 800d418:	f00b fa90 	bl	801893c <iprintf>
 800d41c:	e013      	b.n	800d446 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10c      	bne.n	800d446 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d432:	f043 0301 	orr.w	r3, r3, #1
 800d436:	b2da      	uxtb	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d43e:	2103      	movs	r1, #3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 f809 	bl	800d458 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d446:	3708      	adds	r7, #8
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	08019c78 	.word	0x08019c78
 800d450:	08019e00 	.word	0x08019e00
 800d454:	08019cc8 	.word	0x08019cc8

0800d458 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	460b      	mov	r3, r1
 800d462:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d106      	bne.n	800d478 <netif_issue_reports+0x20>
 800d46a:	4b18      	ldr	r3, [pc, #96]	@ (800d4cc <netif_issue_reports+0x74>)
 800d46c:	f240 326d 	movw	r2, #877	@ 0x36d
 800d470:	4917      	ldr	r1, [pc, #92]	@ (800d4d0 <netif_issue_reports+0x78>)
 800d472:	4818      	ldr	r0, [pc, #96]	@ (800d4d4 <netif_issue_reports+0x7c>)
 800d474:	f00b fa62 	bl	801893c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d47e:	f003 0304 	and.w	r3, r3, #4
 800d482:	2b00      	cmp	r3, #0
 800d484:	d01e      	beq.n	800d4c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d48c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d490:	2b00      	cmp	r3, #0
 800d492:	d017      	beq.n	800d4c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d013      	beq.n	800d4c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00e      	beq.n	800d4c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d4ae:	f003 0308 	and.w	r3, r3, #8
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d007      	beq.n	800d4c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f009 fc57 	bl	8016d70 <etharp_request>
 800d4c2:	e000      	b.n	800d4c6 <netif_issue_reports+0x6e>
    return;
 800d4c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	08019c78 	.word	0x08019c78
 800d4d0:	08019e1c 	.word	0x08019e1c
 800d4d4:	08019cc8 	.word	0x08019cc8

0800d4d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d107      	bne.n	800d4f6 <netif_set_down+0x1e>
 800d4e6:	4b12      	ldr	r3, [pc, #72]	@ (800d530 <netif_set_down+0x58>)
 800d4e8:	f240 329b 	movw	r2, #923	@ 0x39b
 800d4ec:	4911      	ldr	r1, [pc, #68]	@ (800d534 <netif_set_down+0x5c>)
 800d4ee:	4812      	ldr	r0, [pc, #72]	@ (800d538 <netif_set_down+0x60>)
 800d4f0:	f00b fa24 	bl	801893c <iprintf>
 800d4f4:	e019      	b.n	800d52a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d012      	beq.n	800d52a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d50a:	f023 0301 	bic.w	r3, r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d51c:	f003 0308 	and.w	r3, r3, #8
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f008 ffdd 	bl	80164e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	08019c78 	.word	0x08019c78
 800d534:	08019e40 	.word	0x08019e40
 800d538:	08019cc8 	.word	0x08019cc8

0800d53c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d107      	bne.n	800d55a <netif_set_link_up+0x1e>
 800d54a:	4b15      	ldr	r3, [pc, #84]	@ (800d5a0 <netif_set_link_up+0x64>)
 800d54c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d550:	4914      	ldr	r1, [pc, #80]	@ (800d5a4 <netif_set_link_up+0x68>)
 800d552:	4815      	ldr	r0, [pc, #84]	@ (800d5a8 <netif_set_link_up+0x6c>)
 800d554:	f00b f9f2 	bl	801893c <iprintf>
 800d558:	e01e      	b.n	800d598 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d560:	f003 0304 	and.w	r3, r3, #4
 800d564:	2b00      	cmp	r3, #0
 800d566:	d117      	bne.n	800d598 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d56e:	f043 0304 	orr.w	r3, r3, #4
 800d572:	b2da      	uxtb	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f007 fa28 	bl	80149d0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d580:	2103      	movs	r1, #3
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff ff68 	bl	800d458 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	69db      	ldr	r3, [r3, #28]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d003      	beq.n	800d598 <netif_set_link_up+0x5c>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	08019c78 	.word	0x08019c78
 800d5a4:	08019e60 	.word	0x08019e60
 800d5a8:	08019cc8 	.word	0x08019cc8

0800d5ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d107      	bne.n	800d5ca <netif_set_link_down+0x1e>
 800d5ba:	4b11      	ldr	r3, [pc, #68]	@ (800d600 <netif_set_link_down+0x54>)
 800d5bc:	f240 4206 	movw	r2, #1030	@ 0x406
 800d5c0:	4910      	ldr	r1, [pc, #64]	@ (800d604 <netif_set_link_down+0x58>)
 800d5c2:	4811      	ldr	r0, [pc, #68]	@ (800d608 <netif_set_link_down+0x5c>)
 800d5c4:	f00b f9ba 	bl	801893c <iprintf>
 800d5c8:	e017      	b.n	800d5fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d5d0:	f003 0304 	and.w	r3, r3, #4
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d010      	beq.n	800d5fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d5de:	f023 0304 	bic.w	r3, r3, #4
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d003      	beq.n	800d5fa <netif_set_link_down+0x4e>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	69db      	ldr	r3, [r3, #28]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	08019c78 	.word	0x08019c78
 800d604:	08019e84 	.word	0x08019e84
 800d608:	08019cc8 	.word	0x08019cc8

0800d60c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	61da      	str	r2, [r3, #28]
  }
}
 800d622:	bf00      	nop
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d62e:	b480      	push	{r7}
 800d630:	b085      	sub	sp, #20
 800d632:	af00      	add	r7, sp, #0
 800d634:	60f8      	str	r0, [r7, #12]
 800d636:	60b9      	str	r1, [r7, #8]
 800d638:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d63a:	f06f 030b 	mvn.w	r3, #11
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3714      	adds	r7, #20
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
	...

0800d64c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	4603      	mov	r3, r0
 800d654:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d013      	beq.n	800d684 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d65c:	4b0d      	ldr	r3, [pc, #52]	@ (800d694 <netif_get_by_index+0x48>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	60fb      	str	r3, [r7, #12]
 800d662:	e00c      	b.n	800d67e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d66a:	3301      	adds	r3, #1
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	79fa      	ldrb	r2, [r7, #7]
 800d670:	429a      	cmp	r2, r3
 800d672:	d101      	bne.n	800d678 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	e006      	b.n	800d686 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60fb      	str	r3, [r7, #12]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1ef      	bne.n	800d664 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	2400e958 	.word	0x2400e958

0800d698 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d69e:	f00b f82f 	bl	8018700 <sys_arch_protect>
 800d6a2:	6038      	str	r0, [r7, #0]
 800d6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d6dc <pbuf_free_ooseq+0x44>)
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	701a      	strb	r2, [r3, #0]
 800d6aa:	6838      	ldr	r0, [r7, #0]
 800d6ac:	f00b f836 	bl	801871c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e0 <pbuf_free_ooseq+0x48>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	607b      	str	r3, [r7, #4]
 800d6b6:	e00a      	b.n	800d6ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d003      	beq.n	800d6c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f002 f983 	bl	800f9cc <tcp_free_ooseq>
      return;
 800d6c6:	e005      	b.n	800d6d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	68db      	ldr	r3, [r3, #12]
 800d6cc:	607b      	str	r3, [r7, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1f1      	bne.n	800d6b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	2400e961 	.word	0x2400e961
 800d6e0:	2400e970 	.word	0x2400e970

0800d6e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d6ec:	f7ff ffd4 	bl	800d698 <pbuf_free_ooseq>
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d6fe:	f00a ffff 	bl	8018700 <sys_arch_protect>
 800d702:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d704:	4b0f      	ldr	r3, [pc, #60]	@ (800d744 <pbuf_pool_is_empty+0x4c>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d70a:	4b0e      	ldr	r3, [pc, #56]	@ (800d744 <pbuf_pool_is_empty+0x4c>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f00b f803 	bl	801871c <sys_arch_unprotect>

  if (!queued) {
 800d716:	78fb      	ldrb	r3, [r7, #3]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10f      	bne.n	800d73c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d71c:	2100      	movs	r1, #0
 800d71e:	480a      	ldr	r0, [pc, #40]	@ (800d748 <pbuf_pool_is_empty+0x50>)
 800d720:	f7fe fde2 	bl	800c2e8 <tcpip_try_callback>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d008      	beq.n	800d73c <pbuf_pool_is_empty+0x44>
 800d72a:	f00a ffe9 	bl	8018700 <sys_arch_protect>
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	4b04      	ldr	r3, [pc, #16]	@ (800d744 <pbuf_pool_is_empty+0x4c>)
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f00a fff0 	bl	801871c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	2400e961 	.word	0x2400e961
 800d748:	0800d6e5 	.word	0x0800d6e5

0800d74c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	4611      	mov	r1, r2
 800d758:	461a      	mov	r2, r3
 800d75a:	460b      	mov	r3, r1
 800d75c:	80fb      	strh	r3, [r7, #6]
 800d75e:	4613      	mov	r3, r2
 800d760:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	88fa      	ldrh	r2, [r7, #6]
 800d772:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	88ba      	ldrh	r2, [r7, #4]
 800d778:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d77a:	8b3b      	ldrh	r3, [r7, #24]
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	7f3a      	ldrb	r2, [r7, #28]
 800d786:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2201      	movs	r2, #1
 800d78c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	73da      	strb	r2, [r3, #15]
}
 800d794:	bf00      	nop
 800d796:	3714      	adds	r7, #20
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr

0800d7a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b08c      	sub	sp, #48	@ 0x30
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	71fb      	strb	r3, [r7, #7]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	80bb      	strh	r3, [r7, #4]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d7b2:	79fb      	ldrb	r3, [r7, #7]
 800d7b4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d7b6:	887b      	ldrh	r3, [r7, #2]
 800d7b8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d7bc:	d07f      	beq.n	800d8be <pbuf_alloc+0x11e>
 800d7be:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d7c2:	f300 80c8 	bgt.w	800d956 <pbuf_alloc+0x1b6>
 800d7c6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d7ca:	d010      	beq.n	800d7ee <pbuf_alloc+0x4e>
 800d7cc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d7d0:	f300 80c1 	bgt.w	800d956 <pbuf_alloc+0x1b6>
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d002      	beq.n	800d7de <pbuf_alloc+0x3e>
 800d7d8:	2b41      	cmp	r3, #65	@ 0x41
 800d7da:	f040 80bc 	bne.w	800d956 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d7de:	887a      	ldrh	r2, [r7, #2]
 800d7e0:	88bb      	ldrh	r3, [r7, #4]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	f000 f8d1 	bl	800d98c <pbuf_alloc_reference>
 800d7ea:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d7ec:	e0bd      	b.n	800d96a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d7f6:	88bb      	ldrh	r3, [r7, #4]
 800d7f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d7fa:	200c      	movs	r0, #12
 800d7fc:	f7ff fb8e 	bl	800cf1c <memp_malloc>
 800d800:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d109      	bne.n	800d81c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d808:	f7ff ff76 	bl	800d6f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d002      	beq.n	800d818 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d814:	f000 faa8 	bl	800dd68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d818:	2300      	movs	r3, #0
 800d81a:	e0a7      	b.n	800d96c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d81c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d81e:	3303      	adds	r3, #3
 800d820:	b29b      	uxth	r3, r3
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	b29b      	uxth	r3, r3
 800d828:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	8b7a      	ldrh	r2, [r7, #26]
 800d830:	4293      	cmp	r3, r2
 800d832:	bf28      	it	cs
 800d834:	4613      	movcs	r3, r2
 800d836:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d838:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d83a:	3310      	adds	r3, #16
 800d83c:	693a      	ldr	r2, [r7, #16]
 800d83e:	4413      	add	r3, r2
 800d840:	3303      	adds	r3, #3
 800d842:	f023 0303 	bic.w	r3, r3, #3
 800d846:	4618      	mov	r0, r3
 800d848:	89f9      	ldrh	r1, [r7, #14]
 800d84a:	8b7a      	ldrh	r2, [r7, #26]
 800d84c:	2300      	movs	r3, #0
 800d84e:	9301      	str	r3, [sp, #4]
 800d850:	887b      	ldrh	r3, [r7, #2]
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	460b      	mov	r3, r1
 800d856:	4601      	mov	r1, r0
 800d858:	6938      	ldr	r0, [r7, #16]
 800d85a:	f7ff ff77 	bl	800d74c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	f003 0303 	and.w	r3, r3, #3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d006      	beq.n	800d878 <pbuf_alloc+0xd8>
 800d86a:	4b42      	ldr	r3, [pc, #264]	@ (800d974 <pbuf_alloc+0x1d4>)
 800d86c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d870:	4941      	ldr	r1, [pc, #260]	@ (800d978 <pbuf_alloc+0x1d8>)
 800d872:	4842      	ldr	r0, [pc, #264]	@ (800d97c <pbuf_alloc+0x1dc>)
 800d874:	f00b f862 	bl	801893c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d878:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d87a:	3303      	adds	r3, #3
 800d87c:	f023 0303 	bic.w	r3, r3, #3
 800d880:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d884:	d106      	bne.n	800d894 <pbuf_alloc+0xf4>
 800d886:	4b3b      	ldr	r3, [pc, #236]	@ (800d974 <pbuf_alloc+0x1d4>)
 800d888:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d88c:	493c      	ldr	r1, [pc, #240]	@ (800d980 <pbuf_alloc+0x1e0>)
 800d88e:	483b      	ldr	r0, [pc, #236]	@ (800d97c <pbuf_alloc+0x1dc>)
 800d890:	f00b f854 	bl	801893c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d89e:	e002      	b.n	800d8a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	693a      	ldr	r2, [r7, #16]
 800d8a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d8aa:	8b7a      	ldrh	r2, [r7, #26]
 800d8ac:	89fb      	ldrh	r3, [r7, #14]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d8b6:	8b7b      	ldrh	r3, [r7, #26]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d19e      	bne.n	800d7fa <pbuf_alloc+0x5a>
      break;
 800d8bc:	e055      	b.n	800d96a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d8be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8c0:	3303      	adds	r3, #3
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	f023 0303 	bic.w	r3, r3, #3
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	88bb      	ldrh	r3, [r7, #4]
 800d8cc:	3303      	adds	r3, #3
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	f023 0303 	bic.w	r3, r3, #3
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	4413      	add	r3, r2
 800d8d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d8da:	8b3b      	ldrh	r3, [r7, #24]
 800d8dc:	3310      	adds	r3, #16
 800d8de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8e0:	8b3a      	ldrh	r2, [r7, #24]
 800d8e2:	88bb      	ldrh	r3, [r7, #4]
 800d8e4:	3303      	adds	r3, #3
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d306      	bcc.n	800d8fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d8ee:	8afa      	ldrh	r2, [r7, #22]
 800d8f0:	88bb      	ldrh	r3, [r7, #4]
 800d8f2:	3303      	adds	r3, #3
 800d8f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d201      	bcs.n	800d900 <pbuf_alloc+0x160>
        return NULL;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	e035      	b.n	800d96c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d900:	8afb      	ldrh	r3, [r7, #22]
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff f966 	bl	800cbd4 <mem_malloc>
 800d908:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d101      	bne.n	800d914 <pbuf_alloc+0x174>
        return NULL;
 800d910:	2300      	movs	r3, #0
 800d912:	e02b      	b.n	800d96c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d914:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d916:	3310      	adds	r3, #16
 800d918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d91a:	4413      	add	r3, r2
 800d91c:	3303      	adds	r3, #3
 800d91e:	f023 0303 	bic.w	r3, r3, #3
 800d922:	4618      	mov	r0, r3
 800d924:	88b9      	ldrh	r1, [r7, #4]
 800d926:	88ba      	ldrh	r2, [r7, #4]
 800d928:	2300      	movs	r3, #0
 800d92a:	9301      	str	r3, [sp, #4]
 800d92c:	887b      	ldrh	r3, [r7, #2]
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	460b      	mov	r3, r1
 800d932:	4601      	mov	r1, r0
 800d934:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d936:	f7ff ff09 	bl	800d74c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	f003 0303 	and.w	r3, r3, #3
 800d942:	2b00      	cmp	r3, #0
 800d944:	d010      	beq.n	800d968 <pbuf_alloc+0x1c8>
 800d946:	4b0b      	ldr	r3, [pc, #44]	@ (800d974 <pbuf_alloc+0x1d4>)
 800d948:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d94c:	490d      	ldr	r1, [pc, #52]	@ (800d984 <pbuf_alloc+0x1e4>)
 800d94e:	480b      	ldr	r0, [pc, #44]	@ (800d97c <pbuf_alloc+0x1dc>)
 800d950:	f00a fff4 	bl	801893c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d954:	e008      	b.n	800d968 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d956:	4b07      	ldr	r3, [pc, #28]	@ (800d974 <pbuf_alloc+0x1d4>)
 800d958:	f240 1227 	movw	r2, #295	@ 0x127
 800d95c:	490a      	ldr	r1, [pc, #40]	@ (800d988 <pbuf_alloc+0x1e8>)
 800d95e:	4807      	ldr	r0, [pc, #28]	@ (800d97c <pbuf_alloc+0x1dc>)
 800d960:	f00a ffec 	bl	801893c <iprintf>
      return NULL;
 800d964:	2300      	movs	r3, #0
 800d966:	e001      	b.n	800d96c <pbuf_alloc+0x1cc>
      break;
 800d968:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3728      	adds	r7, #40	@ 0x28
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	08019ea8 	.word	0x08019ea8
 800d978:	08019ed8 	.word	0x08019ed8
 800d97c:	08019f08 	.word	0x08019f08
 800d980:	08019f30 	.word	0x08019f30
 800d984:	08019f64 	.word	0x08019f64
 800d988:	08019f90 	.word	0x08019f90

0800d98c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af02      	add	r7, sp, #8
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	460b      	mov	r3, r1
 800d996:	807b      	strh	r3, [r7, #2]
 800d998:	4613      	mov	r3, r2
 800d99a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d99c:	883b      	ldrh	r3, [r7, #0]
 800d99e:	2b41      	cmp	r3, #65	@ 0x41
 800d9a0:	d009      	beq.n	800d9b6 <pbuf_alloc_reference+0x2a>
 800d9a2:	883b      	ldrh	r3, [r7, #0]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d006      	beq.n	800d9b6 <pbuf_alloc_reference+0x2a>
 800d9a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d9e8 <pbuf_alloc_reference+0x5c>)
 800d9aa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d9ae:	490f      	ldr	r1, [pc, #60]	@ (800d9ec <pbuf_alloc_reference+0x60>)
 800d9b0:	480f      	ldr	r0, [pc, #60]	@ (800d9f0 <pbuf_alloc_reference+0x64>)
 800d9b2:	f00a ffc3 	bl	801893c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d9b6:	200b      	movs	r0, #11
 800d9b8:	f7ff fab0 	bl	800cf1c <memp_malloc>
 800d9bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d101      	bne.n	800d9c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e00b      	b.n	800d9e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d9c8:	8879      	ldrh	r1, [r7, #2]
 800d9ca:	887a      	ldrh	r2, [r7, #2]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	883b      	ldrh	r3, [r7, #0]
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff feb7 	bl	800d74c <pbuf_init_alloced_pbuf>
  return p;
 800d9de:	68fb      	ldr	r3, [r7, #12]
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	08019ea8 	.word	0x08019ea8
 800d9ec:	08019fac 	.word	0x08019fac
 800d9f0:	08019f08 	.word	0x08019f08

0800d9f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af02      	add	r7, sp, #8
 800d9fa:	607b      	str	r3, [r7, #4]
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]
 800da00:	460b      	mov	r3, r1
 800da02:	81bb      	strh	r3, [r7, #12]
 800da04:	4613      	mov	r3, r2
 800da06:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da08:	7bfb      	ldrb	r3, [r7, #15]
 800da0a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da0c:	8a7b      	ldrh	r3, [r7, #18]
 800da0e:	3303      	adds	r3, #3
 800da10:	f023 0203 	bic.w	r2, r3, #3
 800da14:	89bb      	ldrh	r3, [r7, #12]
 800da16:	441a      	add	r2, r3
 800da18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d901      	bls.n	800da22 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da1e:	2300      	movs	r3, #0
 800da20:	e018      	b.n	800da54 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d007      	beq.n	800da38 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da28:	8a7b      	ldrh	r3, [r7, #18]
 800da2a:	3303      	adds	r3, #3
 800da2c:	f023 0303 	bic.w	r3, r3, #3
 800da30:	6a3a      	ldr	r2, [r7, #32]
 800da32:	4413      	add	r3, r2
 800da34:	617b      	str	r3, [r7, #20]
 800da36:	e001      	b.n	800da3c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da38:	2300      	movs	r3, #0
 800da3a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	89b9      	ldrh	r1, [r7, #12]
 800da40:	89ba      	ldrh	r2, [r7, #12]
 800da42:	2302      	movs	r3, #2
 800da44:	9301      	str	r3, [sp, #4]
 800da46:	897b      	ldrh	r3, [r7, #10]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	460b      	mov	r3, r1
 800da4c:	6979      	ldr	r1, [r7, #20]
 800da4e:	f7ff fe7d 	bl	800d74c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da52:	687b      	ldr	r3, [r7, #4]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3718      	adds	r7, #24
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d106      	bne.n	800da7c <pbuf_realloc+0x20>
 800da6e:	4b3a      	ldr	r3, [pc, #232]	@ (800db58 <pbuf_realloc+0xfc>)
 800da70:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800da74:	4939      	ldr	r1, [pc, #228]	@ (800db5c <pbuf_realloc+0x100>)
 800da76:	483a      	ldr	r0, [pc, #232]	@ (800db60 <pbuf_realloc+0x104>)
 800da78:	f00a ff60 	bl	801893c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	891b      	ldrh	r3, [r3, #8]
 800da80:	887a      	ldrh	r2, [r7, #2]
 800da82:	429a      	cmp	r2, r3
 800da84:	d263      	bcs.n	800db4e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	891a      	ldrh	r2, [r3, #8]
 800da8a:	887b      	ldrh	r3, [r7, #2]
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da90:	887b      	ldrh	r3, [r7, #2]
 800da92:	817b      	strh	r3, [r7, #10]
  q = p;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da98:	e018      	b.n	800dacc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	895b      	ldrh	r3, [r3, #10]
 800da9e:	897a      	ldrh	r2, [r7, #10]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	891a      	ldrh	r2, [r3, #8]
 800daa8:	893b      	ldrh	r3, [r7, #8]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	b29a      	uxth	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d106      	bne.n	800dacc <pbuf_realloc+0x70>
 800dabe:	4b26      	ldr	r3, [pc, #152]	@ (800db58 <pbuf_realloc+0xfc>)
 800dac0:	f240 12af 	movw	r2, #431	@ 0x1af
 800dac4:	4927      	ldr	r1, [pc, #156]	@ (800db64 <pbuf_realloc+0x108>)
 800dac6:	4826      	ldr	r0, [pc, #152]	@ (800db60 <pbuf_realloc+0x104>)
 800dac8:	f00a ff38 	bl	801893c <iprintf>
  while (rem_len > q->len) {
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	895b      	ldrh	r3, [r3, #10]
 800dad0:	897a      	ldrh	r2, [r7, #10]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d8e1      	bhi.n	800da9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	7b1b      	ldrb	r3, [r3, #12]
 800dada:	f003 030f 	and.w	r3, r3, #15
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d121      	bne.n	800db26 <pbuf_realloc+0xca>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	895b      	ldrh	r3, [r3, #10]
 800dae6:	897a      	ldrh	r2, [r7, #10]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d01c      	beq.n	800db26 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	7b5b      	ldrb	r3, [r3, #13]
 800daf0:	f003 0302 	and.w	r3, r3, #2
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d116      	bne.n	800db26 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	b29a      	uxth	r2, r3
 800db02:	897b      	ldrh	r3, [r7, #10]
 800db04:	4413      	add	r3, r2
 800db06:	b29b      	uxth	r3, r3
 800db08:	4619      	mov	r1, r3
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7fe ff58 	bl	800c9c0 <mem_trim>
 800db10:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d106      	bne.n	800db26 <pbuf_realloc+0xca>
 800db18:	4b0f      	ldr	r3, [pc, #60]	@ (800db58 <pbuf_realloc+0xfc>)
 800db1a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800db1e:	4912      	ldr	r1, [pc, #72]	@ (800db68 <pbuf_realloc+0x10c>)
 800db20:	480f      	ldr	r0, [pc, #60]	@ (800db60 <pbuf_realloc+0x104>)
 800db22:	f00a ff0b 	bl	801893c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	897a      	ldrh	r2, [r7, #10]
 800db2a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	895a      	ldrh	r2, [r3, #10]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d004      	beq.n	800db46 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f911 	bl	800dd68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	e000      	b.n	800db50 <pbuf_realloc+0xf4>
    return;
 800db4e:	bf00      	nop

}
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	08019ea8 	.word	0x08019ea8
 800db5c:	08019fc0 	.word	0x08019fc0
 800db60:	08019f08 	.word	0x08019f08
 800db64:	08019fd8 	.word	0x08019fd8
 800db68:	08019ff0 	.word	0x08019ff0

0800db6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	4613      	mov	r3, r2
 800db78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d106      	bne.n	800db8e <pbuf_add_header_impl+0x22>
 800db80:	4b2b      	ldr	r3, [pc, #172]	@ (800dc30 <pbuf_add_header_impl+0xc4>)
 800db82:	f240 12df 	movw	r2, #479	@ 0x1df
 800db86:	492b      	ldr	r1, [pc, #172]	@ (800dc34 <pbuf_add_header_impl+0xc8>)
 800db88:	482b      	ldr	r0, [pc, #172]	@ (800dc38 <pbuf_add_header_impl+0xcc>)
 800db8a:	f00a fed7 	bl	801893c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d003      	beq.n	800db9c <pbuf_add_header_impl+0x30>
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db9a:	d301      	bcc.n	800dba0 <pbuf_add_header_impl+0x34>
    return 1;
 800db9c:	2301      	movs	r3, #1
 800db9e:	e043      	b.n	800dc28 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <pbuf_add_header_impl+0x3e>
    return 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	e03e      	b.n	800dc28 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	891a      	ldrh	r2, [r3, #8]
 800dbb2:	8a7b      	ldrh	r3, [r7, #18]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	8a7a      	ldrh	r2, [r7, #18]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d901      	bls.n	800dbc2 <pbuf_add_header_impl+0x56>
    return 1;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e032      	b.n	800dc28 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	7b1b      	ldrb	r3, [r3, #12]
 800dbc6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dbc8:	8a3b      	ldrh	r3, [r7, #16]
 800dbca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00c      	beq.n	800dbec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	425b      	negs	r3, r3
 800dbda:	4413      	add	r3, r2
 800dbdc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3310      	adds	r3, #16
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d20d      	bcs.n	800dc04 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e01d      	b.n	800dc28 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d006      	beq.n	800dc00 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	425b      	negs	r3, r3
 800dbfa:	4413      	add	r3, r2
 800dbfc:	617b      	str	r3, [r7, #20]
 800dbfe:	e001      	b.n	800dc04 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e011      	b.n	800dc28 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	697a      	ldr	r2, [r7, #20]
 800dc08:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	895a      	ldrh	r2, [r3, #10]
 800dc0e:	8a7b      	ldrh	r3, [r7, #18]
 800dc10:	4413      	add	r3, r2
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	891a      	ldrh	r2, [r3, #8]
 800dc1c:	8a7b      	ldrh	r3, [r7, #18]
 800dc1e:	4413      	add	r3, r2
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	08019ea8 	.word	0x08019ea8
 800dc34:	0801a00c 	.word	0x0801a00c
 800dc38:	08019f08 	.word	0x08019f08

0800dc3c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc46:	2200      	movs	r2, #0
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ff8e 	bl	800db6c <pbuf_add_header_impl>
 800dc50:	4603      	mov	r3, r0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
	...

0800dc5c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <pbuf_remove_header+0x1e>
 800dc6c:	4b20      	ldr	r3, [pc, #128]	@ (800dcf0 <pbuf_remove_header+0x94>)
 800dc6e:	f240 224b 	movw	r2, #587	@ 0x24b
 800dc72:	4920      	ldr	r1, [pc, #128]	@ (800dcf4 <pbuf_remove_header+0x98>)
 800dc74:	4820      	ldr	r0, [pc, #128]	@ (800dcf8 <pbuf_remove_header+0x9c>)
 800dc76:	f00a fe61 	bl	801893c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d003      	beq.n	800dc88 <pbuf_remove_header+0x2c>
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc86:	d301      	bcc.n	800dc8c <pbuf_remove_header+0x30>
    return 1;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e02c      	b.n	800dce6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d101      	bne.n	800dc96 <pbuf_remove_header+0x3a>
    return 0;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e027      	b.n	800dce6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	895b      	ldrh	r3, [r3, #10]
 800dc9e:	89fa      	ldrh	r2, [r7, #14]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d908      	bls.n	800dcb6 <pbuf_remove_header+0x5a>
 800dca4:	4b12      	ldr	r3, [pc, #72]	@ (800dcf0 <pbuf_remove_header+0x94>)
 800dca6:	f240 2255 	movw	r2, #597	@ 0x255
 800dcaa:	4914      	ldr	r1, [pc, #80]	@ (800dcfc <pbuf_remove_header+0xa0>)
 800dcac:	4812      	ldr	r0, [pc, #72]	@ (800dcf8 <pbuf_remove_header+0x9c>)
 800dcae:	f00a fe45 	bl	801893c <iprintf>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e017      	b.n	800dce6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685a      	ldr	r2, [r3, #4]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	441a      	add	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	895a      	ldrh	r2, [r3, #10]
 800dccc:	89fb      	ldrh	r3, [r7, #14]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	891a      	ldrh	r2, [r3, #8]
 800dcda:	89fb      	ldrh	r3, [r7, #14]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	08019ea8 	.word	0x08019ea8
 800dcf4:	0801a00c 	.word	0x0801a00c
 800dcf8:	08019f08 	.word	0x08019f08
 800dcfc:	0801a018 	.word	0x0801a018

0800dd00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	807b      	strh	r3, [r7, #2]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	da08      	bge.n	800dd2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd1c:	425b      	negs	r3, r3
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff ff9b 	bl	800dc5c <pbuf_remove_header>
 800dd26:	4603      	mov	r3, r0
 800dd28:	e007      	b.n	800dd3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd2e:	787a      	ldrb	r2, [r7, #1]
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ff1a 	bl	800db6c <pbuf_add_header_impl>
 800dd38:	4603      	mov	r3, r0
  }
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd52:	2201      	movs	r2, #1
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff ffd2 	bl	800dd00 <pbuf_header_impl>
 800dd5c:	4603      	mov	r3, r0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b088      	sub	sp, #32
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10b      	bne.n	800dd8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d106      	bne.n	800dd8a <pbuf_free+0x22>
 800dd7c:	4b3b      	ldr	r3, [pc, #236]	@ (800de6c <pbuf_free+0x104>)
 800dd7e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800dd82:	493b      	ldr	r1, [pc, #236]	@ (800de70 <pbuf_free+0x108>)
 800dd84:	483b      	ldr	r0, [pc, #236]	@ (800de74 <pbuf_free+0x10c>)
 800dd86:	f00a fdd9 	bl	801893c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e069      	b.n	800de62 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd92:	e062      	b.n	800de5a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800dd94:	f00a fcb4 	bl	8018700 <sys_arch_protect>
 800dd98:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	7b9b      	ldrb	r3, [r3, #14]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d106      	bne.n	800ddb0 <pbuf_free+0x48>
 800dda2:	4b32      	ldr	r3, [pc, #200]	@ (800de6c <pbuf_free+0x104>)
 800dda4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800dda8:	4933      	ldr	r1, [pc, #204]	@ (800de78 <pbuf_free+0x110>)
 800ddaa:	4832      	ldr	r0, [pc, #200]	@ (800de74 <pbuf_free+0x10c>)
 800ddac:	f00a fdc6 	bl	801893c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	7b9b      	ldrb	r3, [r3, #14]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	739a      	strb	r2, [r3, #14]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7b9b      	ldrb	r3, [r3, #14]
 800ddc0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ddc2:	69b8      	ldr	r0, [r7, #24]
 800ddc4:	f00a fcaa 	bl	801871c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ddc8:	7dfb      	ldrb	r3, [r7, #23]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d143      	bne.n	800de56 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	7b1b      	ldrb	r3, [r3, #12]
 800ddd8:	f003 030f 	and.w	r3, r3, #15
 800dddc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	7b5b      	ldrb	r3, [r3, #13]
 800dde2:	f003 0302 	and.w	r3, r3, #2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d011      	beq.n	800de0e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d106      	bne.n	800de04 <pbuf_free+0x9c>
 800ddf6:	4b1d      	ldr	r3, [pc, #116]	@ (800de6c <pbuf_free+0x104>)
 800ddf8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ddfc:	491f      	ldr	r1, [pc, #124]	@ (800de7c <pbuf_free+0x114>)
 800ddfe:	481d      	ldr	r0, [pc, #116]	@ (800de74 <pbuf_free+0x10c>)
 800de00:	f00a fd9c 	bl	801893c <iprintf>
        pc->custom_free_function(p);
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	4798      	blx	r3
 800de0c:	e01d      	b.n	800de4a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
 800de10:	2b02      	cmp	r3, #2
 800de12:	d104      	bne.n	800de1e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800de14:	6879      	ldr	r1, [r7, #4]
 800de16:	200c      	movs	r0, #12
 800de18:	f7ff f8f6 	bl	800d008 <memp_free>
 800de1c:	e015      	b.n	800de4a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d104      	bne.n	800de2e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800de24:	6879      	ldr	r1, [r7, #4]
 800de26:	200b      	movs	r0, #11
 800de28:	f7ff f8ee 	bl	800d008 <memp_free>
 800de2c:	e00d      	b.n	800de4a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d103      	bne.n	800de3c <pbuf_free+0xd4>
          mem_free(p);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7fe fd33 	bl	800c8a0 <mem_free>
 800de3a:	e006      	b.n	800de4a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800de3c:	4b0b      	ldr	r3, [pc, #44]	@ (800de6c <pbuf_free+0x104>)
 800de3e:	f240 320f 	movw	r2, #783	@ 0x30f
 800de42:	490f      	ldr	r1, [pc, #60]	@ (800de80 <pbuf_free+0x118>)
 800de44:	480b      	ldr	r0, [pc, #44]	@ (800de74 <pbuf_free+0x10c>)
 800de46:	f00a fd79 	bl	801893c <iprintf>
        }
      }
      count++;
 800de4a:	7ffb      	ldrb	r3, [r7, #31]
 800de4c:	3301      	adds	r3, #1
 800de4e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	607b      	str	r3, [r7, #4]
 800de54:	e001      	b.n	800de5a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800de56:	2300      	movs	r3, #0
 800de58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d199      	bne.n	800dd94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800de60:	7ffb      	ldrb	r3, [r7, #31]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3720      	adds	r7, #32
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	08019ea8 	.word	0x08019ea8
 800de70:	0801a00c 	.word	0x0801a00c
 800de74:	08019f08 	.word	0x08019f08
 800de78:	0801a038 	.word	0x0801a038
 800de7c:	0801a050 	.word	0x0801a050
 800de80:	0801a074 	.word	0x0801a074

0800de84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800de8c:	2300      	movs	r3, #0
 800de8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800de90:	e005      	b.n	800de9e <pbuf_clen+0x1a>
    ++len;
 800de92:	89fb      	ldrh	r3, [r7, #14]
 800de94:	3301      	adds	r3, #1
 800de96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1f6      	bne.n	800de92 <pbuf_clen+0xe>
  }
  return len;
 800dea4:	89fb      	ldrh	r3, [r7, #14]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
	...

0800deb4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d016      	beq.n	800def0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dec2:	f00a fc1d 	bl	8018700 <sys_arch_protect>
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7b9b      	ldrb	r3, [r3, #14]
 800decc:	3301      	adds	r3, #1
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	739a      	strb	r2, [r3, #14]
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f00a fc21 	bl	801871c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7b9b      	ldrb	r3, [r3, #14]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d106      	bne.n	800def0 <pbuf_ref+0x3c>
 800dee2:	4b05      	ldr	r3, [pc, #20]	@ (800def8 <pbuf_ref+0x44>)
 800dee4:	f240 3242 	movw	r2, #834	@ 0x342
 800dee8:	4904      	ldr	r1, [pc, #16]	@ (800defc <pbuf_ref+0x48>)
 800deea:	4805      	ldr	r0, [pc, #20]	@ (800df00 <pbuf_ref+0x4c>)
 800deec:	f00a fd26 	bl	801893c <iprintf>
  }
}
 800def0:	bf00      	nop
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	08019ea8 	.word	0x08019ea8
 800defc:	0801a088 	.word	0x0801a088
 800df00:	08019f08 	.word	0x08019f08

0800df04 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <pbuf_cat+0x16>
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d107      	bne.n	800df2a <pbuf_cat+0x26>
 800df1a:	4b20      	ldr	r3, [pc, #128]	@ (800df9c <pbuf_cat+0x98>)
 800df1c:	f240 3259 	movw	r2, #857	@ 0x359
 800df20:	491f      	ldr	r1, [pc, #124]	@ (800dfa0 <pbuf_cat+0x9c>)
 800df22:	4820      	ldr	r0, [pc, #128]	@ (800dfa4 <pbuf_cat+0xa0>)
 800df24:	f00a fd0a 	bl	801893c <iprintf>
 800df28:	e034      	b.n	800df94 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	60fb      	str	r3, [r7, #12]
 800df2e:	e00a      	b.n	800df46 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	891a      	ldrh	r2, [r3, #8]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	891b      	ldrh	r3, [r3, #8]
 800df38:	4413      	add	r3, r2
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	60fb      	str	r3, [r7, #12]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1f0      	bne.n	800df30 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	891a      	ldrh	r2, [r3, #8]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	895b      	ldrh	r3, [r3, #10]
 800df56:	429a      	cmp	r2, r3
 800df58:	d006      	beq.n	800df68 <pbuf_cat+0x64>
 800df5a:	4b10      	ldr	r3, [pc, #64]	@ (800df9c <pbuf_cat+0x98>)
 800df5c:	f240 3262 	movw	r2, #866	@ 0x362
 800df60:	4911      	ldr	r1, [pc, #68]	@ (800dfa8 <pbuf_cat+0xa4>)
 800df62:	4810      	ldr	r0, [pc, #64]	@ (800dfa4 <pbuf_cat+0xa0>)
 800df64:	f00a fcea 	bl	801893c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d006      	beq.n	800df7e <pbuf_cat+0x7a>
 800df70:	4b0a      	ldr	r3, [pc, #40]	@ (800df9c <pbuf_cat+0x98>)
 800df72:	f240 3263 	movw	r2, #867	@ 0x363
 800df76:	490d      	ldr	r1, [pc, #52]	@ (800dfac <pbuf_cat+0xa8>)
 800df78:	480a      	ldr	r0, [pc, #40]	@ (800dfa4 <pbuf_cat+0xa0>)
 800df7a:	f00a fcdf 	bl	801893c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	891a      	ldrh	r2, [r3, #8]
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	891b      	ldrh	r3, [r3, #8]
 800df86:	4413      	add	r3, r2
 800df88:	b29a      	uxth	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	08019ea8 	.word	0x08019ea8
 800dfa0:	0801a09c 	.word	0x0801a09c
 800dfa4:	08019f08 	.word	0x08019f08
 800dfa8:	0801a0d4 	.word	0x0801a0d4
 800dfac:	0801a104 	.word	0x0801a104

0800dfb0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7ff ffa1 	bl	800df04 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dfc2:	6838      	ldr	r0, [r7, #0]
 800dfc4:	f7ff ff76 	bl	800deb4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	617b      	str	r3, [r7, #20]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d008      	beq.n	800dffa <pbuf_copy+0x2a>
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d005      	beq.n	800dffa <pbuf_copy+0x2a>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	891a      	ldrh	r2, [r3, #8]
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	891b      	ldrh	r3, [r3, #8]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d209      	bcs.n	800e00e <pbuf_copy+0x3e>
 800dffa:	4b57      	ldr	r3, [pc, #348]	@ (800e158 <pbuf_copy+0x188>)
 800dffc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e000:	4956      	ldr	r1, [pc, #344]	@ (800e15c <pbuf_copy+0x18c>)
 800e002:	4857      	ldr	r0, [pc, #348]	@ (800e160 <pbuf_copy+0x190>)
 800e004:	f00a fc9a 	bl	801893c <iprintf>
 800e008:	f06f 030f 	mvn.w	r3, #15
 800e00c:	e09f      	b.n	800e14e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	895b      	ldrh	r3, [r3, #10]
 800e012:	461a      	mov	r2, r3
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	1ad2      	subs	r2, r2, r3
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	895b      	ldrh	r3, [r3, #10]
 800e01c:	4619      	mov	r1, r3
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	1acb      	subs	r3, r1, r3
 800e022:	429a      	cmp	r2, r3
 800e024:	d306      	bcc.n	800e034 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	895b      	ldrh	r3, [r3, #10]
 800e02a:	461a      	mov	r2, r3
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	60fb      	str	r3, [r7, #12]
 800e032:	e005      	b.n	800e040 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	895b      	ldrh	r3, [r3, #10]
 800e038:	461a      	mov	r2, r3
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685a      	ldr	r2, [r3, #4]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	18d0      	adds	r0, r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	685a      	ldr	r2, [r3, #4]
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	4413      	add	r3, r2
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	4619      	mov	r1, r3
 800e054:	f00a fd4d 	bl	8018af2 <memcpy>
    offset_to += len;
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	4413      	add	r3, r2
 800e05e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e060:	693a      	ldr	r2, [r7, #16]
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	895b      	ldrh	r3, [r3, #10]
 800e06c:	461a      	mov	r2, r3
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	4293      	cmp	r3, r2
 800e072:	d906      	bls.n	800e082 <pbuf_copy+0xb2>
 800e074:	4b38      	ldr	r3, [pc, #224]	@ (800e158 <pbuf_copy+0x188>)
 800e076:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e07a:	493a      	ldr	r1, [pc, #232]	@ (800e164 <pbuf_copy+0x194>)
 800e07c:	4838      	ldr	r0, [pc, #224]	@ (800e160 <pbuf_copy+0x190>)
 800e07e:	f00a fc5d 	bl	801893c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	895b      	ldrh	r3, [r3, #10]
 800e086:	461a      	mov	r2, r3
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d906      	bls.n	800e09c <pbuf_copy+0xcc>
 800e08e:	4b32      	ldr	r3, [pc, #200]	@ (800e158 <pbuf_copy+0x188>)
 800e090:	f240 32da 	movw	r2, #986	@ 0x3da
 800e094:	4934      	ldr	r1, [pc, #208]	@ (800e168 <pbuf_copy+0x198>)
 800e096:	4832      	ldr	r0, [pc, #200]	@ (800e160 <pbuf_copy+0x190>)
 800e098:	f00a fc50 	bl	801893c <iprintf>
    if (offset_from >= p_from->len) {
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	895b      	ldrh	r3, [r3, #10]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d304      	bcc.n	800e0b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	895b      	ldrh	r3, [r3, #10]
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d114      	bne.n	800e0e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10c      	bne.n	800e0e8 <pbuf_copy+0x118>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d009      	beq.n	800e0e8 <pbuf_copy+0x118>
 800e0d4:	4b20      	ldr	r3, [pc, #128]	@ (800e158 <pbuf_copy+0x188>)
 800e0d6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e0da:	4924      	ldr	r1, [pc, #144]	@ (800e16c <pbuf_copy+0x19c>)
 800e0dc:	4820      	ldr	r0, [pc, #128]	@ (800e160 <pbuf_copy+0x190>)
 800e0de:	f00a fc2d 	bl	801893c <iprintf>
 800e0e2:	f06f 030f 	mvn.w	r3, #15
 800e0e6:	e032      	b.n	800e14e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d013      	beq.n	800e116 <pbuf_copy+0x146>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	895a      	ldrh	r2, [r3, #10]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	891b      	ldrh	r3, [r3, #8]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d10d      	bne.n	800e116 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d009      	beq.n	800e116 <pbuf_copy+0x146>
 800e102:	4b15      	ldr	r3, [pc, #84]	@ (800e158 <pbuf_copy+0x188>)
 800e104:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e108:	4919      	ldr	r1, [pc, #100]	@ (800e170 <pbuf_copy+0x1a0>)
 800e10a:	4815      	ldr	r0, [pc, #84]	@ (800e160 <pbuf_copy+0x190>)
 800e10c:	f00a fc16 	bl	801893c <iprintf>
 800e110:	f06f 0305 	mvn.w	r3, #5
 800e114:	e01b      	b.n	800e14e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d013      	beq.n	800e144 <pbuf_copy+0x174>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	895a      	ldrh	r2, [r3, #10]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	891b      	ldrh	r3, [r3, #8]
 800e124:	429a      	cmp	r2, r3
 800e126:	d10d      	bne.n	800e144 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <pbuf_copy+0x174>
 800e130:	4b09      	ldr	r3, [pc, #36]	@ (800e158 <pbuf_copy+0x188>)
 800e132:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e136:	490e      	ldr	r1, [pc, #56]	@ (800e170 <pbuf_copy+0x1a0>)
 800e138:	4809      	ldr	r0, [pc, #36]	@ (800e160 <pbuf_copy+0x190>)
 800e13a:	f00a fbff 	bl	801893c <iprintf>
 800e13e:	f06f 0305 	mvn.w	r3, #5
 800e142:	e004      	b.n	800e14e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	f47f af61 	bne.w	800e00e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	08019ea8 	.word	0x08019ea8
 800e15c:	0801a150 	.word	0x0801a150
 800e160:	08019f08 	.word	0x08019f08
 800e164:	0801a180 	.word	0x0801a180
 800e168:	0801a198 	.word	0x0801a198
 800e16c:	0801a1b4 	.word	0x0801a1b4
 800e170:	0801a1c4 	.word	0x0801a1c4

0800e174 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b088      	sub	sp, #32
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	4611      	mov	r1, r2
 800e180:	461a      	mov	r2, r3
 800e182:	460b      	mov	r3, r1
 800e184:	80fb      	strh	r3, [r7, #6]
 800e186:	4613      	mov	r3, r2
 800e188:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e18e:	2300      	movs	r3, #0
 800e190:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d108      	bne.n	800e1aa <pbuf_copy_partial+0x36>
 800e198:	4b2b      	ldr	r3, [pc, #172]	@ (800e248 <pbuf_copy_partial+0xd4>)
 800e19a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e19e:	492b      	ldr	r1, [pc, #172]	@ (800e24c <pbuf_copy_partial+0xd8>)
 800e1a0:	482b      	ldr	r0, [pc, #172]	@ (800e250 <pbuf_copy_partial+0xdc>)
 800e1a2:	f00a fbcb 	bl	801893c <iprintf>
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e04a      	b.n	800e240 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d108      	bne.n	800e1c2 <pbuf_copy_partial+0x4e>
 800e1b0:	4b25      	ldr	r3, [pc, #148]	@ (800e248 <pbuf_copy_partial+0xd4>)
 800e1b2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e1b6:	4927      	ldr	r1, [pc, #156]	@ (800e254 <pbuf_copy_partial+0xe0>)
 800e1b8:	4825      	ldr	r0, [pc, #148]	@ (800e250 <pbuf_copy_partial+0xdc>)
 800e1ba:	f00a fbbf 	bl	801893c <iprintf>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e03e      	b.n	800e240 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	61fb      	str	r3, [r7, #28]
 800e1c6:	e034      	b.n	800e232 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e1c8:	88bb      	ldrh	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00a      	beq.n	800e1e4 <pbuf_copy_partial+0x70>
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	895b      	ldrh	r3, [r3, #10]
 800e1d2:	88ba      	ldrh	r2, [r7, #4]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d305      	bcc.n	800e1e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	895b      	ldrh	r3, [r3, #10]
 800e1dc:	88ba      	ldrh	r2, [r7, #4]
 800e1de:	1ad3      	subs	r3, r2, r3
 800e1e0:	80bb      	strh	r3, [r7, #4]
 800e1e2:	e023      	b.n	800e22c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	895a      	ldrh	r2, [r3, #10]
 800e1e8:	88bb      	ldrh	r3, [r7, #4]
 800e1ea:	1ad3      	subs	r3, r2, r3
 800e1ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e1ee:	8b3a      	ldrh	r2, [r7, #24]
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d901      	bls.n	800e1fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e1f6:	88fb      	ldrh	r3, [r7, #6]
 800e1f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e1fa:	8b7b      	ldrh	r3, [r7, #26]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	18d0      	adds	r0, r2, r3
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	685a      	ldr	r2, [r3, #4]
 800e204:	88bb      	ldrh	r3, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	8b3a      	ldrh	r2, [r7, #24]
 800e20a:	4619      	mov	r1, r3
 800e20c:	f00a fc71 	bl	8018af2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e210:	8afa      	ldrh	r2, [r7, #22]
 800e212:	8b3b      	ldrh	r3, [r7, #24]
 800e214:	4413      	add	r3, r2
 800e216:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e218:	8b7a      	ldrh	r2, [r7, #26]
 800e21a:	8b3b      	ldrh	r3, [r7, #24]
 800e21c:	4413      	add	r3, r2
 800e21e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e220:	88fa      	ldrh	r2, [r7, #6]
 800e222:	8b3b      	ldrh	r3, [r7, #24]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e228:	2300      	movs	r3, #0
 800e22a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	61fb      	str	r3, [r7, #28]
 800e232:	88fb      	ldrh	r3, [r7, #6]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <pbuf_copy_partial+0xca>
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1c4      	bne.n	800e1c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e23e:	8afb      	ldrh	r3, [r7, #22]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3720      	adds	r7, #32
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	08019ea8 	.word	0x08019ea8
 800e24c:	0801a1f0 	.word	0x0801a1f0
 800e250:	08019f08 	.word	0x08019f08
 800e254:	0801a210 	.word	0x0801a210

0800e258 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	603a      	str	r2, [r7, #0]
 800e262:	71fb      	strb	r3, [r7, #7]
 800e264:	460b      	mov	r3, r1
 800e266:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	8919      	ldrh	r1, [r3, #8]
 800e26c:	88ba      	ldrh	r2, [r7, #4]
 800e26e:	79fb      	ldrb	r3, [r7, #7]
 800e270:	4618      	mov	r0, r3
 800e272:	f7ff fa95 	bl	800d7a0 <pbuf_alloc>
 800e276:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d101      	bne.n	800e282 <pbuf_clone+0x2a>
    return NULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	e011      	b.n	800e2a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f7ff fea3 	bl	800dfd0 <pbuf_copy>
 800e28a:	4603      	mov	r3, r0
 800e28c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e28e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d006      	beq.n	800e2a4 <pbuf_clone+0x4c>
 800e296:	4b06      	ldr	r3, [pc, #24]	@ (800e2b0 <pbuf_clone+0x58>)
 800e298:	f240 5224 	movw	r2, #1316	@ 0x524
 800e29c:	4905      	ldr	r1, [pc, #20]	@ (800e2b4 <pbuf_clone+0x5c>)
 800e29e:	4806      	ldr	r0, [pc, #24]	@ (800e2b8 <pbuf_clone+0x60>)
 800e2a0:	f00a fb4c 	bl	801893c <iprintf>
  return q;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	08019ea8 	.word	0x08019ea8
 800e2b4:	0801a31c 	.word	0x0801a31c
 800e2b8:	08019f08 	.word	0x08019f08

0800e2bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2c0:	f00a fa3c 	bl	801873c <rand>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	4b01      	ldr	r3, [pc, #4]	@ (800e2dc <tcp_init+0x20>)
 800e2d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2d8:	bf00      	nop
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	24000028 	.word	0x24000028

0800e2e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d105      	bne.n	800e2fc <tcp_free+0x1c>
 800e2f0:	4b06      	ldr	r3, [pc, #24]	@ (800e30c <tcp_free+0x2c>)
 800e2f2:	22d4      	movs	r2, #212	@ 0xd4
 800e2f4:	4906      	ldr	r1, [pc, #24]	@ (800e310 <tcp_free+0x30>)
 800e2f6:	4807      	ldr	r0, [pc, #28]	@ (800e314 <tcp_free+0x34>)
 800e2f8:	f00a fb20 	bl	801893c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	2001      	movs	r0, #1
 800e300:	f7fe fe82 	bl	800d008 <memp_free>
}
 800e304:	bf00      	nop
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	0801a3a8 	.word	0x0801a3a8
 800e310:	0801a3d8 	.word	0x0801a3d8
 800e314:	0801a3ec 	.word	0x0801a3ec

0800e318 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7d1b      	ldrb	r3, [r3, #20]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d105      	bne.n	800e334 <tcp_free_listen+0x1c>
 800e328:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <tcp_free_listen+0x2c>)
 800e32a:	22df      	movs	r2, #223	@ 0xdf
 800e32c:	4906      	ldr	r1, [pc, #24]	@ (800e348 <tcp_free_listen+0x30>)
 800e32e:	4807      	ldr	r0, [pc, #28]	@ (800e34c <tcp_free_listen+0x34>)
 800e330:	f00a fb04 	bl	801893c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	2002      	movs	r0, #2
 800e338:	f7fe fe66 	bl	800d008 <memp_free>
}
 800e33c:	bf00      	nop
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	0801a3a8 	.word	0x0801a3a8
 800e348:	0801a414 	.word	0x0801a414
 800e34c:	0801a3ec 	.word	0x0801a3ec

0800e350 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e354:	f000 fea4 	bl	800f0a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e358:	4b07      	ldr	r3, [pc, #28]	@ (800e378 <tcp_tmr+0x28>)
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	3301      	adds	r3, #1
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	4b05      	ldr	r3, [pc, #20]	@ (800e378 <tcp_tmr+0x28>)
 800e362:	701a      	strb	r2, [r3, #0]
 800e364:	4b04      	ldr	r3, [pc, #16]	@ (800e378 <tcp_tmr+0x28>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e370:	f000 fb54 	bl	800ea1c <tcp_slowtmr>
  }
}
 800e374:	bf00      	nop
 800e376:	bd80      	pop	{r7, pc}
 800e378:	2400e979 	.word	0x2400e979

0800e37c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d105      	bne.n	800e398 <tcp_remove_listener+0x1c>
 800e38c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <tcp_remove_listener+0x48>)
 800e38e:	22ff      	movs	r2, #255	@ 0xff
 800e390:	490d      	ldr	r1, [pc, #52]	@ (800e3c8 <tcp_remove_listener+0x4c>)
 800e392:	480e      	ldr	r0, [pc, #56]	@ (800e3cc <tcp_remove_listener+0x50>)
 800e394:	f00a fad2 	bl	801893c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	e00a      	b.n	800e3b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e3a2:	683a      	ldr	r2, [r7, #0]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d102      	bne.n	800e3ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68db      	ldr	r3, [r3, #12]
 800e3b2:	60fb      	str	r3, [r7, #12]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1f1      	bne.n	800e39e <tcp_remove_listener+0x22>
    }
  }
}
 800e3ba:	bf00      	nop
 800e3bc:	bf00      	nop
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	0801a3a8 	.word	0x0801a3a8
 800e3c8:	0801a430 	.word	0x0801a430
 800e3cc:	0801a3ec 	.word	0x0801a3ec

0800e3d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <tcp_listen_closed+0x1c>
 800e3de:	4b14      	ldr	r3, [pc, #80]	@ (800e430 <tcp_listen_closed+0x60>)
 800e3e0:	f240 1211 	movw	r2, #273	@ 0x111
 800e3e4:	4913      	ldr	r1, [pc, #76]	@ (800e434 <tcp_listen_closed+0x64>)
 800e3e6:	4814      	ldr	r0, [pc, #80]	@ (800e438 <tcp_listen_closed+0x68>)
 800e3e8:	f00a faa8 	bl	801893c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7d1b      	ldrb	r3, [r3, #20]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d006      	beq.n	800e402 <tcp_listen_closed+0x32>
 800e3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e430 <tcp_listen_closed+0x60>)
 800e3f6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e3fa:	4910      	ldr	r1, [pc, #64]	@ (800e43c <tcp_listen_closed+0x6c>)
 800e3fc:	480e      	ldr	r0, [pc, #56]	@ (800e438 <tcp_listen_closed+0x68>)
 800e3fe:	f00a fa9d 	bl	801893c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e402:	2301      	movs	r3, #1
 800e404:	60fb      	str	r3, [r7, #12]
 800e406:	e00b      	b.n	800e420 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e408:	4a0d      	ldr	r2, [pc, #52]	@ (800e440 <tcp_listen_closed+0x70>)
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6879      	ldr	r1, [r7, #4]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff ffb1 	bl	800e37c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3301      	adds	r3, #1
 800e41e:	60fb      	str	r3, [r7, #12]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2b03      	cmp	r3, #3
 800e424:	d9f0      	bls.n	800e408 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e426:	bf00      	nop
 800e428:	bf00      	nop
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	0801a3a8 	.word	0x0801a3a8
 800e434:	0801a458 	.word	0x0801a458
 800e438:	0801a3ec 	.word	0x0801a3ec
 800e43c:	0801a464 	.word	0x0801a464
 800e440:	0801c788 	.word	0x0801c788

0800e444 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e444:	b5b0      	push	{r4, r5, r7, lr}
 800e446:	b088      	sub	sp, #32
 800e448:	af04      	add	r7, sp, #16
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <tcp_close_shutdown+0x20>
 800e456:	4b63      	ldr	r3, [pc, #396]	@ (800e5e4 <tcp_close_shutdown+0x1a0>)
 800e458:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e45c:	4962      	ldr	r1, [pc, #392]	@ (800e5e8 <tcp_close_shutdown+0x1a4>)
 800e45e:	4863      	ldr	r0, [pc, #396]	@ (800e5ec <tcp_close_shutdown+0x1a8>)
 800e460:	f00a fa6c 	bl	801893c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e464:	78fb      	ldrb	r3, [r7, #3]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d066      	beq.n	800e538 <tcp_close_shutdown+0xf4>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	7d1b      	ldrb	r3, [r3, #20]
 800e46e:	2b04      	cmp	r3, #4
 800e470:	d003      	beq.n	800e47a <tcp_close_shutdown+0x36>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7d1b      	ldrb	r3, [r3, #20]
 800e476:	2b07      	cmp	r3, #7
 800e478:	d15e      	bne.n	800e538 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d104      	bne.n	800e48c <tcp_close_shutdown+0x48>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e486:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e48a:	d055      	beq.n	800e538 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	8b5b      	ldrh	r3, [r3, #26]
 800e490:	f003 0310 	and.w	r3, r3, #16
 800e494:	2b00      	cmp	r3, #0
 800e496:	d106      	bne.n	800e4a6 <tcp_close_shutdown+0x62>
 800e498:	4b52      	ldr	r3, [pc, #328]	@ (800e5e4 <tcp_close_shutdown+0x1a0>)
 800e49a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e49e:	4954      	ldr	r1, [pc, #336]	@ (800e5f0 <tcp_close_shutdown+0x1ac>)
 800e4a0:	4852      	ldr	r0, [pc, #328]	@ (800e5ec <tcp_close_shutdown+0x1a8>)
 800e4a2:	f00a fa4b 	bl	801893c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e4ae:	687d      	ldr	r5, [r7, #4]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3304      	adds	r3, #4
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	8ad2      	ldrh	r2, [r2, #22]
 800e4b8:	6879      	ldr	r1, [r7, #4]
 800e4ba:	8b09      	ldrh	r1, [r1, #24]
 800e4bc:	9102      	str	r1, [sp, #8]
 800e4be:	9201      	str	r2, [sp, #4]
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	462b      	mov	r3, r5
 800e4c4:	4622      	mov	r2, r4
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f004 fe8d 	bl	80131e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f001 f8c8 	bl	800f664 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e4d4:	4b47      	ldr	r3, [pc, #284]	@ (800e5f4 <tcp_close_shutdown+0x1b0>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d105      	bne.n	800e4ea <tcp_close_shutdown+0xa6>
 800e4de:	4b45      	ldr	r3, [pc, #276]	@ (800e5f4 <tcp_close_shutdown+0x1b0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	4a43      	ldr	r2, [pc, #268]	@ (800e5f4 <tcp_close_shutdown+0x1b0>)
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	e013      	b.n	800e512 <tcp_close_shutdown+0xce>
 800e4ea:	4b42      	ldr	r3, [pc, #264]	@ (800e5f4 <tcp_close_shutdown+0x1b0>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
 800e4f0:	e00c      	b.n	800e50c <tcp_close_shutdown+0xc8>
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d104      	bne.n	800e506 <tcp_close_shutdown+0xc2>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68da      	ldr	r2, [r3, #12]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	60da      	str	r2, [r3, #12]
 800e504:	e005      	b.n	800e512 <tcp_close_shutdown+0xce>
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	60fb      	str	r3, [r7, #12]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1ef      	bne.n	800e4f2 <tcp_close_shutdown+0xae>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	60da      	str	r2, [r3, #12]
 800e518:	4b37      	ldr	r3, [pc, #220]	@ (800e5f8 <tcp_close_shutdown+0x1b4>)
 800e51a:	2201      	movs	r2, #1
 800e51c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e51e:	4b37      	ldr	r3, [pc, #220]	@ (800e5fc <tcp_close_shutdown+0x1b8>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	429a      	cmp	r2, r3
 800e526:	d102      	bne.n	800e52e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e528:	f003 fd5c 	bl	8011fe4 <tcp_trigger_input_pcb_close>
 800e52c:	e002      	b.n	800e534 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff fed6 	bl	800e2e0 <tcp_free>
      }
      return ERR_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	e050      	b.n	800e5da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	7d1b      	ldrb	r3, [r3, #20]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d03b      	beq.n	800e5b8 <tcp_close_shutdown+0x174>
 800e540:	2b02      	cmp	r3, #2
 800e542:	dc44      	bgt.n	800e5ce <tcp_close_shutdown+0x18a>
 800e544:	2b00      	cmp	r3, #0
 800e546:	d002      	beq.n	800e54e <tcp_close_shutdown+0x10a>
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d02a      	beq.n	800e5a2 <tcp_close_shutdown+0x15e>
 800e54c:	e03f      	b.n	800e5ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8adb      	ldrh	r3, [r3, #22]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d021      	beq.n	800e59a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e556:	4b2a      	ldr	r3, [pc, #168]	@ (800e600 <tcp_close_shutdown+0x1bc>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d105      	bne.n	800e56c <tcp_close_shutdown+0x128>
 800e560:	4b27      	ldr	r3, [pc, #156]	@ (800e600 <tcp_close_shutdown+0x1bc>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	4a26      	ldr	r2, [pc, #152]	@ (800e600 <tcp_close_shutdown+0x1bc>)
 800e568:	6013      	str	r3, [r2, #0]
 800e56a:	e013      	b.n	800e594 <tcp_close_shutdown+0x150>
 800e56c:	4b24      	ldr	r3, [pc, #144]	@ (800e600 <tcp_close_shutdown+0x1bc>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	60bb      	str	r3, [r7, #8]
 800e572:	e00c      	b.n	800e58e <tcp_close_shutdown+0x14a>
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d104      	bne.n	800e588 <tcp_close_shutdown+0x144>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68da      	ldr	r2, [r3, #12]
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	60da      	str	r2, [r3, #12]
 800e586:	e005      	b.n	800e594 <tcp_close_shutdown+0x150>
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	60bb      	str	r3, [r7, #8]
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d1ef      	bne.n	800e574 <tcp_close_shutdown+0x130>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7ff fea0 	bl	800e2e0 <tcp_free>
      break;
 800e5a0:	e01a      	b.n	800e5d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff ff14 	bl	800e3d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e5a8:	6879      	ldr	r1, [r7, #4]
 800e5aa:	4816      	ldr	r0, [pc, #88]	@ (800e604 <tcp_close_shutdown+0x1c0>)
 800e5ac:	f001 f8aa 	bl	800f704 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f7ff feb1 	bl	800e318 <tcp_free_listen>
      break;
 800e5b6:	e00f      	b.n	800e5d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	480e      	ldr	r0, [pc, #56]	@ (800e5f4 <tcp_close_shutdown+0x1b0>)
 800e5bc:	f001 f8a2 	bl	800f704 <tcp_pcb_remove>
 800e5c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f8 <tcp_close_shutdown+0x1b4>)
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff fe8a 	bl	800e2e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e5cc:	e004      	b.n	800e5d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f81a 	bl	800e608 <tcp_close_shutdown_fin>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	e000      	b.n	800e5da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	0801a3a8 	.word	0x0801a3a8
 800e5e8:	0801a47c 	.word	0x0801a47c
 800e5ec:	0801a3ec 	.word	0x0801a3ec
 800e5f0:	0801a49c 	.word	0x0801a49c
 800e5f4:	2400e970 	.word	0x2400e970
 800e5f8:	2400e978 	.word	0x2400e978
 800e5fc:	2400e9b0 	.word	0x2400e9b0
 800e600:	2400e968 	.word	0x2400e968
 800e604:	2400e96c 	.word	0x2400e96c

0800e608 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d106      	bne.n	800e624 <tcp_close_shutdown_fin+0x1c>
 800e616:	4b2e      	ldr	r3, [pc, #184]	@ (800e6d0 <tcp_close_shutdown_fin+0xc8>)
 800e618:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e61c:	492d      	ldr	r1, [pc, #180]	@ (800e6d4 <tcp_close_shutdown_fin+0xcc>)
 800e61e:	482e      	ldr	r0, [pc, #184]	@ (800e6d8 <tcp_close_shutdown_fin+0xd0>)
 800e620:	f00a f98c 	bl	801893c <iprintf>

  switch (pcb->state) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	2b07      	cmp	r3, #7
 800e62a:	d020      	beq.n	800e66e <tcp_close_shutdown_fin+0x66>
 800e62c:	2b07      	cmp	r3, #7
 800e62e:	dc2b      	bgt.n	800e688 <tcp_close_shutdown_fin+0x80>
 800e630:	2b03      	cmp	r3, #3
 800e632:	d002      	beq.n	800e63a <tcp_close_shutdown_fin+0x32>
 800e634:	2b04      	cmp	r3, #4
 800e636:	d00d      	beq.n	800e654 <tcp_close_shutdown_fin+0x4c>
 800e638:	e026      	b.n	800e688 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f003 fee2 	bl	8012404 <tcp_send_fin>
 800e640:	4603      	mov	r3, r0
 800e642:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d11f      	bne.n	800e68c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2205      	movs	r2, #5
 800e650:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e652:	e01b      	b.n	800e68c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f003 fed5 	bl	8012404 <tcp_send_fin>
 800e65a:	4603      	mov	r3, r0
 800e65c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d114      	bne.n	800e690 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2205      	movs	r2, #5
 800e66a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e66c:	e010      	b.n	800e690 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f003 fec8 	bl	8012404 <tcp_send_fin>
 800e674:	4603      	mov	r3, r0
 800e676:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d109      	bne.n	800e694 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2209      	movs	r2, #9
 800e684:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e686:	e005      	b.n	800e694 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e688:	2300      	movs	r3, #0
 800e68a:	e01c      	b.n	800e6c6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e68c:	bf00      	nop
 800e68e:	e002      	b.n	800e696 <tcp_close_shutdown_fin+0x8e>
      break;
 800e690:	bf00      	nop
 800e692:	e000      	b.n	800e696 <tcp_close_shutdown_fin+0x8e>
      break;
 800e694:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d103      	bne.n	800e6a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f003 ffee 	bl	8012680 <tcp_output>
 800e6a4:	e00d      	b.n	800e6c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ae:	d108      	bne.n	800e6c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	8b5b      	ldrh	r3, [r3, #26]
 800e6b4:	f043 0308 	orr.w	r3, r3, #8
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e001      	b.n	800e6c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	0801a3a8 	.word	0x0801a3a8
 800e6d4:	0801a458 	.word	0x0801a458
 800e6d8:	0801a3ec 	.word	0x0801a3ec

0800e6dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d109      	bne.n	800e6fe <tcp_close+0x22>
 800e6ea:	4b0f      	ldr	r3, [pc, #60]	@ (800e728 <tcp_close+0x4c>)
 800e6ec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e6f0:	490e      	ldr	r1, [pc, #56]	@ (800e72c <tcp_close+0x50>)
 800e6f2:	480f      	ldr	r0, [pc, #60]	@ (800e730 <tcp_close+0x54>)
 800e6f4:	f00a f922 	bl	801893c <iprintf>
 800e6f8:	f06f 030f 	mvn.w	r3, #15
 800e6fc:	e00f      	b.n	800e71e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	7d1b      	ldrb	r3, [r3, #20]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d006      	beq.n	800e714 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	8b5b      	ldrh	r3, [r3, #26]
 800e70a:	f043 0310 	orr.w	r3, r3, #16
 800e70e:	b29a      	uxth	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e714:	2101      	movs	r1, #1
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7ff fe94 	bl	800e444 <tcp_close_shutdown>
 800e71c:	4603      	mov	r3, r0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	0801a3a8 	.word	0x0801a3a8
 800e72c:	0801a4b8 	.word	0x0801a4b8
 800e730:	0801a3ec 	.word	0x0801a3ec

0800e734 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08e      	sub	sp, #56	@ 0x38
 800e738:	af04      	add	r7, sp, #16
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d107      	bne.n	800e754 <tcp_abandon+0x20>
 800e744:	4b52      	ldr	r3, [pc, #328]	@ (800e890 <tcp_abandon+0x15c>)
 800e746:	f240 223d 	movw	r2, #573	@ 0x23d
 800e74a:	4952      	ldr	r1, [pc, #328]	@ (800e894 <tcp_abandon+0x160>)
 800e74c:	4852      	ldr	r0, [pc, #328]	@ (800e898 <tcp_abandon+0x164>)
 800e74e:	f00a f8f5 	bl	801893c <iprintf>
 800e752:	e099      	b.n	800e888 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	7d1b      	ldrb	r3, [r3, #20]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d106      	bne.n	800e76a <tcp_abandon+0x36>
 800e75c:	4b4c      	ldr	r3, [pc, #304]	@ (800e890 <tcp_abandon+0x15c>)
 800e75e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e762:	494e      	ldr	r1, [pc, #312]	@ (800e89c <tcp_abandon+0x168>)
 800e764:	484c      	ldr	r0, [pc, #304]	@ (800e898 <tcp_abandon+0x164>)
 800e766:	f00a f8e9 	bl	801893c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	7d1b      	ldrb	r3, [r3, #20]
 800e76e:	2b0a      	cmp	r3, #10
 800e770:	d107      	bne.n	800e782 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e772:	6879      	ldr	r1, [r7, #4]
 800e774:	484a      	ldr	r0, [pc, #296]	@ (800e8a0 <tcp_abandon+0x16c>)
 800e776:	f000 ffc5 	bl	800f704 <tcp_pcb_remove>
    tcp_free(pcb);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7ff fdb0 	bl	800e2e0 <tcp_free>
 800e780:	e082      	b.n	800e888 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e786:	2300      	movs	r3, #0
 800e788:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e78e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e794:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e79c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7d1b      	ldrb	r3, [r3, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d126      	bne.n	800e7fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	8adb      	ldrh	r3, [r3, #22]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d02e      	beq.n	800e812 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7b4:	4b3b      	ldr	r3, [pc, #236]	@ (800e8a4 <tcp_abandon+0x170>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d105      	bne.n	800e7ca <tcp_abandon+0x96>
 800e7be:	4b39      	ldr	r3, [pc, #228]	@ (800e8a4 <tcp_abandon+0x170>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	4a37      	ldr	r2, [pc, #220]	@ (800e8a4 <tcp_abandon+0x170>)
 800e7c6:	6013      	str	r3, [r2, #0]
 800e7c8:	e013      	b.n	800e7f2 <tcp_abandon+0xbe>
 800e7ca:	4b36      	ldr	r3, [pc, #216]	@ (800e8a4 <tcp_abandon+0x170>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	61fb      	str	r3, [r7, #28]
 800e7d0:	e00c      	b.n	800e7ec <tcp_abandon+0xb8>
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d104      	bne.n	800e7e6 <tcp_abandon+0xb2>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	68da      	ldr	r2, [r3, #12]
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	60da      	str	r2, [r3, #12]
 800e7e4:	e005      	b.n	800e7f2 <tcp_abandon+0xbe>
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	61fb      	str	r3, [r7, #28]
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1ef      	bne.n	800e7d2 <tcp_abandon+0x9e>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	60da      	str	r2, [r3, #12]
 800e7f8:	e00b      	b.n	800e812 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	8adb      	ldrh	r3, [r3, #22]
 800e802:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e804:	6879      	ldr	r1, [r7, #4]
 800e806:	4828      	ldr	r0, [pc, #160]	@ (800e8a8 <tcp_abandon+0x174>)
 800e808:	f000 ff7c 	bl	800f704 <tcp_pcb_remove>
 800e80c:	4b27      	ldr	r3, [pc, #156]	@ (800e8ac <tcp_abandon+0x178>)
 800e80e:	2201      	movs	r2, #1
 800e810:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 fd1e 	bl	800f260 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d004      	beq.n	800e836 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e830:	4618      	mov	r0, r3
 800e832:	f000 fd15 	bl	800f260 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d004      	beq.n	800e848 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e842:	4618      	mov	r0, r3
 800e844:	f000 fd0c 	bl	800f260 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00e      	beq.n	800e86c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e84e:	6879      	ldr	r1, [r7, #4]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3304      	adds	r3, #4
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	8b12      	ldrh	r2, [r2, #24]
 800e858:	9202      	str	r2, [sp, #8]
 800e85a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e85c:	9201      	str	r2, [sp, #4]
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	460b      	mov	r3, r1
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	69b9      	ldr	r1, [r7, #24]
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f004 fcbe 	bl	80131e8 <tcp_rst>
    }
    last_state = pcb->state;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	7d1b      	ldrb	r3, [r3, #20]
 800e870:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff fd34 	bl	800e2e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d004      	beq.n	800e888 <tcp_abandon+0x154>
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	f06f 010c 	mvn.w	r1, #12
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	4798      	blx	r3
  }
}
 800e888:	3728      	adds	r7, #40	@ 0x28
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	0801a3a8 	.word	0x0801a3a8
 800e894:	0801a4ec 	.word	0x0801a4ec
 800e898:	0801a3ec 	.word	0x0801a3ec
 800e89c:	0801a508 	.word	0x0801a508
 800e8a0:	2400e974 	.word	0x2400e974
 800e8a4:	2400e968 	.word	0x2400e968
 800e8a8:	2400e970 	.word	0x2400e970
 800e8ac:	2400e978 	.word	0x2400e978

0800e8b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e8b8:	2101      	movs	r1, #1
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff ff3a 	bl	800e734 <tcp_abandon>
}
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_update_rcv_ann_wnd+0x1c>
 800e8d6:	4b25      	ldr	r3, [pc, #148]	@ (800e96c <tcp_update_rcv_ann_wnd+0xa4>)
 800e8d8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e8dc:	4924      	ldr	r1, [pc, #144]	@ (800e970 <tcp_update_rcv_ann_wnd+0xa8>)
 800e8de:	4825      	ldr	r0, [pc, #148]	@ (800e974 <tcp_update_rcv_ann_wnd+0xac>)
 800e8e0:	f00a f82c 	bl	801893c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e8ec:	4413      	add	r3, r2
 800e8ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e8f8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e8fc:	bf28      	it	cs
 800e8fe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e902:	b292      	uxth	r2, r2
 800e904:	4413      	add	r3, r2
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	db08      	blt.n	800e920 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	1ad3      	subs	r3, r2, r3
 800e91e:	e020      	b.n	800e962 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e928:	1ad3      	subs	r3, r2, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	dd03      	ble.n	800e936 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e934:	e014      	b.n	800e960 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e948:	d306      	bcc.n	800e958 <tcp_update_rcv_ann_wnd+0x90>
 800e94a:	4b08      	ldr	r3, [pc, #32]	@ (800e96c <tcp_update_rcv_ann_wnd+0xa4>)
 800e94c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e950:	4909      	ldr	r1, [pc, #36]	@ (800e978 <tcp_update_rcv_ann_wnd+0xb0>)
 800e952:	4808      	ldr	r0, [pc, #32]	@ (800e974 <tcp_update_rcv_ann_wnd+0xac>)
 800e954:	f009 fff2 	bl	801893c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e960:	2300      	movs	r3, #0
  }
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	0801a3a8 	.word	0x0801a3a8
 800e970:	0801a604 	.word	0x0801a604
 800e974:	0801a3ec 	.word	0x0801a3ec
 800e978:	0801a628 	.word	0x0801a628

0800e97c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d107      	bne.n	800e99e <tcp_recved+0x22>
 800e98e:	4b1f      	ldr	r3, [pc, #124]	@ (800ea0c <tcp_recved+0x90>)
 800e990:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e994:	491e      	ldr	r1, [pc, #120]	@ (800ea10 <tcp_recved+0x94>)
 800e996:	481f      	ldr	r0, [pc, #124]	@ (800ea14 <tcp_recved+0x98>)
 800e998:	f009 ffd0 	bl	801893c <iprintf>
 800e99c:	e032      	b.n	800ea04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	7d1b      	ldrb	r3, [r3, #20]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d106      	bne.n	800e9b4 <tcp_recved+0x38>
 800e9a6:	4b19      	ldr	r3, [pc, #100]	@ (800ea0c <tcp_recved+0x90>)
 800e9a8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e9ac:	491a      	ldr	r1, [pc, #104]	@ (800ea18 <tcp_recved+0x9c>)
 800e9ae:	4819      	ldr	r0, [pc, #100]	@ (800ea14 <tcp_recved+0x98>)
 800e9b0:	f009 ffc4 	bl	801893c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e9b8:	887b      	ldrh	r3, [r7, #2]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e9be:	89fb      	ldrh	r3, [r7, #14]
 800e9c0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e9c4:	d804      	bhi.n	800e9d0 <tcp_recved+0x54>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9ca:	89fa      	ldrh	r2, [r7, #14]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d204      	bcs.n	800e9da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e9d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e9d8:	e002      	b.n	800e9e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	89fa      	ldrh	r2, [r7, #14]
 800e9de:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7ff ff71 	bl	800e8c8 <tcp_update_rcv_ann_wnd>
 800e9e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e9ee:	d309      	bcc.n	800ea04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	8b5b      	ldrh	r3, [r3, #26]
 800e9f4:	f043 0302 	orr.w	r3, r3, #2
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f003 fe3e 	bl	8012680 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	0801a3a8 	.word	0x0801a3a8
 800ea10:	0801a644 	.word	0x0801a644
 800ea14:	0801a3ec 	.word	0x0801a3ec
 800ea18:	0801a65c 	.word	0x0801a65c

0800ea1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ea1c:	b5b0      	push	{r4, r5, r7, lr}
 800ea1e:	b090      	sub	sp, #64	@ 0x40
 800ea20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ea22:	2300      	movs	r3, #0
 800ea24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ea28:	4b95      	ldr	r3, [pc, #596]	@ (800ec80 <tcp_slowtmr+0x264>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	4a94      	ldr	r2, [pc, #592]	@ (800ec80 <tcp_slowtmr+0x264>)
 800ea30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ea32:	4b94      	ldr	r3, [pc, #592]	@ (800ec84 <tcp_slowtmr+0x268>)
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	3301      	adds	r3, #1
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	4b92      	ldr	r3, [pc, #584]	@ (800ec84 <tcp_slowtmr+0x268>)
 800ea3c:	701a      	strb	r2, [r3, #0]
 800ea3e:	e000      	b.n	800ea42 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ea40:	bf00      	nop
  prev = NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ea46:	4b90      	ldr	r3, [pc, #576]	@ (800ec88 <tcp_slowtmr+0x26c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ea4c:	e29d      	b.n	800ef8a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ea4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea50:	7d1b      	ldrb	r3, [r3, #20]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <tcp_slowtmr+0x48>
 800ea56:	4b8d      	ldr	r3, [pc, #564]	@ (800ec8c <tcp_slowtmr+0x270>)
 800ea58:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ea5c:	498c      	ldr	r1, [pc, #560]	@ (800ec90 <tcp_slowtmr+0x274>)
 800ea5e:	488d      	ldr	r0, [pc, #564]	@ (800ec94 <tcp_slowtmr+0x278>)
 800ea60:	f009 ff6c 	bl	801893c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ea64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea66:	7d1b      	ldrb	r3, [r3, #20]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d106      	bne.n	800ea7a <tcp_slowtmr+0x5e>
 800ea6c:	4b87      	ldr	r3, [pc, #540]	@ (800ec8c <tcp_slowtmr+0x270>)
 800ea6e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ea72:	4989      	ldr	r1, [pc, #548]	@ (800ec98 <tcp_slowtmr+0x27c>)
 800ea74:	4887      	ldr	r0, [pc, #540]	@ (800ec94 <tcp_slowtmr+0x278>)
 800ea76:	f009 ff61 	bl	801893c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ea7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7c:	7d1b      	ldrb	r3, [r3, #20]
 800ea7e:	2b0a      	cmp	r3, #10
 800ea80:	d106      	bne.n	800ea90 <tcp_slowtmr+0x74>
 800ea82:	4b82      	ldr	r3, [pc, #520]	@ (800ec8c <tcp_slowtmr+0x270>)
 800ea84:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ea88:	4984      	ldr	r1, [pc, #528]	@ (800ec9c <tcp_slowtmr+0x280>)
 800ea8a:	4882      	ldr	r0, [pc, #520]	@ (800ec94 <tcp_slowtmr+0x278>)
 800ea8c:	f009 ff56 	bl	801893c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ea90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea92:	7f9a      	ldrb	r2, [r3, #30]
 800ea94:	4b7b      	ldr	r3, [pc, #492]	@ (800ec84 <tcp_slowtmr+0x268>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d105      	bne.n	800eaa8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ea9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800eaa6:	e270      	b.n	800ef8a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800eaa8:	4b76      	ldr	r3, [pc, #472]	@ (800ec84 <tcp_slowtmr+0x268>)
 800eaaa:	781a      	ldrb	r2, [r3, #0]
 800eaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaae:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800eab0:	2300      	movs	r3, #0
 800eab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eabe:	7d1b      	ldrb	r3, [r3, #20]
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	d10a      	bne.n	800eada <tcp_slowtmr+0xbe>
 800eac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	d905      	bls.n	800eada <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800eace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ead2:	3301      	adds	r3, #1
 800ead4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ead8:	e11e      	b.n	800ed18 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eadc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eae0:	2b0b      	cmp	r3, #11
 800eae2:	d905      	bls.n	800eaf0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800eae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eae8:	3301      	adds	r3, #1
 800eaea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eaee:	e113      	b.n	800ed18 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d075      	beq.n	800ebe6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d006      	beq.n	800eb10 <tcp_slowtmr+0xf4>
 800eb02:	4b62      	ldr	r3, [pc, #392]	@ (800ec8c <tcp_slowtmr+0x270>)
 800eb04:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800eb08:	4965      	ldr	r1, [pc, #404]	@ (800eca0 <tcp_slowtmr+0x284>)
 800eb0a:	4862      	ldr	r0, [pc, #392]	@ (800ec94 <tcp_slowtmr+0x278>)
 800eb0c:	f009 ff16 	bl	801893c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d106      	bne.n	800eb26 <tcp_slowtmr+0x10a>
 800eb18:	4b5c      	ldr	r3, [pc, #368]	@ (800ec8c <tcp_slowtmr+0x270>)
 800eb1a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800eb1e:	4961      	ldr	r1, [pc, #388]	@ (800eca4 <tcp_slowtmr+0x288>)
 800eb20:	485c      	ldr	r0, [pc, #368]	@ (800ec94 <tcp_slowtmr+0x278>)
 800eb22:	f009 ff0b 	bl	801893c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb28:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800eb2c:	2b0b      	cmp	r3, #11
 800eb2e:	d905      	bls.n	800eb3c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800eb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb34:	3301      	adds	r3, #1
 800eb36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb3a:	e0ed      	b.n	800ed18 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eb42:	3b01      	subs	r3, #1
 800eb44:	4a58      	ldr	r2, [pc, #352]	@ (800eca8 <tcp_slowtmr+0x28c>)
 800eb46:	5cd3      	ldrb	r3, [r2, r3]
 800eb48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb4c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eb50:	7c7a      	ldrb	r2, [r7, #17]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d907      	bls.n	800eb66 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800eb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800eb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb68:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800eb6c:	7c7a      	ldrb	r2, [r7, #17]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	f200 80d2 	bhi.w	800ed18 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800eb74:	2301      	movs	r3, #1
 800eb76:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800eb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d108      	bne.n	800eb94 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eb82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb84:	f004 fc24 	bl	80133d0 <tcp_zero_window_probe>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d014      	beq.n	800ebb8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800eb8e:	2300      	movs	r3, #0
 800eb90:	623b      	str	r3, [r7, #32]
 800eb92:	e011      	b.n	800ebb8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb9e:	f003 fae9 	bl	8012174 <tcp_split_unsent_seg>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d107      	bne.n	800ebb8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800eba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebaa:	f003 fd69 	bl	8012680 <tcp_output>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d101      	bne.n	800ebb8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ebb8:	6a3b      	ldr	r3, [r7, #32]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f000 80ac 	beq.w	800ed18 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ebc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ebc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ebce:	2b06      	cmp	r3, #6
 800ebd0:	f200 80a2 	bhi.w	800ed18 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ebda:	3301      	adds	r3, #1
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ebe4:	e098      	b.n	800ed18 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ebe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	db0f      	blt.n	800ec10 <tcp_slowtmr+0x1f4>
 800ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ebf6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d008      	beq.n	800ec10 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ebfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	3301      	adds	r3, #1
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	b21a      	sxth	r2, r3
 800ec0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec0e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ec10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ec16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	db7b      	blt.n	800ed18 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ec20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec22:	f004 f821 	bl	8012c68 <tcp_rexmit_rto_prepare>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d007      	beq.n	800ec3c <tcp_slowtmr+0x220>
 800ec2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d171      	bne.n	800ed18 <tcp_slowtmr+0x2fc>
 800ec34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d06d      	beq.n	800ed18 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ec3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec3e:	7d1b      	ldrb	r3, [r3, #20]
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d03a      	beq.n	800ecba <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec4a:	2b0c      	cmp	r3, #12
 800ec4c:	bf28      	it	cs
 800ec4e:	230c      	movcs	r3, #12
 800ec50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ec52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ec58:	10db      	asrs	r3, r3, #3
 800ec5a:	b21b      	sxth	r3, r3
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ec64:	4413      	add	r3, r2
 800ec66:	7efa      	ldrb	r2, [r7, #27]
 800ec68:	4910      	ldr	r1, [pc, #64]	@ (800ecac <tcp_slowtmr+0x290>)
 800ec6a:	5c8a      	ldrb	r2, [r1, r2]
 800ec6c:	4093      	lsls	r3, r2
 800ec6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ec76:	4293      	cmp	r3, r2
 800ec78:	dc1a      	bgt.n	800ecb0 <tcp_slowtmr+0x294>
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	b21a      	sxth	r2, r3
 800ec7e:	e019      	b.n	800ecb4 <tcp_slowtmr+0x298>
 800ec80:	2400e964 	.word	0x2400e964
 800ec84:	2400e97a 	.word	0x2400e97a
 800ec88:	2400e970 	.word	0x2400e970
 800ec8c:	0801a3a8 	.word	0x0801a3a8
 800ec90:	0801a6ec 	.word	0x0801a6ec
 800ec94:	0801a3ec 	.word	0x0801a3ec
 800ec98:	0801a718 	.word	0x0801a718
 800ec9c:	0801a744 	.word	0x0801a744
 800eca0:	0801a774 	.word	0x0801a774
 800eca4:	0801a7a8 	.word	0x0801a7a8
 800eca8:	0801c780 	.word	0x0801c780
 800ecac:	0801c770 	.word	0x0801c770
 800ecb0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ecba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ecc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eccc:	4293      	cmp	r3, r2
 800ecce:	bf28      	it	cs
 800ecd0:	4613      	movcs	r3, r2
 800ecd2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ecd4:	8a7b      	ldrh	r3, [r7, #18]
 800ecd6:	085b      	lsrs	r3, r3, #1
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecdc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ece0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ece6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d206      	bcs.n	800ed00 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ecf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ed00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed02:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ed04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ed0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ed12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed14:	f004 f818 	bl	8012d48 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ed18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed1a:	7d1b      	ldrb	r3, [r3, #20]
 800ed1c:	2b06      	cmp	r3, #6
 800ed1e:	d111      	bne.n	800ed44 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ed20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed22:	8b5b      	ldrh	r3, [r3, #26]
 800ed24:	f003 0310 	and.w	r3, r3, #16
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00b      	beq.n	800ed44 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed2c:	4b9c      	ldr	r3, [pc, #624]	@ (800efa0 <tcp_slowtmr+0x584>)
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed32:	6a1b      	ldr	r3, [r3, #32]
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	2b28      	cmp	r3, #40	@ 0x28
 800ed38:	d904      	bls.n	800ed44 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ed3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed3e:	3301      	adds	r3, #1
 800ed40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed46:	7a5b      	ldrb	r3, [r3, #9]
 800ed48:	f003 0308 	and.w	r3, r3, #8
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d04a      	beq.n	800ede6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ed50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed54:	2b04      	cmp	r3, #4
 800ed56:	d003      	beq.n	800ed60 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ed58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ed5c:	2b07      	cmp	r3, #7
 800ed5e:	d142      	bne.n	800ede6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed60:	4b8f      	ldr	r3, [pc, #572]	@ (800efa0 <tcp_slowtmr+0x584>)
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed66:	6a1b      	ldr	r3, [r3, #32]
 800ed68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ed6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ed70:	4b8c      	ldr	r3, [pc, #560]	@ (800efa4 <tcp_slowtmr+0x588>)
 800ed72:	440b      	add	r3, r1
 800ed74:	498c      	ldr	r1, [pc, #560]	@ (800efa8 <tcp_slowtmr+0x58c>)
 800ed76:	fba1 1303 	umull	r1, r3, r1, r3
 800ed7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d90a      	bls.n	800ed96 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800ed80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed84:	3301      	adds	r3, #1
 800ed86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ed8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed8e:	3301      	adds	r3, #1
 800ed90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed94:	e027      	b.n	800ede6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed96:	4b82      	ldr	r3, [pc, #520]	@ (800efa0 <tcp_slowtmr+0x584>)
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800eda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800edac:	4618      	mov	r0, r3
 800edae:	4b7f      	ldr	r3, [pc, #508]	@ (800efac <tcp_slowtmr+0x590>)
 800edb0:	fb00 f303 	mul.w	r3, r0, r3
 800edb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800edb6:	497c      	ldr	r1, [pc, #496]	@ (800efa8 <tcp_slowtmr+0x58c>)
 800edb8:	fba1 1303 	umull	r1, r3, r1, r3
 800edbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d911      	bls.n	800ede6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800edc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800edc4:	f004 fac4 	bl	8013350 <tcp_keepalive>
 800edc8:	4603      	mov	r3, r0
 800edca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800edce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d107      	bne.n	800ede6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800edd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800eddc:	3301      	adds	r3, #1
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ede6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edea:	2b00      	cmp	r3, #0
 800edec:	d011      	beq.n	800ee12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800edee:	4b6c      	ldr	r3, [pc, #432]	@ (800efa0 <tcp_slowtmr+0x584>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800edfe:	4619      	mov	r1, r3
 800ee00:	460b      	mov	r3, r1
 800ee02:	005b      	lsls	r3, r3, #1
 800ee04:	440b      	add	r3, r1
 800ee06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d302      	bcc.n	800ee12 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800ee0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee0e:	f000 fddd 	bl	800f9cc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ee12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee14:	7d1b      	ldrb	r3, [r3, #20]
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d10b      	bne.n	800ee32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee1a:	4b61      	ldr	r3, [pc, #388]	@ (800efa0 <tcp_slowtmr+0x584>)
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	1ad3      	subs	r3, r2, r3
 800ee24:	2b28      	cmp	r3, #40	@ 0x28
 800ee26:	d904      	bls.n	800ee32 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800ee28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800ee32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee34:	7d1b      	ldrb	r3, [r3, #20]
 800ee36:	2b09      	cmp	r3, #9
 800ee38:	d10b      	bne.n	800ee52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ee3a:	4b59      	ldr	r3, [pc, #356]	@ (800efa0 <tcp_slowtmr+0x584>)
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	1ad3      	subs	r3, r2, r3
 800ee44:	2bf0      	cmp	r3, #240	@ 0xf0
 800ee46:	d904      	bls.n	800ee52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ee48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ee52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d060      	beq.n	800ef1c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800ee5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee60:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ee62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee64:	f000 fbfe 	bl	800f664 <tcp_pcb_purge>
      if (prev != NULL) {
 800ee68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d010      	beq.n	800ee90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ee6e:	4b50      	ldr	r3, [pc, #320]	@ (800efb0 <tcp_slowtmr+0x594>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d106      	bne.n	800ee86 <tcp_slowtmr+0x46a>
 800ee78:	4b4e      	ldr	r3, [pc, #312]	@ (800efb4 <tcp_slowtmr+0x598>)
 800ee7a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ee7e:	494e      	ldr	r1, [pc, #312]	@ (800efb8 <tcp_slowtmr+0x59c>)
 800ee80:	484e      	ldr	r0, [pc, #312]	@ (800efbc <tcp_slowtmr+0x5a0>)
 800ee82:	f009 fd5b 	bl	801893c <iprintf>
        prev->next = pcb->next;
 800ee86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee88:	68da      	ldr	r2, [r3, #12]
 800ee8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8c:	60da      	str	r2, [r3, #12]
 800ee8e:	e00f      	b.n	800eeb0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ee90:	4b47      	ldr	r3, [pc, #284]	@ (800efb0 <tcp_slowtmr+0x594>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d006      	beq.n	800eea8 <tcp_slowtmr+0x48c>
 800ee9a:	4b46      	ldr	r3, [pc, #280]	@ (800efb4 <tcp_slowtmr+0x598>)
 800ee9c:	f240 5271 	movw	r2, #1393	@ 0x571
 800eea0:	4947      	ldr	r1, [pc, #284]	@ (800efc0 <tcp_slowtmr+0x5a4>)
 800eea2:	4846      	ldr	r0, [pc, #280]	@ (800efbc <tcp_slowtmr+0x5a0>)
 800eea4:	f009 fd4a 	bl	801893c <iprintf>
        tcp_active_pcbs = pcb->next;
 800eea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	4a40      	ldr	r2, [pc, #256]	@ (800efb0 <tcp_slowtmr+0x594>)
 800eeae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800eeb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d013      	beq.n	800eee0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eeb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800eebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eebe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800eec0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800eec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec4:	3304      	adds	r3, #4
 800eec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eec8:	8ad2      	ldrh	r2, [r2, #22]
 800eeca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eecc:	8b09      	ldrh	r1, [r1, #24]
 800eece:	9102      	str	r1, [sp, #8]
 800eed0:	9201      	str	r2, [sp, #4]
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	462b      	mov	r3, r5
 800eed6:	4622      	mov	r2, r4
 800eed8:	4601      	mov	r1, r0
 800eeda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eedc:	f004 f984 	bl	80131e8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800eee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee2:	691b      	ldr	r3, [r3, #16]
 800eee4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee8:	7d1b      	ldrb	r3, [r3, #20]
 800eeea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800eef6:	6838      	ldr	r0, [r7, #0]
 800eef8:	f7ff f9f2 	bl	800e2e0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800eefc:	4b31      	ldr	r3, [pc, #196]	@ (800efc4 <tcp_slowtmr+0x5a8>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d004      	beq.n	800ef12 <tcp_slowtmr+0x4f6>
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f06f 010c 	mvn.w	r1, #12
 800ef0e:	68b8      	ldr	r0, [r7, #8]
 800ef10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ef12:	4b2c      	ldr	r3, [pc, #176]	@ (800efc4 <tcp_slowtmr+0x5a8>)
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d037      	beq.n	800ef8a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ef1a:	e592      	b.n	800ea42 <tcp_slowtmr+0x26>
      prev = pcb;
 800ef1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ef20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800ef26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef28:	7f1b      	ldrb	r3, [r3, #28]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	b2da      	uxtb	r2, r3
 800ef2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ef32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef34:	7f1a      	ldrb	r2, [r3, #28]
 800ef36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef38:	7f5b      	ldrb	r3, [r3, #29]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d325      	bcc.n	800ef8a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ef3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef40:	2200      	movs	r2, #0
 800ef42:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800ef44:	4b1f      	ldr	r3, [pc, #124]	@ (800efc4 <tcp_slowtmr+0x5a8>)
 800ef46:	2200      	movs	r2, #0
 800ef48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ef4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00b      	beq.n	800ef6c <tcp_slowtmr+0x550>
 800ef54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef5c:	6912      	ldr	r2, [r2, #16]
 800ef5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef60:	4610      	mov	r0, r2
 800ef62:	4798      	blx	r3
 800ef64:	4603      	mov	r3, r0
 800ef66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ef6a:	e002      	b.n	800ef72 <tcp_slowtmr+0x556>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800ef72:	4b14      	ldr	r3, [pc, #80]	@ (800efc4 <tcp_slowtmr+0x5a8>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f47f ad62 	bne.w	800ea40 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ef7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d102      	bne.n	800ef8a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ef84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ef86:	f003 fb7b 	bl	8012680 <tcp_output>
  while (pcb != NULL) {
 800ef8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f47f ad5e 	bne.w	800ea4e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ef92:	2300      	movs	r3, #0
 800ef94:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ef96:	4b0c      	ldr	r3, [pc, #48]	@ (800efc8 <tcp_slowtmr+0x5ac>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ef9c:	e069      	b.n	800f072 <tcp_slowtmr+0x656>
 800ef9e:	bf00      	nop
 800efa0:	2400e964 	.word	0x2400e964
 800efa4:	000a4cb8 	.word	0x000a4cb8
 800efa8:	10624dd3 	.word	0x10624dd3
 800efac:	000124f8 	.word	0x000124f8
 800efb0:	2400e970 	.word	0x2400e970
 800efb4:	0801a3a8 	.word	0x0801a3a8
 800efb8:	0801a7e0 	.word	0x0801a7e0
 800efbc:	0801a3ec 	.word	0x0801a3ec
 800efc0:	0801a80c 	.word	0x0801a80c
 800efc4:	2400e978 	.word	0x2400e978
 800efc8:	2400e974 	.word	0x2400e974
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efce:	7d1b      	ldrb	r3, [r3, #20]
 800efd0:	2b0a      	cmp	r3, #10
 800efd2:	d006      	beq.n	800efe2 <tcp_slowtmr+0x5c6>
 800efd4:	4b2b      	ldr	r3, [pc, #172]	@ (800f084 <tcp_slowtmr+0x668>)
 800efd6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800efda:	492b      	ldr	r1, [pc, #172]	@ (800f088 <tcp_slowtmr+0x66c>)
 800efdc:	482b      	ldr	r0, [pc, #172]	@ (800f08c <tcp_slowtmr+0x670>)
 800efde:	f009 fcad 	bl	801893c <iprintf>
    pcb_remove = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800efe8:	4b29      	ldr	r3, [pc, #164]	@ (800f090 <tcp_slowtmr+0x674>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efee:	6a1b      	ldr	r3, [r3, #32]
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	2bf0      	cmp	r3, #240	@ 0xf0
 800eff4:	d904      	bls.n	800f000 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800eff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800effa:	3301      	adds	r3, #1
 800effc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f004:	2b00      	cmp	r3, #0
 800f006:	d02f      	beq.n	800f068 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f00a:	f000 fb2b 	bl	800f664 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f010:	2b00      	cmp	r3, #0
 800f012:	d010      	beq.n	800f036 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f014:	4b1f      	ldr	r3, [pc, #124]	@ (800f094 <tcp_slowtmr+0x678>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d106      	bne.n	800f02c <tcp_slowtmr+0x610>
 800f01e:	4b19      	ldr	r3, [pc, #100]	@ (800f084 <tcp_slowtmr+0x668>)
 800f020:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f024:	491c      	ldr	r1, [pc, #112]	@ (800f098 <tcp_slowtmr+0x67c>)
 800f026:	4819      	ldr	r0, [pc, #100]	@ (800f08c <tcp_slowtmr+0x670>)
 800f028:	f009 fc88 	bl	801893c <iprintf>
        prev->next = pcb->next;
 800f02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02e:	68da      	ldr	r2, [r3, #12]
 800f030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f032:	60da      	str	r2, [r3, #12]
 800f034:	e00f      	b.n	800f056 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f036:	4b17      	ldr	r3, [pc, #92]	@ (800f094 <tcp_slowtmr+0x678>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d006      	beq.n	800f04e <tcp_slowtmr+0x632>
 800f040:	4b10      	ldr	r3, [pc, #64]	@ (800f084 <tcp_slowtmr+0x668>)
 800f042:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f046:	4915      	ldr	r1, [pc, #84]	@ (800f09c <tcp_slowtmr+0x680>)
 800f048:	4810      	ldr	r0, [pc, #64]	@ (800f08c <tcp_slowtmr+0x670>)
 800f04a:	f009 fc77 	bl	801893c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	4a10      	ldr	r2, [pc, #64]	@ (800f094 <tcp_slowtmr+0x678>)
 800f054:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f058:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f060:	69f8      	ldr	r0, [r7, #28]
 800f062:	f7ff f93d 	bl	800e2e0 <tcp_free>
 800f066:	e004      	b.n	800f072 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f074:	2b00      	cmp	r3, #0
 800f076:	d1a9      	bne.n	800efcc <tcp_slowtmr+0x5b0>
    }
  }
}
 800f078:	bf00      	nop
 800f07a:	bf00      	nop
 800f07c:	3730      	adds	r7, #48	@ 0x30
 800f07e:	46bd      	mov	sp, r7
 800f080:	bdb0      	pop	{r4, r5, r7, pc}
 800f082:	bf00      	nop
 800f084:	0801a3a8 	.word	0x0801a3a8
 800f088:	0801a838 	.word	0x0801a838
 800f08c:	0801a3ec 	.word	0x0801a3ec
 800f090:	2400e964 	.word	0x2400e964
 800f094:	2400e974 	.word	0x2400e974
 800f098:	0801a868 	.word	0x0801a868
 800f09c:	0801a890 	.word	0x0801a890

0800f0a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800f15c <tcp_fasttmr+0xbc>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f15c <tcp_fasttmr+0xbc>)
 800f0b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f0b2:	4b2b      	ldr	r3, [pc, #172]	@ (800f160 <tcp_fasttmr+0xc0>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f0b8:	e048      	b.n	800f14c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	7f9a      	ldrb	r2, [r3, #30]
 800f0be:	4b27      	ldr	r3, [pc, #156]	@ (800f15c <tcp_fasttmr+0xbc>)
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d03f      	beq.n	800f146 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f0c6:	4b25      	ldr	r3, [pc, #148]	@ (800f15c <tcp_fasttmr+0xbc>)
 800f0c8:	781a      	ldrb	r2, [r3, #0]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8b5b      	ldrh	r3, [r3, #26]
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d010      	beq.n	800f0fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	8b5b      	ldrh	r3, [r3, #26]
 800f0de:	f043 0302 	orr.w	r3, r3, #2
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f003 fac9 	bl	8012680 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	8b5b      	ldrh	r3, [r3, #26]
 800f0f2:	f023 0303 	bic.w	r3, r3, #3
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	8b5b      	ldrh	r3, [r3, #26]
 800f100:	f003 0308 	and.w	r3, r3, #8
 800f104:	2b00      	cmp	r3, #0
 800f106:	d009      	beq.n	800f11c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	8b5b      	ldrh	r3, [r3, #26]
 800f10c:	f023 0308 	bic.w	r3, r3, #8
 800f110:	b29a      	uxth	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff fa76 	bl	800e608 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00a      	beq.n	800f140 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f12a:	4b0e      	ldr	r3, [pc, #56]	@ (800f164 <tcp_fasttmr+0xc4>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 f819 	bl	800f168 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f136:	4b0b      	ldr	r3, [pc, #44]	@ (800f164 <tcp_fasttmr+0xc4>)
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d000      	beq.n	800f140 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f13e:	e7b8      	b.n	800f0b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	607b      	str	r3, [r7, #4]
 800f144:	e002      	b.n	800f14c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1b3      	bne.n	800f0ba <tcp_fasttmr+0x1a>
    }
  }
}
 800f152:	bf00      	nop
 800f154:	bf00      	nop
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}
 800f15c:	2400e97a 	.word	0x2400e97a
 800f160:	2400e970 	.word	0x2400e970
 800f164:	2400e978 	.word	0x2400e978

0800f168 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f168:	b590      	push	{r4, r7, lr}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d109      	bne.n	800f18a <tcp_process_refused_data+0x22>
 800f176:	4b37      	ldr	r3, [pc, #220]	@ (800f254 <tcp_process_refused_data+0xec>)
 800f178:	f240 6209 	movw	r2, #1545	@ 0x609
 800f17c:	4936      	ldr	r1, [pc, #216]	@ (800f258 <tcp_process_refused_data+0xf0>)
 800f17e:	4837      	ldr	r0, [pc, #220]	@ (800f25c <tcp_process_refused_data+0xf4>)
 800f180:	f009 fbdc 	bl	801893c <iprintf>
 800f184:	f06f 030f 	mvn.w	r3, #15
 800f188:	e060      	b.n	800f24c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f18e:	7b5b      	ldrb	r3, [r3, #13]
 800f190:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f196:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00b      	beq.n	800f1c0 <tcp_process_refused_data+0x58>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6918      	ldr	r0, [r3, #16]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	6879      	ldr	r1, [r7, #4]
 800f1b8:	47a0      	blx	r4
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	73fb      	strb	r3, [r7, #15]
 800f1be:	e007      	b.n	800f1d0 <tcp_process_refused_data+0x68>
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	6879      	ldr	r1, [r7, #4]
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	f000 f8a4 	bl	800f314 <tcp_recv_null>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d12a      	bne.n	800f22e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f1d8:	7bbb      	ldrb	r3, [r7, #14]
 800f1da:	f003 0320 	and.w	r3, r3, #32
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d033      	beq.n	800f24a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f1ea:	d005      	beq.n	800f1f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00b      	beq.n	800f21a <tcp_process_refused_data+0xb2>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6918      	ldr	r0, [r3, #16]
 800f20c:	2300      	movs	r3, #0
 800f20e:	2200      	movs	r2, #0
 800f210:	6879      	ldr	r1, [r7, #4]
 800f212:	47a0      	blx	r4
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
 800f218:	e001      	b.n	800f21e <tcp_process_refused_data+0xb6>
 800f21a:	2300      	movs	r3, #0
 800f21c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f21e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f222:	f113 0f0d 	cmn.w	r3, #13
 800f226:	d110      	bne.n	800f24a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f228:	f06f 030c 	mvn.w	r3, #12
 800f22c:	e00e      	b.n	800f24c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f232:	f113 0f0d 	cmn.w	r3, #13
 800f236:	d102      	bne.n	800f23e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f238:	f06f 030c 	mvn.w	r3, #12
 800f23c:	e006      	b.n	800f24c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f244:	f06f 0304 	mvn.w	r3, #4
 800f248:	e000      	b.n	800f24c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	bd90      	pop	{r4, r7, pc}
 800f254:	0801a3a8 	.word	0x0801a3a8
 800f258:	0801a8b8 	.word	0x0801a8b8
 800f25c:	0801a3ec 	.word	0x0801a3ec

0800f260 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f268:	e007      	b.n	800f27a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f80a 	bl	800f28a <tcp_seg_free>
    seg = next;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1f4      	bne.n	800f26a <tcp_segs_free+0xa>
  }
}
 800f280:	bf00      	nop
 800f282:	bf00      	nop
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b082      	sub	sp, #8
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00c      	beq.n	800f2b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d004      	beq.n	800f2aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fe fd5f 	bl	800dd68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f2aa:	6879      	ldr	r1, [r7, #4]
 800f2ac:	2003      	movs	r0, #3
 800f2ae:	f7fd feab 	bl	800d008 <memp_free>
  }
}
 800f2b2:	bf00      	nop
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d106      	bne.n	800f2d8 <tcp_seg_copy+0x1c>
 800f2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f308 <tcp_seg_copy+0x4c>)
 800f2cc:	f240 6282 	movw	r2, #1666	@ 0x682
 800f2d0:	490e      	ldr	r1, [pc, #56]	@ (800f30c <tcp_seg_copy+0x50>)
 800f2d2:	480f      	ldr	r0, [pc, #60]	@ (800f310 <tcp_seg_copy+0x54>)
 800f2d4:	f009 fb32 	bl	801893c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f2d8:	2003      	movs	r0, #3
 800f2da:	f7fd fe1f 	bl	800cf1c <memp_malloc>
 800f2de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d101      	bne.n	800f2ea <tcp_seg_copy+0x2e>
    return NULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	e00a      	b.n	800f300 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f2ea:	2210      	movs	r2, #16
 800f2ec:	6879      	ldr	r1, [r7, #4]
 800f2ee:	68f8      	ldr	r0, [r7, #12]
 800f2f0:	f009 fbff 	bl	8018af2 <memcpy>
  pbuf_ref(cseg->p);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fe fddb 	bl	800deb4 <pbuf_ref>
  return cseg;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
}
 800f300:	4618      	mov	r0, r3
 800f302:	3710      	adds	r7, #16
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	0801a3a8 	.word	0x0801a3a8
 800f30c:	0801a8fc 	.word	0x0801a8fc
 800f310:	0801a3ec 	.word	0x0801a3ec

0800f314 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d109      	bne.n	800f33c <tcp_recv_null+0x28>
 800f328:	4b12      	ldr	r3, [pc, #72]	@ (800f374 <tcp_recv_null+0x60>)
 800f32a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f32e:	4912      	ldr	r1, [pc, #72]	@ (800f378 <tcp_recv_null+0x64>)
 800f330:	4812      	ldr	r0, [pc, #72]	@ (800f37c <tcp_recv_null+0x68>)
 800f332:	f009 fb03 	bl	801893c <iprintf>
 800f336:	f06f 030f 	mvn.w	r3, #15
 800f33a:	e016      	b.n	800f36a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	891b      	ldrh	r3, [r3, #8]
 800f346:	4619      	mov	r1, r3
 800f348:	68b8      	ldr	r0, [r7, #8]
 800f34a:	f7ff fb17 	bl	800e97c <tcp_recved>
    pbuf_free(p);
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7fe fd0a 	bl	800dd68 <pbuf_free>
 800f354:	e008      	b.n	800f368 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d104      	bne.n	800f368 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f35e:	68b8      	ldr	r0, [r7, #8]
 800f360:	f7ff f9bc 	bl	800e6dc <tcp_close>
 800f364:	4603      	mov	r3, r0
 800f366:	e000      	b.n	800f36a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f368:	2300      	movs	r3, #0
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3710      	adds	r7, #16
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	0801a3a8 	.word	0x0801a3a8
 800f378:	0801a918 	.word	0x0801a918
 800f37c:	0801a3ec 	.word	0x0801a3ec

0800f380 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	4603      	mov	r3, r0
 800f388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	db01      	blt.n	800f396 <tcp_kill_prio+0x16>
 800f392:	79fb      	ldrb	r3, [r7, #7]
 800f394:	e000      	b.n	800f398 <tcp_kill_prio+0x18>
 800f396:	237f      	movs	r3, #127	@ 0x7f
 800f398:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f39a:	7afb      	ldrb	r3, [r7, #11]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d034      	beq.n	800f40a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f3a0:	7afb      	ldrb	r3, [r7, #11]
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3ae:	4b19      	ldr	r3, [pc, #100]	@ (800f414 <tcp_kill_prio+0x94>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	617b      	str	r3, [r7, #20]
 800f3b4:	e01f      	b.n	800f3f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	7d5b      	ldrb	r3, [r3, #21]
 800f3ba:	7afa      	ldrb	r2, [r7, #11]
 800f3bc:	429a      	cmp	r2, r3
 800f3be:	d80c      	bhi.n	800f3da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f3c4:	7afa      	ldrb	r2, [r7, #11]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d112      	bne.n	800f3f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3ca:	4b13      	ldr	r3, [pc, #76]	@ (800f418 <tcp_kill_prio+0x98>)
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d80a      	bhi.n	800f3f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f3da:	4b0f      	ldr	r3, [pc, #60]	@ (800f418 <tcp_kill_prio+0x98>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	6a1b      	ldr	r3, [r3, #32]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	7d5b      	ldrb	r3, [r3, #21]
 800f3ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1dc      	bne.n	800f3b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d004      	beq.n	800f40c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f402:	6938      	ldr	r0, [r7, #16]
 800f404:	f7ff fa54 	bl	800e8b0 <tcp_abort>
 800f408:	e000      	b.n	800f40c <tcp_kill_prio+0x8c>
    return;
 800f40a:	bf00      	nop
  }
}
 800f40c:	3718      	adds	r7, #24
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	2400e970 	.word	0x2400e970
 800f418:	2400e964 	.word	0x2400e964

0800f41c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b086      	sub	sp, #24
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f426:	79fb      	ldrb	r3, [r7, #7]
 800f428:	2b08      	cmp	r3, #8
 800f42a:	d009      	beq.n	800f440 <tcp_kill_state+0x24>
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	2b09      	cmp	r3, #9
 800f430:	d006      	beq.n	800f440 <tcp_kill_state+0x24>
 800f432:	4b1a      	ldr	r3, [pc, #104]	@ (800f49c <tcp_kill_state+0x80>)
 800f434:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f438:	4919      	ldr	r1, [pc, #100]	@ (800f4a0 <tcp_kill_state+0x84>)
 800f43a:	481a      	ldr	r0, [pc, #104]	@ (800f4a4 <tcp_kill_state+0x88>)
 800f43c:	f009 fa7e 	bl	801893c <iprintf>

  inactivity = 0;
 800f440:	2300      	movs	r3, #0
 800f442:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f444:	2300      	movs	r3, #0
 800f446:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f448:	4b17      	ldr	r3, [pc, #92]	@ (800f4a8 <tcp_kill_state+0x8c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	e017      	b.n	800f480 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	79fa      	ldrb	r2, [r7, #7]
 800f456:	429a      	cmp	r2, r3
 800f458:	d10f      	bne.n	800f47a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f45a:	4b14      	ldr	r3, [pc, #80]	@ (800f4ac <tcp_kill_state+0x90>)
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	6a1b      	ldr	r3, [r3, #32]
 800f462:	1ad3      	subs	r3, r2, r3
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	429a      	cmp	r2, r3
 800f468:	d807      	bhi.n	800f47a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f46a:	4b10      	ldr	r3, [pc, #64]	@ (800f4ac <tcp_kill_state+0x90>)
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	617b      	str	r3, [r7, #20]
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1e4      	bne.n	800f450 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f48c:	2100      	movs	r1, #0
 800f48e:	6938      	ldr	r0, [r7, #16]
 800f490:	f7ff f950 	bl	800e734 <tcp_abandon>
  }
}
 800f494:	bf00      	nop
 800f496:	3718      	adds	r7, #24
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	0801a3a8 	.word	0x0801a3a8
 800f4a0:	0801a934 	.word	0x0801a934
 800f4a4:	0801a3ec 	.word	0x0801a3ec
 800f4a8:	2400e970 	.word	0x2400e970
 800f4ac:	2400e964 	.word	0x2400e964

0800f4b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4be:	4b12      	ldr	r3, [pc, #72]	@ (800f508 <tcp_kill_timewait+0x58>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	e012      	b.n	800f4ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4c6:	4b11      	ldr	r3, [pc, #68]	@ (800f50c <tcp_kill_timewait+0x5c>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d807      	bhi.n	800f4e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f50c <tcp_kill_timewait+0x5c>)
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	1ad3      	subs	r3, r2, r3
 800f4e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1e9      	bne.n	800f4c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d002      	beq.n	800f4fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f4f8:	68b8      	ldr	r0, [r7, #8]
 800f4fa:	f7ff f9d9 	bl	800e8b0 <tcp_abort>
  }
}
 800f4fe:	bf00      	nop
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	2400e974 	.word	0x2400e974
 800f50c:	2400e964 	.word	0x2400e964

0800f510 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f516:	4b10      	ldr	r3, [pc, #64]	@ (800f558 <tcp_handle_closepend+0x48>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f51c:	e014      	b.n	800f548 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	8b5b      	ldrh	r3, [r3, #26]
 800f528:	f003 0308 	and.w	r3, r3, #8
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d009      	beq.n	800f544 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	8b5b      	ldrh	r3, [r3, #26]
 800f534:	f023 0308 	bic.w	r3, r3, #8
 800f538:	b29a      	uxth	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff f862 	bl	800e608 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1e7      	bne.n	800f51e <tcp_handle_closepend+0xe>
  }
}
 800f54e:	bf00      	nop
 800f550:	bf00      	nop
 800f552:	3708      	adds	r7, #8
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	2400e970 	.word	0x2400e970

0800f55c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	4603      	mov	r3, r0
 800f564:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f566:	2001      	movs	r0, #1
 800f568:	f7fd fcd8 	bl	800cf1c <memp_malloc>
 800f56c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d126      	bne.n	800f5c2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f574:	f7ff ffcc 	bl	800f510 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f578:	f7ff ff9a 	bl	800f4b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f57c:	2001      	movs	r0, #1
 800f57e:	f7fd fccd 	bl	800cf1c <memp_malloc>
 800f582:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d11b      	bne.n	800f5c2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f58a:	2009      	movs	r0, #9
 800f58c:	f7ff ff46 	bl	800f41c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f590:	2001      	movs	r0, #1
 800f592:	f7fd fcc3 	bl	800cf1c <memp_malloc>
 800f596:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d111      	bne.n	800f5c2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f59e:	2008      	movs	r0, #8
 800f5a0:	f7ff ff3c 	bl	800f41c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5a4:	2001      	movs	r0, #1
 800f5a6:	f7fd fcb9 	bl	800cf1c <memp_malloc>
 800f5aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d107      	bne.n	800f5c2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f5b2:	79fb      	ldrb	r3, [r7, #7]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7ff fee3 	bl	800f380 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5ba:	2001      	movs	r0, #1
 800f5bc:	f7fd fcae 	bl	800cf1c <memp_malloc>
 800f5c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d03f      	beq.n	800f648 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f5c8:	229c      	movs	r2, #156	@ 0x9c
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f009 fa1a 	bl	8018a06 <memset>
    pcb->prio = prio;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	79fa      	ldrb	r2, [r7, #7]
 800f5d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f5de:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f5e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	22ff      	movs	r2, #255	@ 0xff
 800f5f6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f5fe:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2206      	movs	r2, #6
 800f604:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2206      	movs	r2, #6
 800f60c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f614:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2201      	movs	r2, #1
 800f61a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f61e:	4b0d      	ldr	r3, [pc, #52]	@ (800f654 <tcp_alloc+0xf8>)
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f626:	4b0c      	ldr	r3, [pc, #48]	@ (800f658 <tcp_alloc+0xfc>)
 800f628:	781a      	ldrb	r2, [r3, #0]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f634:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	4a08      	ldr	r2, [pc, #32]	@ (800f65c <tcp_alloc+0x100>)
 800f63c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4a07      	ldr	r2, [pc, #28]	@ (800f660 <tcp_alloc+0x104>)
 800f644:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f648:	68fb      	ldr	r3, [r7, #12]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	2400e964 	.word	0x2400e964
 800f658:	2400e97a 	.word	0x2400e97a
 800f65c:	0800f315 	.word	0x0800f315
 800f660:	006ddd00 	.word	0x006ddd00

0800f664 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d107      	bne.n	800f682 <tcp_pcb_purge+0x1e>
 800f672:	4b21      	ldr	r3, [pc, #132]	@ (800f6f8 <tcp_pcb_purge+0x94>)
 800f674:	f640 0251 	movw	r2, #2129	@ 0x851
 800f678:	4920      	ldr	r1, [pc, #128]	@ (800f6fc <tcp_pcb_purge+0x98>)
 800f67a:	4821      	ldr	r0, [pc, #132]	@ (800f700 <tcp_pcb_purge+0x9c>)
 800f67c:	f009 f95e 	bl	801893c <iprintf>
 800f680:	e037      	b.n	800f6f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	7d1b      	ldrb	r3, [r3, #20]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d033      	beq.n	800f6f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f68e:	2b0a      	cmp	r3, #10
 800f690:	d02f      	beq.n	800f6f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f696:	2b01      	cmp	r3, #1
 800f698:	d02b      	beq.n	800f6f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d007      	beq.n	800f6b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe fb5e 	bl	800dd68 <pbuf_free>
      pcb->refused_data = NULL;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 f986 	bl	800f9cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6c6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7ff fdc7 	bl	800f260 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7ff fdc2 	bl	800f260 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	0801a3a8 	.word	0x0801a3a8
 800f6fc:	0801a9f4 	.word	0x0801a9f4
 800f700:	0801a3ec 	.word	0x0801a3ec

0800f704 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d106      	bne.n	800f722 <tcp_pcb_remove+0x1e>
 800f714:	4b3e      	ldr	r3, [pc, #248]	@ (800f810 <tcp_pcb_remove+0x10c>)
 800f716:	f640 0283 	movw	r2, #2179	@ 0x883
 800f71a:	493e      	ldr	r1, [pc, #248]	@ (800f814 <tcp_pcb_remove+0x110>)
 800f71c:	483e      	ldr	r0, [pc, #248]	@ (800f818 <tcp_pcb_remove+0x114>)
 800f71e:	f009 f90d 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d106      	bne.n	800f736 <tcp_pcb_remove+0x32>
 800f728:	4b39      	ldr	r3, [pc, #228]	@ (800f810 <tcp_pcb_remove+0x10c>)
 800f72a:	f640 0284 	movw	r2, #2180	@ 0x884
 800f72e:	493b      	ldr	r1, [pc, #236]	@ (800f81c <tcp_pcb_remove+0x118>)
 800f730:	4839      	ldr	r0, [pc, #228]	@ (800f818 <tcp_pcb_remove+0x114>)
 800f732:	f009 f903 	bl	801893c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d105      	bne.n	800f74c <tcp_pcb_remove+0x48>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68da      	ldr	r2, [r3, #12]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	e013      	b.n	800f774 <tcp_pcb_remove+0x70>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	60fb      	str	r3, [r7, #12]
 800f752:	e00c      	b.n	800f76e <tcp_pcb_remove+0x6a>
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	683a      	ldr	r2, [r7, #0]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d104      	bne.n	800f768 <tcp_pcb_remove+0x64>
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	68da      	ldr	r2, [r3, #12]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	60da      	str	r2, [r3, #12]
 800f766:	e005      	b.n	800f774 <tcp_pcb_remove+0x70>
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	60fb      	str	r3, [r7, #12]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d1ef      	bne.n	800f754 <tcp_pcb_remove+0x50>
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	2200      	movs	r2, #0
 800f778:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f77a:	6838      	ldr	r0, [r7, #0]
 800f77c:	f7ff ff72 	bl	800f664 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
 800f784:	2b0a      	cmp	r3, #10
 800f786:	d013      	beq.n	800f7b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d00f      	beq.n	800f7b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	8b5b      	ldrh	r3, [r3, #26]
 800f794:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d009      	beq.n	800f7b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	8b5b      	ldrh	r3, [r3, #26]
 800f7a0:	f043 0302 	orr.w	r3, r3, #2
 800f7a4:	b29a      	uxth	r2, r3
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7aa:	6838      	ldr	r0, [r7, #0]
 800f7ac:	f002 ff68 	bl	8012680 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	7d1b      	ldrb	r3, [r3, #20]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d020      	beq.n	800f7fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d006      	beq.n	800f7ce <tcp_pcb_remove+0xca>
 800f7c0:	4b13      	ldr	r3, [pc, #76]	@ (800f810 <tcp_pcb_remove+0x10c>)
 800f7c2:	f640 0293 	movw	r2, #2195	@ 0x893
 800f7c6:	4916      	ldr	r1, [pc, #88]	@ (800f820 <tcp_pcb_remove+0x11c>)
 800f7c8:	4813      	ldr	r0, [pc, #76]	@ (800f818 <tcp_pcb_remove+0x114>)
 800f7ca:	f009 f8b7 	bl	801893c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d006      	beq.n	800f7e4 <tcp_pcb_remove+0xe0>
 800f7d6:	4b0e      	ldr	r3, [pc, #56]	@ (800f810 <tcp_pcb_remove+0x10c>)
 800f7d8:	f640 0294 	movw	r2, #2196	@ 0x894
 800f7dc:	4911      	ldr	r1, [pc, #68]	@ (800f824 <tcp_pcb_remove+0x120>)
 800f7de:	480e      	ldr	r0, [pc, #56]	@ (800f818 <tcp_pcb_remove+0x114>)
 800f7e0:	f009 f8ac 	bl	801893c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d006      	beq.n	800f7fa <tcp_pcb_remove+0xf6>
 800f7ec:	4b08      	ldr	r3, [pc, #32]	@ (800f810 <tcp_pcb_remove+0x10c>)
 800f7ee:	f640 0296 	movw	r2, #2198	@ 0x896
 800f7f2:	490d      	ldr	r1, [pc, #52]	@ (800f828 <tcp_pcb_remove+0x124>)
 800f7f4:	4808      	ldr	r0, [pc, #32]	@ (800f818 <tcp_pcb_remove+0x114>)
 800f7f6:	f009 f8a1 	bl	801893c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2200      	movs	r2, #0
 800f804:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f806:	bf00      	nop
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	0801a3a8 	.word	0x0801a3a8
 800f814:	0801aa10 	.word	0x0801aa10
 800f818:	0801a3ec 	.word	0x0801a3ec
 800f81c:	0801aa2c 	.word	0x0801aa2c
 800f820:	0801aa4c 	.word	0x0801aa4c
 800f824:	0801aa64 	.word	0x0801aa64
 800f828:	0801aa80 	.word	0x0801aa80

0800f82c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d106      	bne.n	800f848 <tcp_next_iss+0x1c>
 800f83a:	4b0a      	ldr	r3, [pc, #40]	@ (800f864 <tcp_next_iss+0x38>)
 800f83c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f840:	4909      	ldr	r1, [pc, #36]	@ (800f868 <tcp_next_iss+0x3c>)
 800f842:	480a      	ldr	r0, [pc, #40]	@ (800f86c <tcp_next_iss+0x40>)
 800f844:	f009 f87a 	bl	801893c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f848:	4b09      	ldr	r3, [pc, #36]	@ (800f870 <tcp_next_iss+0x44>)
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	4b09      	ldr	r3, [pc, #36]	@ (800f874 <tcp_next_iss+0x48>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4413      	add	r3, r2
 800f852:	4a07      	ldr	r2, [pc, #28]	@ (800f870 <tcp_next_iss+0x44>)
 800f854:	6013      	str	r3, [r2, #0]
  return iss;
 800f856:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <tcp_next_iss+0x44>)
 800f858:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3708      	adds	r7, #8
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	0801a3a8 	.word	0x0801a3a8
 800f868:	0801aa98 	.word	0x0801aa98
 800f86c:	0801a3ec 	.word	0x0801a3ec
 800f870:	2400002c 	.word	0x2400002c
 800f874:	2400e964 	.word	0x2400e964

0800f878 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b086      	sub	sp, #24
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	4603      	mov	r3, r0
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
 800f884:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d106      	bne.n	800f89a <tcp_eff_send_mss_netif+0x22>
 800f88c:	4b14      	ldr	r3, [pc, #80]	@ (800f8e0 <tcp_eff_send_mss_netif+0x68>)
 800f88e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f892:	4914      	ldr	r1, [pc, #80]	@ (800f8e4 <tcp_eff_send_mss_netif+0x6c>)
 800f894:	4814      	ldr	r0, [pc, #80]	@ (800f8e8 <tcp_eff_send_mss_netif+0x70>)
 800f896:	f009 f851 	bl	801893c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f8a0:	89fb      	ldrh	r3, [r7, #14]
 800f8a2:	e019      	b.n	800f8d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f8aa:	8afb      	ldrh	r3, [r7, #22]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d012      	beq.n	800f8d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f8b0:	2328      	movs	r3, #40	@ 0x28
 800f8b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f8b4:	8afa      	ldrh	r2, [r7, #22]
 800f8b6:	8abb      	ldrh	r3, [r7, #20]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d904      	bls.n	800f8c6 <tcp_eff_send_mss_netif+0x4e>
 800f8bc:	8afa      	ldrh	r2, [r7, #22]
 800f8be:	8abb      	ldrh	r3, [r7, #20]
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	e000      	b.n	800f8c8 <tcp_eff_send_mss_netif+0x50>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f8ca:	8a7a      	ldrh	r2, [r7, #18]
 800f8cc:	89fb      	ldrh	r3, [r7, #14]
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	bf28      	it	cs
 800f8d2:	4613      	movcs	r3, r2
 800f8d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f8d6:	89fb      	ldrh	r3, [r7, #14]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3718      	adds	r7, #24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0801a3a8 	.word	0x0801a3a8
 800f8e4:	0801aab4 	.word	0x0801aab4
 800f8e8:	0801a3ec 	.word	0x0801a3ec

0800f8ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d119      	bne.n	800f934 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f900:	4b10      	ldr	r3, [pc, #64]	@ (800f944 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f902:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f906:	4910      	ldr	r1, [pc, #64]	@ (800f948 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f908:	4810      	ldr	r0, [pc, #64]	@ (800f94c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f90a:	f009 f817 	bl	801893c <iprintf>

  while (pcb != NULL) {
 800f90e:	e011      	b.n	800f934 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681a      	ldr	r2, [r3, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d108      	bne.n	800f92e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f7fe ffc4 	bl	800e8b0 <tcp_abort>
      pcb = next;
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	60fb      	str	r3, [r7, #12]
 800f92c:	e002      	b.n	800f934 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1ea      	bne.n	800f910 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f93a:	bf00      	nop
 800f93c:	bf00      	nop
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	0801a3a8 	.word	0x0801a3a8
 800f948:	0801aadc 	.word	0x0801aadc
 800f94c:	0801a3ec 	.word	0x0801a3ec

0800f950 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d02a      	beq.n	800f9b6 <tcp_netif_ip_addr_changed+0x66>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d026      	beq.n	800f9b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f968:	4b15      	ldr	r3, [pc, #84]	@ (800f9c0 <tcp_netif_ip_addr_changed+0x70>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7ff ffbc 	bl	800f8ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f974:	4b13      	ldr	r3, [pc, #76]	@ (800f9c4 <tcp_netif_ip_addr_changed+0x74>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4619      	mov	r1, r3
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f7ff ffb6 	bl	800f8ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d017      	beq.n	800f9b6 <tcp_netif_ip_addr_changed+0x66>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d013      	beq.n	800f9b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f98e:	4b0e      	ldr	r3, [pc, #56]	@ (800f9c8 <tcp_netif_ip_addr_changed+0x78>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	60fb      	str	r3, [r7, #12]
 800f994:	e00c      	b.n	800f9b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d103      	bne.n	800f9aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	68db      	ldr	r3, [r3, #12]
 800f9ae:	60fb      	str	r3, [r7, #12]
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1ef      	bne.n	800f996 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f9b6:	bf00      	nop
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	2400e970 	.word	0x2400e970
 800f9c4:	2400e968 	.word	0x2400e968
 800f9c8:	2400e96c 	.word	0x2400e96c

0800f9cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d007      	beq.n	800f9ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff fc3d 	bl	800f260 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f9f4:	b590      	push	{r4, r7, lr}
 800f9f6:	b08d      	sub	sp, #52	@ 0x34
 800f9f8:	af04      	add	r7, sp, #16
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d105      	bne.n	800fa10 <tcp_input+0x1c>
 800fa04:	4b9b      	ldr	r3, [pc, #620]	@ (800fc74 <tcp_input+0x280>)
 800fa06:	2283      	movs	r2, #131	@ 0x83
 800fa08:	499b      	ldr	r1, [pc, #620]	@ (800fc78 <tcp_input+0x284>)
 800fa0a:	489c      	ldr	r0, [pc, #624]	@ (800fc7c <tcp_input+0x288>)
 800fa0c:	f008 ff96 	bl	801893c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	4a9a      	ldr	r2, [pc, #616]	@ (800fc80 <tcp_input+0x28c>)
 800fa16:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	895b      	ldrh	r3, [r3, #10]
 800fa1c:	2b13      	cmp	r3, #19
 800fa1e:	f240 83d1 	bls.w	80101c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa22:	4b98      	ldr	r3, [pc, #608]	@ (800fc84 <tcp_input+0x290>)
 800fa24:	695b      	ldr	r3, [r3, #20]
 800fa26:	4a97      	ldr	r2, [pc, #604]	@ (800fc84 <tcp_input+0x290>)
 800fa28:	6812      	ldr	r2, [r2, #0]
 800fa2a:	4611      	mov	r1, r2
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f007 fe19 	bl	8017664 <ip4_addr_isbroadcast_u32>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f040 83c7 	bne.w	80101c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa3a:	4b92      	ldr	r3, [pc, #584]	@ (800fc84 <tcp_input+0x290>)
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa42:	2be0      	cmp	r3, #224	@ 0xe0
 800fa44:	f000 83c0 	beq.w	80101c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fa48:	4b8d      	ldr	r3, [pc, #564]	@ (800fc80 <tcp_input+0x28c>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	899b      	ldrh	r3, [r3, #12]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fc fcd3 	bl	800c3fc <lwip_htons>
 800fa56:	4603      	mov	r3, r0
 800fa58:	0b1b      	lsrs	r3, r3, #12
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	009b      	lsls	r3, r3, #2
 800fa60:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fa62:	7cbb      	ldrb	r3, [r7, #18]
 800fa64:	2b13      	cmp	r3, #19
 800fa66:	f240 83b1 	bls.w	80101cc <tcp_input+0x7d8>
 800fa6a:	7cbb      	ldrb	r3, [r7, #18]
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	f200 83aa 	bhi.w	80101cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fa78:	7cbb      	ldrb	r3, [r7, #18]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	3b14      	subs	r3, #20
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	4b81      	ldr	r3, [pc, #516]	@ (800fc88 <tcp_input+0x294>)
 800fa82:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fa84:	4b81      	ldr	r3, [pc, #516]	@ (800fc8c <tcp_input+0x298>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	895a      	ldrh	r2, [r3, #10]
 800fa8e:	7cbb      	ldrb	r3, [r7, #18]
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d309      	bcc.n	800faaa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fa96:	4b7c      	ldr	r3, [pc, #496]	@ (800fc88 <tcp_input+0x294>)
 800fa98:	881a      	ldrh	r2, [r3, #0]
 800fa9a:	4b7d      	ldr	r3, [pc, #500]	@ (800fc90 <tcp_input+0x29c>)
 800fa9c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fa9e:	7cbb      	ldrb	r3, [r7, #18]
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f7fe f8da 	bl	800dc5c <pbuf_remove_header>
 800faa8:	e04e      	b.n	800fb48 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d105      	bne.n	800fabe <tcp_input+0xca>
 800fab2:	4b70      	ldr	r3, [pc, #448]	@ (800fc74 <tcp_input+0x280>)
 800fab4:	22c2      	movs	r2, #194	@ 0xc2
 800fab6:	4977      	ldr	r1, [pc, #476]	@ (800fc94 <tcp_input+0x2a0>)
 800fab8:	4870      	ldr	r0, [pc, #448]	@ (800fc7c <tcp_input+0x288>)
 800faba:	f008 ff3f 	bl	801893c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fabe:	2114      	movs	r1, #20
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7fe f8cb 	bl	800dc5c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	895a      	ldrh	r2, [r3, #10]
 800faca:	4b71      	ldr	r3, [pc, #452]	@ (800fc90 <tcp_input+0x29c>)
 800facc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800face:	4b6e      	ldr	r3, [pc, #440]	@ (800fc88 <tcp_input+0x294>)
 800fad0:	881a      	ldrh	r2, [r3, #0]
 800fad2:	4b6f      	ldr	r3, [pc, #444]	@ (800fc90 <tcp_input+0x29c>)
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	1ad3      	subs	r3, r2, r3
 800fad8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fada:	4b6d      	ldr	r3, [pc, #436]	@ (800fc90 <tcp_input+0x29c>)
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	4619      	mov	r1, r3
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7fe f8bb 	bl	800dc5c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	895b      	ldrh	r3, [r3, #10]
 800faec:	8a3a      	ldrh	r2, [r7, #16]
 800faee:	429a      	cmp	r2, r3
 800faf0:	f200 836e 	bhi.w	80101d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	4a64      	ldr	r2, [pc, #400]	@ (800fc8c <tcp_input+0x298>)
 800fafc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	8a3a      	ldrh	r2, [r7, #16]
 800fb04:	4611      	mov	r1, r2
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fe f8a8 	bl	800dc5c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	891a      	ldrh	r2, [r3, #8]
 800fb10:	8a3b      	ldrh	r3, [r7, #16]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	895b      	ldrh	r3, [r3, #10]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d005      	beq.n	800fb2e <tcp_input+0x13a>
 800fb22:	4b54      	ldr	r3, [pc, #336]	@ (800fc74 <tcp_input+0x280>)
 800fb24:	22df      	movs	r2, #223	@ 0xdf
 800fb26:	495c      	ldr	r1, [pc, #368]	@ (800fc98 <tcp_input+0x2a4>)
 800fb28:	4854      	ldr	r0, [pc, #336]	@ (800fc7c <tcp_input+0x288>)
 800fb2a:	f008 ff07 	bl	801893c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	891a      	ldrh	r2, [r3, #8]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	891b      	ldrh	r3, [r3, #8]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d005      	beq.n	800fb48 <tcp_input+0x154>
 800fb3c:	4b4d      	ldr	r3, [pc, #308]	@ (800fc74 <tcp_input+0x280>)
 800fb3e:	22e0      	movs	r2, #224	@ 0xe0
 800fb40:	4956      	ldr	r1, [pc, #344]	@ (800fc9c <tcp_input+0x2a8>)
 800fb42:	484e      	ldr	r0, [pc, #312]	@ (800fc7c <tcp_input+0x288>)
 800fb44:	f008 fefa 	bl	801893c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fb48:	4b4d      	ldr	r3, [pc, #308]	@ (800fc80 <tcp_input+0x28c>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	881b      	ldrh	r3, [r3, #0]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4a4b      	ldr	r2, [pc, #300]	@ (800fc80 <tcp_input+0x28c>)
 800fb52:	6814      	ldr	r4, [r2, #0]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fc fc51 	bl	800c3fc <lwip_htons>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fb5e:	4b48      	ldr	r3, [pc, #288]	@ (800fc80 <tcp_input+0x28c>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	885b      	ldrh	r3, [r3, #2]
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	4a46      	ldr	r2, [pc, #280]	@ (800fc80 <tcp_input+0x28c>)
 800fb68:	6814      	ldr	r4, [r2, #0]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fc fc46 	bl	800c3fc <lwip_htons>
 800fb70:	4603      	mov	r3, r0
 800fb72:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fb74:	4b42      	ldr	r3, [pc, #264]	@ (800fc80 <tcp_input+0x28c>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	4a41      	ldr	r2, [pc, #260]	@ (800fc80 <tcp_input+0x28c>)
 800fb7c:	6814      	ldr	r4, [r2, #0]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fc fc51 	bl	800c426 <lwip_htonl>
 800fb84:	4603      	mov	r3, r0
 800fb86:	6063      	str	r3, [r4, #4]
 800fb88:	6863      	ldr	r3, [r4, #4]
 800fb8a:	4a45      	ldr	r2, [pc, #276]	@ (800fca0 <tcp_input+0x2ac>)
 800fb8c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb8e:	4b3c      	ldr	r3, [pc, #240]	@ (800fc80 <tcp_input+0x28c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	4a3a      	ldr	r2, [pc, #232]	@ (800fc80 <tcp_input+0x28c>)
 800fb96:	6814      	ldr	r4, [r2, #0]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fc fc44 	bl	800c426 <lwip_htonl>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	60a3      	str	r3, [r4, #8]
 800fba2:	68a3      	ldr	r3, [r4, #8]
 800fba4:	4a3f      	ldr	r2, [pc, #252]	@ (800fca4 <tcp_input+0x2b0>)
 800fba6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fba8:	4b35      	ldr	r3, [pc, #212]	@ (800fc80 <tcp_input+0x28c>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	89db      	ldrh	r3, [r3, #14]
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	4a33      	ldr	r2, [pc, #204]	@ (800fc80 <tcp_input+0x28c>)
 800fbb2:	6814      	ldr	r4, [r2, #0]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7fc fc21 	bl	800c3fc <lwip_htons>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fbbe:	4b30      	ldr	r3, [pc, #192]	@ (800fc80 <tcp_input+0x28c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	899b      	ldrh	r3, [r3, #12]
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7fc fc18 	bl	800c3fc <lwip_htons>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	4b34      	ldr	r3, [pc, #208]	@ (800fca8 <tcp_input+0x2b4>)
 800fbd8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	891a      	ldrh	r2, [r3, #8]
 800fbde:	4b33      	ldr	r3, [pc, #204]	@ (800fcac <tcp_input+0x2b8>)
 800fbe0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fbe2:	4b31      	ldr	r3, [pc, #196]	@ (800fca8 <tcp_input+0x2b4>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f003 0303 	and.w	r3, r3, #3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d00c      	beq.n	800fc08 <tcp_input+0x214>
    tcplen++;
 800fbee:	4b2f      	ldr	r3, [pc, #188]	@ (800fcac <tcp_input+0x2b8>)
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	4b2d      	ldr	r3, [pc, #180]	@ (800fcac <tcp_input+0x2b8>)
 800fbf8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	891a      	ldrh	r2, [r3, #8]
 800fbfe:	4b2b      	ldr	r3, [pc, #172]	@ (800fcac <tcp_input+0x2b8>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	f200 82e6 	bhi.w	80101d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc0c:	4b28      	ldr	r3, [pc, #160]	@ (800fcb0 <tcp_input+0x2bc>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	61fb      	str	r3, [r7, #28]
 800fc12:	e09d      	b.n	800fd50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	7d1b      	ldrb	r3, [r3, #20]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d105      	bne.n	800fc28 <tcp_input+0x234>
 800fc1c:	4b15      	ldr	r3, [pc, #84]	@ (800fc74 <tcp_input+0x280>)
 800fc1e:	22fb      	movs	r2, #251	@ 0xfb
 800fc20:	4924      	ldr	r1, [pc, #144]	@ (800fcb4 <tcp_input+0x2c0>)
 800fc22:	4816      	ldr	r0, [pc, #88]	@ (800fc7c <tcp_input+0x288>)
 800fc24:	f008 fe8a 	bl	801893c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	7d1b      	ldrb	r3, [r3, #20]
 800fc2c:	2b0a      	cmp	r3, #10
 800fc2e:	d105      	bne.n	800fc3c <tcp_input+0x248>
 800fc30:	4b10      	ldr	r3, [pc, #64]	@ (800fc74 <tcp_input+0x280>)
 800fc32:	22fc      	movs	r2, #252	@ 0xfc
 800fc34:	4920      	ldr	r1, [pc, #128]	@ (800fcb8 <tcp_input+0x2c4>)
 800fc36:	4811      	ldr	r0, [pc, #68]	@ (800fc7c <tcp_input+0x288>)
 800fc38:	f008 fe80 	bl	801893c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	7d1b      	ldrb	r3, [r3, #20]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d105      	bne.n	800fc50 <tcp_input+0x25c>
 800fc44:	4b0b      	ldr	r3, [pc, #44]	@ (800fc74 <tcp_input+0x280>)
 800fc46:	22fd      	movs	r2, #253	@ 0xfd
 800fc48:	491c      	ldr	r1, [pc, #112]	@ (800fcbc <tcp_input+0x2c8>)
 800fc4a:	480c      	ldr	r0, [pc, #48]	@ (800fc7c <tcp_input+0x288>)
 800fc4c:	f008 fe76 	bl	801893c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	7a1b      	ldrb	r3, [r3, #8]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d033      	beq.n	800fcc0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	7a1a      	ldrb	r2, [r3, #8]
 800fc5c:	4b09      	ldr	r3, [pc, #36]	@ (800fc84 <tcp_input+0x290>)
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fc64:	3301      	adds	r3, #1
 800fc66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d029      	beq.n	800fcc0 <tcp_input+0x2cc>
      prev = pcb;
 800fc6c:	69fb      	ldr	r3, [r7, #28]
 800fc6e:	61bb      	str	r3, [r7, #24]
      continue;
 800fc70:	e06b      	b.n	800fd4a <tcp_input+0x356>
 800fc72:	bf00      	nop
 800fc74:	0801ab10 	.word	0x0801ab10
 800fc78:	0801ab44 	.word	0x0801ab44
 800fc7c:	0801ab5c 	.word	0x0801ab5c
 800fc80:	2400e98c 	.word	0x2400e98c
 800fc84:	2400b844 	.word	0x2400b844
 800fc88:	2400e990 	.word	0x2400e990
 800fc8c:	2400e994 	.word	0x2400e994
 800fc90:	2400e992 	.word	0x2400e992
 800fc94:	0801ab84 	.word	0x0801ab84
 800fc98:	0801ab94 	.word	0x0801ab94
 800fc9c:	0801aba0 	.word	0x0801aba0
 800fca0:	2400e99c 	.word	0x2400e99c
 800fca4:	2400e9a0 	.word	0x2400e9a0
 800fca8:	2400e9a8 	.word	0x2400e9a8
 800fcac:	2400e9a6 	.word	0x2400e9a6
 800fcb0:	2400e970 	.word	0x2400e970
 800fcb4:	0801abc0 	.word	0x0801abc0
 800fcb8:	0801abe8 	.word	0x0801abe8
 800fcbc:	0801ac14 	.word	0x0801ac14
    }

    if (pcb->remote_port == tcphdr->src &&
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	8b1a      	ldrh	r2, [r3, #24]
 800fcc4:	4b72      	ldr	r3, [pc, #456]	@ (800fe90 <tcp_input+0x49c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d13a      	bne.n	800fd46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	8ada      	ldrh	r2, [r3, #22]
 800fcd4:	4b6e      	ldr	r3, [pc, #440]	@ (800fe90 <tcp_input+0x49c>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	885b      	ldrh	r3, [r3, #2]
 800fcda:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d132      	bne.n	800fd46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	685a      	ldr	r2, [r3, #4]
 800fce4:	4b6b      	ldr	r3, [pc, #428]	@ (800fe94 <tcp_input+0x4a0>)
 800fce6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d12c      	bne.n	800fd46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4b68      	ldr	r3, [pc, #416]	@ (800fe94 <tcp_input+0x4a0>)
 800fcf2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d126      	bne.n	800fd46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	69fa      	ldr	r2, [r7, #28]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d106      	bne.n	800fd10 <tcp_input+0x31c>
 800fd02:	4b65      	ldr	r3, [pc, #404]	@ (800fe98 <tcp_input+0x4a4>)
 800fd04:	f240 120d 	movw	r2, #269	@ 0x10d
 800fd08:	4964      	ldr	r1, [pc, #400]	@ (800fe9c <tcp_input+0x4a8>)
 800fd0a:	4865      	ldr	r0, [pc, #404]	@ (800fea0 <tcp_input+0x4ac>)
 800fd0c:	f008 fe16 	bl	801893c <iprintf>
      if (prev != NULL) {
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00a      	beq.n	800fd2c <tcp_input+0x338>
        prev->next = pcb->next;
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	68da      	ldr	r2, [r3, #12]
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd1e:	4b61      	ldr	r3, [pc, #388]	@ (800fea4 <tcp_input+0x4b0>)
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fd26:	4a5f      	ldr	r2, [pc, #380]	@ (800fea4 <tcp_input+0x4b0>)
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	69fa      	ldr	r2, [r7, #28]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d111      	bne.n	800fd5a <tcp_input+0x366>
 800fd36:	4b58      	ldr	r3, [pc, #352]	@ (800fe98 <tcp_input+0x4a4>)
 800fd38:	f240 1215 	movw	r2, #277	@ 0x115
 800fd3c:	495a      	ldr	r1, [pc, #360]	@ (800fea8 <tcp_input+0x4b4>)
 800fd3e:	4858      	ldr	r0, [pc, #352]	@ (800fea0 <tcp_input+0x4ac>)
 800fd40:	f008 fdfc 	bl	801893c <iprintf>
      break;
 800fd44:	e009      	b.n	800fd5a <tcp_input+0x366>
    }
    prev = pcb;
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd4a:	69fb      	ldr	r3, [r7, #28]
 800fd4c:	68db      	ldr	r3, [r3, #12]
 800fd4e:	61fb      	str	r3, [r7, #28]
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f47f af5e 	bne.w	800fc14 <tcp_input+0x220>
 800fd58:	e000      	b.n	800fd5c <tcp_input+0x368>
      break;
 800fd5a:	bf00      	nop
  }

  if (pcb == NULL) {
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f040 80aa 	bne.w	800feb8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd64:	4b51      	ldr	r3, [pc, #324]	@ (800feac <tcp_input+0x4b8>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	61fb      	str	r3, [r7, #28]
 800fd6a:	e03f      	b.n	800fdec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	7d1b      	ldrb	r3, [r3, #20]
 800fd70:	2b0a      	cmp	r3, #10
 800fd72:	d006      	beq.n	800fd82 <tcp_input+0x38e>
 800fd74:	4b48      	ldr	r3, [pc, #288]	@ (800fe98 <tcp_input+0x4a4>)
 800fd76:	f240 121f 	movw	r2, #287	@ 0x11f
 800fd7a:	494d      	ldr	r1, [pc, #308]	@ (800feb0 <tcp_input+0x4bc>)
 800fd7c:	4848      	ldr	r0, [pc, #288]	@ (800fea0 <tcp_input+0x4ac>)
 800fd7e:	f008 fddd 	bl	801893c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	7a1b      	ldrb	r3, [r3, #8]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d009      	beq.n	800fd9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	7a1a      	ldrb	r2, [r3, #8]
 800fd8e:	4b41      	ldr	r3, [pc, #260]	@ (800fe94 <tcp_input+0x4a0>)
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fd96:	3301      	adds	r3, #1
 800fd98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d122      	bne.n	800fde4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fd9e:	69fb      	ldr	r3, [r7, #28]
 800fda0:	8b1a      	ldrh	r2, [r3, #24]
 800fda2:	4b3b      	ldr	r3, [pc, #236]	@ (800fe90 <tcp_input+0x49c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	881b      	ldrh	r3, [r3, #0]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d11b      	bne.n	800fde6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	8ada      	ldrh	r2, [r3, #22]
 800fdb2:	4b37      	ldr	r3, [pc, #220]	@ (800fe90 <tcp_input+0x49c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	885b      	ldrh	r3, [r3, #2]
 800fdb8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d113      	bne.n	800fde6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	685a      	ldr	r2, [r3, #4]
 800fdc2:	4b34      	ldr	r3, [pc, #208]	@ (800fe94 <tcp_input+0x4a0>)
 800fdc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d10d      	bne.n	800fde6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	4b31      	ldr	r3, [pc, #196]	@ (800fe94 <tcp_input+0x4a0>)
 800fdd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d107      	bne.n	800fde6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fdd6:	69f8      	ldr	r0, [r7, #28]
 800fdd8:	f000 fb56 	bl	8010488 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7fd ffc3 	bl	800dd68 <pbuf_free>
        return;
 800fde2:	e1fd      	b.n	80101e0 <tcp_input+0x7ec>
        continue;
 800fde4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	61fb      	str	r3, [r7, #28]
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1bc      	bne.n	800fd6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdf6:	4b2f      	ldr	r3, [pc, #188]	@ (800feb4 <tcp_input+0x4c0>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	617b      	str	r3, [r7, #20]
 800fdfc:	e02a      	b.n	800fe54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	7a1b      	ldrb	r3, [r3, #8]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00c      	beq.n	800fe20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	7a1a      	ldrb	r2, [r3, #8]
 800fe0a:	4b22      	ldr	r3, [pc, #136]	@ (800fe94 <tcp_input+0x4a0>)
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800fe12:	3301      	adds	r3, #1
 800fe14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d002      	beq.n	800fe20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	61bb      	str	r3, [r7, #24]
        continue;
 800fe1e:	e016      	b.n	800fe4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	8ada      	ldrh	r2, [r3, #22]
 800fe24:	4b1a      	ldr	r3, [pc, #104]	@ (800fe90 <tcp_input+0x49c>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	885b      	ldrh	r3, [r3, #2]
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d10c      	bne.n	800fe4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	4b17      	ldr	r3, [pc, #92]	@ (800fe94 <tcp_input+0x4a0>)
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d00f      	beq.n	800fe5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00d      	beq.n	800fe5e <tcp_input+0x46a>
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d009      	beq.n	800fe5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	68db      	ldr	r3, [r3, #12]
 800fe52:	617b      	str	r3, [r7, #20]
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1d1      	bne.n	800fdfe <tcp_input+0x40a>
 800fe5a:	e000      	b.n	800fe5e <tcp_input+0x46a>
            break;
 800fe5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d029      	beq.n	800feb8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fe64:	69bb      	ldr	r3, [r7, #24]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00a      	beq.n	800fe80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	68da      	ldr	r2, [r3, #12]
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fe72:	4b10      	ldr	r3, [pc, #64]	@ (800feb4 <tcp_input+0x4c0>)
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fe7a:	4a0e      	ldr	r2, [pc, #56]	@ (800feb4 <tcp_input+0x4c0>)
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fe80:	6978      	ldr	r0, [r7, #20]
 800fe82:	f000 fa03 	bl	801028c <tcp_listen_input>
      }
      pbuf_free(p);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fd ff6e 	bl	800dd68 <pbuf_free>
      return;
 800fe8c:	e1a8      	b.n	80101e0 <tcp_input+0x7ec>
 800fe8e:	bf00      	nop
 800fe90:	2400e98c 	.word	0x2400e98c
 800fe94:	2400b844 	.word	0x2400b844
 800fe98:	0801ab10 	.word	0x0801ab10
 800fe9c:	0801ac3c 	.word	0x0801ac3c
 800fea0:	0801ab5c 	.word	0x0801ab5c
 800fea4:	2400e970 	.word	0x2400e970
 800fea8:	0801ac68 	.word	0x0801ac68
 800feac:	2400e974 	.word	0x2400e974
 800feb0:	0801ac94 	.word	0x0801ac94
 800feb4:	2400e96c 	.word	0x2400e96c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	f000 8158 	beq.w	8010170 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fec0:	4b95      	ldr	r3, [pc, #596]	@ (8010118 <tcp_input+0x724>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	891a      	ldrh	r2, [r3, #8]
 800feca:	4b93      	ldr	r3, [pc, #588]	@ (8010118 <tcp_input+0x724>)
 800fecc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fece:	4a92      	ldr	r2, [pc, #584]	@ (8010118 <tcp_input+0x724>)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fed4:	4b91      	ldr	r3, [pc, #580]	@ (801011c <tcp_input+0x728>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a8f      	ldr	r2, [pc, #572]	@ (8010118 <tcp_input+0x724>)
 800feda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fedc:	4b90      	ldr	r3, [pc, #576]	@ (8010120 <tcp_input+0x72c>)
 800fede:	2200      	movs	r2, #0
 800fee0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fee2:	4b90      	ldr	r3, [pc, #576]	@ (8010124 <tcp_input+0x730>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fee8:	4b8f      	ldr	r3, [pc, #572]	@ (8010128 <tcp_input+0x734>)
 800feea:	2200      	movs	r2, #0
 800feec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800feee:	4b8f      	ldr	r3, [pc, #572]	@ (801012c <tcp_input+0x738>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	f003 0308 	and.w	r3, r3, #8
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d006      	beq.n	800ff08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	7b5b      	ldrb	r3, [r3, #13]
 800fefe:	f043 0301 	orr.w	r3, r3, #1
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d017      	beq.n	800ff40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff10:	69f8      	ldr	r0, [r7, #28]
 800ff12:	f7ff f929 	bl	800f168 <tcp_process_refused_data>
 800ff16:	4603      	mov	r3, r0
 800ff18:	f113 0f0d 	cmn.w	r3, #13
 800ff1c:	d007      	beq.n	800ff2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff1e:	69fb      	ldr	r3, [r7, #28]
 800ff20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00c      	beq.n	800ff40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff26:	4b82      	ldr	r3, [pc, #520]	@ (8010130 <tcp_input+0x73c>)
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d008      	beq.n	800ff40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f040 80e3 	bne.w	80100fe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ff38:	69f8      	ldr	r0, [r7, #28]
 800ff3a:	f003 f9a7 	bl	801328c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ff3e:	e0de      	b.n	80100fe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ff40:	4a7c      	ldr	r2, [pc, #496]	@ (8010134 <tcp_input+0x740>)
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ff46:	69f8      	ldr	r0, [r7, #28]
 800ff48:	f000 fb18 	bl	801057c <tcp_process>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff54:	f113 0f0d 	cmn.w	r3, #13
 800ff58:	f000 80d3 	beq.w	8010102 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ff5c:	4b71      	ldr	r3, [pc, #452]	@ (8010124 <tcp_input+0x730>)
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	f003 0308 	and.w	r3, r3, #8
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d015      	beq.n	800ff94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d008      	beq.n	800ff84 <tcp_input+0x590>
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff78:	69fa      	ldr	r2, [r7, #28]
 800ff7a:	6912      	ldr	r2, [r2, #16]
 800ff7c:	f06f 010d 	mvn.w	r1, #13
 800ff80:	4610      	mov	r0, r2
 800ff82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff84:	69f9      	ldr	r1, [r7, #28]
 800ff86:	486c      	ldr	r0, [pc, #432]	@ (8010138 <tcp_input+0x744>)
 800ff88:	f7ff fbbc 	bl	800f704 <tcp_pcb_remove>
        tcp_free(pcb);
 800ff8c:	69f8      	ldr	r0, [r7, #28]
 800ff8e:	f7fe f9a7 	bl	800e2e0 <tcp_free>
 800ff92:	e0da      	b.n	801014a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ff94:	2300      	movs	r3, #0
 800ff96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff98:	4b63      	ldr	r3, [pc, #396]	@ (8010128 <tcp_input+0x734>)
 800ff9a:	881b      	ldrh	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d01d      	beq.n	800ffdc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ffa0:	4b61      	ldr	r3, [pc, #388]	@ (8010128 <tcp_input+0x734>)
 800ffa2:	881b      	ldrh	r3, [r3, #0]
 800ffa4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d00a      	beq.n	800ffc6 <tcp_input+0x5d2>
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffb6:	69fa      	ldr	r2, [r7, #28]
 800ffb8:	6910      	ldr	r0, [r2, #16]
 800ffba:	89fa      	ldrh	r2, [r7, #14]
 800ffbc:	69f9      	ldr	r1, [r7, #28]
 800ffbe:	4798      	blx	r3
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	74fb      	strb	r3, [r7, #19]
 800ffc4:	e001      	b.n	800ffca <tcp_input+0x5d6>
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ffca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffce:	f113 0f0d 	cmn.w	r3, #13
 800ffd2:	f000 8098 	beq.w	8010106 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ffd6:	4b54      	ldr	r3, [pc, #336]	@ (8010128 <tcp_input+0x734>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ffdc:	69f8      	ldr	r0, [r7, #28]
 800ffde:	f000 f915 	bl	801020c <tcp_input_delayed_close>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f040 8090 	bne.w	801010a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ffea:	4b4d      	ldr	r3, [pc, #308]	@ (8010120 <tcp_input+0x72c>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d041      	beq.n	8010076 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d006      	beq.n	8010008 <tcp_input+0x614>
 800fffa:	4b50      	ldr	r3, [pc, #320]	@ (801013c <tcp_input+0x748>)
 800fffc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010000:	494f      	ldr	r1, [pc, #316]	@ (8010140 <tcp_input+0x74c>)
 8010002:	4850      	ldr	r0, [pc, #320]	@ (8010144 <tcp_input+0x750>)
 8010004:	f008 fc9a 	bl	801893c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	8b5b      	ldrh	r3, [r3, #26]
 801000c:	f003 0310 	and.w	r3, r3, #16
 8010010:	2b00      	cmp	r3, #0
 8010012:	d008      	beq.n	8010026 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010014:	4b42      	ldr	r3, [pc, #264]	@ (8010120 <tcp_input+0x72c>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4618      	mov	r0, r3
 801001a:	f7fd fea5 	bl	800dd68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801001e:	69f8      	ldr	r0, [r7, #28]
 8010020:	f7fe fc46 	bl	800e8b0 <tcp_abort>
            goto aborted;
 8010024:	e091      	b.n	801014a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010026:	69fb      	ldr	r3, [r7, #28]
 8010028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00c      	beq.n	801004a <tcp_input+0x656>
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010036:	69fb      	ldr	r3, [r7, #28]
 8010038:	6918      	ldr	r0, [r3, #16]
 801003a:	4b39      	ldr	r3, [pc, #228]	@ (8010120 <tcp_input+0x72c>)
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	2300      	movs	r3, #0
 8010040:	69f9      	ldr	r1, [r7, #28]
 8010042:	47a0      	blx	r4
 8010044:	4603      	mov	r3, r0
 8010046:	74fb      	strb	r3, [r7, #19]
 8010048:	e008      	b.n	801005c <tcp_input+0x668>
 801004a:	4b35      	ldr	r3, [pc, #212]	@ (8010120 <tcp_input+0x72c>)
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	2300      	movs	r3, #0
 8010050:	69f9      	ldr	r1, [r7, #28]
 8010052:	2000      	movs	r0, #0
 8010054:	f7ff f95e 	bl	800f314 <tcp_recv_null>
 8010058:	4603      	mov	r3, r0
 801005a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801005c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010060:	f113 0f0d 	cmn.w	r3, #13
 8010064:	d053      	beq.n	801010e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010066:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801006e:	4b2c      	ldr	r3, [pc, #176]	@ (8010120 <tcp_input+0x72c>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010076:	4b2b      	ldr	r3, [pc, #172]	@ (8010124 <tcp_input+0x730>)
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	f003 0320 	and.w	r3, r3, #32
 801007e:	2b00      	cmp	r3, #0
 8010080:	d030      	beq.n	80100e4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010086:	2b00      	cmp	r3, #0
 8010088:	d009      	beq.n	801009e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801008e:	7b5a      	ldrb	r2, [r3, #13]
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010094:	f042 0220 	orr.w	r2, r2, #32
 8010098:	b2d2      	uxtb	r2, r2
 801009a:	735a      	strb	r2, [r3, #13]
 801009c:	e022      	b.n	80100e4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100a2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80100a6:	d005      	beq.n	80100b4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100ac:	3301      	adds	r3, #1
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00b      	beq.n	80100d6 <tcp_input+0x6e2>
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	6918      	ldr	r0, [r3, #16]
 80100c8:	2300      	movs	r3, #0
 80100ca:	2200      	movs	r2, #0
 80100cc:	69f9      	ldr	r1, [r7, #28]
 80100ce:	47a0      	blx	r4
 80100d0:	4603      	mov	r3, r0
 80100d2:	74fb      	strb	r3, [r7, #19]
 80100d4:	e001      	b.n	80100da <tcp_input+0x6e6>
 80100d6:	2300      	movs	r3, #0
 80100d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80100da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100de:	f113 0f0d 	cmn.w	r3, #13
 80100e2:	d016      	beq.n	8010112 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80100e4:	4b13      	ldr	r3, [pc, #76]	@ (8010134 <tcp_input+0x740>)
 80100e6:	2200      	movs	r2, #0
 80100e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80100ea:	69f8      	ldr	r0, [r7, #28]
 80100ec:	f000 f88e 	bl	801020c <tcp_input_delayed_close>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d128      	bne.n	8010148 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80100f6:	69f8      	ldr	r0, [r7, #28]
 80100f8:	f002 fac2 	bl	8012680 <tcp_output>
 80100fc:	e025      	b.n	801014a <tcp_input+0x756>
        goto aborted;
 80100fe:	bf00      	nop
 8010100:	e023      	b.n	801014a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010102:	bf00      	nop
 8010104:	e021      	b.n	801014a <tcp_input+0x756>
              goto aborted;
 8010106:	bf00      	nop
 8010108:	e01f      	b.n	801014a <tcp_input+0x756>
          goto aborted;
 801010a:	bf00      	nop
 801010c:	e01d      	b.n	801014a <tcp_input+0x756>
            goto aborted;
 801010e:	bf00      	nop
 8010110:	e01b      	b.n	801014a <tcp_input+0x756>
              goto aborted;
 8010112:	bf00      	nop
 8010114:	e019      	b.n	801014a <tcp_input+0x756>
 8010116:	bf00      	nop
 8010118:	2400e97c 	.word	0x2400e97c
 801011c:	2400e98c 	.word	0x2400e98c
 8010120:	2400e9ac 	.word	0x2400e9ac
 8010124:	2400e9a9 	.word	0x2400e9a9
 8010128:	2400e9a4 	.word	0x2400e9a4
 801012c:	2400e9a8 	.word	0x2400e9a8
 8010130:	2400e9a6 	.word	0x2400e9a6
 8010134:	2400e9b0 	.word	0x2400e9b0
 8010138:	2400e970 	.word	0x2400e970
 801013c:	0801ab10 	.word	0x0801ab10
 8010140:	0801acc4 	.word	0x0801acc4
 8010144:	0801ab5c 	.word	0x0801ab5c
          goto aborted;
 8010148:	bf00      	nop
    tcp_input_pcb = NULL;
 801014a:	4b27      	ldr	r3, [pc, #156]	@ (80101e8 <tcp_input+0x7f4>)
 801014c:	2200      	movs	r2, #0
 801014e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010150:	4b26      	ldr	r3, [pc, #152]	@ (80101ec <tcp_input+0x7f8>)
 8010152:	2200      	movs	r2, #0
 8010154:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010156:	4b26      	ldr	r3, [pc, #152]	@ (80101f0 <tcp_input+0x7fc>)
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d03f      	beq.n	80101de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801015e:	4b24      	ldr	r3, [pc, #144]	@ (80101f0 <tcp_input+0x7fc>)
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	4618      	mov	r0, r3
 8010164:	f7fd fe00 	bl	800dd68 <pbuf_free>
      inseg.p = NULL;
 8010168:	4b21      	ldr	r3, [pc, #132]	@ (80101f0 <tcp_input+0x7fc>)
 801016a:	2200      	movs	r2, #0
 801016c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801016e:	e036      	b.n	80101de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010170:	4b20      	ldr	r3, [pc, #128]	@ (80101f4 <tcp_input+0x800>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	899b      	ldrh	r3, [r3, #12]
 8010176:	b29b      	uxth	r3, r3
 8010178:	4618      	mov	r0, r3
 801017a:	f7fc f93f 	bl	800c3fc <lwip_htons>
 801017e:	4603      	mov	r3, r0
 8010180:	b2db      	uxtb	r3, r3
 8010182:	f003 0304 	and.w	r3, r3, #4
 8010186:	2b00      	cmp	r3, #0
 8010188:	d118      	bne.n	80101bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801018a:	4b1b      	ldr	r3, [pc, #108]	@ (80101f8 <tcp_input+0x804>)
 801018c:	6819      	ldr	r1, [r3, #0]
 801018e:	4b1b      	ldr	r3, [pc, #108]	@ (80101fc <tcp_input+0x808>)
 8010190:	881b      	ldrh	r3, [r3, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	4b1a      	ldr	r3, [pc, #104]	@ (8010200 <tcp_input+0x80c>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801019a:	4b16      	ldr	r3, [pc, #88]	@ (80101f4 <tcp_input+0x800>)
 801019c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801019e:	885b      	ldrh	r3, [r3, #2]
 80101a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101a2:	4a14      	ldr	r2, [pc, #80]	@ (80101f4 <tcp_input+0x800>)
 80101a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101a6:	8812      	ldrh	r2, [r2, #0]
 80101a8:	b292      	uxth	r2, r2
 80101aa:	9202      	str	r2, [sp, #8]
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	4b15      	ldr	r3, [pc, #84]	@ (8010204 <tcp_input+0x810>)
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	4b15      	ldr	r3, [pc, #84]	@ (8010208 <tcp_input+0x814>)
 80101b4:	4602      	mov	r2, r0
 80101b6:	2000      	movs	r0, #0
 80101b8:	f003 f816 	bl	80131e8 <tcp_rst>
    pbuf_free(p);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7fd fdd3 	bl	800dd68 <pbuf_free>
  return;
 80101c2:	e00c      	b.n	80101de <tcp_input+0x7ea>
    goto dropped;
 80101c4:	bf00      	nop
 80101c6:	e006      	b.n	80101d6 <tcp_input+0x7e2>
    goto dropped;
 80101c8:	bf00      	nop
 80101ca:	e004      	b.n	80101d6 <tcp_input+0x7e2>
    goto dropped;
 80101cc:	bf00      	nop
 80101ce:	e002      	b.n	80101d6 <tcp_input+0x7e2>
      goto dropped;
 80101d0:	bf00      	nop
 80101d2:	e000      	b.n	80101d6 <tcp_input+0x7e2>
      goto dropped;
 80101d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7fd fdc6 	bl	800dd68 <pbuf_free>
 80101dc:	e000      	b.n	80101e0 <tcp_input+0x7ec>
  return;
 80101de:	bf00      	nop
}
 80101e0:	3724      	adds	r7, #36	@ 0x24
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd90      	pop	{r4, r7, pc}
 80101e6:	bf00      	nop
 80101e8:	2400e9b0 	.word	0x2400e9b0
 80101ec:	2400e9ac 	.word	0x2400e9ac
 80101f0:	2400e97c 	.word	0x2400e97c
 80101f4:	2400e98c 	.word	0x2400e98c
 80101f8:	2400e9a0 	.word	0x2400e9a0
 80101fc:	2400e9a6 	.word	0x2400e9a6
 8010200:	2400e99c 	.word	0x2400e99c
 8010204:	2400b854 	.word	0x2400b854
 8010208:	2400b858 	.word	0x2400b858

0801020c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b082      	sub	sp, #8
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d106      	bne.n	8010228 <tcp_input_delayed_close+0x1c>
 801021a:	4b17      	ldr	r3, [pc, #92]	@ (8010278 <tcp_input_delayed_close+0x6c>)
 801021c:	f240 225a 	movw	r2, #602	@ 0x25a
 8010220:	4916      	ldr	r1, [pc, #88]	@ (801027c <tcp_input_delayed_close+0x70>)
 8010222:	4817      	ldr	r0, [pc, #92]	@ (8010280 <tcp_input_delayed_close+0x74>)
 8010224:	f008 fb8a 	bl	801893c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010228:	4b16      	ldr	r3, [pc, #88]	@ (8010284 <tcp_input_delayed_close+0x78>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f003 0310 	and.w	r3, r3, #16
 8010230:	2b00      	cmp	r3, #0
 8010232:	d01c      	beq.n	801026e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	8b5b      	ldrh	r3, [r3, #26]
 8010238:	f003 0310 	and.w	r3, r3, #16
 801023c:	2b00      	cmp	r3, #0
 801023e:	d10d      	bne.n	801025c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010246:	2b00      	cmp	r3, #0
 8010248:	d008      	beq.n	801025c <tcp_input_delayed_close+0x50>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	6912      	ldr	r2, [r2, #16]
 8010254:	f06f 010e 	mvn.w	r1, #14
 8010258:	4610      	mov	r0, r2
 801025a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801025c:	6879      	ldr	r1, [r7, #4]
 801025e:	480a      	ldr	r0, [pc, #40]	@ (8010288 <tcp_input_delayed_close+0x7c>)
 8010260:	f7ff fa50 	bl	800f704 <tcp_pcb_remove>
    tcp_free(pcb);
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7fe f83b 	bl	800e2e0 <tcp_free>
    return 1;
 801026a:	2301      	movs	r3, #1
 801026c:	e000      	b.n	8010270 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3708      	adds	r7, #8
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	0801ab10 	.word	0x0801ab10
 801027c:	0801ace0 	.word	0x0801ace0
 8010280:	0801ab5c 	.word	0x0801ab5c
 8010284:	2400e9a9 	.word	0x2400e9a9
 8010288:	2400e970 	.word	0x2400e970

0801028c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801028c:	b590      	push	{r4, r7, lr}
 801028e:	b08b      	sub	sp, #44	@ 0x2c
 8010290:	af04      	add	r7, sp, #16
 8010292:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010294:	4b6f      	ldr	r3, [pc, #444]	@ (8010454 <tcp_listen_input+0x1c8>)
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	f003 0304 	and.w	r3, r3, #4
 801029c:	2b00      	cmp	r3, #0
 801029e:	f040 80d2 	bne.w	8010446 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d106      	bne.n	80102b6 <tcp_listen_input+0x2a>
 80102a8:	4b6b      	ldr	r3, [pc, #428]	@ (8010458 <tcp_listen_input+0x1cc>)
 80102aa:	f240 2281 	movw	r2, #641	@ 0x281
 80102ae:	496b      	ldr	r1, [pc, #428]	@ (801045c <tcp_listen_input+0x1d0>)
 80102b0:	486b      	ldr	r0, [pc, #428]	@ (8010460 <tcp_listen_input+0x1d4>)
 80102b2:	f008 fb43 	bl	801893c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80102b6:	4b67      	ldr	r3, [pc, #412]	@ (8010454 <tcp_listen_input+0x1c8>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f003 0310 	and.w	r3, r3, #16
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d019      	beq.n	80102f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102c2:	4b68      	ldr	r3, [pc, #416]	@ (8010464 <tcp_listen_input+0x1d8>)
 80102c4:	6819      	ldr	r1, [r3, #0]
 80102c6:	4b68      	ldr	r3, [pc, #416]	@ (8010468 <tcp_listen_input+0x1dc>)
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	461a      	mov	r2, r3
 80102cc:	4b67      	ldr	r3, [pc, #412]	@ (801046c <tcp_listen_input+0x1e0>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102d2:	4b67      	ldr	r3, [pc, #412]	@ (8010470 <tcp_listen_input+0x1e4>)
 80102d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d6:	885b      	ldrh	r3, [r3, #2]
 80102d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102da:	4a65      	ldr	r2, [pc, #404]	@ (8010470 <tcp_listen_input+0x1e4>)
 80102dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102de:	8812      	ldrh	r2, [r2, #0]
 80102e0:	b292      	uxth	r2, r2
 80102e2:	9202      	str	r2, [sp, #8]
 80102e4:	9301      	str	r3, [sp, #4]
 80102e6:	4b63      	ldr	r3, [pc, #396]	@ (8010474 <tcp_listen_input+0x1e8>)
 80102e8:	9300      	str	r3, [sp, #0]
 80102ea:	4b63      	ldr	r3, [pc, #396]	@ (8010478 <tcp_listen_input+0x1ec>)
 80102ec:	4602      	mov	r2, r0
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f002 ff7a 	bl	80131e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80102f4:	e0a9      	b.n	801044a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80102f6:	4b57      	ldr	r3, [pc, #348]	@ (8010454 <tcp_listen_input+0x1c8>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	f003 0302 	and.w	r3, r3, #2
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 80a3 	beq.w	801044a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	7d5b      	ldrb	r3, [r3, #21]
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff f927 	bl	800f55c <tcp_alloc>
 801030e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d111      	bne.n	801033a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	699b      	ldr	r3, [r3, #24]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00a      	beq.n	8010334 <tcp_listen_input+0xa8>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	6910      	ldr	r0, [r2, #16]
 8010326:	f04f 32ff 	mov.w	r2, #4294967295
 801032a:	2100      	movs	r1, #0
 801032c:	4798      	blx	r3
 801032e:	4603      	mov	r3, r0
 8010330:	73bb      	strb	r3, [r7, #14]
      return;
 8010332:	e08b      	b.n	801044c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010334:	23f0      	movs	r3, #240	@ 0xf0
 8010336:	73bb      	strb	r3, [r7, #14]
      return;
 8010338:	e088      	b.n	801044c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801033a:	4b50      	ldr	r3, [pc, #320]	@ (801047c <tcp_listen_input+0x1f0>)
 801033c:	695a      	ldr	r2, [r3, #20]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010342:	4b4e      	ldr	r3, [pc, #312]	@ (801047c <tcp_listen_input+0x1f0>)
 8010344:	691a      	ldr	r2, [r3, #16]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	8ada      	ldrh	r2, [r3, #22]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010352:	4b47      	ldr	r3, [pc, #284]	@ (8010470 <tcp_listen_input+0x1e4>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	b29a      	uxth	r2, r3
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	2203      	movs	r2, #3
 8010362:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010364:	4b41      	ldr	r3, [pc, #260]	@ (801046c <tcp_listen_input+0x1e0>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	1c5a      	adds	r2, r3, #1
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8010376:	6978      	ldr	r0, [r7, #20]
 8010378:	f7ff fa58 	bl	800f82c <tcp_next_iss>
 801037c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	693a      	ldr	r2, [r7, #16]
 8010394:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010396:	4b35      	ldr	r3, [pc, #212]	@ (801046c <tcp_listen_input+0x1e0>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	1e5a      	subs	r2, r3, #1
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	691a      	ldr	r2, [r3, #16]
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	7a5b      	ldrb	r3, [r3, #9]
 80103b2:	f003 030c 	and.w	r3, r3, #12
 80103b6:	b2da      	uxtb	r2, r3
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7a1a      	ldrb	r2, [r3, #8]
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80103c4:	4b2e      	ldr	r3, [pc, #184]	@ (8010480 <tcp_listen_input+0x1f4>)
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	60da      	str	r2, [r3, #12]
 80103cc:	4a2c      	ldr	r2, [pc, #176]	@ (8010480 <tcp_listen_input+0x1f4>)
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	6013      	str	r3, [r2, #0]
 80103d2:	f003 f8cb 	bl	801356c <tcp_timer_needed>
 80103d6:	4b2b      	ldr	r3, [pc, #172]	@ (8010484 <tcp_listen_input+0x1f8>)
 80103d8:	2201      	movs	r2, #1
 80103da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80103dc:	6978      	ldr	r0, [r7, #20]
 80103de:	f001 fd8b 	bl	8011ef8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80103e2:	4b23      	ldr	r3, [pc, #140]	@ (8010470 <tcp_listen_input+0x1e4>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	89db      	ldrh	r3, [r3, #14]
 80103e8:	b29a      	uxth	r2, r3
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	3304      	adds	r3, #4
 8010404:	4618      	mov	r0, r3
 8010406:	f006 fe79 	bl	80170fc <ip4_route>
 801040a:	4601      	mov	r1, r0
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	3304      	adds	r3, #4
 8010410:	461a      	mov	r2, r3
 8010412:	4620      	mov	r0, r4
 8010414:	f7ff fa30 	bl	800f878 <tcp_eff_send_mss_netif>
 8010418:	4603      	mov	r3, r0
 801041a:	461a      	mov	r2, r3
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010420:	2112      	movs	r1, #18
 8010422:	6978      	ldr	r0, [r7, #20]
 8010424:	f002 f83e 	bl	80124a4 <tcp_enqueue_flags>
 8010428:	4603      	mov	r3, r0
 801042a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801042c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d004      	beq.n	801043e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010434:	2100      	movs	r1, #0
 8010436:	6978      	ldr	r0, [r7, #20]
 8010438:	f7fe f97c 	bl	800e734 <tcp_abandon>
      return;
 801043c:	e006      	b.n	801044c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801043e:	6978      	ldr	r0, [r7, #20]
 8010440:	f002 f91e 	bl	8012680 <tcp_output>
  return;
 8010444:	e001      	b.n	801044a <tcp_listen_input+0x1be>
    return;
 8010446:	bf00      	nop
 8010448:	e000      	b.n	801044c <tcp_listen_input+0x1c0>
  return;
 801044a:	bf00      	nop
}
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	bd90      	pop	{r4, r7, pc}
 8010452:	bf00      	nop
 8010454:	2400e9a8 	.word	0x2400e9a8
 8010458:	0801ab10 	.word	0x0801ab10
 801045c:	0801ad08 	.word	0x0801ad08
 8010460:	0801ab5c 	.word	0x0801ab5c
 8010464:	2400e9a0 	.word	0x2400e9a0
 8010468:	2400e9a6 	.word	0x2400e9a6
 801046c:	2400e99c 	.word	0x2400e99c
 8010470:	2400e98c 	.word	0x2400e98c
 8010474:	2400b854 	.word	0x2400b854
 8010478:	2400b858 	.word	0x2400b858
 801047c:	2400b844 	.word	0x2400b844
 8010480:	2400e970 	.word	0x2400e970
 8010484:	2400e978 	.word	0x2400e978

08010488 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af04      	add	r7, sp, #16
 801048e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010490:	4b2f      	ldr	r3, [pc, #188]	@ (8010550 <tcp_timewait_input+0xc8>)
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b00      	cmp	r3, #0
 801049a:	d153      	bne.n	8010544 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d106      	bne.n	80104b0 <tcp_timewait_input+0x28>
 80104a2:	4b2c      	ldr	r3, [pc, #176]	@ (8010554 <tcp_timewait_input+0xcc>)
 80104a4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80104a8:	492b      	ldr	r1, [pc, #172]	@ (8010558 <tcp_timewait_input+0xd0>)
 80104aa:	482c      	ldr	r0, [pc, #176]	@ (801055c <tcp_timewait_input+0xd4>)
 80104ac:	f008 fa46 	bl	801893c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80104b0:	4b27      	ldr	r3, [pc, #156]	@ (8010550 <tcp_timewait_input+0xc8>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	f003 0302 	and.w	r3, r3, #2
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d02a      	beq.n	8010512 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80104bc:	4b28      	ldr	r3, [pc, #160]	@ (8010560 <tcp_timewait_input+0xd8>)
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104c4:	1ad3      	subs	r3, r2, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	db2d      	blt.n	8010526 <tcp_timewait_input+0x9e>
 80104ca:	4b25      	ldr	r3, [pc, #148]	@ (8010560 <tcp_timewait_input+0xd8>)
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104d2:	6879      	ldr	r1, [r7, #4]
 80104d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80104d6:	440b      	add	r3, r1
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	dc23      	bgt.n	8010526 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104de:	4b21      	ldr	r3, [pc, #132]	@ (8010564 <tcp_timewait_input+0xdc>)
 80104e0:	6819      	ldr	r1, [r3, #0]
 80104e2:	4b21      	ldr	r3, [pc, #132]	@ (8010568 <tcp_timewait_input+0xe0>)
 80104e4:	881b      	ldrh	r3, [r3, #0]
 80104e6:	461a      	mov	r2, r3
 80104e8:	4b1d      	ldr	r3, [pc, #116]	@ (8010560 <tcp_timewait_input+0xd8>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104ee:	4b1f      	ldr	r3, [pc, #124]	@ (801056c <tcp_timewait_input+0xe4>)
 80104f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104f2:	885b      	ldrh	r3, [r3, #2]
 80104f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104f6:	4a1d      	ldr	r2, [pc, #116]	@ (801056c <tcp_timewait_input+0xe4>)
 80104f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104fa:	8812      	ldrh	r2, [r2, #0]
 80104fc:	b292      	uxth	r2, r2
 80104fe:	9202      	str	r2, [sp, #8]
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	4b1b      	ldr	r3, [pc, #108]	@ (8010570 <tcp_timewait_input+0xe8>)
 8010504:	9300      	str	r3, [sp, #0]
 8010506:	4b1b      	ldr	r3, [pc, #108]	@ (8010574 <tcp_timewait_input+0xec>)
 8010508:	4602      	mov	r2, r0
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f002 fe6c 	bl	80131e8 <tcp_rst>
      return;
 8010510:	e01b      	b.n	801054a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010512:	4b0f      	ldr	r3, [pc, #60]	@ (8010550 <tcp_timewait_input+0xc8>)
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	f003 0301 	and.w	r3, r3, #1
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801051e:	4b16      	ldr	r3, [pc, #88]	@ (8010578 <tcp_timewait_input+0xf0>)
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010526:	4b10      	ldr	r3, [pc, #64]	@ (8010568 <tcp_timewait_input+0xe0>)
 8010528:	881b      	ldrh	r3, [r3, #0]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00c      	beq.n	8010548 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	8b5b      	ldrh	r3, [r3, #26]
 8010532:	f043 0302 	orr.w	r3, r3, #2
 8010536:	b29a      	uxth	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f002 f89f 	bl	8012680 <tcp_output>
  }
  return;
 8010542:	e001      	b.n	8010548 <tcp_timewait_input+0xc0>
    return;
 8010544:	bf00      	nop
 8010546:	e000      	b.n	801054a <tcp_timewait_input+0xc2>
  return;
 8010548:	bf00      	nop
}
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	2400e9a8 	.word	0x2400e9a8
 8010554:	0801ab10 	.word	0x0801ab10
 8010558:	0801ad28 	.word	0x0801ad28
 801055c:	0801ab5c 	.word	0x0801ab5c
 8010560:	2400e99c 	.word	0x2400e99c
 8010564:	2400e9a0 	.word	0x2400e9a0
 8010568:	2400e9a6 	.word	0x2400e9a6
 801056c:	2400e98c 	.word	0x2400e98c
 8010570:	2400b854 	.word	0x2400b854
 8010574:	2400b858 	.word	0x2400b858
 8010578:	2400e964 	.word	0x2400e964

0801057c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801057c:	b590      	push	{r4, r7, lr}
 801057e:	b08d      	sub	sp, #52	@ 0x34
 8010580:	af04      	add	r7, sp, #16
 8010582:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010584:	2300      	movs	r3, #0
 8010586:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010588:	2300      	movs	r3, #0
 801058a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d106      	bne.n	80105a0 <tcp_process+0x24>
 8010592:	4b9d      	ldr	r3, [pc, #628]	@ (8010808 <tcp_process+0x28c>)
 8010594:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010598:	499c      	ldr	r1, [pc, #624]	@ (801080c <tcp_process+0x290>)
 801059a:	489d      	ldr	r0, [pc, #628]	@ (8010810 <tcp_process+0x294>)
 801059c:	f008 f9ce 	bl	801893c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80105a0:	4b9c      	ldr	r3, [pc, #624]	@ (8010814 <tcp_process+0x298>)
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	f003 0304 	and.w	r3, r3, #4
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d04e      	beq.n	801064a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	7d1b      	ldrb	r3, [r3, #20]
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	d108      	bne.n	80105c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105b8:	4b97      	ldr	r3, [pc, #604]	@ (8010818 <tcp_process+0x29c>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d123      	bne.n	8010608 <tcp_process+0x8c>
        acceptable = 1;
 80105c0:	2301      	movs	r3, #1
 80105c2:	76fb      	strb	r3, [r7, #27]
 80105c4:	e020      	b.n	8010608 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80105ca:	4b94      	ldr	r3, [pc, #592]	@ (801081c <tcp_process+0x2a0>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d102      	bne.n	80105d8 <tcp_process+0x5c>
        acceptable = 1;
 80105d2:	2301      	movs	r3, #1
 80105d4:	76fb      	strb	r3, [r7, #27]
 80105d6:	e017      	b.n	8010608 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80105d8:	4b90      	ldr	r3, [pc, #576]	@ (801081c <tcp_process+0x2a0>)
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	db10      	blt.n	8010608 <tcp_process+0x8c>
 80105e6:	4b8d      	ldr	r3, [pc, #564]	@ (801081c <tcp_process+0x2a0>)
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105ee:	6879      	ldr	r1, [r7, #4]
 80105f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80105f2:	440b      	add	r3, r1
 80105f4:	1ad3      	subs	r3, r2, r3
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dc06      	bgt.n	8010608 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8b5b      	ldrh	r3, [r3, #26]
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	b29a      	uxth	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010608:	7efb      	ldrb	r3, [r7, #27]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d01b      	beq.n	8010646 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7d1b      	ldrb	r3, [r3, #20]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d106      	bne.n	8010624 <tcp_process+0xa8>
 8010616:	4b7c      	ldr	r3, [pc, #496]	@ (8010808 <tcp_process+0x28c>)
 8010618:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801061c:	4980      	ldr	r1, [pc, #512]	@ (8010820 <tcp_process+0x2a4>)
 801061e:	487c      	ldr	r0, [pc, #496]	@ (8010810 <tcp_process+0x294>)
 8010620:	f008 f98c 	bl	801893c <iprintf>
      recv_flags |= TF_RESET;
 8010624:	4b7f      	ldr	r3, [pc, #508]	@ (8010824 <tcp_process+0x2a8>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f043 0308 	orr.w	r3, r3, #8
 801062c:	b2da      	uxtb	r2, r3
 801062e:	4b7d      	ldr	r3, [pc, #500]	@ (8010824 <tcp_process+0x2a8>)
 8010630:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	8b5b      	ldrh	r3, [r3, #26]
 8010636:	f023 0301 	bic.w	r3, r3, #1
 801063a:	b29a      	uxth	r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010640:	f06f 030d 	mvn.w	r3, #13
 8010644:	e37a      	b.n	8010d3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010646:	2300      	movs	r3, #0
 8010648:	e378      	b.n	8010d3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801064a:	4b72      	ldr	r3, [pc, #456]	@ (8010814 <tcp_process+0x298>)
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	f003 0302 	and.w	r3, r3, #2
 8010652:	2b00      	cmp	r3, #0
 8010654:	d010      	beq.n	8010678 <tcp_process+0xfc>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	7d1b      	ldrb	r3, [r3, #20]
 801065a:	2b02      	cmp	r3, #2
 801065c:	d00c      	beq.n	8010678 <tcp_process+0xfc>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	7d1b      	ldrb	r3, [r3, #20]
 8010662:	2b03      	cmp	r3, #3
 8010664:	d008      	beq.n	8010678 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	8b5b      	ldrh	r3, [r3, #26]
 801066a:	f043 0302 	orr.w	r3, r3, #2
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	e361      	b.n	8010d3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	8b5b      	ldrh	r3, [r3, #26]
 801067c:	f003 0310 	and.w	r3, r3, #16
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010684:	4b68      	ldr	r3, [pc, #416]	@ (8010828 <tcp_process+0x2ac>)
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f001 fc2b 	bl	8011ef8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	7d1b      	ldrb	r3, [r3, #20]
 80106a6:	3b02      	subs	r3, #2
 80106a8:	2b07      	cmp	r3, #7
 80106aa:	f200 8337 	bhi.w	8010d1c <tcp_process+0x7a0>
 80106ae:	a201      	add	r2, pc, #4	@ (adr r2, 80106b4 <tcp_process+0x138>)
 80106b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106b4:	080106d5 	.word	0x080106d5
 80106b8:	08010905 	.word	0x08010905
 80106bc:	08010a7d 	.word	0x08010a7d
 80106c0:	08010aa7 	.word	0x08010aa7
 80106c4:	08010bcb 	.word	0x08010bcb
 80106c8:	08010a7d 	.word	0x08010a7d
 80106cc:	08010c57 	.word	0x08010c57
 80106d0:	08010ce7 	.word	0x08010ce7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80106d4:	4b4f      	ldr	r3, [pc, #316]	@ (8010814 <tcp_process+0x298>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	f003 0310 	and.w	r3, r3, #16
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f000 80e4 	beq.w	80108aa <tcp_process+0x32e>
 80106e2:	4b4c      	ldr	r3, [pc, #304]	@ (8010814 <tcp_process+0x298>)
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	f003 0302 	and.w	r3, r3, #2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f000 80dd 	beq.w	80108aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106f4:	1c5a      	adds	r2, r3, #1
 80106f6:	4b48      	ldr	r3, [pc, #288]	@ (8010818 <tcp_process+0x29c>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	f040 80d5 	bne.w	80108aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010700:	4b46      	ldr	r3, [pc, #280]	@ (801081c <tcp_process+0x2a0>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010712:	4b41      	ldr	r3, [pc, #260]	@ (8010818 <tcp_process+0x29c>)
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801071a:	4b44      	ldr	r3, [pc, #272]	@ (801082c <tcp_process+0x2b0>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	89db      	ldrh	r3, [r3, #14]
 8010720:	b29a      	uxth	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010734:	4b39      	ldr	r3, [pc, #228]	@ (801081c <tcp_process+0x2a0>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	1e5a      	subs	r2, r3, #1
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2204      	movs	r2, #4
 8010742:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	3304      	adds	r3, #4
 801074c:	4618      	mov	r0, r3
 801074e:	f006 fcd5 	bl	80170fc <ip4_route>
 8010752:	4601      	mov	r1, r0
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	3304      	adds	r3, #4
 8010758:	461a      	mov	r2, r3
 801075a:	4620      	mov	r0, r4
 801075c:	f7ff f88c 	bl	800f878 <tcp_eff_send_mss_netif>
 8010760:	4603      	mov	r3, r0
 8010762:	461a      	mov	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801076c:	009a      	lsls	r2, r3, #2
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010778:	428b      	cmp	r3, r1
 801077a:	bf38      	it	cc
 801077c:	460b      	movcc	r3, r1
 801077e:	429a      	cmp	r2, r3
 8010780:	d204      	bcs.n	801078c <tcp_process+0x210>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010786:	009b      	lsls	r3, r3, #2
 8010788:	b29b      	uxth	r3, r3
 801078a:	e00d      	b.n	80107a8 <tcp_process+0x22c>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010796:	4293      	cmp	r3, r2
 8010798:	d904      	bls.n	80107a4 <tcp_process+0x228>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	e001      	b.n	80107a8 <tcp_process+0x22c>
 80107a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d106      	bne.n	80107c6 <tcp_process+0x24a>
 80107b8:	4b13      	ldr	r3, [pc, #76]	@ (8010808 <tcp_process+0x28c>)
 80107ba:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80107be:	491c      	ldr	r1, [pc, #112]	@ (8010830 <tcp_process+0x2b4>)
 80107c0:	4813      	ldr	r0, [pc, #76]	@ (8010810 <tcp_process+0x294>)
 80107c2:	f008 f8bb 	bl	801893c <iprintf>
        --pcb->snd_queuelen;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80107cc:	3b01      	subs	r3, #1
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d12a      	bne.n	8010838 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d106      	bne.n	80107fc <tcp_process+0x280>
 80107ee:	4b06      	ldr	r3, [pc, #24]	@ (8010808 <tcp_process+0x28c>)
 80107f0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80107f4:	490f      	ldr	r1, [pc, #60]	@ (8010834 <tcp_process+0x2b8>)
 80107f6:	4806      	ldr	r0, [pc, #24]	@ (8010810 <tcp_process+0x294>)
 80107f8:	f008 f8a0 	bl	801893c <iprintf>
          pcb->unsent = rseg->next;
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010804:	e01c      	b.n	8010840 <tcp_process+0x2c4>
 8010806:	bf00      	nop
 8010808:	0801ab10 	.word	0x0801ab10
 801080c:	0801ad48 	.word	0x0801ad48
 8010810:	0801ab5c 	.word	0x0801ab5c
 8010814:	2400e9a8 	.word	0x2400e9a8
 8010818:	2400e9a0 	.word	0x2400e9a0
 801081c:	2400e99c 	.word	0x2400e99c
 8010820:	0801ad64 	.word	0x0801ad64
 8010824:	2400e9a9 	.word	0x2400e9a9
 8010828:	2400e964 	.word	0x2400e964
 801082c:	2400e98c 	.word	0x2400e98c
 8010830:	0801ad84 	.word	0x0801ad84
 8010834:	0801ad9c 	.word	0x0801ad9c
        } else {
          pcb->unacked = rseg->next;
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010840:	69f8      	ldr	r0, [r7, #28]
 8010842:	f7fe fd22 	bl	800f28a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801084a:	2b00      	cmp	r3, #0
 801084c:	d104      	bne.n	8010858 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010854:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010856:	e006      	b.n	8010866 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2200      	movs	r2, #0
 8010862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801086c:	2b00      	cmp	r3, #0
 801086e:	d00a      	beq.n	8010886 <tcp_process+0x30a>
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	6910      	ldr	r0, [r2, #16]
 801087a:	2200      	movs	r2, #0
 801087c:	6879      	ldr	r1, [r7, #4]
 801087e:	4798      	blx	r3
 8010880:	4603      	mov	r3, r0
 8010882:	76bb      	strb	r3, [r7, #26]
 8010884:	e001      	b.n	801088a <tcp_process+0x30e>
 8010886:	2300      	movs	r3, #0
 8010888:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801088a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801088e:	f113 0f0d 	cmn.w	r3, #13
 8010892:	d102      	bne.n	801089a <tcp_process+0x31e>
          return ERR_ABRT;
 8010894:	f06f 030c 	mvn.w	r3, #12
 8010898:	e250      	b.n	8010d3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	8b5b      	ldrh	r3, [r3, #26]
 801089e:	f043 0302 	orr.w	r3, r3, #2
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80108a8:	e23a      	b.n	8010d20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80108aa:	4b98      	ldr	r3, [pc, #608]	@ (8010b0c <tcp_process+0x590>)
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	f003 0310 	and.w	r3, r3, #16
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f000 8234 	beq.w	8010d20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108b8:	4b95      	ldr	r3, [pc, #596]	@ (8010b10 <tcp_process+0x594>)
 80108ba:	6819      	ldr	r1, [r3, #0]
 80108bc:	4b95      	ldr	r3, [pc, #596]	@ (8010b14 <tcp_process+0x598>)
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	461a      	mov	r2, r3
 80108c2:	4b95      	ldr	r3, [pc, #596]	@ (8010b18 <tcp_process+0x59c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108c8:	4b94      	ldr	r3, [pc, #592]	@ (8010b1c <tcp_process+0x5a0>)
 80108ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108cc:	885b      	ldrh	r3, [r3, #2]
 80108ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108d0:	4a92      	ldr	r2, [pc, #584]	@ (8010b1c <tcp_process+0x5a0>)
 80108d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108d4:	8812      	ldrh	r2, [r2, #0]
 80108d6:	b292      	uxth	r2, r2
 80108d8:	9202      	str	r2, [sp, #8]
 80108da:	9301      	str	r3, [sp, #4]
 80108dc:	4b90      	ldr	r3, [pc, #576]	@ (8010b20 <tcp_process+0x5a4>)
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	4b90      	ldr	r3, [pc, #576]	@ (8010b24 <tcp_process+0x5a8>)
 80108e2:	4602      	mov	r2, r0
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f002 fc7f 	bl	80131e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80108f0:	2b05      	cmp	r3, #5
 80108f2:	f200 8215 	bhi.w	8010d20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f002 fa4b 	bl	8012d98 <tcp_rexmit_rto>
      break;
 8010902:	e20d      	b.n	8010d20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010904:	4b81      	ldr	r3, [pc, #516]	@ (8010b0c <tcp_process+0x590>)
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	f003 0310 	and.w	r3, r3, #16
 801090c:	2b00      	cmp	r3, #0
 801090e:	f000 80a1 	beq.w	8010a54 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010912:	4b7f      	ldr	r3, [pc, #508]	@ (8010b10 <tcp_process+0x594>)
 8010914:	681a      	ldr	r2, [r3, #0]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	3b01      	subs	r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	db7e      	blt.n	8010a20 <tcp_process+0x4a4>
 8010922:	4b7b      	ldr	r3, [pc, #492]	@ (8010b10 <tcp_process+0x594>)
 8010924:	681a      	ldr	r2, [r3, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	2b00      	cmp	r3, #0
 801092e:	dc77      	bgt.n	8010a20 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2204      	movs	r2, #4
 8010934:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801093a:	2b00      	cmp	r3, #0
 801093c:	d102      	bne.n	8010944 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801093e:	23fa      	movs	r3, #250	@ 0xfa
 8010940:	76bb      	strb	r3, [r7, #26]
 8010942:	e01d      	b.n	8010980 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010948:	699b      	ldr	r3, [r3, #24]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d106      	bne.n	801095c <tcp_process+0x3e0>
 801094e:	4b76      	ldr	r3, [pc, #472]	@ (8010b28 <tcp_process+0x5ac>)
 8010950:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010954:	4975      	ldr	r1, [pc, #468]	@ (8010b2c <tcp_process+0x5b0>)
 8010956:	4876      	ldr	r0, [pc, #472]	@ (8010b30 <tcp_process+0x5b4>)
 8010958:	f007 fff0 	bl	801893c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010960:	699b      	ldr	r3, [r3, #24]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00a      	beq.n	801097c <tcp_process+0x400>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	6910      	ldr	r0, [r2, #16]
 8010970:	2200      	movs	r2, #0
 8010972:	6879      	ldr	r1, [r7, #4]
 8010974:	4798      	blx	r3
 8010976:	4603      	mov	r3, r0
 8010978:	76bb      	strb	r3, [r7, #26]
 801097a:	e001      	b.n	8010980 <tcp_process+0x404>
 801097c:	23f0      	movs	r3, #240	@ 0xf0
 801097e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010980:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00a      	beq.n	801099e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010988:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801098c:	f113 0f0d 	cmn.w	r3, #13
 8010990:	d002      	beq.n	8010998 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7fd ff8c 	bl	800e8b0 <tcp_abort>
            }
            return ERR_ABRT;
 8010998:	f06f 030c 	mvn.w	r3, #12
 801099c:	e1ce      	b.n	8010d3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 fae0 	bl	8010f64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80109a4:	4b63      	ldr	r3, [pc, #396]	@ (8010b34 <tcp_process+0x5b8>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d005      	beq.n	80109b8 <tcp_process+0x43c>
            recv_acked--;
 80109ac:	4b61      	ldr	r3, [pc, #388]	@ (8010b34 <tcp_process+0x5b8>)
 80109ae:	881b      	ldrh	r3, [r3, #0]
 80109b0:	3b01      	subs	r3, #1
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	4b5f      	ldr	r3, [pc, #380]	@ (8010b34 <tcp_process+0x5b8>)
 80109b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109bc:	009a      	lsls	r2, r3, #2
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80109c8:	428b      	cmp	r3, r1
 80109ca:	bf38      	it	cc
 80109cc:	460b      	movcc	r3, r1
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d204      	bcs.n	80109dc <tcp_process+0x460>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	b29b      	uxth	r3, r3
 80109da:	e00d      	b.n	80109f8 <tcp_process+0x47c>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d904      	bls.n	80109f4 <tcp_process+0x478>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109ee:	005b      	lsls	r3, r3, #1
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	e001      	b.n	80109f8 <tcp_process+0x47c>
 80109f4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80109fe:	4b4e      	ldr	r3, [pc, #312]	@ (8010b38 <tcp_process+0x5bc>)
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	f003 0320 	and.w	r3, r3, #32
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d037      	beq.n	8010a7a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	8b5b      	ldrh	r3, [r3, #26]
 8010a0e:	f043 0302 	orr.w	r3, r3, #2
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2207      	movs	r2, #7
 8010a1c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a1e:	e02c      	b.n	8010a7a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a20:	4b3b      	ldr	r3, [pc, #236]	@ (8010b10 <tcp_process+0x594>)
 8010a22:	6819      	ldr	r1, [r3, #0]
 8010a24:	4b3b      	ldr	r3, [pc, #236]	@ (8010b14 <tcp_process+0x598>)
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8010b18 <tcp_process+0x59c>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a30:	4b3a      	ldr	r3, [pc, #232]	@ (8010b1c <tcp_process+0x5a0>)
 8010a32:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a34:	885b      	ldrh	r3, [r3, #2]
 8010a36:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a38:	4a38      	ldr	r2, [pc, #224]	@ (8010b1c <tcp_process+0x5a0>)
 8010a3a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a3c:	8812      	ldrh	r2, [r2, #0]
 8010a3e:	b292      	uxth	r2, r2
 8010a40:	9202      	str	r2, [sp, #8]
 8010a42:	9301      	str	r3, [sp, #4]
 8010a44:	4b36      	ldr	r3, [pc, #216]	@ (8010b20 <tcp_process+0x5a4>)
 8010a46:	9300      	str	r3, [sp, #0]
 8010a48:	4b36      	ldr	r3, [pc, #216]	@ (8010b24 <tcp_process+0x5a8>)
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f002 fbcb 	bl	80131e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010a52:	e167      	b.n	8010d24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010a54:	4b2d      	ldr	r3, [pc, #180]	@ (8010b0c <tcp_process+0x590>)
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	f003 0302 	and.w	r3, r3, #2
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8161 	beq.w	8010d24 <tcp_process+0x7a8>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a66:	1e5a      	subs	r2, r3, #1
 8010a68:	4b2b      	ldr	r3, [pc, #172]	@ (8010b18 <tcp_process+0x59c>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	f040 8159 	bne.w	8010d24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f002 f9b2 	bl	8012ddc <tcp_rexmit>
      break;
 8010a78:	e154      	b.n	8010d24 <tcp_process+0x7a8>
 8010a7a:	e153      	b.n	8010d24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fa71 	bl	8010f64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010a82:	4b2d      	ldr	r3, [pc, #180]	@ (8010b38 <tcp_process+0x5bc>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	f003 0320 	and.w	r3, r3, #32
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 814c 	beq.w	8010d28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	8b5b      	ldrh	r3, [r3, #26]
 8010a94:	f043 0302 	orr.w	r3, r3, #2
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2207      	movs	r2, #7
 8010aa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010aa4:	e140      	b.n	8010d28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f000 fa5c 	bl	8010f64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010aac:	4b22      	ldr	r3, [pc, #136]	@ (8010b38 <tcp_process+0x5bc>)
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	f003 0320 	and.w	r3, r3, #32
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d071      	beq.n	8010b9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ab8:	4b14      	ldr	r3, [pc, #80]	@ (8010b0c <tcp_process+0x590>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	f003 0310 	and.w	r3, r3, #16
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d060      	beq.n	8010b86 <tcp_process+0x60a>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ac8:	4b11      	ldr	r3, [pc, #68]	@ (8010b10 <tcp_process+0x594>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d15a      	bne.n	8010b86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d156      	bne.n	8010b86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	8b5b      	ldrh	r3, [r3, #26]
 8010adc:	f043 0302 	orr.w	r3, r3, #2
 8010ae0:	b29a      	uxth	r2, r3
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7fe fdbc 	bl	800f664 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010aec:	4b13      	ldr	r3, [pc, #76]	@ (8010b3c <tcp_process+0x5c0>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d105      	bne.n	8010b02 <tcp_process+0x586>
 8010af6:	4b11      	ldr	r3, [pc, #68]	@ (8010b3c <tcp_process+0x5c0>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	4a0f      	ldr	r2, [pc, #60]	@ (8010b3c <tcp_process+0x5c0>)
 8010afe:	6013      	str	r3, [r2, #0]
 8010b00:	e02e      	b.n	8010b60 <tcp_process+0x5e4>
 8010b02:	4b0e      	ldr	r3, [pc, #56]	@ (8010b3c <tcp_process+0x5c0>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	617b      	str	r3, [r7, #20]
 8010b08:	e027      	b.n	8010b5a <tcp_process+0x5de>
 8010b0a:	bf00      	nop
 8010b0c:	2400e9a8 	.word	0x2400e9a8
 8010b10:	2400e9a0 	.word	0x2400e9a0
 8010b14:	2400e9a6 	.word	0x2400e9a6
 8010b18:	2400e99c 	.word	0x2400e99c
 8010b1c:	2400e98c 	.word	0x2400e98c
 8010b20:	2400b854 	.word	0x2400b854
 8010b24:	2400b858 	.word	0x2400b858
 8010b28:	0801ab10 	.word	0x0801ab10
 8010b2c:	0801adb0 	.word	0x0801adb0
 8010b30:	0801ab5c 	.word	0x0801ab5c
 8010b34:	2400e9a4 	.word	0x2400e9a4
 8010b38:	2400e9a9 	.word	0x2400e9a9
 8010b3c:	2400e970 	.word	0x2400e970
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d104      	bne.n	8010b54 <tcp_process+0x5d8>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	68da      	ldr	r2, [r3, #12]
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	60da      	str	r2, [r3, #12]
 8010b52:	e005      	b.n	8010b60 <tcp_process+0x5e4>
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	617b      	str	r3, [r7, #20]
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d1ef      	bne.n	8010b40 <tcp_process+0x5c4>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	60da      	str	r2, [r3, #12]
 8010b66:	4b77      	ldr	r3, [pc, #476]	@ (8010d44 <tcp_process+0x7c8>)
 8010b68:	2201      	movs	r2, #1
 8010b6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	220a      	movs	r2, #10
 8010b70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010b72:	4b75      	ldr	r3, [pc, #468]	@ (8010d48 <tcp_process+0x7cc>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	60da      	str	r2, [r3, #12]
 8010b7a:	4a73      	ldr	r2, [pc, #460]	@ (8010d48 <tcp_process+0x7cc>)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6013      	str	r3, [r2, #0]
 8010b80:	f002 fcf4 	bl	801356c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010b84:	e0d2      	b.n	8010d2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	8b5b      	ldrh	r3, [r3, #26]
 8010b8a:	f043 0302 	orr.w	r3, r3, #2
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2208      	movs	r2, #8
 8010b98:	751a      	strb	r2, [r3, #20]
      break;
 8010b9a:	e0c7      	b.n	8010d2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8010d4c <tcp_process+0x7d0>)
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	f003 0310 	and.w	r3, r3, #16
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	f000 80c1 	beq.w	8010d2c <tcp_process+0x7b0>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010bae:	4b68      	ldr	r3, [pc, #416]	@ (8010d50 <tcp_process+0x7d4>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	f040 80ba 	bne.w	8010d2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f040 80b5 	bne.w	8010d2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2206      	movs	r2, #6
 8010bc6:	751a      	strb	r2, [r3, #20]
      break;
 8010bc8:	e0b0      	b.n	8010d2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f9ca 	bl	8010f64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010bd0:	4b60      	ldr	r3, [pc, #384]	@ (8010d54 <tcp_process+0x7d8>)
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	f003 0320 	and.w	r3, r3, #32
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f000 80a9 	beq.w	8010d30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	8b5b      	ldrh	r3, [r3, #26]
 8010be2:	f043 0302 	orr.w	r3, r3, #2
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7fe fd39 	bl	800f664 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010bf2:	4b59      	ldr	r3, [pc, #356]	@ (8010d58 <tcp_process+0x7dc>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d105      	bne.n	8010c08 <tcp_process+0x68c>
 8010bfc:	4b56      	ldr	r3, [pc, #344]	@ (8010d58 <tcp_process+0x7dc>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	4a55      	ldr	r2, [pc, #340]	@ (8010d58 <tcp_process+0x7dc>)
 8010c04:	6013      	str	r3, [r2, #0]
 8010c06:	e013      	b.n	8010c30 <tcp_process+0x6b4>
 8010c08:	4b53      	ldr	r3, [pc, #332]	@ (8010d58 <tcp_process+0x7dc>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	613b      	str	r3, [r7, #16]
 8010c0e:	e00c      	b.n	8010c2a <tcp_process+0x6ae>
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	68db      	ldr	r3, [r3, #12]
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d104      	bne.n	8010c24 <tcp_process+0x6a8>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	68da      	ldr	r2, [r3, #12]
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	60da      	str	r2, [r3, #12]
 8010c22:	e005      	b.n	8010c30 <tcp_process+0x6b4>
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	613b      	str	r3, [r7, #16]
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d1ef      	bne.n	8010c10 <tcp_process+0x694>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	60da      	str	r2, [r3, #12]
 8010c36:	4b43      	ldr	r3, [pc, #268]	@ (8010d44 <tcp_process+0x7c8>)
 8010c38:	2201      	movs	r2, #1
 8010c3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	220a      	movs	r2, #10
 8010c40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c42:	4b41      	ldr	r3, [pc, #260]	@ (8010d48 <tcp_process+0x7cc>)
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	60da      	str	r2, [r3, #12]
 8010c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8010d48 <tcp_process+0x7cc>)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6013      	str	r3, [r2, #0]
 8010c50:	f002 fc8c 	bl	801356c <tcp_timer_needed>
      }
      break;
 8010c54:	e06c      	b.n	8010d30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f984 	bl	8010f64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8010d4c <tcp_process+0x7d0>)
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	f003 0310 	and.w	r3, r3, #16
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d065      	beq.n	8010d34 <tcp_process+0x7b8>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010c6c:	4b38      	ldr	r3, [pc, #224]	@ (8010d50 <tcp_process+0x7d4>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d15f      	bne.n	8010d34 <tcp_process+0x7b8>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d15b      	bne.n	8010d34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7fe fcf1 	bl	800f664 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c82:	4b35      	ldr	r3, [pc, #212]	@ (8010d58 <tcp_process+0x7dc>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d105      	bne.n	8010c98 <tcp_process+0x71c>
 8010c8c:	4b32      	ldr	r3, [pc, #200]	@ (8010d58 <tcp_process+0x7dc>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	4a31      	ldr	r2, [pc, #196]	@ (8010d58 <tcp_process+0x7dc>)
 8010c94:	6013      	str	r3, [r2, #0]
 8010c96:	e013      	b.n	8010cc0 <tcp_process+0x744>
 8010c98:	4b2f      	ldr	r3, [pc, #188]	@ (8010d58 <tcp_process+0x7dc>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	60fb      	str	r3, [r7, #12]
 8010c9e:	e00c      	b.n	8010cba <tcp_process+0x73e>
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d104      	bne.n	8010cb4 <tcp_process+0x738>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	68da      	ldr	r2, [r3, #12]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	60da      	str	r2, [r3, #12]
 8010cb2:	e005      	b.n	8010cc0 <tcp_process+0x744>
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	60fb      	str	r3, [r7, #12]
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1ef      	bne.n	8010ca0 <tcp_process+0x724>
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	60da      	str	r2, [r3, #12]
 8010cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8010d44 <tcp_process+0x7c8>)
 8010cc8:	2201      	movs	r2, #1
 8010cca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	220a      	movs	r2, #10
 8010cd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8010d48 <tcp_process+0x7cc>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	60da      	str	r2, [r3, #12]
 8010cda:	4a1b      	ldr	r2, [pc, #108]	@ (8010d48 <tcp_process+0x7cc>)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6013      	str	r3, [r2, #0]
 8010ce0:	f002 fc44 	bl	801356c <tcp_timer_needed>
      }
      break;
 8010ce4:	e026      	b.n	8010d34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 f93c 	bl	8010f64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010cec:	4b17      	ldr	r3, [pc, #92]	@ (8010d4c <tcp_process+0x7d0>)
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	f003 0310 	and.w	r3, r3, #16
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d01f      	beq.n	8010d38 <tcp_process+0x7bc>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010cfc:	4b14      	ldr	r3, [pc, #80]	@ (8010d50 <tcp_process+0x7d4>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d119      	bne.n	8010d38 <tcp_process+0x7bc>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d115      	bne.n	8010d38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d0c:	4b11      	ldr	r3, [pc, #68]	@ (8010d54 <tcp_process+0x7d8>)
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	f043 0310 	orr.w	r3, r3, #16
 8010d14:	b2da      	uxtb	r2, r3
 8010d16:	4b0f      	ldr	r3, [pc, #60]	@ (8010d54 <tcp_process+0x7d8>)
 8010d18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010d1a:	e00d      	b.n	8010d38 <tcp_process+0x7bc>
    default:
      break;
 8010d1c:	bf00      	nop
 8010d1e:	e00c      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d20:	bf00      	nop
 8010d22:	e00a      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d24:	bf00      	nop
 8010d26:	e008      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d28:	bf00      	nop
 8010d2a:	e006      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d2c:	bf00      	nop
 8010d2e:	e004      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d30:	bf00      	nop
 8010d32:	e002      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d34:	bf00      	nop
 8010d36:	e000      	b.n	8010d3a <tcp_process+0x7be>
      break;
 8010d38:	bf00      	nop
  }
  return ERR_OK;
 8010d3a:	2300      	movs	r3, #0
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3724      	adds	r7, #36	@ 0x24
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd90      	pop	{r4, r7, pc}
 8010d44:	2400e978 	.word	0x2400e978
 8010d48:	2400e974 	.word	0x2400e974
 8010d4c:	2400e9a8 	.word	0x2400e9a8
 8010d50:	2400e9a0 	.word	0x2400e9a0
 8010d54:	2400e9a9 	.word	0x2400e9a9
 8010d58:	2400e970 	.word	0x2400e970

08010d5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010d5c:	b590      	push	{r4, r7, lr}
 8010d5e:	b085      	sub	sp, #20
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d106      	bne.n	8010d7a <tcp_oos_insert_segment+0x1e>
 8010d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8010e5c <tcp_oos_insert_segment+0x100>)
 8010d6e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010d72:	493b      	ldr	r1, [pc, #236]	@ (8010e60 <tcp_oos_insert_segment+0x104>)
 8010d74:	483b      	ldr	r0, [pc, #236]	@ (8010e64 <tcp_oos_insert_segment+0x108>)
 8010d76:	f007 fde1 	bl	801893c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	899b      	ldrh	r3, [r3, #12]
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fb fb3a 	bl	800c3fc <lwip_htons>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	f003 0301 	and.w	r3, r3, #1
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d028      	beq.n	8010de6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d94:	6838      	ldr	r0, [r7, #0]
 8010d96:	f7fe fa63 	bl	800f260 <tcp_segs_free>
    next = NULL;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	603b      	str	r3, [r7, #0]
 8010d9e:	e056      	b.n	8010e4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	899b      	ldrh	r3, [r3, #12]
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fb fb27 	bl	800c3fc <lwip_htons>
 8010dae:	4603      	mov	r3, r0
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	f003 0301 	and.w	r3, r3, #1
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00d      	beq.n	8010dd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	899b      	ldrh	r3, [r3, #12]
 8010dc0:	b29c      	uxth	r4, r3
 8010dc2:	2001      	movs	r0, #1
 8010dc4:	f7fb fb1a 	bl	800c3fc <lwip_htons>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	461a      	mov	r2, r3
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	4322      	orrs	r2, r4
 8010dd2:	b292      	uxth	r2, r2
 8010dd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010de0:	68f8      	ldr	r0, [r7, #12]
 8010de2:	f7fe fa52 	bl	800f28a <tcp_seg_free>
    while (next &&
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d00e      	beq.n	8010e0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	891b      	ldrh	r3, [r3, #8]
 8010df0:	461a      	mov	r2, r3
 8010df2:	4b1d      	ldr	r3, [pc, #116]	@ (8010e68 <tcp_oos_insert_segment+0x10c>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	441a      	add	r2, r3
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	8909      	ldrh	r1, [r1, #8]
 8010e02:	440b      	add	r3, r1
 8010e04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	daca      	bge.n	8010da0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d01e      	beq.n	8010e4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	891b      	ldrh	r3, [r3, #8]
 8010e14:	461a      	mov	r2, r3
 8010e16:	4b14      	ldr	r3, [pc, #80]	@ (8010e68 <tcp_oos_insert_segment+0x10c>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	441a      	add	r2, r3
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	dd12      	ble.n	8010e4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	4b0d      	ldr	r3, [pc, #52]	@ (8010e68 <tcp_oos_insert_segment+0x10c>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	685a      	ldr	r2, [r3, #4]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	891b      	ldrh	r3, [r3, #8]
 8010e46:	4619      	mov	r1, r3
 8010e48:	4610      	mov	r0, r2
 8010e4a:	f7fc fe07 	bl	800da5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	683a      	ldr	r2, [r7, #0]
 8010e52:	601a      	str	r2, [r3, #0]
}
 8010e54:	bf00      	nop
 8010e56:	3714      	adds	r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd90      	pop	{r4, r7, pc}
 8010e5c:	0801ab10 	.word	0x0801ab10
 8010e60:	0801add0 	.word	0x0801add0
 8010e64:	0801ab5c 	.word	0x0801ab5c
 8010e68:	2400e99c 	.word	0x2400e99c

08010e6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010e6c:	b5b0      	push	{r4, r5, r7, lr}
 8010e6e:	b086      	sub	sp, #24
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	607a      	str	r2, [r7, #4]
 8010e78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010e7a:	e03e      	b.n	8010efa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fc fffa 	bl	800de84 <pbuf_clen>
 8010e90:	4603      	mov	r3, r0
 8010e92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010e9a:	8a7a      	ldrh	r2, [r7, #18]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d906      	bls.n	8010eae <tcp_free_acked_segments+0x42>
 8010ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8010f4c <tcp_free_acked_segments+0xe0>)
 8010ea2:	f240 4257 	movw	r2, #1111	@ 0x457
 8010ea6:	492a      	ldr	r1, [pc, #168]	@ (8010f50 <tcp_free_acked_segments+0xe4>)
 8010ea8:	482a      	ldr	r0, [pc, #168]	@ (8010f54 <tcp_free_acked_segments+0xe8>)
 8010eaa:	f007 fd47 	bl	801893c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010eb4:	8a7b      	ldrh	r3, [r7, #18]
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	891a      	ldrh	r2, [r3, #8]
 8010ec4:	4b24      	ldr	r3, [pc, #144]	@ (8010f58 <tcp_free_acked_segments+0xec>)
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	4413      	add	r3, r2
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	4b22      	ldr	r3, [pc, #136]	@ (8010f58 <tcp_free_acked_segments+0xec>)
 8010ece:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ed0:	6978      	ldr	r0, [r7, #20]
 8010ed2:	f7fe f9da 	bl	800f28a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00c      	beq.n	8010efa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d109      	bne.n	8010efa <tcp_free_acked_segments+0x8e>
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d106      	bne.n	8010efa <tcp_free_acked_segments+0x8e>
 8010eec:	4b17      	ldr	r3, [pc, #92]	@ (8010f4c <tcp_free_acked_segments+0xe0>)
 8010eee:	f240 4261 	movw	r2, #1121	@ 0x461
 8010ef2:	491a      	ldr	r1, [pc, #104]	@ (8010f5c <tcp_free_acked_segments+0xf0>)
 8010ef4:	4817      	ldr	r0, [pc, #92]	@ (8010f54 <tcp_free_acked_segments+0xe8>)
 8010ef6:	f007 fd21 	bl	801893c <iprintf>
  while (seg_list != NULL &&
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d020      	beq.n	8010f42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fb fa8d 	bl	800c426 <lwip_htonl>
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	891b      	ldrh	r3, [r3, #8]
 8010f12:	461d      	mov	r5, r3
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	899b      	ldrh	r3, [r3, #12]
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7fb fa6d 	bl	800c3fc <lwip_htons>
 8010f22:	4603      	mov	r3, r0
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	f003 0303 	and.w	r3, r3, #3
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d001      	beq.n	8010f32 <tcp_free_acked_segments+0xc6>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e000      	b.n	8010f34 <tcp_free_acked_segments+0xc8>
 8010f32:	2300      	movs	r3, #0
 8010f34:	442b      	add	r3, r5
 8010f36:	18e2      	adds	r2, r4, r3
 8010f38:	4b09      	ldr	r3, [pc, #36]	@ (8010f60 <tcp_free_acked_segments+0xf4>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	dd9c      	ble.n	8010e7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010f42:	68bb      	ldr	r3, [r7, #8]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3718      	adds	r7, #24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010f4c:	0801ab10 	.word	0x0801ab10
 8010f50:	0801adf8 	.word	0x0801adf8
 8010f54:	0801ab5c 	.word	0x0801ab5c
 8010f58:	2400e9a4 	.word	0x2400e9a4
 8010f5c:	0801ae20 	.word	0x0801ae20
 8010f60:	2400e9a0 	.word	0x2400e9a0

08010f64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010f64:	b5b0      	push	{r4, r5, r7, lr}
 8010f66:	b094      	sub	sp, #80	@ 0x50
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d106      	bne.n	8010f84 <tcp_receive+0x20>
 8010f76:	4b91      	ldr	r3, [pc, #580]	@ (80111bc <tcp_receive+0x258>)
 8010f78:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010f7c:	4990      	ldr	r1, [pc, #576]	@ (80111c0 <tcp_receive+0x25c>)
 8010f7e:	4891      	ldr	r0, [pc, #580]	@ (80111c4 <tcp_receive+0x260>)
 8010f80:	f007 fcdc 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	7d1b      	ldrb	r3, [r3, #20]
 8010f88:	2b03      	cmp	r3, #3
 8010f8a:	d806      	bhi.n	8010f9a <tcp_receive+0x36>
 8010f8c:	4b8b      	ldr	r3, [pc, #556]	@ (80111bc <tcp_receive+0x258>)
 8010f8e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010f92:	498d      	ldr	r1, [pc, #564]	@ (80111c8 <tcp_receive+0x264>)
 8010f94:	488b      	ldr	r0, [pc, #556]	@ (80111c4 <tcp_receive+0x260>)
 8010f96:	f007 fcd1 	bl	801893c <iprintf>

  if (flags & TCP_ACK) {
 8010f9a:	4b8c      	ldr	r3, [pc, #560]	@ (80111cc <tcp_receive+0x268>)
 8010f9c:	781b      	ldrb	r3, [r3, #0]
 8010f9e:	f003 0310 	and.w	r3, r3, #16
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	f000 8264 	beq.w	8011470 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010fae:	461a      	mov	r2, r3
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fb4:	4413      	add	r3, r2
 8010fb6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010fbc:	4b84      	ldr	r3, [pc, #528]	@ (80111d0 <tcp_receive+0x26c>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	1ad3      	subs	r3, r2, r3
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	db1b      	blt.n	8010ffe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010fca:	4b81      	ldr	r3, [pc, #516]	@ (80111d0 <tcp_receive+0x26c>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d106      	bne.n	8010fe0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80111d4 <tcp_receive+0x270>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	db0e      	blt.n	8010ffe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010fe4:	4b7b      	ldr	r3, [pc, #492]	@ (80111d4 <tcp_receive+0x270>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d125      	bne.n	8011038 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fec:	4b7a      	ldr	r3, [pc, #488]	@ (80111d8 <tcp_receive+0x274>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	89db      	ldrh	r3, [r3, #14]
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d91c      	bls.n	8011038 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010ffe:	4b76      	ldr	r3, [pc, #472]	@ (80111d8 <tcp_receive+0x274>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	89db      	ldrh	r3, [r3, #14]
 8011004:	b29a      	uxth	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011018:	429a      	cmp	r2, r3
 801101a:	d205      	bcs.n	8011028 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8011028:	4b69      	ldr	r3, [pc, #420]	@ (80111d0 <tcp_receive+0x26c>)
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011030:	4b68      	ldr	r3, [pc, #416]	@ (80111d4 <tcp_receive+0x270>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011038:	4b66      	ldr	r3, [pc, #408]	@ (80111d4 <tcp_receive+0x270>)
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	2b00      	cmp	r3, #0
 8011044:	dc58      	bgt.n	80110f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011046:	4b65      	ldr	r3, [pc, #404]	@ (80111dc <tcp_receive+0x278>)
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d14b      	bne.n	80110e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8011058:	4413      	add	r3, r2
 801105a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801105c:	429a      	cmp	r2, r3
 801105e:	d142      	bne.n	80110e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011066:	2b00      	cmp	r3, #0
 8011068:	db3d      	blt.n	80110e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801106e:	4b59      	ldr	r3, [pc, #356]	@ (80111d4 <tcp_receive+0x270>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	429a      	cmp	r2, r3
 8011074:	d137      	bne.n	80110e6 <tcp_receive+0x182>
              found_dupack = 1;
 8011076:	2301      	movs	r3, #1
 8011078:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011080:	2bff      	cmp	r3, #255	@ 0xff
 8011082:	d007      	beq.n	8011094 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801108a:	3301      	adds	r3, #1
 801108c:	b2da      	uxtb	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801109a:	2b03      	cmp	r3, #3
 801109c:	d91b      	bls.n	80110d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110a8:	4413      	add	r3, r2
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d30a      	bcc.n	80110cc <tcp_receive+0x168>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110c0:	4413      	add	r3, r2
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80110ca:	e004      	b.n	80110d6 <tcp_receive+0x172>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80110d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80110dc:	2b02      	cmp	r3, #2
 80110de:	d902      	bls.n	80110e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f001 fee7 	bl	8012eb4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80110e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f040 8161 	bne.w	80113b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80110f6:	e15b      	b.n	80113b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110f8:	4b36      	ldr	r3, [pc, #216]	@ (80111d4 <tcp_receive+0x270>)
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	3b01      	subs	r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	f2c0 814e 	blt.w	80113a6 <tcp_receive+0x442>
 801110a:	4b32      	ldr	r3, [pc, #200]	@ (80111d4 <tcp_receive+0x270>)
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	2b00      	cmp	r3, #0
 8011116:	f300 8146 	bgt.w	80113a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	8b5b      	ldrh	r3, [r3, #26]
 801111e:	f003 0304 	and.w	r3, r3, #4
 8011122:	2b00      	cmp	r3, #0
 8011124:	d010      	beq.n	8011148 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	8b5b      	ldrh	r3, [r3, #26]
 801112a:	f023 0304 	bic.w	r3, r3, #4
 801112e:	b29a      	uxth	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011156:	10db      	asrs	r3, r3, #3
 8011158:	b21b      	sxth	r3, r3
 801115a:	b29a      	uxth	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011162:	b29b      	uxth	r3, r3
 8011164:	4413      	add	r3, r2
 8011166:	b29b      	uxth	r3, r3
 8011168:	b21a      	sxth	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011170:	4b18      	ldr	r3, [pc, #96]	@ (80111d4 <tcp_receive+0x270>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	b29a      	uxth	r2, r3
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801117a:	b29b      	uxth	r3, r3
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011188:	4b12      	ldr	r3, [pc, #72]	@ (80111d4 <tcp_receive+0x270>)
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	7d1b      	ldrb	r3, [r3, #20]
 8011194:	2b03      	cmp	r3, #3
 8011196:	f240 8097 	bls.w	80112c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d245      	bcs.n	8011236 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	8b5b      	ldrh	r3, [r3, #26]
 80111ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d014      	beq.n	80111e0 <tcp_receive+0x27c>
 80111b6:	2301      	movs	r3, #1
 80111b8:	e013      	b.n	80111e2 <tcp_receive+0x27e>
 80111ba:	bf00      	nop
 80111bc:	0801ab10 	.word	0x0801ab10
 80111c0:	0801ae40 	.word	0x0801ae40
 80111c4:	0801ab5c 	.word	0x0801ab5c
 80111c8:	0801ae5c 	.word	0x0801ae5c
 80111cc:	2400e9a8 	.word	0x2400e9a8
 80111d0:	2400e99c 	.word	0x2400e99c
 80111d4:	2400e9a0 	.word	0x2400e9a0
 80111d8:	2400e98c 	.word	0x2400e98c
 80111dc:	2400e9a6 	.word	0x2400e9a6
 80111e0:	2302      	movs	r3, #2
 80111e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80111e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80111f0:	fb12 f303 	smulbb	r3, r2, r3
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80111f8:	4293      	cmp	r3, r2
 80111fa:	bf28      	it	cs
 80111fc:	4613      	movcs	r3, r2
 80111fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011206:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011208:	4413      	add	r3, r2
 801120a:	b29a      	uxth	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011212:	429a      	cmp	r2, r3
 8011214:	d309      	bcc.n	801122a <tcp_receive+0x2c6>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801121c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801121e:	4413      	add	r3, r2
 8011220:	b29a      	uxth	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011228:	e04e      	b.n	80112c8 <tcp_receive+0x364>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011230:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011234:	e048      	b.n	80112c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801123c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801123e:	4413      	add	r3, r2
 8011240:	b29a      	uxth	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011248:	429a      	cmp	r2, r3
 801124a:	d309      	bcc.n	8011260 <tcp_receive+0x2fc>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011252:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011254:	4413      	add	r3, r2
 8011256:	b29a      	uxth	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801125e:	e004      	b.n	801126a <tcp_receive+0x306>
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011266:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011276:	429a      	cmp	r2, r3
 8011278:	d326      	bcc.n	80112c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	b29a      	uxth	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801129a:	4413      	add	r3, r2
 801129c:	b29a      	uxth	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d30a      	bcc.n	80112be <tcp_receive+0x35a>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80112b2:	4413      	add	r3, r2
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80112bc:	e004      	b.n	80112c8 <tcp_receive+0x364>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112d0:	4a98      	ldr	r2, [pc, #608]	@ (8011534 <tcp_receive+0x5d0>)
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7ff fdca 	bl	8010e6c <tcp_free_acked_segments>
 80112d8:	4602      	mov	r2, r0
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112e6:	4a94      	ldr	r2, [pc, #592]	@ (8011538 <tcp_receive+0x5d4>)
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff fdbf 	bl	8010e6c <tcp_free_acked_segments>
 80112ee:	4602      	mov	r2, r0
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d104      	bne.n	8011306 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011302:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011304:	e002      	b.n	801130c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011316:	2b00      	cmp	r3, #0
 8011318:	d103      	bne.n	8011322 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011328:	4b84      	ldr	r3, [pc, #528]	@ (801153c <tcp_receive+0x5d8>)
 801132a:	881b      	ldrh	r3, [r3, #0]
 801132c:	4413      	add	r3, r2
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8b5b      	ldrh	r3, [r3, #26]
 801133a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801133e:	2b00      	cmp	r3, #0
 8011340:	d035      	beq.n	80113ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011346:	2b00      	cmp	r3, #0
 8011348:	d118      	bne.n	801137c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00c      	beq.n	801136c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	4618      	mov	r0, r3
 8011360:	f7fb f861 	bl	800c426 <lwip_htonl>
 8011364:	4603      	mov	r3, r0
 8011366:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011368:	2b00      	cmp	r3, #0
 801136a:	dc20      	bgt.n	80113ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	8b5b      	ldrh	r3, [r3, #26]
 8011370:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011374:	b29a      	uxth	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801137a:	e018      	b.n	80113ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	4618      	mov	r0, r3
 801138a:	f7fb f84c 	bl	800c426 <lwip_htonl>
 801138e:	4603      	mov	r3, r0
 8011390:	1ae3      	subs	r3, r4, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	dc0b      	bgt.n	80113ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	8b5b      	ldrh	r3, [r3, #26]
 801139a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801139e:	b29a      	uxth	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113a4:	e003      	b.n	80113ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f001 ff70 	bl	801328c <tcp_send_empty_ack>
 80113ac:	e000      	b.n	80113b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d05b      	beq.n	8011470 <tcp_receive+0x50c>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113bc:	4b60      	ldr	r3, [pc, #384]	@ (8011540 <tcp_receive+0x5dc>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	1ad3      	subs	r3, r2, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	da54      	bge.n	8011470 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80113c6:	4b5f      	ldr	r3, [pc, #380]	@ (8011544 <tcp_receive+0x5e0>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80113da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113e4:	10db      	asrs	r3, r3, #3
 80113e6:	b21b      	sxth	r3, r3
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80113fe:	4413      	add	r3, r2
 8011400:	b29b      	uxth	r3, r3
 8011402:	b21a      	sxth	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011408:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801140c:	2b00      	cmp	r3, #0
 801140e:	da05      	bge.n	801141c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011414:	425b      	negs	r3, r3
 8011416:	b29b      	uxth	r3, r3
 8011418:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801141c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011426:	109b      	asrs	r3, r3, #2
 8011428:	b21b      	sxth	r3, r3
 801142a:	b29b      	uxth	r3, r3
 801142c:	1ad3      	subs	r3, r2, r3
 801142e:	b29b      	uxth	r3, r3
 8011430:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801143a:	b29a      	uxth	r2, r3
 801143c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011440:	4413      	add	r3, r2
 8011442:	b29b      	uxth	r3, r3
 8011444:	b21a      	sxth	r2, r3
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011450:	10db      	asrs	r3, r3, #3
 8011452:	b21b      	sxth	r3, r3
 8011454:	b29a      	uxth	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801145c:	b29b      	uxth	r3, r3
 801145e:	4413      	add	r3, r2
 8011460:	b29b      	uxth	r3, r3
 8011462:	b21a      	sxth	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011470:	4b35      	ldr	r3, [pc, #212]	@ (8011548 <tcp_receive+0x5e4>)
 8011472:	881b      	ldrh	r3, [r3, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 84df 	beq.w	8011e38 <tcp_receive+0xed4>
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	7d1b      	ldrb	r3, [r3, #20]
 801147e:	2b06      	cmp	r3, #6
 8011480:	f200 84da 	bhi.w	8011e38 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011488:	4b30      	ldr	r3, [pc, #192]	@ (801154c <tcp_receive+0x5e8>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	3b01      	subs	r3, #1
 8011490:	2b00      	cmp	r3, #0
 8011492:	f2c0 808f 	blt.w	80115b4 <tcp_receive+0x650>
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801149a:	4b2b      	ldr	r3, [pc, #172]	@ (8011548 <tcp_receive+0x5e4>)
 801149c:	881b      	ldrh	r3, [r3, #0]
 801149e:	4619      	mov	r1, r3
 80114a0:	4b2a      	ldr	r3, [pc, #168]	@ (801154c <tcp_receive+0x5e8>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	440b      	add	r3, r1
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	3301      	adds	r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	f300 8082 	bgt.w	80115b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80114b0:	4b27      	ldr	r3, [pc, #156]	@ (8011550 <tcp_receive+0x5ec>)
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114ba:	4b24      	ldr	r3, [pc, #144]	@ (801154c <tcp_receive+0x5e8>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80114c2:	4b23      	ldr	r3, [pc, #140]	@ (8011550 <tcp_receive+0x5ec>)
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d106      	bne.n	80114d8 <tcp_receive+0x574>
 80114ca:	4b22      	ldr	r3, [pc, #136]	@ (8011554 <tcp_receive+0x5f0>)
 80114cc:	f240 5294 	movw	r2, #1428	@ 0x594
 80114d0:	4921      	ldr	r1, [pc, #132]	@ (8011558 <tcp_receive+0x5f4>)
 80114d2:	4822      	ldr	r0, [pc, #136]	@ (801155c <tcp_receive+0x5f8>)
 80114d4:	f007 fa32 	bl	801893c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80114d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80114de:	4293      	cmp	r3, r2
 80114e0:	d906      	bls.n	80114f0 <tcp_receive+0x58c>
 80114e2:	4b1c      	ldr	r3, [pc, #112]	@ (8011554 <tcp_receive+0x5f0>)
 80114e4:	f240 5295 	movw	r2, #1429	@ 0x595
 80114e8:	491d      	ldr	r1, [pc, #116]	@ (8011560 <tcp_receive+0x5fc>)
 80114ea:	481c      	ldr	r0, [pc, #112]	@ (801155c <tcp_receive+0x5f8>)
 80114ec:	f007 fa26 	bl	801893c <iprintf>
      off = (u16_t)off32;
 80114f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80114f6:	4b16      	ldr	r3, [pc, #88]	@ (8011550 <tcp_receive+0x5ec>)
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	891b      	ldrh	r3, [r3, #8]
 80114fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011500:	429a      	cmp	r2, r3
 8011502:	d906      	bls.n	8011512 <tcp_receive+0x5ae>
 8011504:	4b13      	ldr	r3, [pc, #76]	@ (8011554 <tcp_receive+0x5f0>)
 8011506:	f240 5297 	movw	r2, #1431	@ 0x597
 801150a:	4916      	ldr	r1, [pc, #88]	@ (8011564 <tcp_receive+0x600>)
 801150c:	4813      	ldr	r0, [pc, #76]	@ (801155c <tcp_receive+0x5f8>)
 801150e:	f007 fa15 	bl	801893c <iprintf>
      inseg.len -= off;
 8011512:	4b0f      	ldr	r3, [pc, #60]	@ (8011550 <tcp_receive+0x5ec>)
 8011514:	891a      	ldrh	r2, [r3, #8]
 8011516:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	b29a      	uxth	r2, r3
 801151e:	4b0c      	ldr	r3, [pc, #48]	@ (8011550 <tcp_receive+0x5ec>)
 8011520:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011522:	4b0b      	ldr	r3, [pc, #44]	@ (8011550 <tcp_receive+0x5ec>)
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	891a      	ldrh	r2, [r3, #8]
 8011528:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011530:	e02a      	b.n	8011588 <tcp_receive+0x624>
 8011532:	bf00      	nop
 8011534:	0801ae78 	.word	0x0801ae78
 8011538:	0801ae80 	.word	0x0801ae80
 801153c:	2400e9a4 	.word	0x2400e9a4
 8011540:	2400e9a0 	.word	0x2400e9a0
 8011544:	2400e964 	.word	0x2400e964
 8011548:	2400e9a6 	.word	0x2400e9a6
 801154c:	2400e99c 	.word	0x2400e99c
 8011550:	2400e97c 	.word	0x2400e97c
 8011554:	0801ab10 	.word	0x0801ab10
 8011558:	0801ae88 	.word	0x0801ae88
 801155c:	0801ab5c 	.word	0x0801ab5c
 8011560:	0801ae98 	.word	0x0801ae98
 8011564:	0801aea8 	.word	0x0801aea8
        off -= p->len;
 8011568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801156a:	895b      	ldrh	r3, [r3, #10]
 801156c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011578:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801157a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801157c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801157e:	2200      	movs	r2, #0
 8011580:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801158a:	895b      	ldrh	r3, [r3, #10]
 801158c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011590:	429a      	cmp	r2, r3
 8011592:	d8e9      	bhi.n	8011568 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011594:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011598:	4619      	mov	r1, r3
 801159a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801159c:	f7fc fb5e 	bl	800dc5c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115a4:	4a90      	ldr	r2, [pc, #576]	@ (80117e8 <tcp_receive+0x884>)
 80115a6:	6013      	str	r3, [r2, #0]
 80115a8:	4b90      	ldr	r3, [pc, #576]	@ (80117ec <tcp_receive+0x888>)
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	4a8e      	ldr	r2, [pc, #568]	@ (80117e8 <tcp_receive+0x884>)
 80115ae:	6812      	ldr	r2, [r2, #0]
 80115b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80115b2:	e00d      	b.n	80115d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80115b4:	4b8c      	ldr	r3, [pc, #560]	@ (80117e8 <tcp_receive+0x884>)
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	2b00      	cmp	r3, #0
 80115c0:	da06      	bge.n	80115d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	8b5b      	ldrh	r3, [r3, #26]
 80115c6:	f043 0302 	orr.w	r3, r3, #2
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115d0:	4b85      	ldr	r3, [pc, #532]	@ (80117e8 <tcp_receive+0x884>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d8:	1ad3      	subs	r3, r2, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f2c0 8427 	blt.w	8011e2e <tcp_receive+0xeca>
 80115e0:	4b81      	ldr	r3, [pc, #516]	@ (80117e8 <tcp_receive+0x884>)
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115e8:	6879      	ldr	r1, [r7, #4]
 80115ea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80115ec:	440b      	add	r3, r1
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	3301      	adds	r3, #1
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f300 841b 	bgt.w	8011e2e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115fc:	4b7a      	ldr	r3, [pc, #488]	@ (80117e8 <tcp_receive+0x884>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	429a      	cmp	r2, r3
 8011602:	f040 8298 	bne.w	8011b36 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011606:	4b79      	ldr	r3, [pc, #484]	@ (80117ec <tcp_receive+0x888>)
 8011608:	891c      	ldrh	r4, [r3, #8]
 801160a:	4b78      	ldr	r3, [pc, #480]	@ (80117ec <tcp_receive+0x888>)
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	899b      	ldrh	r3, [r3, #12]
 8011610:	b29b      	uxth	r3, r3
 8011612:	4618      	mov	r0, r3
 8011614:	f7fa fef2 	bl	800c3fc <lwip_htons>
 8011618:	4603      	mov	r3, r0
 801161a:	b2db      	uxtb	r3, r3
 801161c:	f003 0303 	and.w	r3, r3, #3
 8011620:	2b00      	cmp	r3, #0
 8011622:	d001      	beq.n	8011628 <tcp_receive+0x6c4>
 8011624:	2301      	movs	r3, #1
 8011626:	e000      	b.n	801162a <tcp_receive+0x6c6>
 8011628:	2300      	movs	r3, #0
 801162a:	4423      	add	r3, r4
 801162c:	b29a      	uxth	r2, r3
 801162e:	4b70      	ldr	r3, [pc, #448]	@ (80117f0 <tcp_receive+0x88c>)
 8011630:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011636:	4b6e      	ldr	r3, [pc, #440]	@ (80117f0 <tcp_receive+0x88c>)
 8011638:	881b      	ldrh	r3, [r3, #0]
 801163a:	429a      	cmp	r2, r3
 801163c:	d274      	bcs.n	8011728 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801163e:	4b6b      	ldr	r3, [pc, #428]	@ (80117ec <tcp_receive+0x888>)
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	899b      	ldrh	r3, [r3, #12]
 8011644:	b29b      	uxth	r3, r3
 8011646:	4618      	mov	r0, r3
 8011648:	f7fa fed8 	bl	800c3fc <lwip_htons>
 801164c:	4603      	mov	r3, r0
 801164e:	b2db      	uxtb	r3, r3
 8011650:	f003 0301 	and.w	r3, r3, #1
 8011654:	2b00      	cmp	r3, #0
 8011656:	d01e      	beq.n	8011696 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011658:	4b64      	ldr	r3, [pc, #400]	@ (80117ec <tcp_receive+0x888>)
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	899b      	ldrh	r3, [r3, #12]
 801165e:	b29b      	uxth	r3, r3
 8011660:	b21b      	sxth	r3, r3
 8011662:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011666:	b21c      	sxth	r4, r3
 8011668:	4b60      	ldr	r3, [pc, #384]	@ (80117ec <tcp_receive+0x888>)
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	899b      	ldrh	r3, [r3, #12]
 801166e:	b29b      	uxth	r3, r3
 8011670:	4618      	mov	r0, r3
 8011672:	f7fa fec3 	bl	800c3fc <lwip_htons>
 8011676:	4603      	mov	r3, r0
 8011678:	b2db      	uxtb	r3, r3
 801167a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801167e:	b29b      	uxth	r3, r3
 8011680:	4618      	mov	r0, r3
 8011682:	f7fa febb 	bl	800c3fc <lwip_htons>
 8011686:	4603      	mov	r3, r0
 8011688:	b21b      	sxth	r3, r3
 801168a:	4323      	orrs	r3, r4
 801168c:	b21a      	sxth	r2, r3
 801168e:	4b57      	ldr	r3, [pc, #348]	@ (80117ec <tcp_receive+0x888>)
 8011690:	68db      	ldr	r3, [r3, #12]
 8011692:	b292      	uxth	r2, r2
 8011694:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801169a:	4b54      	ldr	r3, [pc, #336]	@ (80117ec <tcp_receive+0x888>)
 801169c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801169e:	4b53      	ldr	r3, [pc, #332]	@ (80117ec <tcp_receive+0x888>)
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	899b      	ldrh	r3, [r3, #12]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fa fea8 	bl	800c3fc <lwip_htons>
 80116ac:	4603      	mov	r3, r0
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	f003 0302 	and.w	r3, r3, #2
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d005      	beq.n	80116c4 <tcp_receive+0x760>
            inseg.len -= 1;
 80116b8:	4b4c      	ldr	r3, [pc, #304]	@ (80117ec <tcp_receive+0x888>)
 80116ba:	891b      	ldrh	r3, [r3, #8]
 80116bc:	3b01      	subs	r3, #1
 80116be:	b29a      	uxth	r2, r3
 80116c0:	4b4a      	ldr	r3, [pc, #296]	@ (80117ec <tcp_receive+0x888>)
 80116c2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80116c4:	4b49      	ldr	r3, [pc, #292]	@ (80117ec <tcp_receive+0x888>)
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	4a48      	ldr	r2, [pc, #288]	@ (80117ec <tcp_receive+0x888>)
 80116ca:	8912      	ldrh	r2, [r2, #8]
 80116cc:	4611      	mov	r1, r2
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fc f9c4 	bl	800da5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80116d4:	4b45      	ldr	r3, [pc, #276]	@ (80117ec <tcp_receive+0x888>)
 80116d6:	891c      	ldrh	r4, [r3, #8]
 80116d8:	4b44      	ldr	r3, [pc, #272]	@ (80117ec <tcp_receive+0x888>)
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	899b      	ldrh	r3, [r3, #12]
 80116de:	b29b      	uxth	r3, r3
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fa fe8b 	bl	800c3fc <lwip_htons>
 80116e6:	4603      	mov	r3, r0
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	f003 0303 	and.w	r3, r3, #3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <tcp_receive+0x792>
 80116f2:	2301      	movs	r3, #1
 80116f4:	e000      	b.n	80116f8 <tcp_receive+0x794>
 80116f6:	2300      	movs	r3, #0
 80116f8:	4423      	add	r3, r4
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	4b3c      	ldr	r3, [pc, #240]	@ (80117f0 <tcp_receive+0x88c>)
 80116fe:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011700:	4b3b      	ldr	r3, [pc, #236]	@ (80117f0 <tcp_receive+0x88c>)
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	461a      	mov	r2, r3
 8011706:	4b38      	ldr	r3, [pc, #224]	@ (80117e8 <tcp_receive+0x884>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	441a      	add	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011710:	6879      	ldr	r1, [r7, #4]
 8011712:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011714:	440b      	add	r3, r1
 8011716:	429a      	cmp	r2, r3
 8011718:	d006      	beq.n	8011728 <tcp_receive+0x7c4>
 801171a:	4b36      	ldr	r3, [pc, #216]	@ (80117f4 <tcp_receive+0x890>)
 801171c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011720:	4935      	ldr	r1, [pc, #212]	@ (80117f8 <tcp_receive+0x894>)
 8011722:	4836      	ldr	r0, [pc, #216]	@ (80117fc <tcp_receive+0x898>)
 8011724:	f007 f90a 	bl	801893c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 80e6 	beq.w	80118fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011732:	4b2e      	ldr	r3, [pc, #184]	@ (80117ec <tcp_receive+0x888>)
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	899b      	ldrh	r3, [r3, #12]
 8011738:	b29b      	uxth	r3, r3
 801173a:	4618      	mov	r0, r3
 801173c:	f7fa fe5e 	bl	800c3fc <lwip_htons>
 8011740:	4603      	mov	r3, r0
 8011742:	b2db      	uxtb	r3, r3
 8011744:	f003 0301 	and.w	r3, r3, #1
 8011748:	2b00      	cmp	r3, #0
 801174a:	d010      	beq.n	801176e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801174c:	e00a      	b.n	8011764 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011752:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	f7fd fd93 	bl	800f28a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011768:	2b00      	cmp	r3, #0
 801176a:	d1f0      	bne.n	801174e <tcp_receive+0x7ea>
 801176c:	e0c7      	b.n	80118fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011772:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011774:	e051      	b.n	801181a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	899b      	ldrh	r3, [r3, #12]
 801177c:	b29b      	uxth	r3, r3
 801177e:	4618      	mov	r0, r3
 8011780:	f7fa fe3c 	bl	800c3fc <lwip_htons>
 8011784:	4603      	mov	r3, r0
 8011786:	b2db      	uxtb	r3, r3
 8011788:	f003 0301 	and.w	r3, r3, #1
 801178c:	2b00      	cmp	r3, #0
 801178e:	d03c      	beq.n	801180a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011790:	4b16      	ldr	r3, [pc, #88]	@ (80117ec <tcp_receive+0x888>)
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	899b      	ldrh	r3, [r3, #12]
 8011796:	b29b      	uxth	r3, r3
 8011798:	4618      	mov	r0, r3
 801179a:	f7fa fe2f 	bl	800c3fc <lwip_htons>
 801179e:	4603      	mov	r3, r0
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d12f      	bne.n	801180a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80117aa:	4b10      	ldr	r3, [pc, #64]	@ (80117ec <tcp_receive+0x888>)
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	899b      	ldrh	r3, [r3, #12]
 80117b0:	b29c      	uxth	r4, r3
 80117b2:	2001      	movs	r0, #1
 80117b4:	f7fa fe22 	bl	800c3fc <lwip_htons>
 80117b8:	4603      	mov	r3, r0
 80117ba:	461a      	mov	r2, r3
 80117bc:	4b0b      	ldr	r3, [pc, #44]	@ (80117ec <tcp_receive+0x888>)
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	4322      	orrs	r2, r4
 80117c2:	b292      	uxth	r2, r2
 80117c4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80117c6:	4b09      	ldr	r3, [pc, #36]	@ (80117ec <tcp_receive+0x888>)
 80117c8:	891c      	ldrh	r4, [r3, #8]
 80117ca:	4b08      	ldr	r3, [pc, #32]	@ (80117ec <tcp_receive+0x888>)
 80117cc:	68db      	ldr	r3, [r3, #12]
 80117ce:	899b      	ldrh	r3, [r3, #12]
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7fa fe12 	bl	800c3fc <lwip_htons>
 80117d8:	4603      	mov	r3, r0
 80117da:	b2db      	uxtb	r3, r3
 80117dc:	f003 0303 	and.w	r3, r3, #3
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d00d      	beq.n	8011800 <tcp_receive+0x89c>
 80117e4:	2301      	movs	r3, #1
 80117e6:	e00c      	b.n	8011802 <tcp_receive+0x89e>
 80117e8:	2400e99c 	.word	0x2400e99c
 80117ec:	2400e97c 	.word	0x2400e97c
 80117f0:	2400e9a6 	.word	0x2400e9a6
 80117f4:	0801ab10 	.word	0x0801ab10
 80117f8:	0801aeb8 	.word	0x0801aeb8
 80117fc:	0801ab5c 	.word	0x0801ab5c
 8011800:	2300      	movs	r3, #0
 8011802:	4423      	add	r3, r4
 8011804:	b29a      	uxth	r2, r3
 8011806:	4b98      	ldr	r3, [pc, #608]	@ (8011a68 <tcp_receive+0xb04>)
 8011808:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801180a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801180c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801180e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011814:	6938      	ldr	r0, [r7, #16]
 8011816:	f7fd fd38 	bl	800f28a <tcp_seg_free>
            while (next &&
 801181a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801181c:	2b00      	cmp	r3, #0
 801181e:	d00e      	beq.n	801183e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011820:	4b91      	ldr	r3, [pc, #580]	@ (8011a68 <tcp_receive+0xb04>)
 8011822:	881b      	ldrh	r3, [r3, #0]
 8011824:	461a      	mov	r2, r3
 8011826:	4b91      	ldr	r3, [pc, #580]	@ (8011a6c <tcp_receive+0xb08>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	441a      	add	r2, r3
 801182c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011834:	8909      	ldrh	r1, [r1, #8]
 8011836:	440b      	add	r3, r1
 8011838:	1ad3      	subs	r3, r2, r3
            while (next &&
 801183a:	2b00      	cmp	r3, #0
 801183c:	da9b      	bge.n	8011776 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801183e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011840:	2b00      	cmp	r3, #0
 8011842:	d059      	beq.n	80118f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011844:	4b88      	ldr	r3, [pc, #544]	@ (8011a68 <tcp_receive+0xb04>)
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	461a      	mov	r2, r3
 801184a:	4b88      	ldr	r3, [pc, #544]	@ (8011a6c <tcp_receive+0xb08>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	441a      	add	r2, r3
 8011850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011858:	2b00      	cmp	r3, #0
 801185a:	dd4d      	ble.n	80118f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801185c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	b29a      	uxth	r2, r3
 8011864:	4b81      	ldr	r3, [pc, #516]	@ (8011a6c <tcp_receive+0xb08>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	b29b      	uxth	r3, r3
 801186a:	1ad3      	subs	r3, r2, r3
 801186c:	b29a      	uxth	r2, r3
 801186e:	4b80      	ldr	r3, [pc, #512]	@ (8011a70 <tcp_receive+0xb0c>)
 8011870:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011872:	4b7f      	ldr	r3, [pc, #508]	@ (8011a70 <tcp_receive+0xb0c>)
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	899b      	ldrh	r3, [r3, #12]
 8011878:	b29b      	uxth	r3, r3
 801187a:	4618      	mov	r0, r3
 801187c:	f7fa fdbe 	bl	800c3fc <lwip_htons>
 8011880:	4603      	mov	r3, r0
 8011882:	b2db      	uxtb	r3, r3
 8011884:	f003 0302 	and.w	r3, r3, #2
 8011888:	2b00      	cmp	r3, #0
 801188a:	d005      	beq.n	8011898 <tcp_receive+0x934>
                inseg.len -= 1;
 801188c:	4b78      	ldr	r3, [pc, #480]	@ (8011a70 <tcp_receive+0xb0c>)
 801188e:	891b      	ldrh	r3, [r3, #8]
 8011890:	3b01      	subs	r3, #1
 8011892:	b29a      	uxth	r2, r3
 8011894:	4b76      	ldr	r3, [pc, #472]	@ (8011a70 <tcp_receive+0xb0c>)
 8011896:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011898:	4b75      	ldr	r3, [pc, #468]	@ (8011a70 <tcp_receive+0xb0c>)
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	4a74      	ldr	r2, [pc, #464]	@ (8011a70 <tcp_receive+0xb0c>)
 801189e:	8912      	ldrh	r2, [r2, #8]
 80118a0:	4611      	mov	r1, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fc f8da 	bl	800da5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80118a8:	4b71      	ldr	r3, [pc, #452]	@ (8011a70 <tcp_receive+0xb0c>)
 80118aa:	891c      	ldrh	r4, [r3, #8]
 80118ac:	4b70      	ldr	r3, [pc, #448]	@ (8011a70 <tcp_receive+0xb0c>)
 80118ae:	68db      	ldr	r3, [r3, #12]
 80118b0:	899b      	ldrh	r3, [r3, #12]
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fa fda1 	bl	800c3fc <lwip_htons>
 80118ba:	4603      	mov	r3, r0
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	f003 0303 	and.w	r3, r3, #3
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d001      	beq.n	80118ca <tcp_receive+0x966>
 80118c6:	2301      	movs	r3, #1
 80118c8:	e000      	b.n	80118cc <tcp_receive+0x968>
 80118ca:	2300      	movs	r3, #0
 80118cc:	4423      	add	r3, r4
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	4b65      	ldr	r3, [pc, #404]	@ (8011a68 <tcp_receive+0xb04>)
 80118d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80118d4:	4b64      	ldr	r3, [pc, #400]	@ (8011a68 <tcp_receive+0xb04>)
 80118d6:	881b      	ldrh	r3, [r3, #0]
 80118d8:	461a      	mov	r2, r3
 80118da:	4b64      	ldr	r3, [pc, #400]	@ (8011a6c <tcp_receive+0xb08>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	441a      	add	r2, r3
 80118e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d006      	beq.n	80118f8 <tcp_receive+0x994>
 80118ea:	4b62      	ldr	r3, [pc, #392]	@ (8011a74 <tcp_receive+0xb10>)
 80118ec:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80118f0:	4961      	ldr	r1, [pc, #388]	@ (8011a78 <tcp_receive+0xb14>)
 80118f2:	4862      	ldr	r0, [pc, #392]	@ (8011a7c <tcp_receive+0xb18>)
 80118f4:	f007 f822 	bl	801893c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80118fc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80118fe:	4b5a      	ldr	r3, [pc, #360]	@ (8011a68 <tcp_receive+0xb04>)
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	461a      	mov	r2, r3
 8011904:	4b59      	ldr	r3, [pc, #356]	@ (8011a6c <tcp_receive+0xb08>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	441a      	add	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011912:	4b55      	ldr	r3, [pc, #340]	@ (8011a68 <tcp_receive+0xb04>)
 8011914:	881b      	ldrh	r3, [r3, #0]
 8011916:	429a      	cmp	r2, r3
 8011918:	d206      	bcs.n	8011928 <tcp_receive+0x9c4>
 801191a:	4b56      	ldr	r3, [pc, #344]	@ (8011a74 <tcp_receive+0xb10>)
 801191c:	f240 6207 	movw	r2, #1543	@ 0x607
 8011920:	4957      	ldr	r1, [pc, #348]	@ (8011a80 <tcp_receive+0xb1c>)
 8011922:	4856      	ldr	r0, [pc, #344]	@ (8011a7c <tcp_receive+0xb18>)
 8011924:	f007 f80a 	bl	801893c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801192c:	4b4e      	ldr	r3, [pc, #312]	@ (8011a68 <tcp_receive+0xb04>)
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	1ad3      	subs	r3, r2, r3
 8011932:	b29a      	uxth	r2, r3
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7fc ffc5 	bl	800e8c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801193e:	4b4c      	ldr	r3, [pc, #304]	@ (8011a70 <tcp_receive+0xb0c>)
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	891b      	ldrh	r3, [r3, #8]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d006      	beq.n	8011956 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011948:	4b49      	ldr	r3, [pc, #292]	@ (8011a70 <tcp_receive+0xb0c>)
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	4a4d      	ldr	r2, [pc, #308]	@ (8011a84 <tcp_receive+0xb20>)
 801194e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011950:	4b47      	ldr	r3, [pc, #284]	@ (8011a70 <tcp_receive+0xb0c>)
 8011952:	2200      	movs	r2, #0
 8011954:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011956:	4b46      	ldr	r3, [pc, #280]	@ (8011a70 <tcp_receive+0xb0c>)
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	899b      	ldrh	r3, [r3, #12]
 801195c:	b29b      	uxth	r3, r3
 801195e:	4618      	mov	r0, r3
 8011960:	f7fa fd4c 	bl	800c3fc <lwip_htons>
 8011964:	4603      	mov	r3, r0
 8011966:	b2db      	uxtb	r3, r3
 8011968:	f003 0301 	and.w	r3, r3, #1
 801196c:	2b00      	cmp	r3, #0
 801196e:	f000 80b8 	beq.w	8011ae2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011972:	4b45      	ldr	r3, [pc, #276]	@ (8011a88 <tcp_receive+0xb24>)
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	f043 0320 	orr.w	r3, r3, #32
 801197a:	b2da      	uxtb	r2, r3
 801197c:	4b42      	ldr	r3, [pc, #264]	@ (8011a88 <tcp_receive+0xb24>)
 801197e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011980:	e0af      	b.n	8011ae2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011986:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	4a36      	ldr	r2, [pc, #216]	@ (8011a6c <tcp_receive+0xb08>)
 8011992:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	891b      	ldrh	r3, [r3, #8]
 8011998:	461c      	mov	r4, r3
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	68db      	ldr	r3, [r3, #12]
 801199e:	899b      	ldrh	r3, [r3, #12]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fa fd2a 	bl	800c3fc <lwip_htons>
 80119a8:	4603      	mov	r3, r0
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	f003 0303 	and.w	r3, r3, #3
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <tcp_receive+0xa54>
 80119b4:	2301      	movs	r3, #1
 80119b6:	e000      	b.n	80119ba <tcp_receive+0xa56>
 80119b8:	2300      	movs	r3, #0
 80119ba:	191a      	adds	r2, r3, r4
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119c0:	441a      	add	r2, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119ca:	461c      	mov	r4, r3
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	891b      	ldrh	r3, [r3, #8]
 80119d0:	461d      	mov	r5, r3
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	899b      	ldrh	r3, [r3, #12]
 80119d8:	b29b      	uxth	r3, r3
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fa fd0e 	bl	800c3fc <lwip_htons>
 80119e0:	4603      	mov	r3, r0
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	f003 0303 	and.w	r3, r3, #3
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d001      	beq.n	80119f0 <tcp_receive+0xa8c>
 80119ec:	2301      	movs	r3, #1
 80119ee:	e000      	b.n	80119f2 <tcp_receive+0xa8e>
 80119f0:	2300      	movs	r3, #0
 80119f2:	442b      	add	r3, r5
 80119f4:	429c      	cmp	r4, r3
 80119f6:	d206      	bcs.n	8011a06 <tcp_receive+0xaa2>
 80119f8:	4b1e      	ldr	r3, [pc, #120]	@ (8011a74 <tcp_receive+0xb10>)
 80119fa:	f240 622b 	movw	r2, #1579	@ 0x62b
 80119fe:	4923      	ldr	r1, [pc, #140]	@ (8011a8c <tcp_receive+0xb28>)
 8011a00:	481e      	ldr	r0, [pc, #120]	@ (8011a7c <tcp_receive+0xb18>)
 8011a02:	f006 ff9b 	bl	801893c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	891b      	ldrh	r3, [r3, #8]
 8011a0a:	461c      	mov	r4, r3
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	68db      	ldr	r3, [r3, #12]
 8011a10:	899b      	ldrh	r3, [r3, #12]
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fa fcf1 	bl	800c3fc <lwip_htons>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	f003 0303 	and.w	r3, r3, #3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d001      	beq.n	8011a2a <tcp_receive+0xac6>
 8011a26:	2301      	movs	r3, #1
 8011a28:	e000      	b.n	8011a2c <tcp_receive+0xac8>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	1919      	adds	r1, r3, r4
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011a32:	b28b      	uxth	r3, r1
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f7fc ff43 	bl	800e8c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	891b      	ldrh	r3, [r3, #8]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d028      	beq.n	8011a9e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8011a84 <tcp_receive+0xb20>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d01d      	beq.n	8011a90 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011a54:	4b0b      	ldr	r3, [pc, #44]	@ (8011a84 <tcp_receive+0xb20>)
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4610      	mov	r0, r2
 8011a60:	f7fc fa50 	bl	800df04 <pbuf_cat>
 8011a64:	e018      	b.n	8011a98 <tcp_receive+0xb34>
 8011a66:	bf00      	nop
 8011a68:	2400e9a6 	.word	0x2400e9a6
 8011a6c:	2400e99c 	.word	0x2400e99c
 8011a70:	2400e97c 	.word	0x2400e97c
 8011a74:	0801ab10 	.word	0x0801ab10
 8011a78:	0801aef0 	.word	0x0801aef0
 8011a7c:	0801ab5c 	.word	0x0801ab5c
 8011a80:	0801af2c 	.word	0x0801af2c
 8011a84:	2400e9ac 	.word	0x2400e9ac
 8011a88:	2400e9a9 	.word	0x2400e9a9
 8011a8c:	0801af4c 	.word	0x0801af4c
            } else {
              recv_data = cseg->p;
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	4a70      	ldr	r2, [pc, #448]	@ (8011c58 <tcp_receive+0xcf4>)
 8011a96:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	899b      	ldrh	r3, [r3, #12]
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fa fca8 	bl	800c3fc <lwip_htons>
 8011aac:	4603      	mov	r3, r0
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	f003 0301 	and.w	r3, r3, #1
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d00d      	beq.n	8011ad4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011ab8:	4b68      	ldr	r3, [pc, #416]	@ (8011c5c <tcp_receive+0xcf8>)
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	f043 0320 	orr.w	r3, r3, #32
 8011ac0:	b2da      	uxtb	r2, r3
 8011ac2:	4b66      	ldr	r3, [pc, #408]	@ (8011c5c <tcp_receive+0xcf8>)
 8011ac4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	7d1b      	ldrb	r3, [r3, #20]
 8011aca:	2b04      	cmp	r3, #4
 8011acc:	d102      	bne.n	8011ad4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2207      	movs	r2, #7
 8011ad2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011adc:	68b8      	ldr	r0, [r7, #8]
 8011ade:	f7fd fbd4 	bl	800f28a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d008      	beq.n	8011afc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	685a      	ldr	r2, [r3, #4]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011af6:	429a      	cmp	r2, r3
 8011af8:	f43f af43 	beq.w	8011982 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	8b5b      	ldrh	r3, [r3, #26]
 8011b00:	f003 0301 	and.w	r3, r3, #1
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00e      	beq.n	8011b26 <tcp_receive+0xbc2>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	8b5b      	ldrh	r3, [r3, #26]
 8011b0c:	f023 0301 	bic.w	r3, r3, #1
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	835a      	strh	r2, [r3, #26]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	8b5b      	ldrh	r3, [r3, #26]
 8011b1a:	f043 0302 	orr.w	r3, r3, #2
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b24:	e187      	b.n	8011e36 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8b5b      	ldrh	r3, [r3, #26]
 8011b2a:	f043 0301 	orr.w	r3, r3, #1
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b34:	e17f      	b.n	8011e36 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d106      	bne.n	8011b4c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011b3e:	4848      	ldr	r0, [pc, #288]	@ (8011c60 <tcp_receive+0xcfc>)
 8011b40:	f7fd fbbc 	bl	800f2bc <tcp_seg_copy>
 8011b44:	4602      	mov	r2, r0
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	675a      	str	r2, [r3, #116]	@ 0x74
 8011b4a:	e16c      	b.n	8011e26 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b56:	e156      	b.n	8011e06 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	685a      	ldr	r2, [r3, #4]
 8011b5e:	4b41      	ldr	r3, [pc, #260]	@ (8011c64 <tcp_receive+0xd00>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d11d      	bne.n	8011ba2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011b66:	4b3e      	ldr	r3, [pc, #248]	@ (8011c60 <tcp_receive+0xcfc>)
 8011b68:	891a      	ldrh	r2, [r3, #8]
 8011b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6c:	891b      	ldrh	r3, [r3, #8]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	f240 814e 	bls.w	8011e10 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b74:	483a      	ldr	r0, [pc, #232]	@ (8011c60 <tcp_receive+0xcfc>)
 8011b76:	f7fd fba1 	bl	800f2bc <tcp_seg_copy>
 8011b7a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f000 8148 	beq.w	8011e14 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d003      	beq.n	8011b92 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b8c:	697a      	ldr	r2, [r7, #20]
 8011b8e:	601a      	str	r2, [r3, #0]
 8011b90:	e002      	b.n	8011b98 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	697a      	ldr	r2, [r7, #20]
 8011b96:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011b98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b9a:	6978      	ldr	r0, [r7, #20]
 8011b9c:	f7ff f8de 	bl	8010d5c <tcp_oos_insert_segment>
                }
                break;
 8011ba0:	e138      	b.n	8011e14 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d117      	bne.n	8011bd8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8011c64 <tcp_receive+0xd00>)
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	da57      	bge.n	8011c68 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bb8:	4829      	ldr	r0, [pc, #164]	@ (8011c60 <tcp_receive+0xcfc>)
 8011bba:	f7fd fb7f 	bl	800f2bc <tcp_seg_copy>
 8011bbe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 8128 	beq.w	8011e18 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	69ba      	ldr	r2, [r7, #24]
 8011bcc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011bce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011bd0:	69b8      	ldr	r0, [r7, #24]
 8011bd2:	f7ff f8c3 	bl	8010d5c <tcp_oos_insert_segment>
                  }
                  break;
 8011bd6:	e11f      	b.n	8011e18 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011bd8:	4b22      	ldr	r3, [pc, #136]	@ (8011c64 <tcp_receive+0xd00>)
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	3b01      	subs	r3, #1
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	db3e      	blt.n	8011c68 <tcp_receive+0xd04>
 8011bea:	4b1e      	ldr	r3, [pc, #120]	@ (8011c64 <tcp_receive+0xd00>)
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	1ad3      	subs	r3, r2, r3
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	dc35      	bgt.n	8011c68 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bfc:	4818      	ldr	r0, [pc, #96]	@ (8011c60 <tcp_receive+0xcfc>)
 8011bfe:	f7fd fb5d 	bl	800f2bc <tcp_seg_copy>
 8011c02:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f000 8108 	beq.w	8011e1c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c14:	8912      	ldrh	r2, [r2, #8]
 8011c16:	441a      	add	r2, r3
 8011c18:	4b12      	ldr	r3, [pc, #72]	@ (8011c64 <tcp_receive+0xd00>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	1ad3      	subs	r3, r2, r3
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	dd12      	ble.n	8011c48 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011c22:	4b10      	ldr	r3, [pc, #64]	@ (8011c64 <tcp_receive+0xd00>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	b29a      	uxth	r2, r3
 8011c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c36:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c3a:	685a      	ldr	r2, [r3, #4]
 8011c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c3e:	891b      	ldrh	r3, [r3, #8]
 8011c40:	4619      	mov	r1, r3
 8011c42:	4610      	mov	r0, r2
 8011c44:	f7fb ff0a 	bl	800da5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c4a:	69fa      	ldr	r2, [r7, #28]
 8011c4c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011c4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c50:	69f8      	ldr	r0, [r7, #28]
 8011c52:	f7ff f883 	bl	8010d5c <tcp_oos_insert_segment>
                  }
                  break;
 8011c56:	e0e1      	b.n	8011e1c <tcp_receive+0xeb8>
 8011c58:	2400e9ac 	.word	0x2400e9ac
 8011c5c:	2400e9a9 	.word	0x2400e9a9
 8011c60:	2400e97c 	.word	0x2400e97c
 8011c64:	2400e99c 	.word	0x2400e99c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c6a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f040 80c5 	bne.w	8011e00 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011c76:	4b7f      	ldr	r3, [pc, #508]	@ (8011e74 <tcp_receive+0xf10>)
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7c:	68db      	ldr	r3, [r3, #12]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f340 80bc 	ble.w	8011e00 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8a:	68db      	ldr	r3, [r3, #12]
 8011c8c:	899b      	ldrh	r3, [r3, #12]
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7fa fbb3 	bl	800c3fc <lwip_htons>
 8011c96:	4603      	mov	r3, r0
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	f003 0301 	and.w	r3, r3, #1
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f040 80be 	bne.w	8011e20 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011ca4:	4874      	ldr	r0, [pc, #464]	@ (8011e78 <tcp_receive+0xf14>)
 8011ca6:	f7fd fb09 	bl	800f2bc <tcp_seg_copy>
 8011caa:	4602      	mov	r2, r0
 8011cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	f000 80b5 	beq.w	8011e24 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011cc2:	8912      	ldrh	r2, [r2, #8]
 8011cc4:	441a      	add	r2, r3
 8011cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8011e74 <tcp_receive+0xf10>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	1ad3      	subs	r3, r2, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	dd12      	ble.n	8011cf6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011cd0:	4b68      	ldr	r3, [pc, #416]	@ (8011e74 <tcp_receive+0xf10>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ce8:	685a      	ldr	r2, [r3, #4]
 8011cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cec:	891b      	ldrh	r3, [r3, #8]
 8011cee:	4619      	mov	r1, r3
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	f7fb feb3 	bl	800da5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011cf6:	4b61      	ldr	r3, [pc, #388]	@ (8011e7c <tcp_receive+0xf18>)
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	4b5d      	ldr	r3, [pc, #372]	@ (8011e74 <tcp_receive+0xf10>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	441a      	add	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d06:	6879      	ldr	r1, [r7, #4]
 8011d08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011d0a:	440b      	add	r3, r1
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f340 8088 	ble.w	8011e24 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	899b      	ldrh	r3, [r3, #12]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7fa fb6c 	bl	800c3fc <lwip_htons>
 8011d24:	4603      	mov	r3, r0
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	f003 0301 	and.w	r3, r3, #1
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d021      	beq.n	8011d74 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	899b      	ldrh	r3, [r3, #12]
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	b21b      	sxth	r3, r3
 8011d3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011d40:	b21c      	sxth	r4, r3
 8011d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fa fb55 	bl	800c3fc <lwip_htons>
 8011d52:	4603      	mov	r3, r0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fa fb4d 	bl	800c3fc <lwip_htons>
 8011d62:	4603      	mov	r3, r0
 8011d64:	b21b      	sxth	r3, r3
 8011d66:	4323      	orrs	r3, r4
 8011d68:	b21a      	sxth	r2, r3
 8011d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	b292      	uxth	r2, r2
 8011d72:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d7e:	4413      	add	r3, r2
 8011d80:	b299      	uxth	r1, r3
 8011d82:	4b3c      	ldr	r3, [pc, #240]	@ (8011e74 <tcp_receive+0xf10>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	1a8a      	subs	r2, r1, r2
 8011d8e:	b292      	uxth	r2, r2
 8011d90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	685a      	ldr	r2, [r3, #4]
 8011d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	4619      	mov	r1, r3
 8011da0:	4610      	mov	r0, r2
 8011da2:	f7fb fe5b 	bl	800da5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	891c      	ldrh	r4, [r3, #8]
 8011dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	899b      	ldrh	r3, [r3, #12]
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7fa fb20 	bl	800c3fc <lwip_htons>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	f003 0303 	and.w	r3, r3, #3
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <tcp_receive+0xe68>
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e000      	b.n	8011dce <tcp_receive+0xe6a>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	4423      	add	r3, r4
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8011e7c <tcp_receive+0xf18>)
 8011dd4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011dd6:	4b29      	ldr	r3, [pc, #164]	@ (8011e7c <tcp_receive+0xf18>)
 8011dd8:	881b      	ldrh	r3, [r3, #0]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	4b25      	ldr	r3, [pc, #148]	@ (8011e74 <tcp_receive+0xf10>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	441a      	add	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011de6:	6879      	ldr	r1, [r7, #4]
 8011de8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011dea:	440b      	add	r3, r1
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d019      	beq.n	8011e24 <tcp_receive+0xec0>
 8011df0:	4b23      	ldr	r3, [pc, #140]	@ (8011e80 <tcp_receive+0xf1c>)
 8011df2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011df6:	4923      	ldr	r1, [pc, #140]	@ (8011e84 <tcp_receive+0xf20>)
 8011df8:	4823      	ldr	r0, [pc, #140]	@ (8011e88 <tcp_receive+0xf24>)
 8011dfa:	f006 fd9f 	bl	801893c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011dfe:	e011      	b.n	8011e24 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	f47f aea5 	bne.w	8011b58 <tcp_receive+0xbf4>
 8011e0e:	e00a      	b.n	8011e26 <tcp_receive+0xec2>
                break;
 8011e10:	bf00      	nop
 8011e12:	e008      	b.n	8011e26 <tcp_receive+0xec2>
                break;
 8011e14:	bf00      	nop
 8011e16:	e006      	b.n	8011e26 <tcp_receive+0xec2>
                  break;
 8011e18:	bf00      	nop
 8011e1a:	e004      	b.n	8011e26 <tcp_receive+0xec2>
                  break;
 8011e1c:	bf00      	nop
 8011e1e:	e002      	b.n	8011e26 <tcp_receive+0xec2>
                  break;
 8011e20:	bf00      	nop
 8011e22:	e000      	b.n	8011e26 <tcp_receive+0xec2>
                break;
 8011e24:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f001 fa30 	bl	801328c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011e2c:	e003      	b.n	8011e36 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f001 fa2c 	bl	801328c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e34:	e01a      	b.n	8011e6c <tcp_receive+0xf08>
 8011e36:	e019      	b.n	8011e6c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011e38:	4b0e      	ldr	r3, [pc, #56]	@ (8011e74 <tcp_receive+0xf10>)
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	db0a      	blt.n	8011e5c <tcp_receive+0xef8>
 8011e46:	4b0b      	ldr	r3, [pc, #44]	@ (8011e74 <tcp_receive+0xf10>)
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e4e:	6879      	ldr	r1, [r7, #4]
 8011e50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011e52:	440b      	add	r3, r1
 8011e54:	1ad3      	subs	r3, r2, r3
 8011e56:	3301      	adds	r3, #1
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	dd07      	ble.n	8011e6c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	8b5b      	ldrh	r3, [r3, #26]
 8011e60:	f043 0302 	orr.w	r3, r3, #2
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011e6a:	e7ff      	b.n	8011e6c <tcp_receive+0xf08>
 8011e6c:	bf00      	nop
 8011e6e:	3750      	adds	r7, #80	@ 0x50
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bdb0      	pop	{r4, r5, r7, pc}
 8011e74:	2400e99c 	.word	0x2400e99c
 8011e78:	2400e97c 	.word	0x2400e97c
 8011e7c:	2400e9a6 	.word	0x2400e9a6
 8011e80:	0801ab10 	.word	0x0801ab10
 8011e84:	0801aeb8 	.word	0x0801aeb8
 8011e88:	0801ab5c 	.word	0x0801ab5c

08011e8c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e92:	4b15      	ldr	r3, [pc, #84]	@ (8011ee8 <tcp_get_next_optbyte+0x5c>)
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	b291      	uxth	r1, r2
 8011e9a:	4a13      	ldr	r2, [pc, #76]	@ (8011ee8 <tcp_get_next_optbyte+0x5c>)
 8011e9c:	8011      	strh	r1, [r2, #0]
 8011e9e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011ea0:	4b12      	ldr	r3, [pc, #72]	@ (8011eec <tcp_get_next_optbyte+0x60>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <tcp_get_next_optbyte+0x26>
 8011ea8:	4b11      	ldr	r3, [pc, #68]	@ (8011ef0 <tcp_get_next_optbyte+0x64>)
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	88fa      	ldrh	r2, [r7, #6]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d208      	bcs.n	8011ec4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011eb2:	4b10      	ldr	r3, [pc, #64]	@ (8011ef4 <tcp_get_next_optbyte+0x68>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	3314      	adds	r3, #20
 8011eb8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011eba:	88fb      	ldrh	r3, [r7, #6]
 8011ebc:	683a      	ldr	r2, [r7, #0]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	e00b      	b.n	8011edc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011ec4:	88fb      	ldrh	r3, [r7, #6]
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	4b09      	ldr	r3, [pc, #36]	@ (8011ef0 <tcp_get_next_optbyte+0x64>)
 8011eca:	881b      	ldrh	r3, [r3, #0]
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ed2:	4b06      	ldr	r3, [pc, #24]	@ (8011eec <tcp_get_next_optbyte+0x60>)
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	797b      	ldrb	r3, [r7, #5]
 8011ed8:	4413      	add	r3, r2
 8011eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	2400e998 	.word	0x2400e998
 8011eec:	2400e994 	.word	0x2400e994
 8011ef0:	2400e992 	.word	0x2400e992
 8011ef4:	2400e98c 	.word	0x2400e98c

08011ef8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <tcp_parseopt+0x1c>
 8011f06:	4b32      	ldr	r3, [pc, #200]	@ (8011fd0 <tcp_parseopt+0xd8>)
 8011f08:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011f0c:	4931      	ldr	r1, [pc, #196]	@ (8011fd4 <tcp_parseopt+0xdc>)
 8011f0e:	4832      	ldr	r0, [pc, #200]	@ (8011fd8 <tcp_parseopt+0xe0>)
 8011f10:	f006 fd14 	bl	801893c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f14:	4b31      	ldr	r3, [pc, #196]	@ (8011fdc <tcp_parseopt+0xe4>)
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d056      	beq.n	8011fca <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f1c:	4b30      	ldr	r3, [pc, #192]	@ (8011fe0 <tcp_parseopt+0xe8>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	801a      	strh	r2, [r3, #0]
 8011f22:	e046      	b.n	8011fb2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011f24:	f7ff ffb2 	bl	8011e8c <tcp_get_next_optbyte>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d006      	beq.n	8011f40 <tcp_parseopt+0x48>
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	dc2a      	bgt.n	8011f8c <tcp_parseopt+0x94>
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d042      	beq.n	8011fc0 <tcp_parseopt+0xc8>
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d038      	beq.n	8011fb0 <tcp_parseopt+0xb8>
 8011f3e:	e025      	b.n	8011f8c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011f40:	f7ff ffa4 	bl	8011e8c <tcp_get_next_optbyte>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b04      	cmp	r3, #4
 8011f48:	d13c      	bne.n	8011fc4 <tcp_parseopt+0xcc>
 8011f4a:	4b25      	ldr	r3, [pc, #148]	@ (8011fe0 <tcp_parseopt+0xe8>)
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	4a22      	ldr	r2, [pc, #136]	@ (8011fdc <tcp_parseopt+0xe4>)
 8011f52:	8812      	ldrh	r2, [r2, #0]
 8011f54:	4293      	cmp	r3, r2
 8011f56:	da35      	bge.n	8011fc4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011f58:	f7ff ff98 	bl	8011e8c <tcp_get_next_optbyte>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	021b      	lsls	r3, r3, #8
 8011f60:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011f62:	f7ff ff93 	bl	8011e8c <tcp_get_next_optbyte>
 8011f66:	4603      	mov	r3, r0
 8011f68:	461a      	mov	r2, r3
 8011f6a:	89bb      	ldrh	r3, [r7, #12]
 8011f6c:	4313      	orrs	r3, r2
 8011f6e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011f70:	89bb      	ldrh	r3, [r7, #12]
 8011f72:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011f76:	d804      	bhi.n	8011f82 <tcp_parseopt+0x8a>
 8011f78:	89bb      	ldrh	r3, [r7, #12]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d001      	beq.n	8011f82 <tcp_parseopt+0x8a>
 8011f7e:	89ba      	ldrh	r2, [r7, #12]
 8011f80:	e001      	b.n	8011f86 <tcp_parseopt+0x8e>
 8011f82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011f8a:	e012      	b.n	8011fb2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f8c:	f7ff ff7e 	bl	8011e8c <tcp_get_next_optbyte>
 8011f90:	4603      	mov	r3, r0
 8011f92:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011f94:	7afb      	ldrb	r3, [r7, #11]
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d916      	bls.n	8011fc8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011f9a:	7afb      	ldrb	r3, [r7, #11]
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	4b10      	ldr	r3, [pc, #64]	@ (8011fe0 <tcp_parseopt+0xe8>)
 8011fa0:	881b      	ldrh	r3, [r3, #0]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	3b02      	subs	r3, #2
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe0 <tcp_parseopt+0xe8>)
 8011fac:	801a      	strh	r2, [r3, #0]
 8011fae:	e000      	b.n	8011fb2 <tcp_parseopt+0xba>
          break;
 8011fb0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8011fe0 <tcp_parseopt+0xe8>)
 8011fb4:	881a      	ldrh	r2, [r3, #0]
 8011fb6:	4b09      	ldr	r3, [pc, #36]	@ (8011fdc <tcp_parseopt+0xe4>)
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d3b2      	bcc.n	8011f24 <tcp_parseopt+0x2c>
 8011fbe:	e004      	b.n	8011fca <tcp_parseopt+0xd2>
          return;
 8011fc0:	bf00      	nop
 8011fc2:	e002      	b.n	8011fca <tcp_parseopt+0xd2>
            return;
 8011fc4:	bf00      	nop
 8011fc6:	e000      	b.n	8011fca <tcp_parseopt+0xd2>
            return;
 8011fc8:	bf00      	nop
      }
    }
  }
}
 8011fca:	3710      	adds	r7, #16
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}
 8011fd0:	0801ab10 	.word	0x0801ab10
 8011fd4:	0801af74 	.word	0x0801af74
 8011fd8:	0801ab5c 	.word	0x0801ab5c
 8011fdc:	2400e990 	.word	0x2400e990
 8011fe0:	2400e998 	.word	0x2400e998

08011fe4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011fe8:	4b05      	ldr	r3, [pc, #20]	@ (8012000 <tcp_trigger_input_pcb_close+0x1c>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	f043 0310 	orr.w	r3, r3, #16
 8011ff0:	b2da      	uxtb	r2, r3
 8011ff2:	4b03      	ldr	r3, [pc, #12]	@ (8012000 <tcp_trigger_input_pcb_close+0x1c>)
 8011ff4:	701a      	strb	r2, [r3, #0]
}
 8011ff6:	bf00      	nop
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr
 8012000:	2400e9a9 	.word	0x2400e9a9

08012004 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00a      	beq.n	801202c <tcp_route+0x28>
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	7a1b      	ldrb	r3, [r3, #8]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d006      	beq.n	801202c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	7a1b      	ldrb	r3, [r3, #8]
 8012022:	4618      	mov	r0, r3
 8012024:	f7fb fb12 	bl	800d64c <netif_get_by_index>
 8012028:	4603      	mov	r3, r0
 801202a:	e003      	b.n	8012034 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f005 f865 	bl	80170fc <ip4_route>
 8012032:	4603      	mov	r3, r0
  }
}
 8012034:	4618      	mov	r0, r3
 8012036:	3710      	adds	r7, #16
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801203c:	b590      	push	{r4, r7, lr}
 801203e:	b087      	sub	sp, #28
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	603b      	str	r3, [r7, #0]
 8012048:	4613      	mov	r3, r2
 801204a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d105      	bne.n	801205e <tcp_create_segment+0x22>
 8012052:	4b43      	ldr	r3, [pc, #268]	@ (8012160 <tcp_create_segment+0x124>)
 8012054:	22a3      	movs	r2, #163	@ 0xa3
 8012056:	4943      	ldr	r1, [pc, #268]	@ (8012164 <tcp_create_segment+0x128>)
 8012058:	4843      	ldr	r0, [pc, #268]	@ (8012168 <tcp_create_segment+0x12c>)
 801205a:	f006 fc6f 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d105      	bne.n	8012070 <tcp_create_segment+0x34>
 8012064:	4b3e      	ldr	r3, [pc, #248]	@ (8012160 <tcp_create_segment+0x124>)
 8012066:	22a4      	movs	r2, #164	@ 0xa4
 8012068:	4940      	ldr	r1, [pc, #256]	@ (801216c <tcp_create_segment+0x130>)
 801206a:	483f      	ldr	r0, [pc, #252]	@ (8012168 <tcp_create_segment+0x12c>)
 801206c:	f006 fc66 	bl	801893c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012070:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	b2db      	uxtb	r3, r3
 8012078:	f003 0304 	and.w	r3, r3, #4
 801207c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801207e:	2003      	movs	r0, #3
 8012080:	f7fa ff4c 	bl	800cf1c <memp_malloc>
 8012084:	6138      	str	r0, [r7, #16]
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d104      	bne.n	8012096 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801208c:	68b8      	ldr	r0, [r7, #8]
 801208e:	f7fb fe6b 	bl	800dd68 <pbuf_free>
    return NULL;
 8012092:	2300      	movs	r3, #0
 8012094:	e060      	b.n	8012158 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801209c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	2200      	movs	r2, #0
 80120a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	891a      	ldrh	r2, [r3, #8]
 80120ae:	7dfb      	ldrb	r3, [r7, #23]
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d205      	bcs.n	80120c2 <tcp_create_segment+0x86>
 80120b6:	4b2a      	ldr	r3, [pc, #168]	@ (8012160 <tcp_create_segment+0x124>)
 80120b8:	22b0      	movs	r2, #176	@ 0xb0
 80120ba:	492d      	ldr	r1, [pc, #180]	@ (8012170 <tcp_create_segment+0x134>)
 80120bc:	482a      	ldr	r0, [pc, #168]	@ (8012168 <tcp_create_segment+0x12c>)
 80120be:	f006 fc3d 	bl	801893c <iprintf>
  seg->len = p->tot_len - optlen;
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	891a      	ldrh	r2, [r3, #8]
 80120c6:	7dfb      	ldrb	r3, [r7, #23]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80120d2:	2114      	movs	r1, #20
 80120d4:	68b8      	ldr	r0, [r7, #8]
 80120d6:	f7fb fdb1 	bl	800dc3c <pbuf_add_header>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d004      	beq.n	80120ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80120e0:	6938      	ldr	r0, [r7, #16]
 80120e2:	f7fd f8d2 	bl	800f28a <tcp_seg_free>
    return NULL;
 80120e6:	2300      	movs	r3, #0
 80120e8:	e036      	b.n	8012158 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	685a      	ldr	r2, [r3, #4]
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	8ada      	ldrh	r2, [r3, #22]
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	68dc      	ldr	r4, [r3, #12]
 80120fc:	4610      	mov	r0, r2
 80120fe:	f7fa f97d 	bl	800c3fc <lwip_htons>
 8012102:	4603      	mov	r3, r0
 8012104:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	8b1a      	ldrh	r2, [r3, #24]
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	68dc      	ldr	r4, [r3, #12]
 801210e:	4610      	mov	r0, r2
 8012110:	f7fa f974 	bl	800c3fc <lwip_htons>
 8012114:	4603      	mov	r3, r0
 8012116:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	68dc      	ldr	r4, [r3, #12]
 801211c:	6838      	ldr	r0, [r7, #0]
 801211e:	f7fa f982 	bl	800c426 <lwip_htonl>
 8012122:	4603      	mov	r3, r0
 8012124:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012126:	7dfb      	ldrb	r3, [r7, #23]
 8012128:	089b      	lsrs	r3, r3, #2
 801212a:	b2db      	uxtb	r3, r3
 801212c:	3305      	adds	r3, #5
 801212e:	b29b      	uxth	r3, r3
 8012130:	031b      	lsls	r3, r3, #12
 8012132:	b29a      	uxth	r2, r3
 8012134:	79fb      	ldrb	r3, [r7, #7]
 8012136:	b29b      	uxth	r3, r3
 8012138:	4313      	orrs	r3, r2
 801213a:	b29a      	uxth	r2, r3
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	68dc      	ldr	r4, [r3, #12]
 8012140:	4610      	mov	r0, r2
 8012142:	f7fa f95b 	bl	800c3fc <lwip_htons>
 8012146:	4603      	mov	r3, r0
 8012148:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	2200      	movs	r2, #0
 8012150:	749a      	strb	r2, [r3, #18]
 8012152:	2200      	movs	r2, #0
 8012154:	74da      	strb	r2, [r3, #19]
  return seg;
 8012156:	693b      	ldr	r3, [r7, #16]
}
 8012158:	4618      	mov	r0, r3
 801215a:	371c      	adds	r7, #28
 801215c:	46bd      	mov	sp, r7
 801215e:	bd90      	pop	{r4, r7, pc}
 8012160:	0801af90 	.word	0x0801af90
 8012164:	0801afc4 	.word	0x0801afc4
 8012168:	0801afe4 	.word	0x0801afe4
 801216c:	0801b00c 	.word	0x0801b00c
 8012170:	0801b030 	.word	0x0801b030

08012174 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012174:	b590      	push	{r4, r7, lr}
 8012176:	b08b      	sub	sp, #44	@ 0x2c
 8012178:	af02      	add	r7, sp, #8
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	460b      	mov	r3, r1
 801217e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012180:	2300      	movs	r3, #0
 8012182:	61fb      	str	r3, [r7, #28]
 8012184:	2300      	movs	r3, #0
 8012186:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012188:	2300      	movs	r3, #0
 801218a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d106      	bne.n	80121a0 <tcp_split_unsent_seg+0x2c>
 8012192:	4b95      	ldr	r3, [pc, #596]	@ (80123e8 <tcp_split_unsent_seg+0x274>)
 8012194:	f240 324b 	movw	r2, #843	@ 0x34b
 8012198:	4994      	ldr	r1, [pc, #592]	@ (80123ec <tcp_split_unsent_seg+0x278>)
 801219a:	4895      	ldr	r0, [pc, #596]	@ (80123f0 <tcp_split_unsent_seg+0x27c>)
 801219c:	f006 fbce 	bl	801893c <iprintf>

  useg = pcb->unsent;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d102      	bne.n	80121b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80121ac:	f04f 33ff 	mov.w	r3, #4294967295
 80121b0:	e116      	b.n	80123e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80121b2:	887b      	ldrh	r3, [r7, #2]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d109      	bne.n	80121cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80121b8:	4b8b      	ldr	r3, [pc, #556]	@ (80123e8 <tcp_split_unsent_seg+0x274>)
 80121ba:	f240 3253 	movw	r2, #851	@ 0x353
 80121be:	498d      	ldr	r1, [pc, #564]	@ (80123f4 <tcp_split_unsent_seg+0x280>)
 80121c0:	488b      	ldr	r0, [pc, #556]	@ (80123f0 <tcp_split_unsent_seg+0x27c>)
 80121c2:	f006 fbbb 	bl	801893c <iprintf>
    return ERR_VAL;
 80121c6:	f06f 0305 	mvn.w	r3, #5
 80121ca:	e109      	b.n	80123e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	891b      	ldrh	r3, [r3, #8]
 80121d0:	887a      	ldrh	r2, [r7, #2]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d301      	bcc.n	80121da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80121d6:	2300      	movs	r3, #0
 80121d8:	e102      	b.n	80123e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80121de:	887a      	ldrh	r2, [r7, #2]
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d906      	bls.n	80121f2 <tcp_split_unsent_seg+0x7e>
 80121e4:	4b80      	ldr	r3, [pc, #512]	@ (80123e8 <tcp_split_unsent_seg+0x274>)
 80121e6:	f240 325b 	movw	r2, #859	@ 0x35b
 80121ea:	4983      	ldr	r1, [pc, #524]	@ (80123f8 <tcp_split_unsent_seg+0x284>)
 80121ec:	4880      	ldr	r0, [pc, #512]	@ (80123f0 <tcp_split_unsent_seg+0x27c>)
 80121ee:	f006 fba5 	bl	801893c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	891b      	ldrh	r3, [r3, #8]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d106      	bne.n	8012208 <tcp_split_unsent_seg+0x94>
 80121fa:	4b7b      	ldr	r3, [pc, #492]	@ (80123e8 <tcp_split_unsent_seg+0x274>)
 80121fc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012200:	497e      	ldr	r1, [pc, #504]	@ (80123fc <tcp_split_unsent_seg+0x288>)
 8012202:	487b      	ldr	r0, [pc, #492]	@ (80123f0 <tcp_split_unsent_seg+0x27c>)
 8012204:	f006 fb9a 	bl	801893c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	7a9b      	ldrb	r3, [r3, #10]
 801220c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801220e:	7bfb      	ldrb	r3, [r7, #15]
 8012210:	009b      	lsls	r3, r3, #2
 8012212:	b2db      	uxtb	r3, r3
 8012214:	f003 0304 	and.w	r3, r3, #4
 8012218:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	891a      	ldrh	r2, [r3, #8]
 801221e:	887b      	ldrh	r3, [r7, #2]
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012224:	7bbb      	ldrb	r3, [r7, #14]
 8012226:	b29a      	uxth	r2, r3
 8012228:	89bb      	ldrh	r3, [r7, #12]
 801222a:	4413      	add	r3, r2
 801222c:	b29b      	uxth	r3, r3
 801222e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012232:	4619      	mov	r1, r3
 8012234:	2036      	movs	r0, #54	@ 0x36
 8012236:	f7fb fab3 	bl	800d7a0 <pbuf_alloc>
 801223a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	2b00      	cmp	r3, #0
 8012240:	f000 80b7 	beq.w	80123b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	891a      	ldrh	r2, [r3, #8]
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	891b      	ldrh	r3, [r3, #8]
 801224e:	1ad3      	subs	r3, r2, r3
 8012250:	b29a      	uxth	r2, r3
 8012252:	887b      	ldrh	r3, [r7, #2]
 8012254:	4413      	add	r3, r2
 8012256:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	6858      	ldr	r0, [r3, #4]
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	685a      	ldr	r2, [r3, #4]
 8012260:	7bbb      	ldrb	r3, [r7, #14]
 8012262:	18d1      	adds	r1, r2, r3
 8012264:	897b      	ldrh	r3, [r7, #10]
 8012266:	89ba      	ldrh	r2, [r7, #12]
 8012268:	f7fb ff84 	bl	800e174 <pbuf_copy_partial>
 801226c:	4603      	mov	r3, r0
 801226e:	461a      	mov	r2, r3
 8012270:	89bb      	ldrh	r3, [r7, #12]
 8012272:	4293      	cmp	r3, r2
 8012274:	f040 809f 	bne.w	80123b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	899b      	ldrh	r3, [r3, #12]
 801227e:	b29b      	uxth	r3, r3
 8012280:	4618      	mov	r0, r3
 8012282:	f7fa f8bb 	bl	800c3fc <lwip_htons>
 8012286:	4603      	mov	r3, r0
 8012288:	b2db      	uxtb	r3, r3
 801228a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801228e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012290:	2300      	movs	r3, #0
 8012292:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012294:	7efb      	ldrb	r3, [r7, #27]
 8012296:	f003 0308 	and.w	r3, r3, #8
 801229a:	2b00      	cmp	r3, #0
 801229c:	d007      	beq.n	80122ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801229e:	7efb      	ldrb	r3, [r7, #27]
 80122a0:	f023 0308 	bic.w	r3, r3, #8
 80122a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80122a6:	7ebb      	ldrb	r3, [r7, #26]
 80122a8:	f043 0308 	orr.w	r3, r3, #8
 80122ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80122ae:	7efb      	ldrb	r3, [r7, #27]
 80122b0:	f003 0301 	and.w	r3, r3, #1
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d007      	beq.n	80122c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80122b8:	7efb      	ldrb	r3, [r7, #27]
 80122ba:	f023 0301 	bic.w	r3, r3, #1
 80122be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80122c0:	7ebb      	ldrb	r3, [r7, #26]
 80122c2:	f043 0301 	orr.w	r3, r3, #1
 80122c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7fa f8a9 	bl	800c426 <lwip_htonl>
 80122d4:	4602      	mov	r2, r0
 80122d6:	887b      	ldrh	r3, [r7, #2]
 80122d8:	18d1      	adds	r1, r2, r3
 80122da:	7eba      	ldrb	r2, [r7, #26]
 80122dc:	7bfb      	ldrb	r3, [r7, #15]
 80122de:	9300      	str	r3, [sp, #0]
 80122e0:	460b      	mov	r3, r1
 80122e2:	6939      	ldr	r1, [r7, #16]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7ff fea9 	bl	801203c <tcp_create_segment>
 80122ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80122ec:	69fb      	ldr	r3, [r7, #28]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d063      	beq.n	80123ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7fb fdc4 	bl	800de84 <pbuf_clen>
 80122fc:	4603      	mov	r3, r0
 80122fe:	461a      	mov	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012306:	1a9b      	subs	r3, r3, r2
 8012308:	b29a      	uxth	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	6858      	ldr	r0, [r3, #4]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	891a      	ldrh	r2, [r3, #8]
 801231a:	89bb      	ldrh	r3, [r7, #12]
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	b29b      	uxth	r3, r3
 8012320:	4619      	mov	r1, r3
 8012322:	f7fb fb9b 	bl	800da5c <pbuf_realloc>
  useg->len -= remainder;
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	891a      	ldrh	r2, [r3, #8]
 801232a:	89bb      	ldrh	r3, [r7, #12]
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	b29a      	uxth	r2, r3
 8012330:	697b      	ldr	r3, [r7, #20]
 8012332:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	899b      	ldrh	r3, [r3, #12]
 801233a:	b29c      	uxth	r4, r3
 801233c:	7efb      	ldrb	r3, [r7, #27]
 801233e:	b29b      	uxth	r3, r3
 8012340:	4618      	mov	r0, r3
 8012342:	f7fa f85b 	bl	800c3fc <lwip_htons>
 8012346:	4603      	mov	r3, r0
 8012348:	461a      	mov	r2, r3
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	4322      	orrs	r2, r4
 8012350:	b292      	uxth	r2, r2
 8012352:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	f7fb fd93 	bl	800de84 <pbuf_clen>
 801235e:	4603      	mov	r3, r0
 8012360:	461a      	mov	r2, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012368:	4413      	add	r3, r2
 801236a:	b29a      	uxth	r2, r3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	f7fb fd84 	bl	800de84 <pbuf_clen>
 801237c:	4603      	mov	r3, r0
 801237e:	461a      	mov	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012386:	4413      	add	r3, r2
 8012388:	b29a      	uxth	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	69fa      	ldr	r2, [r7, #28]
 801239c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d103      	bne.n	80123ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2200      	movs	r2, #0
 80123aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	e016      	b.n	80123e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80123b2:	bf00      	nop
 80123b4:	e002      	b.n	80123bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123b6:	bf00      	nop
 80123b8:	e000      	b.n	80123bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d006      	beq.n	80123d0 <tcp_split_unsent_seg+0x25c>
 80123c2:	4b09      	ldr	r3, [pc, #36]	@ (80123e8 <tcp_split_unsent_seg+0x274>)
 80123c4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80123c8:	490d      	ldr	r1, [pc, #52]	@ (8012400 <tcp_split_unsent_seg+0x28c>)
 80123ca:	4809      	ldr	r0, [pc, #36]	@ (80123f0 <tcp_split_unsent_seg+0x27c>)
 80123cc:	f006 fab6 	bl	801893c <iprintf>
  if (p != NULL) {
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d002      	beq.n	80123dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80123d6:	6938      	ldr	r0, [r7, #16]
 80123d8:	f7fb fcc6 	bl	800dd68 <pbuf_free>
  }

  return ERR_MEM;
 80123dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3724      	adds	r7, #36	@ 0x24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd90      	pop	{r4, r7, pc}
 80123e8:	0801af90 	.word	0x0801af90
 80123ec:	0801b324 	.word	0x0801b324
 80123f0:	0801afe4 	.word	0x0801afe4
 80123f4:	0801b348 	.word	0x0801b348
 80123f8:	0801b36c 	.word	0x0801b36c
 80123fc:	0801b37c 	.word	0x0801b37c
 8012400:	0801b38c 	.word	0x0801b38c

08012404 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012404:	b590      	push	{r4, r7, lr}
 8012406:	b085      	sub	sp, #20
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <tcp_send_fin+0x1c>
 8012412:	4b21      	ldr	r3, [pc, #132]	@ (8012498 <tcp_send_fin+0x94>)
 8012414:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012418:	4920      	ldr	r1, [pc, #128]	@ (801249c <tcp_send_fin+0x98>)
 801241a:	4821      	ldr	r0, [pc, #132]	@ (80124a0 <tcp_send_fin+0x9c>)
 801241c:	f006 fa8e 	bl	801893c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012424:	2b00      	cmp	r3, #0
 8012426:	d02e      	beq.n	8012486 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801242c:	60fb      	str	r3, [r7, #12]
 801242e:	e002      	b.n	8012436 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1f8      	bne.n	8012430 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	899b      	ldrh	r3, [r3, #12]
 8012444:	b29b      	uxth	r3, r3
 8012446:	4618      	mov	r0, r3
 8012448:	f7f9 ffd8 	bl	800c3fc <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	b2db      	uxtb	r3, r3
 8012450:	f003 0307 	and.w	r3, r3, #7
 8012454:	2b00      	cmp	r3, #0
 8012456:	d116      	bne.n	8012486 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	899b      	ldrh	r3, [r3, #12]
 801245e:	b29c      	uxth	r4, r3
 8012460:	2001      	movs	r0, #1
 8012462:	f7f9 ffcb 	bl	800c3fc <lwip_htons>
 8012466:	4603      	mov	r3, r0
 8012468:	461a      	mov	r2, r3
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	4322      	orrs	r2, r4
 8012470:	b292      	uxth	r2, r2
 8012472:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	8b5b      	ldrh	r3, [r3, #26]
 8012478:	f043 0320 	orr.w	r3, r3, #32
 801247c:	b29a      	uxth	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012482:	2300      	movs	r3, #0
 8012484:	e004      	b.n	8012490 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012486:	2101      	movs	r1, #1
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 f80b 	bl	80124a4 <tcp_enqueue_flags>
 801248e:	4603      	mov	r3, r0
}
 8012490:	4618      	mov	r0, r3
 8012492:	3714      	adds	r7, #20
 8012494:	46bd      	mov	sp, r7
 8012496:	bd90      	pop	{r4, r7, pc}
 8012498:	0801af90 	.word	0x0801af90
 801249c:	0801b398 	.word	0x0801b398
 80124a0:	0801afe4 	.word	0x0801afe4

080124a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b08a      	sub	sp, #40	@ 0x28
 80124a8:	af02      	add	r7, sp, #8
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	460b      	mov	r3, r1
 80124ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80124b0:	2300      	movs	r3, #0
 80124b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80124b4:	2300      	movs	r3, #0
 80124b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80124b8:	78fb      	ldrb	r3, [r7, #3]
 80124ba:	f003 0303 	and.w	r3, r3, #3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_enqueue_flags+0x2c>
 80124c2:	4b67      	ldr	r3, [pc, #412]	@ (8012660 <tcp_enqueue_flags+0x1bc>)
 80124c4:	f240 4211 	movw	r2, #1041	@ 0x411
 80124c8:	4966      	ldr	r1, [pc, #408]	@ (8012664 <tcp_enqueue_flags+0x1c0>)
 80124ca:	4867      	ldr	r0, [pc, #412]	@ (8012668 <tcp_enqueue_flags+0x1c4>)
 80124cc:	f006 fa36 	bl	801893c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_enqueue_flags+0x40>
 80124d6:	4b62      	ldr	r3, [pc, #392]	@ (8012660 <tcp_enqueue_flags+0x1bc>)
 80124d8:	f240 4213 	movw	r2, #1043	@ 0x413
 80124dc:	4963      	ldr	r1, [pc, #396]	@ (801266c <tcp_enqueue_flags+0x1c8>)
 80124de:	4862      	ldr	r0, [pc, #392]	@ (8012668 <tcp_enqueue_flags+0x1c4>)
 80124e0:	f006 fa2c 	bl	801893c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80124e4:	78fb      	ldrb	r3, [r7, #3]
 80124e6:	f003 0302 	and.w	r3, r3, #2
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d001      	beq.n	80124f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80124ee:	2301      	movs	r3, #1
 80124f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124f2:	7ffb      	ldrb	r3, [r7, #31]
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	f003 0304 	and.w	r3, r3, #4
 80124fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80124fe:	7dfb      	ldrb	r3, [r7, #23]
 8012500:	b29b      	uxth	r3, r3
 8012502:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012506:	4619      	mov	r1, r3
 8012508:	2036      	movs	r0, #54	@ 0x36
 801250a:	f7fb f949 	bl	800d7a0 <pbuf_alloc>
 801250e:	6138      	str	r0, [r7, #16]
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d109      	bne.n	801252a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	8b5b      	ldrh	r3, [r3, #26]
 801251a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801251e:	b29a      	uxth	r2, r3
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012524:	f04f 33ff 	mov.w	r3, #4294967295
 8012528:	e095      	b.n	8012656 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	895a      	ldrh	r2, [r3, #10]
 801252e:	7dfb      	ldrb	r3, [r7, #23]
 8012530:	b29b      	uxth	r3, r3
 8012532:	429a      	cmp	r2, r3
 8012534:	d206      	bcs.n	8012544 <tcp_enqueue_flags+0xa0>
 8012536:	4b4a      	ldr	r3, [pc, #296]	@ (8012660 <tcp_enqueue_flags+0x1bc>)
 8012538:	f240 4239 	movw	r2, #1081	@ 0x439
 801253c:	494c      	ldr	r1, [pc, #304]	@ (8012670 <tcp_enqueue_flags+0x1cc>)
 801253e:	484a      	ldr	r0, [pc, #296]	@ (8012668 <tcp_enqueue_flags+0x1c4>)
 8012540:	f006 f9fc 	bl	801893c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012548:	78fa      	ldrb	r2, [r7, #3]
 801254a:	7ffb      	ldrb	r3, [r7, #31]
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	460b      	mov	r3, r1
 8012550:	6939      	ldr	r1, [r7, #16]
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f7ff fd72 	bl	801203c <tcp_create_segment>
 8012558:	60f8      	str	r0, [r7, #12]
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d109      	bne.n	8012574 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	8b5b      	ldrh	r3, [r3, #26]
 8012564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012568:	b29a      	uxth	r2, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801256e:	f04f 33ff 	mov.w	r3, #4294967295
 8012572:	e070      	b.n	8012656 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	f003 0303 	and.w	r3, r3, #3
 801257c:	2b00      	cmp	r3, #0
 801257e:	d006      	beq.n	801258e <tcp_enqueue_flags+0xea>
 8012580:	4b37      	ldr	r3, [pc, #220]	@ (8012660 <tcp_enqueue_flags+0x1bc>)
 8012582:	f240 4242 	movw	r2, #1090	@ 0x442
 8012586:	493b      	ldr	r1, [pc, #236]	@ (8012674 <tcp_enqueue_flags+0x1d0>)
 8012588:	4837      	ldr	r0, [pc, #220]	@ (8012668 <tcp_enqueue_flags+0x1c4>)
 801258a:	f006 f9d7 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	891b      	ldrh	r3, [r3, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d006      	beq.n	80125a4 <tcp_enqueue_flags+0x100>
 8012596:	4b32      	ldr	r3, [pc, #200]	@ (8012660 <tcp_enqueue_flags+0x1bc>)
 8012598:	f240 4243 	movw	r2, #1091	@ 0x443
 801259c:	4936      	ldr	r1, [pc, #216]	@ (8012678 <tcp_enqueue_flags+0x1d4>)
 801259e:	4832      	ldr	r0, [pc, #200]	@ (8012668 <tcp_enqueue_flags+0x1c4>)
 80125a0:	f006 f9cc 	bl	801893c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d103      	bne.n	80125b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80125b2:	e00d      	b.n	80125d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125b8:	61bb      	str	r3, [r7, #24]
 80125ba:	e002      	b.n	80125c2 <tcp_enqueue_flags+0x11e>
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	61bb      	str	r3, [r7, #24]
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1f8      	bne.n	80125bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80125ca:	69bb      	ldr	r3, [r7, #24]
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2200      	movs	r2, #0
 80125d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80125d8:	78fb      	ldrb	r3, [r7, #3]
 80125da:	f003 0302 	and.w	r3, r3, #2
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d104      	bne.n	80125ec <tcp_enqueue_flags+0x148>
 80125e2:	78fb      	ldrb	r3, [r7, #3]
 80125e4:	f003 0301 	and.w	r3, r3, #1
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d004      	beq.n	80125f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80125f0:	1c5a      	adds	r2, r3, #1
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80125f6:	78fb      	ldrb	r3, [r7, #3]
 80125f8:	f003 0301 	and.w	r3, r3, #1
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d006      	beq.n	801260e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	8b5b      	ldrh	r3, [r3, #26]
 8012604:	f043 0320 	orr.w	r3, r3, #32
 8012608:	b29a      	uxth	r2, r3
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f7fb fc36 	bl	800de84 <pbuf_clen>
 8012618:	4603      	mov	r3, r0
 801261a:	461a      	mov	r2, r3
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012622:	4413      	add	r3, r2
 8012624:	b29a      	uxth	r2, r3
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00e      	beq.n	8012654 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801263a:	2b00      	cmp	r3, #0
 801263c:	d10a      	bne.n	8012654 <tcp_enqueue_flags+0x1b0>
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012642:	2b00      	cmp	r3, #0
 8012644:	d106      	bne.n	8012654 <tcp_enqueue_flags+0x1b0>
 8012646:	4b06      	ldr	r3, [pc, #24]	@ (8012660 <tcp_enqueue_flags+0x1bc>)
 8012648:	f240 4265 	movw	r2, #1125	@ 0x465
 801264c:	490b      	ldr	r1, [pc, #44]	@ (801267c <tcp_enqueue_flags+0x1d8>)
 801264e:	4806      	ldr	r0, [pc, #24]	@ (8012668 <tcp_enqueue_flags+0x1c4>)
 8012650:	f006 f974 	bl	801893c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012654:	2300      	movs	r3, #0
}
 8012656:	4618      	mov	r0, r3
 8012658:	3720      	adds	r7, #32
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
 801265e:	bf00      	nop
 8012660:	0801af90 	.word	0x0801af90
 8012664:	0801b3b4 	.word	0x0801b3b4
 8012668:	0801afe4 	.word	0x0801afe4
 801266c:	0801b40c 	.word	0x0801b40c
 8012670:	0801b42c 	.word	0x0801b42c
 8012674:	0801b468 	.word	0x0801b468
 8012678:	0801b480 	.word	0x0801b480
 801267c:	0801b4ac 	.word	0x0801b4ac

08012680 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012680:	b5b0      	push	{r4, r5, r7, lr}
 8012682:	b08a      	sub	sp, #40	@ 0x28
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d106      	bne.n	801269c <tcp_output+0x1c>
 801268e:	4b8a      	ldr	r3, [pc, #552]	@ (80128b8 <tcp_output+0x238>)
 8012690:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012694:	4989      	ldr	r1, [pc, #548]	@ (80128bc <tcp_output+0x23c>)
 8012696:	488a      	ldr	r0, [pc, #552]	@ (80128c0 <tcp_output+0x240>)
 8012698:	f006 f950 	bl	801893c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	7d1b      	ldrb	r3, [r3, #20]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d106      	bne.n	80126b2 <tcp_output+0x32>
 80126a4:	4b84      	ldr	r3, [pc, #528]	@ (80128b8 <tcp_output+0x238>)
 80126a6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80126aa:	4986      	ldr	r1, [pc, #536]	@ (80128c4 <tcp_output+0x244>)
 80126ac:	4884      	ldr	r0, [pc, #528]	@ (80128c0 <tcp_output+0x240>)
 80126ae:	f006 f945 	bl	801893c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80126b2:	4b85      	ldr	r3, [pc, #532]	@ (80128c8 <tcp_output+0x248>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d101      	bne.n	80126c0 <tcp_output+0x40>
    return ERR_OK;
 80126bc:	2300      	movs	r3, #0
 80126be:	e1ce      	b.n	8012a5e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80126cc:	4293      	cmp	r3, r2
 80126ce:	bf28      	it	cs
 80126d0:	4613      	movcs	r3, r2
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80126dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d10b      	bne.n	80126fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	8b5b      	ldrh	r3, [r3, #26]
 80126e6:	f003 0302 	and.w	r3, r3, #2
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	f000 81aa 	beq.w	8012a44 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 fdcb 	bl	801328c <tcp_send_empty_ack>
 80126f6:	4603      	mov	r3, r0
 80126f8:	e1b1      	b.n	8012a5e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	3304      	adds	r3, #4
 8012700:	461a      	mov	r2, r3
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7ff fc7e 	bl	8012004 <tcp_route>
 8012708:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d102      	bne.n	8012716 <tcp_output+0x96>
    return ERR_RTE;
 8012710:	f06f 0303 	mvn.w	r3, #3
 8012714:	e1a3      	b.n	8012a5e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d003      	beq.n	8012724 <tcp_output+0xa4>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d111      	bne.n	8012748 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d002      	beq.n	8012730 <tcp_output+0xb0>
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	3304      	adds	r3, #4
 801272e:	e000      	b.n	8012732 <tcp_output+0xb2>
 8012730:	2300      	movs	r3, #0
 8012732:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d102      	bne.n	8012740 <tcp_output+0xc0>
      return ERR_RTE;
 801273a:	f06f 0303 	mvn.w	r3, #3
 801273e:	e18e      	b.n	8012a5e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	4618      	mov	r0, r3
 8012750:	f7f9 fe69 	bl	800c426 <lwip_htonl>
 8012754:	4602      	mov	r2, r0
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801275e:	8912      	ldrh	r2, [r2, #8]
 8012760:	4413      	add	r3, r2
 8012762:	69ba      	ldr	r2, [r7, #24]
 8012764:	429a      	cmp	r2, r3
 8012766:	d227      	bcs.n	80127b8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801276e:	461a      	mov	r2, r3
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	4293      	cmp	r3, r2
 8012774:	d114      	bne.n	80127a0 <tcp_output+0x120>
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801277a:	2b00      	cmp	r3, #0
 801277c:	d110      	bne.n	80127a0 <tcp_output+0x120>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012784:	2b00      	cmp	r3, #0
 8012786:	d10b      	bne.n	80127a0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2200      	movs	r2, #0
 801278c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2201      	movs	r2, #1
 8012794:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2200      	movs	r2, #0
 801279c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	8b5b      	ldrh	r3, [r3, #26]
 80127a4:	f003 0302 	and.w	r3, r3, #2
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 814d 	beq.w	8012a48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f000 fd6c 	bl	801328c <tcp_send_empty_ack>
 80127b4:	4603      	mov	r3, r0
 80127b6:	e152      	b.n	8012a5e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80127c6:	6a3b      	ldr	r3, [r7, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f000 811c 	beq.w	8012a06 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80127ce:	e002      	b.n	80127d6 <tcp_output+0x156>
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	623b      	str	r3, [r7, #32]
 80127d6:	6a3b      	ldr	r3, [r7, #32]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d1f8      	bne.n	80127d0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80127de:	e112      	b.n	8012a06 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80127e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	899b      	ldrh	r3, [r3, #12]
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7f9 fe07 	bl	800c3fc <lwip_htons>
 80127ee:	4603      	mov	r3, r0
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	f003 0304 	and.w	r3, r3, #4
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d006      	beq.n	8012808 <tcp_output+0x188>
 80127fa:	4b2f      	ldr	r3, [pc, #188]	@ (80128b8 <tcp_output+0x238>)
 80127fc:	f240 5236 	movw	r2, #1334	@ 0x536
 8012800:	4932      	ldr	r1, [pc, #200]	@ (80128cc <tcp_output+0x24c>)
 8012802:	482f      	ldr	r0, [pc, #188]	@ (80128c0 <tcp_output+0x240>)
 8012804:	f006 f89a 	bl	801893c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801280c:	2b00      	cmp	r3, #0
 801280e:	d01f      	beq.n	8012850 <tcp_output+0x1d0>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	8b5b      	ldrh	r3, [r3, #26]
 8012814:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012818:	2b00      	cmp	r3, #0
 801281a:	d119      	bne.n	8012850 <tcp_output+0x1d0>
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00b      	beq.n	801283c <tcp_output+0x1bc>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d110      	bne.n	8012850 <tcp_output+0x1d0>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012832:	891a      	ldrh	r2, [r3, #8]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012838:	429a      	cmp	r2, r3
 801283a:	d209      	bcs.n	8012850 <tcp_output+0x1d0>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012842:	2b00      	cmp	r3, #0
 8012844:	d004      	beq.n	8012850 <tcp_output+0x1d0>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801284c:	2b08      	cmp	r3, #8
 801284e:	d901      	bls.n	8012854 <tcp_output+0x1d4>
 8012850:	2301      	movs	r3, #1
 8012852:	e000      	b.n	8012856 <tcp_output+0x1d6>
 8012854:	2300      	movs	r3, #0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d106      	bne.n	8012868 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	8b5b      	ldrh	r3, [r3, #26]
 801285e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012862:	2b00      	cmp	r3, #0
 8012864:	f000 80e4 	beq.w	8012a30 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	7d1b      	ldrb	r3, [r3, #20]
 801286c:	2b02      	cmp	r3, #2
 801286e:	d00d      	beq.n	801288c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	899b      	ldrh	r3, [r3, #12]
 8012876:	b29c      	uxth	r4, r3
 8012878:	2010      	movs	r0, #16
 801287a:	f7f9 fdbf 	bl	800c3fc <lwip_htons>
 801287e:	4603      	mov	r3, r0
 8012880:	461a      	mov	r2, r3
 8012882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	4322      	orrs	r2, r4
 8012888:	b292      	uxth	r2, r2
 801288a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801288c:	697a      	ldr	r2, [r7, #20]
 801288e:	6879      	ldr	r1, [r7, #4]
 8012890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012892:	f000 f909 	bl	8012aa8 <tcp_output_segment>
 8012896:	4603      	mov	r3, r0
 8012898:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d016      	beq.n	80128d0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	8b5b      	ldrh	r3, [r3, #26]
 80128a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128aa:	b29a      	uxth	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	835a      	strh	r2, [r3, #26]
      return err;
 80128b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128b4:	e0d3      	b.n	8012a5e <tcp_output+0x3de>
 80128b6:	bf00      	nop
 80128b8:	0801af90 	.word	0x0801af90
 80128bc:	0801b4d4 	.word	0x0801b4d4
 80128c0:	0801afe4 	.word	0x0801afe4
 80128c4:	0801b4ec 	.word	0x0801b4ec
 80128c8:	2400e9b0 	.word	0x2400e9b0
 80128cc:	0801b514 	.word	0x0801b514
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80128d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	7d1b      	ldrb	r3, [r3, #20]
 80128dc:	2b02      	cmp	r3, #2
 80128de:	d006      	beq.n	80128ee <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	8b5b      	ldrh	r3, [r3, #26]
 80128e4:	f023 0303 	bic.w	r3, r3, #3
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80128ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7f9 fd96 	bl	800c426 <lwip_htonl>
 80128fa:	4604      	mov	r4, r0
 80128fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128fe:	891b      	ldrh	r3, [r3, #8]
 8012900:	461d      	mov	r5, r3
 8012902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	899b      	ldrh	r3, [r3, #12]
 8012908:	b29b      	uxth	r3, r3
 801290a:	4618      	mov	r0, r3
 801290c:	f7f9 fd76 	bl	800c3fc <lwip_htons>
 8012910:	4603      	mov	r3, r0
 8012912:	b2db      	uxtb	r3, r3
 8012914:	f003 0303 	and.w	r3, r3, #3
 8012918:	2b00      	cmp	r3, #0
 801291a:	d001      	beq.n	8012920 <tcp_output+0x2a0>
 801291c:	2301      	movs	r3, #1
 801291e:	e000      	b.n	8012922 <tcp_output+0x2a2>
 8012920:	2300      	movs	r3, #0
 8012922:	442b      	add	r3, r5
 8012924:	4423      	add	r3, r4
 8012926:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	1ad3      	subs	r3, r2, r3
 8012930:	2b00      	cmp	r3, #0
 8012932:	da02      	bge.n	801293a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293c:	891b      	ldrh	r3, [r3, #8]
 801293e:	461c      	mov	r4, r3
 8012940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	899b      	ldrh	r3, [r3, #12]
 8012946:	b29b      	uxth	r3, r3
 8012948:	4618      	mov	r0, r3
 801294a:	f7f9 fd57 	bl	800c3fc <lwip_htons>
 801294e:	4603      	mov	r3, r0
 8012950:	b2db      	uxtb	r3, r3
 8012952:	f003 0303 	and.w	r3, r3, #3
 8012956:	2b00      	cmp	r3, #0
 8012958:	d001      	beq.n	801295e <tcp_output+0x2de>
 801295a:	2301      	movs	r3, #1
 801295c:	e000      	b.n	8012960 <tcp_output+0x2e0>
 801295e:	2300      	movs	r3, #0
 8012960:	4423      	add	r3, r4
 8012962:	2b00      	cmp	r3, #0
 8012964:	d049      	beq.n	80129fa <tcp_output+0x37a>
      seg->next = NULL;
 8012966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012968:	2200      	movs	r2, #0
 801296a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012970:	2b00      	cmp	r3, #0
 8012972:	d105      	bne.n	8012980 <tcp_output+0x300>
        pcb->unacked = seg;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012978:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801297c:	623b      	str	r3, [r7, #32]
 801297e:	e03f      	b.n	8012a00 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	f7f9 fd4d 	bl	800c426 <lwip_htonl>
 801298c:	4604      	mov	r4, r0
 801298e:	6a3b      	ldr	r3, [r7, #32]
 8012990:	68db      	ldr	r3, [r3, #12]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	4618      	mov	r0, r3
 8012996:	f7f9 fd46 	bl	800c426 <lwip_htonl>
 801299a:	4603      	mov	r3, r0
 801299c:	1ae3      	subs	r3, r4, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	da24      	bge.n	80129ec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3370      	adds	r3, #112	@ 0x70
 80129a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129a8:	e002      	b.n	80129b0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d011      	beq.n	80129dc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80129b8:	69fb      	ldr	r3, [r7, #28]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7f9 fd30 	bl	800c426 <lwip_htonl>
 80129c6:	4604      	mov	r4, r0
 80129c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ca:	68db      	ldr	r3, [r3, #12]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7f9 fd29 	bl	800c426 <lwip_htonl>
 80129d4:	4603      	mov	r3, r0
 80129d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80129d8:	2b00      	cmp	r3, #0
 80129da:	dbe6      	blt.n	80129aa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129e8:	601a      	str	r2, [r3, #0]
 80129ea:	e009      	b.n	8012a00 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80129ec:	6a3b      	ldr	r3, [r7, #32]
 80129ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80129f2:	6a3b      	ldr	r3, [r7, #32]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	623b      	str	r3, [r7, #32]
 80129f8:	e002      	b.n	8012a00 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80129fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80129fc:	f7fc fc45 	bl	800f28a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d012      	beq.n	8012a32 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7f9 fd07 	bl	800c426 <lwip_htonl>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a22:	8912      	ldrh	r2, [r2, #8]
 8012a24:	4413      	add	r3, r2
  while (seg != NULL &&
 8012a26:	69ba      	ldr	r2, [r7, #24]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	f4bf aed9 	bcs.w	80127e0 <tcp_output+0x160>
 8012a2e:	e000      	b.n	8012a32 <tcp_output+0x3b2>
      break;
 8012a30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d108      	bne.n	8012a4c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012a42:	e004      	b.n	8012a4e <tcp_output+0x3ce>
    goto output_done;
 8012a44:	bf00      	nop
 8012a46:	e002      	b.n	8012a4e <tcp_output+0x3ce>
    goto output_done;
 8012a48:	bf00      	nop
 8012a4a:	e000      	b.n	8012a4e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012a4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	8b5b      	ldrh	r3, [r3, #26]
 8012a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012a56:	b29a      	uxth	r2, r3
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012a5c:	2300      	movs	r3, #0
}
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3728      	adds	r7, #40	@ 0x28
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bdb0      	pop	{r4, r5, r7, pc}
 8012a66:	bf00      	nop

08012a68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d106      	bne.n	8012a84 <tcp_output_segment_busy+0x1c>
 8012a76:	4b09      	ldr	r3, [pc, #36]	@ (8012a9c <tcp_output_segment_busy+0x34>)
 8012a78:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012a7c:	4908      	ldr	r1, [pc, #32]	@ (8012aa0 <tcp_output_segment_busy+0x38>)
 8012a7e:	4809      	ldr	r0, [pc, #36]	@ (8012aa4 <tcp_output_segment_busy+0x3c>)
 8012a80:	f005 ff5c 	bl	801893c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	7b9b      	ldrb	r3, [r3, #14]
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d001      	beq.n	8012a92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	e000      	b.n	8012a94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3708      	adds	r7, #8
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	0801af90 	.word	0x0801af90
 8012aa0:	0801b52c 	.word	0x0801b52c
 8012aa4:	0801afe4 	.word	0x0801afe4

08012aa8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012aa8:	b5b0      	push	{r4, r5, r7, lr}
 8012aaa:	b08c      	sub	sp, #48	@ 0x30
 8012aac:	af04      	add	r7, sp, #16
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <tcp_output_segment+0x20>
 8012aba:	4b64      	ldr	r3, [pc, #400]	@ (8012c4c <tcp_output_segment+0x1a4>)
 8012abc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012ac0:	4963      	ldr	r1, [pc, #396]	@ (8012c50 <tcp_output_segment+0x1a8>)
 8012ac2:	4864      	ldr	r0, [pc, #400]	@ (8012c54 <tcp_output_segment+0x1ac>)
 8012ac4:	f005 ff3a 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <tcp_output_segment+0x34>
 8012ace:	4b5f      	ldr	r3, [pc, #380]	@ (8012c4c <tcp_output_segment+0x1a4>)
 8012ad0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012ad4:	4960      	ldr	r1, [pc, #384]	@ (8012c58 <tcp_output_segment+0x1b0>)
 8012ad6:	485f      	ldr	r0, [pc, #380]	@ (8012c54 <tcp_output_segment+0x1ac>)
 8012ad8:	f005 ff30 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <tcp_output_segment+0x48>
 8012ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8012c4c <tcp_output_segment+0x1a4>)
 8012ae4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012ae8:	495c      	ldr	r1, [pc, #368]	@ (8012c5c <tcp_output_segment+0x1b4>)
 8012aea:	485a      	ldr	r0, [pc, #360]	@ (8012c54 <tcp_output_segment+0x1ac>)
 8012aec:	f005 ff26 	bl	801893c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	f7ff ffb9 	bl	8012a68 <tcp_output_segment_busy>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d001      	beq.n	8012b00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012afc:	2300      	movs	r3, #0
 8012afe:	e0a1      	b.n	8012c44 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	68dc      	ldr	r4, [r3, #12]
 8012b08:	4610      	mov	r0, r2
 8012b0a:	f7f9 fc8c 	bl	800c426 <lwip_htonl>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	68dc      	ldr	r4, [r3, #12]
 8012b1a:	4610      	mov	r0, r2
 8012b1c:	f7f9 fc6e 	bl	800c3fc <lwip_htons>
 8012b20:	4603      	mov	r3, r0
 8012b22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b28:	68ba      	ldr	r2, [r7, #8]
 8012b2a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012b2c:	441a      	add	r2, r3
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	3314      	adds	r3, #20
 8012b38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	7a9b      	ldrb	r3, [r3, #10]
 8012b3e:	f003 0301 	and.w	r3, r3, #1
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d015      	beq.n	8012b72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	3304      	adds	r3, #4
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	6879      	ldr	r1, [r7, #4]
 8012b4e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012b52:	f7fc fe91 	bl	800f878 <tcp_eff_send_mss_netif>
 8012b56:	4603      	mov	r3, r0
 8012b58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012b5a:	8b7b      	ldrh	r3, [r7, #26]
 8012b5c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f9 fc60 	bl	800c426 <lwip_htonl>
 8012b66:	4602      	mov	r2, r0
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	3304      	adds	r3, #4
 8012b70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	da02      	bge.n	8012b82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d10c      	bne.n	8012ba4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012b8a:	4b35      	ldr	r3, [pc, #212]	@ (8012c60 <tcp_output_segment+0x1b8>)
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	68db      	ldr	r3, [r3, #12]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7f9 fc44 	bl	800c426 <lwip_htonl>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	68da      	ldr	r2, [r3, #12]
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	8959      	ldrh	r1, [r3, #10]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	8b3a      	ldrh	r2, [r7, #24]
 8012bbe:	1a8a      	subs	r2, r1, r2
 8012bc0:	b292      	uxth	r2, r2
 8012bc2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	685b      	ldr	r3, [r3, #4]
 8012bc8:	8919      	ldrh	r1, [r3, #8]
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	8b3a      	ldrh	r2, [r7, #24]
 8012bd0:	1a8a      	subs	r2, r1, r2
 8012bd2:	b292      	uxth	r2, r2
 8012bd4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	68fa      	ldr	r2, [r7, #12]
 8012bdc:	68d2      	ldr	r2, [r2, #12]
 8012bde:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	2200      	movs	r2, #0
 8012be6:	741a      	strb	r2, [r3, #16]
 8012be8:	2200      	movs	r2, #0
 8012bea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	68da      	ldr	r2, [r3, #12]
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	7a9b      	ldrb	r3, [r3, #10]
 8012bf4:	f003 0301 	and.w	r3, r3, #1
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d001      	beq.n	8012c00 <tcp_output_segment+0x158>
 8012bfc:	2318      	movs	r3, #24
 8012bfe:	e000      	b.n	8012c02 <tcp_output_segment+0x15a>
 8012c00:	2314      	movs	r3, #20
 8012c02:	4413      	add	r3, r2
 8012c04:	69fa      	ldr	r2, [r7, #28]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d006      	beq.n	8012c18 <tcp_output_segment+0x170>
 8012c0a:	4b10      	ldr	r3, [pc, #64]	@ (8012c4c <tcp_output_segment+0x1a4>)
 8012c0c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012c10:	4914      	ldr	r1, [pc, #80]	@ (8012c64 <tcp_output_segment+0x1bc>)
 8012c12:	4810      	ldr	r0, [pc, #64]	@ (8012c54 <tcp_output_segment+0x1ac>)
 8012c14:	f005 fe92 	bl	801893c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	6858      	ldr	r0, [r3, #4]
 8012c1c:	68b9      	ldr	r1, [r7, #8]
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	1d1c      	adds	r4, r3, #4
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	7add      	ldrb	r5, [r3, #11]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	7a9b      	ldrb	r3, [r3, #10]
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	9202      	str	r2, [sp, #8]
 8012c2e:	2206      	movs	r2, #6
 8012c30:	9201      	str	r2, [sp, #4]
 8012c32:	9300      	str	r3, [sp, #0]
 8012c34:	462b      	mov	r3, r5
 8012c36:	4622      	mov	r2, r4
 8012c38:	f004 fc3c 	bl	80174b4 <ip4_output_if>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3720      	adds	r7, #32
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c4c:	0801af90 	.word	0x0801af90
 8012c50:	0801b554 	.word	0x0801b554
 8012c54:	0801afe4 	.word	0x0801afe4
 8012c58:	0801b574 	.word	0x0801b574
 8012c5c:	0801b594 	.word	0x0801b594
 8012c60:	2400e964 	.word	0x2400e964
 8012c64:	0801b5b8 	.word	0x0801b5b8

08012c68 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012c68:	b5b0      	push	{r4, r5, r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <tcp_rexmit_rto_prepare+0x1c>
 8012c76:	4b31      	ldr	r3, [pc, #196]	@ (8012d3c <tcp_rexmit_rto_prepare+0xd4>)
 8012c78:	f240 6263 	movw	r2, #1635	@ 0x663
 8012c7c:	4930      	ldr	r1, [pc, #192]	@ (8012d40 <tcp_rexmit_rto_prepare+0xd8>)
 8012c7e:	4831      	ldr	r0, [pc, #196]	@ (8012d44 <tcp_rexmit_rto_prepare+0xdc>)
 8012c80:	f005 fe5c 	bl	801893c <iprintf>

  if (pcb->unacked == NULL) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012c8c:	f06f 0305 	mvn.w	r3, #5
 8012c90:	e050      	b.n	8012d34 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c96:	60fb      	str	r3, [r7, #12]
 8012c98:	e00b      	b.n	8012cb2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff fee4 	bl	8012a68 <tcp_output_segment_busy>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d002      	beq.n	8012cac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012ca6:	f06f 0305 	mvn.w	r3, #5
 8012caa:	e043      	b.n	8012d34 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	60fb      	str	r3, [r7, #12]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1ef      	bne.n	8012c9a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f7ff fed4 	bl	8012a68 <tcp_output_segment_busy>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d002      	beq.n	8012ccc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012cc6:	f06f 0305 	mvn.w	r3, #5
 8012cca:	e033      	b.n	8012d34 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	8b5b      	ldrh	r3, [r3, #26]
 8012ce6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f9 fb95 	bl	800c426 <lwip_htonl>
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	891b      	ldrh	r3, [r3, #8]
 8012d02:	461d      	mov	r5, r3
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	899b      	ldrh	r3, [r3, #12]
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7f9 fb75 	bl	800c3fc <lwip_htons>
 8012d12:	4603      	mov	r3, r0
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	f003 0303 	and.w	r3, r3, #3
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <tcp_rexmit_rto_prepare+0xba>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e000      	b.n	8012d24 <tcp_rexmit_rto_prepare+0xbc>
 8012d22:	2300      	movs	r3, #0
 8012d24:	442b      	add	r3, r5
 8012d26:	18e2      	adds	r2, r4, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012d32:	2300      	movs	r3, #0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8012d3c:	0801af90 	.word	0x0801af90
 8012d40:	0801b5cc 	.word	0x0801b5cc
 8012d44:	0801afe4 	.word	0x0801afe4

08012d48 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d106      	bne.n	8012d64 <tcp_rexmit_rto_commit+0x1c>
 8012d56:	4b0d      	ldr	r3, [pc, #52]	@ (8012d8c <tcp_rexmit_rto_commit+0x44>)
 8012d58:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012d5c:	490c      	ldr	r1, [pc, #48]	@ (8012d90 <tcp_rexmit_rto_commit+0x48>)
 8012d5e:	480d      	ldr	r0, [pc, #52]	@ (8012d94 <tcp_rexmit_rto_commit+0x4c>)
 8012d60:	f005 fdec 	bl	801893c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d6a:	2bff      	cmp	r3, #255	@ 0xff
 8012d6c:	d007      	beq.n	8012d7e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d74:	3301      	adds	r3, #1
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7ff fc7e 	bl	8012680 <tcp_output>
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	0801af90 	.word	0x0801af90
 8012d90:	0801b5f0 	.word	0x0801b5f0
 8012d94:	0801afe4 	.word	0x0801afe4

08012d98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <tcp_rexmit_rto+0x1c>
 8012da6:	4b0a      	ldr	r3, [pc, #40]	@ (8012dd0 <tcp_rexmit_rto+0x38>)
 8012da8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012dac:	4909      	ldr	r1, [pc, #36]	@ (8012dd4 <tcp_rexmit_rto+0x3c>)
 8012dae:	480a      	ldr	r0, [pc, #40]	@ (8012dd8 <tcp_rexmit_rto+0x40>)
 8012db0:	f005 fdc4 	bl	801893c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ff57 	bl	8012c68 <tcp_rexmit_rto_prepare>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d102      	bne.n	8012dc6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7ff ffc1 	bl	8012d48 <tcp_rexmit_rto_commit>
  }
}
 8012dc6:	bf00      	nop
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	0801af90 	.word	0x0801af90
 8012dd4:	0801b614 	.word	0x0801b614
 8012dd8:	0801afe4 	.word	0x0801afe4

08012ddc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012ddc:	b590      	push	{r4, r7, lr}
 8012dde:	b085      	sub	sp, #20
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_rexmit+0x1c>
 8012dea:	4b2f      	ldr	r3, [pc, #188]	@ (8012ea8 <tcp_rexmit+0xcc>)
 8012dec:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012df0:	492e      	ldr	r1, [pc, #184]	@ (8012eac <tcp_rexmit+0xd0>)
 8012df2:	482f      	ldr	r0, [pc, #188]	@ (8012eb0 <tcp_rexmit+0xd4>)
 8012df4:	f005 fda2 	bl	801893c <iprintf>

  if (pcb->unacked == NULL) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d102      	bne.n	8012e06 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012e00:	f06f 0305 	mvn.w	r3, #5
 8012e04:	e04c      	b.n	8012ea0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e0a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e0c:	68b8      	ldr	r0, [r7, #8]
 8012e0e:	f7ff fe2b 	bl	8012a68 <tcp_output_segment_busy>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d002      	beq.n	8012e1e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012e18:	f06f 0305 	mvn.w	r3, #5
 8012e1c:	e040      	b.n	8012ea0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	336c      	adds	r3, #108	@ 0x6c
 8012e2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e2c:	e002      	b.n	8012e34 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d011      	beq.n	8012e60 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7f9 faee 	bl	800c426 <lwip_htonl>
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7f9 fae7 	bl	800c426 <lwip_htonl>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	dbe6      	blt.n	8012e2e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681a      	ldr	r2, [r3, #0]
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	68ba      	ldr	r2, [r7, #8]
 8012e6c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d103      	bne.n	8012e7e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e84:	2bff      	cmp	r3, #255	@ 0xff
 8012e86:	d007      	beq.n	8012e98 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012e8e:	3301      	adds	r3, #1
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd90      	pop	{r4, r7, pc}
 8012ea8:	0801af90 	.word	0x0801af90
 8012eac:	0801b630 	.word	0x0801b630
 8012eb0:	0801afe4 	.word	0x0801afe4

08012eb4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <tcp_rexmit_fast+0x1c>
 8012ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8012f6c <tcp_rexmit_fast+0xb8>)
 8012ec4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012ec8:	4929      	ldr	r1, [pc, #164]	@ (8012f70 <tcp_rexmit_fast+0xbc>)
 8012eca:	482a      	ldr	r0, [pc, #168]	@ (8012f74 <tcp_rexmit_fast+0xc0>)
 8012ecc:	f005 fd36 	bl	801893c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d045      	beq.n	8012f64 <tcp_rexmit_fast+0xb0>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	8b5b      	ldrh	r3, [r3, #26]
 8012edc:	f003 0304 	and.w	r3, r3, #4
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d13f      	bne.n	8012f64 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff ff79 	bl	8012ddc <tcp_rexmit>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d139      	bne.n	8012f64 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012efc:	4293      	cmp	r3, r2
 8012efe:	bf28      	it	cs
 8012f00:	4613      	movcs	r3, r2
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	da00      	bge.n	8012f0a <tcp_rexmit_fast+0x56>
 8012f08:	3301      	adds	r3, #1
 8012f0a:	105b      	asrs	r3, r3, #1
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d206      	bcs.n	8012f34 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f3e:	4619      	mov	r1, r3
 8012f40:	0049      	lsls	r1, r1, #1
 8012f42:	440b      	add	r3, r1
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	4413      	add	r3, r2
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	8b5b      	ldrh	r3, [r3, #26]
 8012f54:	f043 0304 	orr.w	r3, r3, #4
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2200      	movs	r2, #0
 8012f62:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012f64:	bf00      	nop
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	0801af90 	.word	0x0801af90
 8012f70:	0801b648 	.word	0x0801b648
 8012f74:	0801afe4 	.word	0x0801afe4

08012f78 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b086      	sub	sp, #24
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	60f8      	str	r0, [r7, #12]
 8012f80:	607b      	str	r3, [r7, #4]
 8012f82:	460b      	mov	r3, r1
 8012f84:	817b      	strh	r3, [r7, #10]
 8012f86:	4613      	mov	r3, r2
 8012f88:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012f8a:	897a      	ldrh	r2, [r7, #10]
 8012f8c:	893b      	ldrh	r3, [r7, #8]
 8012f8e:	4413      	add	r3, r2
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	3314      	adds	r3, #20
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2022      	movs	r0, #34	@ 0x22
 8012f9e:	f7fa fbff 	bl	800d7a0 <pbuf_alloc>
 8012fa2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d04d      	beq.n	8013046 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012faa:	897b      	ldrh	r3, [r7, #10]
 8012fac:	3313      	adds	r3, #19
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	8952      	ldrh	r2, [r2, #10]
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	db06      	blt.n	8012fc4 <tcp_output_alloc_header_common+0x4c>
 8012fb6:	4b26      	ldr	r3, [pc, #152]	@ (8013050 <tcp_output_alloc_header_common+0xd8>)
 8012fb8:	f240 7223 	movw	r2, #1827	@ 0x723
 8012fbc:	4925      	ldr	r1, [pc, #148]	@ (8013054 <tcp_output_alloc_header_common+0xdc>)
 8012fbe:	4826      	ldr	r0, [pc, #152]	@ (8013058 <tcp_output_alloc_header_common+0xe0>)
 8012fc0:	f005 fcbc 	bl	801893c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012fca:	8c3b      	ldrh	r3, [r7, #32]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f9 fa15 	bl	800c3fc <lwip_htons>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f9 fa0d 	bl	800c3fc <lwip_htons>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	687a      	ldr	r2, [r7, #4]
 8012fee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f7f9 fa18 	bl	800c426 <lwip_htonl>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ffc:	897b      	ldrh	r3, [r7, #10]
 8012ffe:	089b      	lsrs	r3, r3, #2
 8013000:	b29b      	uxth	r3, r3
 8013002:	3305      	adds	r3, #5
 8013004:	b29b      	uxth	r3, r3
 8013006:	031b      	lsls	r3, r3, #12
 8013008:	b29a      	uxth	r2, r3
 801300a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801300e:	b29b      	uxth	r3, r3
 8013010:	4313      	orrs	r3, r2
 8013012:	b29b      	uxth	r3, r3
 8013014:	4618      	mov	r0, r3
 8013016:	f7f9 f9f1 	bl	800c3fc <lwip_htons>
 801301a:	4603      	mov	r3, r0
 801301c:	461a      	mov	r2, r3
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013022:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013024:	4618      	mov	r0, r3
 8013026:	f7f9 f9e9 	bl	800c3fc <lwip_htons>
 801302a:	4603      	mov	r3, r0
 801302c:	461a      	mov	r2, r3
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	2200      	movs	r2, #0
 8013036:	741a      	strb	r2, [r3, #16]
 8013038:	2200      	movs	r2, #0
 801303a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	2200      	movs	r2, #0
 8013040:	749a      	strb	r2, [r3, #18]
 8013042:	2200      	movs	r2, #0
 8013044:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013046:	697b      	ldr	r3, [r7, #20]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	0801af90 	.word	0x0801af90
 8013054:	0801b668 	.word	0x0801b668
 8013058:	0801afe4 	.word	0x0801afe4

0801305c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801305c:	b5b0      	push	{r4, r5, r7, lr}
 801305e:	b08a      	sub	sp, #40	@ 0x28
 8013060:	af04      	add	r7, sp, #16
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	607b      	str	r3, [r7, #4]
 8013066:	460b      	mov	r3, r1
 8013068:	817b      	strh	r3, [r7, #10]
 801306a:	4613      	mov	r3, r2
 801306c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d106      	bne.n	8013082 <tcp_output_alloc_header+0x26>
 8013074:	4b15      	ldr	r3, [pc, #84]	@ (80130cc <tcp_output_alloc_header+0x70>)
 8013076:	f240 7242 	movw	r2, #1858	@ 0x742
 801307a:	4915      	ldr	r1, [pc, #84]	@ (80130d0 <tcp_output_alloc_header+0x74>)
 801307c:	4815      	ldr	r0, [pc, #84]	@ (80130d4 <tcp_output_alloc_header+0x78>)
 801307e:	f005 fc5d 	bl	801893c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	8adb      	ldrh	r3, [r3, #22]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	8b12      	ldrh	r2, [r2, #24]
 801308e:	68f9      	ldr	r1, [r7, #12]
 8013090:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013092:	893d      	ldrh	r5, [r7, #8]
 8013094:	897c      	ldrh	r4, [r7, #10]
 8013096:	9103      	str	r1, [sp, #12]
 8013098:	2110      	movs	r1, #16
 801309a:	9102      	str	r1, [sp, #8]
 801309c:	9201      	str	r2, [sp, #4]
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	462a      	mov	r2, r5
 80130a4:	4621      	mov	r1, r4
 80130a6:	f7ff ff67 	bl	8012f78 <tcp_output_alloc_header_common>
 80130aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d006      	beq.n	80130c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130b6:	68fa      	ldr	r2, [r7, #12]
 80130b8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80130ba:	441a      	add	r2, r3
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80130c0:	697b      	ldr	r3, [r7, #20]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3718      	adds	r7, #24
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bdb0      	pop	{r4, r5, r7, pc}
 80130ca:	bf00      	nop
 80130cc:	0801af90 	.word	0x0801af90
 80130d0:	0801b698 	.word	0x0801b698
 80130d4:	0801afe4 	.word	0x0801afe4

080130d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b088      	sub	sp, #32
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	4611      	mov	r1, r2
 80130e4:	461a      	mov	r2, r3
 80130e6:	460b      	mov	r3, r1
 80130e8:	71fb      	strb	r3, [r7, #7]
 80130ea:	4613      	mov	r3, r2
 80130ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d106      	bne.n	8013106 <tcp_output_fill_options+0x2e>
 80130f8:	4b12      	ldr	r3, [pc, #72]	@ (8013144 <tcp_output_fill_options+0x6c>)
 80130fa:	f240 7256 	movw	r2, #1878	@ 0x756
 80130fe:	4912      	ldr	r1, [pc, #72]	@ (8013148 <tcp_output_fill_options+0x70>)
 8013100:	4812      	ldr	r0, [pc, #72]	@ (801314c <tcp_output_fill_options+0x74>)
 8013102:	f005 fc1b 	bl	801893c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	3314      	adds	r3, #20
 8013110:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013112:	8bfb      	ldrh	r3, [r7, #30]
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	461a      	mov	r2, r3
 8013118:	79fb      	ldrb	r3, [r7, #7]
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	f003 0304 	and.w	r3, r3, #4
 8013120:	4413      	add	r3, r2
 8013122:	3314      	adds	r3, #20
 8013124:	69ba      	ldr	r2, [r7, #24]
 8013126:	4413      	add	r3, r2
 8013128:	697a      	ldr	r2, [r7, #20]
 801312a:	429a      	cmp	r2, r3
 801312c:	d006      	beq.n	801313c <tcp_output_fill_options+0x64>
 801312e:	4b05      	ldr	r3, [pc, #20]	@ (8013144 <tcp_output_fill_options+0x6c>)
 8013130:	f240 7275 	movw	r2, #1909	@ 0x775
 8013134:	4906      	ldr	r1, [pc, #24]	@ (8013150 <tcp_output_fill_options+0x78>)
 8013136:	4805      	ldr	r0, [pc, #20]	@ (801314c <tcp_output_fill_options+0x74>)
 8013138:	f005 fc00 	bl	801893c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801313c:	bf00      	nop
 801313e:	3720      	adds	r7, #32
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	0801af90 	.word	0x0801af90
 8013148:	0801b6c0 	.word	0x0801b6c0
 801314c:	0801afe4 	.word	0x0801afe4
 8013150:	0801b5b8 	.word	0x0801b5b8

08013154 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b08a      	sub	sp, #40	@ 0x28
 8013158:	af04      	add	r7, sp, #16
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d106      	bne.n	8013176 <tcp_output_control_segment+0x22>
 8013168:	4b1c      	ldr	r3, [pc, #112]	@ (80131dc <tcp_output_control_segment+0x88>)
 801316a:	f240 7287 	movw	r2, #1927	@ 0x787
 801316e:	491c      	ldr	r1, [pc, #112]	@ (80131e0 <tcp_output_control_segment+0x8c>)
 8013170:	481c      	ldr	r0, [pc, #112]	@ (80131e4 <tcp_output_control_segment+0x90>)
 8013172:	f005 fbe3 	bl	801893c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013176:	683a      	ldr	r2, [r7, #0]
 8013178:	6879      	ldr	r1, [r7, #4]
 801317a:	68f8      	ldr	r0, [r7, #12]
 801317c:	f7fe ff42 	bl	8012004 <tcp_route>
 8013180:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013182:	693b      	ldr	r3, [r7, #16]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d102      	bne.n	801318e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013188:	23fc      	movs	r3, #252	@ 0xfc
 801318a:	75fb      	strb	r3, [r7, #23]
 801318c:	e01c      	b.n	80131c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d006      	beq.n	80131a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	7adb      	ldrb	r3, [r3, #11]
 8013198:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	7a9b      	ldrb	r3, [r3, #10]
 801319e:	757b      	strb	r3, [r7, #21]
 80131a0:	e003      	b.n	80131aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80131a2:	23ff      	movs	r3, #255	@ 0xff
 80131a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80131a6:	2300      	movs	r3, #0
 80131a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80131aa:	7dba      	ldrb	r2, [r7, #22]
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	9302      	str	r3, [sp, #8]
 80131b0:	2306      	movs	r3, #6
 80131b2:	9301      	str	r3, [sp, #4]
 80131b4:	7d7b      	ldrb	r3, [r7, #21]
 80131b6:	9300      	str	r3, [sp, #0]
 80131b8:	4613      	mov	r3, r2
 80131ba:	683a      	ldr	r2, [r7, #0]
 80131bc:	6879      	ldr	r1, [r7, #4]
 80131be:	68b8      	ldr	r0, [r7, #8]
 80131c0:	f004 f978 	bl	80174b4 <ip4_output_if>
 80131c4:	4603      	mov	r3, r0
 80131c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80131c8:	68b8      	ldr	r0, [r7, #8]
 80131ca:	f7fa fdcd 	bl	800dd68 <pbuf_free>
  return err;
 80131ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3718      	adds	r7, #24
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	0801af90 	.word	0x0801af90
 80131e0:	0801b6e8 	.word	0x0801b6e8
 80131e4:	0801afe4 	.word	0x0801afe4

080131e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80131e8:	b590      	push	{r4, r7, lr}
 80131ea:	b08b      	sub	sp, #44	@ 0x2c
 80131ec:	af04      	add	r7, sp, #16
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d106      	bne.n	801320a <tcp_rst+0x22>
 80131fc:	4b1f      	ldr	r3, [pc, #124]	@ (801327c <tcp_rst+0x94>)
 80131fe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8013202:	491f      	ldr	r1, [pc, #124]	@ (8013280 <tcp_rst+0x98>)
 8013204:	481f      	ldr	r0, [pc, #124]	@ (8013284 <tcp_rst+0x9c>)
 8013206:	f005 fb99 	bl	801893c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801320c:	2b00      	cmp	r3, #0
 801320e:	d106      	bne.n	801321e <tcp_rst+0x36>
 8013210:	4b1a      	ldr	r3, [pc, #104]	@ (801327c <tcp_rst+0x94>)
 8013212:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013216:	491c      	ldr	r1, [pc, #112]	@ (8013288 <tcp_rst+0xa0>)
 8013218:	481a      	ldr	r0, [pc, #104]	@ (8013284 <tcp_rst+0x9c>)
 801321a:	f005 fb8f 	bl	801893c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801321e:	2300      	movs	r3, #0
 8013220:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013222:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013226:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013228:	7dfb      	ldrb	r3, [r7, #23]
 801322a:	b29c      	uxth	r4, r3
 801322c:	68b8      	ldr	r0, [r7, #8]
 801322e:	f7f9 f8fa 	bl	800c426 <lwip_htonl>
 8013232:	4602      	mov	r2, r0
 8013234:	8abb      	ldrh	r3, [r7, #20]
 8013236:	9303      	str	r3, [sp, #12]
 8013238:	2314      	movs	r3, #20
 801323a:	9302      	str	r3, [sp, #8]
 801323c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	4613      	mov	r3, r2
 8013246:	2200      	movs	r2, #0
 8013248:	4621      	mov	r1, r4
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f7ff fe94 	bl	8012f78 <tcp_output_alloc_header_common>
 8013250:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00c      	beq.n	8013272 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013258:	7dfb      	ldrb	r3, [r7, #23]
 801325a:	2200      	movs	r2, #0
 801325c:	6939      	ldr	r1, [r7, #16]
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ff ff3a 	bl	80130d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013266:	683a      	ldr	r2, [r7, #0]
 8013268:	6939      	ldr	r1, [r7, #16]
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f7ff ff72 	bl	8013154 <tcp_output_control_segment>
 8013270:	e000      	b.n	8013274 <tcp_rst+0x8c>
    return;
 8013272:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013274:	371c      	adds	r7, #28
 8013276:	46bd      	mov	sp, r7
 8013278:	bd90      	pop	{r4, r7, pc}
 801327a:	bf00      	nop
 801327c:	0801af90 	.word	0x0801af90
 8013280:	0801b714 	.word	0x0801b714
 8013284:	0801afe4 	.word	0x0801afe4
 8013288:	0801b730 	.word	0x0801b730

0801328c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801328c:	b590      	push	{r4, r7, lr}
 801328e:	b087      	sub	sp, #28
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013294:	2300      	movs	r3, #0
 8013296:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013298:	2300      	movs	r3, #0
 801329a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcp_send_empty_ack+0x24>
 80132a2:	4b28      	ldr	r3, [pc, #160]	@ (8013344 <tcp_send_empty_ack+0xb8>)
 80132a4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80132a8:	4927      	ldr	r1, [pc, #156]	@ (8013348 <tcp_send_empty_ack+0xbc>)
 80132aa:	4828      	ldr	r0, [pc, #160]	@ (801334c <tcp_send_empty_ack+0xc0>)
 80132ac:	f005 fb46 	bl	801893c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80132b0:	7dfb      	ldrb	r3, [r7, #23]
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	f003 0304 	and.w	r3, r3, #4
 80132ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80132bc:	7d7b      	ldrb	r3, [r7, #21]
 80132be:	b29c      	uxth	r4, r3
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7f9 f8ae 	bl	800c426 <lwip_htonl>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2200      	movs	r2, #0
 80132ce:	4621      	mov	r1, r4
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7ff fec3 	bl	801305c <tcp_output_alloc_header>
 80132d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d109      	bne.n	80132f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	8b5b      	ldrh	r3, [r3, #26]
 80132e2:	f043 0303 	orr.w	r3, r3, #3
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80132ec:	f06f 0301 	mvn.w	r3, #1
 80132f0:	e023      	b.n	801333a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80132f2:	7dbb      	ldrb	r3, [r7, #22]
 80132f4:	7dfa      	ldrb	r2, [r7, #23]
 80132f6:	6939      	ldr	r1, [r7, #16]
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f7ff feed 	bl	80130d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	3304      	adds	r3, #4
 8013304:	6939      	ldr	r1, [r7, #16]
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f7ff ff24 	bl	8013154 <tcp_output_control_segment>
 801330c:	4603      	mov	r3, r0
 801330e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d007      	beq.n	8013328 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	8b5b      	ldrh	r3, [r3, #26]
 801331c:	f043 0303 	orr.w	r3, r3, #3
 8013320:	b29a      	uxth	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	835a      	strh	r2, [r3, #26]
 8013326:	e006      	b.n	8013336 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	8b5b      	ldrh	r3, [r3, #26]
 801332c:	f023 0303 	bic.w	r3, r3, #3
 8013330:	b29a      	uxth	r2, r3
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801333a:	4618      	mov	r0, r3
 801333c:	371c      	adds	r7, #28
 801333e:	46bd      	mov	sp, r7
 8013340:	bd90      	pop	{r4, r7, pc}
 8013342:	bf00      	nop
 8013344:	0801af90 	.word	0x0801af90
 8013348:	0801b74c 	.word	0x0801b74c
 801334c:	0801afe4 	.word	0x0801afe4

08013350 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013350:	b590      	push	{r4, r7, lr}
 8013352:	b087      	sub	sp, #28
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013358:	2300      	movs	r3, #0
 801335a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d106      	bne.n	8013370 <tcp_keepalive+0x20>
 8013362:	4b18      	ldr	r3, [pc, #96]	@ (80133c4 <tcp_keepalive+0x74>)
 8013364:	f640 0224 	movw	r2, #2084	@ 0x824
 8013368:	4917      	ldr	r1, [pc, #92]	@ (80133c8 <tcp_keepalive+0x78>)
 801336a:	4818      	ldr	r0, [pc, #96]	@ (80133cc <tcp_keepalive+0x7c>)
 801336c:	f005 fae6 	bl	801893c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013370:	7dfb      	ldrb	r3, [r7, #23]
 8013372:	b29c      	uxth	r4, r3
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013378:	3b01      	subs	r3, #1
 801337a:	4618      	mov	r0, r3
 801337c:	f7f9 f853 	bl	800c426 <lwip_htonl>
 8013380:	4603      	mov	r3, r0
 8013382:	2200      	movs	r2, #0
 8013384:	4621      	mov	r1, r4
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7ff fe68 	bl	801305c <tcp_output_alloc_header>
 801338c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d102      	bne.n	801339a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013394:	f04f 33ff 	mov.w	r3, #4294967295
 8013398:	e010      	b.n	80133bc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801339a:	7dfb      	ldrb	r3, [r7, #23]
 801339c:	2200      	movs	r2, #0
 801339e:	6939      	ldr	r1, [r7, #16]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff fe99 	bl	80130d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	3304      	adds	r3, #4
 80133ac:	6939      	ldr	r1, [r7, #16]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff fed0 	bl	8013154 <tcp_output_control_segment>
 80133b4:	4603      	mov	r3, r0
 80133b6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80133b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	371c      	adds	r7, #28
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd90      	pop	{r4, r7, pc}
 80133c4:	0801af90 	.word	0x0801af90
 80133c8:	0801b76c 	.word	0x0801b76c
 80133cc:	0801afe4 	.word	0x0801afe4

080133d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80133d0:	b590      	push	{r4, r7, lr}
 80133d2:	b08b      	sub	sp, #44	@ 0x2c
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133d8:	2300      	movs	r3, #0
 80133da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d106      	bne.n	80133f2 <tcp_zero_window_probe+0x22>
 80133e4:	4b4c      	ldr	r3, [pc, #304]	@ (8013518 <tcp_zero_window_probe+0x148>)
 80133e6:	f640 024f 	movw	r2, #2127	@ 0x84f
 80133ea:	494c      	ldr	r1, [pc, #304]	@ (801351c <tcp_zero_window_probe+0x14c>)
 80133ec:	484c      	ldr	r0, [pc, #304]	@ (8013520 <tcp_zero_window_probe+0x150>)
 80133ee:	f005 faa5 	bl	801893c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133f6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80133f8:	6a3b      	ldr	r3, [r7, #32]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80133fe:	2300      	movs	r3, #0
 8013400:	e086      	b.n	8013510 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013408:	2bff      	cmp	r3, #255	@ 0xff
 801340a:	d007      	beq.n	801341c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013412:	3301      	adds	r3, #1
 8013414:	b2da      	uxtb	r2, r3
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801341c:	6a3b      	ldr	r3, [r7, #32]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	899b      	ldrh	r3, [r3, #12]
 8013422:	b29b      	uxth	r3, r3
 8013424:	4618      	mov	r0, r3
 8013426:	f7f8 ffe9 	bl	800c3fc <lwip_htons>
 801342a:	4603      	mov	r3, r0
 801342c:	b2db      	uxtb	r3, r3
 801342e:	f003 0301 	and.w	r3, r3, #1
 8013432:	2b00      	cmp	r3, #0
 8013434:	d005      	beq.n	8013442 <tcp_zero_window_probe+0x72>
 8013436:	6a3b      	ldr	r3, [r7, #32]
 8013438:	891b      	ldrh	r3, [r3, #8]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d101      	bne.n	8013442 <tcp_zero_window_probe+0x72>
 801343e:	2301      	movs	r3, #1
 8013440:	e000      	b.n	8013444 <tcp_zero_window_probe+0x74>
 8013442:	2300      	movs	r3, #0
 8013444:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013446:	7ffb      	ldrb	r3, [r7, #31]
 8013448:	2b00      	cmp	r3, #0
 801344a:	bf0c      	ite	eq
 801344c:	2301      	moveq	r3, #1
 801344e:	2300      	movne	r3, #0
 8013450:	b2db      	uxtb	r3, r3
 8013452:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013458:	b299      	uxth	r1, r3
 801345a:	6a3b      	ldr	r3, [r7, #32]
 801345c:	68db      	ldr	r3, [r3, #12]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	8bba      	ldrh	r2, [r7, #28]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7ff fdfa 	bl	801305c <tcp_output_alloc_header>
 8013468:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013470:	f04f 33ff 	mov.w	r3, #4294967295
 8013474:	e04c      	b.n	8013510 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801347c:	7ffb      	ldrb	r3, [r7, #31]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d011      	beq.n	80134a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	899b      	ldrh	r3, [r3, #12]
 8013486:	b29b      	uxth	r3, r3
 8013488:	b21b      	sxth	r3, r3
 801348a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801348e:	b21c      	sxth	r4, r3
 8013490:	2011      	movs	r0, #17
 8013492:	f7f8 ffb3 	bl	800c3fc <lwip_htons>
 8013496:	4603      	mov	r3, r0
 8013498:	b21b      	sxth	r3, r3
 801349a:	4323      	orrs	r3, r4
 801349c:	b21b      	sxth	r3, r3
 801349e:	b29a      	uxth	r2, r3
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	819a      	strh	r2, [r3, #12]
 80134a4:	e010      	b.n	80134c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	3314      	adds	r3, #20
 80134ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80134ae:	6a3b      	ldr	r3, [r7, #32]
 80134b0:	6858      	ldr	r0, [r3, #4]
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	891a      	ldrh	r2, [r3, #8]
 80134b8:	6a3b      	ldr	r3, [r7, #32]
 80134ba:	891b      	ldrh	r3, [r3, #8]
 80134bc:	1ad3      	subs	r3, r2, r3
 80134be:	b29b      	uxth	r3, r3
 80134c0:	2201      	movs	r2, #1
 80134c2:	6939      	ldr	r1, [r7, #16]
 80134c4:	f7fa fe56 	bl	800e174 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80134c8:	6a3b      	ldr	r3, [r7, #32]
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7f8 ffa9 	bl	800c426 <lwip_htonl>
 80134d4:	4603      	mov	r3, r0
 80134d6:	3301      	adds	r3, #1
 80134d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	da02      	bge.n	80134ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	68fa      	ldr	r2, [r7, #12]
 80134ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80134f0:	2200      	movs	r2, #0
 80134f2:	69b9      	ldr	r1, [r7, #24]
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f7ff fdef 	bl	80130d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	3304      	adds	r3, #4
 8013500:	69b9      	ldr	r1, [r7, #24]
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7ff fe26 	bl	8013154 <tcp_output_control_segment>
 8013508:	4603      	mov	r3, r0
 801350a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801350c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013510:	4618      	mov	r0, r3
 8013512:	372c      	adds	r7, #44	@ 0x2c
 8013514:	46bd      	mov	sp, r7
 8013516:	bd90      	pop	{r4, r7, pc}
 8013518:	0801af90 	.word	0x0801af90
 801351c:	0801b788 	.word	0x0801b788
 8013520:	0801afe4 	.word	0x0801afe4

08013524 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801352c:	f7fa ff10 	bl	800e350 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013530:	4b0a      	ldr	r3, [pc, #40]	@ (801355c <tcpip_tcp_timer+0x38>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d103      	bne.n	8013540 <tcpip_tcp_timer+0x1c>
 8013538:	4b09      	ldr	r3, [pc, #36]	@ (8013560 <tcpip_tcp_timer+0x3c>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d005      	beq.n	801354c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013540:	2200      	movs	r2, #0
 8013542:	4908      	ldr	r1, [pc, #32]	@ (8013564 <tcpip_tcp_timer+0x40>)
 8013544:	20fa      	movs	r0, #250	@ 0xfa
 8013546:	f000 f8f3 	bl	8013730 <sys_timeout>
 801354a:	e003      	b.n	8013554 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801354c:	4b06      	ldr	r3, [pc, #24]	@ (8013568 <tcpip_tcp_timer+0x44>)
 801354e:	2200      	movs	r2, #0
 8013550:	601a      	str	r2, [r3, #0]
  }
}
 8013552:	bf00      	nop
 8013554:	bf00      	nop
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	2400e970 	.word	0x2400e970
 8013560:	2400e974 	.word	0x2400e974
 8013564:	08013525 	.word	0x08013525
 8013568:	2400e9bc 	.word	0x2400e9bc

0801356c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013570:	4b0a      	ldr	r3, [pc, #40]	@ (801359c <tcp_timer_needed+0x30>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d10f      	bne.n	8013598 <tcp_timer_needed+0x2c>
 8013578:	4b09      	ldr	r3, [pc, #36]	@ (80135a0 <tcp_timer_needed+0x34>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d103      	bne.n	8013588 <tcp_timer_needed+0x1c>
 8013580:	4b08      	ldr	r3, [pc, #32]	@ (80135a4 <tcp_timer_needed+0x38>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d007      	beq.n	8013598 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013588:	4b04      	ldr	r3, [pc, #16]	@ (801359c <tcp_timer_needed+0x30>)
 801358a:	2201      	movs	r2, #1
 801358c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801358e:	2200      	movs	r2, #0
 8013590:	4905      	ldr	r1, [pc, #20]	@ (80135a8 <tcp_timer_needed+0x3c>)
 8013592:	20fa      	movs	r0, #250	@ 0xfa
 8013594:	f000 f8cc 	bl	8013730 <sys_timeout>
  }
}
 8013598:	bf00      	nop
 801359a:	bd80      	pop	{r7, pc}
 801359c:	2400e9bc 	.word	0x2400e9bc
 80135a0:	2400e970 	.word	0x2400e970
 80135a4:	2400e974 	.word	0x2400e974
 80135a8:	08013525 	.word	0x08013525

080135ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b086      	sub	sp, #24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80135b8:	200a      	movs	r0, #10
 80135ba:	f7f9 fcaf 	bl	800cf1c <memp_malloc>
 80135be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d109      	bne.n	80135da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d151      	bne.n	8013670 <sys_timeout_abs+0xc4>
 80135cc:	4b2a      	ldr	r3, [pc, #168]	@ (8013678 <sys_timeout_abs+0xcc>)
 80135ce:	22be      	movs	r2, #190	@ 0xbe
 80135d0:	492a      	ldr	r1, [pc, #168]	@ (801367c <sys_timeout_abs+0xd0>)
 80135d2:	482b      	ldr	r0, [pc, #172]	@ (8013680 <sys_timeout_abs+0xd4>)
 80135d4:	f005 f9b2 	bl	801893c <iprintf>
    return;
 80135d8:	e04a      	b.n	8013670 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	2200      	movs	r2, #0
 80135de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80135e0:	693b      	ldr	r3, [r7, #16]
 80135e2:	68ba      	ldr	r2, [r7, #8]
 80135e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	68fa      	ldr	r2, [r7, #12]
 80135f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80135f2:	4b24      	ldr	r3, [pc, #144]	@ (8013684 <sys_timeout_abs+0xd8>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d103      	bne.n	8013602 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80135fa:	4a22      	ldr	r2, [pc, #136]	@ (8013684 <sys_timeout_abs+0xd8>)
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	6013      	str	r3, [r2, #0]
    return;
 8013600:	e037      	b.n	8013672 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	685a      	ldr	r2, [r3, #4]
 8013606:	4b1f      	ldr	r3, [pc, #124]	@ (8013684 <sys_timeout_abs+0xd8>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	0fdb      	lsrs	r3, r3, #31
 8013610:	f003 0301 	and.w	r3, r3, #1
 8013614:	b2db      	uxtb	r3, r3
 8013616:	2b00      	cmp	r3, #0
 8013618:	d007      	beq.n	801362a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801361a:	4b1a      	ldr	r3, [pc, #104]	@ (8013684 <sys_timeout_abs+0xd8>)
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013622:	4a18      	ldr	r2, [pc, #96]	@ (8013684 <sys_timeout_abs+0xd8>)
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	6013      	str	r3, [r2, #0]
 8013628:	e023      	b.n	8013672 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801362a:	4b16      	ldr	r3, [pc, #88]	@ (8013684 <sys_timeout_abs+0xd8>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	617b      	str	r3, [r7, #20]
 8013630:	e01a      	b.n	8013668 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d00b      	beq.n	8013652 <sys_timeout_abs+0xa6>
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	685a      	ldr	r2, [r3, #4]
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	1ad3      	subs	r3, r2, r3
 8013646:	0fdb      	lsrs	r3, r3, #31
 8013648:	f003 0301 	and.w	r3, r3, #1
 801364c:	b2db      	uxtb	r3, r3
 801364e:	2b00      	cmp	r3, #0
 8013650:	d007      	beq.n	8013662 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	693a      	ldr	r2, [r7, #16]
 801365e:	601a      	str	r2, [r3, #0]
        break;
 8013660:	e007      	b.n	8013672 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	617b      	str	r3, [r7, #20]
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d1e1      	bne.n	8013632 <sys_timeout_abs+0x86>
 801366e:	e000      	b.n	8013672 <sys_timeout_abs+0xc6>
    return;
 8013670:	bf00      	nop
      }
    }
  }
}
 8013672:	3718      	adds	r7, #24
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	0801b7ac 	.word	0x0801b7ac
 801367c:	0801b7e0 	.word	0x0801b7e0
 8013680:	0801b820 	.word	0x0801b820
 8013684:	2400e9b4 	.word	0x2400e9b4

08013688 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b086      	sub	sp, #24
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	4798      	blx	r3

  now = sys_now();
 801369a:	f7f5 fb9b 	bl	8008dd4 <sys_now>
 801369e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	4b0f      	ldr	r3, [pc, #60]	@ (80136e4 <lwip_cyclic_timer+0x5c>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	4413      	add	r3, r2
 80136aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	0fdb      	lsrs	r3, r3, #31
 80136b4:	f003 0301 	and.w	r3, r3, #1
 80136b8:	b2db      	uxtb	r3, r3
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d009      	beq.n	80136d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	4413      	add	r3, r2
 80136c6:	687a      	ldr	r2, [r7, #4]
 80136c8:	4907      	ldr	r1, [pc, #28]	@ (80136e8 <lwip_cyclic_timer+0x60>)
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff ff6e 	bl	80135ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80136d0:	e004      	b.n	80136dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	4904      	ldr	r1, [pc, #16]	@ (80136e8 <lwip_cyclic_timer+0x60>)
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f7ff ff68 	bl	80135ac <sys_timeout_abs>
}
 80136dc:	bf00      	nop
 80136de:	3718      	adds	r7, #24
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	2400e9b8 	.word	0x2400e9b8
 80136e8:	08013689 	.word	0x08013689

080136ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80136f2:	2301      	movs	r3, #1
 80136f4:	607b      	str	r3, [r7, #4]
 80136f6:	e00e      	b.n	8013716 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80136f8:	4a0b      	ldr	r2, [pc, #44]	@ (8013728 <sys_timeouts_init+0x3c>)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	00db      	lsls	r3, r3, #3
 8013704:	4a08      	ldr	r2, [pc, #32]	@ (8013728 <sys_timeouts_init+0x3c>)
 8013706:	4413      	add	r3, r2
 8013708:	461a      	mov	r2, r3
 801370a:	4908      	ldr	r1, [pc, #32]	@ (801372c <sys_timeouts_init+0x40>)
 801370c:	f000 f810 	bl	8013730 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	3301      	adds	r3, #1
 8013714:	607b      	str	r3, [r7, #4]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2b04      	cmp	r3, #4
 801371a:	d9ed      	bls.n	80136f8 <sys_timeouts_init+0xc>
  }
}
 801371c:	bf00      	nop
 801371e:	bf00      	nop
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	0801c798 	.word	0x0801c798
 801372c:	08013689 	.word	0x08013689

08013730 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b086      	sub	sp, #24
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013742:	d306      	bcc.n	8013752 <sys_timeout+0x22>
 8013744:	4b0a      	ldr	r3, [pc, #40]	@ (8013770 <sys_timeout+0x40>)
 8013746:	f240 1229 	movw	r2, #297	@ 0x129
 801374a:	490a      	ldr	r1, [pc, #40]	@ (8013774 <sys_timeout+0x44>)
 801374c:	480a      	ldr	r0, [pc, #40]	@ (8013778 <sys_timeout+0x48>)
 801374e:	f005 f8f5 	bl	801893c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013752:	f7f5 fb3f 	bl	8008dd4 <sys_now>
 8013756:	4602      	mov	r2, r0
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	4413      	add	r3, r2
 801375c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	68b9      	ldr	r1, [r7, #8]
 8013762:	6978      	ldr	r0, [r7, #20]
 8013764:	f7ff ff22 	bl	80135ac <sys_timeout_abs>
#endif
}
 8013768:	bf00      	nop
 801376a:	3718      	adds	r7, #24
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	0801b7ac 	.word	0x0801b7ac
 8013774:	0801b848 	.word	0x0801b848
 8013778:	0801b820 	.word	0x0801b820

0801377c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013782:	f7f5 fb27 	bl	8008dd4 <sys_now>
 8013786:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013788:	4b17      	ldr	r3, [pc, #92]	@ (80137e8 <sys_check_timeouts+0x6c>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d022      	beq.n	80137da <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	68fa      	ldr	r2, [r7, #12]
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	0fdb      	lsrs	r3, r3, #31
 801379e:	f003 0301 	and.w	r3, r3, #1
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d11a      	bne.n	80137de <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4a0e      	ldr	r2, [pc, #56]	@ (80137e8 <sys_check_timeouts+0x6c>)
 80137ae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	4a0a      	ldr	r2, [pc, #40]	@ (80137ec <sys_check_timeouts+0x70>)
 80137c2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80137c4:	68b9      	ldr	r1, [r7, #8]
 80137c6:	200a      	movs	r0, #10
 80137c8:	f7f9 fc1e 	bl	800d008 <memp_free>
    if (handler != NULL) {
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d0da      	beq.n	8013788 <sys_check_timeouts+0xc>
      handler(arg);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6838      	ldr	r0, [r7, #0]
 80137d6:	4798      	blx	r3
  do {
 80137d8:	e7d6      	b.n	8013788 <sys_check_timeouts+0xc>
      return;
 80137da:	bf00      	nop
 80137dc:	e000      	b.n	80137e0 <sys_check_timeouts+0x64>
      return;
 80137de:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	2400e9b4 	.word	0x2400e9b4
 80137ec:	2400e9b8 	.word	0x2400e9b8

080137f0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80137f6:	4b16      	ldr	r3, [pc, #88]	@ (8013850 <sys_timeouts_sleeptime+0x60>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d102      	bne.n	8013804 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80137fe:	f04f 33ff 	mov.w	r3, #4294967295
 8013802:	e020      	b.n	8013846 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013804:	f7f5 fae6 	bl	8008dd4 <sys_now>
 8013808:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801380a:	4b11      	ldr	r3, [pc, #68]	@ (8013850 <sys_timeouts_sleeptime+0x60>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	685a      	ldr	r2, [r3, #4]
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	1ad3      	subs	r3, r2, r3
 8013814:	0fdb      	lsrs	r3, r3, #31
 8013816:	f003 0301 	and.w	r3, r3, #1
 801381a:	b2db      	uxtb	r3, r3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013820:	2300      	movs	r3, #0
 8013822:	e010      	b.n	8013846 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013824:	4b0a      	ldr	r3, [pc, #40]	@ (8013850 <sys_timeouts_sleeptime+0x60>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	685a      	ldr	r2, [r3, #4]
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	da06      	bge.n	8013844 <sys_timeouts_sleeptime+0x54>
 8013836:	4b07      	ldr	r3, [pc, #28]	@ (8013854 <sys_timeouts_sleeptime+0x64>)
 8013838:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801383c:	4906      	ldr	r1, [pc, #24]	@ (8013858 <sys_timeouts_sleeptime+0x68>)
 801383e:	4807      	ldr	r0, [pc, #28]	@ (801385c <sys_timeouts_sleeptime+0x6c>)
 8013840:	f005 f87c 	bl	801893c <iprintf>
    return ret;
 8013844:	683b      	ldr	r3, [r7, #0]
  }
}
 8013846:	4618      	mov	r0, r3
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	2400e9b4 	.word	0x2400e9b4
 8013854:	0801b7ac 	.word	0x0801b7ac
 8013858:	0801b880 	.word	0x0801b880
 801385c:	0801b820 	.word	0x0801b820

08013860 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013864:	f004 ff6a 	bl	801873c <rand>
 8013868:	4603      	mov	r3, r0
 801386a:	b29b      	uxth	r3, r3
 801386c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013870:	b29b      	uxth	r3, r3
 8013872:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013876:	b29a      	uxth	r2, r3
 8013878:	4b01      	ldr	r3, [pc, #4]	@ (8013880 <udp_init+0x20>)
 801387a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801387c:	bf00      	nop
 801387e:	bd80      	pop	{r7, pc}
 8013880:	24000030 	.word	0x24000030

08013884 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013884:	b480      	push	{r7}
 8013886:	b083      	sub	sp, #12
 8013888:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801388e:	4b17      	ldr	r3, [pc, #92]	@ (80138ec <udp_new_port+0x68>)
 8013890:	881b      	ldrh	r3, [r3, #0]
 8013892:	1c5a      	adds	r2, r3, #1
 8013894:	b291      	uxth	r1, r2
 8013896:	4a15      	ldr	r2, [pc, #84]	@ (80138ec <udp_new_port+0x68>)
 8013898:	8011      	strh	r1, [r2, #0]
 801389a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801389e:	4293      	cmp	r3, r2
 80138a0:	d103      	bne.n	80138aa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80138a2:	4b12      	ldr	r3, [pc, #72]	@ (80138ec <udp_new_port+0x68>)
 80138a4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80138a8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80138aa:	4b11      	ldr	r3, [pc, #68]	@ (80138f0 <udp_new_port+0x6c>)
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	603b      	str	r3, [r7, #0]
 80138b0:	e011      	b.n	80138d6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	8a5a      	ldrh	r2, [r3, #18]
 80138b6:	4b0d      	ldr	r3, [pc, #52]	@ (80138ec <udp_new_port+0x68>)
 80138b8:	881b      	ldrh	r3, [r3, #0]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d108      	bne.n	80138d0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80138be:	88fb      	ldrh	r3, [r7, #6]
 80138c0:	3301      	adds	r3, #1
 80138c2:	80fb      	strh	r3, [r7, #6]
 80138c4:	88fb      	ldrh	r3, [r7, #6]
 80138c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80138ca:	d3e0      	bcc.n	801388e <udp_new_port+0xa>
        return 0;
 80138cc:	2300      	movs	r3, #0
 80138ce:	e007      	b.n	80138e0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	603b      	str	r3, [r7, #0]
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d1ea      	bne.n	80138b2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80138dc:	4b03      	ldr	r3, [pc, #12]	@ (80138ec <udp_new_port+0x68>)
 80138de:	881b      	ldrh	r3, [r3, #0]
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	24000030 	.word	0x24000030
 80138f0:	2400e9c0 	.word	0x2400e9c0

080138f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	60f8      	str	r0, [r7, #12]
 80138fc:	60b9      	str	r1, [r7, #8]
 80138fe:	4613      	mov	r3, r2
 8013900:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d105      	bne.n	8013914 <udp_input_local_match+0x20>
 8013908:	4b27      	ldr	r3, [pc, #156]	@ (80139a8 <udp_input_local_match+0xb4>)
 801390a:	2287      	movs	r2, #135	@ 0x87
 801390c:	4927      	ldr	r1, [pc, #156]	@ (80139ac <udp_input_local_match+0xb8>)
 801390e:	4828      	ldr	r0, [pc, #160]	@ (80139b0 <udp_input_local_match+0xbc>)
 8013910:	f005 f814 	bl	801893c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d105      	bne.n	8013926 <udp_input_local_match+0x32>
 801391a:	4b23      	ldr	r3, [pc, #140]	@ (80139a8 <udp_input_local_match+0xb4>)
 801391c:	2288      	movs	r2, #136	@ 0x88
 801391e:	4925      	ldr	r1, [pc, #148]	@ (80139b4 <udp_input_local_match+0xc0>)
 8013920:	4823      	ldr	r0, [pc, #140]	@ (80139b0 <udp_input_local_match+0xbc>)
 8013922:	f005 f80b 	bl	801893c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	7a1b      	ldrb	r3, [r3, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00b      	beq.n	8013946 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	7a1a      	ldrb	r2, [r3, #8]
 8013932:	4b21      	ldr	r3, [pc, #132]	@ (80139b8 <udp_input_local_match+0xc4>)
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801393a:	3301      	adds	r3, #1
 801393c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801393e:	429a      	cmp	r2, r3
 8013940:	d001      	beq.n	8013946 <udp_input_local_match+0x52>
    return 0;
 8013942:	2300      	movs	r3, #0
 8013944:	e02b      	b.n	801399e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013946:	79fb      	ldrb	r3, [r7, #7]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d018      	beq.n	801397e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d013      	beq.n	801397a <udp_input_local_match+0x86>
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d00f      	beq.n	801397a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801395a:	4b17      	ldr	r3, [pc, #92]	@ (80139b8 <udp_input_local_match+0xc4>)
 801395c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013962:	d00a      	beq.n	801397a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	681a      	ldr	r2, [r3, #0]
 8013968:	4b13      	ldr	r3, [pc, #76]	@ (80139b8 <udp_input_local_match+0xc4>)
 801396a:	695b      	ldr	r3, [r3, #20]
 801396c:	405a      	eors	r2, r3
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	3308      	adds	r3, #8
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013976:	2b00      	cmp	r3, #0
 8013978:	d110      	bne.n	801399c <udp_input_local_match+0xa8>
          return 1;
 801397a:	2301      	movs	r3, #1
 801397c:	e00f      	b.n	801399e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <udp_input_local_match+0xa4>
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d005      	beq.n	8013998 <udp_input_local_match+0xa4>
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	4b09      	ldr	r3, [pc, #36]	@ (80139b8 <udp_input_local_match+0xc4>)
 8013992:	695b      	ldr	r3, [r3, #20]
 8013994:	429a      	cmp	r2, r3
 8013996:	d101      	bne.n	801399c <udp_input_local_match+0xa8>
        return 1;
 8013998:	2301      	movs	r3, #1
 801399a:	e000      	b.n	801399e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	0801b894 	.word	0x0801b894
 80139ac:	0801b8c4 	.word	0x0801b8c4
 80139b0:	0801b8e8 	.word	0x0801b8e8
 80139b4:	0801b910 	.word	0x0801b910
 80139b8:	2400b844 	.word	0x2400b844

080139bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80139bc:	b590      	push	{r4, r7, lr}
 80139be:	b08d      	sub	sp, #52	@ 0x34
 80139c0:	af02      	add	r7, sp, #8
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d105      	bne.n	80139dc <udp_input+0x20>
 80139d0:	4b7c      	ldr	r3, [pc, #496]	@ (8013bc4 <udp_input+0x208>)
 80139d2:	22cf      	movs	r2, #207	@ 0xcf
 80139d4:	497c      	ldr	r1, [pc, #496]	@ (8013bc8 <udp_input+0x20c>)
 80139d6:	487d      	ldr	r0, [pc, #500]	@ (8013bcc <udp_input+0x210>)
 80139d8:	f004 ffb0 	bl	801893c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d105      	bne.n	80139ee <udp_input+0x32>
 80139e2:	4b78      	ldr	r3, [pc, #480]	@ (8013bc4 <udp_input+0x208>)
 80139e4:	22d0      	movs	r2, #208	@ 0xd0
 80139e6:	497a      	ldr	r1, [pc, #488]	@ (8013bd0 <udp_input+0x214>)
 80139e8:	4878      	ldr	r0, [pc, #480]	@ (8013bcc <udp_input+0x210>)
 80139ea:	f004 ffa7 	bl	801893c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	895b      	ldrh	r3, [r3, #10]
 80139f2:	2b07      	cmp	r3, #7
 80139f4:	d803      	bhi.n	80139fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7fa f9b6 	bl	800dd68 <pbuf_free>
    goto end;
 80139fc:	e0de      	b.n	8013bbc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013a04:	4b73      	ldr	r3, [pc, #460]	@ (8013bd4 <udp_input+0x218>)
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	4a72      	ldr	r2, [pc, #456]	@ (8013bd4 <udp_input+0x218>)
 8013a0a:	6812      	ldr	r2, [r2, #0]
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f003 fe28 	bl	8017664 <ip4_addr_isbroadcast_u32>
 8013a14:	4603      	mov	r3, r0
 8013a16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	881b      	ldrh	r3, [r3, #0]
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7f8 fcec 	bl	800c3fc <lwip_htons>
 8013a24:	4603      	mov	r3, r0
 8013a26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	885b      	ldrh	r3, [r3, #2]
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f8 fce4 	bl	800c3fc <lwip_htons>
 8013a34:	4603      	mov	r3, r0
 8013a36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013a40:	2300      	movs	r3, #0
 8013a42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a44:	4b64      	ldr	r3, [pc, #400]	@ (8013bd8 <udp_input+0x21c>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a4a:	e054      	b.n	8013af6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4e:	8a5b      	ldrh	r3, [r3, #18]
 8013a50:	89fa      	ldrh	r2, [r7, #14]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d14a      	bne.n	8013aec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013a56:	7cfb      	ldrb	r3, [r7, #19]
 8013a58:	461a      	mov	r2, r3
 8013a5a:	6839      	ldr	r1, [r7, #0]
 8013a5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013a5e:	f7ff ff49 	bl	80138f4 <udp_input_local_match>
 8013a62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d041      	beq.n	8013aec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6a:	7c1b      	ldrb	r3, [r3, #16]
 8013a6c:	f003 0304 	and.w	r3, r3, #4
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d11d      	bne.n	8013ab0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d102      	bne.n	8013a80 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a7c:	61fb      	str	r3, [r7, #28]
 8013a7e:	e017      	b.n	8013ab0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013a80:	7cfb      	ldrb	r3, [r7, #19]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d014      	beq.n	8013ab0 <udp_input+0xf4>
 8013a86:	4b53      	ldr	r3, [pc, #332]	@ (8013bd4 <udp_input+0x218>)
 8013a88:	695b      	ldr	r3, [r3, #20]
 8013a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a8e:	d10f      	bne.n	8013ab0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013a90:	69fb      	ldr	r3, [r7, #28]
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	3304      	adds	r3, #4
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d008      	beq.n	8013ab0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d101      	bne.n	8013ab0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ab2:	8a9b      	ldrh	r3, [r3, #20]
 8013ab4:	8a3a      	ldrh	r2, [r7, #16]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d118      	bne.n	8013aec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013abc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d005      	beq.n	8013ace <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac4:	685a      	ldr	r2, [r3, #4]
 8013ac6:	4b43      	ldr	r3, [pc, #268]	@ (8013bd4 <udp_input+0x218>)
 8013ac8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d10e      	bne.n	8013aec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013ace:	6a3b      	ldr	r3, [r7, #32]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d014      	beq.n	8013afe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad6:	68da      	ldr	r2, [r3, #12]
 8013ad8:	6a3b      	ldr	r3, [r7, #32]
 8013ada:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013adc:	4b3e      	ldr	r3, [pc, #248]	@ (8013bd8 <udp_input+0x21c>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8013bd8 <udp_input+0x21c>)
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013aea:	e008      	b.n	8013afe <udp_input+0x142>
      }
    }

    prev = pcb;
 8013aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8013af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d1a7      	bne.n	8013a4c <udp_input+0x90>
 8013afc:	e000      	b.n	8013b00 <udp_input+0x144>
        break;
 8013afe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d101      	bne.n	8013b0a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d002      	beq.n	8013b16 <udp_input+0x15a>
    for_us = 1;
 8013b10:	2301      	movs	r3, #1
 8013b12:	76fb      	strb	r3, [r7, #27]
 8013b14:	e00a      	b.n	8013b2c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	3304      	adds	r3, #4
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8013bd4 <udp_input+0x218>)
 8013b1e:	695b      	ldr	r3, [r3, #20]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	bf0c      	ite	eq
 8013b24:	2301      	moveq	r3, #1
 8013b26:	2300      	movne	r3, #0
 8013b28:	b2db      	uxtb	r3, r3
 8013b2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013b2c:	7efb      	ldrb	r3, [r7, #27]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d041      	beq.n	8013bb6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013b32:	2108      	movs	r1, #8
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7fa f891 	bl	800dc5c <pbuf_remove_header>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00a      	beq.n	8013b56 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013b40:	4b20      	ldr	r3, [pc, #128]	@ (8013bc4 <udp_input+0x208>)
 8013b42:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013b46:	4925      	ldr	r1, [pc, #148]	@ (8013bdc <udp_input+0x220>)
 8013b48:	4820      	ldr	r0, [pc, #128]	@ (8013bcc <udp_input+0x210>)
 8013b4a:	f004 fef7 	bl	801893c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f7fa f90a 	bl	800dd68 <pbuf_free>
      goto end;
 8013b54:	e032      	b.n	8013bbc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d012      	beq.n	8013b82 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b5e:	699b      	ldr	r3, [r3, #24]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00a      	beq.n	8013b7a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b66:	699c      	ldr	r4, [r3, #24]
 8013b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b6a:	69d8      	ldr	r0, [r3, #28]
 8013b6c:	8a3b      	ldrh	r3, [r7, #16]
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	4b1b      	ldr	r3, [pc, #108]	@ (8013be0 <udp_input+0x224>)
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013b76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013b78:	e021      	b.n	8013bbe <udp_input+0x202>
        pbuf_free(p);
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f7fa f8f4 	bl	800dd68 <pbuf_free>
        goto end;
 8013b80:	e01c      	b.n	8013bbc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013b82:	7cfb      	ldrb	r3, [r7, #19]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d112      	bne.n	8013bae <udp_input+0x1f2>
 8013b88:	4b12      	ldr	r3, [pc, #72]	@ (8013bd4 <udp_input+0x218>)
 8013b8a:	695b      	ldr	r3, [r3, #20]
 8013b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013b90:	2be0      	cmp	r3, #224	@ 0xe0
 8013b92:	d00c      	beq.n	8013bae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013b94:	4b0f      	ldr	r3, [pc, #60]	@ (8013bd4 <udp_input+0x218>)
 8013b96:	899b      	ldrh	r3, [r3, #12]
 8013b98:	3308      	adds	r3, #8
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	b21b      	sxth	r3, r3
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f7fa f8ce 	bl	800dd42 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013ba6:	2103      	movs	r1, #3
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f003 fa13 	bl	8016fd4 <icmp_dest_unreach>
      pbuf_free(p);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7fa f8da 	bl	800dd68 <pbuf_free>
  return;
 8013bb4:	e003      	b.n	8013bbe <udp_input+0x202>
    pbuf_free(p);
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7fa f8d6 	bl	800dd68 <pbuf_free>
  return;
 8013bbc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013bbe:	372c      	adds	r7, #44	@ 0x2c
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd90      	pop	{r4, r7, pc}
 8013bc4:	0801b894 	.word	0x0801b894
 8013bc8:	0801b938 	.word	0x0801b938
 8013bcc:	0801b8e8 	.word	0x0801b8e8
 8013bd0:	0801b950 	.word	0x0801b950
 8013bd4:	2400b844 	.word	0x2400b844
 8013bd8:	2400e9c0 	.word	0x2400e9c0
 8013bdc:	0801b96c 	.word	0x0801b96c
 8013be0:	2400b854 	.word	0x2400b854

08013be4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b088      	sub	sp, #32
 8013be8:	af02      	add	r7, sp, #8
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	607a      	str	r2, [r7, #4]
 8013bf0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d109      	bne.n	8013c0c <udp_sendto_if+0x28>
 8013bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8013cb4 <udp_sendto_if+0xd0>)
 8013bfa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013bfe:	492e      	ldr	r1, [pc, #184]	@ (8013cb8 <udp_sendto_if+0xd4>)
 8013c00:	482e      	ldr	r0, [pc, #184]	@ (8013cbc <udp_sendto_if+0xd8>)
 8013c02:	f004 fe9b 	bl	801893c <iprintf>
 8013c06:	f06f 030f 	mvn.w	r3, #15
 8013c0a:	e04f      	b.n	8013cac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013c0c:	68bb      	ldr	r3, [r7, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d109      	bne.n	8013c26 <udp_sendto_if+0x42>
 8013c12:	4b28      	ldr	r3, [pc, #160]	@ (8013cb4 <udp_sendto_if+0xd0>)
 8013c14:	f240 2281 	movw	r2, #641	@ 0x281
 8013c18:	4929      	ldr	r1, [pc, #164]	@ (8013cc0 <udp_sendto_if+0xdc>)
 8013c1a:	4828      	ldr	r0, [pc, #160]	@ (8013cbc <udp_sendto_if+0xd8>)
 8013c1c:	f004 fe8e 	bl	801893c <iprintf>
 8013c20:	f06f 030f 	mvn.w	r3, #15
 8013c24:	e042      	b.n	8013cac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d109      	bne.n	8013c40 <udp_sendto_if+0x5c>
 8013c2c:	4b21      	ldr	r3, [pc, #132]	@ (8013cb4 <udp_sendto_if+0xd0>)
 8013c2e:	f240 2282 	movw	r2, #642	@ 0x282
 8013c32:	4924      	ldr	r1, [pc, #144]	@ (8013cc4 <udp_sendto_if+0xe0>)
 8013c34:	4821      	ldr	r0, [pc, #132]	@ (8013cbc <udp_sendto_if+0xd8>)
 8013c36:	f004 fe81 	bl	801893c <iprintf>
 8013c3a:	f06f 030f 	mvn.w	r3, #15
 8013c3e:	e035      	b.n	8013cac <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013c40:	6a3b      	ldr	r3, [r7, #32]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d109      	bne.n	8013c5a <udp_sendto_if+0x76>
 8013c46:	4b1b      	ldr	r3, [pc, #108]	@ (8013cb4 <udp_sendto_if+0xd0>)
 8013c48:	f240 2283 	movw	r2, #643	@ 0x283
 8013c4c:	491e      	ldr	r1, [pc, #120]	@ (8013cc8 <udp_sendto_if+0xe4>)
 8013c4e:	481b      	ldr	r0, [pc, #108]	@ (8013cbc <udp_sendto_if+0xd8>)
 8013c50:	f004 fe74 	bl	801893c <iprintf>
 8013c54:	f06f 030f 	mvn.w	r3, #15
 8013c58:	e028      	b.n	8013cac <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d009      	beq.n	8013c74 <udp_sendto_if+0x90>
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d005      	beq.n	8013c74 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c70:	2be0      	cmp	r3, #224	@ 0xe0
 8013c72:	d103      	bne.n	8013c7c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013c74:	6a3b      	ldr	r3, [r7, #32]
 8013c76:	3304      	adds	r3, #4
 8013c78:	617b      	str	r3, [r7, #20]
 8013c7a:	e00b      	b.n	8013c94 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	6a3b      	ldr	r3, [r7, #32]
 8013c82:	3304      	adds	r3, #4
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d002      	beq.n	8013c90 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013c8a:	f06f 0303 	mvn.w	r3, #3
 8013c8e:	e00d      	b.n	8013cac <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013c94:	887a      	ldrh	r2, [r7, #2]
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	9301      	str	r3, [sp, #4]
 8013c9a:	6a3b      	ldr	r3, [r7, #32]
 8013c9c:	9300      	str	r3, [sp, #0]
 8013c9e:	4613      	mov	r3, r2
 8013ca0:	687a      	ldr	r2, [r7, #4]
 8013ca2:	68b9      	ldr	r1, [r7, #8]
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	f000 f811 	bl	8013ccc <udp_sendto_if_src>
 8013caa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3718      	adds	r7, #24
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}
 8013cb4:	0801b894 	.word	0x0801b894
 8013cb8:	0801ba08 	.word	0x0801ba08
 8013cbc:	0801b8e8 	.word	0x0801b8e8
 8013cc0:	0801ba24 	.word	0x0801ba24
 8013cc4:	0801ba40 	.word	0x0801ba40
 8013cc8:	0801ba60 	.word	0x0801ba60

08013ccc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b08c      	sub	sp, #48	@ 0x30
 8013cd0:	af04      	add	r7, sp, #16
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	607a      	str	r2, [r7, #4]
 8013cd8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d109      	bne.n	8013cf4 <udp_sendto_if_src+0x28>
 8013ce0:	4b65      	ldr	r3, [pc, #404]	@ (8013e78 <udp_sendto_if_src+0x1ac>)
 8013ce2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013ce6:	4965      	ldr	r1, [pc, #404]	@ (8013e7c <udp_sendto_if_src+0x1b0>)
 8013ce8:	4865      	ldr	r0, [pc, #404]	@ (8013e80 <udp_sendto_if_src+0x1b4>)
 8013cea:	f004 fe27 	bl	801893c <iprintf>
 8013cee:	f06f 030f 	mvn.w	r3, #15
 8013cf2:	e0bc      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d109      	bne.n	8013d0e <udp_sendto_if_src+0x42>
 8013cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8013e78 <udp_sendto_if_src+0x1ac>)
 8013cfc:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013d00:	4960      	ldr	r1, [pc, #384]	@ (8013e84 <udp_sendto_if_src+0x1b8>)
 8013d02:	485f      	ldr	r0, [pc, #380]	@ (8013e80 <udp_sendto_if_src+0x1b4>)
 8013d04:	f004 fe1a 	bl	801893c <iprintf>
 8013d08:	f06f 030f 	mvn.w	r3, #15
 8013d0c:	e0af      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d109      	bne.n	8013d28 <udp_sendto_if_src+0x5c>
 8013d14:	4b58      	ldr	r3, [pc, #352]	@ (8013e78 <udp_sendto_if_src+0x1ac>)
 8013d16:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013d1a:	495b      	ldr	r1, [pc, #364]	@ (8013e88 <udp_sendto_if_src+0x1bc>)
 8013d1c:	4858      	ldr	r0, [pc, #352]	@ (8013e80 <udp_sendto_if_src+0x1b4>)
 8013d1e:	f004 fe0d 	bl	801893c <iprintf>
 8013d22:	f06f 030f 	mvn.w	r3, #15
 8013d26:	e0a2      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d109      	bne.n	8013d42 <udp_sendto_if_src+0x76>
 8013d2e:	4b52      	ldr	r3, [pc, #328]	@ (8013e78 <udp_sendto_if_src+0x1ac>)
 8013d30:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013d34:	4955      	ldr	r1, [pc, #340]	@ (8013e8c <udp_sendto_if_src+0x1c0>)
 8013d36:	4852      	ldr	r0, [pc, #328]	@ (8013e80 <udp_sendto_if_src+0x1b4>)
 8013d38:	f004 fe00 	bl	801893c <iprintf>
 8013d3c:	f06f 030f 	mvn.w	r3, #15
 8013d40:	e095      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d109      	bne.n	8013d5c <udp_sendto_if_src+0x90>
 8013d48:	4b4b      	ldr	r3, [pc, #300]	@ (8013e78 <udp_sendto_if_src+0x1ac>)
 8013d4a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013d4e:	4950      	ldr	r1, [pc, #320]	@ (8013e90 <udp_sendto_if_src+0x1c4>)
 8013d50:	484b      	ldr	r0, [pc, #300]	@ (8013e80 <udp_sendto_if_src+0x1b4>)
 8013d52:	f004 fdf3 	bl	801893c <iprintf>
 8013d56:	f06f 030f 	mvn.w	r3, #15
 8013d5a:	e088      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	8a5b      	ldrh	r3, [r3, #18]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10f      	bne.n	8013d84 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013d64:	68f9      	ldr	r1, [r7, #12]
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	8a5b      	ldrh	r3, [r3, #18]
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f000 f893 	bl	8013e98 <udp_bind>
 8013d72:	4603      	mov	r3, r0
 8013d74:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013d76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d002      	beq.n	8013d84 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013d7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013d82:	e074      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	891b      	ldrh	r3, [r3, #8]
 8013d88:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d902      	bls.n	8013d96 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013d90:	f04f 33ff 	mov.w	r3, #4294967295
 8013d94:	e06b      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013d96:	2108      	movs	r1, #8
 8013d98:	68b8      	ldr	r0, [r7, #8]
 8013d9a:	f7f9 ff4f 	bl	800dc3c <pbuf_add_header>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d015      	beq.n	8013dd0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013da4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013da8:	2108      	movs	r1, #8
 8013daa:	2022      	movs	r0, #34	@ 0x22
 8013dac:	f7f9 fcf8 	bl	800d7a0 <pbuf_alloc>
 8013db0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d102      	bne.n	8013dbe <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013db8:	f04f 33ff 	mov.w	r3, #4294967295
 8013dbc:	e057      	b.n	8013e6e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	891b      	ldrh	r3, [r3, #8]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d006      	beq.n	8013dd4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013dc6:	68b9      	ldr	r1, [r7, #8]
 8013dc8:	69f8      	ldr	r0, [r7, #28]
 8013dca:	f7fa f8f1 	bl	800dfb0 <pbuf_chain>
 8013dce:	e001      	b.n	8013dd4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013dd4:	69fb      	ldr	r3, [r7, #28]
 8013dd6:	895b      	ldrh	r3, [r3, #10]
 8013dd8:	2b07      	cmp	r3, #7
 8013dda:	d806      	bhi.n	8013dea <udp_sendto_if_src+0x11e>
 8013ddc:	4b26      	ldr	r3, [pc, #152]	@ (8013e78 <udp_sendto_if_src+0x1ac>)
 8013dde:	f240 320d 	movw	r2, #781	@ 0x30d
 8013de2:	492c      	ldr	r1, [pc, #176]	@ (8013e94 <udp_sendto_if_src+0x1c8>)
 8013de4:	4826      	ldr	r0, [pc, #152]	@ (8013e80 <udp_sendto_if_src+0x1b4>)
 8013de6:	f004 fda9 	bl	801893c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	8a5b      	ldrh	r3, [r3, #18]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7f8 fb01 	bl	800c3fc <lwip_htons>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013e02:	887b      	ldrh	r3, [r7, #2]
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f8 faf9 	bl	800c3fc <lwip_htons>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013e12:	697b      	ldr	r3, [r7, #20]
 8013e14:	2200      	movs	r2, #0
 8013e16:	719a      	strb	r2, [r3, #6]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	891b      	ldrh	r3, [r3, #8]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f8 faeb 	bl	800c3fc <lwip_htons>
 8013e26:	4603      	mov	r3, r0
 8013e28:	461a      	mov	r2, r3
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013e2e:	2311      	movs	r3, #17
 8013e30:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	7adb      	ldrb	r3, [r3, #11]
 8013e36:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	7a9b      	ldrb	r3, [r3, #10]
 8013e3c:	7cb9      	ldrb	r1, [r7, #18]
 8013e3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013e40:	9202      	str	r2, [sp, #8]
 8013e42:	7cfa      	ldrb	r2, [r7, #19]
 8013e44:	9201      	str	r2, [sp, #4]
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	460b      	mov	r3, r1
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013e4e:	69f8      	ldr	r0, [r7, #28]
 8013e50:	f003 fb5a 	bl	8017508 <ip4_output_if_src>
 8013e54:	4603      	mov	r3, r0
 8013e56:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013e58:	69fa      	ldr	r2, [r7, #28]
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d004      	beq.n	8013e6a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013e60:	69f8      	ldr	r0, [r7, #28]
 8013e62:	f7f9 ff81 	bl	800dd68 <pbuf_free>
    q = NULL;
 8013e66:	2300      	movs	r3, #0
 8013e68:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013e6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3720      	adds	r7, #32
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd80      	pop	{r7, pc}
 8013e76:	bf00      	nop
 8013e78:	0801b894 	.word	0x0801b894
 8013e7c:	0801ba80 	.word	0x0801ba80
 8013e80:	0801b8e8 	.word	0x0801b8e8
 8013e84:	0801baa0 	.word	0x0801baa0
 8013e88:	0801bac0 	.word	0x0801bac0
 8013e8c:	0801bae4 	.word	0x0801bae4
 8013e90:	0801bb08 	.word	0x0801bb08
 8013e94:	0801bb2c 	.word	0x0801bb2c

08013e98 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b086      	sub	sp, #24
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d101      	bne.n	8013eb0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013eac:	4b39      	ldr	r3, [pc, #228]	@ (8013f94 <udp_bind+0xfc>)
 8013eae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d109      	bne.n	8013eca <udp_bind+0x32>
 8013eb6:	4b38      	ldr	r3, [pc, #224]	@ (8013f98 <udp_bind+0x100>)
 8013eb8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013ebc:	4937      	ldr	r1, [pc, #220]	@ (8013f9c <udp_bind+0x104>)
 8013ebe:	4838      	ldr	r0, [pc, #224]	@ (8013fa0 <udp_bind+0x108>)
 8013ec0:	f004 fd3c 	bl	801893c <iprintf>
 8013ec4:	f06f 030f 	mvn.w	r3, #15
 8013ec8:	e060      	b.n	8013f8c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ece:	4b35      	ldr	r3, [pc, #212]	@ (8013fa4 <udp_bind+0x10c>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	617b      	str	r3, [r7, #20]
 8013ed4:	e009      	b.n	8013eea <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013ed6:	68fa      	ldr	r2, [r7, #12]
 8013ed8:	697b      	ldr	r3, [r7, #20]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d102      	bne.n	8013ee4 <udp_bind+0x4c>
      rebind = 1;
 8013ede:	2301      	movs	r3, #1
 8013ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8013ee2:	e005      	b.n	8013ef0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	617b      	str	r3, [r7, #20]
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d1f2      	bne.n	8013ed6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013ef0:	88fb      	ldrh	r3, [r7, #6]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d109      	bne.n	8013f0a <udp_bind+0x72>
    port = udp_new_port();
 8013ef6:	f7ff fcc5 	bl	8013884 <udp_new_port>
 8013efa:	4603      	mov	r3, r0
 8013efc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013efe:	88fb      	ldrh	r3, [r7, #6]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d12c      	bne.n	8013f5e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013f04:	f06f 0307 	mvn.w	r3, #7
 8013f08:	e040      	b.n	8013f8c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f0a:	4b26      	ldr	r3, [pc, #152]	@ (8013fa4 <udp_bind+0x10c>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	617b      	str	r3, [r7, #20]
 8013f10:	e022      	b.n	8013f58 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013f12:	68fa      	ldr	r2, [r7, #12]
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d01b      	beq.n	8013f52 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	8a5b      	ldrh	r3, [r3, #18]
 8013f1e:	88fa      	ldrh	r2, [r7, #6]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d116      	bne.n	8013f52 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d00d      	beq.n	8013f4c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f30:	68bb      	ldr	r3, [r7, #8]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d00a      	beq.n	8013f4c <udp_bind+0xb4>
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d006      	beq.n	8013f4c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f3e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d003      	beq.n	8013f4c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d102      	bne.n	8013f52 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013f4c:	f06f 0307 	mvn.w	r3, #7
 8013f50:	e01c      	b.n	8013f8c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	617b      	str	r3, [r7, #20]
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d1d9      	bne.n	8013f12 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d002      	beq.n	8013f6a <udp_bind+0xd2>
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	e000      	b.n	8013f6c <udp_bind+0xd4>
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	88fa      	ldrh	r2, [r7, #6]
 8013f74:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013f76:	7cfb      	ldrb	r3, [r7, #19]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013f7c:	4b09      	ldr	r3, [pc, #36]	@ (8013fa4 <udp_bind+0x10c>)
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013f84:	4a07      	ldr	r2, [pc, #28]	@ (8013fa4 <udp_bind+0x10c>)
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3718      	adds	r7, #24
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}
 8013f94:	0801c7c0 	.word	0x0801c7c0
 8013f98:	0801b894 	.word	0x0801b894
 8013f9c:	0801bb5c 	.word	0x0801bb5c
 8013fa0:	0801b8e8 	.word	0x0801b8e8
 8013fa4:	2400e9c0 	.word	0x2400e9c0

08013fa8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b086      	sub	sp, #24
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	60f8      	str	r0, [r7, #12]
 8013fb0:	60b9      	str	r1, [r7, #8]
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d109      	bne.n	8013fd0 <udp_connect+0x28>
 8013fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8014070 <udp_connect+0xc8>)
 8013fbe:	f240 4235 	movw	r2, #1077	@ 0x435
 8013fc2:	492c      	ldr	r1, [pc, #176]	@ (8014074 <udp_connect+0xcc>)
 8013fc4:	482c      	ldr	r0, [pc, #176]	@ (8014078 <udp_connect+0xd0>)
 8013fc6:	f004 fcb9 	bl	801893c <iprintf>
 8013fca:	f06f 030f 	mvn.w	r3, #15
 8013fce:	e04b      	b.n	8014068 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d109      	bne.n	8013fea <udp_connect+0x42>
 8013fd6:	4b26      	ldr	r3, [pc, #152]	@ (8014070 <udp_connect+0xc8>)
 8013fd8:	f240 4236 	movw	r2, #1078	@ 0x436
 8013fdc:	4927      	ldr	r1, [pc, #156]	@ (801407c <udp_connect+0xd4>)
 8013fde:	4826      	ldr	r0, [pc, #152]	@ (8014078 <udp_connect+0xd0>)
 8013fe0:	f004 fcac 	bl	801893c <iprintf>
 8013fe4:	f06f 030f 	mvn.w	r3, #15
 8013fe8:	e03e      	b.n	8014068 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	8a5b      	ldrh	r3, [r3, #18]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d10f      	bne.n	8014012 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013ff2:	68f9      	ldr	r1, [r7, #12]
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	8a5b      	ldrh	r3, [r3, #18]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f7ff ff4c 	bl	8013e98 <udp_bind>
 8014000:	4603      	mov	r3, r0
 8014002:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014004:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d002      	beq.n	8014012 <udp_connect+0x6a>
      return err;
 801400c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014010:	e02a      	b.n	8014068 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d002      	beq.n	801401e <udp_connect+0x76>
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	e000      	b.n	8014020 <udp_connect+0x78>
 801401e:	2300      	movs	r3, #0
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	88fa      	ldrh	r2, [r7, #6]
 8014028:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	7c1b      	ldrb	r3, [r3, #16]
 801402e:	f043 0304 	orr.w	r3, r3, #4
 8014032:	b2da      	uxtb	r2, r3
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014038:	4b11      	ldr	r3, [pc, #68]	@ (8014080 <udp_connect+0xd8>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	617b      	str	r3, [r7, #20]
 801403e:	e008      	b.n	8014052 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014040:	68fa      	ldr	r2, [r7, #12]
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	429a      	cmp	r2, r3
 8014046:	d101      	bne.n	801404c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014048:	2300      	movs	r3, #0
 801404a:	e00d      	b.n	8014068 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	68db      	ldr	r3, [r3, #12]
 8014050:	617b      	str	r3, [r7, #20]
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d1f3      	bne.n	8014040 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014058:	4b09      	ldr	r3, [pc, #36]	@ (8014080 <udp_connect+0xd8>)
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014060:	4a07      	ldr	r2, [pc, #28]	@ (8014080 <udp_connect+0xd8>)
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014066:	2300      	movs	r3, #0
}
 8014068:	4618      	mov	r0, r3
 801406a:	3718      	adds	r7, #24
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	0801b894 	.word	0x0801b894
 8014074:	0801bb74 	.word	0x0801bb74
 8014078:	0801b8e8 	.word	0x0801b8e8
 801407c:	0801bb90 	.word	0x0801bb90
 8014080:	2400e9c0 	.word	0x2400e9c0

08014084 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b084      	sub	sp, #16
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	60b9      	str	r1, [r7, #8]
 801408e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d107      	bne.n	80140a6 <udp_recv+0x22>
 8014096:	4b08      	ldr	r3, [pc, #32]	@ (80140b8 <udp_recv+0x34>)
 8014098:	f240 428a 	movw	r2, #1162	@ 0x48a
 801409c:	4907      	ldr	r1, [pc, #28]	@ (80140bc <udp_recv+0x38>)
 801409e:	4808      	ldr	r0, [pc, #32]	@ (80140c0 <udp_recv+0x3c>)
 80140a0:	f004 fc4c 	bl	801893c <iprintf>
 80140a4:	e005      	b.n	80140b2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	68ba      	ldr	r2, [r7, #8]
 80140aa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	61da      	str	r2, [r3, #28]
}
 80140b2:	3710      	adds	r7, #16
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	0801b894 	.word	0x0801b894
 80140bc:	0801bbc8 	.word	0x0801bbc8
 80140c0:	0801b8e8 	.word	0x0801b8e8

080140c4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d107      	bne.n	80140e2 <udp_remove+0x1e>
 80140d2:	4b19      	ldr	r3, [pc, #100]	@ (8014138 <udp_remove+0x74>)
 80140d4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80140d8:	4918      	ldr	r1, [pc, #96]	@ (801413c <udp_remove+0x78>)
 80140da:	4819      	ldr	r0, [pc, #100]	@ (8014140 <udp_remove+0x7c>)
 80140dc:	f004 fc2e 	bl	801893c <iprintf>
 80140e0:	e026      	b.n	8014130 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80140e2:	4b18      	ldr	r3, [pc, #96]	@ (8014144 <udp_remove+0x80>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d105      	bne.n	80140f8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80140ec:	4b15      	ldr	r3, [pc, #84]	@ (8014144 <udp_remove+0x80>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	68db      	ldr	r3, [r3, #12]
 80140f2:	4a14      	ldr	r2, [pc, #80]	@ (8014144 <udp_remove+0x80>)
 80140f4:	6013      	str	r3, [r2, #0]
 80140f6:	e017      	b.n	8014128 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80140f8:	4b12      	ldr	r3, [pc, #72]	@ (8014144 <udp_remove+0x80>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	60fb      	str	r3, [r7, #12]
 80140fe:	e010      	b.n	8014122 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d009      	beq.n	801411c <udp_remove+0x58>
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	429a      	cmp	r2, r3
 8014110:	d104      	bne.n	801411c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	68da      	ldr	r2, [r3, #12]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	60da      	str	r2, [r3, #12]
        break;
 801411a:	e005      	b.n	8014128 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	68db      	ldr	r3, [r3, #12]
 8014120:	60fb      	str	r3, [r7, #12]
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d1eb      	bne.n	8014100 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014128:	6879      	ldr	r1, [r7, #4]
 801412a:	2000      	movs	r0, #0
 801412c:	f7f8 ff6c 	bl	800d008 <memp_free>
}
 8014130:	3710      	adds	r7, #16
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	0801b894 	.word	0x0801b894
 801413c:	0801bbe0 	.word	0x0801bbe0
 8014140:	0801b8e8 	.word	0x0801b8e8
 8014144:	2400e9c0 	.word	0x2400e9c0

08014148 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801414e:	2000      	movs	r0, #0
 8014150:	f7f8 fee4 	bl	800cf1c <memp_malloc>
 8014154:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d007      	beq.n	801416c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801415c:	2220      	movs	r2, #32
 801415e:	2100      	movs	r1, #0
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f004 fc50 	bl	8018a06 <memset>
    pcb->ttl = UDP_TTL;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	22ff      	movs	r2, #255	@ 0xff
 801416a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801416c:	687b      	ldr	r3, [r7, #4]
}
 801416e:	4618      	mov	r0, r3
 8014170:	3708      	adds	r7, #8
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
	...

08014178 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014178:	b480      	push	{r7}
 801417a:	b085      	sub	sp, #20
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d01e      	beq.n	80141c6 <udp_netif_ip_addr_changed+0x4e>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d01a      	beq.n	80141c6 <udp_netif_ip_addr_changed+0x4e>
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d017      	beq.n	80141c6 <udp_netif_ip_addr_changed+0x4e>
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d013      	beq.n	80141c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801419e:	4b0d      	ldr	r3, [pc, #52]	@ (80141d4 <udp_netif_ip_addr_changed+0x5c>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	60fb      	str	r3, [r7, #12]
 80141a4:	e00c      	b.n	80141c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d103      	bne.n	80141ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	60fb      	str	r3, [r7, #12]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1ef      	bne.n	80141a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80141c6:	bf00      	nop
 80141c8:	3714      	adds	r7, #20
 80141ca:	46bd      	mov	sp, r7
 80141cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d0:	4770      	bx	lr
 80141d2:	bf00      	nop
 80141d4:	2400e9c0 	.word	0x2400e9c0

080141d8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80141dc:	4b20      	ldr	r3, [pc, #128]	@ (8014260 <dhcp_inc_pcb_refcount+0x88>)
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d133      	bne.n	801424c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80141e4:	4b1f      	ldr	r3, [pc, #124]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d005      	beq.n	80141f8 <dhcp_inc_pcb_refcount+0x20>
 80141ec:	4b1e      	ldr	r3, [pc, #120]	@ (8014268 <dhcp_inc_pcb_refcount+0x90>)
 80141ee:	22e5      	movs	r2, #229	@ 0xe5
 80141f0:	491e      	ldr	r1, [pc, #120]	@ (801426c <dhcp_inc_pcb_refcount+0x94>)
 80141f2:	481f      	ldr	r0, [pc, #124]	@ (8014270 <dhcp_inc_pcb_refcount+0x98>)
 80141f4:	f004 fba2 	bl	801893c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80141f8:	f7ff ffa6 	bl	8014148 <udp_new>
 80141fc:	4603      	mov	r3, r0
 80141fe:	4a19      	ldr	r2, [pc, #100]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014200:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014202:	4b18      	ldr	r3, [pc, #96]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d102      	bne.n	8014210 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801420a:	f04f 33ff 	mov.w	r3, #4294967295
 801420e:	e024      	b.n	801425a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014210:	4b14      	ldr	r3, [pc, #80]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	7a5a      	ldrb	r2, [r3, #9]
 8014216:	4b13      	ldr	r3, [pc, #76]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f042 0220 	orr.w	r2, r2, #32
 801421e:	b2d2      	uxtb	r2, r2
 8014220:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014222:	4b10      	ldr	r3, [pc, #64]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	2244      	movs	r2, #68	@ 0x44
 8014228:	4912      	ldr	r1, [pc, #72]	@ (8014274 <dhcp_inc_pcb_refcount+0x9c>)
 801422a:	4618      	mov	r0, r3
 801422c:	f7ff fe34 	bl	8013e98 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014230:	4b0c      	ldr	r3, [pc, #48]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	2243      	movs	r2, #67	@ 0x43
 8014236:	490f      	ldr	r1, [pc, #60]	@ (8014274 <dhcp_inc_pcb_refcount+0x9c>)
 8014238:	4618      	mov	r0, r3
 801423a:	f7ff feb5 	bl	8013fa8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801423e:	4b09      	ldr	r3, [pc, #36]	@ (8014264 <dhcp_inc_pcb_refcount+0x8c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	2200      	movs	r2, #0
 8014244:	490c      	ldr	r1, [pc, #48]	@ (8014278 <dhcp_inc_pcb_refcount+0xa0>)
 8014246:	4618      	mov	r0, r3
 8014248:	f7ff ff1c 	bl	8014084 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801424c:	4b04      	ldr	r3, [pc, #16]	@ (8014260 <dhcp_inc_pcb_refcount+0x88>)
 801424e:	781b      	ldrb	r3, [r3, #0]
 8014250:	3301      	adds	r3, #1
 8014252:	b2da      	uxtb	r2, r3
 8014254:	4b02      	ldr	r3, [pc, #8]	@ (8014260 <dhcp_inc_pcb_refcount+0x88>)
 8014256:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014258:	2300      	movs	r3, #0
}
 801425a:	4618      	mov	r0, r3
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	2400e9f0 	.word	0x2400e9f0
 8014264:	2400e9ec 	.word	0x2400e9ec
 8014268:	0801bbf8 	.word	0x0801bbf8
 801426c:	0801bc30 	.word	0x0801bc30
 8014270:	0801bc58 	.word	0x0801bc58
 8014274:	0801c7c0 	.word	0x0801c7c0
 8014278:	08015b05 	.word	0x08015b05

0801427c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014280:	4b0e      	ldr	r3, [pc, #56]	@ (80142bc <dhcp_dec_pcb_refcount+0x40>)
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d105      	bne.n	8014294 <dhcp_dec_pcb_refcount+0x18>
 8014288:	4b0d      	ldr	r3, [pc, #52]	@ (80142c0 <dhcp_dec_pcb_refcount+0x44>)
 801428a:	22ff      	movs	r2, #255	@ 0xff
 801428c:	490d      	ldr	r1, [pc, #52]	@ (80142c4 <dhcp_dec_pcb_refcount+0x48>)
 801428e:	480e      	ldr	r0, [pc, #56]	@ (80142c8 <dhcp_dec_pcb_refcount+0x4c>)
 8014290:	f004 fb54 	bl	801893c <iprintf>
  dhcp_pcb_refcount--;
 8014294:	4b09      	ldr	r3, [pc, #36]	@ (80142bc <dhcp_dec_pcb_refcount+0x40>)
 8014296:	781b      	ldrb	r3, [r3, #0]
 8014298:	3b01      	subs	r3, #1
 801429a:	b2da      	uxtb	r2, r3
 801429c:	4b07      	ldr	r3, [pc, #28]	@ (80142bc <dhcp_dec_pcb_refcount+0x40>)
 801429e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80142a0:	4b06      	ldr	r3, [pc, #24]	@ (80142bc <dhcp_dec_pcb_refcount+0x40>)
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d107      	bne.n	80142b8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80142a8:	4b08      	ldr	r3, [pc, #32]	@ (80142cc <dhcp_dec_pcb_refcount+0x50>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7ff ff09 	bl	80140c4 <udp_remove>
    dhcp_pcb = NULL;
 80142b2:	4b06      	ldr	r3, [pc, #24]	@ (80142cc <dhcp_dec_pcb_refcount+0x50>)
 80142b4:	2200      	movs	r2, #0
 80142b6:	601a      	str	r2, [r3, #0]
  }
}
 80142b8:	bf00      	nop
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	2400e9f0 	.word	0x2400e9f0
 80142c0:	0801bbf8 	.word	0x0801bbf8
 80142c4:	0801bc80 	.word	0x0801bc80
 80142c8:	0801bc58 	.word	0x0801bc58
 80142cc:	2400e9ec 	.word	0x2400e9ec

080142d0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142dc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80142de:	210c      	movs	r1, #12
 80142e0:	68f8      	ldr	r0, [r7, #12]
 80142e2:	f001 f851 	bl	8015388 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80142e6:	4b06      	ldr	r3, [pc, #24]	@ (8014300 <dhcp_handle_nak+0x30>)
 80142e8:	4a05      	ldr	r2, [pc, #20]	@ (8014300 <dhcp_handle_nak+0x30>)
 80142ea:	4905      	ldr	r1, [pc, #20]	@ (8014300 <dhcp_handle_nak+0x30>)
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7f9 f82d 	bl	800d34c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f000 fc4a 	bl	8014b8c <dhcp_discover>
}
 80142f8:	bf00      	nop
 80142fa:	3710      	adds	r7, #16
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}
 8014300:	0801c7c0 	.word	0x0801c7c0

08014304 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014310:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014312:	2108      	movs	r1, #8
 8014314:	68f8      	ldr	r0, [r7, #12]
 8014316:	f001 f837 	bl	8015388 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	331c      	adds	r3, #28
 801431e:	2200      	movs	r2, #0
 8014320:	4619      	mov	r1, r3
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f002 fb38 	bl	8016998 <etharp_query>
 8014328:	4603      	mov	r3, r0
 801432a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	799b      	ldrb	r3, [r3, #6]
 8014330:	2bff      	cmp	r3, #255	@ 0xff
 8014332:	d005      	beq.n	8014340 <dhcp_check+0x3c>
    dhcp->tries++;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	799b      	ldrb	r3, [r3, #6]
 8014338:	3301      	adds	r3, #1
 801433a:	b2da      	uxtb	r2, r3
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014340:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8014344:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014346:	893b      	ldrh	r3, [r7, #8]
 8014348:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801434c:	4a06      	ldr	r2, [pc, #24]	@ (8014368 <dhcp_check+0x64>)
 801434e:	fb82 1203 	smull	r1, r2, r2, r3
 8014352:	1152      	asrs	r2, r2, #5
 8014354:	17db      	asrs	r3, r3, #31
 8014356:	1ad3      	subs	r3, r2, r3
 8014358:	b29a      	uxth	r2, r3
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801435e:	bf00      	nop
 8014360:	3710      	adds	r7, #16
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	10624dd3 	.word	0x10624dd3

0801436c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801437a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801437c:	4b0c      	ldr	r3, [pc, #48]	@ (80143b0 <dhcp_handle_offer+0x44>)
 801437e:	789b      	ldrb	r3, [r3, #2]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d011      	beq.n	80143a8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	2200      	movs	r2, #0
 8014388:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801438a:	4b0a      	ldr	r3, [pc, #40]	@ (80143b4 <dhcp_handle_offer+0x48>)
 801438c:	689b      	ldr	r3, [r3, #8]
 801438e:	4618      	mov	r0, r3
 8014390:	f7f8 f849 	bl	800c426 <lwip_htonl>
 8014394:	4602      	mov	r2, r0
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	691a      	ldr	r2, [r3, #16]
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f000 f808 	bl	80143b8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80143a8:	bf00      	nop
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	2400e9e4 	.word	0x2400e9e4
 80143b4:	2400e9c4 	.word	0x2400e9c4

080143b8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80143b8:	b5b0      	push	{r4, r5, r7, lr}
 80143ba:	b08a      	sub	sp, #40	@ 0x28
 80143bc:	af02      	add	r7, sp, #8
 80143be:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d109      	bne.n	80143da <dhcp_select+0x22>
 80143c6:	4b71      	ldr	r3, [pc, #452]	@ (801458c <dhcp_select+0x1d4>)
 80143c8:	f240 1277 	movw	r2, #375	@ 0x177
 80143cc:	4970      	ldr	r1, [pc, #448]	@ (8014590 <dhcp_select+0x1d8>)
 80143ce:	4871      	ldr	r0, [pc, #452]	@ (8014594 <dhcp_select+0x1dc>)
 80143d0:	f004 fab4 	bl	801893c <iprintf>
 80143d4:	f06f 030f 	mvn.w	r3, #15
 80143d8:	e0d3      	b.n	8014582 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143de:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d109      	bne.n	80143fa <dhcp_select+0x42>
 80143e6:	4b69      	ldr	r3, [pc, #420]	@ (801458c <dhcp_select+0x1d4>)
 80143e8:	f240 1279 	movw	r2, #377	@ 0x179
 80143ec:	496a      	ldr	r1, [pc, #424]	@ (8014598 <dhcp_select+0x1e0>)
 80143ee:	4869      	ldr	r0, [pc, #420]	@ (8014594 <dhcp_select+0x1dc>)
 80143f0:	f004 faa4 	bl	801893c <iprintf>
 80143f4:	f06f 0305 	mvn.w	r3, #5
 80143f8:	e0c3      	b.n	8014582 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80143fa:	2101      	movs	r1, #1
 80143fc:	69b8      	ldr	r0, [r7, #24]
 80143fe:	f000 ffc3 	bl	8015388 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014402:	f107 030c 	add.w	r3, r7, #12
 8014406:	2203      	movs	r2, #3
 8014408:	69b9      	ldr	r1, [r7, #24]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f001 fc48 	bl	8015ca0 <dhcp_create_msg>
 8014410:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8085 	beq.w	8014524 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	685b      	ldr	r3, [r3, #4]
 801441e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014420:	89b8      	ldrh	r0, [r7, #12]
 8014422:	693b      	ldr	r3, [r7, #16]
 8014424:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014428:	2302      	movs	r3, #2
 801442a:	2239      	movs	r2, #57	@ 0x39
 801442c:	f000 ffc6 	bl	80153bc <dhcp_option>
 8014430:	4603      	mov	r3, r0
 8014432:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014434:	89b8      	ldrh	r0, [r7, #12]
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014440:	461a      	mov	r2, r3
 8014442:	f001 f815 	bl	8015470 <dhcp_option_short>
 8014446:	4603      	mov	r3, r0
 8014448:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801444a:	89b8      	ldrh	r0, [r7, #12]
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014452:	2304      	movs	r3, #4
 8014454:	2232      	movs	r2, #50	@ 0x32
 8014456:	f000 ffb1 	bl	80153bc <dhcp_option>
 801445a:	4603      	mov	r3, r0
 801445c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801445e:	89bc      	ldrh	r4, [r7, #12]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	69db      	ldr	r3, [r3, #28]
 801446a:	4618      	mov	r0, r3
 801446c:	f7f7 ffdb 	bl	800c426 <lwip_htonl>
 8014470:	4603      	mov	r3, r0
 8014472:	461a      	mov	r2, r3
 8014474:	4629      	mov	r1, r5
 8014476:	4620      	mov	r0, r4
 8014478:	f001 f82c 	bl	80154d4 <dhcp_option_long>
 801447c:	4603      	mov	r3, r0
 801447e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014480:	89b8      	ldrh	r0, [r7, #12]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014488:	2304      	movs	r3, #4
 801448a:	2236      	movs	r2, #54	@ 0x36
 801448c:	f000 ff96 	bl	80153bc <dhcp_option>
 8014490:	4603      	mov	r3, r0
 8014492:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014494:	89bc      	ldrh	r4, [r7, #12]
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801449c:	69bb      	ldr	r3, [r7, #24]
 801449e:	699b      	ldr	r3, [r3, #24]
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7f7 ffc0 	bl	800c426 <lwip_htonl>
 80144a6:	4603      	mov	r3, r0
 80144a8:	461a      	mov	r2, r3
 80144aa:	4629      	mov	r1, r5
 80144ac:	4620      	mov	r0, r4
 80144ae:	f001 f811 	bl	80154d4 <dhcp_option_long>
 80144b2:	4603      	mov	r3, r0
 80144b4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80144b6:	89b8      	ldrh	r0, [r7, #12]
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80144be:	2303      	movs	r3, #3
 80144c0:	2237      	movs	r2, #55	@ 0x37
 80144c2:	f000 ff7b 	bl	80153bc <dhcp_option>
 80144c6:	4603      	mov	r3, r0
 80144c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144ca:	2300      	movs	r3, #0
 80144cc:	77bb      	strb	r3, [r7, #30]
 80144ce:	e00e      	b.n	80144ee <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80144d0:	89b8      	ldrh	r0, [r7, #12]
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80144d8:	7fbb      	ldrb	r3, [r7, #30]
 80144da:	4a30      	ldr	r2, [pc, #192]	@ (801459c <dhcp_select+0x1e4>)
 80144dc:	5cd3      	ldrb	r3, [r2, r3]
 80144de:	461a      	mov	r2, r3
 80144e0:	f000 ffa0 	bl	8015424 <dhcp_option_byte>
 80144e4:	4603      	mov	r3, r0
 80144e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144e8:	7fbb      	ldrb	r3, [r7, #30]
 80144ea:	3301      	adds	r3, #1
 80144ec:	77bb      	strb	r3, [r7, #30]
 80144ee:	7fbb      	ldrb	r3, [r7, #30]
 80144f0:	2b02      	cmp	r3, #2
 80144f2:	d9ed      	bls.n	80144d0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80144f4:	89b8      	ldrh	r0, [r7, #12]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	33f0      	adds	r3, #240	@ 0xf0
 80144fa:	697a      	ldr	r2, [r7, #20]
 80144fc:	4619      	mov	r1, r3
 80144fe:	f001 fca5 	bl	8015e4c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014502:	4b27      	ldr	r3, [pc, #156]	@ (80145a0 <dhcp_select+0x1e8>)
 8014504:	6818      	ldr	r0, [r3, #0]
 8014506:	4b27      	ldr	r3, [pc, #156]	@ (80145a4 <dhcp_select+0x1ec>)
 8014508:	9301      	str	r3, [sp, #4]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	2343      	movs	r3, #67	@ 0x43
 8014510:	4a25      	ldr	r2, [pc, #148]	@ (80145a8 <dhcp_select+0x1f0>)
 8014512:	6979      	ldr	r1, [r7, #20]
 8014514:	f7ff fbda 	bl	8013ccc <udp_sendto_if_src>
 8014518:	4603      	mov	r3, r0
 801451a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801451c:	6978      	ldr	r0, [r7, #20]
 801451e:	f7f9 fc23 	bl	800dd68 <pbuf_free>
 8014522:	e001      	b.n	8014528 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014524:	23ff      	movs	r3, #255	@ 0xff
 8014526:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014528:	69bb      	ldr	r3, [r7, #24]
 801452a:	799b      	ldrb	r3, [r3, #6]
 801452c:	2bff      	cmp	r3, #255	@ 0xff
 801452e:	d005      	beq.n	801453c <dhcp_select+0x184>
    dhcp->tries++;
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	799b      	ldrb	r3, [r3, #6]
 8014534:	3301      	adds	r3, #1
 8014536:	b2da      	uxtb	r2, r3
 8014538:	69bb      	ldr	r3, [r7, #24]
 801453a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801453c:	69bb      	ldr	r3, [r7, #24]
 801453e:	799b      	ldrb	r3, [r3, #6]
 8014540:	2b05      	cmp	r3, #5
 8014542:	d80d      	bhi.n	8014560 <dhcp_select+0x1a8>
 8014544:	69bb      	ldr	r3, [r7, #24]
 8014546:	799b      	ldrb	r3, [r3, #6]
 8014548:	461a      	mov	r2, r3
 801454a:	2301      	movs	r3, #1
 801454c:	4093      	lsls	r3, r2
 801454e:	b29b      	uxth	r3, r3
 8014550:	461a      	mov	r2, r3
 8014552:	0152      	lsls	r2, r2, #5
 8014554:	1ad2      	subs	r2, r2, r3
 8014556:	0092      	lsls	r2, r2, #2
 8014558:	4413      	add	r3, r2
 801455a:	00db      	lsls	r3, r3, #3
 801455c:	b29b      	uxth	r3, r3
 801455e:	e001      	b.n	8014564 <dhcp_select+0x1ac>
 8014560:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014564:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014566:	89fb      	ldrh	r3, [r7, #14]
 8014568:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801456c:	4a0f      	ldr	r2, [pc, #60]	@ (80145ac <dhcp_select+0x1f4>)
 801456e:	fb82 1203 	smull	r1, r2, r2, r3
 8014572:	1152      	asrs	r2, r2, #5
 8014574:	17db      	asrs	r3, r3, #31
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	b29a      	uxth	r2, r3
 801457a:	69bb      	ldr	r3, [r7, #24]
 801457c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801457e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014582:	4618      	mov	r0, r3
 8014584:	3720      	adds	r7, #32
 8014586:	46bd      	mov	sp, r7
 8014588:	bdb0      	pop	{r4, r5, r7, pc}
 801458a:	bf00      	nop
 801458c:	0801bbf8 	.word	0x0801bbf8
 8014590:	0801bca4 	.word	0x0801bca4
 8014594:	0801bc58 	.word	0x0801bc58
 8014598:	0801bcc0 	.word	0x0801bcc0
 801459c:	24000034 	.word	0x24000034
 80145a0:	2400e9ec 	.word	0x2400e9ec
 80145a4:	0801c7c0 	.word	0x0801c7c0
 80145a8:	0801c7c4 	.word	0x0801c7c4
 80145ac:	10624dd3 	.word	0x10624dd3

080145b0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b082      	sub	sp, #8
 80145b4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80145b6:	4b27      	ldr	r3, [pc, #156]	@ (8014654 <dhcp_coarse_tmr+0xa4>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	607b      	str	r3, [r7, #4]
 80145bc:	e042      	b.n	8014644 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145c2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80145c4:	683b      	ldr	r3, [r7, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d039      	beq.n	801463e <dhcp_coarse_tmr+0x8e>
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	795b      	ldrb	r3, [r3, #5]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d035      	beq.n	801463e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	8a9b      	ldrh	r3, [r3, #20]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d012      	beq.n	8014600 <dhcp_coarse_tmr+0x50>
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	8a5b      	ldrh	r3, [r3, #18]
 80145de:	3301      	adds	r3, #1
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	825a      	strh	r2, [r3, #18]
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	8a5a      	ldrh	r2, [r3, #18]
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	8a9b      	ldrh	r3, [r3, #20]
 80145ee:	429a      	cmp	r2, r3
 80145f0:	d106      	bne.n	8014600 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fe2e 	bl	8015254 <dhcp_release_and_stop>
        dhcp_start(netif);
 80145f8:	6878      	ldr	r0, [r7, #4]
 80145fa:	f000 f96b 	bl	80148d4 <dhcp_start>
 80145fe:	e01e      	b.n	801463e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	8a1b      	ldrh	r3, [r3, #16]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d00b      	beq.n	8014620 <dhcp_coarse_tmr+0x70>
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	8a1b      	ldrh	r3, [r3, #16]
 801460c:	1e5a      	subs	r2, r3, #1
 801460e:	b291      	uxth	r1, r2
 8014610:	683a      	ldr	r2, [r7, #0]
 8014612:	8211      	strh	r1, [r2, #16]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d103      	bne.n	8014620 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 f8c7 	bl	80147ac <dhcp_t2_timeout>
 801461e:	e00e      	b.n	801463e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	89db      	ldrh	r3, [r3, #14]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d00a      	beq.n	801463e <dhcp_coarse_tmr+0x8e>
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	89db      	ldrh	r3, [r3, #14]
 801462c:	1e5a      	subs	r2, r3, #1
 801462e:	b291      	uxth	r1, r2
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	81d1      	strh	r1, [r2, #14]
 8014634:	2b01      	cmp	r3, #1
 8014636:	d102      	bne.n	801463e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f000 f888 	bl	801474e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	607b      	str	r3, [r7, #4]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d1b9      	bne.n	80145be <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801464a:	bf00      	nop
 801464c:	bf00      	nop
 801464e:	3708      	adds	r7, #8
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	2400e958 	.word	0x2400e958

08014658 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801465e:	4b16      	ldr	r3, [pc, #88]	@ (80146b8 <dhcp_fine_tmr+0x60>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	607b      	str	r3, [r7, #4]
 8014664:	e020      	b.n	80146a8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801466a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d017      	beq.n	80146a2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	891b      	ldrh	r3, [r3, #8]
 8014676:	2b01      	cmp	r3, #1
 8014678:	d906      	bls.n	8014688 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	891b      	ldrh	r3, [r3, #8]
 801467e:	3b01      	subs	r3, #1
 8014680:	b29a      	uxth	r2, r3
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	811a      	strh	r2, [r3, #8]
 8014686:	e00c      	b.n	80146a2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	891b      	ldrh	r3, [r3, #8]
 801468c:	2b01      	cmp	r3, #1
 801468e:	d108      	bne.n	80146a2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	891b      	ldrh	r3, [r3, #8]
 8014694:	3b01      	subs	r3, #1
 8014696:	b29a      	uxth	r2, r3
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f000 f80d 	bl	80146bc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	607b      	str	r3, [r7, #4]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d1db      	bne.n	8014666 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80146ae:	bf00      	nop
 80146b0:	bf00      	nop
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}
 80146b8:	2400e958 	.word	0x2400e958

080146bc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146c8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	795b      	ldrb	r3, [r3, #5]
 80146ce:	2b0c      	cmp	r3, #12
 80146d0:	d003      	beq.n	80146da <dhcp_timeout+0x1e>
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	795b      	ldrb	r3, [r3, #5]
 80146d6:	2b06      	cmp	r3, #6
 80146d8:	d103      	bne.n	80146e2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 fa56 	bl	8014b8c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80146e0:	e031      	b.n	8014746 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	795b      	ldrb	r3, [r3, #5]
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d10e      	bne.n	8014708 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	799b      	ldrb	r3, [r3, #6]
 80146ee:	2b05      	cmp	r3, #5
 80146f0:	d803      	bhi.n	80146fa <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff fe60 	bl	80143b8 <dhcp_select>
}
 80146f8:	e025      	b.n	8014746 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 fdaa 	bl	8015254 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f000 f8e7 	bl	80148d4 <dhcp_start>
}
 8014706:	e01e      	b.n	8014746 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	795b      	ldrb	r3, [r3, #5]
 801470c:	2b08      	cmp	r3, #8
 801470e:	d10b      	bne.n	8014728 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	799b      	ldrb	r3, [r3, #6]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d803      	bhi.n	8014720 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f7ff fdf3 	bl	8014304 <dhcp_check>
}
 801471e:	e012      	b.n	8014746 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f000 fad5 	bl	8014cd0 <dhcp_bind>
}
 8014726:	e00e      	b.n	8014746 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	795b      	ldrb	r3, [r3, #5]
 801472c:	2b03      	cmp	r3, #3
 801472e:	d10a      	bne.n	8014746 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	799b      	ldrb	r3, [r3, #6]
 8014734:	2b01      	cmp	r3, #1
 8014736:	d803      	bhi.n	8014740 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f000 fcd7 	bl	80150ec <dhcp_reboot>
}
 801473e:	e002      	b.n	8014746 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f000 fa23 	bl	8014b8c <dhcp_discover>
}
 8014746:	bf00      	nop
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}

0801474e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801474e:	b580      	push	{r7, lr}
 8014750:	b084      	sub	sp, #16
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801475a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	795b      	ldrb	r3, [r3, #5]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d007      	beq.n	8014774 <dhcp_t1_timeout+0x26>
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	795b      	ldrb	r3, [r3, #5]
 8014768:	2b0a      	cmp	r3, #10
 801476a:	d003      	beq.n	8014774 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014770:	2b05      	cmp	r3, #5
 8014772:	d117      	bne.n	80147a4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f000 fb85 	bl	8014e84 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	899b      	ldrh	r3, [r3, #12]
 801477e:	461a      	mov	r2, r3
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	8a5b      	ldrh	r3, [r3, #18]
 8014784:	1ad3      	subs	r3, r2, r3
 8014786:	2b01      	cmp	r3, #1
 8014788:	dd0c      	ble.n	80147a4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	899b      	ldrh	r3, [r3, #12]
 801478e:	461a      	mov	r2, r3
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	8a5b      	ldrh	r3, [r3, #18]
 8014794:	1ad3      	subs	r3, r2, r3
 8014796:	2b00      	cmp	r3, #0
 8014798:	da00      	bge.n	801479c <dhcp_t1_timeout+0x4e>
 801479a:	3301      	adds	r3, #1
 801479c:	105b      	asrs	r3, r3, #1
 801479e:	b29a      	uxth	r2, r3
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80147a4:	bf00      	nop
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	795b      	ldrb	r3, [r3, #5]
 80147be:	2b01      	cmp	r3, #1
 80147c0:	d00b      	beq.n	80147da <dhcp_t2_timeout+0x2e>
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	795b      	ldrb	r3, [r3, #5]
 80147c6:	2b0a      	cmp	r3, #10
 80147c8:	d007      	beq.n	80147da <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80147ce:	2b05      	cmp	r3, #5
 80147d0:	d003      	beq.n	80147da <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	795b      	ldrb	r3, [r3, #5]
 80147d6:	2b04      	cmp	r3, #4
 80147d8:	d117      	bne.n	801480a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f000 fbec 	bl	8014fb8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	8a9b      	ldrh	r3, [r3, #20]
 80147e4:	461a      	mov	r2, r3
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	8a5b      	ldrh	r3, [r3, #18]
 80147ea:	1ad3      	subs	r3, r2, r3
 80147ec:	2b01      	cmp	r3, #1
 80147ee:	dd0c      	ble.n	801480a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	8a9b      	ldrh	r3, [r3, #20]
 80147f4:	461a      	mov	r2, r3
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	8a5b      	ldrh	r3, [r3, #18]
 80147fa:	1ad3      	subs	r3, r2, r3
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	da00      	bge.n	8014802 <dhcp_t2_timeout+0x56>
 8014800:	3301      	adds	r3, #1
 8014802:	105b      	asrs	r3, r3, #1
 8014804:	b29a      	uxth	r2, r3
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801480a:	bf00      	nop
 801480c:	3710      	adds	r7, #16
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
	...

08014814 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
 801481c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014822:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2200      	movs	r2, #0
 8014828:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2200      	movs	r2, #0
 801482e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014830:	4b26      	ldr	r3, [pc, #152]	@ (80148cc <dhcp_handle_ack+0xb8>)
 8014832:	78db      	ldrb	r3, [r3, #3]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d003      	beq.n	8014840 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014838:	4b25      	ldr	r3, [pc, #148]	@ (80148d0 <dhcp_handle_ack+0xbc>)
 801483a:	68da      	ldr	r2, [r3, #12]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014840:	4b22      	ldr	r3, [pc, #136]	@ (80148cc <dhcp_handle_ack+0xb8>)
 8014842:	791b      	ldrb	r3, [r3, #4]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d004      	beq.n	8014852 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014848:	4b21      	ldr	r3, [pc, #132]	@ (80148d0 <dhcp_handle_ack+0xbc>)
 801484a:	691a      	ldr	r2, [r3, #16]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014850:	e004      	b.n	801485c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014856:	085a      	lsrs	r2, r3, #1
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801485c:	4b1b      	ldr	r3, [pc, #108]	@ (80148cc <dhcp_handle_ack+0xb8>)
 801485e:	795b      	ldrb	r3, [r3, #5]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d004      	beq.n	801486e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014864:	4b1a      	ldr	r3, [pc, #104]	@ (80148d0 <dhcp_handle_ack+0xbc>)
 8014866:	695a      	ldr	r2, [r3, #20]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	631a      	str	r2, [r3, #48]	@ 0x30
 801486c:	e007      	b.n	801487e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014872:	4613      	mov	r3, r2
 8014874:	00db      	lsls	r3, r3, #3
 8014876:	1a9b      	subs	r3, r3, r2
 8014878:	08da      	lsrs	r2, r3, #3
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	691a      	ldr	r2, [r3, #16]
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014886:	4b11      	ldr	r3, [pc, #68]	@ (80148cc <dhcp_handle_ack+0xb8>)
 8014888:	799b      	ldrb	r3, [r3, #6]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d00b      	beq.n	80148a6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801488e:	4b10      	ldr	r3, [pc, #64]	@ (80148d0 <dhcp_handle_ack+0xbc>)
 8014890:	699b      	ldr	r3, [r3, #24]
 8014892:	4618      	mov	r0, r3
 8014894:	f7f7 fdc7 	bl	800c426 <lwip_htonl>
 8014898:	4602      	mov	r2, r0
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2201      	movs	r2, #1
 80148a2:	71da      	strb	r2, [r3, #7]
 80148a4:	e002      	b.n	80148ac <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2200      	movs	r2, #0
 80148aa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80148ac:	4b07      	ldr	r3, [pc, #28]	@ (80148cc <dhcp_handle_ack+0xb8>)
 80148ae:	79db      	ldrb	r3, [r3, #7]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d007      	beq.n	80148c4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80148b4:	4b06      	ldr	r3, [pc, #24]	@ (80148d0 <dhcp_handle_ack+0xbc>)
 80148b6:	69db      	ldr	r3, [r3, #28]
 80148b8:	4618      	mov	r0, r3
 80148ba:	f7f7 fdb4 	bl	800c426 <lwip_htonl>
 80148be:	4602      	mov	r2, r0
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80148c4:	bf00      	nop
 80148c6:	3710      	adds	r7, #16
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	2400e9e4 	.word	0x2400e9e4
 80148d0:	2400e9c4 	.word	0x2400e9c4

080148d4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d109      	bne.n	80148f6 <dhcp_start+0x22>
 80148e2:	4b37      	ldr	r3, [pc, #220]	@ (80149c0 <dhcp_start+0xec>)
 80148e4:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80148e8:	4936      	ldr	r1, [pc, #216]	@ (80149c4 <dhcp_start+0xf0>)
 80148ea:	4837      	ldr	r0, [pc, #220]	@ (80149c8 <dhcp_start+0xf4>)
 80148ec:	f004 f826 	bl	801893c <iprintf>
 80148f0:	f06f 030f 	mvn.w	r3, #15
 80148f4:	e060      	b.n	80149b8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80148fc:	f003 0301 	and.w	r3, r3, #1
 8014900:	2b00      	cmp	r3, #0
 8014902:	d109      	bne.n	8014918 <dhcp_start+0x44>
 8014904:	4b2e      	ldr	r3, [pc, #184]	@ (80149c0 <dhcp_start+0xec>)
 8014906:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801490a:	4930      	ldr	r1, [pc, #192]	@ (80149cc <dhcp_start+0xf8>)
 801490c:	482e      	ldr	r0, [pc, #184]	@ (80149c8 <dhcp_start+0xf4>)
 801490e:	f004 f815 	bl	801893c <iprintf>
 8014912:	f06f 030f 	mvn.w	r3, #15
 8014916:	e04f      	b.n	80149b8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801491c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014922:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014926:	d202      	bcs.n	801492e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014928:	f04f 33ff 	mov.w	r3, #4294967295
 801492c:	e044      	b.n	80149b8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d10d      	bne.n	8014950 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014934:	2034      	movs	r0, #52	@ 0x34
 8014936:	f7f8 f94d 	bl	800cbd4 <mem_malloc>
 801493a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d102      	bne.n	8014948 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014942:	f04f 33ff 	mov.w	r3, #4294967295
 8014946:	e037      	b.n	80149b8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	68fa      	ldr	r2, [r7, #12]
 801494c:	625a      	str	r2, [r3, #36]	@ 0x24
 801494e:	e005      	b.n	801495c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	791b      	ldrb	r3, [r3, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d001      	beq.n	801495c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014958:	f7ff fc90 	bl	801427c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801495c:	2234      	movs	r2, #52	@ 0x34
 801495e:	2100      	movs	r1, #0
 8014960:	68f8      	ldr	r0, [r7, #12]
 8014962:	f004 f850 	bl	8018a06 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014966:	f7ff fc37 	bl	80141d8 <dhcp_inc_pcb_refcount>
 801496a:	4603      	mov	r3, r0
 801496c:	2b00      	cmp	r3, #0
 801496e:	d002      	beq.n	8014976 <dhcp_start+0xa2>
    return ERR_MEM;
 8014970:	f04f 33ff 	mov.w	r3, #4294967295
 8014974:	e020      	b.n	80149b8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2201      	movs	r2, #1
 801497a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014982:	f003 0304 	and.w	r3, r3, #4
 8014986:	2b00      	cmp	r3, #0
 8014988:	d105      	bne.n	8014996 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801498a:	2102      	movs	r1, #2
 801498c:	68f8      	ldr	r0, [r7, #12]
 801498e:	f000 fcfb 	bl	8015388 <dhcp_set_state>
    return ERR_OK;
 8014992:	2300      	movs	r3, #0
 8014994:	e010      	b.n	80149b8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 f8f8 	bl	8014b8c <dhcp_discover>
 801499c:	4603      	mov	r3, r0
 801499e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80149a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d005      	beq.n	80149b4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f000 fc53 	bl	8015254 <dhcp_release_and_stop>
    return ERR_MEM;
 80149ae:	f04f 33ff 	mov.w	r3, #4294967295
 80149b2:	e001      	b.n	80149b8 <dhcp_start+0xe4>
  }
  return result;
 80149b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3710      	adds	r7, #16
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd80      	pop	{r7, pc}
 80149c0:	0801bbf8 	.word	0x0801bbf8
 80149c4:	0801bcdc 	.word	0x0801bcdc
 80149c8:	0801bc58 	.word	0x0801bc58
 80149cc:	0801bd20 	.word	0x0801bd20

080149d0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b084      	sub	sp, #16
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149dc:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d025      	beq.n	8014a30 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	795b      	ldrb	r3, [r3, #5]
 80149e8:	2b0a      	cmp	r3, #10
 80149ea:	d008      	beq.n	80149fe <dhcp_network_changed+0x2e>
 80149ec:	2b0a      	cmp	r3, #10
 80149ee:	dc0d      	bgt.n	8014a0c <dhcp_network_changed+0x3c>
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d01f      	beq.n	8014a34 <dhcp_network_changed+0x64>
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	db09      	blt.n	8014a0c <dhcp_network_changed+0x3c>
 80149f8:	3b03      	subs	r3, #3
 80149fa:	2b02      	cmp	r3, #2
 80149fc:	d806      	bhi.n	8014a0c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 fb71 	bl	80150ec <dhcp_reboot>
      break;
 8014a0a:	e014      	b.n	8014a36 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	795b      	ldrb	r3, [r3, #5]
 8014a10:	2b0c      	cmp	r3, #12
 8014a12:	d906      	bls.n	8014a22 <dhcp_network_changed+0x52>
 8014a14:	4b09      	ldr	r3, [pc, #36]	@ (8014a3c <dhcp_network_changed+0x6c>)
 8014a16:	f240 326d 	movw	r2, #877	@ 0x36d
 8014a1a:	4909      	ldr	r1, [pc, #36]	@ (8014a40 <dhcp_network_changed+0x70>)
 8014a1c:	4809      	ldr	r0, [pc, #36]	@ (8014a44 <dhcp_network_changed+0x74>)
 8014a1e:	f003 ff8d 	bl	801893c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2200      	movs	r2, #0
 8014a26:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 f8af 	bl	8014b8c <dhcp_discover>
      break;
 8014a2e:	e002      	b.n	8014a36 <dhcp_network_changed+0x66>
    return;
 8014a30:	bf00      	nop
 8014a32:	e000      	b.n	8014a36 <dhcp_network_changed+0x66>
      break;
 8014a34:	bf00      	nop
  }
}
 8014a36:	3710      	adds	r7, #16
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	0801bbf8 	.word	0x0801bbf8
 8014a40:	0801bd44 	.word	0x0801bd44
 8014a44:	0801bc58 	.word	0x0801bc58

08014a48 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b084      	sub	sp, #16
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d107      	bne.n	8014a68 <dhcp_arp_reply+0x20>
 8014a58:	4b0e      	ldr	r3, [pc, #56]	@ (8014a94 <dhcp_arp_reply+0x4c>)
 8014a5a:	f240 328b 	movw	r2, #907	@ 0x38b
 8014a5e:	490e      	ldr	r1, [pc, #56]	@ (8014a98 <dhcp_arp_reply+0x50>)
 8014a60:	480e      	ldr	r0, [pc, #56]	@ (8014a9c <dhcp_arp_reply+0x54>)
 8014a62:	f003 ff6b 	bl	801893c <iprintf>
 8014a66:	e012      	b.n	8014a8e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a6c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00c      	beq.n	8014a8e <dhcp_arp_reply+0x46>
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	795b      	ldrb	r3, [r3, #5]
 8014a78:	2b08      	cmp	r3, #8
 8014a7a:	d108      	bne.n	8014a8e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	681a      	ldr	r2, [r3, #0]
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	69db      	ldr	r3, [r3, #28]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d102      	bne.n	8014a8e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f000 f809 	bl	8014aa0 <dhcp_decline>
    }
  }
}
 8014a8e:	3710      	adds	r7, #16
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	0801bbf8 	.word	0x0801bbf8
 8014a98:	0801bcdc 	.word	0x0801bcdc
 8014a9c:	0801bc58 	.word	0x0801bc58

08014aa0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014aa0:	b5b0      	push	{r4, r5, r7, lr}
 8014aa2:	b08a      	sub	sp, #40	@ 0x28
 8014aa4:	af02      	add	r7, sp, #8
 8014aa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014aac:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014aae:	210c      	movs	r1, #12
 8014ab0:	69b8      	ldr	r0, [r7, #24]
 8014ab2:	f000 fc69 	bl	8015388 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014ab6:	f107 030c 	add.w	r3, r7, #12
 8014aba:	2204      	movs	r2, #4
 8014abc:	69b9      	ldr	r1, [r7, #24]
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f001 f8ee 	bl	8015ca0 <dhcp_create_msg>
 8014ac4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d035      	beq.n	8014b38 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014ad2:	89b8      	ldrh	r0, [r7, #12]
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ada:	2304      	movs	r3, #4
 8014adc:	2232      	movs	r2, #50	@ 0x32
 8014ade:	f000 fc6d 	bl	80153bc <dhcp_option>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014ae6:	89bc      	ldrh	r4, [r7, #12]
 8014ae8:	693b      	ldr	r3, [r7, #16]
 8014aea:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014aee:	69bb      	ldr	r3, [r7, #24]
 8014af0:	69db      	ldr	r3, [r3, #28]
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7f7 fc97 	bl	800c426 <lwip_htonl>
 8014af8:	4603      	mov	r3, r0
 8014afa:	461a      	mov	r2, r3
 8014afc:	4629      	mov	r1, r5
 8014afe:	4620      	mov	r0, r4
 8014b00:	f000 fce8 	bl	80154d4 <dhcp_option_long>
 8014b04:	4603      	mov	r3, r0
 8014b06:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b08:	89b8      	ldrh	r0, [r7, #12]
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	33f0      	adds	r3, #240	@ 0xf0
 8014b0e:	697a      	ldr	r2, [r7, #20]
 8014b10:	4619      	mov	r1, r3
 8014b12:	f001 f99b 	bl	8015e4c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014b16:	4b19      	ldr	r3, [pc, #100]	@ (8014b7c <dhcp_decline+0xdc>)
 8014b18:	6818      	ldr	r0, [r3, #0]
 8014b1a:	4b19      	ldr	r3, [pc, #100]	@ (8014b80 <dhcp_decline+0xe0>)
 8014b1c:	9301      	str	r3, [sp, #4]
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	9300      	str	r3, [sp, #0]
 8014b22:	2343      	movs	r3, #67	@ 0x43
 8014b24:	4a17      	ldr	r2, [pc, #92]	@ (8014b84 <dhcp_decline+0xe4>)
 8014b26:	6979      	ldr	r1, [r7, #20]
 8014b28:	f7ff f8d0 	bl	8013ccc <udp_sendto_if_src>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014b30:	6978      	ldr	r0, [r7, #20]
 8014b32:	f7f9 f919 	bl	800dd68 <pbuf_free>
 8014b36:	e001      	b.n	8014b3c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014b38:	23ff      	movs	r3, #255	@ 0xff
 8014b3a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014b3c:	69bb      	ldr	r3, [r7, #24]
 8014b3e:	799b      	ldrb	r3, [r3, #6]
 8014b40:	2bff      	cmp	r3, #255	@ 0xff
 8014b42:	d005      	beq.n	8014b50 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	799b      	ldrb	r3, [r3, #6]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	b2da      	uxtb	r2, r3
 8014b4c:	69bb      	ldr	r3, [r7, #24]
 8014b4e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014b50:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014b54:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b56:	89fb      	ldrh	r3, [r7, #14]
 8014b58:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8014b88 <dhcp_decline+0xe8>)
 8014b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8014b62:	1152      	asrs	r2, r2, #5
 8014b64:	17db      	asrs	r3, r3, #31
 8014b66:	1ad3      	subs	r3, r2, r3
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	69bb      	ldr	r3, [r7, #24]
 8014b6c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3720      	adds	r7, #32
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bdb0      	pop	{r4, r5, r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	2400e9ec 	.word	0x2400e9ec
 8014b80:	0801c7c0 	.word	0x0801c7c0
 8014b84:	0801c7c4 	.word	0x0801c7c4
 8014b88:	10624dd3 	.word	0x10624dd3

08014b8c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b08a      	sub	sp, #40	@ 0x28
 8014b90:	af02      	add	r7, sp, #8
 8014b92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b98:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014b9e:	69bb      	ldr	r3, [r7, #24]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014ba4:	2106      	movs	r1, #6
 8014ba6:	69b8      	ldr	r0, [r7, #24]
 8014ba8:	f000 fbee 	bl	8015388 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014bac:	f107 0308 	add.w	r3, r7, #8
 8014bb0:	2201      	movs	r2, #1
 8014bb2:	69b9      	ldr	r1, [r7, #24]
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f001 f873 	bl	8015ca0 <dhcp_create_msg>
 8014bba:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014bbc:	693b      	ldr	r3, [r7, #16]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d04b      	beq.n	8014c5a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014bc2:	693b      	ldr	r3, [r7, #16]
 8014bc4:	685b      	ldr	r3, [r3, #4]
 8014bc6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014bc8:	8938      	ldrh	r0, [r7, #8]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014bd0:	2302      	movs	r3, #2
 8014bd2:	2239      	movs	r2, #57	@ 0x39
 8014bd4:	f000 fbf2 	bl	80153bc <dhcp_option>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014bdc:	8938      	ldrh	r0, [r7, #8]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014be8:	461a      	mov	r2, r3
 8014bea:	f000 fc41 	bl	8015470 <dhcp_option_short>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014bf2:	8938      	ldrh	r0, [r7, #8]
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014bfa:	2303      	movs	r3, #3
 8014bfc:	2237      	movs	r2, #55	@ 0x37
 8014bfe:	f000 fbdd 	bl	80153bc <dhcp_option>
 8014c02:	4603      	mov	r3, r0
 8014c04:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c06:	2300      	movs	r3, #0
 8014c08:	77fb      	strb	r3, [r7, #31]
 8014c0a:	e00e      	b.n	8014c2a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014c0c:	8938      	ldrh	r0, [r7, #8]
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014c14:	7ffb      	ldrb	r3, [r7, #31]
 8014c16:	4a29      	ldr	r2, [pc, #164]	@ (8014cbc <dhcp_discover+0x130>)
 8014c18:	5cd3      	ldrb	r3, [r2, r3]
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	f000 fc02 	bl	8015424 <dhcp_option_byte>
 8014c20:	4603      	mov	r3, r0
 8014c22:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c24:	7ffb      	ldrb	r3, [r7, #31]
 8014c26:	3301      	adds	r3, #1
 8014c28:	77fb      	strb	r3, [r7, #31]
 8014c2a:	7ffb      	ldrb	r3, [r7, #31]
 8014c2c:	2b02      	cmp	r3, #2
 8014c2e:	d9ed      	bls.n	8014c0c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c30:	8938      	ldrh	r0, [r7, #8]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	33f0      	adds	r3, #240	@ 0xf0
 8014c36:	693a      	ldr	r2, [r7, #16]
 8014c38:	4619      	mov	r1, r3
 8014c3a:	f001 f907 	bl	8015e4c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014c3e:	4b20      	ldr	r3, [pc, #128]	@ (8014cc0 <dhcp_discover+0x134>)
 8014c40:	6818      	ldr	r0, [r3, #0]
 8014c42:	4b20      	ldr	r3, [pc, #128]	@ (8014cc4 <dhcp_discover+0x138>)
 8014c44:	9301      	str	r3, [sp, #4]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	9300      	str	r3, [sp, #0]
 8014c4a:	2343      	movs	r3, #67	@ 0x43
 8014c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8014cc8 <dhcp_discover+0x13c>)
 8014c4e:	6939      	ldr	r1, [r7, #16]
 8014c50:	f7ff f83c 	bl	8013ccc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014c54:	6938      	ldr	r0, [r7, #16]
 8014c56:	f7f9 f887 	bl	800dd68 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	799b      	ldrb	r3, [r3, #6]
 8014c5e:	2bff      	cmp	r3, #255	@ 0xff
 8014c60:	d005      	beq.n	8014c6e <dhcp_discover+0xe2>
    dhcp->tries++;
 8014c62:	69bb      	ldr	r3, [r7, #24]
 8014c64:	799b      	ldrb	r3, [r3, #6]
 8014c66:	3301      	adds	r3, #1
 8014c68:	b2da      	uxtb	r2, r3
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014c6e:	69bb      	ldr	r3, [r7, #24]
 8014c70:	799b      	ldrb	r3, [r3, #6]
 8014c72:	2b05      	cmp	r3, #5
 8014c74:	d80d      	bhi.n	8014c92 <dhcp_discover+0x106>
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	799b      	ldrb	r3, [r3, #6]
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	4093      	lsls	r3, r2
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	461a      	mov	r2, r3
 8014c84:	0152      	lsls	r2, r2, #5
 8014c86:	1ad2      	subs	r2, r2, r3
 8014c88:	0092      	lsls	r2, r2, #2
 8014c8a:	4413      	add	r3, r2
 8014c8c:	00db      	lsls	r3, r3, #3
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	e001      	b.n	8014c96 <dhcp_discover+0x10a>
 8014c92:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014c96:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c98:	897b      	ldrh	r3, [r7, #10]
 8014c9a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8014ccc <dhcp_discover+0x140>)
 8014ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8014ca4:	1152      	asrs	r2, r2, #5
 8014ca6:	17db      	asrs	r3, r3, #31
 8014ca8:	1ad3      	subs	r3, r2, r3
 8014caa:	b29a      	uxth	r2, r3
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014cb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3720      	adds	r7, #32
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	24000034 	.word	0x24000034
 8014cc0:	2400e9ec 	.word	0x2400e9ec
 8014cc4:	0801c7c0 	.word	0x0801c7c0
 8014cc8:	0801c7c4 	.word	0x0801c7c4
 8014ccc:	10624dd3 	.word	0x10624dd3

08014cd0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b088      	sub	sp, #32
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d107      	bne.n	8014cee <dhcp_bind+0x1e>
 8014cde:	4b64      	ldr	r3, [pc, #400]	@ (8014e70 <dhcp_bind+0x1a0>)
 8014ce0:	f240 4215 	movw	r2, #1045	@ 0x415
 8014ce4:	4963      	ldr	r1, [pc, #396]	@ (8014e74 <dhcp_bind+0x1a4>)
 8014ce6:	4864      	ldr	r0, [pc, #400]	@ (8014e78 <dhcp_bind+0x1a8>)
 8014ce8:	f003 fe28 	bl	801893c <iprintf>
 8014cec:	e0bc      	b.n	8014e68 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cf2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014cf4:	69bb      	ldr	r3, [r7, #24]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d107      	bne.n	8014d0a <dhcp_bind+0x3a>
 8014cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8014e70 <dhcp_bind+0x1a0>)
 8014cfc:	f240 4217 	movw	r2, #1047	@ 0x417
 8014d00:	495e      	ldr	r1, [pc, #376]	@ (8014e7c <dhcp_bind+0x1ac>)
 8014d02:	485d      	ldr	r0, [pc, #372]	@ (8014e78 <dhcp_bind+0x1a8>)
 8014d04:	f003 fe1a 	bl	801893c <iprintf>
 8014d08:	e0ae      	b.n	8014e68 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014d10:	69bb      	ldr	r3, [r7, #24]
 8014d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d18:	d019      	beq.n	8014d4e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d1e:	331e      	adds	r3, #30
 8014d20:	4a57      	ldr	r2, [pc, #348]	@ (8014e80 <dhcp_bind+0x1b0>)
 8014d22:	fba2 2303 	umull	r2, r3, r2, r3
 8014d26:	095b      	lsrs	r3, r3, #5
 8014d28:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d30:	d302      	bcc.n	8014d38 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014d32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d36:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014d38:	69fb      	ldr	r3, [r7, #28]
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014d40:	69bb      	ldr	r3, [r7, #24]
 8014d42:	8a9b      	ldrh	r3, [r3, #20]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d102      	bne.n	8014d4e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d56:	d01d      	beq.n	8014d94 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d5c:	331e      	adds	r3, #30
 8014d5e:	4a48      	ldr	r2, [pc, #288]	@ (8014e80 <dhcp_bind+0x1b0>)
 8014d60:	fba2 2303 	umull	r2, r3, r2, r3
 8014d64:	095b      	lsrs	r3, r3, #5
 8014d66:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d6e:	d302      	bcc.n	8014d76 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014d70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d74:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	b29a      	uxth	r2, r3
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014d7e:	69bb      	ldr	r3, [r7, #24]
 8014d80:	895b      	ldrh	r3, [r3, #10]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d102      	bne.n	8014d8c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014d86:	69bb      	ldr	r3, [r7, #24]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014d8c:	69bb      	ldr	r3, [r7, #24]
 8014d8e:	895a      	ldrh	r2, [r3, #10]
 8014d90:	69bb      	ldr	r3, [r7, #24]
 8014d92:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d9c:	d01d      	beq.n	8014dda <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014da2:	331e      	adds	r3, #30
 8014da4:	4a36      	ldr	r2, [pc, #216]	@ (8014e80 <dhcp_bind+0x1b0>)
 8014da6:	fba2 2303 	umull	r2, r3, r2, r3
 8014daa:	095b      	lsrs	r3, r3, #5
 8014dac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014dae:	69fb      	ldr	r3, [r7, #28]
 8014db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014db4:	d302      	bcc.n	8014dbc <dhcp_bind+0xec>
      timeout = 0xffff;
 8014db6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014dba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014dbc:	69fb      	ldr	r3, [r7, #28]
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	69bb      	ldr	r3, [r7, #24]
 8014dc2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	899b      	ldrh	r3, [r3, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d102      	bne.n	8014dd2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014dcc:	69bb      	ldr	r3, [r7, #24]
 8014dce:	2201      	movs	r2, #1
 8014dd0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014dd2:	69bb      	ldr	r3, [r7, #24]
 8014dd4:	899a      	ldrh	r2, [r3, #12]
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	895a      	ldrh	r2, [r3, #10]
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	899b      	ldrh	r3, [r3, #12]
 8014de2:	429a      	cmp	r2, r3
 8014de4:	d306      	bcc.n	8014df4 <dhcp_bind+0x124>
 8014de6:	69bb      	ldr	r3, [r7, #24]
 8014de8:	899b      	ldrh	r3, [r3, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d002      	beq.n	8014df4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	2200      	movs	r2, #0
 8014df2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014df4:	69bb      	ldr	r3, [r7, #24]
 8014df6:	79db      	ldrb	r3, [r3, #7]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d003      	beq.n	8014e04 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014dfc:	69bb      	ldr	r3, [r7, #24]
 8014dfe:	6a1b      	ldr	r3, [r3, #32]
 8014e00:	613b      	str	r3, [r7, #16]
 8014e02:	e014      	b.n	8014e2e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014e04:	69bb      	ldr	r3, [r7, #24]
 8014e06:	331c      	adds	r3, #28
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	db02      	blt.n	8014e1a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014e14:	23ff      	movs	r3, #255	@ 0xff
 8014e16:	613b      	str	r3, [r7, #16]
 8014e18:	e009      	b.n	8014e2e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014e1a:	7dfb      	ldrb	r3, [r7, #23]
 8014e1c:	2bbf      	cmp	r3, #191	@ 0xbf
 8014e1e:	d903      	bls.n	8014e28 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014e20:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8014e24:	613b      	str	r3, [r7, #16]
 8014e26:	e002      	b.n	8014e2e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014e2c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014e2e:	69bb      	ldr	r3, [r7, #24]
 8014e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e32:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d108      	bne.n	8014e4c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	69da      	ldr	r2, [r3, #28]
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	4013      	ands	r3, r2
 8014e42:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014e4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014e4c:	210a      	movs	r1, #10
 8014e4e:	69b8      	ldr	r0, [r7, #24]
 8014e50:	f000 fa9a 	bl	8015388 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014e54:	69bb      	ldr	r3, [r7, #24]
 8014e56:	f103 011c 	add.w	r1, r3, #28
 8014e5a:	f107 030c 	add.w	r3, r7, #12
 8014e5e:	f107 0210 	add.w	r2, r7, #16
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f7f8 fa72 	bl	800d34c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014e68:	3720      	adds	r7, #32
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	0801bbf8 	.word	0x0801bbf8
 8014e74:	0801bd58 	.word	0x0801bd58
 8014e78:	0801bc58 	.word	0x0801bc58
 8014e7c:	0801bd74 	.word	0x0801bd74
 8014e80:	88888889 	.word	0x88888889

08014e84 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b08a      	sub	sp, #40	@ 0x28
 8014e88:	af02      	add	r7, sp, #8
 8014e8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e90:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014e92:	2105      	movs	r1, #5
 8014e94:	69b8      	ldr	r0, [r7, #24]
 8014e96:	f000 fa77 	bl	8015388 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014e9a:	f107 030c 	add.w	r3, r7, #12
 8014e9e:	2203      	movs	r2, #3
 8014ea0:	69b9      	ldr	r1, [r7, #24]
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f000 fefc 	bl	8015ca0 <dhcp_create_msg>
 8014ea8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d04e      	beq.n	8014f4e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014eb6:	89b8      	ldrh	r0, [r7, #12]
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ebe:	2302      	movs	r3, #2
 8014ec0:	2239      	movs	r2, #57	@ 0x39
 8014ec2:	f000 fa7b 	bl	80153bc <dhcp_option>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014eca:	89b8      	ldrh	r0, [r7, #12]
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	f000 faca 	bl	8015470 <dhcp_option_short>
 8014edc:	4603      	mov	r3, r0
 8014ede:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014ee0:	89b8      	ldrh	r0, [r7, #12]
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ee8:	2303      	movs	r3, #3
 8014eea:	2237      	movs	r2, #55	@ 0x37
 8014eec:	f000 fa66 	bl	80153bc <dhcp_option>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	77bb      	strb	r3, [r7, #30]
 8014ef8:	e00e      	b.n	8014f18 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014efa:	89b8      	ldrh	r0, [r7, #12]
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014f02:	7fbb      	ldrb	r3, [r7, #30]
 8014f04:	4a29      	ldr	r2, [pc, #164]	@ (8014fac <dhcp_renew+0x128>)
 8014f06:	5cd3      	ldrb	r3, [r2, r3]
 8014f08:	461a      	mov	r2, r3
 8014f0a:	f000 fa8b 	bl	8015424 <dhcp_option_byte>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014f12:	7fbb      	ldrb	r3, [r7, #30]
 8014f14:	3301      	adds	r3, #1
 8014f16:	77bb      	strb	r3, [r7, #30]
 8014f18:	7fbb      	ldrb	r3, [r7, #30]
 8014f1a:	2b02      	cmp	r3, #2
 8014f1c:	d9ed      	bls.n	8014efa <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f1e:	89b8      	ldrh	r0, [r7, #12]
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	33f0      	adds	r3, #240	@ 0xf0
 8014f24:	697a      	ldr	r2, [r7, #20]
 8014f26:	4619      	mov	r1, r3
 8014f28:	f000 ff90 	bl	8015e4c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014f2c:	4b20      	ldr	r3, [pc, #128]	@ (8014fb0 <dhcp_renew+0x12c>)
 8014f2e:	6818      	ldr	r0, [r3, #0]
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	f103 0218 	add.w	r2, r3, #24
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	9300      	str	r3, [sp, #0]
 8014f3a:	2343      	movs	r3, #67	@ 0x43
 8014f3c:	6979      	ldr	r1, [r7, #20]
 8014f3e:	f7fe fe51 	bl	8013be4 <udp_sendto_if>
 8014f42:	4603      	mov	r3, r0
 8014f44:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014f46:	6978      	ldr	r0, [r7, #20]
 8014f48:	f7f8 ff0e 	bl	800dd68 <pbuf_free>
 8014f4c:	e001      	b.n	8014f52 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014f4e:	23ff      	movs	r3, #255	@ 0xff
 8014f50:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	799b      	ldrb	r3, [r3, #6]
 8014f56:	2bff      	cmp	r3, #255	@ 0xff
 8014f58:	d005      	beq.n	8014f66 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	799b      	ldrb	r3, [r3, #6]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	b2da      	uxtb	r2, r3
 8014f62:	69bb      	ldr	r3, [r7, #24]
 8014f64:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014f66:	69bb      	ldr	r3, [r7, #24]
 8014f68:	799b      	ldrb	r3, [r3, #6]
 8014f6a:	2b09      	cmp	r3, #9
 8014f6c:	d809      	bhi.n	8014f82 <dhcp_renew+0xfe>
 8014f6e:	69bb      	ldr	r3, [r7, #24]
 8014f70:	799b      	ldrb	r3, [r3, #6]
 8014f72:	461a      	mov	r2, r3
 8014f74:	0152      	lsls	r2, r2, #5
 8014f76:	1ad2      	subs	r2, r2, r3
 8014f78:	0092      	lsls	r2, r2, #2
 8014f7a:	4413      	add	r3, r2
 8014f7c:	011b      	lsls	r3, r3, #4
 8014f7e:	b29b      	uxth	r3, r3
 8014f80:	e001      	b.n	8014f86 <dhcp_renew+0x102>
 8014f82:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8014f86:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f88:	89fb      	ldrh	r3, [r7, #14]
 8014f8a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014f8e:	4a09      	ldr	r2, [pc, #36]	@ (8014fb4 <dhcp_renew+0x130>)
 8014f90:	fb82 1203 	smull	r1, r2, r2, r3
 8014f94:	1152      	asrs	r2, r2, #5
 8014f96:	17db      	asrs	r3, r3, #31
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014fa0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3720      	adds	r7, #32
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	24000034 	.word	0x24000034
 8014fb0:	2400e9ec 	.word	0x2400e9ec
 8014fb4:	10624dd3 	.word	0x10624dd3

08014fb8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b08a      	sub	sp, #40	@ 0x28
 8014fbc:	af02      	add	r7, sp, #8
 8014fbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fc4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014fc6:	2104      	movs	r1, #4
 8014fc8:	69b8      	ldr	r0, [r7, #24]
 8014fca:	f000 f9dd 	bl	8015388 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014fce:	f107 030c 	add.w	r3, r7, #12
 8014fd2:	2203      	movs	r2, #3
 8014fd4:	69b9      	ldr	r1, [r7, #24]
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 fe62 	bl	8015ca0 <dhcp_create_msg>
 8014fdc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d04c      	beq.n	801507e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014fea:	89b8      	ldrh	r0, [r7, #12]
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014ff2:	2302      	movs	r3, #2
 8014ff4:	2239      	movs	r2, #57	@ 0x39
 8014ff6:	f000 f9e1 	bl	80153bc <dhcp_option>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014ffe:	89b8      	ldrh	r0, [r7, #12]
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801500a:	461a      	mov	r2, r3
 801500c:	f000 fa30 	bl	8015470 <dhcp_option_short>
 8015010:	4603      	mov	r3, r0
 8015012:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015014:	89b8      	ldrh	r0, [r7, #12]
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801501c:	2303      	movs	r3, #3
 801501e:	2237      	movs	r2, #55	@ 0x37
 8015020:	f000 f9cc 	bl	80153bc <dhcp_option>
 8015024:	4603      	mov	r3, r0
 8015026:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015028:	2300      	movs	r3, #0
 801502a:	77bb      	strb	r3, [r7, #30]
 801502c:	e00e      	b.n	801504c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801502e:	89b8      	ldrh	r0, [r7, #12]
 8015030:	693b      	ldr	r3, [r7, #16]
 8015032:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015036:	7fbb      	ldrb	r3, [r7, #30]
 8015038:	4a28      	ldr	r2, [pc, #160]	@ (80150dc <dhcp_rebind+0x124>)
 801503a:	5cd3      	ldrb	r3, [r2, r3]
 801503c:	461a      	mov	r2, r3
 801503e:	f000 f9f1 	bl	8015424 <dhcp_option_byte>
 8015042:	4603      	mov	r3, r0
 8015044:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015046:	7fbb      	ldrb	r3, [r7, #30]
 8015048:	3301      	adds	r3, #1
 801504a:	77bb      	strb	r3, [r7, #30]
 801504c:	7fbb      	ldrb	r3, [r7, #30]
 801504e:	2b02      	cmp	r3, #2
 8015050:	d9ed      	bls.n	801502e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015052:	89b8      	ldrh	r0, [r7, #12]
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	33f0      	adds	r3, #240	@ 0xf0
 8015058:	697a      	ldr	r2, [r7, #20]
 801505a:	4619      	mov	r1, r3
 801505c:	f000 fef6 	bl	8015e4c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015060:	4b1f      	ldr	r3, [pc, #124]	@ (80150e0 <dhcp_rebind+0x128>)
 8015062:	6818      	ldr	r0, [r3, #0]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	9300      	str	r3, [sp, #0]
 8015068:	2343      	movs	r3, #67	@ 0x43
 801506a:	4a1e      	ldr	r2, [pc, #120]	@ (80150e4 <dhcp_rebind+0x12c>)
 801506c:	6979      	ldr	r1, [r7, #20]
 801506e:	f7fe fdb9 	bl	8013be4 <udp_sendto_if>
 8015072:	4603      	mov	r3, r0
 8015074:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015076:	6978      	ldr	r0, [r7, #20]
 8015078:	f7f8 fe76 	bl	800dd68 <pbuf_free>
 801507c:	e001      	b.n	8015082 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801507e:	23ff      	movs	r3, #255	@ 0xff
 8015080:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	799b      	ldrb	r3, [r3, #6]
 8015086:	2bff      	cmp	r3, #255	@ 0xff
 8015088:	d005      	beq.n	8015096 <dhcp_rebind+0xde>
    dhcp->tries++;
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	799b      	ldrb	r3, [r3, #6]
 801508e:	3301      	adds	r3, #1
 8015090:	b2da      	uxtb	r2, r3
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	799b      	ldrb	r3, [r3, #6]
 801509a:	2b09      	cmp	r3, #9
 801509c:	d809      	bhi.n	80150b2 <dhcp_rebind+0xfa>
 801509e:	69bb      	ldr	r3, [r7, #24]
 80150a0:	799b      	ldrb	r3, [r3, #6]
 80150a2:	461a      	mov	r2, r3
 80150a4:	0152      	lsls	r2, r2, #5
 80150a6:	1ad2      	subs	r2, r2, r3
 80150a8:	0092      	lsls	r2, r2, #2
 80150aa:	4413      	add	r3, r2
 80150ac:	00db      	lsls	r3, r3, #3
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	e001      	b.n	80150b6 <dhcp_rebind+0xfe>
 80150b2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80150b6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80150b8:	89fb      	ldrh	r3, [r7, #14]
 80150ba:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80150be:	4a0a      	ldr	r2, [pc, #40]	@ (80150e8 <dhcp_rebind+0x130>)
 80150c0:	fb82 1203 	smull	r1, r2, r2, r3
 80150c4:	1152      	asrs	r2, r2, #5
 80150c6:	17db      	asrs	r3, r3, #31
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80150d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3720      	adds	r7, #32
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	24000034 	.word	0x24000034
 80150e0:	2400e9ec 	.word	0x2400e9ec
 80150e4:	0801c7c4 	.word	0x0801c7c4
 80150e8:	10624dd3 	.word	0x10624dd3

080150ec <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80150ec:	b5b0      	push	{r4, r5, r7, lr}
 80150ee:	b08a      	sub	sp, #40	@ 0x28
 80150f0:	af02      	add	r7, sp, #8
 80150f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150f8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80150fa:	2103      	movs	r1, #3
 80150fc:	69b8      	ldr	r0, [r7, #24]
 80150fe:	f000 f943 	bl	8015388 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015102:	f107 030c 	add.w	r3, r7, #12
 8015106:	2203      	movs	r2, #3
 8015108:	69b9      	ldr	r1, [r7, #24]
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f000 fdc8 	bl	8015ca0 <dhcp_create_msg>
 8015110:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d066      	beq.n	80151e6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801511e:	89b8      	ldrh	r0, [r7, #12]
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015126:	2302      	movs	r3, #2
 8015128:	2239      	movs	r2, #57	@ 0x39
 801512a:	f000 f947 	bl	80153bc <dhcp_option>
 801512e:	4603      	mov	r3, r0
 8015130:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015132:	89b8      	ldrh	r0, [r7, #12]
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	33f0      	adds	r3, #240	@ 0xf0
 8015138:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801513c:	4619      	mov	r1, r3
 801513e:	f000 f997 	bl	8015470 <dhcp_option_short>
 8015142:	4603      	mov	r3, r0
 8015144:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015146:	89b8      	ldrh	r0, [r7, #12]
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801514e:	2304      	movs	r3, #4
 8015150:	2232      	movs	r2, #50	@ 0x32
 8015152:	f000 f933 	bl	80153bc <dhcp_option>
 8015156:	4603      	mov	r3, r0
 8015158:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801515a:	89bc      	ldrh	r4, [r7, #12]
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	69db      	ldr	r3, [r3, #28]
 8015166:	4618      	mov	r0, r3
 8015168:	f7f7 f95d 	bl	800c426 <lwip_htonl>
 801516c:	4603      	mov	r3, r0
 801516e:	461a      	mov	r2, r3
 8015170:	4629      	mov	r1, r5
 8015172:	4620      	mov	r0, r4
 8015174:	f000 f9ae 	bl	80154d4 <dhcp_option_long>
 8015178:	4603      	mov	r3, r0
 801517a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801517c:	89b8      	ldrh	r0, [r7, #12]
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015184:	2303      	movs	r3, #3
 8015186:	2237      	movs	r2, #55	@ 0x37
 8015188:	f000 f918 	bl	80153bc <dhcp_option>
 801518c:	4603      	mov	r3, r0
 801518e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015190:	2300      	movs	r3, #0
 8015192:	77bb      	strb	r3, [r7, #30]
 8015194:	e00e      	b.n	80151b4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015196:	89b8      	ldrh	r0, [r7, #12]
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801519e:	7fbb      	ldrb	r3, [r7, #30]
 80151a0:	4a28      	ldr	r2, [pc, #160]	@ (8015244 <dhcp_reboot+0x158>)
 80151a2:	5cd3      	ldrb	r3, [r2, r3]
 80151a4:	461a      	mov	r2, r3
 80151a6:	f000 f93d 	bl	8015424 <dhcp_option_byte>
 80151aa:	4603      	mov	r3, r0
 80151ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151ae:	7fbb      	ldrb	r3, [r7, #30]
 80151b0:	3301      	adds	r3, #1
 80151b2:	77bb      	strb	r3, [r7, #30]
 80151b4:	7fbb      	ldrb	r3, [r7, #30]
 80151b6:	2b02      	cmp	r3, #2
 80151b8:	d9ed      	bls.n	8015196 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80151ba:	89b8      	ldrh	r0, [r7, #12]
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	33f0      	adds	r3, #240	@ 0xf0
 80151c0:	697a      	ldr	r2, [r7, #20]
 80151c2:	4619      	mov	r1, r3
 80151c4:	f000 fe42 	bl	8015e4c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80151c8:	4b1f      	ldr	r3, [pc, #124]	@ (8015248 <dhcp_reboot+0x15c>)
 80151ca:	6818      	ldr	r0, [r3, #0]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	9300      	str	r3, [sp, #0]
 80151d0:	2343      	movs	r3, #67	@ 0x43
 80151d2:	4a1e      	ldr	r2, [pc, #120]	@ (801524c <dhcp_reboot+0x160>)
 80151d4:	6979      	ldr	r1, [r7, #20]
 80151d6:	f7fe fd05 	bl	8013be4 <udp_sendto_if>
 80151da:	4603      	mov	r3, r0
 80151dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80151de:	6978      	ldr	r0, [r7, #20]
 80151e0:	f7f8 fdc2 	bl	800dd68 <pbuf_free>
 80151e4:	e001      	b.n	80151ea <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80151e6:	23ff      	movs	r3, #255	@ 0xff
 80151e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80151ea:	69bb      	ldr	r3, [r7, #24]
 80151ec:	799b      	ldrb	r3, [r3, #6]
 80151ee:	2bff      	cmp	r3, #255	@ 0xff
 80151f0:	d005      	beq.n	80151fe <dhcp_reboot+0x112>
    dhcp->tries++;
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	799b      	ldrb	r3, [r3, #6]
 80151f6:	3301      	adds	r3, #1
 80151f8:	b2da      	uxtb	r2, r3
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	799b      	ldrb	r3, [r3, #6]
 8015202:	2b09      	cmp	r3, #9
 8015204:	d809      	bhi.n	801521a <dhcp_reboot+0x12e>
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	799b      	ldrb	r3, [r3, #6]
 801520a:	461a      	mov	r2, r3
 801520c:	0152      	lsls	r2, r2, #5
 801520e:	1ad2      	subs	r2, r2, r3
 8015210:	0092      	lsls	r2, r2, #2
 8015212:	4413      	add	r3, r2
 8015214:	00db      	lsls	r3, r3, #3
 8015216:	b29b      	uxth	r3, r3
 8015218:	e001      	b.n	801521e <dhcp_reboot+0x132>
 801521a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801521e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015220:	89fb      	ldrh	r3, [r7, #14]
 8015222:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015226:	4a0a      	ldr	r2, [pc, #40]	@ (8015250 <dhcp_reboot+0x164>)
 8015228:	fb82 1203 	smull	r1, r2, r2, r3
 801522c:	1152      	asrs	r2, r2, #5
 801522e:	17db      	asrs	r3, r3, #31
 8015230:	1ad3      	subs	r3, r2, r3
 8015232:	b29a      	uxth	r2, r3
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015238:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801523c:	4618      	mov	r0, r3
 801523e:	3720      	adds	r7, #32
 8015240:	46bd      	mov	sp, r7
 8015242:	bdb0      	pop	{r4, r5, r7, pc}
 8015244:	24000034 	.word	0x24000034
 8015248:	2400e9ec 	.word	0x2400e9ec
 801524c:	0801c7c4 	.word	0x0801c7c4
 8015250:	10624dd3 	.word	0x10624dd3

08015254 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015254:	b5b0      	push	{r4, r5, r7, lr}
 8015256:	b08a      	sub	sp, #40	@ 0x28
 8015258:	af02      	add	r7, sp, #8
 801525a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015260:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	2b00      	cmp	r3, #0
 8015266:	f000 8084 	beq.w	8015372 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	795b      	ldrb	r3, [r3, #5]
 801526e:	2b00      	cmp	r3, #0
 8015270:	f000 8081 	beq.w	8015376 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	699b      	ldr	r3, [r3, #24]
 8015278:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801527a:	69fb      	ldr	r3, [r7, #28]
 801527c:	2200      	movs	r2, #0
 801527e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	2200      	movs	r2, #0
 8015284:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	2200      	movs	r2, #0
 801528a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	2200      	movs	r2, #0
 8015290:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015292:	69fb      	ldr	r3, [r7, #28]
 8015294:	2200      	movs	r2, #0
 8015296:	631a      	str	r2, [r3, #48]	@ 0x30
 8015298:	69fb      	ldr	r3, [r7, #28]
 801529a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80152a8:	69fb      	ldr	r3, [r7, #28]
 80152aa:	2200      	movs	r2, #0
 80152ac:	829a      	strh	r2, [r3, #20]
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	8a9a      	ldrh	r2, [r3, #20]
 80152b2:	69fb      	ldr	r3, [r7, #28]
 80152b4:	825a      	strh	r2, [r3, #18]
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	8a5a      	ldrh	r2, [r3, #18]
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	821a      	strh	r2, [r3, #16]
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	8a1a      	ldrh	r2, [r3, #16]
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f000 fdee 	bl	8015ea8 <dhcp_supplied_address>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d03b      	beq.n	801534a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80152d2:	f107 030e 	add.w	r3, r7, #14
 80152d6:	2207      	movs	r2, #7
 80152d8:	69f9      	ldr	r1, [r7, #28]
 80152da:	6878      	ldr	r0, [r7, #4]
 80152dc:	f000 fce0 	bl	8015ca0 <dhcp_create_msg>
 80152e0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d030      	beq.n	801534a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152e8:	69bb      	ldr	r3, [r7, #24]
 80152ea:	685b      	ldr	r3, [r3, #4]
 80152ec:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80152ee:	89f8      	ldrh	r0, [r7, #14]
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80152f6:	2304      	movs	r3, #4
 80152f8:	2236      	movs	r2, #54	@ 0x36
 80152fa:	f000 f85f 	bl	80153bc <dhcp_option>
 80152fe:	4603      	mov	r3, r0
 8015300:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015302:	89fc      	ldrh	r4, [r7, #14]
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	4618      	mov	r0, r3
 801530e:	f7f7 f88a 	bl	800c426 <lwip_htonl>
 8015312:	4603      	mov	r3, r0
 8015314:	461a      	mov	r2, r3
 8015316:	4629      	mov	r1, r5
 8015318:	4620      	mov	r0, r4
 801531a:	f000 f8db 	bl	80154d4 <dhcp_option_long>
 801531e:	4603      	mov	r3, r0
 8015320:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015322:	89f8      	ldrh	r0, [r7, #14]
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	33f0      	adds	r3, #240	@ 0xf0
 8015328:	69ba      	ldr	r2, [r7, #24]
 801532a:	4619      	mov	r1, r3
 801532c:	f000 fd8e 	bl	8015e4c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015330:	4b13      	ldr	r3, [pc, #76]	@ (8015380 <dhcp_release_and_stop+0x12c>)
 8015332:	6818      	ldr	r0, [r3, #0]
 8015334:	f107 0210 	add.w	r2, r7, #16
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	2343      	movs	r3, #67	@ 0x43
 801533e:	69b9      	ldr	r1, [r7, #24]
 8015340:	f7fe fc50 	bl	8013be4 <udp_sendto_if>
      pbuf_free(p_out);
 8015344:	69b8      	ldr	r0, [r7, #24]
 8015346:	f7f8 fd0f 	bl	800dd68 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801534a:	4b0e      	ldr	r3, [pc, #56]	@ (8015384 <dhcp_release_and_stop+0x130>)
 801534c:	4a0d      	ldr	r2, [pc, #52]	@ (8015384 <dhcp_release_and_stop+0x130>)
 801534e:	490d      	ldr	r1, [pc, #52]	@ (8015384 <dhcp_release_and_stop+0x130>)
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f7f7 fffb 	bl	800d34c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015356:	2100      	movs	r1, #0
 8015358:	69f8      	ldr	r0, [r7, #28]
 801535a:	f000 f815 	bl	8015388 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	791b      	ldrb	r3, [r3, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d008      	beq.n	8015378 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015366:	f7fe ff89 	bl	801427c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801536a:	69fb      	ldr	r3, [r7, #28]
 801536c:	2200      	movs	r2, #0
 801536e:	711a      	strb	r2, [r3, #4]
 8015370:	e002      	b.n	8015378 <dhcp_release_and_stop+0x124>
    return;
 8015372:	bf00      	nop
 8015374:	e000      	b.n	8015378 <dhcp_release_and_stop+0x124>
    return;
 8015376:	bf00      	nop
  }
}
 8015378:	3720      	adds	r7, #32
 801537a:	46bd      	mov	sp, r7
 801537c:	bdb0      	pop	{r4, r5, r7, pc}
 801537e:	bf00      	nop
 8015380:	2400e9ec 	.word	0x2400e9ec
 8015384:	0801c7c0 	.word	0x0801c7c0

08015388 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015388:	b480      	push	{r7}
 801538a:	b083      	sub	sp, #12
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	460b      	mov	r3, r1
 8015392:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	795b      	ldrb	r3, [r3, #5]
 8015398:	78fa      	ldrb	r2, [r7, #3]
 801539a:	429a      	cmp	r2, r3
 801539c:	d008      	beq.n	80153b0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	78fa      	ldrb	r2, [r7, #3]
 80153a2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2200      	movs	r2, #0
 80153a8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2200      	movs	r2, #0
 80153ae:	811a      	strh	r2, [r3, #8]
  }
}
 80153b0:	bf00      	nop
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr

080153bc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6039      	str	r1, [r7, #0]
 80153c4:	4611      	mov	r1, r2
 80153c6:	461a      	mov	r2, r3
 80153c8:	4603      	mov	r3, r0
 80153ca:	80fb      	strh	r3, [r7, #6]
 80153cc:	460b      	mov	r3, r1
 80153ce:	717b      	strb	r3, [r7, #5]
 80153d0:	4613      	mov	r3, r2
 80153d2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80153d4:	88fa      	ldrh	r2, [r7, #6]
 80153d6:	793b      	ldrb	r3, [r7, #4]
 80153d8:	4413      	add	r3, r2
 80153da:	3302      	adds	r3, #2
 80153dc:	2b44      	cmp	r3, #68	@ 0x44
 80153de:	d906      	bls.n	80153ee <dhcp_option+0x32>
 80153e0:	4b0d      	ldr	r3, [pc, #52]	@ (8015418 <dhcp_option+0x5c>)
 80153e2:	f240 529a 	movw	r2, #1434	@ 0x59a
 80153e6:	490d      	ldr	r1, [pc, #52]	@ (801541c <dhcp_option+0x60>)
 80153e8:	480d      	ldr	r0, [pc, #52]	@ (8015420 <dhcp_option+0x64>)
 80153ea:	f003 faa7 	bl	801893c <iprintf>
  options[options_out_len++] = option_type;
 80153ee:	88fb      	ldrh	r3, [r7, #6]
 80153f0:	1c5a      	adds	r2, r3, #1
 80153f2:	80fa      	strh	r2, [r7, #6]
 80153f4:	461a      	mov	r2, r3
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	4413      	add	r3, r2
 80153fa:	797a      	ldrb	r2, [r7, #5]
 80153fc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80153fe:	88fb      	ldrh	r3, [r7, #6]
 8015400:	1c5a      	adds	r2, r3, #1
 8015402:	80fa      	strh	r2, [r7, #6]
 8015404:	461a      	mov	r2, r3
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	4413      	add	r3, r2
 801540a:	793a      	ldrb	r2, [r7, #4]
 801540c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801540e:	88fb      	ldrh	r3, [r7, #6]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}
 8015418:	0801bbf8 	.word	0x0801bbf8
 801541c:	0801bd8c 	.word	0x0801bd8c
 8015420:	0801bc58 	.word	0x0801bc58

08015424 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	6039      	str	r1, [r7, #0]
 801542e:	80fb      	strh	r3, [r7, #6]
 8015430:	4613      	mov	r3, r2
 8015432:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015434:	88fb      	ldrh	r3, [r7, #6]
 8015436:	2b43      	cmp	r3, #67	@ 0x43
 8015438:	d906      	bls.n	8015448 <dhcp_option_byte+0x24>
 801543a:	4b0a      	ldr	r3, [pc, #40]	@ (8015464 <dhcp_option_byte+0x40>)
 801543c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8015440:	4909      	ldr	r1, [pc, #36]	@ (8015468 <dhcp_option_byte+0x44>)
 8015442:	480a      	ldr	r0, [pc, #40]	@ (801546c <dhcp_option_byte+0x48>)
 8015444:	f003 fa7a 	bl	801893c <iprintf>
  options[options_out_len++] = value;
 8015448:	88fb      	ldrh	r3, [r7, #6]
 801544a:	1c5a      	adds	r2, r3, #1
 801544c:	80fa      	strh	r2, [r7, #6]
 801544e:	461a      	mov	r2, r3
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	4413      	add	r3, r2
 8015454:	797a      	ldrb	r2, [r7, #5]
 8015456:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015458:	88fb      	ldrh	r3, [r7, #6]
}
 801545a:	4618      	mov	r0, r3
 801545c:	3708      	adds	r7, #8
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
 8015462:	bf00      	nop
 8015464:	0801bbf8 	.word	0x0801bbf8
 8015468:	0801bdd0 	.word	0x0801bdd0
 801546c:	0801bc58 	.word	0x0801bc58

08015470 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	4603      	mov	r3, r0
 8015478:	6039      	str	r1, [r7, #0]
 801547a:	80fb      	strh	r3, [r7, #6]
 801547c:	4613      	mov	r3, r2
 801547e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015480:	88fb      	ldrh	r3, [r7, #6]
 8015482:	3302      	adds	r3, #2
 8015484:	2b44      	cmp	r3, #68	@ 0x44
 8015486:	d906      	bls.n	8015496 <dhcp_option_short+0x26>
 8015488:	4b0f      	ldr	r3, [pc, #60]	@ (80154c8 <dhcp_option_short+0x58>)
 801548a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801548e:	490f      	ldr	r1, [pc, #60]	@ (80154cc <dhcp_option_short+0x5c>)
 8015490:	480f      	ldr	r0, [pc, #60]	@ (80154d0 <dhcp_option_short+0x60>)
 8015492:	f003 fa53 	bl	801893c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015496:	88bb      	ldrh	r3, [r7, #4]
 8015498:	0a1b      	lsrs	r3, r3, #8
 801549a:	b29a      	uxth	r2, r3
 801549c:	88fb      	ldrh	r3, [r7, #6]
 801549e:	1c59      	adds	r1, r3, #1
 80154a0:	80f9      	strh	r1, [r7, #6]
 80154a2:	4619      	mov	r1, r3
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	440b      	add	r3, r1
 80154a8:	b2d2      	uxtb	r2, r2
 80154aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80154ac:	88fb      	ldrh	r3, [r7, #6]
 80154ae:	1c5a      	adds	r2, r3, #1
 80154b0:	80fa      	strh	r2, [r7, #6]
 80154b2:	461a      	mov	r2, r3
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	4413      	add	r3, r2
 80154b8:	88ba      	ldrh	r2, [r7, #4]
 80154ba:	b2d2      	uxtb	r2, r2
 80154bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80154be:	88fb      	ldrh	r3, [r7, #6]
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3708      	adds	r7, #8
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	0801bbf8 	.word	0x0801bbf8
 80154cc:	0801be08 	.word	0x0801be08
 80154d0:	0801bc58 	.word	0x0801bc58

080154d4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
 80154da:	4603      	mov	r3, r0
 80154dc:	60b9      	str	r1, [r7, #8]
 80154de:	607a      	str	r2, [r7, #4]
 80154e0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80154e2:	89fb      	ldrh	r3, [r7, #14]
 80154e4:	3304      	adds	r3, #4
 80154e6:	2b44      	cmp	r3, #68	@ 0x44
 80154e8:	d906      	bls.n	80154f8 <dhcp_option_long+0x24>
 80154ea:	4b19      	ldr	r3, [pc, #100]	@ (8015550 <dhcp_option_long+0x7c>)
 80154ec:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80154f0:	4918      	ldr	r1, [pc, #96]	@ (8015554 <dhcp_option_long+0x80>)
 80154f2:	4819      	ldr	r0, [pc, #100]	@ (8015558 <dhcp_option_long+0x84>)
 80154f4:	f003 fa22 	bl	801893c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	0e1a      	lsrs	r2, r3, #24
 80154fc:	89fb      	ldrh	r3, [r7, #14]
 80154fe:	1c59      	adds	r1, r3, #1
 8015500:	81f9      	strh	r1, [r7, #14]
 8015502:	4619      	mov	r1, r3
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	440b      	add	r3, r1
 8015508:	b2d2      	uxtb	r2, r2
 801550a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	0c1a      	lsrs	r2, r3, #16
 8015510:	89fb      	ldrh	r3, [r7, #14]
 8015512:	1c59      	adds	r1, r3, #1
 8015514:	81f9      	strh	r1, [r7, #14]
 8015516:	4619      	mov	r1, r3
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	440b      	add	r3, r1
 801551c:	b2d2      	uxtb	r2, r2
 801551e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	0a1a      	lsrs	r2, r3, #8
 8015524:	89fb      	ldrh	r3, [r7, #14]
 8015526:	1c59      	adds	r1, r3, #1
 8015528:	81f9      	strh	r1, [r7, #14]
 801552a:	4619      	mov	r1, r3
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	440b      	add	r3, r1
 8015530:	b2d2      	uxtb	r2, r2
 8015532:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015534:	89fb      	ldrh	r3, [r7, #14]
 8015536:	1c5a      	adds	r2, r3, #1
 8015538:	81fa      	strh	r2, [r7, #14]
 801553a:	461a      	mov	r2, r3
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	4413      	add	r3, r2
 8015540:	687a      	ldr	r2, [r7, #4]
 8015542:	b2d2      	uxtb	r2, r2
 8015544:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015546:	89fb      	ldrh	r3, [r7, #14]
}
 8015548:	4618      	mov	r0, r3
 801554a:	3710      	adds	r7, #16
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	0801bbf8 	.word	0x0801bbf8
 8015554:	0801be44 	.word	0x0801be44
 8015558:	0801bc58 	.word	0x0801bc58

0801555c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b090      	sub	sp, #64	@ 0x40
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015566:	2300      	movs	r3, #0
 8015568:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801556e:	2208      	movs	r2, #8
 8015570:	2100      	movs	r1, #0
 8015572:	48b5      	ldr	r0, [pc, #724]	@ (8015848 <dhcp_parse_reply+0x2ec>)
 8015574:	f003 fa47 	bl	8018a06 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	895b      	ldrh	r3, [r3, #10]
 801557c:	2b2b      	cmp	r3, #43	@ 0x2b
 801557e:	d802      	bhi.n	8015586 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015580:	f06f 0301 	mvn.w	r3, #1
 8015584:	e2a7      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801558c:	23f0      	movs	r3, #240	@ 0xf0
 801558e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	891b      	ldrh	r3, [r3, #8]
 8015594:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801559a:	e00c      	b.n	80155b6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801559e:	895b      	ldrh	r3, [r3, #10]
 80155a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80155a2:	1ad3      	subs	r3, r2, r3
 80155a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80155a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a8:	895b      	ldrh	r3, [r3, #10]
 80155aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80155ac:	1ad3      	subs	r3, r2, r3
 80155ae:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80155b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80155b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d004      	beq.n	80155c6 <dhcp_parse_reply+0x6a>
 80155bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155be:	895b      	ldrh	r3, [r3, #10]
 80155c0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d2ea      	bcs.n	801559c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80155c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d102      	bne.n	80155d2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80155cc:	f06f 0301 	mvn.w	r3, #1
 80155d0:	e281      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80155d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80155d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80155d6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80155d8:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80155da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80155e0:	e239      	b.n	8015a56 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80155e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80155e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80155e6:	4413      	add	r3, r2
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80155ec:	2300      	movs	r3, #0
 80155ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 80155f2:	f04f 33ff 	mov.w	r3, #4294967295
 80155f6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80155f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80155fa:	3302      	adds	r3, #2
 80155fc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80155fe:	8bfa      	ldrh	r2, [r7, #30]
 8015600:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015602:	429a      	cmp	r2, r3
 8015604:	d202      	bcs.n	801560c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015606:	f06f 0301 	mvn.w	r3, #1
 801560a:	e264      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801560c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801560e:	3301      	adds	r3, #1
 8015610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015612:	8952      	ldrh	r2, [r2, #10]
 8015614:	4293      	cmp	r3, r2
 8015616:	da07      	bge.n	8015628 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015618:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801561a:	3301      	adds	r3, #1
 801561c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801561e:	4413      	add	r3, r2
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015626:	e00b      	b.n	8015640 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d004      	beq.n	801563a <dhcp_parse_reply+0xde>
 8015630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	781b      	ldrb	r3, [r3, #0]
 8015638:	e000      	b.n	801563c <dhcp_parse_reply+0xe0>
 801563a:	2300      	movs	r3, #0
 801563c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015644:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8015648:	7dfb      	ldrb	r3, [r7, #23]
 801564a:	2b3b      	cmp	r3, #59	@ 0x3b
 801564c:	f200 812c 	bhi.w	80158a8 <dhcp_parse_reply+0x34c>
 8015650:	a201      	add	r2, pc, #4	@ (adr r2, 8015658 <dhcp_parse_reply+0xfc>)
 8015652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015656:	bf00      	nop
 8015658:	08015749 	.word	0x08015749
 801565c:	08015759 	.word	0x08015759
 8015660:	080158a9 	.word	0x080158a9
 8015664:	0801577b 	.word	0x0801577b
 8015668:	080158a9 	.word	0x080158a9
 801566c:	080158a9 	.word	0x080158a9
 8015670:	080158a9 	.word	0x080158a9
 8015674:	080158a9 	.word	0x080158a9
 8015678:	080158a9 	.word	0x080158a9
 801567c:	080158a9 	.word	0x080158a9
 8015680:	080158a9 	.word	0x080158a9
 8015684:	080158a9 	.word	0x080158a9
 8015688:	080158a9 	.word	0x080158a9
 801568c:	080158a9 	.word	0x080158a9
 8015690:	080158a9 	.word	0x080158a9
 8015694:	080158a9 	.word	0x080158a9
 8015698:	080158a9 	.word	0x080158a9
 801569c:	080158a9 	.word	0x080158a9
 80156a0:	080158a9 	.word	0x080158a9
 80156a4:	080158a9 	.word	0x080158a9
 80156a8:	080158a9 	.word	0x080158a9
 80156ac:	080158a9 	.word	0x080158a9
 80156b0:	080158a9 	.word	0x080158a9
 80156b4:	080158a9 	.word	0x080158a9
 80156b8:	080158a9 	.word	0x080158a9
 80156bc:	080158a9 	.word	0x080158a9
 80156c0:	080158a9 	.word	0x080158a9
 80156c4:	080158a9 	.word	0x080158a9
 80156c8:	080158a9 	.word	0x080158a9
 80156cc:	080158a9 	.word	0x080158a9
 80156d0:	080158a9 	.word	0x080158a9
 80156d4:	080158a9 	.word	0x080158a9
 80156d8:	080158a9 	.word	0x080158a9
 80156dc:	080158a9 	.word	0x080158a9
 80156e0:	080158a9 	.word	0x080158a9
 80156e4:	080158a9 	.word	0x080158a9
 80156e8:	080158a9 	.word	0x080158a9
 80156ec:	080158a9 	.word	0x080158a9
 80156f0:	080158a9 	.word	0x080158a9
 80156f4:	080158a9 	.word	0x080158a9
 80156f8:	080158a9 	.word	0x080158a9
 80156fc:	080158a9 	.word	0x080158a9
 8015700:	080158a9 	.word	0x080158a9
 8015704:	080158a9 	.word	0x080158a9
 8015708:	080158a9 	.word	0x080158a9
 801570c:	080158a9 	.word	0x080158a9
 8015710:	080158a9 	.word	0x080158a9
 8015714:	080158a9 	.word	0x080158a9
 8015718:	080158a9 	.word	0x080158a9
 801571c:	080158a9 	.word	0x080158a9
 8015720:	080158a9 	.word	0x080158a9
 8015724:	080157a7 	.word	0x080157a7
 8015728:	080157c9 	.word	0x080157c9
 801572c:	08015805 	.word	0x08015805
 8015730:	08015827 	.word	0x08015827
 8015734:	080158a9 	.word	0x080158a9
 8015738:	080158a9 	.word	0x080158a9
 801573c:	080158a9 	.word	0x080158a9
 8015740:	08015865 	.word	0x08015865
 8015744:	08015887 	.word	0x08015887
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801574e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015752:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8015756:	e0ab      	b.n	80158b0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801575c:	2b04      	cmp	r3, #4
 801575e:	d009      	beq.n	8015774 <dhcp_parse_reply+0x218>
 8015760:	4b3a      	ldr	r3, [pc, #232]	@ (801584c <dhcp_parse_reply+0x2f0>)
 8015762:	f240 622e 	movw	r2, #1582	@ 0x62e
 8015766:	493a      	ldr	r1, [pc, #232]	@ (8015850 <dhcp_parse_reply+0x2f4>)
 8015768:	483a      	ldr	r0, [pc, #232]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 801576a:	f003 f8e7 	bl	801893c <iprintf>
 801576e:	f06f 0305 	mvn.w	r3, #5
 8015772:	e1b0      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015774:	2306      	movs	r3, #6
 8015776:	623b      	str	r3, [r7, #32]
        break;
 8015778:	e09a      	b.n	80158b0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801577a:	2304      	movs	r3, #4
 801577c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015780:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015784:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015788:	429a      	cmp	r2, r3
 801578a:	d209      	bcs.n	80157a0 <dhcp_parse_reply+0x244>
 801578c:	4b2f      	ldr	r3, [pc, #188]	@ (801584c <dhcp_parse_reply+0x2f0>)
 801578e:	f240 6233 	movw	r2, #1587	@ 0x633
 8015792:	4931      	ldr	r1, [pc, #196]	@ (8015858 <dhcp_parse_reply+0x2fc>)
 8015794:	482f      	ldr	r0, [pc, #188]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 8015796:	f003 f8d1 	bl	801893c <iprintf>
 801579a:	f06f 0305 	mvn.w	r3, #5
 801579e:	e19a      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80157a0:	2307      	movs	r3, #7
 80157a2:	623b      	str	r3, [r7, #32]
        break;
 80157a4:	e084      	b.n	80158b0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80157a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80157aa:	2b04      	cmp	r3, #4
 80157ac:	d009      	beq.n	80157c2 <dhcp_parse_reply+0x266>
 80157ae:	4b27      	ldr	r3, [pc, #156]	@ (801584c <dhcp_parse_reply+0x2f0>)
 80157b0:	f240 6241 	movw	r2, #1601	@ 0x641
 80157b4:	4926      	ldr	r1, [pc, #152]	@ (8015850 <dhcp_parse_reply+0x2f4>)
 80157b6:	4827      	ldr	r0, [pc, #156]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 80157b8:	f003 f8c0 	bl	801893c <iprintf>
 80157bc:	f06f 0305 	mvn.w	r3, #5
 80157c0:	e189      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80157c2:	2303      	movs	r3, #3
 80157c4:	623b      	str	r3, [r7, #32]
        break;
 80157c6:	e073      	b.n	80158b0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80157c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80157cc:	2b01      	cmp	r3, #1
 80157ce:	d009      	beq.n	80157e4 <dhcp_parse_reply+0x288>
 80157d0:	4b1e      	ldr	r3, [pc, #120]	@ (801584c <dhcp_parse_reply+0x2f0>)
 80157d2:	f240 624f 	movw	r2, #1615	@ 0x64f
 80157d6:	4921      	ldr	r1, [pc, #132]	@ (801585c <dhcp_parse_reply+0x300>)
 80157d8:	481e      	ldr	r0, [pc, #120]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 80157da:	f003 f8af 	bl	801893c <iprintf>
 80157de:	f06f 0305 	mvn.w	r3, #5
 80157e2:	e178      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80157e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80157e6:	2bf0      	cmp	r3, #240	@ 0xf0
 80157e8:	d009      	beq.n	80157fe <dhcp_parse_reply+0x2a2>
 80157ea:	4b18      	ldr	r3, [pc, #96]	@ (801584c <dhcp_parse_reply+0x2f0>)
 80157ec:	f240 6251 	movw	r2, #1617	@ 0x651
 80157f0:	491b      	ldr	r1, [pc, #108]	@ (8015860 <dhcp_parse_reply+0x304>)
 80157f2:	4818      	ldr	r0, [pc, #96]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 80157f4:	f003 f8a2 	bl	801893c <iprintf>
 80157f8:	f06f 0305 	mvn.w	r3, #5
 80157fc:	e16b      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80157fe:	2300      	movs	r3, #0
 8015800:	623b      	str	r3, [r7, #32]
        break;
 8015802:	e055      	b.n	80158b0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015808:	2b01      	cmp	r3, #1
 801580a:	d009      	beq.n	8015820 <dhcp_parse_reply+0x2c4>
 801580c:	4b0f      	ldr	r3, [pc, #60]	@ (801584c <dhcp_parse_reply+0x2f0>)
 801580e:	f240 6255 	movw	r2, #1621	@ 0x655
 8015812:	4912      	ldr	r1, [pc, #72]	@ (801585c <dhcp_parse_reply+0x300>)
 8015814:	480f      	ldr	r0, [pc, #60]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 8015816:	f003 f891 	bl	801893c <iprintf>
 801581a:	f06f 0305 	mvn.w	r3, #5
 801581e:	e15a      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015820:	2301      	movs	r3, #1
 8015822:	623b      	str	r3, [r7, #32]
        break;
 8015824:	e044      	b.n	80158b0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801582a:	2b04      	cmp	r3, #4
 801582c:	d009      	beq.n	8015842 <dhcp_parse_reply+0x2e6>
 801582e:	4b07      	ldr	r3, [pc, #28]	@ (801584c <dhcp_parse_reply+0x2f0>)
 8015830:	f240 6259 	movw	r2, #1625	@ 0x659
 8015834:	4906      	ldr	r1, [pc, #24]	@ (8015850 <dhcp_parse_reply+0x2f4>)
 8015836:	4807      	ldr	r0, [pc, #28]	@ (8015854 <dhcp_parse_reply+0x2f8>)
 8015838:	f003 f880 	bl	801893c <iprintf>
 801583c:	f06f 0305 	mvn.w	r3, #5
 8015840:	e149      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015842:	2302      	movs	r3, #2
 8015844:	623b      	str	r3, [r7, #32]
        break;
 8015846:	e033      	b.n	80158b0 <dhcp_parse_reply+0x354>
 8015848:	2400e9e4 	.word	0x2400e9e4
 801584c:	0801bbf8 	.word	0x0801bbf8
 8015850:	0801be80 	.word	0x0801be80
 8015854:	0801bc58 	.word	0x0801bc58
 8015858:	0801be8c 	.word	0x0801be8c
 801585c:	0801bea0 	.word	0x0801bea0
 8015860:	0801beac 	.word	0x0801beac
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015868:	2b04      	cmp	r3, #4
 801586a:	d009      	beq.n	8015880 <dhcp_parse_reply+0x324>
 801586c:	4b9c      	ldr	r3, [pc, #624]	@ (8015ae0 <dhcp_parse_reply+0x584>)
 801586e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8015872:	499c      	ldr	r1, [pc, #624]	@ (8015ae4 <dhcp_parse_reply+0x588>)
 8015874:	489c      	ldr	r0, [pc, #624]	@ (8015ae8 <dhcp_parse_reply+0x58c>)
 8015876:	f003 f861 	bl	801893c <iprintf>
 801587a:	f06f 0305 	mvn.w	r3, #5
 801587e:	e12a      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015880:	2304      	movs	r3, #4
 8015882:	623b      	str	r3, [r7, #32]
        break;
 8015884:	e014      	b.n	80158b0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801588a:	2b04      	cmp	r3, #4
 801588c:	d009      	beq.n	80158a2 <dhcp_parse_reply+0x346>
 801588e:	4b94      	ldr	r3, [pc, #592]	@ (8015ae0 <dhcp_parse_reply+0x584>)
 8015890:	f240 6261 	movw	r2, #1633	@ 0x661
 8015894:	4993      	ldr	r1, [pc, #588]	@ (8015ae4 <dhcp_parse_reply+0x588>)
 8015896:	4894      	ldr	r0, [pc, #592]	@ (8015ae8 <dhcp_parse_reply+0x58c>)
 8015898:	f003 f850 	bl	801893c <iprintf>
 801589c:	f06f 0305 	mvn.w	r3, #5
 80158a0:	e119      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80158a2:	2305      	movs	r3, #5
 80158a4:	623b      	str	r3, [r7, #32]
        break;
 80158a6:	e003      	b.n	80158b0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80158ae:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80158b0:	7dfb      	ldrb	r3, [r7, #23]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d103      	bne.n	80158be <dhcp_parse_reply+0x362>
      offset++;
 80158b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80158b8:	3301      	adds	r3, #1
 80158ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80158bc:	e0a1      	b.n	8015a02 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80158be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80158c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158c4:	4413      	add	r3, r2
 80158c6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80158ca:	4293      	cmp	r3, r2
 80158cc:	dd02      	ble.n	80158d4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80158ce:	f06f 0301 	mvn.w	r3, #1
 80158d2:	e100      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80158d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158d8:	b29a      	uxth	r2, r3
 80158da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80158dc:	4413      	add	r3, r2
 80158de:	b29b      	uxth	r3, r3
 80158e0:	3302      	adds	r3, #2
 80158e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 80158e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f000 808a 	beq.w	8015a02 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80158ee:	2300      	movs	r3, #0
 80158f0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80158f2:	6a3b      	ldr	r3, [r7, #32]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	db02      	blt.n	80158fe <dhcp_parse_reply+0x3a2>
 80158f8:	6a3b      	ldr	r3, [r7, #32]
 80158fa:	2b07      	cmp	r3, #7
 80158fc:	dd06      	ble.n	801590c <dhcp_parse_reply+0x3b0>
 80158fe:	4b78      	ldr	r3, [pc, #480]	@ (8015ae0 <dhcp_parse_reply+0x584>)
 8015900:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8015904:	4979      	ldr	r1, [pc, #484]	@ (8015aec <dhcp_parse_reply+0x590>)
 8015906:	4878      	ldr	r0, [pc, #480]	@ (8015ae8 <dhcp_parse_reply+0x58c>)
 8015908:	f003 f818 	bl	801893c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801590c:	4a78      	ldr	r2, [pc, #480]	@ (8015af0 <dhcp_parse_reply+0x594>)
 801590e:	6a3b      	ldr	r3, [r7, #32]
 8015910:	4413      	add	r3, r2
 8015912:	781b      	ldrb	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d174      	bne.n	8015a02 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801591c:	2b04      	cmp	r3, #4
 801591e:	bf28      	it	cs
 8015920:	2304      	movcs	r3, #4
 8015922:	b2db      	uxtb	r3, r3
 8015924:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015926:	8bfb      	ldrh	r3, [r7, #30]
 8015928:	8aba      	ldrh	r2, [r7, #20]
 801592a:	f107 0108 	add.w	r1, r7, #8
 801592e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015930:	f7f8 fc20 	bl	800e174 <pbuf_copy_partial>
 8015934:	4603      	mov	r3, r0
 8015936:	461a      	mov	r2, r3
 8015938:	8abb      	ldrh	r3, [r7, #20]
 801593a:	4293      	cmp	r3, r2
 801593c:	d002      	beq.n	8015944 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801593e:	f06f 0301 	mvn.w	r3, #1
 8015942:	e0c8      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015948:	2b04      	cmp	r3, #4
 801594a:	d933      	bls.n	80159b4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801594c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015950:	f003 0303 	and.w	r3, r3, #3
 8015954:	b2db      	uxtb	r3, r3
 8015956:	2b00      	cmp	r3, #0
 8015958:	d009      	beq.n	801596e <dhcp_parse_reply+0x412>
 801595a:	4b61      	ldr	r3, [pc, #388]	@ (8015ae0 <dhcp_parse_reply+0x584>)
 801595c:	f240 6281 	movw	r2, #1665	@ 0x681
 8015960:	4964      	ldr	r1, [pc, #400]	@ (8015af4 <dhcp_parse_reply+0x598>)
 8015962:	4861      	ldr	r0, [pc, #388]	@ (8015ae8 <dhcp_parse_reply+0x58c>)
 8015964:	f002 ffea 	bl	801893c <iprintf>
 8015968:	f06f 0305 	mvn.w	r3, #5
 801596c:	e0b3      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801596e:	4a60      	ldr	r2, [pc, #384]	@ (8015af0 <dhcp_parse_reply+0x594>)
 8015970:	6a3b      	ldr	r3, [r7, #32]
 8015972:	4413      	add	r3, r2
 8015974:	2201      	movs	r2, #1
 8015976:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	4618      	mov	r0, r3
 801597c:	f7f6 fd53 	bl	800c426 <lwip_htonl>
 8015980:	4602      	mov	r2, r0
 8015982:	495d      	ldr	r1, [pc, #372]	@ (8015af8 <dhcp_parse_reply+0x59c>)
 8015984:	6a3b      	ldr	r3, [r7, #32]
 8015986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801598a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801598e:	3b04      	subs	r3, #4
 8015990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015994:	8bfb      	ldrh	r3, [r7, #30]
 8015996:	3304      	adds	r3, #4
 8015998:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801599a:	8a7a      	ldrh	r2, [r7, #18]
 801599c:	8bfb      	ldrh	r3, [r7, #30]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d202      	bcs.n	80159a8 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80159a2:	f06f 0301 	mvn.w	r3, #1
 80159a6:	e096      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80159a8:	8a7b      	ldrh	r3, [r7, #18]
 80159aa:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80159ac:	6a3b      	ldr	r3, [r7, #32]
 80159ae:	3301      	adds	r3, #1
 80159b0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80159b2:	e79e      	b.n	80158f2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80159b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80159b8:	2b04      	cmp	r3, #4
 80159ba:	d106      	bne.n	80159ca <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	4618      	mov	r0, r3
 80159c0:	f7f6 fd31 	bl	800c426 <lwip_htonl>
 80159c4:	4603      	mov	r3, r0
 80159c6:	60bb      	str	r3, [r7, #8]
 80159c8:	e011      	b.n	80159ee <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80159ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d009      	beq.n	80159e6 <dhcp_parse_reply+0x48a>
 80159d2:	4b43      	ldr	r3, [pc, #268]	@ (8015ae0 <dhcp_parse_reply+0x584>)
 80159d4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 80159d8:	4948      	ldr	r1, [pc, #288]	@ (8015afc <dhcp_parse_reply+0x5a0>)
 80159da:	4843      	ldr	r0, [pc, #268]	@ (8015ae8 <dhcp_parse_reply+0x58c>)
 80159dc:	f002 ffae 	bl	801893c <iprintf>
 80159e0:	f06f 0305 	mvn.w	r3, #5
 80159e4:	e077      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80159e6:	f107 0308 	add.w	r3, r7, #8
 80159ea:	781b      	ldrb	r3, [r3, #0]
 80159ec:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80159ee:	4a40      	ldr	r2, [pc, #256]	@ (8015af0 <dhcp_parse_reply+0x594>)
 80159f0:	6a3b      	ldr	r3, [r7, #32]
 80159f2:	4413      	add	r3, r2
 80159f4:	2201      	movs	r2, #1
 80159f6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80159f8:	68ba      	ldr	r2, [r7, #8]
 80159fa:	493f      	ldr	r1, [pc, #252]	@ (8015af8 <dhcp_parse_reply+0x59c>)
 80159fc:	6a3b      	ldr	r3, [r7, #32]
 80159fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a04:	895b      	ldrh	r3, [r3, #10]
 8015a06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d324      	bcc.n	8015a56 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a0e:	895b      	ldrh	r3, [r3, #10]
 8015a10:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015a12:	1ad3      	subs	r3, r2, r3
 8015a14:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a18:	895b      	ldrh	r3, [r3, #10]
 8015a1a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015a1c:	1ad3      	subs	r3, r2, r3
 8015a1e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8015a20:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015a22:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d213      	bcs.n	8015a50 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d109      	bne.n	8015a48 <dhcp_parse_reply+0x4ec>
 8015a34:	4b2a      	ldr	r3, [pc, #168]	@ (8015ae0 <dhcp_parse_reply+0x584>)
 8015a36:	f240 629d 	movw	r2, #1693	@ 0x69d
 8015a3a:	4931      	ldr	r1, [pc, #196]	@ (8015b00 <dhcp_parse_reply+0x5a4>)
 8015a3c:	482a      	ldr	r0, [pc, #168]	@ (8015ae8 <dhcp_parse_reply+0x58c>)
 8015a3e:	f002 ff7d 	bl	801893c <iprintf>
 8015a42:	f06f 0305 	mvn.w	r3, #5
 8015a46:	e046      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015a4e:	e002      	b.n	8015a56 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015a50:	f06f 0301 	mvn.w	r3, #1
 8015a54:	e03f      	b.n	8015ad6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d00a      	beq.n	8015a72 <dhcp_parse_reply+0x516>
 8015a5c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015a5e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d206      	bcs.n	8015a72 <dhcp_parse_reply+0x516>
 8015a64:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015a68:	4413      	add	r3, r2
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	2bff      	cmp	r3, #255	@ 0xff
 8015a6e:	f47f adb8 	bne.w	80155e2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015a72:	4b1f      	ldr	r3, [pc, #124]	@ (8015af0 <dhcp_parse_reply+0x594>)
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d018      	beq.n	8015aac <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8015af8 <dhcp_parse_reply+0x59c>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015a80:	4b1b      	ldr	r3, [pc, #108]	@ (8015af0 <dhcp_parse_reply+0x594>)
 8015a82:	2200      	movs	r2, #0
 8015a84:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2b01      	cmp	r3, #1
 8015a8a:	d102      	bne.n	8015a92 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a90:	e00c      	b.n	8015aac <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	2b02      	cmp	r3, #2
 8015a96:	d102      	bne.n	8015a9e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015a98:	2301      	movs	r3, #1
 8015a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015a9c:	e006      	b.n	8015aac <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b03      	cmp	r3, #3
 8015aa2:	d103      	bne.n	8015aac <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015aa4:	2301      	movs	r3, #1
 8015aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015aa8:	2301      	movs	r3, #1
 8015aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d006      	beq.n	8015ac0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015ab6:	236c      	movs	r3, #108	@ 0x6c
 8015ab8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015aba:	23ec      	movs	r3, #236	@ 0xec
 8015abc:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015abe:	e56a      	b.n	8015596 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d006      	beq.n	8015ad4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015aca:	232c      	movs	r3, #44	@ 0x2c
 8015acc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015ace:	236c      	movs	r3, #108	@ 0x6c
 8015ad0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8015ad2:	e560      	b.n	8015596 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015ad4:	2300      	movs	r3, #0
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3740      	adds	r7, #64	@ 0x40
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
 8015ade:	bf00      	nop
 8015ae0:	0801bbf8 	.word	0x0801bbf8
 8015ae4:	0801be80 	.word	0x0801be80
 8015ae8:	0801bc58 	.word	0x0801bc58
 8015aec:	0801bec4 	.word	0x0801bec4
 8015af0:	2400e9e4 	.word	0x2400e9e4
 8015af4:	0801bed8 	.word	0x0801bed8
 8015af8:	2400e9c4 	.word	0x2400e9c4
 8015afc:	0801bef0 	.word	0x0801bef0
 8015b00:	0801bf04 	.word	0x0801bf04

08015b04 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b08a      	sub	sp, #40	@ 0x28
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	60f8      	str	r0, [r7, #12]
 8015b0c:	60b9      	str	r1, [r7, #8]
 8015b0e:	607a      	str	r2, [r7, #4]
 8015b10:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015b12:	4b60      	ldr	r3, [pc, #384]	@ (8015c94 <dhcp_recv+0x190>)
 8015b14:	685b      	ldr	r3, [r3, #4]
 8015b16:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b18:	6a3b      	ldr	r3, [r7, #32]
 8015b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b1c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015b24:	69fb      	ldr	r3, [r7, #28]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f000 809d 	beq.w	8015c66 <dhcp_recv+0x162>
 8015b2c:	69fb      	ldr	r3, [r7, #28]
 8015b2e:	791b      	ldrb	r3, [r3, #4]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	f000 8098 	beq.w	8015c66 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	895b      	ldrh	r3, [r3, #10]
 8015b3a:	2b2b      	cmp	r3, #43	@ 0x2b
 8015b3c:	f240 8095 	bls.w	8015c6a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015b40:	69bb      	ldr	r3, [r7, #24]
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	2b02      	cmp	r3, #2
 8015b46:	f040 8092 	bne.w	8015c6e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b50:	e012      	b.n	8015b78 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015b52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b56:	6a3a      	ldr	r2, [r7, #32]
 8015b58:	4413      	add	r3, r2
 8015b5a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8015b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b62:	69b9      	ldr	r1, [r7, #24]
 8015b64:	440b      	add	r3, r1
 8015b66:	7f1b      	ldrb	r3, [r3, #28]
 8015b68:	429a      	cmp	r2, r3
 8015b6a:	f040 8082 	bne.w	8015c72 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b72:	3301      	adds	r3, #1
 8015b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b78:	6a3b      	ldr	r3, [r7, #32]
 8015b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d203      	bcs.n	8015b8e <dhcp_recv+0x8a>
 8015b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b8a:	2b05      	cmp	r3, #5
 8015b8c:	d9e1      	bls.n	8015b52 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015b8e:	69bb      	ldr	r3, [r7, #24]
 8015b90:	685b      	ldr	r3, [r3, #4]
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7f6 fc47 	bl	800c426 <lwip_htonl>
 8015b98:	4602      	mov	r2, r0
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d169      	bne.n	8015c76 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015ba2:	69f9      	ldr	r1, [r7, #28]
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	f7ff fcd9 	bl	801555c <dhcp_parse_reply>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d164      	bne.n	8015c7a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015bb0:	4b39      	ldr	r3, [pc, #228]	@ (8015c98 <dhcp_recv+0x194>)
 8015bb2:	785b      	ldrb	r3, [r3, #1]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d062      	beq.n	8015c7e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	685b      	ldr	r3, [r3, #4]
 8015bbc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015bbe:	4b37      	ldr	r3, [pc, #220]	@ (8015c9c <dhcp_recv+0x198>)
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015bc4:	7cfb      	ldrb	r3, [r7, #19]
 8015bc6:	2b05      	cmp	r3, #5
 8015bc8:	d12a      	bne.n	8015c20 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015bca:	69fb      	ldr	r3, [r7, #28]
 8015bcc:	795b      	ldrb	r3, [r3, #5]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d112      	bne.n	8015bf8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015bd2:	6979      	ldr	r1, [r7, #20]
 8015bd4:	6a38      	ldr	r0, [r7, #32]
 8015bd6:	f7fe fe1d 	bl	8014814 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015bda:	6a3b      	ldr	r3, [r7, #32]
 8015bdc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015be0:	f003 0308 	and.w	r3, r3, #8
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d003      	beq.n	8015bf0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015be8:	6a38      	ldr	r0, [r7, #32]
 8015bea:	f7fe fb8b 	bl	8014304 <dhcp_check>
 8015bee:	e049      	b.n	8015c84 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015bf0:	6a38      	ldr	r0, [r7, #32]
 8015bf2:	f7ff f86d 	bl	8014cd0 <dhcp_bind>
 8015bf6:	e045      	b.n	8015c84 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	795b      	ldrb	r3, [r3, #5]
 8015bfc:	2b03      	cmp	r3, #3
 8015bfe:	d007      	beq.n	8015c10 <dhcp_recv+0x10c>
 8015c00:	69fb      	ldr	r3, [r7, #28]
 8015c02:	795b      	ldrb	r3, [r3, #5]
 8015c04:	2b04      	cmp	r3, #4
 8015c06:	d003      	beq.n	8015c10 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015c0c:	2b05      	cmp	r3, #5
 8015c0e:	d139      	bne.n	8015c84 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015c10:	6979      	ldr	r1, [r7, #20]
 8015c12:	6a38      	ldr	r0, [r7, #32]
 8015c14:	f7fe fdfe 	bl	8014814 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015c18:	6a38      	ldr	r0, [r7, #32]
 8015c1a:	f7ff f859 	bl	8014cd0 <dhcp_bind>
 8015c1e:	e031      	b.n	8015c84 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015c20:	7cfb      	ldrb	r3, [r7, #19]
 8015c22:	2b06      	cmp	r3, #6
 8015c24:	d113      	bne.n	8015c4e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015c2a:	2b03      	cmp	r3, #3
 8015c2c:	d00b      	beq.n	8015c46 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	795b      	ldrb	r3, [r3, #5]
 8015c32:	2b01      	cmp	r3, #1
 8015c34:	d007      	beq.n	8015c46 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015c36:	69fb      	ldr	r3, [r7, #28]
 8015c38:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015c3a:	2b04      	cmp	r3, #4
 8015c3c:	d003      	beq.n	8015c46 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015c3e:	69fb      	ldr	r3, [r7, #28]
 8015c40:	795b      	ldrb	r3, [r3, #5]
 8015c42:	2b05      	cmp	r3, #5
 8015c44:	d103      	bne.n	8015c4e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015c46:	6a38      	ldr	r0, [r7, #32]
 8015c48:	f7fe fb42 	bl	80142d0 <dhcp_handle_nak>
 8015c4c:	e01a      	b.n	8015c84 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015c4e:	7cfb      	ldrb	r3, [r7, #19]
 8015c50:	2b02      	cmp	r3, #2
 8015c52:	d116      	bne.n	8015c82 <dhcp_recv+0x17e>
 8015c54:	69fb      	ldr	r3, [r7, #28]
 8015c56:	795b      	ldrb	r3, [r3, #5]
 8015c58:	2b06      	cmp	r3, #6
 8015c5a:	d112      	bne.n	8015c82 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015c5c:	6979      	ldr	r1, [r7, #20]
 8015c5e:	6a38      	ldr	r0, [r7, #32]
 8015c60:	f7fe fb84 	bl	801436c <dhcp_handle_offer>
 8015c64:	e00e      	b.n	8015c84 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015c66:	bf00      	nop
 8015c68:	e00c      	b.n	8015c84 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015c6a:	bf00      	nop
 8015c6c:	e00a      	b.n	8015c84 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015c6e:	bf00      	nop
 8015c70:	e008      	b.n	8015c84 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015c72:	bf00      	nop
 8015c74:	e006      	b.n	8015c84 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015c76:	bf00      	nop
 8015c78:	e004      	b.n	8015c84 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015c7a:	bf00      	nop
 8015c7c:	e002      	b.n	8015c84 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015c7e:	bf00      	nop
 8015c80:	e000      	b.n	8015c84 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015c82:	bf00      	nop
  pbuf_free(p);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f7f8 f86f 	bl	800dd68 <pbuf_free>
}
 8015c8a:	bf00      	nop
 8015c8c:	3728      	adds	r7, #40	@ 0x28
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	bf00      	nop
 8015c94:	2400b844 	.word	0x2400b844
 8015c98:	2400e9e4 	.word	0x2400e9e4
 8015c9c:	2400e9c4 	.word	0x2400e9c4

08015ca0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b088      	sub	sp, #32
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	603b      	str	r3, [r7, #0]
 8015cac:	4613      	mov	r3, r2
 8015cae:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d108      	bne.n	8015cc8 <dhcp_create_msg+0x28>
 8015cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8015e34 <dhcp_create_msg+0x194>)
 8015cb8:	f240 7269 	movw	r2, #1897	@ 0x769
 8015cbc:	495e      	ldr	r1, [pc, #376]	@ (8015e38 <dhcp_create_msg+0x198>)
 8015cbe:	485f      	ldr	r0, [pc, #380]	@ (8015e3c <dhcp_create_msg+0x19c>)
 8015cc0:	f002 fe3c 	bl	801893c <iprintf>
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	e0b1      	b.n	8015e2c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d108      	bne.n	8015ce0 <dhcp_create_msg+0x40>
 8015cce:	4b59      	ldr	r3, [pc, #356]	@ (8015e34 <dhcp_create_msg+0x194>)
 8015cd0:	f240 726a 	movw	r2, #1898	@ 0x76a
 8015cd4:	495a      	ldr	r1, [pc, #360]	@ (8015e40 <dhcp_create_msg+0x1a0>)
 8015cd6:	4859      	ldr	r0, [pc, #356]	@ (8015e3c <dhcp_create_msg+0x19c>)
 8015cd8:	f002 fe30 	bl	801893c <iprintf>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	e0a5      	b.n	8015e2c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015ce0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015ce4:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015ce8:	2036      	movs	r0, #54	@ 0x36
 8015cea:	f7f7 fd59 	bl	800d7a0 <pbuf_alloc>
 8015cee:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015cf0:	69bb      	ldr	r3, [r7, #24]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d101      	bne.n	8015cfa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	e098      	b.n	8015e2c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	895b      	ldrh	r3, [r3, #10]
 8015cfe:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8015d02:	d206      	bcs.n	8015d12 <dhcp_create_msg+0x72>
 8015d04:	4b4b      	ldr	r3, [pc, #300]	@ (8015e34 <dhcp_create_msg+0x194>)
 8015d06:	f240 7271 	movw	r2, #1905	@ 0x771
 8015d0a:	494e      	ldr	r1, [pc, #312]	@ (8015e44 <dhcp_create_msg+0x1a4>)
 8015d0c:	484b      	ldr	r0, [pc, #300]	@ (8015e3c <dhcp_create_msg+0x19c>)
 8015d0e:	f002 fe15 	bl	801893c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015d12:	79fb      	ldrb	r3, [r7, #7]
 8015d14:	2b03      	cmp	r3, #3
 8015d16:	d103      	bne.n	8015d20 <dhcp_create_msg+0x80>
 8015d18:	68bb      	ldr	r3, [r7, #8]
 8015d1a:	795b      	ldrb	r3, [r3, #5]
 8015d1c:	2b03      	cmp	r3, #3
 8015d1e:	d10d      	bne.n	8015d3c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	799b      	ldrb	r3, [r3, #6]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d105      	bne.n	8015d34 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015d28:	f002 fd08 	bl	801873c <rand>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	461a      	mov	r2, r3
 8015d30:	4b45      	ldr	r3, [pc, #276]	@ (8015e48 <dhcp_create_msg+0x1a8>)
 8015d32:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015d34:	4b44      	ldr	r3, [pc, #272]	@ (8015e48 <dhcp_create_msg+0x1a8>)
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015d42:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8015d46:	2100      	movs	r1, #0
 8015d48:	6978      	ldr	r0, [r7, #20]
 8015d4a:	f002 fe5c 	bl	8018a06 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	2201      	movs	r2, #1
 8015d52:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	2201      	movs	r2, #1
 8015d58:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8015d60:	697b      	ldr	r3, [r7, #20]
 8015d62:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f6 fb5c 	bl	800c426 <lwip_htonl>
 8015d6e:	4602      	mov	r2, r0
 8015d70:	697b      	ldr	r3, [r7, #20]
 8015d72:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015d74:	79fb      	ldrb	r3, [r7, #7]
 8015d76:	2b08      	cmp	r3, #8
 8015d78:	d010      	beq.n	8015d9c <dhcp_create_msg+0xfc>
 8015d7a:	79fb      	ldrb	r3, [r7, #7]
 8015d7c:	2b04      	cmp	r3, #4
 8015d7e:	d00d      	beq.n	8015d9c <dhcp_create_msg+0xfc>
 8015d80:	79fb      	ldrb	r3, [r7, #7]
 8015d82:	2b07      	cmp	r3, #7
 8015d84:	d00a      	beq.n	8015d9c <dhcp_create_msg+0xfc>
 8015d86:	79fb      	ldrb	r3, [r7, #7]
 8015d88:	2b03      	cmp	r3, #3
 8015d8a:	d10c      	bne.n	8015da6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015d90:	2b05      	cmp	r3, #5
 8015d92:	d003      	beq.n	8015d9c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	795b      	ldrb	r3, [r3, #5]
 8015d98:	2b04      	cmp	r3, #4
 8015d9a:	d104      	bne.n	8015da6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	3304      	adds	r3, #4
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015da6:	2300      	movs	r3, #0
 8015da8:	83fb      	strh	r3, [r7, #30]
 8015daa:	e00c      	b.n	8015dc6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015dac:	8bfa      	ldrh	r2, [r7, #30]
 8015dae:	8bfb      	ldrh	r3, [r7, #30]
 8015db0:	68f9      	ldr	r1, [r7, #12]
 8015db2:	440a      	add	r2, r1
 8015db4:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8015db8:	697a      	ldr	r2, [r7, #20]
 8015dba:	4413      	add	r3, r2
 8015dbc:	460a      	mov	r2, r1
 8015dbe:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015dc0:	8bfb      	ldrh	r3, [r7, #30]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	83fb      	strh	r3, [r7, #30]
 8015dc6:	8bfb      	ldrh	r3, [r7, #30]
 8015dc8:	2b05      	cmp	r3, #5
 8015dca:	d9ef      	bls.n	8015dac <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015dd4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8015dd8:	2200      	movs	r2, #0
 8015dda:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8015dde:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8015de2:	2200      	movs	r2, #0
 8015de4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8015de8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8015dec:	2200      	movs	r2, #0
 8015dee:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8015df2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015dfc:	2301      	movs	r3, #1
 8015dfe:	2235      	movs	r2, #53	@ 0x35
 8015e00:	2000      	movs	r0, #0
 8015e02:	f7ff fadb 	bl	80153bc <dhcp_option>
 8015e06:	4603      	mov	r3, r0
 8015e08:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015e10:	79fa      	ldrb	r2, [r7, #7]
 8015e12:	8a7b      	ldrh	r3, [r7, #18]
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7ff fb05 	bl	8015424 <dhcp_option_byte>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d002      	beq.n	8015e2a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	8a7a      	ldrh	r2, [r7, #18]
 8015e28:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015e2a:	69bb      	ldr	r3, [r7, #24]
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3720      	adds	r7, #32
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	0801bbf8 	.word	0x0801bbf8
 8015e38:	0801bf18 	.word	0x0801bf18
 8015e3c:	0801bc58 	.word	0x0801bc58
 8015e40:	0801bf38 	.word	0x0801bf38
 8015e44:	0801bf58 	.word	0x0801bf58
 8015e48:	2400e9f4 	.word	0x2400e9f4

08015e4c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	4603      	mov	r3, r0
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
 8015e58:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015e5a:	89fb      	ldrh	r3, [r7, #14]
 8015e5c:	1c5a      	adds	r2, r3, #1
 8015e5e:	81fa      	strh	r2, [r7, #14]
 8015e60:	461a      	mov	r2, r3
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	4413      	add	r3, r2
 8015e66:	22ff      	movs	r2, #255	@ 0xff
 8015e68:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015e6a:	e007      	b.n	8015e7c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015e6c:	89fb      	ldrh	r3, [r7, #14]
 8015e6e:	1c5a      	adds	r2, r3, #1
 8015e70:	81fa      	strh	r2, [r7, #14]
 8015e72:	461a      	mov	r2, r3
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	4413      	add	r3, r2
 8015e78:	2200      	movs	r2, #0
 8015e7a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015e7c:	89fb      	ldrh	r3, [r7, #14]
 8015e7e:	2b43      	cmp	r3, #67	@ 0x43
 8015e80:	d904      	bls.n	8015e8c <dhcp_option_trailer+0x40>
 8015e82:	89fb      	ldrh	r3, [r7, #14]
 8015e84:	f003 0303 	and.w	r3, r3, #3
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d002      	beq.n	8015e92 <dhcp_option_trailer+0x46>
 8015e8c:	89fb      	ldrh	r3, [r7, #14]
 8015e8e:	2b43      	cmp	r3, #67	@ 0x43
 8015e90:	d9ec      	bls.n	8015e6c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015e92:	89fb      	ldrh	r3, [r7, #14]
 8015e94:	33f0      	adds	r3, #240	@ 0xf0
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	4619      	mov	r1, r3
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f7f7 fdde 	bl	800da5c <pbuf_realloc>
}
 8015ea0:	bf00      	nop
 8015ea2:	3710      	adds	r7, #16
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	bd80      	pop	{r7, pc}

08015ea8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b085      	sub	sp, #20
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d017      	beq.n	8015ee6 <dhcp_supplied_address+0x3e>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d013      	beq.n	8015ee6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	795b      	ldrb	r3, [r3, #5]
 8015ec8:	2b0a      	cmp	r3, #10
 8015eca:	d007      	beq.n	8015edc <dhcp_supplied_address+0x34>
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	795b      	ldrb	r3, [r3, #5]
 8015ed0:	2b05      	cmp	r3, #5
 8015ed2:	d003      	beq.n	8015edc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015ed8:	2b04      	cmp	r3, #4
 8015eda:	d101      	bne.n	8015ee0 <dhcp_supplied_address+0x38>
 8015edc:	2301      	movs	r3, #1
 8015ede:	e000      	b.n	8015ee2 <dhcp_supplied_address+0x3a>
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	e000      	b.n	8015ee8 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015ee6:	2300      	movs	r3, #0
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	3714      	adds	r7, #20
 8015eec:	46bd      	mov	sp, r7
 8015eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef2:	4770      	bx	lr

08015ef4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015efc:	4915      	ldr	r1, [pc, #84]	@ (8015f54 <etharp_free_entry+0x60>)
 8015efe:	687a      	ldr	r2, [r7, #4]
 8015f00:	4613      	mov	r3, r2
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	4413      	add	r3, r2
 8015f06:	00db      	lsls	r3, r3, #3
 8015f08:	440b      	add	r3, r1
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d013      	beq.n	8015f38 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015f10:	4910      	ldr	r1, [pc, #64]	@ (8015f54 <etharp_free_entry+0x60>)
 8015f12:	687a      	ldr	r2, [r7, #4]
 8015f14:	4613      	mov	r3, r2
 8015f16:	005b      	lsls	r3, r3, #1
 8015f18:	4413      	add	r3, r2
 8015f1a:	00db      	lsls	r3, r3, #3
 8015f1c:	440b      	add	r3, r1
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7f7 ff21 	bl	800dd68 <pbuf_free>
    arp_table[i].q = NULL;
 8015f26:	490b      	ldr	r1, [pc, #44]	@ (8015f54 <etharp_free_entry+0x60>)
 8015f28:	687a      	ldr	r2, [r7, #4]
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	4413      	add	r3, r2
 8015f30:	00db      	lsls	r3, r3, #3
 8015f32:	440b      	add	r3, r1
 8015f34:	2200      	movs	r2, #0
 8015f36:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015f38:	4906      	ldr	r1, [pc, #24]	@ (8015f54 <etharp_free_entry+0x60>)
 8015f3a:	687a      	ldr	r2, [r7, #4]
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	005b      	lsls	r3, r3, #1
 8015f40:	4413      	add	r3, r2
 8015f42:	00db      	lsls	r3, r3, #3
 8015f44:	440b      	add	r3, r1
 8015f46:	3314      	adds	r3, #20
 8015f48:	2200      	movs	r2, #0
 8015f4a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015f4c:	bf00      	nop
 8015f4e:	3708      	adds	r7, #8
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}
 8015f54:	2400e9f8 	.word	0x2400e9f8

08015f58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b082      	sub	sp, #8
 8015f5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f5e:	2300      	movs	r3, #0
 8015f60:	607b      	str	r3, [r7, #4]
 8015f62:	e096      	b.n	8016092 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015f64:	494f      	ldr	r1, [pc, #316]	@ (80160a4 <etharp_tmr+0x14c>)
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	4613      	mov	r3, r2
 8015f6a:	005b      	lsls	r3, r3, #1
 8015f6c:	4413      	add	r3, r2
 8015f6e:	00db      	lsls	r3, r3, #3
 8015f70:	440b      	add	r3, r1
 8015f72:	3314      	adds	r3, #20
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015f78:	78fb      	ldrb	r3, [r7, #3]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f000 8086 	beq.w	801608c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015f80:	4948      	ldr	r1, [pc, #288]	@ (80160a4 <etharp_tmr+0x14c>)
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	4613      	mov	r3, r2
 8015f86:	005b      	lsls	r3, r3, #1
 8015f88:	4413      	add	r3, r2
 8015f8a:	00db      	lsls	r3, r3, #3
 8015f8c:	440b      	add	r3, r1
 8015f8e:	3312      	adds	r3, #18
 8015f90:	881b      	ldrh	r3, [r3, #0]
 8015f92:	3301      	adds	r3, #1
 8015f94:	b298      	uxth	r0, r3
 8015f96:	4943      	ldr	r1, [pc, #268]	@ (80160a4 <etharp_tmr+0x14c>)
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	4413      	add	r3, r2
 8015fa0:	00db      	lsls	r3, r3, #3
 8015fa2:	440b      	add	r3, r1
 8015fa4:	3312      	adds	r3, #18
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015faa:	493e      	ldr	r1, [pc, #248]	@ (80160a4 <etharp_tmr+0x14c>)
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	4613      	mov	r3, r2
 8015fb0:	005b      	lsls	r3, r3, #1
 8015fb2:	4413      	add	r3, r2
 8015fb4:	00db      	lsls	r3, r3, #3
 8015fb6:	440b      	add	r3, r1
 8015fb8:	3312      	adds	r3, #18
 8015fba:	881b      	ldrh	r3, [r3, #0]
 8015fbc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8015fc0:	d215      	bcs.n	8015fee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015fc2:	4938      	ldr	r1, [pc, #224]	@ (80160a4 <etharp_tmr+0x14c>)
 8015fc4:	687a      	ldr	r2, [r7, #4]
 8015fc6:	4613      	mov	r3, r2
 8015fc8:	005b      	lsls	r3, r3, #1
 8015fca:	4413      	add	r3, r2
 8015fcc:	00db      	lsls	r3, r3, #3
 8015fce:	440b      	add	r3, r1
 8015fd0:	3314      	adds	r3, #20
 8015fd2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d10e      	bne.n	8015ff6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015fd8:	4932      	ldr	r1, [pc, #200]	@ (80160a4 <etharp_tmr+0x14c>)
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	4613      	mov	r3, r2
 8015fde:	005b      	lsls	r3, r3, #1
 8015fe0:	4413      	add	r3, r2
 8015fe2:	00db      	lsls	r3, r3, #3
 8015fe4:	440b      	add	r3, r1
 8015fe6:	3312      	adds	r3, #18
 8015fe8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015fea:	2b04      	cmp	r3, #4
 8015fec:	d903      	bls.n	8015ff6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7ff ff80 	bl	8015ef4 <etharp_free_entry>
 8015ff4:	e04a      	b.n	801608c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015ff6:	492b      	ldr	r1, [pc, #172]	@ (80160a4 <etharp_tmr+0x14c>)
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	005b      	lsls	r3, r3, #1
 8015ffe:	4413      	add	r3, r2
 8016000:	00db      	lsls	r3, r3, #3
 8016002:	440b      	add	r3, r1
 8016004:	3314      	adds	r3, #20
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	2b03      	cmp	r3, #3
 801600a:	d10a      	bne.n	8016022 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801600c:	4925      	ldr	r1, [pc, #148]	@ (80160a4 <etharp_tmr+0x14c>)
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	4613      	mov	r3, r2
 8016012:	005b      	lsls	r3, r3, #1
 8016014:	4413      	add	r3, r2
 8016016:	00db      	lsls	r3, r3, #3
 8016018:	440b      	add	r3, r1
 801601a:	3314      	adds	r3, #20
 801601c:	2204      	movs	r2, #4
 801601e:	701a      	strb	r2, [r3, #0]
 8016020:	e034      	b.n	801608c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016022:	4920      	ldr	r1, [pc, #128]	@ (80160a4 <etharp_tmr+0x14c>)
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	4613      	mov	r3, r2
 8016028:	005b      	lsls	r3, r3, #1
 801602a:	4413      	add	r3, r2
 801602c:	00db      	lsls	r3, r3, #3
 801602e:	440b      	add	r3, r1
 8016030:	3314      	adds	r3, #20
 8016032:	781b      	ldrb	r3, [r3, #0]
 8016034:	2b04      	cmp	r3, #4
 8016036:	d10a      	bne.n	801604e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016038:	491a      	ldr	r1, [pc, #104]	@ (80160a4 <etharp_tmr+0x14c>)
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	4613      	mov	r3, r2
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	4413      	add	r3, r2
 8016042:	00db      	lsls	r3, r3, #3
 8016044:	440b      	add	r3, r1
 8016046:	3314      	adds	r3, #20
 8016048:	2202      	movs	r2, #2
 801604a:	701a      	strb	r2, [r3, #0]
 801604c:	e01e      	b.n	801608c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801604e:	4915      	ldr	r1, [pc, #84]	@ (80160a4 <etharp_tmr+0x14c>)
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	4613      	mov	r3, r2
 8016054:	005b      	lsls	r3, r3, #1
 8016056:	4413      	add	r3, r2
 8016058:	00db      	lsls	r3, r3, #3
 801605a:	440b      	add	r3, r1
 801605c:	3314      	adds	r3, #20
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	2b01      	cmp	r3, #1
 8016062:	d113      	bne.n	801608c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016064:	490f      	ldr	r1, [pc, #60]	@ (80160a4 <etharp_tmr+0x14c>)
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	4613      	mov	r3, r2
 801606a:	005b      	lsls	r3, r3, #1
 801606c:	4413      	add	r3, r2
 801606e:	00db      	lsls	r3, r3, #3
 8016070:	440b      	add	r3, r1
 8016072:	3308      	adds	r3, #8
 8016074:	6818      	ldr	r0, [r3, #0]
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	4613      	mov	r3, r2
 801607a:	005b      	lsls	r3, r3, #1
 801607c:	4413      	add	r3, r2
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	4a08      	ldr	r2, [pc, #32]	@ (80160a4 <etharp_tmr+0x14c>)
 8016082:	4413      	add	r3, r2
 8016084:	3304      	adds	r3, #4
 8016086:	4619      	mov	r1, r3
 8016088:	f000 fe72 	bl	8016d70 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	3301      	adds	r3, #1
 8016090:	607b      	str	r3, [r7, #4]
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2b09      	cmp	r3, #9
 8016096:	f77f af65 	ble.w	8015f64 <etharp_tmr+0xc>
      }
    }
  }
}
 801609a:	bf00      	nop
 801609c:	bf00      	nop
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	2400e9f8 	.word	0x2400e9f8

080160a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b08a      	sub	sp, #40	@ 0x28
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	460b      	mov	r3, r1
 80160b2:	607a      	str	r2, [r7, #4]
 80160b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80160b6:	230a      	movs	r3, #10
 80160b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80160ba:	230a      	movs	r3, #10
 80160bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80160be:	230a      	movs	r3, #10
 80160c0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80160c2:	2300      	movs	r3, #0
 80160c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80160c6:	230a      	movs	r3, #10
 80160c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80160ca:	2300      	movs	r3, #0
 80160cc:	83bb      	strh	r3, [r7, #28]
 80160ce:	2300      	movs	r3, #0
 80160d0:	837b      	strh	r3, [r7, #26]
 80160d2:	2300      	movs	r3, #0
 80160d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80160d6:	2300      	movs	r3, #0
 80160d8:	843b      	strh	r3, [r7, #32]
 80160da:	e0ae      	b.n	801623a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80160dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160e0:	49a6      	ldr	r1, [pc, #664]	@ (801637c <etharp_find_entry+0x2d4>)
 80160e2:	4613      	mov	r3, r2
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	4413      	add	r3, r2
 80160e8:	00db      	lsls	r3, r3, #3
 80160ea:	440b      	add	r3, r1
 80160ec:	3314      	adds	r3, #20
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80160f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80160f6:	2b0a      	cmp	r3, #10
 80160f8:	d105      	bne.n	8016106 <etharp_find_entry+0x5e>
 80160fa:	7dfb      	ldrb	r3, [r7, #23]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d102      	bne.n	8016106 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016100:	8c3b      	ldrh	r3, [r7, #32]
 8016102:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016104:	e095      	b.n	8016232 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016106:	7dfb      	ldrb	r3, [r7, #23]
 8016108:	2b00      	cmp	r3, #0
 801610a:	f000 8092 	beq.w	8016232 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801610e:	7dfb      	ldrb	r3, [r7, #23]
 8016110:	2b01      	cmp	r3, #1
 8016112:	d009      	beq.n	8016128 <etharp_find_entry+0x80>
 8016114:	7dfb      	ldrb	r3, [r7, #23]
 8016116:	2b01      	cmp	r3, #1
 8016118:	d806      	bhi.n	8016128 <etharp_find_entry+0x80>
 801611a:	4b99      	ldr	r3, [pc, #612]	@ (8016380 <etharp_find_entry+0x2d8>)
 801611c:	f240 1223 	movw	r2, #291	@ 0x123
 8016120:	4998      	ldr	r1, [pc, #608]	@ (8016384 <etharp_find_entry+0x2dc>)
 8016122:	4899      	ldr	r0, [pc, #612]	@ (8016388 <etharp_find_entry+0x2e0>)
 8016124:	f002 fc0a 	bl	801893c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d020      	beq.n	8016170 <etharp_find_entry+0xc8>
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	6819      	ldr	r1, [r3, #0]
 8016132:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016136:	4891      	ldr	r0, [pc, #580]	@ (801637c <etharp_find_entry+0x2d4>)
 8016138:	4613      	mov	r3, r2
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	4413      	add	r3, r2
 801613e:	00db      	lsls	r3, r3, #3
 8016140:	4403      	add	r3, r0
 8016142:	3304      	adds	r3, #4
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4299      	cmp	r1, r3
 8016148:	d112      	bne.n	8016170 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d00c      	beq.n	801616a <etharp_find_entry+0xc2>
 8016150:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016154:	4989      	ldr	r1, [pc, #548]	@ (801637c <etharp_find_entry+0x2d4>)
 8016156:	4613      	mov	r3, r2
 8016158:	005b      	lsls	r3, r3, #1
 801615a:	4413      	add	r3, r2
 801615c:	00db      	lsls	r3, r3, #3
 801615e:	440b      	add	r3, r1
 8016160:	3308      	adds	r3, #8
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	687a      	ldr	r2, [r7, #4]
 8016166:	429a      	cmp	r2, r3
 8016168:	d102      	bne.n	8016170 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801616a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801616e:	e100      	b.n	8016372 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016170:	7dfb      	ldrb	r3, [r7, #23]
 8016172:	2b01      	cmp	r3, #1
 8016174:	d140      	bne.n	80161f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016176:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801617a:	4980      	ldr	r1, [pc, #512]	@ (801637c <etharp_find_entry+0x2d4>)
 801617c:	4613      	mov	r3, r2
 801617e:	005b      	lsls	r3, r3, #1
 8016180:	4413      	add	r3, r2
 8016182:	00db      	lsls	r3, r3, #3
 8016184:	440b      	add	r3, r1
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d01a      	beq.n	80161c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801618c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016190:	497a      	ldr	r1, [pc, #488]	@ (801637c <etharp_find_entry+0x2d4>)
 8016192:	4613      	mov	r3, r2
 8016194:	005b      	lsls	r3, r3, #1
 8016196:	4413      	add	r3, r2
 8016198:	00db      	lsls	r3, r3, #3
 801619a:	440b      	add	r3, r1
 801619c:	3312      	adds	r3, #18
 801619e:	881b      	ldrh	r3, [r3, #0]
 80161a0:	8bba      	ldrh	r2, [r7, #28]
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d845      	bhi.n	8016232 <etharp_find_entry+0x18a>
            old_queue = i;
 80161a6:	8c3b      	ldrh	r3, [r7, #32]
 80161a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80161aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161ae:	4973      	ldr	r1, [pc, #460]	@ (801637c <etharp_find_entry+0x2d4>)
 80161b0:	4613      	mov	r3, r2
 80161b2:	005b      	lsls	r3, r3, #1
 80161b4:	4413      	add	r3, r2
 80161b6:	00db      	lsls	r3, r3, #3
 80161b8:	440b      	add	r3, r1
 80161ba:	3312      	adds	r3, #18
 80161bc:	881b      	ldrh	r3, [r3, #0]
 80161be:	83bb      	strh	r3, [r7, #28]
 80161c0:	e037      	b.n	8016232 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80161c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161c6:	496d      	ldr	r1, [pc, #436]	@ (801637c <etharp_find_entry+0x2d4>)
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	3312      	adds	r3, #18
 80161d4:	881b      	ldrh	r3, [r3, #0]
 80161d6:	8b7a      	ldrh	r2, [r7, #26]
 80161d8:	429a      	cmp	r2, r3
 80161da:	d82a      	bhi.n	8016232 <etharp_find_entry+0x18a>
            old_pending = i;
 80161dc:	8c3b      	ldrh	r3, [r7, #32]
 80161de:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80161e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161e4:	4965      	ldr	r1, [pc, #404]	@ (801637c <etharp_find_entry+0x2d4>)
 80161e6:	4613      	mov	r3, r2
 80161e8:	005b      	lsls	r3, r3, #1
 80161ea:	4413      	add	r3, r2
 80161ec:	00db      	lsls	r3, r3, #3
 80161ee:	440b      	add	r3, r1
 80161f0:	3312      	adds	r3, #18
 80161f2:	881b      	ldrh	r3, [r3, #0]
 80161f4:	837b      	strh	r3, [r7, #26]
 80161f6:	e01c      	b.n	8016232 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80161f8:	7dfb      	ldrb	r3, [r7, #23]
 80161fa:	2b01      	cmp	r3, #1
 80161fc:	d919      	bls.n	8016232 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80161fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016202:	495e      	ldr	r1, [pc, #376]	@ (801637c <etharp_find_entry+0x2d4>)
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	440b      	add	r3, r1
 801620e:	3312      	adds	r3, #18
 8016210:	881b      	ldrh	r3, [r3, #0]
 8016212:	8b3a      	ldrh	r2, [r7, #24]
 8016214:	429a      	cmp	r2, r3
 8016216:	d80c      	bhi.n	8016232 <etharp_find_entry+0x18a>
            old_stable = i;
 8016218:	8c3b      	ldrh	r3, [r7, #32]
 801621a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801621c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016220:	4956      	ldr	r1, [pc, #344]	@ (801637c <etharp_find_entry+0x2d4>)
 8016222:	4613      	mov	r3, r2
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	4413      	add	r3, r2
 8016228:	00db      	lsls	r3, r3, #3
 801622a:	440b      	add	r3, r1
 801622c:	3312      	adds	r3, #18
 801622e:	881b      	ldrh	r3, [r3, #0]
 8016230:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016232:	8c3b      	ldrh	r3, [r7, #32]
 8016234:	3301      	adds	r3, #1
 8016236:	b29b      	uxth	r3, r3
 8016238:	843b      	strh	r3, [r7, #32]
 801623a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801623e:	2b09      	cmp	r3, #9
 8016240:	f77f af4c 	ble.w	80160dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016244:	7afb      	ldrb	r3, [r7, #11]
 8016246:	f003 0302 	and.w	r3, r3, #2
 801624a:	2b00      	cmp	r3, #0
 801624c:	d108      	bne.n	8016260 <etharp_find_entry+0x1b8>
 801624e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016252:	2b0a      	cmp	r3, #10
 8016254:	d107      	bne.n	8016266 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016256:	7afb      	ldrb	r3, [r7, #11]
 8016258:	f003 0301 	and.w	r3, r3, #1
 801625c:	2b00      	cmp	r3, #0
 801625e:	d102      	bne.n	8016266 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016260:	f04f 33ff 	mov.w	r3, #4294967295
 8016264:	e085      	b.n	8016372 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016266:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801626a:	2b09      	cmp	r3, #9
 801626c:	dc02      	bgt.n	8016274 <etharp_find_entry+0x1cc>
    i = empty;
 801626e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016270:	843b      	strh	r3, [r7, #32]
 8016272:	e039      	b.n	80162e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016274:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016278:	2b09      	cmp	r3, #9
 801627a:	dc14      	bgt.n	80162a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801627c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801627e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016284:	493d      	ldr	r1, [pc, #244]	@ (801637c <etharp_find_entry+0x2d4>)
 8016286:	4613      	mov	r3, r2
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	4413      	add	r3, r2
 801628c:	00db      	lsls	r3, r3, #3
 801628e:	440b      	add	r3, r1
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d018      	beq.n	80162c8 <etharp_find_entry+0x220>
 8016296:	4b3a      	ldr	r3, [pc, #232]	@ (8016380 <etharp_find_entry+0x2d8>)
 8016298:	f240 126d 	movw	r2, #365	@ 0x16d
 801629c:	493b      	ldr	r1, [pc, #236]	@ (801638c <etharp_find_entry+0x2e4>)
 801629e:	483a      	ldr	r0, [pc, #232]	@ (8016388 <etharp_find_entry+0x2e0>)
 80162a0:	f002 fb4c 	bl	801893c <iprintf>
 80162a4:	e010      	b.n	80162c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80162a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80162aa:	2b09      	cmp	r3, #9
 80162ac:	dc02      	bgt.n	80162b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80162ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80162b0:	843b      	strh	r3, [r7, #32]
 80162b2:	e009      	b.n	80162c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80162b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80162b8:	2b09      	cmp	r3, #9
 80162ba:	dc02      	bgt.n	80162c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80162bc:	8bfb      	ldrh	r3, [r7, #30]
 80162be:	843b      	strh	r3, [r7, #32]
 80162c0:	e002      	b.n	80162c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80162c2:	f04f 33ff 	mov.w	r3, #4294967295
 80162c6:	e054      	b.n	8016372 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80162c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80162cc:	2b09      	cmp	r3, #9
 80162ce:	dd06      	ble.n	80162de <etharp_find_entry+0x236>
 80162d0:	4b2b      	ldr	r3, [pc, #172]	@ (8016380 <etharp_find_entry+0x2d8>)
 80162d2:	f240 127f 	movw	r2, #383	@ 0x17f
 80162d6:	492e      	ldr	r1, [pc, #184]	@ (8016390 <etharp_find_entry+0x2e8>)
 80162d8:	482b      	ldr	r0, [pc, #172]	@ (8016388 <etharp_find_entry+0x2e0>)
 80162da:	f002 fb2f 	bl	801893c <iprintf>
    etharp_free_entry(i);
 80162de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7ff fe06 	bl	8015ef4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80162e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80162ec:	2b09      	cmp	r3, #9
 80162ee:	dd06      	ble.n	80162fe <etharp_find_entry+0x256>
 80162f0:	4b23      	ldr	r3, [pc, #140]	@ (8016380 <etharp_find_entry+0x2d8>)
 80162f2:	f240 1283 	movw	r2, #387	@ 0x183
 80162f6:	4926      	ldr	r1, [pc, #152]	@ (8016390 <etharp_find_entry+0x2e8>)
 80162f8:	4823      	ldr	r0, [pc, #140]	@ (8016388 <etharp_find_entry+0x2e0>)
 80162fa:	f002 fb1f 	bl	801893c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80162fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016302:	491e      	ldr	r1, [pc, #120]	@ (801637c <etharp_find_entry+0x2d4>)
 8016304:	4613      	mov	r3, r2
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	4413      	add	r3, r2
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	440b      	add	r3, r1
 801630e:	3314      	adds	r3, #20
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d006      	beq.n	8016324 <etharp_find_entry+0x27c>
 8016316:	4b1a      	ldr	r3, [pc, #104]	@ (8016380 <etharp_find_entry+0x2d8>)
 8016318:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801631c:	491d      	ldr	r1, [pc, #116]	@ (8016394 <etharp_find_entry+0x2ec>)
 801631e:	481a      	ldr	r0, [pc, #104]	@ (8016388 <etharp_find_entry+0x2e0>)
 8016320:	f002 fb0c 	bl	801893c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d00b      	beq.n	8016342 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801632a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	6819      	ldr	r1, [r3, #0]
 8016332:	4812      	ldr	r0, [pc, #72]	@ (801637c <etharp_find_entry+0x2d4>)
 8016334:	4613      	mov	r3, r2
 8016336:	005b      	lsls	r3, r3, #1
 8016338:	4413      	add	r3, r2
 801633a:	00db      	lsls	r3, r3, #3
 801633c:	4403      	add	r3, r0
 801633e:	3304      	adds	r3, #4
 8016340:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016346:	490d      	ldr	r1, [pc, #52]	@ (801637c <etharp_find_entry+0x2d4>)
 8016348:	4613      	mov	r3, r2
 801634a:	005b      	lsls	r3, r3, #1
 801634c:	4413      	add	r3, r2
 801634e:	00db      	lsls	r3, r3, #3
 8016350:	440b      	add	r3, r1
 8016352:	3312      	adds	r3, #18
 8016354:	2200      	movs	r2, #0
 8016356:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801635c:	4907      	ldr	r1, [pc, #28]	@ (801637c <etharp_find_entry+0x2d4>)
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	440b      	add	r3, r1
 8016368:	3308      	adds	r3, #8
 801636a:	687a      	ldr	r2, [r7, #4]
 801636c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801636e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016372:	4618      	mov	r0, r3
 8016374:	3728      	adds	r7, #40	@ 0x28
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}
 801637a:	bf00      	nop
 801637c:	2400e9f8 	.word	0x2400e9f8
 8016380:	0801bf98 	.word	0x0801bf98
 8016384:	0801bfd0 	.word	0x0801bfd0
 8016388:	0801c010 	.word	0x0801c010
 801638c:	0801c038 	.word	0x0801c038
 8016390:	0801c050 	.word	0x0801c050
 8016394:	0801c064 	.word	0x0801c064

08016398 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b088      	sub	sp, #32
 801639c:	af02      	add	r7, sp, #8
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
 80163a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80163ac:	2b06      	cmp	r3, #6
 80163ae:	d006      	beq.n	80163be <etharp_update_arp_entry+0x26>
 80163b0:	4b48      	ldr	r3, [pc, #288]	@ (80164d4 <etharp_update_arp_entry+0x13c>)
 80163b2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80163b6:	4948      	ldr	r1, [pc, #288]	@ (80164d8 <etharp_update_arp_entry+0x140>)
 80163b8:	4848      	ldr	r0, [pc, #288]	@ (80164dc <etharp_update_arp_entry+0x144>)
 80163ba:	f002 fabf 	bl	801893c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d012      	beq.n	80163ea <etharp_update_arp_entry+0x52>
 80163c4:	68bb      	ldr	r3, [r7, #8]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d00e      	beq.n	80163ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	68f9      	ldr	r1, [r7, #12]
 80163d2:	4618      	mov	r0, r3
 80163d4:	f001 f946 	bl	8017664 <ip4_addr_isbroadcast_u32>
 80163d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d105      	bne.n	80163ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80163e6:	2be0      	cmp	r3, #224	@ 0xe0
 80163e8:	d102      	bne.n	80163f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80163ea:	f06f 030f 	mvn.w	r3, #15
 80163ee:	e06c      	b.n	80164ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80163f0:	78fb      	ldrb	r3, [r7, #3]
 80163f2:	68fa      	ldr	r2, [r7, #12]
 80163f4:	4619      	mov	r1, r3
 80163f6:	68b8      	ldr	r0, [r7, #8]
 80163f8:	f7ff fe56 	bl	80160a8 <etharp_find_entry>
 80163fc:	4603      	mov	r3, r0
 80163fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016404:	2b00      	cmp	r3, #0
 8016406:	da02      	bge.n	801640e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016408:	8afb      	ldrh	r3, [r7, #22]
 801640a:	b25b      	sxtb	r3, r3
 801640c:	e05d      	b.n	80164ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801640e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016412:	4933      	ldr	r1, [pc, #204]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 8016414:	4613      	mov	r3, r2
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	4413      	add	r3, r2
 801641a:	00db      	lsls	r3, r3, #3
 801641c:	440b      	add	r3, r1
 801641e:	3314      	adds	r3, #20
 8016420:	2202      	movs	r2, #2
 8016422:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016424:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016428:	492d      	ldr	r1, [pc, #180]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 801642a:	4613      	mov	r3, r2
 801642c:	005b      	lsls	r3, r3, #1
 801642e:	4413      	add	r3, r2
 8016430:	00db      	lsls	r3, r3, #3
 8016432:	440b      	add	r3, r1
 8016434:	3308      	adds	r3, #8
 8016436:	68fa      	ldr	r2, [r7, #12]
 8016438:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801643a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801643e:	4613      	mov	r3, r2
 8016440:	005b      	lsls	r3, r3, #1
 8016442:	4413      	add	r3, r2
 8016444:	00db      	lsls	r3, r3, #3
 8016446:	3308      	adds	r3, #8
 8016448:	4a25      	ldr	r2, [pc, #148]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 801644a:	4413      	add	r3, r2
 801644c:	3304      	adds	r3, #4
 801644e:	2206      	movs	r2, #6
 8016450:	6879      	ldr	r1, [r7, #4]
 8016452:	4618      	mov	r0, r3
 8016454:	f002 fb4d 	bl	8018af2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016458:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801645c:	4920      	ldr	r1, [pc, #128]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 801645e:	4613      	mov	r3, r2
 8016460:	005b      	lsls	r3, r3, #1
 8016462:	4413      	add	r3, r2
 8016464:	00db      	lsls	r3, r3, #3
 8016466:	440b      	add	r3, r1
 8016468:	3312      	adds	r3, #18
 801646a:	2200      	movs	r2, #0
 801646c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801646e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016472:	491b      	ldr	r1, [pc, #108]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 8016474:	4613      	mov	r3, r2
 8016476:	005b      	lsls	r3, r3, #1
 8016478:	4413      	add	r3, r2
 801647a:	00db      	lsls	r3, r3, #3
 801647c:	440b      	add	r3, r1
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d021      	beq.n	80164c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016484:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016488:	4915      	ldr	r1, [pc, #84]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 801648a:	4613      	mov	r3, r2
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	4413      	add	r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	440b      	add	r3, r1
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016498:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801649c:	4910      	ldr	r1, [pc, #64]	@ (80164e0 <etharp_update_arp_entry+0x148>)
 801649e:	4613      	mov	r3, r2
 80164a0:	005b      	lsls	r3, r3, #1
 80164a2:	4413      	add	r3, r2
 80164a4:	00db      	lsls	r3, r3, #3
 80164a6:	440b      	add	r3, r1
 80164a8:	2200      	movs	r2, #0
 80164aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80164b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80164b6:	9300      	str	r3, [sp, #0]
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6939      	ldr	r1, [r7, #16]
 80164bc:	68f8      	ldr	r0, [r7, #12]
 80164be:	f001 ffdf 	bl	8018480 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80164c2:	6938      	ldr	r0, [r7, #16]
 80164c4:	f7f7 fc50 	bl	800dd68 <pbuf_free>
  }
  return ERR_OK;
 80164c8:	2300      	movs	r3, #0
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3718      	adds	r7, #24
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	0801bf98 	.word	0x0801bf98
 80164d8:	0801c090 	.word	0x0801c090
 80164dc:	0801c010 	.word	0x0801c010
 80164e0:	2400e9f8 	.word	0x2400e9f8

080164e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164ec:	2300      	movs	r3, #0
 80164ee:	60fb      	str	r3, [r7, #12]
 80164f0:	e01e      	b.n	8016530 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80164f2:	4913      	ldr	r1, [pc, #76]	@ (8016540 <etharp_cleanup_netif+0x5c>)
 80164f4:	68fa      	ldr	r2, [r7, #12]
 80164f6:	4613      	mov	r3, r2
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	4413      	add	r3, r2
 80164fc:	00db      	lsls	r3, r3, #3
 80164fe:	440b      	add	r3, r1
 8016500:	3314      	adds	r3, #20
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016506:	7afb      	ldrb	r3, [r7, #11]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d00e      	beq.n	801652a <etharp_cleanup_netif+0x46>
 801650c:	490c      	ldr	r1, [pc, #48]	@ (8016540 <etharp_cleanup_netif+0x5c>)
 801650e:	68fa      	ldr	r2, [r7, #12]
 8016510:	4613      	mov	r3, r2
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	4413      	add	r3, r2
 8016516:	00db      	lsls	r3, r3, #3
 8016518:	440b      	add	r3, r1
 801651a:	3308      	adds	r3, #8
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	687a      	ldr	r2, [r7, #4]
 8016520:	429a      	cmp	r2, r3
 8016522:	d102      	bne.n	801652a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016524:	68f8      	ldr	r0, [r7, #12]
 8016526:	f7ff fce5 	bl	8015ef4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	3301      	adds	r3, #1
 801652e:	60fb      	str	r3, [r7, #12]
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	2b09      	cmp	r3, #9
 8016534:	dddd      	ble.n	80164f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016536:	bf00      	nop
 8016538:	bf00      	nop
 801653a:	3710      	adds	r7, #16
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}
 8016540:	2400e9f8 	.word	0x2400e9f8

08016544 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016544:	b5b0      	push	{r4, r5, r7, lr}
 8016546:	b08a      	sub	sp, #40	@ 0x28
 8016548:	af04      	add	r7, sp, #16
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d107      	bne.n	8016564 <etharp_input+0x20>
 8016554:	4b3f      	ldr	r3, [pc, #252]	@ (8016654 <etharp_input+0x110>)
 8016556:	f240 228a 	movw	r2, #650	@ 0x28a
 801655a:	493f      	ldr	r1, [pc, #252]	@ (8016658 <etharp_input+0x114>)
 801655c:	483f      	ldr	r0, [pc, #252]	@ (801665c <etharp_input+0x118>)
 801655e:	f002 f9ed 	bl	801893c <iprintf>
 8016562:	e074      	b.n	801664e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	881b      	ldrh	r3, [r3, #0]
 801656e:	b29b      	uxth	r3, r3
 8016570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016574:	d10c      	bne.n	8016590 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801657a:	2b06      	cmp	r3, #6
 801657c:	d108      	bne.n	8016590 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016582:	2b04      	cmp	r3, #4
 8016584:	d104      	bne.n	8016590 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	885b      	ldrh	r3, [r3, #2]
 801658a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801658c:	2b08      	cmp	r3, #8
 801658e:	d003      	beq.n	8016598 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7f7 fbe9 	bl	800dd68 <pbuf_free>
    return;
 8016596:	e05a      	b.n	801664e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016598:	693b      	ldr	r3, [r7, #16]
 801659a:	330e      	adds	r3, #14
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	3318      	adds	r3, #24
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	3304      	adds	r3, #4
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d102      	bne.n	80165b8 <etharp_input+0x74>
    for_us = 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	75fb      	strb	r3, [r7, #23]
 80165b6:	e009      	b.n	80165cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80165b8:	68ba      	ldr	r2, [r7, #8]
 80165ba:	683b      	ldr	r3, [r7, #0]
 80165bc:	3304      	adds	r3, #4
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	bf0c      	ite	eq
 80165c4:	2301      	moveq	r3, #1
 80165c6:	2300      	movne	r3, #0
 80165c8:	b2db      	uxtb	r3, r3
 80165ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	f103 0208 	add.w	r2, r3, #8
 80165d2:	7dfb      	ldrb	r3, [r7, #23]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d001      	beq.n	80165dc <etharp_input+0x98>
 80165d8:	2301      	movs	r3, #1
 80165da:	e000      	b.n	80165de <etharp_input+0x9a>
 80165dc:	2302      	movs	r3, #2
 80165de:	f107 010c 	add.w	r1, r7, #12
 80165e2:	6838      	ldr	r0, [r7, #0]
 80165e4:	f7ff fed8 	bl	8016398 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	88db      	ldrh	r3, [r3, #6]
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80165f2:	d003      	beq.n	80165fc <etharp_input+0xb8>
 80165f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80165f8:	d01e      	beq.n	8016638 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80165fa:	e025      	b.n	8016648 <etharp_input+0x104>
      if (for_us) {
 80165fc:	7dfb      	ldrb	r3, [r7, #23]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d021      	beq.n	8016646 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016602:	683b      	ldr	r3, [r7, #0]
 8016604:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016618:	693a      	ldr	r2, [r7, #16]
 801661a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801661c:	2102      	movs	r1, #2
 801661e:	9103      	str	r1, [sp, #12]
 8016620:	f107 010c 	add.w	r1, r7, #12
 8016624:	9102      	str	r1, [sp, #8]
 8016626:	9201      	str	r2, [sp, #4]
 8016628:	9300      	str	r3, [sp, #0]
 801662a:	462b      	mov	r3, r5
 801662c:	4622      	mov	r2, r4
 801662e:	4601      	mov	r1, r0
 8016630:	6838      	ldr	r0, [r7, #0]
 8016632:	f000 faef 	bl	8016c14 <etharp_raw>
      break;
 8016636:	e006      	b.n	8016646 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016638:	f107 030c 	add.w	r3, r7, #12
 801663c:	4619      	mov	r1, r3
 801663e:	6838      	ldr	r0, [r7, #0]
 8016640:	f7fe fa02 	bl	8014a48 <dhcp_arp_reply>
      break;
 8016644:	e000      	b.n	8016648 <etharp_input+0x104>
      break;
 8016646:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016648:	6878      	ldr	r0, [r7, #4]
 801664a:	f7f7 fb8d 	bl	800dd68 <pbuf_free>
}
 801664e:	3718      	adds	r7, #24
 8016650:	46bd      	mov	sp, r7
 8016652:	bdb0      	pop	{r4, r5, r7, pc}
 8016654:	0801bf98 	.word	0x0801bf98
 8016658:	0801c0e8 	.word	0x0801c0e8
 801665c:	0801c010 	.word	0x0801c010

08016660 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b086      	sub	sp, #24
 8016664:	af02      	add	r7, sp, #8
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	4613      	mov	r3, r2
 801666c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801666e:	79fa      	ldrb	r2, [r7, #7]
 8016670:	4944      	ldr	r1, [pc, #272]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 8016672:	4613      	mov	r3, r2
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	4413      	add	r3, r2
 8016678:	00db      	lsls	r3, r3, #3
 801667a:	440b      	add	r3, r1
 801667c:	3314      	adds	r3, #20
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	2b01      	cmp	r3, #1
 8016682:	d806      	bhi.n	8016692 <etharp_output_to_arp_index+0x32>
 8016684:	4b40      	ldr	r3, [pc, #256]	@ (8016788 <etharp_output_to_arp_index+0x128>)
 8016686:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801668a:	4940      	ldr	r1, [pc, #256]	@ (801678c <etharp_output_to_arp_index+0x12c>)
 801668c:	4840      	ldr	r0, [pc, #256]	@ (8016790 <etharp_output_to_arp_index+0x130>)
 801668e:	f002 f955 	bl	801893c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016692:	79fa      	ldrb	r2, [r7, #7]
 8016694:	493b      	ldr	r1, [pc, #236]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 8016696:	4613      	mov	r3, r2
 8016698:	005b      	lsls	r3, r3, #1
 801669a:	4413      	add	r3, r2
 801669c:	00db      	lsls	r3, r3, #3
 801669e:	440b      	add	r3, r1
 80166a0:	3314      	adds	r3, #20
 80166a2:	781b      	ldrb	r3, [r3, #0]
 80166a4:	2b02      	cmp	r3, #2
 80166a6:	d153      	bne.n	8016750 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80166a8:	79fa      	ldrb	r2, [r7, #7]
 80166aa:	4936      	ldr	r1, [pc, #216]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 80166ac:	4613      	mov	r3, r2
 80166ae:	005b      	lsls	r3, r3, #1
 80166b0:	4413      	add	r3, r2
 80166b2:	00db      	lsls	r3, r3, #3
 80166b4:	440b      	add	r3, r1
 80166b6:	3312      	adds	r3, #18
 80166b8:	881b      	ldrh	r3, [r3, #0]
 80166ba:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80166be:	d919      	bls.n	80166f4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80166c0:	79fa      	ldrb	r2, [r7, #7]
 80166c2:	4613      	mov	r3, r2
 80166c4:	005b      	lsls	r3, r3, #1
 80166c6:	4413      	add	r3, r2
 80166c8:	00db      	lsls	r3, r3, #3
 80166ca:	4a2e      	ldr	r2, [pc, #184]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 80166cc:	4413      	add	r3, r2
 80166ce:	3304      	adds	r3, #4
 80166d0:	4619      	mov	r1, r3
 80166d2:	68f8      	ldr	r0, [r7, #12]
 80166d4:	f000 fb4c 	bl	8016d70 <etharp_request>
 80166d8:	4603      	mov	r3, r0
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d138      	bne.n	8016750 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80166de:	79fa      	ldrb	r2, [r7, #7]
 80166e0:	4928      	ldr	r1, [pc, #160]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 80166e2:	4613      	mov	r3, r2
 80166e4:	005b      	lsls	r3, r3, #1
 80166e6:	4413      	add	r3, r2
 80166e8:	00db      	lsls	r3, r3, #3
 80166ea:	440b      	add	r3, r1
 80166ec:	3314      	adds	r3, #20
 80166ee:	2203      	movs	r2, #3
 80166f0:	701a      	strb	r2, [r3, #0]
 80166f2:	e02d      	b.n	8016750 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80166f4:	79fa      	ldrb	r2, [r7, #7]
 80166f6:	4923      	ldr	r1, [pc, #140]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 80166f8:	4613      	mov	r3, r2
 80166fa:	005b      	lsls	r3, r3, #1
 80166fc:	4413      	add	r3, r2
 80166fe:	00db      	lsls	r3, r3, #3
 8016700:	440b      	add	r3, r1
 8016702:	3312      	adds	r3, #18
 8016704:	881b      	ldrh	r3, [r3, #0]
 8016706:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801670a:	d321      	bcc.n	8016750 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801670c:	79fa      	ldrb	r2, [r7, #7]
 801670e:	4613      	mov	r3, r2
 8016710:	005b      	lsls	r3, r3, #1
 8016712:	4413      	add	r3, r2
 8016714:	00db      	lsls	r3, r3, #3
 8016716:	4a1b      	ldr	r2, [pc, #108]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 8016718:	4413      	add	r3, r2
 801671a:	1d19      	adds	r1, r3, #4
 801671c:	79fa      	ldrb	r2, [r7, #7]
 801671e:	4613      	mov	r3, r2
 8016720:	005b      	lsls	r3, r3, #1
 8016722:	4413      	add	r3, r2
 8016724:	00db      	lsls	r3, r3, #3
 8016726:	3308      	adds	r3, #8
 8016728:	4a16      	ldr	r2, [pc, #88]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 801672a:	4413      	add	r3, r2
 801672c:	3304      	adds	r3, #4
 801672e:	461a      	mov	r2, r3
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f000 fafb 	bl	8016d2c <etharp_request_dst>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d109      	bne.n	8016750 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801673c:	79fa      	ldrb	r2, [r7, #7]
 801673e:	4911      	ldr	r1, [pc, #68]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 8016740:	4613      	mov	r3, r2
 8016742:	005b      	lsls	r3, r3, #1
 8016744:	4413      	add	r3, r2
 8016746:	00db      	lsls	r3, r3, #3
 8016748:	440b      	add	r3, r1
 801674a:	3314      	adds	r3, #20
 801674c:	2203      	movs	r2, #3
 801674e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016750:	68fb      	ldr	r3, [r7, #12]
 8016752:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8016756:	79fa      	ldrb	r2, [r7, #7]
 8016758:	4613      	mov	r3, r2
 801675a:	005b      	lsls	r3, r3, #1
 801675c:	4413      	add	r3, r2
 801675e:	00db      	lsls	r3, r3, #3
 8016760:	3308      	adds	r3, #8
 8016762:	4a08      	ldr	r2, [pc, #32]	@ (8016784 <etharp_output_to_arp_index+0x124>)
 8016764:	4413      	add	r3, r2
 8016766:	3304      	adds	r3, #4
 8016768:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801676c:	9200      	str	r2, [sp, #0]
 801676e:	460a      	mov	r2, r1
 8016770:	68b9      	ldr	r1, [r7, #8]
 8016772:	68f8      	ldr	r0, [r7, #12]
 8016774:	f001 fe84 	bl	8018480 <ethernet_output>
 8016778:	4603      	mov	r3, r0
}
 801677a:	4618      	mov	r0, r3
 801677c:	3710      	adds	r7, #16
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}
 8016782:	bf00      	nop
 8016784:	2400e9f8 	.word	0x2400e9f8
 8016788:	0801bf98 	.word	0x0801bf98
 801678c:	0801c108 	.word	0x0801c108
 8016790:	0801c010 	.word	0x0801c010

08016794 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b08a      	sub	sp, #40	@ 0x28
 8016798:	af02      	add	r7, sp, #8
 801679a:	60f8      	str	r0, [r7, #12]
 801679c:	60b9      	str	r1, [r7, #8]
 801679e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d106      	bne.n	80167b8 <etharp_output+0x24>
 80167aa:	4b73      	ldr	r3, [pc, #460]	@ (8016978 <etharp_output+0x1e4>)
 80167ac:	f240 321e 	movw	r2, #798	@ 0x31e
 80167b0:	4972      	ldr	r1, [pc, #456]	@ (801697c <etharp_output+0x1e8>)
 80167b2:	4873      	ldr	r0, [pc, #460]	@ (8016980 <etharp_output+0x1ec>)
 80167b4:	f002 f8c2 	bl	801893c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d106      	bne.n	80167cc <etharp_output+0x38>
 80167be:	4b6e      	ldr	r3, [pc, #440]	@ (8016978 <etharp_output+0x1e4>)
 80167c0:	f240 321f 	movw	r2, #799	@ 0x31f
 80167c4:	496f      	ldr	r1, [pc, #444]	@ (8016984 <etharp_output+0x1f0>)
 80167c6:	486e      	ldr	r0, [pc, #440]	@ (8016980 <etharp_output+0x1ec>)
 80167c8:	f002 f8b8 	bl	801893c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d106      	bne.n	80167e0 <etharp_output+0x4c>
 80167d2:	4b69      	ldr	r3, [pc, #420]	@ (8016978 <etharp_output+0x1e4>)
 80167d4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80167d8:	496b      	ldr	r1, [pc, #428]	@ (8016988 <etharp_output+0x1f4>)
 80167da:	4869      	ldr	r0, [pc, #420]	@ (8016980 <etharp_output+0x1ec>)
 80167dc:	f002 f8ae 	bl	801893c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	68f9      	ldr	r1, [r7, #12]
 80167e6:	4618      	mov	r0, r3
 80167e8:	f000 ff3c 	bl	8017664 <ip4_addr_isbroadcast_u32>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d002      	beq.n	80167f8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80167f2:	4b66      	ldr	r3, [pc, #408]	@ (801698c <etharp_output+0x1f8>)
 80167f4:	61fb      	str	r3, [r7, #28]
 80167f6:	e0af      	b.n	8016958 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016800:	2be0      	cmp	r3, #224	@ 0xe0
 8016802:	d118      	bne.n	8016836 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016804:	2301      	movs	r3, #1
 8016806:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016808:	2300      	movs	r3, #0
 801680a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801680c:	235e      	movs	r3, #94	@ 0x5e
 801680e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	3301      	adds	r3, #1
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801681a:	b2db      	uxtb	r3, r3
 801681c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	3302      	adds	r3, #2
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	3303      	adds	r3, #3
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801682e:	f107 0310 	add.w	r3, r7, #16
 8016832:	61fb      	str	r3, [r7, #28]
 8016834:	e090      	b.n	8016958 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	3304      	adds	r3, #4
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	405a      	eors	r2, r3
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	3308      	adds	r3, #8
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	4013      	ands	r3, r2
 801684a:	2b00      	cmp	r3, #0
 801684c:	d012      	beq.n	8016874 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016854:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016858:	4293      	cmp	r3, r2
 801685a:	d00b      	beq.n	8016874 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	330c      	adds	r3, #12
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d003      	beq.n	801686e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	330c      	adds	r3, #12
 801686a:	61bb      	str	r3, [r7, #24]
 801686c:	e002      	b.n	8016874 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801686e:	f06f 0303 	mvn.w	r3, #3
 8016872:	e07d      	b.n	8016970 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016874:	4b46      	ldr	r3, [pc, #280]	@ (8016990 <etharp_output+0x1fc>)
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	4619      	mov	r1, r3
 801687a:	4a46      	ldr	r2, [pc, #280]	@ (8016994 <etharp_output+0x200>)
 801687c:	460b      	mov	r3, r1
 801687e:	005b      	lsls	r3, r3, #1
 8016880:	440b      	add	r3, r1
 8016882:	00db      	lsls	r3, r3, #3
 8016884:	4413      	add	r3, r2
 8016886:	3314      	adds	r3, #20
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	2b01      	cmp	r3, #1
 801688c:	d925      	bls.n	80168da <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801688e:	4b40      	ldr	r3, [pc, #256]	@ (8016990 <etharp_output+0x1fc>)
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	4619      	mov	r1, r3
 8016894:	4a3f      	ldr	r2, [pc, #252]	@ (8016994 <etharp_output+0x200>)
 8016896:	460b      	mov	r3, r1
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	440b      	add	r3, r1
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	4413      	add	r3, r2
 80168a0:	3308      	adds	r3, #8
 80168a2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d117      	bne.n	80168da <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80168aa:	69bb      	ldr	r3, [r7, #24]
 80168ac:	681a      	ldr	r2, [r3, #0]
 80168ae:	4b38      	ldr	r3, [pc, #224]	@ (8016990 <etharp_output+0x1fc>)
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	4618      	mov	r0, r3
 80168b4:	4937      	ldr	r1, [pc, #220]	@ (8016994 <etharp_output+0x200>)
 80168b6:	4603      	mov	r3, r0
 80168b8:	005b      	lsls	r3, r3, #1
 80168ba:	4403      	add	r3, r0
 80168bc:	00db      	lsls	r3, r3, #3
 80168be:	440b      	add	r3, r1
 80168c0:	3304      	adds	r3, #4
 80168c2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d108      	bne.n	80168da <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80168c8:	4b31      	ldr	r3, [pc, #196]	@ (8016990 <etharp_output+0x1fc>)
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	461a      	mov	r2, r3
 80168ce:	68b9      	ldr	r1, [r7, #8]
 80168d0:	68f8      	ldr	r0, [r7, #12]
 80168d2:	f7ff fec5 	bl	8016660 <etharp_output_to_arp_index>
 80168d6:	4603      	mov	r3, r0
 80168d8:	e04a      	b.n	8016970 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80168da:	2300      	movs	r3, #0
 80168dc:	75fb      	strb	r3, [r7, #23]
 80168de:	e031      	b.n	8016944 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80168e0:	7dfa      	ldrb	r2, [r7, #23]
 80168e2:	492c      	ldr	r1, [pc, #176]	@ (8016994 <etharp_output+0x200>)
 80168e4:	4613      	mov	r3, r2
 80168e6:	005b      	lsls	r3, r3, #1
 80168e8:	4413      	add	r3, r2
 80168ea:	00db      	lsls	r3, r3, #3
 80168ec:	440b      	add	r3, r1
 80168ee:	3314      	adds	r3, #20
 80168f0:	781b      	ldrb	r3, [r3, #0]
 80168f2:	2b01      	cmp	r3, #1
 80168f4:	d923      	bls.n	801693e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80168f6:	7dfa      	ldrb	r2, [r7, #23]
 80168f8:	4926      	ldr	r1, [pc, #152]	@ (8016994 <etharp_output+0x200>)
 80168fa:	4613      	mov	r3, r2
 80168fc:	005b      	lsls	r3, r3, #1
 80168fe:	4413      	add	r3, r2
 8016900:	00db      	lsls	r3, r3, #3
 8016902:	440b      	add	r3, r1
 8016904:	3308      	adds	r3, #8
 8016906:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016908:	68fa      	ldr	r2, [r7, #12]
 801690a:	429a      	cmp	r2, r3
 801690c:	d117      	bne.n	801693e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801690e:	69bb      	ldr	r3, [r7, #24]
 8016910:	6819      	ldr	r1, [r3, #0]
 8016912:	7dfa      	ldrb	r2, [r7, #23]
 8016914:	481f      	ldr	r0, [pc, #124]	@ (8016994 <etharp_output+0x200>)
 8016916:	4613      	mov	r3, r2
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4413      	add	r3, r2
 801691c:	00db      	lsls	r3, r3, #3
 801691e:	4403      	add	r3, r0
 8016920:	3304      	adds	r3, #4
 8016922:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016924:	4299      	cmp	r1, r3
 8016926:	d10a      	bne.n	801693e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016928:	4a19      	ldr	r2, [pc, #100]	@ (8016990 <etharp_output+0x1fc>)
 801692a:	7dfb      	ldrb	r3, [r7, #23]
 801692c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801692e:	7dfb      	ldrb	r3, [r7, #23]
 8016930:	461a      	mov	r2, r3
 8016932:	68b9      	ldr	r1, [r7, #8]
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	f7ff fe93 	bl	8016660 <etharp_output_to_arp_index>
 801693a:	4603      	mov	r3, r0
 801693c:	e018      	b.n	8016970 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801693e:	7dfb      	ldrb	r3, [r7, #23]
 8016940:	3301      	adds	r3, #1
 8016942:	75fb      	strb	r3, [r7, #23]
 8016944:	7dfb      	ldrb	r3, [r7, #23]
 8016946:	2b09      	cmp	r3, #9
 8016948:	d9ca      	bls.n	80168e0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801694a:	68ba      	ldr	r2, [r7, #8]
 801694c:	69b9      	ldr	r1, [r7, #24]
 801694e:	68f8      	ldr	r0, [r7, #12]
 8016950:	f000 f822 	bl	8016998 <etharp_query>
 8016954:	4603      	mov	r3, r0
 8016956:	e00b      	b.n	8016970 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801695e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	68b9      	ldr	r1, [r7, #8]
 8016968:	68f8      	ldr	r0, [r7, #12]
 801696a:	f001 fd89 	bl	8018480 <ethernet_output>
 801696e:	4603      	mov	r3, r0
}
 8016970:	4618      	mov	r0, r3
 8016972:	3720      	adds	r7, #32
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	0801bf98 	.word	0x0801bf98
 801697c:	0801c0e8 	.word	0x0801c0e8
 8016980:	0801c010 	.word	0x0801c010
 8016984:	0801c138 	.word	0x0801c138
 8016988:	0801c0d8 	.word	0x0801c0d8
 801698c:	0801c7c8 	.word	0x0801c7c8
 8016990:	2400eae8 	.word	0x2400eae8
 8016994:	2400e9f8 	.word	0x2400e9f8

08016998 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b08c      	sub	sp, #48	@ 0x30
 801699c:	af02      	add	r7, sp, #8
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	332a      	adds	r3, #42	@ 0x2a
 80169a8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80169aa:	23ff      	movs	r3, #255	@ 0xff
 80169ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80169b0:	2300      	movs	r3, #0
 80169b2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	68f9      	ldr	r1, [r7, #12]
 80169ba:	4618      	mov	r0, r3
 80169bc:	f000 fe52 	bl	8017664 <ip4_addr_isbroadcast_u32>
 80169c0:	4603      	mov	r3, r0
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d10c      	bne.n	80169e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80169c6:	68bb      	ldr	r3, [r7, #8]
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80169ce:	2be0      	cmp	r3, #224	@ 0xe0
 80169d0:	d006      	beq.n	80169e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d003      	beq.n	80169e0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d102      	bne.n	80169e6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80169e0:	f06f 030f 	mvn.w	r3, #15
 80169e4:	e101      	b.n	8016bea <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80169e6:	68fa      	ldr	r2, [r7, #12]
 80169e8:	2101      	movs	r1, #1
 80169ea:	68b8      	ldr	r0, [r7, #8]
 80169ec:	f7ff fb5c 	bl	80160a8 <etharp_find_entry>
 80169f0:	4603      	mov	r3, r0
 80169f2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80169f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	da02      	bge.n	8016a02 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80169fc:	8a7b      	ldrh	r3, [r7, #18]
 80169fe:	b25b      	sxtb	r3, r3
 8016a00:	e0f3      	b.n	8016bea <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016a02:	8a7b      	ldrh	r3, [r7, #18]
 8016a04:	2b7e      	cmp	r3, #126	@ 0x7e
 8016a06:	d906      	bls.n	8016a16 <etharp_query+0x7e>
 8016a08:	4b7a      	ldr	r3, [pc, #488]	@ (8016bf4 <etharp_query+0x25c>)
 8016a0a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016a0e:	497a      	ldr	r1, [pc, #488]	@ (8016bf8 <etharp_query+0x260>)
 8016a10:	487a      	ldr	r0, [pc, #488]	@ (8016bfc <etharp_query+0x264>)
 8016a12:	f001 ff93 	bl	801893c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016a16:	8a7b      	ldrh	r3, [r7, #18]
 8016a18:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016a1a:	7c7a      	ldrb	r2, [r7, #17]
 8016a1c:	4978      	ldr	r1, [pc, #480]	@ (8016c00 <etharp_query+0x268>)
 8016a1e:	4613      	mov	r3, r2
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	4413      	add	r3, r2
 8016a24:	00db      	lsls	r3, r3, #3
 8016a26:	440b      	add	r3, r1
 8016a28:	3314      	adds	r3, #20
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d115      	bne.n	8016a5c <etharp_query+0xc4>
    is_new_entry = 1;
 8016a30:	2301      	movs	r3, #1
 8016a32:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016a34:	7c7a      	ldrb	r2, [r7, #17]
 8016a36:	4972      	ldr	r1, [pc, #456]	@ (8016c00 <etharp_query+0x268>)
 8016a38:	4613      	mov	r3, r2
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	4413      	add	r3, r2
 8016a3e:	00db      	lsls	r3, r3, #3
 8016a40:	440b      	add	r3, r1
 8016a42:	3314      	adds	r3, #20
 8016a44:	2201      	movs	r2, #1
 8016a46:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016a48:	7c7a      	ldrb	r2, [r7, #17]
 8016a4a:	496d      	ldr	r1, [pc, #436]	@ (8016c00 <etharp_query+0x268>)
 8016a4c:	4613      	mov	r3, r2
 8016a4e:	005b      	lsls	r3, r3, #1
 8016a50:	4413      	add	r3, r2
 8016a52:	00db      	lsls	r3, r3, #3
 8016a54:	440b      	add	r3, r1
 8016a56:	3308      	adds	r3, #8
 8016a58:	68fa      	ldr	r2, [r7, #12]
 8016a5a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016a5c:	7c7a      	ldrb	r2, [r7, #17]
 8016a5e:	4968      	ldr	r1, [pc, #416]	@ (8016c00 <etharp_query+0x268>)
 8016a60:	4613      	mov	r3, r2
 8016a62:	005b      	lsls	r3, r3, #1
 8016a64:	4413      	add	r3, r2
 8016a66:	00db      	lsls	r3, r3, #3
 8016a68:	440b      	add	r3, r1
 8016a6a:	3314      	adds	r3, #20
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	2b01      	cmp	r3, #1
 8016a70:	d011      	beq.n	8016a96 <etharp_query+0xfe>
 8016a72:	7c7a      	ldrb	r2, [r7, #17]
 8016a74:	4962      	ldr	r1, [pc, #392]	@ (8016c00 <etharp_query+0x268>)
 8016a76:	4613      	mov	r3, r2
 8016a78:	005b      	lsls	r3, r3, #1
 8016a7a:	4413      	add	r3, r2
 8016a7c:	00db      	lsls	r3, r3, #3
 8016a7e:	440b      	add	r3, r1
 8016a80:	3314      	adds	r3, #20
 8016a82:	781b      	ldrb	r3, [r3, #0]
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d806      	bhi.n	8016a96 <etharp_query+0xfe>
 8016a88:	4b5a      	ldr	r3, [pc, #360]	@ (8016bf4 <etharp_query+0x25c>)
 8016a8a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016a8e:	495d      	ldr	r1, [pc, #372]	@ (8016c04 <etharp_query+0x26c>)
 8016a90:	485a      	ldr	r0, [pc, #360]	@ (8016bfc <etharp_query+0x264>)
 8016a92:	f001 ff53 	bl	801893c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d102      	bne.n	8016aa2 <etharp_query+0x10a>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d10c      	bne.n	8016abc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016aa2:	68b9      	ldr	r1, [r7, #8]
 8016aa4:	68f8      	ldr	r0, [r7, #12]
 8016aa6:	f000 f963 	bl	8016d70 <etharp_request>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d102      	bne.n	8016abc <etharp_query+0x124>
      return result;
 8016ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016aba:	e096      	b.n	8016bea <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d106      	bne.n	8016ad0 <etharp_query+0x138>
 8016ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8016bf4 <etharp_query+0x25c>)
 8016ac4:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016ac8:	494f      	ldr	r1, [pc, #316]	@ (8016c08 <etharp_query+0x270>)
 8016aca:	484c      	ldr	r0, [pc, #304]	@ (8016bfc <etharp_query+0x264>)
 8016acc:	f001 ff36 	bl	801893c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016ad0:	7c7a      	ldrb	r2, [r7, #17]
 8016ad2:	494b      	ldr	r1, [pc, #300]	@ (8016c00 <etharp_query+0x268>)
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3314      	adds	r3, #20
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d917      	bls.n	8016b16 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016ae6:	4a49      	ldr	r2, [pc, #292]	@ (8016c0c <etharp_query+0x274>)
 8016ae8:	7c7b      	ldrb	r3, [r7, #17]
 8016aea:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016aec:	7c7a      	ldrb	r2, [r7, #17]
 8016aee:	4613      	mov	r3, r2
 8016af0:	005b      	lsls	r3, r3, #1
 8016af2:	4413      	add	r3, r2
 8016af4:	00db      	lsls	r3, r3, #3
 8016af6:	3308      	adds	r3, #8
 8016af8:	4a41      	ldr	r2, [pc, #260]	@ (8016c00 <etharp_query+0x268>)
 8016afa:	4413      	add	r3, r2
 8016afc:	3304      	adds	r3, #4
 8016afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016b02:	9200      	str	r2, [sp, #0]
 8016b04:	697a      	ldr	r2, [r7, #20]
 8016b06:	6879      	ldr	r1, [r7, #4]
 8016b08:	68f8      	ldr	r0, [r7, #12]
 8016b0a:	f001 fcb9 	bl	8018480 <ethernet_output>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016b14:	e067      	b.n	8016be6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016b16:	7c7a      	ldrb	r2, [r7, #17]
 8016b18:	4939      	ldr	r1, [pc, #228]	@ (8016c00 <etharp_query+0x268>)
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	005b      	lsls	r3, r3, #1
 8016b1e:	4413      	add	r3, r2
 8016b20:	00db      	lsls	r3, r3, #3
 8016b22:	440b      	add	r3, r1
 8016b24:	3314      	adds	r3, #20
 8016b26:	781b      	ldrb	r3, [r3, #0]
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d15c      	bne.n	8016be6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016b34:	e01c      	b.n	8016b70 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	895a      	ldrh	r2, [r3, #10]
 8016b3a:	69fb      	ldr	r3, [r7, #28]
 8016b3c:	891b      	ldrh	r3, [r3, #8]
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	d10a      	bne.n	8016b58 <etharp_query+0x1c0>
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d006      	beq.n	8016b58 <etharp_query+0x1c0>
 8016b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8016bf4 <etharp_query+0x25c>)
 8016b4c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016b50:	492f      	ldr	r1, [pc, #188]	@ (8016c10 <etharp_query+0x278>)
 8016b52:	482a      	ldr	r0, [pc, #168]	@ (8016bfc <etharp_query+0x264>)
 8016b54:	f001 fef2 	bl	801893c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016b58:	69fb      	ldr	r3, [r7, #28]
 8016b5a:	7b1b      	ldrb	r3, [r3, #12]
 8016b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d002      	beq.n	8016b6a <etharp_query+0x1d2>
        copy_needed = 1;
 8016b64:	2301      	movs	r3, #1
 8016b66:	61bb      	str	r3, [r7, #24]
        break;
 8016b68:	e005      	b.n	8016b76 <etharp_query+0x1de>
      }
      p = p->next;
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016b70:	69fb      	ldr	r3, [r7, #28]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d1df      	bne.n	8016b36 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016b76:	69bb      	ldr	r3, [r7, #24]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d007      	beq.n	8016b8c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016b7c:	687a      	ldr	r2, [r7, #4]
 8016b7e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016b82:	200e      	movs	r0, #14
 8016b84:	f7f7 fb68 	bl	800e258 <pbuf_clone>
 8016b88:	61f8      	str	r0, [r7, #28]
 8016b8a:	e004      	b.n	8016b96 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016b90:	69f8      	ldr	r0, [r7, #28]
 8016b92:	f7f7 f98f 	bl	800deb4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d021      	beq.n	8016be0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016b9c:	7c7a      	ldrb	r2, [r7, #17]
 8016b9e:	4918      	ldr	r1, [pc, #96]	@ (8016c00 <etharp_query+0x268>)
 8016ba0:	4613      	mov	r3, r2
 8016ba2:	005b      	lsls	r3, r3, #1
 8016ba4:	4413      	add	r3, r2
 8016ba6:	00db      	lsls	r3, r3, #3
 8016ba8:	440b      	add	r3, r1
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d00a      	beq.n	8016bc6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016bb0:	7c7a      	ldrb	r2, [r7, #17]
 8016bb2:	4913      	ldr	r1, [pc, #76]	@ (8016c00 <etharp_query+0x268>)
 8016bb4:	4613      	mov	r3, r2
 8016bb6:	005b      	lsls	r3, r3, #1
 8016bb8:	4413      	add	r3, r2
 8016bba:	00db      	lsls	r3, r3, #3
 8016bbc:	440b      	add	r3, r1
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	f7f7 f8d1 	bl	800dd68 <pbuf_free>
      }
      arp_table[i].q = p;
 8016bc6:	7c7a      	ldrb	r2, [r7, #17]
 8016bc8:	490d      	ldr	r1, [pc, #52]	@ (8016c00 <etharp_query+0x268>)
 8016bca:	4613      	mov	r3, r2
 8016bcc:	005b      	lsls	r3, r3, #1
 8016bce:	4413      	add	r3, r2
 8016bd0:	00db      	lsls	r3, r3, #3
 8016bd2:	440b      	add	r3, r1
 8016bd4:	69fa      	ldr	r2, [r7, #28]
 8016bd6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016bd8:	2300      	movs	r3, #0
 8016bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016bde:	e002      	b.n	8016be6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016be0:	23ff      	movs	r3, #255	@ 0xff
 8016be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016bea:	4618      	mov	r0, r3
 8016bec:	3728      	adds	r7, #40	@ 0x28
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}
 8016bf2:	bf00      	nop
 8016bf4:	0801bf98 	.word	0x0801bf98
 8016bf8:	0801c144 	.word	0x0801c144
 8016bfc:	0801c010 	.word	0x0801c010
 8016c00:	2400e9f8 	.word	0x2400e9f8
 8016c04:	0801c154 	.word	0x0801c154
 8016c08:	0801c138 	.word	0x0801c138
 8016c0c:	2400eae8 	.word	0x2400eae8
 8016c10:	0801c17c 	.word	0x0801c17c

08016c14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b08a      	sub	sp, #40	@ 0x28
 8016c18:	af02      	add	r7, sp, #8
 8016c1a:	60f8      	str	r0, [r7, #12]
 8016c1c:	60b9      	str	r1, [r7, #8]
 8016c1e:	607a      	str	r2, [r7, #4]
 8016c20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016c22:	2300      	movs	r3, #0
 8016c24:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d106      	bne.n	8016c3a <etharp_raw+0x26>
 8016c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8016d18 <etharp_raw+0x104>)
 8016c2e:	f240 4257 	movw	r2, #1111	@ 0x457
 8016c32:	493a      	ldr	r1, [pc, #232]	@ (8016d1c <etharp_raw+0x108>)
 8016c34:	483a      	ldr	r0, [pc, #232]	@ (8016d20 <etharp_raw+0x10c>)
 8016c36:	f001 fe81 	bl	801893c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016c3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016c3e:	211c      	movs	r1, #28
 8016c40:	200e      	movs	r0, #14
 8016c42:	f7f6 fdad 	bl	800d7a0 <pbuf_alloc>
 8016c46:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016c48:	69bb      	ldr	r3, [r7, #24]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d102      	bne.n	8016c54 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c52:	e05d      	b.n	8016d10 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016c54:	69bb      	ldr	r3, [r7, #24]
 8016c56:	895b      	ldrh	r3, [r3, #10]
 8016c58:	2b1b      	cmp	r3, #27
 8016c5a:	d806      	bhi.n	8016c6a <etharp_raw+0x56>
 8016c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8016d18 <etharp_raw+0x104>)
 8016c5e:	f240 4262 	movw	r2, #1122	@ 0x462
 8016c62:	4930      	ldr	r1, [pc, #192]	@ (8016d24 <etharp_raw+0x110>)
 8016c64:	482e      	ldr	r0, [pc, #184]	@ (8016d20 <etharp_raw+0x10c>)
 8016c66:	f001 fe69 	bl	801893c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016c6a:	69bb      	ldr	r3, [r7, #24]
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016c70:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7f5 fbc2 	bl	800c3fc <lwip_htons>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016c86:	2b06      	cmp	r3, #6
 8016c88:	d006      	beq.n	8016c98 <etharp_raw+0x84>
 8016c8a:	4b23      	ldr	r3, [pc, #140]	@ (8016d18 <etharp_raw+0x104>)
 8016c8c:	f240 4269 	movw	r2, #1129	@ 0x469
 8016c90:	4925      	ldr	r1, [pc, #148]	@ (8016d28 <etharp_raw+0x114>)
 8016c92:	4823      	ldr	r0, [pc, #140]	@ (8016d20 <etharp_raw+0x10c>)
 8016c94:	f001 fe52 	bl	801893c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	3308      	adds	r3, #8
 8016c9c:	2206      	movs	r2, #6
 8016c9e:	6839      	ldr	r1, [r7, #0]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f001 ff26 	bl	8018af2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	3312      	adds	r3, #18
 8016caa:	2206      	movs	r2, #6
 8016cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f001 ff1f 	bl	8018af2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	330e      	adds	r3, #14
 8016cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016cba:	6812      	ldr	r2, [r2, #0]
 8016cbc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016cbe:	697b      	ldr	r3, [r7, #20]
 8016cc0:	3318      	adds	r3, #24
 8016cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016cc4:	6812      	ldr	r2, [r2, #0]
 8016cc6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	701a      	strb	r2, [r3, #0]
 8016cce:	2200      	movs	r2, #0
 8016cd0:	f042 0201 	orr.w	r2, r2, #1
 8016cd4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016cd6:	697b      	ldr	r3, [r7, #20]
 8016cd8:	2200      	movs	r2, #0
 8016cda:	f042 0208 	orr.w	r2, r2, #8
 8016cde:	709a      	strb	r2, [r3, #2]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	2206      	movs	r2, #6
 8016ce8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	2204      	movs	r2, #4
 8016cee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016cf0:	f640 0306 	movw	r3, #2054	@ 0x806
 8016cf4:	9300      	str	r3, [sp, #0]
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	68ba      	ldr	r2, [r7, #8]
 8016cfa:	69b9      	ldr	r1, [r7, #24]
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f001 fbbf 	bl	8018480 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016d02:	69b8      	ldr	r0, [r7, #24]
 8016d04:	f7f7 f830 	bl	800dd68 <pbuf_free>
  p = NULL;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016d0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3720      	adds	r7, #32
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	0801bf98 	.word	0x0801bf98
 8016d1c:	0801c0e8 	.word	0x0801c0e8
 8016d20:	0801c010 	.word	0x0801c010
 8016d24:	0801c198 	.word	0x0801c198
 8016d28:	0801c1cc 	.word	0x0801c1cc

08016d2c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b088      	sub	sp, #32
 8016d30:	af04      	add	r7, sp, #16
 8016d32:	60f8      	str	r0, [r7, #12]
 8016d34:	60b9      	str	r1, [r7, #8]
 8016d36:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016d48:	2201      	movs	r2, #1
 8016d4a:	9203      	str	r2, [sp, #12]
 8016d4c:	68ba      	ldr	r2, [r7, #8]
 8016d4e:	9202      	str	r2, [sp, #8]
 8016d50:	4a06      	ldr	r2, [pc, #24]	@ (8016d6c <etharp_request_dst+0x40>)
 8016d52:	9201      	str	r2, [sp, #4]
 8016d54:	9300      	str	r3, [sp, #0]
 8016d56:	4603      	mov	r3, r0
 8016d58:	687a      	ldr	r2, [r7, #4]
 8016d5a:	68f8      	ldr	r0, [r7, #12]
 8016d5c:	f7ff ff5a 	bl	8016c14 <etharp_raw>
 8016d60:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016d62:	4618      	mov	r0, r3
 8016d64:	3710      	adds	r7, #16
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	0801c7d0 	.word	0x0801c7d0

08016d70 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b082      	sub	sp, #8
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016d7a:	4a05      	ldr	r2, [pc, #20]	@ (8016d90 <etharp_request+0x20>)
 8016d7c:	6839      	ldr	r1, [r7, #0]
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f7ff ffd4 	bl	8016d2c <etharp_request_dst>
 8016d84:	4603      	mov	r3, r0
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3708      	adds	r7, #8
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
 8016d8e:	bf00      	nop
 8016d90:	0801c7c8 	.word	0x0801c7c8

08016d94 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b08e      	sub	sp, #56	@ 0x38
 8016d98:	af04      	add	r7, sp, #16
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016d9e:	4b87      	ldr	r3, [pc, #540]	@ (8016fbc <icmp_input+0x228>)
 8016da0:	689b      	ldr	r3, [r3, #8]
 8016da2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	f003 030f 	and.w	r3, r3, #15
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	009b      	lsls	r3, r3, #2
 8016db0:	b2db      	uxtb	r3, r3
 8016db2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8016db4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016db6:	2b13      	cmp	r3, #19
 8016db8:	f240 80e8 	bls.w	8016f8c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	895b      	ldrh	r3, [r3, #10]
 8016dc0:	2b03      	cmp	r3, #3
 8016dc2:	f240 80e5 	bls.w	8016f90 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	781b      	ldrb	r3, [r3, #0]
 8016dcc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016dd0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f000 80d2 	beq.w	8016f7e <icmp_input+0x1ea>
 8016dda:	2b08      	cmp	r3, #8
 8016ddc:	f040 80d2 	bne.w	8016f84 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016de0:	4b77      	ldr	r3, [pc, #476]	@ (8016fc0 <icmp_input+0x22c>)
 8016de2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016de4:	4b75      	ldr	r3, [pc, #468]	@ (8016fbc <icmp_input+0x228>)
 8016de6:	695b      	ldr	r3, [r3, #20]
 8016de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016dec:	2be0      	cmp	r3, #224	@ 0xe0
 8016dee:	f000 80d6 	beq.w	8016f9e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016df2:	4b72      	ldr	r3, [pc, #456]	@ (8016fbc <icmp_input+0x228>)
 8016df4:	695b      	ldr	r3, [r3, #20]
 8016df6:	4a71      	ldr	r2, [pc, #452]	@ (8016fbc <icmp_input+0x228>)
 8016df8:	6812      	ldr	r2, [r2, #0]
 8016dfa:	4611      	mov	r1, r2
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f000 fc31 	bl	8017664 <ip4_addr_isbroadcast_u32>
 8016e02:	4603      	mov	r3, r0
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f040 80cc 	bne.w	8016fa2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	891b      	ldrh	r3, [r3, #8]
 8016e0e:	2b07      	cmp	r3, #7
 8016e10:	f240 80c0 	bls.w	8016f94 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f7f5 fb8e 	bl	800c536 <inet_chksum_pbuf>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d003      	beq.n	8016e28 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016e20:	6878      	ldr	r0, [r7, #4]
 8016e22:	f7f6 ffa1 	bl	800dd68 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016e26:	e0c5      	b.n	8016fb4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016e28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e2a:	330e      	adds	r3, #14
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f7f6 ff04 	bl	800dc3c <pbuf_add_header>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d04b      	beq.n	8016ed2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	891a      	ldrh	r2, [r3, #8]
 8016e3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e40:	4413      	add	r3, r2
 8016e42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	891b      	ldrh	r3, [r3, #8]
 8016e48:	8b7a      	ldrh	r2, [r7, #26]
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	f0c0 80ab 	bcc.w	8016fa6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016e50:	8b7b      	ldrh	r3, [r7, #26]
 8016e52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e56:	4619      	mov	r1, r3
 8016e58:	200e      	movs	r0, #14
 8016e5a:	f7f6 fca1 	bl	800d7a0 <pbuf_alloc>
 8016e5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016e60:	697b      	ldr	r3, [r7, #20]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	f000 80a1 	beq.w	8016faa <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	895b      	ldrh	r3, [r3, #10]
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e70:	3308      	adds	r3, #8
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d203      	bcs.n	8016e7e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016e76:	6978      	ldr	r0, [r7, #20]
 8016e78:	f7f6 ff76 	bl	800dd68 <pbuf_free>
          goto icmperr;
 8016e7c:	e096      	b.n	8016fac <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	685b      	ldr	r3, [r3, #4]
 8016e82:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016e84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016e86:	4618      	mov	r0, r3
 8016e88:	f001 fe33 	bl	8018af2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016e8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e8e:	4619      	mov	r1, r3
 8016e90:	6978      	ldr	r0, [r7, #20]
 8016e92:	f7f6 fee3 	bl	800dc5c <pbuf_remove_header>
 8016e96:	4603      	mov	r3, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d009      	beq.n	8016eb0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016e9c:	4b49      	ldr	r3, [pc, #292]	@ (8016fc4 <icmp_input+0x230>)
 8016e9e:	22b6      	movs	r2, #182	@ 0xb6
 8016ea0:	4949      	ldr	r1, [pc, #292]	@ (8016fc8 <icmp_input+0x234>)
 8016ea2:	484a      	ldr	r0, [pc, #296]	@ (8016fcc <icmp_input+0x238>)
 8016ea4:	f001 fd4a 	bl	801893c <iprintf>
          pbuf_free(r);
 8016ea8:	6978      	ldr	r0, [r7, #20]
 8016eaa:	f7f6 ff5d 	bl	800dd68 <pbuf_free>
          goto icmperr;
 8016eae:	e07d      	b.n	8016fac <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016eb0:	6879      	ldr	r1, [r7, #4]
 8016eb2:	6978      	ldr	r0, [r7, #20]
 8016eb4:	f7f7 f88c 	bl	800dfd0 <pbuf_copy>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d003      	beq.n	8016ec6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016ebe:	6978      	ldr	r0, [r7, #20]
 8016ec0:	f7f6 ff52 	bl	800dd68 <pbuf_free>
          goto icmperr;
 8016ec4:	e072      	b.n	8016fac <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f7f6 ff4e 	bl	800dd68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	607b      	str	r3, [r7, #4]
 8016ed0:	e00f      	b.n	8016ef2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016ed2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016ed4:	330e      	adds	r3, #14
 8016ed6:	4619      	mov	r1, r3
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f7f6 febf 	bl	800dc5c <pbuf_remove_header>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d006      	beq.n	8016ef2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016ee4:	4b37      	ldr	r3, [pc, #220]	@ (8016fc4 <icmp_input+0x230>)
 8016ee6:	22c7      	movs	r2, #199	@ 0xc7
 8016ee8:	4939      	ldr	r1, [pc, #228]	@ (8016fd0 <icmp_input+0x23c>)
 8016eea:	4838      	ldr	r0, [pc, #224]	@ (8016fcc <icmp_input+0x238>)
 8016eec:	f001 fd26 	bl	801893c <iprintf>
          goto icmperr;
 8016ef0:	e05c      	b.n	8016fac <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016ef8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016efa:	4619      	mov	r1, r3
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7f6 fe9d 	bl	800dc3c <pbuf_add_header>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d13c      	bne.n	8016f82 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016f0e:	69fb      	ldr	r3, [r7, #28]
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016f16:	4b29      	ldr	r3, [pc, #164]	@ (8016fbc <icmp_input+0x228>)
 8016f18:	691a      	ldr	r2, [r3, #16]
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	2200      	movs	r2, #0
 8016f22:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	885b      	ldrh	r3, [r3, #2]
 8016f28:	b29b      	uxth	r3, r3
 8016f2a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016f2e:	4293      	cmp	r3, r2
 8016f30:	d907      	bls.n	8016f42 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8016f32:	693b      	ldr	r3, [r7, #16]
 8016f34:	885b      	ldrh	r3, [r3, #2]
 8016f36:	b29b      	uxth	r3, r3
 8016f38:	3309      	adds	r3, #9
 8016f3a:	b29a      	uxth	r2, r3
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	805a      	strh	r2, [r3, #2]
 8016f40:	e006      	b.n	8016f50 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8016f42:	693b      	ldr	r3, [r7, #16]
 8016f44:	885b      	ldrh	r3, [r3, #2]
 8016f46:	b29b      	uxth	r3, r3
 8016f48:	3308      	adds	r3, #8
 8016f4a:	b29a      	uxth	r2, r3
 8016f4c:	693b      	ldr	r3, [r7, #16]
 8016f4e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	22ff      	movs	r2, #255	@ 0xff
 8016f54:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	729a      	strb	r2, [r3, #10]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	9302      	str	r3, [sp, #8]
 8016f64:	2301      	movs	r3, #1
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	2300      	movs	r3, #0
 8016f6a:	9300      	str	r3, [sp, #0]
 8016f6c:	23ff      	movs	r3, #255	@ 0xff
 8016f6e:	2200      	movs	r2, #0
 8016f70:	69f9      	ldr	r1, [r7, #28]
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f000 fa9e 	bl	80174b4 <ip4_output_if>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016f7c:	e001      	b.n	8016f82 <icmp_input+0x1ee>
      break;
 8016f7e:	bf00      	nop
 8016f80:	e000      	b.n	8016f84 <icmp_input+0x1f0>
      break;
 8016f82:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f7f6 feef 	bl	800dd68 <pbuf_free>
  return;
 8016f8a:	e013      	b.n	8016fb4 <icmp_input+0x220>
    goto lenerr;
 8016f8c:	bf00      	nop
 8016f8e:	e002      	b.n	8016f96 <icmp_input+0x202>
    goto lenerr;
 8016f90:	bf00      	nop
 8016f92:	e000      	b.n	8016f96 <icmp_input+0x202>
        goto lenerr;
 8016f94:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f7f6 fee6 	bl	800dd68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016f9c:	e00a      	b.n	8016fb4 <icmp_input+0x220>
        goto icmperr;
 8016f9e:	bf00      	nop
 8016fa0:	e004      	b.n	8016fac <icmp_input+0x218>
        goto icmperr;
 8016fa2:	bf00      	nop
 8016fa4:	e002      	b.n	8016fac <icmp_input+0x218>
          goto icmperr;
 8016fa6:	bf00      	nop
 8016fa8:	e000      	b.n	8016fac <icmp_input+0x218>
          goto icmperr;
 8016faa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f7f6 fedb 	bl	800dd68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016fb2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016fb4:	3728      	adds	r7, #40	@ 0x28
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	2400b844 	.word	0x2400b844
 8016fc0:	2400b858 	.word	0x2400b858
 8016fc4:	0801c210 	.word	0x0801c210
 8016fc8:	0801c248 	.word	0x0801c248
 8016fcc:	0801c280 	.word	0x0801c280
 8016fd0:	0801c2a8 	.word	0x0801c2a8

08016fd4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
 8016fdc:	460b      	mov	r3, r1
 8016fde:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016fe0:	78fb      	ldrb	r3, [r7, #3]
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	2103      	movs	r1, #3
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f000 f814 	bl	8017014 <icmp_send_response>
}
 8016fec:	bf00      	nop
 8016fee:	3708      	adds	r7, #8
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	460b      	mov	r3, r1
 8016ffe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017000:	78fb      	ldrb	r3, [r7, #3]
 8017002:	461a      	mov	r2, r3
 8017004:	210b      	movs	r1, #11
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	f000 f804 	bl	8017014 <icmp_send_response>
}
 801700c:	bf00      	nop
 801700e:	3708      	adds	r7, #8
 8017010:	46bd      	mov	sp, r7
 8017012:	bd80      	pop	{r7, pc}

08017014 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b08c      	sub	sp, #48	@ 0x30
 8017018:	af04      	add	r7, sp, #16
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	460b      	mov	r3, r1
 801701e:	70fb      	strb	r3, [r7, #3]
 8017020:	4613      	mov	r3, r2
 8017022:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017024:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017028:	2124      	movs	r1, #36	@ 0x24
 801702a:	2022      	movs	r0, #34	@ 0x22
 801702c:	f7f6 fbb8 	bl	800d7a0 <pbuf_alloc>
 8017030:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d056      	beq.n	80170e6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	895b      	ldrh	r3, [r3, #10]
 801703c:	2b23      	cmp	r3, #35	@ 0x23
 801703e:	d806      	bhi.n	801704e <icmp_send_response+0x3a>
 8017040:	4b2b      	ldr	r3, [pc, #172]	@ (80170f0 <icmp_send_response+0xdc>)
 8017042:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017046:	492b      	ldr	r1, [pc, #172]	@ (80170f4 <icmp_send_response+0xe0>)
 8017048:	482b      	ldr	r0, [pc, #172]	@ (80170f8 <icmp_send_response+0xe4>)
 801704a:	f001 fc77 	bl	801893c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	78fa      	ldrb	r2, [r7, #3]
 801705e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017060:	697b      	ldr	r3, [r7, #20]
 8017062:	78ba      	ldrb	r2, [r7, #2]
 8017064:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	2200      	movs	r2, #0
 801706a:	711a      	strb	r2, [r3, #4]
 801706c:	2200      	movs	r2, #0
 801706e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	2200      	movs	r2, #0
 8017074:	719a      	strb	r2, [r3, #6]
 8017076:	2200      	movs	r2, #0
 8017078:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801707a:	69fb      	ldr	r3, [r7, #28]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	f103 0008 	add.w	r0, r3, #8
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	221c      	movs	r2, #28
 8017088:	4619      	mov	r1, r3
 801708a:	f001 fd32 	bl	8018af2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801708e:	69bb      	ldr	r3, [r7, #24]
 8017090:	68db      	ldr	r3, [r3, #12]
 8017092:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017094:	f107 030c 	add.w	r3, r7, #12
 8017098:	4618      	mov	r0, r3
 801709a:	f000 f82f 	bl	80170fc <ip4_route>
 801709e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80170a0:	693b      	ldr	r3, [r7, #16]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d01b      	beq.n	80170de <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80170a6:	697b      	ldr	r3, [r7, #20]
 80170a8:	2200      	movs	r2, #0
 80170aa:	709a      	strb	r2, [r3, #2]
 80170ac:	2200      	movs	r2, #0
 80170ae:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	895b      	ldrh	r3, [r3, #10]
 80170b4:	4619      	mov	r1, r3
 80170b6:	6978      	ldr	r0, [r7, #20]
 80170b8:	f7f5 fa2b 	bl	800c512 <inet_chksum>
 80170bc:	4603      	mov	r3, r0
 80170be:	461a      	mov	r2, r3
 80170c0:	697b      	ldr	r3, [r7, #20]
 80170c2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80170c4:	f107 020c 	add.w	r2, r7, #12
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	9302      	str	r3, [sp, #8]
 80170cc:	2301      	movs	r3, #1
 80170ce:	9301      	str	r3, [sp, #4]
 80170d0:	2300      	movs	r3, #0
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	23ff      	movs	r3, #255	@ 0xff
 80170d6:	2100      	movs	r1, #0
 80170d8:	69f8      	ldr	r0, [r7, #28]
 80170da:	f000 f9eb 	bl	80174b4 <ip4_output_if>
  }
  pbuf_free(q);
 80170de:	69f8      	ldr	r0, [r7, #28]
 80170e0:	f7f6 fe42 	bl	800dd68 <pbuf_free>
 80170e4:	e000      	b.n	80170e8 <icmp_send_response+0xd4>
    return;
 80170e6:	bf00      	nop
}
 80170e8:	3720      	adds	r7, #32
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	0801c210 	.word	0x0801c210
 80170f4:	0801c2dc 	.word	0x0801c2dc
 80170f8:	0801c280 	.word	0x0801c280

080170fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80170fc:	b480      	push	{r7}
 80170fe:	b085      	sub	sp, #20
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017104:	4b33      	ldr	r3, [pc, #204]	@ (80171d4 <ip4_route+0xd8>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	60fb      	str	r3, [r7, #12]
 801710a:	e036      	b.n	801717a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017112:	f003 0301 	and.w	r3, r3, #1
 8017116:	b2db      	uxtb	r3, r3
 8017118:	2b00      	cmp	r3, #0
 801711a:	d02b      	beq.n	8017174 <ip4_route+0x78>
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017122:	089b      	lsrs	r3, r3, #2
 8017124:	f003 0301 	and.w	r3, r3, #1
 8017128:	b2db      	uxtb	r3, r3
 801712a:	2b00      	cmp	r3, #0
 801712c:	d022      	beq.n	8017174 <ip4_route+0x78>
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	3304      	adds	r3, #4
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d01d      	beq.n	8017174 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681a      	ldr	r2, [r3, #0]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	3304      	adds	r3, #4
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	405a      	eors	r2, r3
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	3308      	adds	r3, #8
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	4013      	ands	r3, r2
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	e038      	b.n	80171c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801715a:	f003 0302 	and.w	r3, r3, #2
 801715e:	2b00      	cmp	r3, #0
 8017160:	d108      	bne.n	8017174 <ip4_route+0x78>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	681a      	ldr	r2, [r3, #0]
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	330c      	adds	r3, #12
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	429a      	cmp	r2, r3
 801716e:	d101      	bne.n	8017174 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	e028      	b.n	80171c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	60fb      	str	r3, [r7, #12]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d1c5      	bne.n	801710c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017180:	4b15      	ldr	r3, [pc, #84]	@ (80171d8 <ip4_route+0xdc>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d01a      	beq.n	80171be <ip4_route+0xc2>
 8017188:	4b13      	ldr	r3, [pc, #76]	@ (80171d8 <ip4_route+0xdc>)
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017190:	f003 0301 	and.w	r3, r3, #1
 8017194:	2b00      	cmp	r3, #0
 8017196:	d012      	beq.n	80171be <ip4_route+0xc2>
 8017198:	4b0f      	ldr	r3, [pc, #60]	@ (80171d8 <ip4_route+0xdc>)
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80171a0:	f003 0304 	and.w	r3, r3, #4
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d00a      	beq.n	80171be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80171a8:	4b0b      	ldr	r3, [pc, #44]	@ (80171d8 <ip4_route+0xdc>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	3304      	adds	r3, #4
 80171ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d004      	beq.n	80171be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	b2db      	uxtb	r3, r3
 80171ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80171bc:	d101      	bne.n	80171c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80171be:	2300      	movs	r3, #0
 80171c0:	e001      	b.n	80171c6 <ip4_route+0xca>
  }

  return netif_default;
 80171c2:	4b05      	ldr	r3, [pc, #20]	@ (80171d8 <ip4_route+0xdc>)
 80171c4:	681b      	ldr	r3, [r3, #0]
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3714      	adds	r7, #20
 80171ca:	46bd      	mov	sp, r7
 80171cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop
 80171d4:	2400e958 	.word	0x2400e958
 80171d8:	2400e95c 	.word	0x2400e95c

080171dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b082      	sub	sp, #8
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80171ea:	f003 0301 	and.w	r3, r3, #1
 80171ee:	b2db      	uxtb	r3, r3
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d016      	beq.n	8017222 <ip4_input_accept+0x46>
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	3304      	adds	r3, #4
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d011      	beq.n	8017222 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80171fe:	4b0b      	ldr	r3, [pc, #44]	@ (801722c <ip4_input_accept+0x50>)
 8017200:	695a      	ldr	r2, [r3, #20]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	3304      	adds	r3, #4
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	429a      	cmp	r2, r3
 801720a:	d008      	beq.n	801721e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801720c:	4b07      	ldr	r3, [pc, #28]	@ (801722c <ip4_input_accept+0x50>)
 801720e:	695b      	ldr	r3, [r3, #20]
 8017210:	6879      	ldr	r1, [r7, #4]
 8017212:	4618      	mov	r0, r3
 8017214:	f000 fa26 	bl	8017664 <ip4_addr_isbroadcast_u32>
 8017218:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801721a:	2b00      	cmp	r3, #0
 801721c:	d001      	beq.n	8017222 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801721e:	2301      	movs	r3, #1
 8017220:	e000      	b.n	8017224 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017222:	2300      	movs	r3, #0
}
 8017224:	4618      	mov	r0, r3
 8017226:	3708      	adds	r7, #8
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}
 801722c:	2400b844 	.word	0x2400b844

08017230 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b088      	sub	sp, #32
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
 8017238:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801723a:	2301      	movs	r3, #1
 801723c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	685b      	ldr	r3, [r3, #4]
 8017242:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017244:	69fb      	ldr	r3, [r7, #28]
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	091b      	lsrs	r3, r3, #4
 801724a:	b2db      	uxtb	r3, r3
 801724c:	2b04      	cmp	r3, #4
 801724e:	d004      	beq.n	801725a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f7f6 fd89 	bl	800dd68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017256:	2300      	movs	r3, #0
 8017258:	e123      	b.n	80174a2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801725a:	69fb      	ldr	r3, [r7, #28]
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	f003 030f 	and.w	r3, r3, #15
 8017262:	b2db      	uxtb	r3, r3
 8017264:	009b      	lsls	r3, r3, #2
 8017266:	b2db      	uxtb	r3, r3
 8017268:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	885b      	ldrh	r3, [r3, #2]
 801726e:	b29b      	uxth	r3, r3
 8017270:	4618      	mov	r0, r3
 8017272:	f7f5 f8c3 	bl	800c3fc <lwip_htons>
 8017276:	4603      	mov	r3, r0
 8017278:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	891b      	ldrh	r3, [r3, #8]
 801727e:	8a3a      	ldrh	r2, [r7, #16]
 8017280:	429a      	cmp	r2, r3
 8017282:	d204      	bcs.n	801728e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017284:	8a3b      	ldrh	r3, [r7, #16]
 8017286:	4619      	mov	r1, r3
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f7f6 fbe7 	bl	800da5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	895b      	ldrh	r3, [r3, #10]
 8017292:	8a7a      	ldrh	r2, [r7, #18]
 8017294:	429a      	cmp	r2, r3
 8017296:	d807      	bhi.n	80172a8 <ip4_input+0x78>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	891b      	ldrh	r3, [r3, #8]
 801729c:	8a3a      	ldrh	r2, [r7, #16]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d802      	bhi.n	80172a8 <ip4_input+0x78>
 80172a2:	8a7b      	ldrh	r3, [r7, #18]
 80172a4:	2b13      	cmp	r3, #19
 80172a6:	d804      	bhi.n	80172b2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f7f6 fd5d 	bl	800dd68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80172ae:	2300      	movs	r3, #0
 80172b0:	e0f7      	b.n	80174a2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	691b      	ldr	r3, [r3, #16]
 80172b6:	4a7d      	ldr	r2, [pc, #500]	@ (80174ac <ip4_input+0x27c>)
 80172b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80172ba:	69fb      	ldr	r3, [r7, #28]
 80172bc:	68db      	ldr	r3, [r3, #12]
 80172be:	4a7b      	ldr	r2, [pc, #492]	@ (80174ac <ip4_input+0x27c>)
 80172c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80172c2:	4b7a      	ldr	r3, [pc, #488]	@ (80174ac <ip4_input+0x27c>)
 80172c4:	695b      	ldr	r3, [r3, #20]
 80172c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172ca:	2be0      	cmp	r3, #224	@ 0xe0
 80172cc:	d112      	bne.n	80172f4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80172d4:	f003 0301 	and.w	r3, r3, #1
 80172d8:	b2db      	uxtb	r3, r3
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d007      	beq.n	80172ee <ip4_input+0xbe>
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	3304      	adds	r3, #4
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d002      	beq.n	80172ee <ip4_input+0xbe>
      netif = inp;
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	61bb      	str	r3, [r7, #24]
 80172ec:	e02a      	b.n	8017344 <ip4_input+0x114>
    } else {
      netif = NULL;
 80172ee:	2300      	movs	r3, #0
 80172f0:	61bb      	str	r3, [r7, #24]
 80172f2:	e027      	b.n	8017344 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80172f4:	6838      	ldr	r0, [r7, #0]
 80172f6:	f7ff ff71 	bl	80171dc <ip4_input_accept>
 80172fa:	4603      	mov	r3, r0
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d002      	beq.n	8017306 <ip4_input+0xd6>
      netif = inp;
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	61bb      	str	r3, [r7, #24]
 8017304:	e01e      	b.n	8017344 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017306:	2300      	movs	r3, #0
 8017308:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801730a:	4b68      	ldr	r3, [pc, #416]	@ (80174ac <ip4_input+0x27c>)
 801730c:	695b      	ldr	r3, [r3, #20]
 801730e:	b2db      	uxtb	r3, r3
 8017310:	2b7f      	cmp	r3, #127	@ 0x7f
 8017312:	d017      	beq.n	8017344 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017314:	4b66      	ldr	r3, [pc, #408]	@ (80174b0 <ip4_input+0x280>)
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	61bb      	str	r3, [r7, #24]
 801731a:	e00e      	b.n	801733a <ip4_input+0x10a>
          if (netif == inp) {
 801731c:	69ba      	ldr	r2, [r7, #24]
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	429a      	cmp	r2, r3
 8017322:	d006      	beq.n	8017332 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017324:	69b8      	ldr	r0, [r7, #24]
 8017326:	f7ff ff59 	bl	80171dc <ip4_input_accept>
 801732a:	4603      	mov	r3, r0
 801732c:	2b00      	cmp	r3, #0
 801732e:	d108      	bne.n	8017342 <ip4_input+0x112>
 8017330:	e000      	b.n	8017334 <ip4_input+0x104>
            continue;
 8017332:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017334:	69bb      	ldr	r3, [r7, #24]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	61bb      	str	r3, [r7, #24]
 801733a:	69bb      	ldr	r3, [r7, #24]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d1ed      	bne.n	801731c <ip4_input+0xec>
 8017340:	e000      	b.n	8017344 <ip4_input+0x114>
            break;
 8017342:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017344:	69bb      	ldr	r3, [r7, #24]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d111      	bne.n	801736e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801734a:	69fb      	ldr	r3, [r7, #28]
 801734c:	7a5b      	ldrb	r3, [r3, #9]
 801734e:	2b11      	cmp	r3, #17
 8017350:	d10d      	bne.n	801736e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017352:	8a7b      	ldrh	r3, [r7, #18]
 8017354:	69fa      	ldr	r2, [r7, #28]
 8017356:	4413      	add	r3, r2
 8017358:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	885b      	ldrh	r3, [r3, #2]
 801735e:	b29b      	uxth	r3, r3
 8017360:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8017364:	d103      	bne.n	801736e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801736a:	2300      	movs	r3, #0
 801736c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801736e:	697b      	ldr	r3, [r7, #20]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d017      	beq.n	80173a4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017374:	4b4d      	ldr	r3, [pc, #308]	@ (80174ac <ip4_input+0x27c>)
 8017376:	691b      	ldr	r3, [r3, #16]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d013      	beq.n	80173a4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801737c:	4b4b      	ldr	r3, [pc, #300]	@ (80174ac <ip4_input+0x27c>)
 801737e:	691b      	ldr	r3, [r3, #16]
 8017380:	6839      	ldr	r1, [r7, #0]
 8017382:	4618      	mov	r0, r3
 8017384:	f000 f96e 	bl	8017664 <ip4_addr_isbroadcast_u32>
 8017388:	4603      	mov	r3, r0
 801738a:	2b00      	cmp	r3, #0
 801738c:	d105      	bne.n	801739a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801738e:	4b47      	ldr	r3, [pc, #284]	@ (80174ac <ip4_input+0x27c>)
 8017390:	691b      	ldr	r3, [r3, #16]
 8017392:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017396:	2be0      	cmp	r3, #224	@ 0xe0
 8017398:	d104      	bne.n	80173a4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f7f6 fce4 	bl	800dd68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80173a0:	2300      	movs	r3, #0
 80173a2:	e07e      	b.n	80174a2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80173a4:	69bb      	ldr	r3, [r7, #24]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d104      	bne.n	80173b4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f7f6 fcdc 	bl	800dd68 <pbuf_free>
    return ERR_OK;
 80173b0:	2300      	movs	r3, #0
 80173b2:	e076      	b.n	80174a2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80173b4:	69fb      	ldr	r3, [r7, #28]
 80173b6:	88db      	ldrh	r3, [r3, #6]
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	461a      	mov	r2, r3
 80173bc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80173c0:	4013      	ands	r3, r2
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d00b      	beq.n	80173de <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f000 fc92 	bl	8017cf0 <ip4_reass>
 80173cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d101      	bne.n	80173d8 <ip4_input+0x1a8>
      return ERR_OK;
 80173d4:	2300      	movs	r3, #0
 80173d6:	e064      	b.n	80174a2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80173de:	4a33      	ldr	r2, [pc, #204]	@ (80174ac <ip4_input+0x27c>)
 80173e0:	69bb      	ldr	r3, [r7, #24]
 80173e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80173e4:	4a31      	ldr	r2, [pc, #196]	@ (80174ac <ip4_input+0x27c>)
 80173e6:	683b      	ldr	r3, [r7, #0]
 80173e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80173ea:	4a30      	ldr	r2, [pc, #192]	@ (80174ac <ip4_input+0x27c>)
 80173ec:	69fb      	ldr	r3, [r7, #28]
 80173ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	781b      	ldrb	r3, [r3, #0]
 80173f4:	f003 030f 	and.w	r3, r3, #15
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	009b      	lsls	r3, r3, #2
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	461a      	mov	r2, r3
 8017400:	4b2a      	ldr	r3, [pc, #168]	@ (80174ac <ip4_input+0x27c>)
 8017402:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017404:	8a7b      	ldrh	r3, [r7, #18]
 8017406:	4619      	mov	r1, r3
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f7f6 fc27 	bl	800dc5c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	7a5b      	ldrb	r3, [r3, #9]
 8017412:	2b11      	cmp	r3, #17
 8017414:	d006      	beq.n	8017424 <ip4_input+0x1f4>
 8017416:	2b11      	cmp	r3, #17
 8017418:	dc13      	bgt.n	8017442 <ip4_input+0x212>
 801741a:	2b01      	cmp	r3, #1
 801741c:	d00c      	beq.n	8017438 <ip4_input+0x208>
 801741e:	2b06      	cmp	r3, #6
 8017420:	d005      	beq.n	801742e <ip4_input+0x1fe>
 8017422:	e00e      	b.n	8017442 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017424:	6839      	ldr	r1, [r7, #0]
 8017426:	6878      	ldr	r0, [r7, #4]
 8017428:	f7fc fac8 	bl	80139bc <udp_input>
        break;
 801742c:	e026      	b.n	801747c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801742e:	6839      	ldr	r1, [r7, #0]
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f7f8 fadf 	bl	800f9f4 <tcp_input>
        break;
 8017436:	e021      	b.n	801747c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017438:	6839      	ldr	r1, [r7, #0]
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f7ff fcaa 	bl	8016d94 <icmp_input>
        break;
 8017440:	e01c      	b.n	801747c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017442:	4b1a      	ldr	r3, [pc, #104]	@ (80174ac <ip4_input+0x27c>)
 8017444:	695b      	ldr	r3, [r3, #20]
 8017446:	69b9      	ldr	r1, [r7, #24]
 8017448:	4618      	mov	r0, r3
 801744a:	f000 f90b 	bl	8017664 <ip4_addr_isbroadcast_u32>
 801744e:	4603      	mov	r3, r0
 8017450:	2b00      	cmp	r3, #0
 8017452:	d10f      	bne.n	8017474 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017454:	4b15      	ldr	r3, [pc, #84]	@ (80174ac <ip4_input+0x27c>)
 8017456:	695b      	ldr	r3, [r3, #20]
 8017458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801745c:	2be0      	cmp	r3, #224	@ 0xe0
 801745e:	d009      	beq.n	8017474 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017460:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017464:	4619      	mov	r1, r3
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7f6 fc6b 	bl	800dd42 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801746c:	2102      	movs	r1, #2
 801746e:	6878      	ldr	r0, [r7, #4]
 8017470:	f7ff fdb0 	bl	8016fd4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017474:	6878      	ldr	r0, [r7, #4]
 8017476:	f7f6 fc77 	bl	800dd68 <pbuf_free>
        break;
 801747a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801747c:	4b0b      	ldr	r3, [pc, #44]	@ (80174ac <ip4_input+0x27c>)
 801747e:	2200      	movs	r2, #0
 8017480:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017482:	4b0a      	ldr	r3, [pc, #40]	@ (80174ac <ip4_input+0x27c>)
 8017484:	2200      	movs	r2, #0
 8017486:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017488:	4b08      	ldr	r3, [pc, #32]	@ (80174ac <ip4_input+0x27c>)
 801748a:	2200      	movs	r2, #0
 801748c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801748e:	4b07      	ldr	r3, [pc, #28]	@ (80174ac <ip4_input+0x27c>)
 8017490:	2200      	movs	r2, #0
 8017492:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017494:	4b05      	ldr	r3, [pc, #20]	@ (80174ac <ip4_input+0x27c>)
 8017496:	2200      	movs	r2, #0
 8017498:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801749a:	4b04      	ldr	r3, [pc, #16]	@ (80174ac <ip4_input+0x27c>)
 801749c:	2200      	movs	r2, #0
 801749e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80174a0:	2300      	movs	r3, #0
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3720      	adds	r7, #32
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	2400b844 	.word	0x2400b844
 80174b0:	2400e958 	.word	0x2400e958

080174b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b08a      	sub	sp, #40	@ 0x28
 80174b8:	af04      	add	r7, sp, #16
 80174ba:	60f8      	str	r0, [r7, #12]
 80174bc:	60b9      	str	r1, [r7, #8]
 80174be:	607a      	str	r2, [r7, #4]
 80174c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d009      	beq.n	80174e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d003      	beq.n	80174da <ip4_output_if+0x26>
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d102      	bne.n	80174e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80174da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174dc:	3304      	adds	r3, #4
 80174de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80174e0:	78fa      	ldrb	r2, [r7, #3]
 80174e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e4:	9302      	str	r3, [sp, #8]
 80174e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80174ea:	9301      	str	r3, [sp, #4]
 80174ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80174f0:	9300      	str	r3, [sp, #0]
 80174f2:	4613      	mov	r3, r2
 80174f4:	687a      	ldr	r2, [r7, #4]
 80174f6:	6979      	ldr	r1, [r7, #20]
 80174f8:	68f8      	ldr	r0, [r7, #12]
 80174fa:	f000 f805 	bl	8017508 <ip4_output_if_src>
 80174fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017500:	4618      	mov	r0, r3
 8017502:	3718      	adds	r7, #24
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b088      	sub	sp, #32
 801750c:	af00      	add	r7, sp, #0
 801750e:	60f8      	str	r0, [r7, #12]
 8017510:	60b9      	str	r1, [r7, #8]
 8017512:	607a      	str	r2, [r7, #4]
 8017514:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	7b9b      	ldrb	r3, [r3, #14]
 801751a:	2b01      	cmp	r3, #1
 801751c:	d006      	beq.n	801752c <ip4_output_if_src+0x24>
 801751e:	4b4b      	ldr	r3, [pc, #300]	@ (801764c <ip4_output_if_src+0x144>)
 8017520:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017524:	494a      	ldr	r1, [pc, #296]	@ (8017650 <ip4_output_if_src+0x148>)
 8017526:	484b      	ldr	r0, [pc, #300]	@ (8017654 <ip4_output_if_src+0x14c>)
 8017528:	f001 fa08 	bl	801893c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d060      	beq.n	80175f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017532:	2314      	movs	r3, #20
 8017534:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017536:	2114      	movs	r1, #20
 8017538:	68f8      	ldr	r0, [r7, #12]
 801753a:	f7f6 fb7f 	bl	800dc3c <pbuf_add_header>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d002      	beq.n	801754a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017544:	f06f 0301 	mvn.w	r3, #1
 8017548:	e07c      	b.n	8017644 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	895b      	ldrh	r3, [r3, #10]
 8017554:	2b13      	cmp	r3, #19
 8017556:	d806      	bhi.n	8017566 <ip4_output_if_src+0x5e>
 8017558:	4b3c      	ldr	r3, [pc, #240]	@ (801764c <ip4_output_if_src+0x144>)
 801755a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801755e:	493e      	ldr	r1, [pc, #248]	@ (8017658 <ip4_output_if_src+0x150>)
 8017560:	483c      	ldr	r0, [pc, #240]	@ (8017654 <ip4_output_if_src+0x14c>)
 8017562:	f001 f9eb 	bl	801893c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017566:	69fb      	ldr	r3, [r7, #28]
 8017568:	78fa      	ldrb	r2, [r7, #3]
 801756a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801756c:	69fb      	ldr	r3, [r7, #28]
 801756e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017572:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801757c:	8b7b      	ldrh	r3, [r7, #26]
 801757e:	089b      	lsrs	r3, r3, #2
 8017580:	b29b      	uxth	r3, r3
 8017582:	b2db      	uxtb	r3, r3
 8017584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017588:	b2da      	uxtb	r2, r3
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801758e:	69fb      	ldr	r3, [r7, #28]
 8017590:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017594:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	891b      	ldrh	r3, [r3, #8]
 801759a:	4618      	mov	r0, r3
 801759c:	f7f4 ff2e 	bl	800c3fc <lwip_htons>
 80175a0:	4603      	mov	r3, r0
 80175a2:	461a      	mov	r2, r3
 80175a4:	69fb      	ldr	r3, [r7, #28]
 80175a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80175a8:	69fb      	ldr	r3, [r7, #28]
 80175aa:	2200      	movs	r2, #0
 80175ac:	719a      	strb	r2, [r3, #6]
 80175ae:	2200      	movs	r2, #0
 80175b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80175b2:	4b2a      	ldr	r3, [pc, #168]	@ (801765c <ip4_output_if_src+0x154>)
 80175b4:	881b      	ldrh	r3, [r3, #0]
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7f4 ff20 	bl	800c3fc <lwip_htons>
 80175bc:	4603      	mov	r3, r0
 80175be:	461a      	mov	r2, r3
 80175c0:	69fb      	ldr	r3, [r7, #28]
 80175c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80175c4:	4b25      	ldr	r3, [pc, #148]	@ (801765c <ip4_output_if_src+0x154>)
 80175c6:	881b      	ldrh	r3, [r3, #0]
 80175c8:	3301      	adds	r3, #1
 80175ca:	b29a      	uxth	r2, r3
 80175cc:	4b23      	ldr	r3, [pc, #140]	@ (801765c <ip4_output_if_src+0x154>)
 80175ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d104      	bne.n	80175e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80175d6:	4b22      	ldr	r3, [pc, #136]	@ (8017660 <ip4_output_if_src+0x158>)
 80175d8:	681a      	ldr	r2, [r3, #0]
 80175da:	69fb      	ldr	r3, [r7, #28]
 80175dc:	60da      	str	r2, [r3, #12]
 80175de:	e003      	b.n	80175e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	681a      	ldr	r2, [r3, #0]
 80175e4:	69fb      	ldr	r3, [r7, #28]
 80175e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80175e8:	69fb      	ldr	r3, [r7, #28]
 80175ea:	2200      	movs	r2, #0
 80175ec:	729a      	strb	r2, [r3, #10]
 80175ee:	2200      	movs	r2, #0
 80175f0:	72da      	strb	r2, [r3, #11]
 80175f2:	e00f      	b.n	8017614 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	895b      	ldrh	r3, [r3, #10]
 80175f8:	2b13      	cmp	r3, #19
 80175fa:	d802      	bhi.n	8017602 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80175fc:	f06f 0301 	mvn.w	r3, #1
 8017600:	e020      	b.n	8017644 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017608:	69fb      	ldr	r3, [r7, #28]
 801760a:	691b      	ldr	r3, [r3, #16]
 801760c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801760e:	f107 0314 	add.w	r3, r7, #20
 8017612:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017618:	2b00      	cmp	r3, #0
 801761a:	d00c      	beq.n	8017636 <ip4_output_if_src+0x12e>
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	891a      	ldrh	r2, [r3, #8]
 8017620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017624:	429a      	cmp	r2, r3
 8017626:	d906      	bls.n	8017636 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017628:	687a      	ldr	r2, [r7, #4]
 801762a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801762c:	68f8      	ldr	r0, [r7, #12]
 801762e:	f000 fd53 	bl	80180d8 <ip4_frag>
 8017632:	4603      	mov	r3, r0
 8017634:	e006      	b.n	8017644 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017638:	695b      	ldr	r3, [r3, #20]
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	68f9      	ldr	r1, [r7, #12]
 801763e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017640:	4798      	blx	r3
 8017642:	4603      	mov	r3, r0
}
 8017644:	4618      	mov	r0, r3
 8017646:	3720      	adds	r7, #32
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	0801c308 	.word	0x0801c308
 8017650:	0801c33c 	.word	0x0801c33c
 8017654:	0801c348 	.word	0x0801c348
 8017658:	0801c370 	.word	0x0801c370
 801765c:	2400eaea 	.word	0x2400eaea
 8017660:	0801c7c0 	.word	0x0801c7c0

08017664 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017664:	b480      	push	{r7}
 8017666:	b085      	sub	sp, #20
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017678:	d002      	beq.n	8017680 <ip4_addr_isbroadcast_u32+0x1c>
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d101      	bne.n	8017684 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017680:	2301      	movs	r3, #1
 8017682:	e02a      	b.n	80176da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801768a:	f003 0302 	and.w	r3, r3, #2
 801768e:	2b00      	cmp	r3, #0
 8017690:	d101      	bne.n	8017696 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017692:	2300      	movs	r3, #0
 8017694:	e021      	b.n	80176da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	3304      	adds	r3, #4
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	429a      	cmp	r2, r3
 80176a0:	d101      	bne.n	80176a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80176a2:	2300      	movs	r3, #0
 80176a4:	e019      	b.n	80176da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80176a6:	68fa      	ldr	r2, [r7, #12]
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	3304      	adds	r3, #4
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	405a      	eors	r2, r3
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	3308      	adds	r3, #8
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	4013      	ands	r3, r2
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d10d      	bne.n	80176d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	3308      	adds	r3, #8
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	43da      	mvns	r2, r3
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80176c8:	683b      	ldr	r3, [r7, #0]
 80176ca:	3308      	adds	r3, #8
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80176d0:	429a      	cmp	r2, r3
 80176d2:	d101      	bne.n	80176d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80176d4:	2301      	movs	r3, #1
 80176d6:	e000      	b.n	80176da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80176d8:	2300      	movs	r3, #0
  }
}
 80176da:	4618      	mov	r0, r3
 80176dc:	3714      	adds	r7, #20
 80176de:	46bd      	mov	sp, r7
 80176e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e4:	4770      	bx	lr
	...

080176e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80176ee:	2300      	movs	r3, #0
 80176f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80176f2:	4b12      	ldr	r3, [pc, #72]	@ (801773c <ip_reass_tmr+0x54>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80176f8:	e018      	b.n	801772c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	7fdb      	ldrb	r3, [r3, #31]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d00b      	beq.n	801771a <ip_reass_tmr+0x32>
      r->timer--;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	7fdb      	ldrb	r3, [r3, #31]
 8017706:	3b01      	subs	r3, #1
 8017708:	b2da      	uxtb	r2, r3
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	60fb      	str	r3, [r7, #12]
 8017718:	e008      	b.n	801772c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017724:	68b9      	ldr	r1, [r7, #8]
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f000 f80a 	bl	8017740 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d1e3      	bne.n	80176fa <ip_reass_tmr+0x12>
    }
  }
}
 8017732:	bf00      	nop
 8017734:	bf00      	nop
 8017736:	3710      	adds	r7, #16
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}
 801773c:	2400eaec 	.word	0x2400eaec

08017740 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b088      	sub	sp, #32
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801774a:	2300      	movs	r3, #0
 801774c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801774e:	683a      	ldr	r2, [r7, #0]
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	429a      	cmp	r2, r3
 8017754:	d105      	bne.n	8017762 <ip_reass_free_complete_datagram+0x22>
 8017756:	4b45      	ldr	r3, [pc, #276]	@ (801786c <ip_reass_free_complete_datagram+0x12c>)
 8017758:	22ab      	movs	r2, #171	@ 0xab
 801775a:	4945      	ldr	r1, [pc, #276]	@ (8017870 <ip_reass_free_complete_datagram+0x130>)
 801775c:	4845      	ldr	r0, [pc, #276]	@ (8017874 <ip_reass_free_complete_datagram+0x134>)
 801775e:	f001 f8ed 	bl	801893c <iprintf>
  if (prev != NULL) {
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00a      	beq.n	801777e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	429a      	cmp	r2, r3
 8017770:	d005      	beq.n	801777e <ip_reass_free_complete_datagram+0x3e>
 8017772:	4b3e      	ldr	r3, [pc, #248]	@ (801786c <ip_reass_free_complete_datagram+0x12c>)
 8017774:	22ad      	movs	r2, #173	@ 0xad
 8017776:	4940      	ldr	r1, [pc, #256]	@ (8017878 <ip_reass_free_complete_datagram+0x138>)
 8017778:	483e      	ldr	r0, [pc, #248]	@ (8017874 <ip_reass_free_complete_datagram+0x134>)
 801777a:	f001 f8df 	bl	801893c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	889b      	ldrh	r3, [r3, #4]
 801778a:	b29b      	uxth	r3, r3
 801778c:	2b00      	cmp	r3, #0
 801778e:	d12a      	bne.n	80177e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801779e:	69bb      	ldr	r3, [r7, #24]
 80177a0:	6858      	ldr	r0, [r3, #4]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	3308      	adds	r3, #8
 80177a6:	2214      	movs	r2, #20
 80177a8:	4619      	mov	r1, r3
 80177aa:	f001 f9a2 	bl	8018af2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80177ae:	2101      	movs	r1, #1
 80177b0:	69b8      	ldr	r0, [r7, #24]
 80177b2:	f7ff fc1f 	bl	8016ff4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80177b6:	69b8      	ldr	r0, [r7, #24]
 80177b8:	f7f6 fb64 	bl	800de84 <pbuf_clen>
 80177bc:	4603      	mov	r3, r0
 80177be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80177c0:	8bfa      	ldrh	r2, [r7, #30]
 80177c2:	8a7b      	ldrh	r3, [r7, #18]
 80177c4:	4413      	add	r3, r2
 80177c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80177ca:	db05      	blt.n	80177d8 <ip_reass_free_complete_datagram+0x98>
 80177cc:	4b27      	ldr	r3, [pc, #156]	@ (801786c <ip_reass_free_complete_datagram+0x12c>)
 80177ce:	22bc      	movs	r2, #188	@ 0xbc
 80177d0:	492a      	ldr	r1, [pc, #168]	@ (801787c <ip_reass_free_complete_datagram+0x13c>)
 80177d2:	4828      	ldr	r0, [pc, #160]	@ (8017874 <ip_reass_free_complete_datagram+0x134>)
 80177d4:	f001 f8b2 	bl	801893c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80177d8:	8bfa      	ldrh	r2, [r7, #30]
 80177da:	8a7b      	ldrh	r3, [r7, #18]
 80177dc:	4413      	add	r3, r2
 80177de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80177e0:	69b8      	ldr	r0, [r7, #24]
 80177e2:	f7f6 fac1 	bl	800dd68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	685b      	ldr	r3, [r3, #4]
 80177ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80177ec:	e01f      	b.n	801782e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80177ee:	69bb      	ldr	r3, [r7, #24]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80177f4:	69bb      	ldr	r3, [r7, #24]
 80177f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80177fe:	68f8      	ldr	r0, [r7, #12]
 8017800:	f7f6 fb40 	bl	800de84 <pbuf_clen>
 8017804:	4603      	mov	r3, r0
 8017806:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017808:	8bfa      	ldrh	r2, [r7, #30]
 801780a:	8a7b      	ldrh	r3, [r7, #18]
 801780c:	4413      	add	r3, r2
 801780e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017812:	db05      	blt.n	8017820 <ip_reass_free_complete_datagram+0xe0>
 8017814:	4b15      	ldr	r3, [pc, #84]	@ (801786c <ip_reass_free_complete_datagram+0x12c>)
 8017816:	22cc      	movs	r2, #204	@ 0xcc
 8017818:	4918      	ldr	r1, [pc, #96]	@ (801787c <ip_reass_free_complete_datagram+0x13c>)
 801781a:	4816      	ldr	r0, [pc, #88]	@ (8017874 <ip_reass_free_complete_datagram+0x134>)
 801781c:	f001 f88e 	bl	801893c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017820:	8bfa      	ldrh	r2, [r7, #30]
 8017822:	8a7b      	ldrh	r3, [r7, #18]
 8017824:	4413      	add	r3, r2
 8017826:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017828:	68f8      	ldr	r0, [r7, #12]
 801782a:	f7f6 fa9d 	bl	800dd68 <pbuf_free>
  while (p != NULL) {
 801782e:	69bb      	ldr	r3, [r7, #24]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1dc      	bne.n	80177ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017834:	6839      	ldr	r1, [r7, #0]
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f000 f8c2 	bl	80179c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801783c:	4b10      	ldr	r3, [pc, #64]	@ (8017880 <ip_reass_free_complete_datagram+0x140>)
 801783e:	881b      	ldrh	r3, [r3, #0]
 8017840:	8bfa      	ldrh	r2, [r7, #30]
 8017842:	429a      	cmp	r2, r3
 8017844:	d905      	bls.n	8017852 <ip_reass_free_complete_datagram+0x112>
 8017846:	4b09      	ldr	r3, [pc, #36]	@ (801786c <ip_reass_free_complete_datagram+0x12c>)
 8017848:	22d2      	movs	r2, #210	@ 0xd2
 801784a:	490e      	ldr	r1, [pc, #56]	@ (8017884 <ip_reass_free_complete_datagram+0x144>)
 801784c:	4809      	ldr	r0, [pc, #36]	@ (8017874 <ip_reass_free_complete_datagram+0x134>)
 801784e:	f001 f875 	bl	801893c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017852:	4b0b      	ldr	r3, [pc, #44]	@ (8017880 <ip_reass_free_complete_datagram+0x140>)
 8017854:	881a      	ldrh	r2, [r3, #0]
 8017856:	8bfb      	ldrh	r3, [r7, #30]
 8017858:	1ad3      	subs	r3, r2, r3
 801785a:	b29a      	uxth	r2, r3
 801785c:	4b08      	ldr	r3, [pc, #32]	@ (8017880 <ip_reass_free_complete_datagram+0x140>)
 801785e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017860:	8bfb      	ldrh	r3, [r7, #30]
}
 8017862:	4618      	mov	r0, r3
 8017864:	3720      	adds	r7, #32
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	0801c3a0 	.word	0x0801c3a0
 8017870:	0801c3dc 	.word	0x0801c3dc
 8017874:	0801c3e8 	.word	0x0801c3e8
 8017878:	0801c410 	.word	0x0801c410
 801787c:	0801c424 	.word	0x0801c424
 8017880:	2400eaf0 	.word	0x2400eaf0
 8017884:	0801c444 	.word	0x0801c444

08017888 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b08a      	sub	sp, #40	@ 0x28
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
 8017890:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017892:	2300      	movs	r3, #0
 8017894:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017896:	2300      	movs	r3, #0
 8017898:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801789a:	2300      	movs	r3, #0
 801789c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801789e:	2300      	movs	r3, #0
 80178a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80178a2:	2300      	movs	r3, #0
 80178a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80178a6:	4b28      	ldr	r3, [pc, #160]	@ (8017948 <ip_reass_remove_oldest_datagram+0xc0>)
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80178ac:	e030      	b.n	8017910 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80178ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178b0:	695a      	ldr	r2, [r3, #20]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	68db      	ldr	r3, [r3, #12]
 80178b6:	429a      	cmp	r2, r3
 80178b8:	d10c      	bne.n	80178d4 <ip_reass_remove_oldest_datagram+0x4c>
 80178ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178bc:	699a      	ldr	r2, [r3, #24]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	691b      	ldr	r3, [r3, #16]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d106      	bne.n	80178d4 <ip_reass_remove_oldest_datagram+0x4c>
 80178c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c8:	899a      	ldrh	r2, [r3, #12]
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	889b      	ldrh	r3, [r3, #4]
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d014      	beq.n	80178fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80178d4:	693b      	ldr	r3, [r7, #16]
 80178d6:	3301      	adds	r3, #1
 80178d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80178da:	6a3b      	ldr	r3, [r7, #32]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d104      	bne.n	80178ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80178e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80178e4:	69fb      	ldr	r3, [r7, #28]
 80178e6:	61bb      	str	r3, [r7, #24]
 80178e8:	e009      	b.n	80178fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80178ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ec:	7fda      	ldrb	r2, [r3, #31]
 80178ee:	6a3b      	ldr	r3, [r7, #32]
 80178f0:	7fdb      	ldrb	r3, [r3, #31]
 80178f2:	429a      	cmp	r2, r3
 80178f4:	d803      	bhi.n	80178fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80178f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80178fa:	69fb      	ldr	r3, [r7, #28]
 80178fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80178fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d001      	beq.n	801790a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017908:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017912:	2b00      	cmp	r3, #0
 8017914:	d1cb      	bne.n	80178ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017916:	6a3b      	ldr	r3, [r7, #32]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d008      	beq.n	801792e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801791c:	69b9      	ldr	r1, [r7, #24]
 801791e:	6a38      	ldr	r0, [r7, #32]
 8017920:	f7ff ff0e 	bl	8017740 <ip_reass_free_complete_datagram>
 8017924:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017926:	697a      	ldr	r2, [r7, #20]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	4413      	add	r3, r2
 801792c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801792e:	697a      	ldr	r2, [r7, #20]
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	429a      	cmp	r2, r3
 8017934:	da02      	bge.n	801793c <ip_reass_remove_oldest_datagram+0xb4>
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	2b01      	cmp	r3, #1
 801793a:	dcac      	bgt.n	8017896 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801793c:	697b      	ldr	r3, [r7, #20]
}
 801793e:	4618      	mov	r0, r3
 8017940:	3728      	adds	r7, #40	@ 0x28
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
 8017946:	bf00      	nop
 8017948:	2400eaec 	.word	0x2400eaec

0801794c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b084      	sub	sp, #16
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017956:	2004      	movs	r0, #4
 8017958:	f7f5 fae0 	bl	800cf1c <memp_malloc>
 801795c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d110      	bne.n	8017986 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017964:	6839      	ldr	r1, [r7, #0]
 8017966:	6878      	ldr	r0, [r7, #4]
 8017968:	f7ff ff8e 	bl	8017888 <ip_reass_remove_oldest_datagram>
 801796c:	4602      	mov	r2, r0
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	4293      	cmp	r3, r2
 8017972:	dc03      	bgt.n	801797c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017974:	2004      	movs	r0, #4
 8017976:	f7f5 fad1 	bl	800cf1c <memp_malloc>
 801797a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d101      	bne.n	8017986 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017982:	2300      	movs	r3, #0
 8017984:	e016      	b.n	80179b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017986:	2220      	movs	r2, #32
 8017988:	2100      	movs	r1, #0
 801798a:	68f8      	ldr	r0, [r7, #12]
 801798c:	f001 f83b 	bl	8018a06 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	220f      	movs	r2, #15
 8017994:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017996:	4b09      	ldr	r3, [pc, #36]	@ (80179bc <ip_reass_enqueue_new_datagram+0x70>)
 8017998:	681a      	ldr	r2, [r3, #0]
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801799e:	4a07      	ldr	r2, [pc, #28]	@ (80179bc <ip_reass_enqueue_new_datagram+0x70>)
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	3308      	adds	r3, #8
 80179a8:	2214      	movs	r2, #20
 80179aa:	6879      	ldr	r1, [r7, #4]
 80179ac:	4618      	mov	r0, r3
 80179ae:	f001 f8a0 	bl	8018af2 <memcpy>
  return ipr;
 80179b2:	68fb      	ldr	r3, [r7, #12]
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	3710      	adds	r7, #16
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}
 80179bc:	2400eaec 	.word	0x2400eaec

080179c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	6078      	str	r0, [r7, #4]
 80179c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80179ca:	4b10      	ldr	r3, [pc, #64]	@ (8017a0c <ip_reass_dequeue_datagram+0x4c>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	687a      	ldr	r2, [r7, #4]
 80179d0:	429a      	cmp	r2, r3
 80179d2:	d104      	bne.n	80179de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	4a0c      	ldr	r2, [pc, #48]	@ (8017a0c <ip_reass_dequeue_datagram+0x4c>)
 80179da:	6013      	str	r3, [r2, #0]
 80179dc:	e00d      	b.n	80179fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d106      	bne.n	80179f2 <ip_reass_dequeue_datagram+0x32>
 80179e4:	4b0a      	ldr	r3, [pc, #40]	@ (8017a10 <ip_reass_dequeue_datagram+0x50>)
 80179e6:	f240 1245 	movw	r2, #325	@ 0x145
 80179ea:	490a      	ldr	r1, [pc, #40]	@ (8017a14 <ip_reass_dequeue_datagram+0x54>)
 80179ec:	480a      	ldr	r0, [pc, #40]	@ (8017a18 <ip_reass_dequeue_datagram+0x58>)
 80179ee:	f000 ffa5 	bl	801893c <iprintf>
    prev->next = ipr->next;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80179fa:	6879      	ldr	r1, [r7, #4]
 80179fc:	2004      	movs	r0, #4
 80179fe:	f7f5 fb03 	bl	800d008 <memp_free>
}
 8017a02:	bf00      	nop
 8017a04:	3708      	adds	r7, #8
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	2400eaec 	.word	0x2400eaec
 8017a10:	0801c3a0 	.word	0x0801c3a0
 8017a14:	0801c468 	.word	0x0801c468
 8017a18:	0801c3e8 	.word	0x0801c3e8

08017a1c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08c      	sub	sp, #48	@ 0x30
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	60b9      	str	r1, [r7, #8]
 8017a26:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017a30:	68bb      	ldr	r3, [r7, #8]
 8017a32:	685b      	ldr	r3, [r3, #4]
 8017a34:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017a36:	69fb      	ldr	r3, [r7, #28]
 8017a38:	885b      	ldrh	r3, [r3, #2]
 8017a3a:	b29b      	uxth	r3, r3
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7f4 fcdd 	bl	800c3fc <lwip_htons>
 8017a42:	4603      	mov	r3, r0
 8017a44:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017a46:	69fb      	ldr	r3, [r7, #28]
 8017a48:	781b      	ldrb	r3, [r3, #0]
 8017a4a:	f003 030f 	and.w	r3, r3, #15
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	009b      	lsls	r3, r3, #2
 8017a52:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017a54:	7e7b      	ldrb	r3, [r7, #25]
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	8b7a      	ldrh	r2, [r7, #26]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d202      	bcs.n	8017a64 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a62:	e135      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017a64:	7e7b      	ldrb	r3, [r7, #25]
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	8b7a      	ldrh	r2, [r7, #26]
 8017a6a:	1ad3      	subs	r3, r2, r3
 8017a6c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	88db      	ldrh	r3, [r3, #6]
 8017a72:	b29b      	uxth	r3, r3
 8017a74:	4618      	mov	r0, r3
 8017a76:	f7f4 fcc1 	bl	800c3fc <lwip_htons>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a80:	b29b      	uxth	r3, r3
 8017a82:	00db      	lsls	r3, r3, #3
 8017a84:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017a86:	68bb      	ldr	r3, [r7, #8]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a8e:	2200      	movs	r2, #0
 8017a90:	701a      	strb	r2, [r3, #0]
 8017a92:	2200      	movs	r2, #0
 8017a94:	705a      	strb	r2, [r3, #1]
 8017a96:	2200      	movs	r2, #0
 8017a98:	709a      	strb	r2, [r3, #2]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aa0:	8afa      	ldrh	r2, [r7, #22]
 8017aa2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017aa4:	8afa      	ldrh	r2, [r7, #22]
 8017aa6:	8b7b      	ldrh	r3, [r7, #26]
 8017aa8:	4413      	add	r3, r2
 8017aaa:	b29a      	uxth	r2, r3
 8017aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ab2:	88db      	ldrh	r3, [r3, #6]
 8017ab4:	b29b      	uxth	r3, r3
 8017ab6:	8afa      	ldrh	r2, [r7, #22]
 8017ab8:	429a      	cmp	r2, r3
 8017aba:	d902      	bls.n	8017ac2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017abc:	f04f 33ff 	mov.w	r3, #4294967295
 8017ac0:	e106      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	685b      	ldr	r3, [r3, #4]
 8017ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ac8:	e068      	b.n	8017b9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017acc:	685b      	ldr	r3, [r3, #4]
 8017ace:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ad2:	889b      	ldrh	r3, [r3, #4]
 8017ad4:	b29a      	uxth	r2, r3
 8017ad6:	693b      	ldr	r3, [r7, #16]
 8017ad8:	889b      	ldrh	r3, [r3, #4]
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d235      	bcs.n	8017b4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017ae4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d020      	beq.n	8017b2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aee:	889b      	ldrh	r3, [r3, #4]
 8017af0:	b29a      	uxth	r2, r3
 8017af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017af4:	88db      	ldrh	r3, [r3, #6]
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d307      	bcc.n	8017b0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017afe:	88db      	ldrh	r3, [r3, #6]
 8017b00:	b29a      	uxth	r2, r3
 8017b02:	693b      	ldr	r3, [r7, #16]
 8017b04:	889b      	ldrh	r3, [r3, #4]
 8017b06:	b29b      	uxth	r3, r3
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d902      	bls.n	8017b12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b10:	e0de      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b14:	68ba      	ldr	r2, [r7, #8]
 8017b16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b1a:	88db      	ldrh	r3, [r3, #6]
 8017b1c:	b29a      	uxth	r2, r3
 8017b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b20:	889b      	ldrh	r3, [r3, #4]
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	429a      	cmp	r2, r3
 8017b26:	d03d      	beq.n	8017ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017b2c:	e03a      	b.n	8017ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b30:	88db      	ldrh	r3, [r3, #6]
 8017b32:	b29a      	uxth	r2, r3
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	889b      	ldrh	r3, [r3, #4]
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d902      	bls.n	8017b44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b42:	e0c5      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	68ba      	ldr	r2, [r7, #8]
 8017b48:	605a      	str	r2, [r3, #4]
      break;
 8017b4a:	e02b      	b.n	8017ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b4e:	889b      	ldrh	r3, [r3, #4]
 8017b50:	b29a      	uxth	r2, r3
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	889b      	ldrh	r3, [r3, #4]
 8017b56:	b29b      	uxth	r3, r3
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d102      	bne.n	8017b62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b60:	e0b6      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b64:	889b      	ldrh	r3, [r3, #4]
 8017b66:	b29a      	uxth	r2, r3
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	88db      	ldrh	r3, [r3, #6]
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d202      	bcs.n	8017b78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b72:	f04f 33ff 	mov.w	r3, #4294967295
 8017b76:	e0ab      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d009      	beq.n	8017b92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b80:	88db      	ldrh	r3, [r3, #6]
 8017b82:	b29a      	uxth	r2, r3
 8017b84:	693b      	ldr	r3, [r7, #16]
 8017b86:	889b      	ldrh	r3, [r3, #4]
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	d001      	beq.n	8017b92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d193      	bne.n	8017aca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017ba2:	e000      	b.n	8017ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017ba4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d12d      	bne.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d01c      	beq.n	8017bec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bb4:	88db      	ldrh	r3, [r3, #6]
 8017bb6:	b29a      	uxth	r2, r3
 8017bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bba:	889b      	ldrh	r3, [r3, #4]
 8017bbc:	b29b      	uxth	r3, r3
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d906      	bls.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017bc2:	4b45      	ldr	r3, [pc, #276]	@ (8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017bc4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017bc8:	4944      	ldr	r1, [pc, #272]	@ (8017cdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017bca:	4845      	ldr	r0, [pc, #276]	@ (8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017bcc:	f000 feb6 	bl	801893c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd2:	68ba      	ldr	r2, [r7, #8]
 8017bd4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bd8:	88db      	ldrh	r3, [r3, #6]
 8017bda:	b29a      	uxth	r2, r3
 8017bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bde:	889b      	ldrh	r3, [r3, #4]
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d010      	beq.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017be6:	2300      	movs	r3, #0
 8017be8:	623b      	str	r3, [r7, #32]
 8017bea:	e00d      	b.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d006      	beq.n	8017c02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017bf4:	4b38      	ldr	r3, [pc, #224]	@ (8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017bf6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8017bfa:	493a      	ldr	r1, [pc, #232]	@ (8017ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017bfc:	4838      	ldr	r0, [pc, #224]	@ (8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017bfe:	f000 fe9d 	bl	801893c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017c02:	68fb      	ldr	r3, [r7, #12]
 8017c04:	68ba      	ldr	r2, [r7, #8]
 8017c06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d105      	bne.n	8017c1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	7f9b      	ldrb	r3, [r3, #30]
 8017c12:	f003 0301 	and.w	r3, r3, #1
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d059      	beq.n	8017cce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017c1a:	6a3b      	ldr	r3, [r7, #32]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d04f      	beq.n	8017cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	685b      	ldr	r3, [r3, #4]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d006      	beq.n	8017c36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	685b      	ldr	r3, [r3, #4]
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	889b      	ldrh	r3, [r3, #4]
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d002      	beq.n	8017c3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017c36:	2300      	movs	r3, #0
 8017c38:	623b      	str	r3, [r7, #32]
 8017c3a:	e041      	b.n	8017cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017c46:	e012      	b.n	8017c6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c4a:	685b      	ldr	r3, [r3, #4]
 8017c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8017c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c50:	88db      	ldrh	r3, [r3, #6]
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c56:	889b      	ldrh	r3, [r3, #4]
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	d002      	beq.n	8017c64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	623b      	str	r3, [r7, #32]
            break;
 8017c62:	e007      	b.n	8017c74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c66:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d1e9      	bne.n	8017c48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017c74:	6a3b      	ldr	r3, [r7, #32]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d022      	beq.n	8017cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d106      	bne.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017c82:	4b15      	ldr	r3, [pc, #84]	@ (8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c84:	f240 12df 	movw	r2, #479	@ 0x1df
 8017c88:	4917      	ldr	r1, [pc, #92]	@ (8017ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017c8a:	4815      	ldr	r0, [pc, #84]	@ (8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c8c:	f000 fe56 	bl	801893c <iprintf>
          LWIP_ASSERT("sanity check",
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	685b      	ldr	r3, [r3, #4]
 8017c94:	685b      	ldr	r3, [r3, #4]
 8017c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017c98:	429a      	cmp	r2, r3
 8017c9a:	d106      	bne.n	8017caa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c9e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017ca2:	4911      	ldr	r1, [pc, #68]	@ (8017ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017ca4:	480e      	ldr	r0, [pc, #56]	@ (8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ca6:	f000 fe49 	bl	801893c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d006      	beq.n	8017cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017cb2:	4b09      	ldr	r3, [pc, #36]	@ (8017cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017cb4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017cb8:	490c      	ldr	r1, [pc, #48]	@ (8017cec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017cba:	4809      	ldr	r0, [pc, #36]	@ (8017ce0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017cbc:	f000 fe3e 	bl	801893c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017cc0:	6a3b      	ldr	r3, [r7, #32]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	bf14      	ite	ne
 8017cc6:	2301      	movne	r3, #1
 8017cc8:	2300      	moveq	r3, #0
 8017cca:	b2db      	uxtb	r3, r3
 8017ccc:	e000      	b.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017cce:	2300      	movs	r3, #0
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	3730      	adds	r7, #48	@ 0x30
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd80      	pop	{r7, pc}
 8017cd8:	0801c3a0 	.word	0x0801c3a0
 8017cdc:	0801c484 	.word	0x0801c484
 8017ce0:	0801c3e8 	.word	0x0801c3e8
 8017ce4:	0801c4a4 	.word	0x0801c4a4
 8017ce8:	0801c4dc 	.word	0x0801c4dc
 8017cec:	0801c4ec 	.word	0x0801c4ec

08017cf0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b08e      	sub	sp, #56	@ 0x38
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	685b      	ldr	r3, [r3, #4]
 8017cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	f003 030f 	and.w	r3, r3, #15
 8017d06:	b2db      	uxtb	r3, r3
 8017d08:	009b      	lsls	r3, r3, #2
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	2b14      	cmp	r3, #20
 8017d0e:	f040 8171 	bne.w	8017ff4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d14:	88db      	ldrh	r3, [r3, #6]
 8017d16:	b29b      	uxth	r3, r3
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f7f4 fb6f 	bl	800c3fc <lwip_htons>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d24:	b29b      	uxth	r3, r3
 8017d26:	00db      	lsls	r3, r3, #3
 8017d28:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2c:	885b      	ldrh	r3, [r3, #2]
 8017d2e:	b29b      	uxth	r3, r3
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7f4 fb63 	bl	800c3fc <lwip_htons>
 8017d36:	4603      	mov	r3, r0
 8017d38:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d3c:	781b      	ldrb	r3, [r3, #0]
 8017d3e:	f003 030f 	and.w	r3, r3, #15
 8017d42:	b2db      	uxtb	r3, r3
 8017d44:	009b      	lsls	r3, r3, #2
 8017d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8017d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017d52:	429a      	cmp	r2, r3
 8017d54:	f0c0 8150 	bcc.w	8017ff8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017d58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017d5c:	b29b      	uxth	r3, r3
 8017d5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017d60:	1ad3      	subs	r3, r2, r3
 8017d62:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f7f6 f88d 	bl	800de84 <pbuf_clen>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017d6e:	4b8c      	ldr	r3, [pc, #560]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017d70:	881b      	ldrh	r3, [r3, #0]
 8017d72:	461a      	mov	r2, r3
 8017d74:	8c3b      	ldrh	r3, [r7, #32]
 8017d76:	4413      	add	r3, r2
 8017d78:	2b0a      	cmp	r3, #10
 8017d7a:	dd10      	ble.n	8017d9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017d7c:	8c3b      	ldrh	r3, [r7, #32]
 8017d7e:	4619      	mov	r1, r3
 8017d80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017d82:	f7ff fd81 	bl	8017888 <ip_reass_remove_oldest_datagram>
 8017d86:	4603      	mov	r3, r0
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f000 8137 	beq.w	8017ffc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017d8e:	4b84      	ldr	r3, [pc, #528]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017d90:	881b      	ldrh	r3, [r3, #0]
 8017d92:	461a      	mov	r2, r3
 8017d94:	8c3b      	ldrh	r3, [r7, #32]
 8017d96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017d98:	2b0a      	cmp	r3, #10
 8017d9a:	f300 812f 	bgt.w	8017ffc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017d9e:	4b81      	ldr	r3, [pc, #516]	@ (8017fa4 <ip4_reass+0x2b4>)
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	633b      	str	r3, [r7, #48]	@ 0x30
 8017da4:	e015      	b.n	8017dd2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017da8:	695a      	ldr	r2, [r3, #20]
 8017daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dac:	68db      	ldr	r3, [r3, #12]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d10c      	bne.n	8017dcc <ip4_reass+0xdc>
 8017db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017db4:	699a      	ldr	r2, [r3, #24]
 8017db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db8:	691b      	ldr	r3, [r3, #16]
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d106      	bne.n	8017dcc <ip4_reass+0xdc>
 8017dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dc0:	899a      	ldrh	r2, [r3, #12]
 8017dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc4:	889b      	ldrh	r3, [r3, #4]
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d006      	beq.n	8017dda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8017dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d1e6      	bne.n	8017da6 <ip4_reass+0xb6>
 8017dd8:	e000      	b.n	8017ddc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017dda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d109      	bne.n	8017df6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017de2:	8c3b      	ldrh	r3, [r7, #32]
 8017de4:	4619      	mov	r1, r3
 8017de6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017de8:	f7ff fdb0 	bl	801794c <ip_reass_enqueue_new_datagram>
 8017dec:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d11c      	bne.n	8017e2e <ip4_reass+0x13e>
      goto nullreturn;
 8017df4:	e105      	b.n	8018002 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017df8:	88db      	ldrh	r3, [r3, #6]
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7f4 fafd 	bl	800c3fc <lwip_htons>
 8017e02:	4603      	mov	r3, r0
 8017e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d110      	bne.n	8017e2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e0e:	89db      	ldrh	r3, [r3, #14]
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7f4 faf3 	bl	800c3fc <lwip_htons>
 8017e16:	4603      	mov	r3, r0
 8017e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d006      	beq.n	8017e2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e22:	3308      	adds	r3, #8
 8017e24:	2214      	movs	r2, #20
 8017e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f000 fe62 	bl	8018af2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e30:	88db      	ldrh	r3, [r3, #6]
 8017e32:	b29b      	uxth	r3, r3
 8017e34:	f003 0320 	and.w	r3, r3, #32
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	bf0c      	ite	eq
 8017e3c:	2301      	moveq	r3, #1
 8017e3e:	2300      	movne	r3, #0
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017e44:	69fb      	ldr	r3, [r7, #28]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d00e      	beq.n	8017e68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017e4a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017e4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e4e:	4413      	add	r3, r2
 8017e50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017e52:	8b7a      	ldrh	r2, [r7, #26]
 8017e54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017e56:	429a      	cmp	r2, r3
 8017e58:	f0c0 80a0 	bcc.w	8017f9c <ip4_reass+0x2ac>
 8017e5c:	8b7b      	ldrh	r3, [r7, #26]
 8017e5e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017e62:	4293      	cmp	r3, r2
 8017e64:	f200 809a 	bhi.w	8017f9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017e68:	69fa      	ldr	r2, [r7, #28]
 8017e6a:	6879      	ldr	r1, [r7, #4]
 8017e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017e6e:	f7ff fdd5 	bl	8017a1c <ip_reass_chain_frag_into_datagram_and_validate>
 8017e72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017e74:	697b      	ldr	r3, [r7, #20]
 8017e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e7a:	f000 809b 	beq.w	8017fb4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017e7e:	4b48      	ldr	r3, [pc, #288]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017e80:	881a      	ldrh	r2, [r3, #0]
 8017e82:	8c3b      	ldrh	r3, [r7, #32]
 8017e84:	4413      	add	r3, r2
 8017e86:	b29a      	uxth	r2, r3
 8017e88:	4b45      	ldr	r3, [pc, #276]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017e8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d00d      	beq.n	8017eae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017e92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017e94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017e96:	4413      	add	r3, r2
 8017e98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e9c:	8a7a      	ldrh	r2, [r7, #18]
 8017e9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ea2:	7f9b      	ldrb	r3, [r3, #30]
 8017ea4:	f043 0301 	orr.w	r3, r3, #1
 8017ea8:	b2da      	uxtb	r2, r3
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d171      	bne.n	8017f98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eb6:	8b9b      	ldrh	r3, [r3, #28]
 8017eb8:	3314      	adds	r3, #20
 8017eba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	685b      	ldr	r3, [r3, #4]
 8017ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ed0:	3308      	adds	r3, #8
 8017ed2:	2214      	movs	r2, #20
 8017ed4:	4619      	mov	r1, r3
 8017ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ed8:	f000 fe0b 	bl	8018af2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017edc:	8a3b      	ldrh	r3, [r7, #16]
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7f4 fa8c 	bl	800c3fc <lwip_htons>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	461a      	mov	r2, r3
 8017ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eee:	2200      	movs	r2, #0
 8017ef0:	719a      	strb	r2, [r3, #6]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef8:	2200      	movs	r2, #0
 8017efa:	729a      	strb	r2, [r3, #10]
 8017efc:	2200      	movs	r2, #0
 8017efe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017f06:	e00d      	b.n	8017f24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f0a:	685b      	ldr	r3, [r3, #4]
 8017f0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017f0e:	2114      	movs	r1, #20
 8017f10:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017f12:	f7f5 fea3 	bl	800dc5c <pbuf_remove_header>
      pbuf_cat(p, r);
 8017f16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	f7f5 fff3 	bl	800df04 <pbuf_cat>
      r = iprh->next_pbuf;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d1ee      	bne.n	8017f08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8017fa4 <ip4_reass+0x2b4>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d102      	bne.n	8017f3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017f34:	2300      	movs	r3, #0
 8017f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f38:	e010      	b.n	8017f5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8017fa4 <ip4_reass+0x2b4>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f40:	e007      	b.n	8017f52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017f48:	429a      	cmp	r2, r3
 8017f4a:	d006      	beq.n	8017f5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d1f4      	bne.n	8017f42 <ip4_reass+0x252>
 8017f58:	e000      	b.n	8017f5c <ip4_reass+0x26c>
          break;
 8017f5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017f5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017f5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017f60:	f7ff fd2e 	bl	80179c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f7f5 ff8d 	bl	800de84 <pbuf_clen>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017f70:	881b      	ldrh	r3, [r3, #0]
 8017f72:	8c3a      	ldrh	r2, [r7, #32]
 8017f74:	429a      	cmp	r2, r3
 8017f76:	d906      	bls.n	8017f86 <ip4_reass+0x296>
 8017f78:	4b0b      	ldr	r3, [pc, #44]	@ (8017fa8 <ip4_reass+0x2b8>)
 8017f7a:	f240 229b 	movw	r2, #667	@ 0x29b
 8017f7e:	490b      	ldr	r1, [pc, #44]	@ (8017fac <ip4_reass+0x2bc>)
 8017f80:	480b      	ldr	r0, [pc, #44]	@ (8017fb0 <ip4_reass+0x2c0>)
 8017f82:	f000 fcdb 	bl	801893c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017f86:	4b06      	ldr	r3, [pc, #24]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017f88:	881a      	ldrh	r2, [r3, #0]
 8017f8a:	8c3b      	ldrh	r3, [r7, #32]
 8017f8c:	1ad3      	subs	r3, r2, r3
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	4b03      	ldr	r3, [pc, #12]	@ (8017fa0 <ip4_reass+0x2b0>)
 8017f92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	e038      	b.n	801800a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	e036      	b.n	801800a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017f9c:	bf00      	nop
 8017f9e:	e00a      	b.n	8017fb6 <ip4_reass+0x2c6>
 8017fa0:	2400eaf0 	.word	0x2400eaf0
 8017fa4:	2400eaec 	.word	0x2400eaec
 8017fa8:	0801c3a0 	.word	0x0801c3a0
 8017fac:	0801c510 	.word	0x0801c510
 8017fb0:	0801c3e8 	.word	0x0801c3e8
    goto nullreturn_ipr;
 8017fb4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d106      	bne.n	8017fca <ip4_reass+0x2da>
 8017fbc:	4b15      	ldr	r3, [pc, #84]	@ (8018014 <ip4_reass+0x324>)
 8017fbe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8017fc2:	4915      	ldr	r1, [pc, #84]	@ (8018018 <ip4_reass+0x328>)
 8017fc4:	4815      	ldr	r0, [pc, #84]	@ (801801c <ip4_reass+0x32c>)
 8017fc6:	f000 fcb9 	bl	801893c <iprintf>
  if (ipr->p == NULL) {
 8017fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d116      	bne.n	8018000 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017fd2:	4b13      	ldr	r3, [pc, #76]	@ (8018020 <ip4_reass+0x330>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	d006      	beq.n	8017fea <ip4_reass+0x2fa>
 8017fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8018014 <ip4_reass+0x324>)
 8017fde:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017fe2:	4910      	ldr	r1, [pc, #64]	@ (8018024 <ip4_reass+0x334>)
 8017fe4:	480d      	ldr	r0, [pc, #52]	@ (801801c <ip4_reass+0x32c>)
 8017fe6:	f000 fca9 	bl	801893c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017fea:	2100      	movs	r1, #0
 8017fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017fee:	f7ff fce7 	bl	80179c0 <ip_reass_dequeue_datagram>
 8017ff2:	e006      	b.n	8018002 <ip4_reass+0x312>
    goto nullreturn;
 8017ff4:	bf00      	nop
 8017ff6:	e004      	b.n	8018002 <ip4_reass+0x312>
    goto nullreturn;
 8017ff8:	bf00      	nop
 8017ffa:	e002      	b.n	8018002 <ip4_reass+0x312>
      goto nullreturn;
 8017ffc:	bf00      	nop
 8017ffe:	e000      	b.n	8018002 <ip4_reass+0x312>
  }

nullreturn:
 8018000:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f7f5 feb0 	bl	800dd68 <pbuf_free>
  return NULL;
 8018008:	2300      	movs	r3, #0
}
 801800a:	4618      	mov	r0, r3
 801800c:	3738      	adds	r7, #56	@ 0x38
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	0801c3a0 	.word	0x0801c3a0
 8018018:	0801c52c 	.word	0x0801c52c
 801801c:	0801c3e8 	.word	0x0801c3e8
 8018020:	2400eaec 	.word	0x2400eaec
 8018024:	0801c538 	.word	0x0801c538

08018028 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801802c:	2005      	movs	r0, #5
 801802e:	f7f4 ff75 	bl	800cf1c <memp_malloc>
 8018032:	4603      	mov	r3, r0
}
 8018034:	4618      	mov	r0, r3
 8018036:	bd80      	pop	{r7, pc}

08018038 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d106      	bne.n	8018054 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018046:	4b07      	ldr	r3, [pc, #28]	@ (8018064 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018048:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801804c:	4906      	ldr	r1, [pc, #24]	@ (8018068 <ip_frag_free_pbuf_custom_ref+0x30>)
 801804e:	4807      	ldr	r0, [pc, #28]	@ (801806c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018050:	f000 fc74 	bl	801893c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018054:	6879      	ldr	r1, [r7, #4]
 8018056:	2005      	movs	r0, #5
 8018058:	f7f4 ffd6 	bl	800d008 <memp_free>
}
 801805c:	bf00      	nop
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	0801c3a0 	.word	0x0801c3a0
 8018068:	0801c558 	.word	0x0801c558
 801806c:	0801c3e8 	.word	0x0801c3e8

08018070 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018070:	b580      	push	{r7, lr}
 8018072:	b084      	sub	sp, #16
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d106      	bne.n	8018090 <ipfrag_free_pbuf_custom+0x20>
 8018082:	4b11      	ldr	r3, [pc, #68]	@ (80180c8 <ipfrag_free_pbuf_custom+0x58>)
 8018084:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018088:	4910      	ldr	r1, [pc, #64]	@ (80180cc <ipfrag_free_pbuf_custom+0x5c>)
 801808a:	4811      	ldr	r0, [pc, #68]	@ (80180d0 <ipfrag_free_pbuf_custom+0x60>)
 801808c:	f000 fc56 	bl	801893c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018090:	68fa      	ldr	r2, [r7, #12]
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	429a      	cmp	r2, r3
 8018096:	d006      	beq.n	80180a6 <ipfrag_free_pbuf_custom+0x36>
 8018098:	4b0b      	ldr	r3, [pc, #44]	@ (80180c8 <ipfrag_free_pbuf_custom+0x58>)
 801809a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801809e:	490d      	ldr	r1, [pc, #52]	@ (80180d4 <ipfrag_free_pbuf_custom+0x64>)
 80180a0:	480b      	ldr	r0, [pc, #44]	@ (80180d0 <ipfrag_free_pbuf_custom+0x60>)
 80180a2:	f000 fc4b 	bl	801893c <iprintf>
  if (pcr->original != NULL) {
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	695b      	ldr	r3, [r3, #20]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d004      	beq.n	80180b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	695b      	ldr	r3, [r3, #20]
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7f5 fe58 	bl	800dd68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80180b8:	68f8      	ldr	r0, [r7, #12]
 80180ba:	f7ff ffbd 	bl	8018038 <ip_frag_free_pbuf_custom_ref>
}
 80180be:	bf00      	nop
 80180c0:	3710      	adds	r7, #16
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	0801c3a0 	.word	0x0801c3a0
 80180cc:	0801c564 	.word	0x0801c564
 80180d0:	0801c3e8 	.word	0x0801c3e8
 80180d4:	0801c570 	.word	0x0801c570

080180d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b094      	sub	sp, #80	@ 0x50
 80180dc:	af02      	add	r7, sp, #8
 80180de:	60f8      	str	r0, [r7, #12]
 80180e0:	60b9      	str	r1, [r7, #8]
 80180e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80180e4:	2300      	movs	r3, #0
 80180e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80180ea:	68bb      	ldr	r3, [r7, #8]
 80180ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80180ee:	3b14      	subs	r3, #20
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	da00      	bge.n	80180f6 <ip4_frag+0x1e>
 80180f4:	3307      	adds	r3, #7
 80180f6:	10db      	asrs	r3, r3, #3
 80180f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80180fa:	2314      	movs	r3, #20
 80180fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80180fe:	68fb      	ldr	r3, [r7, #12]
 8018100:	685b      	ldr	r3, [r3, #4]
 8018102:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018106:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	f003 030f 	and.w	r3, r3, #15
 8018110:	b2db      	uxtb	r3, r3
 8018112:	009b      	lsls	r3, r3, #2
 8018114:	b2db      	uxtb	r3, r3
 8018116:	2b14      	cmp	r3, #20
 8018118:	d002      	beq.n	8018120 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801811a:	f06f 0305 	mvn.w	r3, #5
 801811e:	e110      	b.n	8018342 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	895b      	ldrh	r3, [r3, #10]
 8018124:	2b13      	cmp	r3, #19
 8018126:	d809      	bhi.n	801813c <ip4_frag+0x64>
 8018128:	4b88      	ldr	r3, [pc, #544]	@ (801834c <ip4_frag+0x274>)
 801812a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801812e:	4988      	ldr	r1, [pc, #544]	@ (8018350 <ip4_frag+0x278>)
 8018130:	4888      	ldr	r0, [pc, #544]	@ (8018354 <ip4_frag+0x27c>)
 8018132:	f000 fc03 	bl	801893c <iprintf>
 8018136:	f06f 0305 	mvn.w	r3, #5
 801813a:	e102      	b.n	8018342 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801813e:	88db      	ldrh	r3, [r3, #6]
 8018140:	b29b      	uxth	r3, r3
 8018142:	4618      	mov	r0, r3
 8018144:	f7f4 f95a 	bl	800c3fc <lwip_htons>
 8018148:	4603      	mov	r3, r0
 801814a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801814c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801814e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018152:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018156:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801815c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	891b      	ldrh	r3, [r3, #8]
 8018162:	3b14      	subs	r3, #20
 8018164:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018168:	e0e1      	b.n	801832e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801816a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801816c:	00db      	lsls	r3, r3, #3
 801816e:	b29b      	uxth	r3, r3
 8018170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018174:	4293      	cmp	r3, r2
 8018176:	bf28      	it	cs
 8018178:	4613      	movcs	r3, r2
 801817a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801817c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018180:	2114      	movs	r1, #20
 8018182:	200e      	movs	r0, #14
 8018184:	f7f5 fb0c 	bl	800d7a0 <pbuf_alloc>
 8018188:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801818c:	2b00      	cmp	r3, #0
 801818e:	f000 80d5 	beq.w	801833c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018194:	895b      	ldrh	r3, [r3, #10]
 8018196:	2b13      	cmp	r3, #19
 8018198:	d806      	bhi.n	80181a8 <ip4_frag+0xd0>
 801819a:	4b6c      	ldr	r3, [pc, #432]	@ (801834c <ip4_frag+0x274>)
 801819c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80181a0:	496d      	ldr	r1, [pc, #436]	@ (8018358 <ip4_frag+0x280>)
 80181a2:	486c      	ldr	r0, [pc, #432]	@ (8018354 <ip4_frag+0x27c>)
 80181a4:	f000 fbca 	bl	801893c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80181a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181aa:	685b      	ldr	r3, [r3, #4]
 80181ac:	2214      	movs	r2, #20
 80181ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80181b0:	4618      	mov	r0, r3
 80181b2:	f000 fc9e 	bl	8018af2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80181b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181b8:	685b      	ldr	r3, [r3, #4]
 80181ba:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80181bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80181be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80181c2:	e064      	b.n	801828e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	895a      	ldrh	r2, [r3, #10]
 80181c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80181ca:	1ad3      	subs	r3, r2, r3
 80181cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	895b      	ldrh	r3, [r3, #10]
 80181d2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d906      	bls.n	80181e6 <ip4_frag+0x10e>
 80181d8:	4b5c      	ldr	r3, [pc, #368]	@ (801834c <ip4_frag+0x274>)
 80181da:	f240 322d 	movw	r2, #813	@ 0x32d
 80181de:	495f      	ldr	r1, [pc, #380]	@ (801835c <ip4_frag+0x284>)
 80181e0:	485c      	ldr	r0, [pc, #368]	@ (8018354 <ip4_frag+0x27c>)
 80181e2:	f000 fbab 	bl	801893c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80181e6:	8bfa      	ldrh	r2, [r7, #30]
 80181e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80181ec:	4293      	cmp	r3, r2
 80181ee:	bf28      	it	cs
 80181f0:	4613      	movcs	r3, r2
 80181f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80181f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d105      	bne.n	801820a <ip4_frag+0x132>
        poff = 0;
 80181fe:	2300      	movs	r3, #0
 8018200:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	60fb      	str	r3, [r7, #12]
        continue;
 8018208:	e041      	b.n	801828e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801820a:	f7ff ff0d 	bl	8018028 <ip_frag_alloc_pbuf_custom_ref>
 801820e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018210:	69bb      	ldr	r3, [r7, #24]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d103      	bne.n	801821e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018218:	f7f5 fda6 	bl	800dd68 <pbuf_free>
        goto memerr;
 801821c:	e08f      	b.n	801833e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801821e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018224:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018226:	4413      	add	r3, r2
 8018228:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801822c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018230:	9201      	str	r2, [sp, #4]
 8018232:	9300      	str	r3, [sp, #0]
 8018234:	4603      	mov	r3, r0
 8018236:	2241      	movs	r2, #65	@ 0x41
 8018238:	2000      	movs	r0, #0
 801823a:	f7f5 fbdb 	bl	800d9f4 <pbuf_alloced_custom>
 801823e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018240:	697b      	ldr	r3, [r7, #20]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d106      	bne.n	8018254 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018246:	69b8      	ldr	r0, [r7, #24]
 8018248:	f7ff fef6 	bl	8018038 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801824c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801824e:	f7f5 fd8b 	bl	800dd68 <pbuf_free>
        goto memerr;
 8018252:	e074      	b.n	801833e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018254:	68f8      	ldr	r0, [r7, #12]
 8018256:	f7f5 fe2d 	bl	800deb4 <pbuf_ref>
      pcr->original = p;
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	68fa      	ldr	r2, [r7, #12]
 801825e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018260:	69bb      	ldr	r3, [r7, #24]
 8018262:	4a3f      	ldr	r2, [pc, #252]	@ (8018360 <ip4_frag+0x288>)
 8018264:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018266:	6979      	ldr	r1, [r7, #20]
 8018268:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801826a:	f7f5 fe4b 	bl	800df04 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801826e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018272:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018276:	1ad3      	subs	r3, r2, r3
 8018278:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801827c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018280:	2b00      	cmp	r3, #0
 8018282:	d004      	beq.n	801828e <ip4_frag+0x1b6>
        poff = 0;
 8018284:	2300      	movs	r3, #0
 8018286:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801828e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018292:	2b00      	cmp	r3, #0
 8018294:	d196      	bne.n	80181c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018296:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018298:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801829c:	4413      	add	r3, r2
 801829e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80182a4:	f1a3 0213 	sub.w	r2, r3, #19
 80182a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80182ac:	429a      	cmp	r2, r3
 80182ae:	bfcc      	ite	gt
 80182b0:	2301      	movgt	r3, #1
 80182b2:	2300      	movle	r3, #0
 80182b4:	b2db      	uxtb	r3, r3
 80182b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80182b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80182bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182c0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80182c2:	6a3b      	ldr	r3, [r7, #32]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d002      	beq.n	80182ce <ip4_frag+0x1f6>
 80182c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d003      	beq.n	80182d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80182ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80182d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80182d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80182d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80182d8:	4618      	mov	r0, r3
 80182da:	f7f4 f88f 	bl	800c3fc <lwip_htons>
 80182de:	4603      	mov	r3, r0
 80182e0:	461a      	mov	r2, r3
 80182e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80182e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80182e8:	3314      	adds	r3, #20
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7f4 f885 	bl	800c3fc <lwip_htons>
 80182f2:	4603      	mov	r3, r0
 80182f4:	461a      	mov	r2, r3
 80182f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80182fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80182fc:	2200      	movs	r2, #0
 80182fe:	729a      	strb	r2, [r3, #10]
 8018300:	2200      	movs	r2, #0
 8018302:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	695b      	ldr	r3, [r3, #20]
 8018308:	687a      	ldr	r2, [r7, #4]
 801830a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801830c:	68b8      	ldr	r0, [r7, #8]
 801830e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018312:	f7f5 fd29 	bl	800dd68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018316:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801831a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801831c:	1ad3      	subs	r3, r2, r3
 801831e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018322:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018326:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018328:	4413      	add	r3, r2
 801832a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801832e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018332:	2b00      	cmp	r3, #0
 8018334:	f47f af19 	bne.w	801816a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018338:	2300      	movs	r3, #0
 801833a:	e002      	b.n	8018342 <ip4_frag+0x26a>
      goto memerr;
 801833c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801833e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018342:	4618      	mov	r0, r3
 8018344:	3748      	adds	r7, #72	@ 0x48
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
 801834a:	bf00      	nop
 801834c:	0801c3a0 	.word	0x0801c3a0
 8018350:	0801c57c 	.word	0x0801c57c
 8018354:	0801c3e8 	.word	0x0801c3e8
 8018358:	0801c598 	.word	0x0801c598
 801835c:	0801c5b8 	.word	0x0801c5b8
 8018360:	08018071 	.word	0x08018071

08018364 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018364:	b580      	push	{r7, lr}
 8018366:	b086      	sub	sp, #24
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
 801836c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801836e:	230e      	movs	r3, #14
 8018370:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	895b      	ldrh	r3, [r3, #10]
 8018376:	2b0e      	cmp	r3, #14
 8018378:	d96e      	bls.n	8018458 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	7bdb      	ldrb	r3, [r3, #15]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d106      	bne.n	8018390 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018388:	3301      	adds	r3, #1
 801838a:	b2da      	uxtb	r2, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018396:	693b      	ldr	r3, [r7, #16]
 8018398:	7b1a      	ldrb	r2, [r3, #12]
 801839a:	7b5b      	ldrb	r3, [r3, #13]
 801839c:	021b      	lsls	r3, r3, #8
 801839e:	4313      	orrs	r3, r2
 80183a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80183a2:	693b      	ldr	r3, [r7, #16]
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	f003 0301 	and.w	r3, r3, #1
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d023      	beq.n	80183f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80183ae:	693b      	ldr	r3, [r7, #16]
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	2b01      	cmp	r3, #1
 80183b4:	d10f      	bne.n	80183d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80183b6:	693b      	ldr	r3, [r7, #16]
 80183b8:	785b      	ldrb	r3, [r3, #1]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d11b      	bne.n	80183f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80183be:	693b      	ldr	r3, [r7, #16]
 80183c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80183c2:	2b5e      	cmp	r3, #94	@ 0x5e
 80183c4:	d117      	bne.n	80183f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	7b5b      	ldrb	r3, [r3, #13]
 80183ca:	f043 0310 	orr.w	r3, r3, #16
 80183ce:	b2da      	uxtb	r2, r3
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	735a      	strb	r2, [r3, #13]
 80183d4:	e00f      	b.n	80183f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	2206      	movs	r2, #6
 80183da:	4928      	ldr	r1, [pc, #160]	@ (801847c <ethernet_input+0x118>)
 80183dc:	4618      	mov	r0, r3
 80183de:	f000 fb02 	bl	80189e6 <memcmp>
 80183e2:	4603      	mov	r3, r0
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d106      	bne.n	80183f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	7b5b      	ldrb	r3, [r3, #13]
 80183ec:	f043 0308 	orr.w	r3, r3, #8
 80183f0:	b2da      	uxtb	r2, r3
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80183f6:	89fb      	ldrh	r3, [r7, #14]
 80183f8:	2b08      	cmp	r3, #8
 80183fa:	d003      	beq.n	8018404 <ethernet_input+0xa0>
 80183fc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018400:	d014      	beq.n	801842c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018402:	e032      	b.n	801846a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018404:	683b      	ldr	r3, [r7, #0]
 8018406:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801840a:	f003 0308 	and.w	r3, r3, #8
 801840e:	2b00      	cmp	r3, #0
 8018410:	d024      	beq.n	801845c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018412:	8afb      	ldrh	r3, [r7, #22]
 8018414:	4619      	mov	r1, r3
 8018416:	6878      	ldr	r0, [r7, #4]
 8018418:	f7f5 fc20 	bl	800dc5c <pbuf_remove_header>
 801841c:	4603      	mov	r3, r0
 801841e:	2b00      	cmp	r3, #0
 8018420:	d11e      	bne.n	8018460 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018422:	6839      	ldr	r1, [r7, #0]
 8018424:	6878      	ldr	r0, [r7, #4]
 8018426:	f7fe ff03 	bl	8017230 <ip4_input>
      break;
 801842a:	e013      	b.n	8018454 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801842c:	683b      	ldr	r3, [r7, #0]
 801842e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018432:	f003 0308 	and.w	r3, r3, #8
 8018436:	2b00      	cmp	r3, #0
 8018438:	d014      	beq.n	8018464 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801843a:	8afb      	ldrh	r3, [r7, #22]
 801843c:	4619      	mov	r1, r3
 801843e:	6878      	ldr	r0, [r7, #4]
 8018440:	f7f5 fc0c 	bl	800dc5c <pbuf_remove_header>
 8018444:	4603      	mov	r3, r0
 8018446:	2b00      	cmp	r3, #0
 8018448:	d10e      	bne.n	8018468 <ethernet_input+0x104>
        etharp_input(p, netif);
 801844a:	6839      	ldr	r1, [r7, #0]
 801844c:	6878      	ldr	r0, [r7, #4]
 801844e:	f7fe f879 	bl	8016544 <etharp_input>
      break;
 8018452:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018454:	2300      	movs	r3, #0
 8018456:	e00c      	b.n	8018472 <ethernet_input+0x10e>
    goto free_and_return;
 8018458:	bf00      	nop
 801845a:	e006      	b.n	801846a <ethernet_input+0x106>
        goto free_and_return;
 801845c:	bf00      	nop
 801845e:	e004      	b.n	801846a <ethernet_input+0x106>
        goto free_and_return;
 8018460:	bf00      	nop
 8018462:	e002      	b.n	801846a <ethernet_input+0x106>
        goto free_and_return;
 8018464:	bf00      	nop
 8018466:	e000      	b.n	801846a <ethernet_input+0x106>
        goto free_and_return;
 8018468:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801846a:	6878      	ldr	r0, [r7, #4]
 801846c:	f7f5 fc7c 	bl	800dd68 <pbuf_free>
  return ERR_OK;
 8018470:	2300      	movs	r3, #0
}
 8018472:	4618      	mov	r0, r3
 8018474:	3718      	adds	r7, #24
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}
 801847a:	bf00      	nop
 801847c:	0801c7c8 	.word	0x0801c7c8

08018480 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018480:	b580      	push	{r7, lr}
 8018482:	b086      	sub	sp, #24
 8018484:	af00      	add	r7, sp, #0
 8018486:	60f8      	str	r0, [r7, #12]
 8018488:	60b9      	str	r1, [r7, #8]
 801848a:	607a      	str	r2, [r7, #4]
 801848c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801848e:	8c3b      	ldrh	r3, [r7, #32]
 8018490:	4618      	mov	r0, r3
 8018492:	f7f3 ffb3 	bl	800c3fc <lwip_htons>
 8018496:	4603      	mov	r3, r0
 8018498:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801849a:	210e      	movs	r1, #14
 801849c:	68b8      	ldr	r0, [r7, #8]
 801849e:	f7f5 fbcd 	bl	800dc3c <pbuf_add_header>
 80184a2:	4603      	mov	r3, r0
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d125      	bne.n	80184f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80184ae:	693b      	ldr	r3, [r7, #16]
 80184b0:	8afa      	ldrh	r2, [r7, #22]
 80184b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80184b4:	693b      	ldr	r3, [r7, #16]
 80184b6:	2206      	movs	r2, #6
 80184b8:	6839      	ldr	r1, [r7, #0]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f000 fb19 	bl	8018af2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	3306      	adds	r3, #6
 80184c4:	2206      	movs	r2, #6
 80184c6:	6879      	ldr	r1, [r7, #4]
 80184c8:	4618      	mov	r0, r3
 80184ca:	f000 fb12 	bl	8018af2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80184d4:	2b06      	cmp	r3, #6
 80184d6:	d006      	beq.n	80184e6 <ethernet_output+0x66>
 80184d8:	4b0a      	ldr	r3, [pc, #40]	@ (8018504 <ethernet_output+0x84>)
 80184da:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80184de:	490a      	ldr	r1, [pc, #40]	@ (8018508 <ethernet_output+0x88>)
 80184e0:	480a      	ldr	r0, [pc, #40]	@ (801850c <ethernet_output+0x8c>)
 80184e2:	f000 fa2b 	bl	801893c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	699b      	ldr	r3, [r3, #24]
 80184ea:	68b9      	ldr	r1, [r7, #8]
 80184ec:	68f8      	ldr	r0, [r7, #12]
 80184ee:	4798      	blx	r3
 80184f0:	4603      	mov	r3, r0
 80184f2:	e002      	b.n	80184fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80184f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80184f6:	f06f 0301 	mvn.w	r3, #1
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3718      	adds	r7, #24
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}
 8018502:	bf00      	nop
 8018504:	0801c5c8 	.word	0x0801c5c8
 8018508:	0801c600 	.word	0x0801c600
 801850c:	0801c634 	.word	0x0801c634

08018510 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b086      	sub	sp, #24
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	60bb      	str	r3, [r7, #8]
 801851e:	2304      	movs	r3, #4
 8018520:	60fb      	str	r3, [r7, #12]
 8018522:	2300      	movs	r3, #0
 8018524:	613b      	str	r3, [r7, #16]
 8018526:	2300      	movs	r3, #0
 8018528:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801852a:	f107 0308 	add.w	r3, r7, #8
 801852e:	2100      	movs	r1, #0
 8018530:	4618      	mov	r0, r3
 8018532:	f7f1 f875 	bl	8009620 <osMessageCreate>
 8018536:	4602      	mov	r2, r0
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d102      	bne.n	801854a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018544:	f04f 33ff 	mov.w	r3, #4294967295
 8018548:	e000      	b.n	801854c <sys_mbox_new+0x3c>

  return ERR_OK;
 801854a:	2300      	movs	r3, #0
}
 801854c:	4618      	mov	r0, r3
 801854e:	3718      	adds	r7, #24
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}

08018554 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b084      	sub	sp, #16
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	6839      	ldr	r1, [r7, #0]
 8018564:	2200      	movs	r2, #0
 8018566:	4618      	mov	r0, r3
 8018568:	f7f1 f882 	bl	8009670 <osMessagePut>
 801856c:	4603      	mov	r3, r0
 801856e:	2b00      	cmp	r3, #0
 8018570:	d102      	bne.n	8018578 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018572:	2300      	movs	r3, #0
 8018574:	73fb      	strb	r3, [r7, #15]
 8018576:	e001      	b.n	801857c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018578:	23ff      	movs	r3, #255	@ 0xff
 801857a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801857c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018580:	4618      	mov	r0, r3
 8018582:	3710      	adds	r7, #16
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}

08018588 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b08c      	sub	sp, #48	@ 0x30
 801858c:	af00      	add	r7, sp, #0
 801858e:	61f8      	str	r0, [r7, #28]
 8018590:	61b9      	str	r1, [r7, #24]
 8018592:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018594:	f7f0 fe82 	bl	800929c <osKernelSysTick>
 8018598:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d017      	beq.n	80185d0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80185a0:	69fb      	ldr	r3, [r7, #28]
 80185a2:	6819      	ldr	r1, [r3, #0]
 80185a4:	f107 0320 	add.w	r3, r7, #32
 80185a8:	697a      	ldr	r2, [r7, #20]
 80185aa:	4618      	mov	r0, r3
 80185ac:	f7f1 f8a0 	bl	80096f0 <osMessageGet>

    if(event.status == osEventMessage)
 80185b0:	6a3b      	ldr	r3, [r7, #32]
 80185b2:	2b10      	cmp	r3, #16
 80185b4:	d109      	bne.n	80185ca <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80185b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185b8:	461a      	mov	r2, r3
 80185ba:	69bb      	ldr	r3, [r7, #24]
 80185bc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80185be:	f7f0 fe6d 	bl	800929c <osKernelSysTick>
 80185c2:	4602      	mov	r2, r0
 80185c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185c6:	1ad3      	subs	r3, r2, r3
 80185c8:	e019      	b.n	80185fe <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80185ca:	f04f 33ff 	mov.w	r3, #4294967295
 80185ce:	e016      	b.n	80185fe <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80185d0:	69fb      	ldr	r3, [r7, #28]
 80185d2:	6819      	ldr	r1, [r3, #0]
 80185d4:	463b      	mov	r3, r7
 80185d6:	f04f 32ff 	mov.w	r2, #4294967295
 80185da:	4618      	mov	r0, r3
 80185dc:	f7f1 f888 	bl	80096f0 <osMessageGet>
 80185e0:	f107 0320 	add.w	r3, r7, #32
 80185e4:	463a      	mov	r2, r7
 80185e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80185e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80185ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185ee:	461a      	mov	r2, r3
 80185f0:	69bb      	ldr	r3, [r7, #24]
 80185f2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80185f4:	f7f0 fe52 	bl	800929c <osKernelSysTick>
 80185f8:	4602      	mov	r2, r0
 80185fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185fc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80185fe:	4618      	mov	r0, r3
 8018600:	3730      	adds	r7, #48	@ 0x30
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}

08018606 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018606:	b480      	push	{r7}
 8018608:	b083      	sub	sp, #12
 801860a:	af00      	add	r7, sp, #0
 801860c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d101      	bne.n	801861a <sys_mbox_valid+0x14>
    return 0;
 8018616:	2300      	movs	r3, #0
 8018618:	e000      	b.n	801861c <sys_mbox_valid+0x16>
  else
    return 1;
 801861a:	2301      	movs	r3, #1
}
 801861c:	4618      	mov	r0, r3
 801861e:	370c      	adds	r7, #12
 8018620:	46bd      	mov	sp, r7
 8018622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018626:	4770      	bx	lr

08018628 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018628:	b580      	push	{r7, lr}
 801862a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801862c:	4803      	ldr	r0, [pc, #12]	@ (801863c <sys_init+0x14>)
 801862e:	f7f0 fea5 	bl	800937c <osMutexCreate>
 8018632:	4603      	mov	r3, r0
 8018634:	4a02      	ldr	r2, [pc, #8]	@ (8018640 <sys_init+0x18>)
 8018636:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018638:	bf00      	nop
 801863a:	bd80      	pop	{r7, pc}
 801863c:	0801c7d8 	.word	0x0801c7d8
 8018640:	2400eaf8 	.word	0x2400eaf8

08018644 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801864c:	2300      	movs	r3, #0
 801864e:	60bb      	str	r3, [r7, #8]
 8018650:	2300      	movs	r3, #0
 8018652:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018654:	f107 0308 	add.w	r3, r7, #8
 8018658:	4618      	mov	r0, r3
 801865a:	f7f0 fe8f 	bl	800937c <osMutexCreate>
 801865e:	4602      	mov	r2, r0
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d102      	bne.n	8018672 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801866c:	f04f 33ff 	mov.w	r3, #4294967295
 8018670:	e000      	b.n	8018674 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018672:	2300      	movs	r3, #0
}
 8018674:	4618      	mov	r0, r3
 8018676:	3710      	adds	r7, #16
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b082      	sub	sp, #8
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	f04f 31ff 	mov.w	r1, #4294967295
 801868c:	4618      	mov	r0, r3
 801868e:	f7f0 fe8d 	bl	80093ac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018692:	bf00      	nop
 8018694:	3708      	adds	r7, #8
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}

0801869a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801869a:	b580      	push	{r7, lr}
 801869c:	b082      	sub	sp, #8
 801869e:	af00      	add	r7, sp, #0
 80186a0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	4618      	mov	r0, r3
 80186a8:	f7f0 fece 	bl	8009448 <osMutexRelease>
}
 80186ac:	bf00      	nop
 80186ae:	3708      	adds	r7, #8
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd80      	pop	{r7, pc}

080186b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b08c      	sub	sp, #48	@ 0x30
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	60f8      	str	r0, [r7, #12]
 80186bc:	60b9      	str	r1, [r7, #8]
 80186be:	607a      	str	r2, [r7, #4]
 80186c0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80186c2:	f107 0314 	add.w	r3, r7, #20
 80186c6:	2200      	movs	r2, #0
 80186c8:	601a      	str	r2, [r3, #0]
 80186ca:	605a      	str	r2, [r3, #4]
 80186cc:	609a      	str	r2, [r3, #8]
 80186ce:	60da      	str	r2, [r3, #12]
 80186d0:	611a      	str	r2, [r3, #16]
 80186d2:	615a      	str	r2, [r3, #20]
 80186d4:	619a      	str	r2, [r3, #24]
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	617b      	str	r3, [r7, #20]
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	61bb      	str	r3, [r7, #24]
 80186de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186e0:	b21b      	sxth	r3, r3
 80186e2:	83bb      	strh	r3, [r7, #28]
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80186e8:	f107 0314 	add.w	r3, r7, #20
 80186ec:	6879      	ldr	r1, [r7, #4]
 80186ee:	4618      	mov	r0, r3
 80186f0:	f7f0 fde4 	bl	80092bc <osThreadCreate>
 80186f4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80186f6:	4618      	mov	r0, r3
 80186f8:	3730      	adds	r7, #48	@ 0x30
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
	...

08018700 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018704:	4b04      	ldr	r3, [pc, #16]	@ (8018718 <sys_arch_protect+0x18>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	f04f 31ff 	mov.w	r1, #4294967295
 801870c:	4618      	mov	r0, r3
 801870e:	f7f0 fe4d 	bl	80093ac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018712:	2301      	movs	r3, #1
}
 8018714:	4618      	mov	r0, r3
 8018716:	bd80      	pop	{r7, pc}
 8018718:	2400eaf8 	.word	0x2400eaf8

0801871c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801871c:	b580      	push	{r7, lr}
 801871e:	b082      	sub	sp, #8
 8018720:	af00      	add	r7, sp, #0
 8018722:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018724:	4b04      	ldr	r3, [pc, #16]	@ (8018738 <sys_arch_unprotect+0x1c>)
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	4618      	mov	r0, r3
 801872a:	f7f0 fe8d 	bl	8009448 <osMutexRelease>
}
 801872e:	bf00      	nop
 8018730:	3708      	adds	r7, #8
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}
 8018736:	bf00      	nop
 8018738:	2400eaf8 	.word	0x2400eaf8

0801873c <rand>:
 801873c:	4b16      	ldr	r3, [pc, #88]	@ (8018798 <rand+0x5c>)
 801873e:	b510      	push	{r4, lr}
 8018740:	681c      	ldr	r4, [r3, #0]
 8018742:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018744:	b9b3      	cbnz	r3, 8018774 <rand+0x38>
 8018746:	2018      	movs	r0, #24
 8018748:	f000 fa00 	bl	8018b4c <malloc>
 801874c:	4602      	mov	r2, r0
 801874e:	6320      	str	r0, [r4, #48]	@ 0x30
 8018750:	b920      	cbnz	r0, 801875c <rand+0x20>
 8018752:	4b12      	ldr	r3, [pc, #72]	@ (801879c <rand+0x60>)
 8018754:	4812      	ldr	r0, [pc, #72]	@ (80187a0 <rand+0x64>)
 8018756:	2152      	movs	r1, #82	@ 0x52
 8018758:	f000 f9da 	bl	8018b10 <__assert_func>
 801875c:	4911      	ldr	r1, [pc, #68]	@ (80187a4 <rand+0x68>)
 801875e:	4b12      	ldr	r3, [pc, #72]	@ (80187a8 <rand+0x6c>)
 8018760:	e9c0 1300 	strd	r1, r3, [r0]
 8018764:	4b11      	ldr	r3, [pc, #68]	@ (80187ac <rand+0x70>)
 8018766:	6083      	str	r3, [r0, #8]
 8018768:	230b      	movs	r3, #11
 801876a:	8183      	strh	r3, [r0, #12]
 801876c:	2100      	movs	r1, #0
 801876e:	2001      	movs	r0, #1
 8018770:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018774:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018776:	480e      	ldr	r0, [pc, #56]	@ (80187b0 <rand+0x74>)
 8018778:	690b      	ldr	r3, [r1, #16]
 801877a:	694c      	ldr	r4, [r1, #20]
 801877c:	4a0d      	ldr	r2, [pc, #52]	@ (80187b4 <rand+0x78>)
 801877e:	4358      	muls	r0, r3
 8018780:	fb02 0004 	mla	r0, r2, r4, r0
 8018784:	fba3 3202 	umull	r3, r2, r3, r2
 8018788:	3301      	adds	r3, #1
 801878a:	eb40 0002 	adc.w	r0, r0, r2
 801878e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018792:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018796:	bd10      	pop	{r4, pc}
 8018798:	24000044 	.word	0x24000044
 801879c:	0801c7e0 	.word	0x0801c7e0
 80187a0:	0801c7f7 	.word	0x0801c7f7
 80187a4:	abcd330e 	.word	0xabcd330e
 80187a8:	e66d1234 	.word	0xe66d1234
 80187ac:	0005deec 	.word	0x0005deec
 80187b0:	5851f42d 	.word	0x5851f42d
 80187b4:	4c957f2d 	.word	0x4c957f2d

080187b8 <std>:
 80187b8:	2300      	movs	r3, #0
 80187ba:	b510      	push	{r4, lr}
 80187bc:	4604      	mov	r4, r0
 80187be:	e9c0 3300 	strd	r3, r3, [r0]
 80187c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80187c6:	6083      	str	r3, [r0, #8]
 80187c8:	8181      	strh	r1, [r0, #12]
 80187ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80187cc:	81c2      	strh	r2, [r0, #14]
 80187ce:	6183      	str	r3, [r0, #24]
 80187d0:	4619      	mov	r1, r3
 80187d2:	2208      	movs	r2, #8
 80187d4:	305c      	adds	r0, #92	@ 0x5c
 80187d6:	f000 f916 	bl	8018a06 <memset>
 80187da:	4b0d      	ldr	r3, [pc, #52]	@ (8018810 <std+0x58>)
 80187dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80187de:	4b0d      	ldr	r3, [pc, #52]	@ (8018814 <std+0x5c>)
 80187e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80187e2:	4b0d      	ldr	r3, [pc, #52]	@ (8018818 <std+0x60>)
 80187e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80187e6:	4b0d      	ldr	r3, [pc, #52]	@ (801881c <std+0x64>)
 80187e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80187ea:	4b0d      	ldr	r3, [pc, #52]	@ (8018820 <std+0x68>)
 80187ec:	6224      	str	r4, [r4, #32]
 80187ee:	429c      	cmp	r4, r3
 80187f0:	d006      	beq.n	8018800 <std+0x48>
 80187f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80187f6:	4294      	cmp	r4, r2
 80187f8:	d002      	beq.n	8018800 <std+0x48>
 80187fa:	33d0      	adds	r3, #208	@ 0xd0
 80187fc:	429c      	cmp	r4, r3
 80187fe:	d105      	bne.n	801880c <std+0x54>
 8018800:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018808:	f000 b970 	b.w	8018aec <__retarget_lock_init_recursive>
 801880c:	bd10      	pop	{r4, pc}
 801880e:	bf00      	nop
 8018810:	08018961 	.word	0x08018961
 8018814:	08018983 	.word	0x08018983
 8018818:	080189bb 	.word	0x080189bb
 801881c:	080189df 	.word	0x080189df
 8018820:	2400eafc 	.word	0x2400eafc

08018824 <stdio_exit_handler>:
 8018824:	4a02      	ldr	r2, [pc, #8]	@ (8018830 <stdio_exit_handler+0xc>)
 8018826:	4903      	ldr	r1, [pc, #12]	@ (8018834 <stdio_exit_handler+0x10>)
 8018828:	4803      	ldr	r0, [pc, #12]	@ (8018838 <stdio_exit_handler+0x14>)
 801882a:	f000 b869 	b.w	8018900 <_fwalk_sglue>
 801882e:	bf00      	nop
 8018830:	24000038 	.word	0x24000038
 8018834:	08019361 	.word	0x08019361
 8018838:	24000048 	.word	0x24000048

0801883c <cleanup_stdio>:
 801883c:	6841      	ldr	r1, [r0, #4]
 801883e:	4b0c      	ldr	r3, [pc, #48]	@ (8018870 <cleanup_stdio+0x34>)
 8018840:	4299      	cmp	r1, r3
 8018842:	b510      	push	{r4, lr}
 8018844:	4604      	mov	r4, r0
 8018846:	d001      	beq.n	801884c <cleanup_stdio+0x10>
 8018848:	f000 fd8a 	bl	8019360 <_fflush_r>
 801884c:	68a1      	ldr	r1, [r4, #8]
 801884e:	4b09      	ldr	r3, [pc, #36]	@ (8018874 <cleanup_stdio+0x38>)
 8018850:	4299      	cmp	r1, r3
 8018852:	d002      	beq.n	801885a <cleanup_stdio+0x1e>
 8018854:	4620      	mov	r0, r4
 8018856:	f000 fd83 	bl	8019360 <_fflush_r>
 801885a:	68e1      	ldr	r1, [r4, #12]
 801885c:	4b06      	ldr	r3, [pc, #24]	@ (8018878 <cleanup_stdio+0x3c>)
 801885e:	4299      	cmp	r1, r3
 8018860:	d004      	beq.n	801886c <cleanup_stdio+0x30>
 8018862:	4620      	mov	r0, r4
 8018864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018868:	f000 bd7a 	b.w	8019360 <_fflush_r>
 801886c:	bd10      	pop	{r4, pc}
 801886e:	bf00      	nop
 8018870:	2400eafc 	.word	0x2400eafc
 8018874:	2400eb64 	.word	0x2400eb64
 8018878:	2400ebcc 	.word	0x2400ebcc

0801887c <global_stdio_init.part.0>:
 801887c:	b510      	push	{r4, lr}
 801887e:	4b0b      	ldr	r3, [pc, #44]	@ (80188ac <global_stdio_init.part.0+0x30>)
 8018880:	4c0b      	ldr	r4, [pc, #44]	@ (80188b0 <global_stdio_init.part.0+0x34>)
 8018882:	4a0c      	ldr	r2, [pc, #48]	@ (80188b4 <global_stdio_init.part.0+0x38>)
 8018884:	601a      	str	r2, [r3, #0]
 8018886:	4620      	mov	r0, r4
 8018888:	2200      	movs	r2, #0
 801888a:	2104      	movs	r1, #4
 801888c:	f7ff ff94 	bl	80187b8 <std>
 8018890:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018894:	2201      	movs	r2, #1
 8018896:	2109      	movs	r1, #9
 8018898:	f7ff ff8e 	bl	80187b8 <std>
 801889c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80188a0:	2202      	movs	r2, #2
 80188a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188a6:	2112      	movs	r1, #18
 80188a8:	f7ff bf86 	b.w	80187b8 <std>
 80188ac:	2400ec34 	.word	0x2400ec34
 80188b0:	2400eafc 	.word	0x2400eafc
 80188b4:	08018825 	.word	0x08018825

080188b8 <__sfp_lock_acquire>:
 80188b8:	4801      	ldr	r0, [pc, #4]	@ (80188c0 <__sfp_lock_acquire+0x8>)
 80188ba:	f000 b918 	b.w	8018aee <__retarget_lock_acquire_recursive>
 80188be:	bf00      	nop
 80188c0:	2400ec39 	.word	0x2400ec39

080188c4 <__sfp_lock_release>:
 80188c4:	4801      	ldr	r0, [pc, #4]	@ (80188cc <__sfp_lock_release+0x8>)
 80188c6:	f000 b913 	b.w	8018af0 <__retarget_lock_release_recursive>
 80188ca:	bf00      	nop
 80188cc:	2400ec39 	.word	0x2400ec39

080188d0 <__sinit>:
 80188d0:	b510      	push	{r4, lr}
 80188d2:	4604      	mov	r4, r0
 80188d4:	f7ff fff0 	bl	80188b8 <__sfp_lock_acquire>
 80188d8:	6a23      	ldr	r3, [r4, #32]
 80188da:	b11b      	cbz	r3, 80188e4 <__sinit+0x14>
 80188dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188e0:	f7ff bff0 	b.w	80188c4 <__sfp_lock_release>
 80188e4:	4b04      	ldr	r3, [pc, #16]	@ (80188f8 <__sinit+0x28>)
 80188e6:	6223      	str	r3, [r4, #32]
 80188e8:	4b04      	ldr	r3, [pc, #16]	@ (80188fc <__sinit+0x2c>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d1f5      	bne.n	80188dc <__sinit+0xc>
 80188f0:	f7ff ffc4 	bl	801887c <global_stdio_init.part.0>
 80188f4:	e7f2      	b.n	80188dc <__sinit+0xc>
 80188f6:	bf00      	nop
 80188f8:	0801883d 	.word	0x0801883d
 80188fc:	2400ec34 	.word	0x2400ec34

08018900 <_fwalk_sglue>:
 8018900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018904:	4607      	mov	r7, r0
 8018906:	4688      	mov	r8, r1
 8018908:	4614      	mov	r4, r2
 801890a:	2600      	movs	r6, #0
 801890c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018910:	f1b9 0901 	subs.w	r9, r9, #1
 8018914:	d505      	bpl.n	8018922 <_fwalk_sglue+0x22>
 8018916:	6824      	ldr	r4, [r4, #0]
 8018918:	2c00      	cmp	r4, #0
 801891a:	d1f7      	bne.n	801890c <_fwalk_sglue+0xc>
 801891c:	4630      	mov	r0, r6
 801891e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018922:	89ab      	ldrh	r3, [r5, #12]
 8018924:	2b01      	cmp	r3, #1
 8018926:	d907      	bls.n	8018938 <_fwalk_sglue+0x38>
 8018928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801892c:	3301      	adds	r3, #1
 801892e:	d003      	beq.n	8018938 <_fwalk_sglue+0x38>
 8018930:	4629      	mov	r1, r5
 8018932:	4638      	mov	r0, r7
 8018934:	47c0      	blx	r8
 8018936:	4306      	orrs	r6, r0
 8018938:	3568      	adds	r5, #104	@ 0x68
 801893a:	e7e9      	b.n	8018910 <_fwalk_sglue+0x10>

0801893c <iprintf>:
 801893c:	b40f      	push	{r0, r1, r2, r3}
 801893e:	b507      	push	{r0, r1, r2, lr}
 8018940:	4906      	ldr	r1, [pc, #24]	@ (801895c <iprintf+0x20>)
 8018942:	ab04      	add	r3, sp, #16
 8018944:	6808      	ldr	r0, [r1, #0]
 8018946:	f853 2b04 	ldr.w	r2, [r3], #4
 801894a:	6881      	ldr	r1, [r0, #8]
 801894c:	9301      	str	r3, [sp, #4]
 801894e:	f000 f9dd 	bl	8018d0c <_vfiprintf_r>
 8018952:	b003      	add	sp, #12
 8018954:	f85d eb04 	ldr.w	lr, [sp], #4
 8018958:	b004      	add	sp, #16
 801895a:	4770      	bx	lr
 801895c:	24000044 	.word	0x24000044

08018960 <__sread>:
 8018960:	b510      	push	{r4, lr}
 8018962:	460c      	mov	r4, r1
 8018964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018968:	f000 f878 	bl	8018a5c <_read_r>
 801896c:	2800      	cmp	r0, #0
 801896e:	bfab      	itete	ge
 8018970:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018972:	89a3      	ldrhlt	r3, [r4, #12]
 8018974:	181b      	addge	r3, r3, r0
 8018976:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801897a:	bfac      	ite	ge
 801897c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801897e:	81a3      	strhlt	r3, [r4, #12]
 8018980:	bd10      	pop	{r4, pc}

08018982 <__swrite>:
 8018982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018986:	461f      	mov	r7, r3
 8018988:	898b      	ldrh	r3, [r1, #12]
 801898a:	05db      	lsls	r3, r3, #23
 801898c:	4605      	mov	r5, r0
 801898e:	460c      	mov	r4, r1
 8018990:	4616      	mov	r6, r2
 8018992:	d505      	bpl.n	80189a0 <__swrite+0x1e>
 8018994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018998:	2302      	movs	r3, #2
 801899a:	2200      	movs	r2, #0
 801899c:	f000 f84c 	bl	8018a38 <_lseek_r>
 80189a0:	89a3      	ldrh	r3, [r4, #12]
 80189a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80189aa:	81a3      	strh	r3, [r4, #12]
 80189ac:	4632      	mov	r2, r6
 80189ae:	463b      	mov	r3, r7
 80189b0:	4628      	mov	r0, r5
 80189b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189b6:	f000 b863 	b.w	8018a80 <_write_r>

080189ba <__sseek>:
 80189ba:	b510      	push	{r4, lr}
 80189bc:	460c      	mov	r4, r1
 80189be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189c2:	f000 f839 	bl	8018a38 <_lseek_r>
 80189c6:	1c43      	adds	r3, r0, #1
 80189c8:	89a3      	ldrh	r3, [r4, #12]
 80189ca:	bf15      	itete	ne
 80189cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80189ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80189d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80189d6:	81a3      	strheq	r3, [r4, #12]
 80189d8:	bf18      	it	ne
 80189da:	81a3      	strhne	r3, [r4, #12]
 80189dc:	bd10      	pop	{r4, pc}

080189de <__sclose>:
 80189de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189e2:	f000 b819 	b.w	8018a18 <_close_r>

080189e6 <memcmp>:
 80189e6:	b510      	push	{r4, lr}
 80189e8:	3901      	subs	r1, #1
 80189ea:	4402      	add	r2, r0
 80189ec:	4290      	cmp	r0, r2
 80189ee:	d101      	bne.n	80189f4 <memcmp+0xe>
 80189f0:	2000      	movs	r0, #0
 80189f2:	e005      	b.n	8018a00 <memcmp+0x1a>
 80189f4:	7803      	ldrb	r3, [r0, #0]
 80189f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80189fa:	42a3      	cmp	r3, r4
 80189fc:	d001      	beq.n	8018a02 <memcmp+0x1c>
 80189fe:	1b18      	subs	r0, r3, r4
 8018a00:	bd10      	pop	{r4, pc}
 8018a02:	3001      	adds	r0, #1
 8018a04:	e7f2      	b.n	80189ec <memcmp+0x6>

08018a06 <memset>:
 8018a06:	4402      	add	r2, r0
 8018a08:	4603      	mov	r3, r0
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	d100      	bne.n	8018a10 <memset+0xa>
 8018a0e:	4770      	bx	lr
 8018a10:	f803 1b01 	strb.w	r1, [r3], #1
 8018a14:	e7f9      	b.n	8018a0a <memset+0x4>
	...

08018a18 <_close_r>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	4d06      	ldr	r5, [pc, #24]	@ (8018a34 <_close_r+0x1c>)
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	4604      	mov	r4, r0
 8018a20:	4608      	mov	r0, r1
 8018a22:	602b      	str	r3, [r5, #0]
 8018a24:	f7e8 ffee 	bl	8001a04 <_close>
 8018a28:	1c43      	adds	r3, r0, #1
 8018a2a:	d102      	bne.n	8018a32 <_close_r+0x1a>
 8018a2c:	682b      	ldr	r3, [r5, #0]
 8018a2e:	b103      	cbz	r3, 8018a32 <_close_r+0x1a>
 8018a30:	6023      	str	r3, [r4, #0]
 8018a32:	bd38      	pop	{r3, r4, r5, pc}
 8018a34:	2400eaf4 	.word	0x2400eaf4

08018a38 <_lseek_r>:
 8018a38:	b538      	push	{r3, r4, r5, lr}
 8018a3a:	4d07      	ldr	r5, [pc, #28]	@ (8018a58 <_lseek_r+0x20>)
 8018a3c:	4604      	mov	r4, r0
 8018a3e:	4608      	mov	r0, r1
 8018a40:	4611      	mov	r1, r2
 8018a42:	2200      	movs	r2, #0
 8018a44:	602a      	str	r2, [r5, #0]
 8018a46:	461a      	mov	r2, r3
 8018a48:	f7e9 f803 	bl	8001a52 <_lseek>
 8018a4c:	1c43      	adds	r3, r0, #1
 8018a4e:	d102      	bne.n	8018a56 <_lseek_r+0x1e>
 8018a50:	682b      	ldr	r3, [r5, #0]
 8018a52:	b103      	cbz	r3, 8018a56 <_lseek_r+0x1e>
 8018a54:	6023      	str	r3, [r4, #0]
 8018a56:	bd38      	pop	{r3, r4, r5, pc}
 8018a58:	2400eaf4 	.word	0x2400eaf4

08018a5c <_read_r>:
 8018a5c:	b538      	push	{r3, r4, r5, lr}
 8018a5e:	4d07      	ldr	r5, [pc, #28]	@ (8018a7c <_read_r+0x20>)
 8018a60:	4604      	mov	r4, r0
 8018a62:	4608      	mov	r0, r1
 8018a64:	4611      	mov	r1, r2
 8018a66:	2200      	movs	r2, #0
 8018a68:	602a      	str	r2, [r5, #0]
 8018a6a:	461a      	mov	r2, r3
 8018a6c:	f7e8 ff91 	bl	8001992 <_read>
 8018a70:	1c43      	adds	r3, r0, #1
 8018a72:	d102      	bne.n	8018a7a <_read_r+0x1e>
 8018a74:	682b      	ldr	r3, [r5, #0]
 8018a76:	b103      	cbz	r3, 8018a7a <_read_r+0x1e>
 8018a78:	6023      	str	r3, [r4, #0]
 8018a7a:	bd38      	pop	{r3, r4, r5, pc}
 8018a7c:	2400eaf4 	.word	0x2400eaf4

08018a80 <_write_r>:
 8018a80:	b538      	push	{r3, r4, r5, lr}
 8018a82:	4d07      	ldr	r5, [pc, #28]	@ (8018aa0 <_write_r+0x20>)
 8018a84:	4604      	mov	r4, r0
 8018a86:	4608      	mov	r0, r1
 8018a88:	4611      	mov	r1, r2
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	602a      	str	r2, [r5, #0]
 8018a8e:	461a      	mov	r2, r3
 8018a90:	f7e8 ff9c 	bl	80019cc <_write>
 8018a94:	1c43      	adds	r3, r0, #1
 8018a96:	d102      	bne.n	8018a9e <_write_r+0x1e>
 8018a98:	682b      	ldr	r3, [r5, #0]
 8018a9a:	b103      	cbz	r3, 8018a9e <_write_r+0x1e>
 8018a9c:	6023      	str	r3, [r4, #0]
 8018a9e:	bd38      	pop	{r3, r4, r5, pc}
 8018aa0:	2400eaf4 	.word	0x2400eaf4

08018aa4 <__libc_init_array>:
 8018aa4:	b570      	push	{r4, r5, r6, lr}
 8018aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8018adc <__libc_init_array+0x38>)
 8018aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8018ae0 <__libc_init_array+0x3c>)
 8018aaa:	1b64      	subs	r4, r4, r5
 8018aac:	10a4      	asrs	r4, r4, #2
 8018aae:	2600      	movs	r6, #0
 8018ab0:	42a6      	cmp	r6, r4
 8018ab2:	d109      	bne.n	8018ac8 <__libc_init_array+0x24>
 8018ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8018ae4 <__libc_init_array+0x40>)
 8018ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8018ae8 <__libc_init_array+0x44>)
 8018ab8:	f000 fe4a 	bl	8019750 <_init>
 8018abc:	1b64      	subs	r4, r4, r5
 8018abe:	10a4      	asrs	r4, r4, #2
 8018ac0:	2600      	movs	r6, #0
 8018ac2:	42a6      	cmp	r6, r4
 8018ac4:	d105      	bne.n	8018ad2 <__libc_init_array+0x2e>
 8018ac6:	bd70      	pop	{r4, r5, r6, pc}
 8018ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8018acc:	4798      	blx	r3
 8018ace:	3601      	adds	r6, #1
 8018ad0:	e7ee      	b.n	8018ab0 <__libc_init_array+0xc>
 8018ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ad6:	4798      	blx	r3
 8018ad8:	3601      	adds	r6, #1
 8018ada:	e7f2      	b.n	8018ac2 <__libc_init_array+0x1e>
 8018adc:	0801c8c8 	.word	0x0801c8c8
 8018ae0:	0801c8c8 	.word	0x0801c8c8
 8018ae4:	0801c8c8 	.word	0x0801c8c8
 8018ae8:	0801c8cc 	.word	0x0801c8cc

08018aec <__retarget_lock_init_recursive>:
 8018aec:	4770      	bx	lr

08018aee <__retarget_lock_acquire_recursive>:
 8018aee:	4770      	bx	lr

08018af0 <__retarget_lock_release_recursive>:
 8018af0:	4770      	bx	lr

08018af2 <memcpy>:
 8018af2:	440a      	add	r2, r1
 8018af4:	4291      	cmp	r1, r2
 8018af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8018afa:	d100      	bne.n	8018afe <memcpy+0xc>
 8018afc:	4770      	bx	lr
 8018afe:	b510      	push	{r4, lr}
 8018b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b08:	4291      	cmp	r1, r2
 8018b0a:	d1f9      	bne.n	8018b00 <memcpy+0xe>
 8018b0c:	bd10      	pop	{r4, pc}
	...

08018b10 <__assert_func>:
 8018b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b12:	4614      	mov	r4, r2
 8018b14:	461a      	mov	r2, r3
 8018b16:	4b09      	ldr	r3, [pc, #36]	@ (8018b3c <__assert_func+0x2c>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	4605      	mov	r5, r0
 8018b1c:	68d8      	ldr	r0, [r3, #12]
 8018b1e:	b954      	cbnz	r4, 8018b36 <__assert_func+0x26>
 8018b20:	4b07      	ldr	r3, [pc, #28]	@ (8018b40 <__assert_func+0x30>)
 8018b22:	461c      	mov	r4, r3
 8018b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b28:	9100      	str	r1, [sp, #0]
 8018b2a:	462b      	mov	r3, r5
 8018b2c:	4905      	ldr	r1, [pc, #20]	@ (8018b44 <__assert_func+0x34>)
 8018b2e:	f000 fc3f 	bl	80193b0 <fiprintf>
 8018b32:	f000 fcf3 	bl	801951c <abort>
 8018b36:	4b04      	ldr	r3, [pc, #16]	@ (8018b48 <__assert_func+0x38>)
 8018b38:	e7f4      	b.n	8018b24 <__assert_func+0x14>
 8018b3a:	bf00      	nop
 8018b3c:	24000044 	.word	0x24000044
 8018b40:	0801c88a 	.word	0x0801c88a
 8018b44:	0801c85c 	.word	0x0801c85c
 8018b48:	0801c84f 	.word	0x0801c84f

08018b4c <malloc>:
 8018b4c:	4b02      	ldr	r3, [pc, #8]	@ (8018b58 <malloc+0xc>)
 8018b4e:	4601      	mov	r1, r0
 8018b50:	6818      	ldr	r0, [r3, #0]
 8018b52:	f000 b825 	b.w	8018ba0 <_malloc_r>
 8018b56:	bf00      	nop
 8018b58:	24000044 	.word	0x24000044

08018b5c <sbrk_aligned>:
 8018b5c:	b570      	push	{r4, r5, r6, lr}
 8018b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8018b9c <sbrk_aligned+0x40>)
 8018b60:	460c      	mov	r4, r1
 8018b62:	6831      	ldr	r1, [r6, #0]
 8018b64:	4605      	mov	r5, r0
 8018b66:	b911      	cbnz	r1, 8018b6e <sbrk_aligned+0x12>
 8018b68:	f000 fcc8 	bl	80194fc <_sbrk_r>
 8018b6c:	6030      	str	r0, [r6, #0]
 8018b6e:	4621      	mov	r1, r4
 8018b70:	4628      	mov	r0, r5
 8018b72:	f000 fcc3 	bl	80194fc <_sbrk_r>
 8018b76:	1c43      	adds	r3, r0, #1
 8018b78:	d103      	bne.n	8018b82 <sbrk_aligned+0x26>
 8018b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8018b7e:	4620      	mov	r0, r4
 8018b80:	bd70      	pop	{r4, r5, r6, pc}
 8018b82:	1cc4      	adds	r4, r0, #3
 8018b84:	f024 0403 	bic.w	r4, r4, #3
 8018b88:	42a0      	cmp	r0, r4
 8018b8a:	d0f8      	beq.n	8018b7e <sbrk_aligned+0x22>
 8018b8c:	1a21      	subs	r1, r4, r0
 8018b8e:	4628      	mov	r0, r5
 8018b90:	f000 fcb4 	bl	80194fc <_sbrk_r>
 8018b94:	3001      	adds	r0, #1
 8018b96:	d1f2      	bne.n	8018b7e <sbrk_aligned+0x22>
 8018b98:	e7ef      	b.n	8018b7a <sbrk_aligned+0x1e>
 8018b9a:	bf00      	nop
 8018b9c:	2400ec3c 	.word	0x2400ec3c

08018ba0 <_malloc_r>:
 8018ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ba4:	1ccd      	adds	r5, r1, #3
 8018ba6:	f025 0503 	bic.w	r5, r5, #3
 8018baa:	3508      	adds	r5, #8
 8018bac:	2d0c      	cmp	r5, #12
 8018bae:	bf38      	it	cc
 8018bb0:	250c      	movcc	r5, #12
 8018bb2:	2d00      	cmp	r5, #0
 8018bb4:	4606      	mov	r6, r0
 8018bb6:	db01      	blt.n	8018bbc <_malloc_r+0x1c>
 8018bb8:	42a9      	cmp	r1, r5
 8018bba:	d904      	bls.n	8018bc6 <_malloc_r+0x26>
 8018bbc:	230c      	movs	r3, #12
 8018bbe:	6033      	str	r3, [r6, #0]
 8018bc0:	2000      	movs	r0, #0
 8018bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018c9c <_malloc_r+0xfc>
 8018bca:	f000 f869 	bl	8018ca0 <__malloc_lock>
 8018bce:	f8d8 3000 	ldr.w	r3, [r8]
 8018bd2:	461c      	mov	r4, r3
 8018bd4:	bb44      	cbnz	r4, 8018c28 <_malloc_r+0x88>
 8018bd6:	4629      	mov	r1, r5
 8018bd8:	4630      	mov	r0, r6
 8018bda:	f7ff ffbf 	bl	8018b5c <sbrk_aligned>
 8018bde:	1c43      	adds	r3, r0, #1
 8018be0:	4604      	mov	r4, r0
 8018be2:	d158      	bne.n	8018c96 <_malloc_r+0xf6>
 8018be4:	f8d8 4000 	ldr.w	r4, [r8]
 8018be8:	4627      	mov	r7, r4
 8018bea:	2f00      	cmp	r7, #0
 8018bec:	d143      	bne.n	8018c76 <_malloc_r+0xd6>
 8018bee:	2c00      	cmp	r4, #0
 8018bf0:	d04b      	beq.n	8018c8a <_malloc_r+0xea>
 8018bf2:	6823      	ldr	r3, [r4, #0]
 8018bf4:	4639      	mov	r1, r7
 8018bf6:	4630      	mov	r0, r6
 8018bf8:	eb04 0903 	add.w	r9, r4, r3
 8018bfc:	f000 fc7e 	bl	80194fc <_sbrk_r>
 8018c00:	4581      	cmp	r9, r0
 8018c02:	d142      	bne.n	8018c8a <_malloc_r+0xea>
 8018c04:	6821      	ldr	r1, [r4, #0]
 8018c06:	1a6d      	subs	r5, r5, r1
 8018c08:	4629      	mov	r1, r5
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	f7ff ffa6 	bl	8018b5c <sbrk_aligned>
 8018c10:	3001      	adds	r0, #1
 8018c12:	d03a      	beq.n	8018c8a <_malloc_r+0xea>
 8018c14:	6823      	ldr	r3, [r4, #0]
 8018c16:	442b      	add	r3, r5
 8018c18:	6023      	str	r3, [r4, #0]
 8018c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8018c1e:	685a      	ldr	r2, [r3, #4]
 8018c20:	bb62      	cbnz	r2, 8018c7c <_malloc_r+0xdc>
 8018c22:	f8c8 7000 	str.w	r7, [r8]
 8018c26:	e00f      	b.n	8018c48 <_malloc_r+0xa8>
 8018c28:	6822      	ldr	r2, [r4, #0]
 8018c2a:	1b52      	subs	r2, r2, r5
 8018c2c:	d420      	bmi.n	8018c70 <_malloc_r+0xd0>
 8018c2e:	2a0b      	cmp	r2, #11
 8018c30:	d917      	bls.n	8018c62 <_malloc_r+0xc2>
 8018c32:	1961      	adds	r1, r4, r5
 8018c34:	42a3      	cmp	r3, r4
 8018c36:	6025      	str	r5, [r4, #0]
 8018c38:	bf18      	it	ne
 8018c3a:	6059      	strne	r1, [r3, #4]
 8018c3c:	6863      	ldr	r3, [r4, #4]
 8018c3e:	bf08      	it	eq
 8018c40:	f8c8 1000 	streq.w	r1, [r8]
 8018c44:	5162      	str	r2, [r4, r5]
 8018c46:	604b      	str	r3, [r1, #4]
 8018c48:	4630      	mov	r0, r6
 8018c4a:	f000 f82f 	bl	8018cac <__malloc_unlock>
 8018c4e:	f104 000b 	add.w	r0, r4, #11
 8018c52:	1d23      	adds	r3, r4, #4
 8018c54:	f020 0007 	bic.w	r0, r0, #7
 8018c58:	1ac2      	subs	r2, r0, r3
 8018c5a:	bf1c      	itt	ne
 8018c5c:	1a1b      	subne	r3, r3, r0
 8018c5e:	50a3      	strne	r3, [r4, r2]
 8018c60:	e7af      	b.n	8018bc2 <_malloc_r+0x22>
 8018c62:	6862      	ldr	r2, [r4, #4]
 8018c64:	42a3      	cmp	r3, r4
 8018c66:	bf0c      	ite	eq
 8018c68:	f8c8 2000 	streq.w	r2, [r8]
 8018c6c:	605a      	strne	r2, [r3, #4]
 8018c6e:	e7eb      	b.n	8018c48 <_malloc_r+0xa8>
 8018c70:	4623      	mov	r3, r4
 8018c72:	6864      	ldr	r4, [r4, #4]
 8018c74:	e7ae      	b.n	8018bd4 <_malloc_r+0x34>
 8018c76:	463c      	mov	r4, r7
 8018c78:	687f      	ldr	r7, [r7, #4]
 8018c7a:	e7b6      	b.n	8018bea <_malloc_r+0x4a>
 8018c7c:	461a      	mov	r2, r3
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	42a3      	cmp	r3, r4
 8018c82:	d1fb      	bne.n	8018c7c <_malloc_r+0xdc>
 8018c84:	2300      	movs	r3, #0
 8018c86:	6053      	str	r3, [r2, #4]
 8018c88:	e7de      	b.n	8018c48 <_malloc_r+0xa8>
 8018c8a:	230c      	movs	r3, #12
 8018c8c:	6033      	str	r3, [r6, #0]
 8018c8e:	4630      	mov	r0, r6
 8018c90:	f000 f80c 	bl	8018cac <__malloc_unlock>
 8018c94:	e794      	b.n	8018bc0 <_malloc_r+0x20>
 8018c96:	6005      	str	r5, [r0, #0]
 8018c98:	e7d6      	b.n	8018c48 <_malloc_r+0xa8>
 8018c9a:	bf00      	nop
 8018c9c:	2400ec40 	.word	0x2400ec40

08018ca0 <__malloc_lock>:
 8018ca0:	4801      	ldr	r0, [pc, #4]	@ (8018ca8 <__malloc_lock+0x8>)
 8018ca2:	f7ff bf24 	b.w	8018aee <__retarget_lock_acquire_recursive>
 8018ca6:	bf00      	nop
 8018ca8:	2400ec38 	.word	0x2400ec38

08018cac <__malloc_unlock>:
 8018cac:	4801      	ldr	r0, [pc, #4]	@ (8018cb4 <__malloc_unlock+0x8>)
 8018cae:	f7ff bf1f 	b.w	8018af0 <__retarget_lock_release_recursive>
 8018cb2:	bf00      	nop
 8018cb4:	2400ec38 	.word	0x2400ec38

08018cb8 <__sfputc_r>:
 8018cb8:	6893      	ldr	r3, [r2, #8]
 8018cba:	3b01      	subs	r3, #1
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	b410      	push	{r4}
 8018cc0:	6093      	str	r3, [r2, #8]
 8018cc2:	da08      	bge.n	8018cd6 <__sfputc_r+0x1e>
 8018cc4:	6994      	ldr	r4, [r2, #24]
 8018cc6:	42a3      	cmp	r3, r4
 8018cc8:	db01      	blt.n	8018cce <__sfputc_r+0x16>
 8018cca:	290a      	cmp	r1, #10
 8018ccc:	d103      	bne.n	8018cd6 <__sfputc_r+0x1e>
 8018cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cd2:	f000 bb7f 	b.w	80193d4 <__swbuf_r>
 8018cd6:	6813      	ldr	r3, [r2, #0]
 8018cd8:	1c58      	adds	r0, r3, #1
 8018cda:	6010      	str	r0, [r2, #0]
 8018cdc:	7019      	strb	r1, [r3, #0]
 8018cde:	4608      	mov	r0, r1
 8018ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ce4:	4770      	bx	lr

08018ce6 <__sfputs_r>:
 8018ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ce8:	4606      	mov	r6, r0
 8018cea:	460f      	mov	r7, r1
 8018cec:	4614      	mov	r4, r2
 8018cee:	18d5      	adds	r5, r2, r3
 8018cf0:	42ac      	cmp	r4, r5
 8018cf2:	d101      	bne.n	8018cf8 <__sfputs_r+0x12>
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	e007      	b.n	8018d08 <__sfputs_r+0x22>
 8018cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cfc:	463a      	mov	r2, r7
 8018cfe:	4630      	mov	r0, r6
 8018d00:	f7ff ffda 	bl	8018cb8 <__sfputc_r>
 8018d04:	1c43      	adds	r3, r0, #1
 8018d06:	d1f3      	bne.n	8018cf0 <__sfputs_r+0xa>
 8018d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018d0c <_vfiprintf_r>:
 8018d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d10:	460d      	mov	r5, r1
 8018d12:	b09d      	sub	sp, #116	@ 0x74
 8018d14:	4614      	mov	r4, r2
 8018d16:	4698      	mov	r8, r3
 8018d18:	4606      	mov	r6, r0
 8018d1a:	b118      	cbz	r0, 8018d24 <_vfiprintf_r+0x18>
 8018d1c:	6a03      	ldr	r3, [r0, #32]
 8018d1e:	b90b      	cbnz	r3, 8018d24 <_vfiprintf_r+0x18>
 8018d20:	f7ff fdd6 	bl	80188d0 <__sinit>
 8018d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d26:	07d9      	lsls	r1, r3, #31
 8018d28:	d405      	bmi.n	8018d36 <_vfiprintf_r+0x2a>
 8018d2a:	89ab      	ldrh	r3, [r5, #12]
 8018d2c:	059a      	lsls	r2, r3, #22
 8018d2e:	d402      	bmi.n	8018d36 <_vfiprintf_r+0x2a>
 8018d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d32:	f7ff fedc 	bl	8018aee <__retarget_lock_acquire_recursive>
 8018d36:	89ab      	ldrh	r3, [r5, #12]
 8018d38:	071b      	lsls	r3, r3, #28
 8018d3a:	d501      	bpl.n	8018d40 <_vfiprintf_r+0x34>
 8018d3c:	692b      	ldr	r3, [r5, #16]
 8018d3e:	b99b      	cbnz	r3, 8018d68 <_vfiprintf_r+0x5c>
 8018d40:	4629      	mov	r1, r5
 8018d42:	4630      	mov	r0, r6
 8018d44:	f000 fb84 	bl	8019450 <__swsetup_r>
 8018d48:	b170      	cbz	r0, 8018d68 <_vfiprintf_r+0x5c>
 8018d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018d4c:	07dc      	lsls	r4, r3, #31
 8018d4e:	d504      	bpl.n	8018d5a <_vfiprintf_r+0x4e>
 8018d50:	f04f 30ff 	mov.w	r0, #4294967295
 8018d54:	b01d      	add	sp, #116	@ 0x74
 8018d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5a:	89ab      	ldrh	r3, [r5, #12]
 8018d5c:	0598      	lsls	r0, r3, #22
 8018d5e:	d4f7      	bmi.n	8018d50 <_vfiprintf_r+0x44>
 8018d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018d62:	f7ff fec5 	bl	8018af0 <__retarget_lock_release_recursive>
 8018d66:	e7f3      	b.n	8018d50 <_vfiprintf_r+0x44>
 8018d68:	2300      	movs	r3, #0
 8018d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d6c:	2320      	movs	r3, #32
 8018d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d76:	2330      	movs	r3, #48	@ 0x30
 8018d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018f28 <_vfiprintf_r+0x21c>
 8018d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018d80:	f04f 0901 	mov.w	r9, #1
 8018d84:	4623      	mov	r3, r4
 8018d86:	469a      	mov	sl, r3
 8018d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d8c:	b10a      	cbz	r2, 8018d92 <_vfiprintf_r+0x86>
 8018d8e:	2a25      	cmp	r2, #37	@ 0x25
 8018d90:	d1f9      	bne.n	8018d86 <_vfiprintf_r+0x7a>
 8018d92:	ebba 0b04 	subs.w	fp, sl, r4
 8018d96:	d00b      	beq.n	8018db0 <_vfiprintf_r+0xa4>
 8018d98:	465b      	mov	r3, fp
 8018d9a:	4622      	mov	r2, r4
 8018d9c:	4629      	mov	r1, r5
 8018d9e:	4630      	mov	r0, r6
 8018da0:	f7ff ffa1 	bl	8018ce6 <__sfputs_r>
 8018da4:	3001      	adds	r0, #1
 8018da6:	f000 80a7 	beq.w	8018ef8 <_vfiprintf_r+0x1ec>
 8018daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018dac:	445a      	add	r2, fp
 8018dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8018db0:	f89a 3000 	ldrb.w	r3, [sl]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	f000 809f 	beq.w	8018ef8 <_vfiprintf_r+0x1ec>
 8018dba:	2300      	movs	r3, #0
 8018dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8018dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018dc4:	f10a 0a01 	add.w	sl, sl, #1
 8018dc8:	9304      	str	r3, [sp, #16]
 8018dca:	9307      	str	r3, [sp, #28]
 8018dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8018dd2:	4654      	mov	r4, sl
 8018dd4:	2205      	movs	r2, #5
 8018dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dda:	4853      	ldr	r0, [pc, #332]	@ (8018f28 <_vfiprintf_r+0x21c>)
 8018ddc:	f7e7 fa98 	bl	8000310 <memchr>
 8018de0:	9a04      	ldr	r2, [sp, #16]
 8018de2:	b9d8      	cbnz	r0, 8018e1c <_vfiprintf_r+0x110>
 8018de4:	06d1      	lsls	r1, r2, #27
 8018de6:	bf44      	itt	mi
 8018de8:	2320      	movmi	r3, #32
 8018dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018dee:	0713      	lsls	r3, r2, #28
 8018df0:	bf44      	itt	mi
 8018df2:	232b      	movmi	r3, #43	@ 0x2b
 8018df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018df8:	f89a 3000 	ldrb.w	r3, [sl]
 8018dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8018dfe:	d015      	beq.n	8018e2c <_vfiprintf_r+0x120>
 8018e00:	9a07      	ldr	r2, [sp, #28]
 8018e02:	4654      	mov	r4, sl
 8018e04:	2000      	movs	r0, #0
 8018e06:	f04f 0c0a 	mov.w	ip, #10
 8018e0a:	4621      	mov	r1, r4
 8018e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e10:	3b30      	subs	r3, #48	@ 0x30
 8018e12:	2b09      	cmp	r3, #9
 8018e14:	d94b      	bls.n	8018eae <_vfiprintf_r+0x1a2>
 8018e16:	b1b0      	cbz	r0, 8018e46 <_vfiprintf_r+0x13a>
 8018e18:	9207      	str	r2, [sp, #28]
 8018e1a:	e014      	b.n	8018e46 <_vfiprintf_r+0x13a>
 8018e1c:	eba0 0308 	sub.w	r3, r0, r8
 8018e20:	fa09 f303 	lsl.w	r3, r9, r3
 8018e24:	4313      	orrs	r3, r2
 8018e26:	9304      	str	r3, [sp, #16]
 8018e28:	46a2      	mov	sl, r4
 8018e2a:	e7d2      	b.n	8018dd2 <_vfiprintf_r+0xc6>
 8018e2c:	9b03      	ldr	r3, [sp, #12]
 8018e2e:	1d19      	adds	r1, r3, #4
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	9103      	str	r1, [sp, #12]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	bfbb      	ittet	lt
 8018e38:	425b      	neglt	r3, r3
 8018e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8018e3e:	9307      	strge	r3, [sp, #28]
 8018e40:	9307      	strlt	r3, [sp, #28]
 8018e42:	bfb8      	it	lt
 8018e44:	9204      	strlt	r2, [sp, #16]
 8018e46:	7823      	ldrb	r3, [r4, #0]
 8018e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8018e4a:	d10a      	bne.n	8018e62 <_vfiprintf_r+0x156>
 8018e4c:	7863      	ldrb	r3, [r4, #1]
 8018e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e50:	d132      	bne.n	8018eb8 <_vfiprintf_r+0x1ac>
 8018e52:	9b03      	ldr	r3, [sp, #12]
 8018e54:	1d1a      	adds	r2, r3, #4
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	9203      	str	r2, [sp, #12]
 8018e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018e5e:	3402      	adds	r4, #2
 8018e60:	9305      	str	r3, [sp, #20]
 8018e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018f38 <_vfiprintf_r+0x22c>
 8018e66:	7821      	ldrb	r1, [r4, #0]
 8018e68:	2203      	movs	r2, #3
 8018e6a:	4650      	mov	r0, sl
 8018e6c:	f7e7 fa50 	bl	8000310 <memchr>
 8018e70:	b138      	cbz	r0, 8018e82 <_vfiprintf_r+0x176>
 8018e72:	9b04      	ldr	r3, [sp, #16]
 8018e74:	eba0 000a 	sub.w	r0, r0, sl
 8018e78:	2240      	movs	r2, #64	@ 0x40
 8018e7a:	4082      	lsls	r2, r0
 8018e7c:	4313      	orrs	r3, r2
 8018e7e:	3401      	adds	r4, #1
 8018e80:	9304      	str	r3, [sp, #16]
 8018e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e86:	4829      	ldr	r0, [pc, #164]	@ (8018f2c <_vfiprintf_r+0x220>)
 8018e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018e8c:	2206      	movs	r2, #6
 8018e8e:	f7e7 fa3f 	bl	8000310 <memchr>
 8018e92:	2800      	cmp	r0, #0
 8018e94:	d03f      	beq.n	8018f16 <_vfiprintf_r+0x20a>
 8018e96:	4b26      	ldr	r3, [pc, #152]	@ (8018f30 <_vfiprintf_r+0x224>)
 8018e98:	bb1b      	cbnz	r3, 8018ee2 <_vfiprintf_r+0x1d6>
 8018e9a:	9b03      	ldr	r3, [sp, #12]
 8018e9c:	3307      	adds	r3, #7
 8018e9e:	f023 0307 	bic.w	r3, r3, #7
 8018ea2:	3308      	adds	r3, #8
 8018ea4:	9303      	str	r3, [sp, #12]
 8018ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ea8:	443b      	add	r3, r7
 8018eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8018eac:	e76a      	b.n	8018d84 <_vfiprintf_r+0x78>
 8018eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8018eb2:	460c      	mov	r4, r1
 8018eb4:	2001      	movs	r0, #1
 8018eb6:	e7a8      	b.n	8018e0a <_vfiprintf_r+0xfe>
 8018eb8:	2300      	movs	r3, #0
 8018eba:	3401      	adds	r4, #1
 8018ebc:	9305      	str	r3, [sp, #20]
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	f04f 0c0a 	mov.w	ip, #10
 8018ec4:	4620      	mov	r0, r4
 8018ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018eca:	3a30      	subs	r2, #48	@ 0x30
 8018ecc:	2a09      	cmp	r2, #9
 8018ece:	d903      	bls.n	8018ed8 <_vfiprintf_r+0x1cc>
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d0c6      	beq.n	8018e62 <_vfiprintf_r+0x156>
 8018ed4:	9105      	str	r1, [sp, #20]
 8018ed6:	e7c4      	b.n	8018e62 <_vfiprintf_r+0x156>
 8018ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018edc:	4604      	mov	r4, r0
 8018ede:	2301      	movs	r3, #1
 8018ee0:	e7f0      	b.n	8018ec4 <_vfiprintf_r+0x1b8>
 8018ee2:	ab03      	add	r3, sp, #12
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	462a      	mov	r2, r5
 8018ee8:	4b12      	ldr	r3, [pc, #72]	@ (8018f34 <_vfiprintf_r+0x228>)
 8018eea:	a904      	add	r1, sp, #16
 8018eec:	4630      	mov	r0, r6
 8018eee:	f3af 8000 	nop.w
 8018ef2:	4607      	mov	r7, r0
 8018ef4:	1c78      	adds	r0, r7, #1
 8018ef6:	d1d6      	bne.n	8018ea6 <_vfiprintf_r+0x19a>
 8018ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018efa:	07d9      	lsls	r1, r3, #31
 8018efc:	d405      	bmi.n	8018f0a <_vfiprintf_r+0x1fe>
 8018efe:	89ab      	ldrh	r3, [r5, #12]
 8018f00:	059a      	lsls	r2, r3, #22
 8018f02:	d402      	bmi.n	8018f0a <_vfiprintf_r+0x1fe>
 8018f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018f06:	f7ff fdf3 	bl	8018af0 <__retarget_lock_release_recursive>
 8018f0a:	89ab      	ldrh	r3, [r5, #12]
 8018f0c:	065b      	lsls	r3, r3, #25
 8018f0e:	f53f af1f 	bmi.w	8018d50 <_vfiprintf_r+0x44>
 8018f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018f14:	e71e      	b.n	8018d54 <_vfiprintf_r+0x48>
 8018f16:	ab03      	add	r3, sp, #12
 8018f18:	9300      	str	r3, [sp, #0]
 8018f1a:	462a      	mov	r2, r5
 8018f1c:	4b05      	ldr	r3, [pc, #20]	@ (8018f34 <_vfiprintf_r+0x228>)
 8018f1e:	a904      	add	r1, sp, #16
 8018f20:	4630      	mov	r0, r6
 8018f22:	f000 f879 	bl	8019018 <_printf_i>
 8018f26:	e7e4      	b.n	8018ef2 <_vfiprintf_r+0x1e6>
 8018f28:	0801c88b 	.word	0x0801c88b
 8018f2c:	0801c895 	.word	0x0801c895
 8018f30:	00000000 	.word	0x00000000
 8018f34:	08018ce7 	.word	0x08018ce7
 8018f38:	0801c891 	.word	0x0801c891

08018f3c <_printf_common>:
 8018f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f40:	4616      	mov	r6, r2
 8018f42:	4698      	mov	r8, r3
 8018f44:	688a      	ldr	r2, [r1, #8]
 8018f46:	690b      	ldr	r3, [r1, #16]
 8018f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018f4c:	4293      	cmp	r3, r2
 8018f4e:	bfb8      	it	lt
 8018f50:	4613      	movlt	r3, r2
 8018f52:	6033      	str	r3, [r6, #0]
 8018f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018f58:	4607      	mov	r7, r0
 8018f5a:	460c      	mov	r4, r1
 8018f5c:	b10a      	cbz	r2, 8018f62 <_printf_common+0x26>
 8018f5e:	3301      	adds	r3, #1
 8018f60:	6033      	str	r3, [r6, #0]
 8018f62:	6823      	ldr	r3, [r4, #0]
 8018f64:	0699      	lsls	r1, r3, #26
 8018f66:	bf42      	ittt	mi
 8018f68:	6833      	ldrmi	r3, [r6, #0]
 8018f6a:	3302      	addmi	r3, #2
 8018f6c:	6033      	strmi	r3, [r6, #0]
 8018f6e:	6825      	ldr	r5, [r4, #0]
 8018f70:	f015 0506 	ands.w	r5, r5, #6
 8018f74:	d106      	bne.n	8018f84 <_printf_common+0x48>
 8018f76:	f104 0a19 	add.w	sl, r4, #25
 8018f7a:	68e3      	ldr	r3, [r4, #12]
 8018f7c:	6832      	ldr	r2, [r6, #0]
 8018f7e:	1a9b      	subs	r3, r3, r2
 8018f80:	42ab      	cmp	r3, r5
 8018f82:	dc26      	bgt.n	8018fd2 <_printf_common+0x96>
 8018f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018f88:	6822      	ldr	r2, [r4, #0]
 8018f8a:	3b00      	subs	r3, #0
 8018f8c:	bf18      	it	ne
 8018f8e:	2301      	movne	r3, #1
 8018f90:	0692      	lsls	r2, r2, #26
 8018f92:	d42b      	bmi.n	8018fec <_printf_common+0xb0>
 8018f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018f98:	4641      	mov	r1, r8
 8018f9a:	4638      	mov	r0, r7
 8018f9c:	47c8      	blx	r9
 8018f9e:	3001      	adds	r0, #1
 8018fa0:	d01e      	beq.n	8018fe0 <_printf_common+0xa4>
 8018fa2:	6823      	ldr	r3, [r4, #0]
 8018fa4:	6922      	ldr	r2, [r4, #16]
 8018fa6:	f003 0306 	and.w	r3, r3, #6
 8018faa:	2b04      	cmp	r3, #4
 8018fac:	bf02      	ittt	eq
 8018fae:	68e5      	ldreq	r5, [r4, #12]
 8018fb0:	6833      	ldreq	r3, [r6, #0]
 8018fb2:	1aed      	subeq	r5, r5, r3
 8018fb4:	68a3      	ldr	r3, [r4, #8]
 8018fb6:	bf0c      	ite	eq
 8018fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018fbc:	2500      	movne	r5, #0
 8018fbe:	4293      	cmp	r3, r2
 8018fc0:	bfc4      	itt	gt
 8018fc2:	1a9b      	subgt	r3, r3, r2
 8018fc4:	18ed      	addgt	r5, r5, r3
 8018fc6:	2600      	movs	r6, #0
 8018fc8:	341a      	adds	r4, #26
 8018fca:	42b5      	cmp	r5, r6
 8018fcc:	d11a      	bne.n	8019004 <_printf_common+0xc8>
 8018fce:	2000      	movs	r0, #0
 8018fd0:	e008      	b.n	8018fe4 <_printf_common+0xa8>
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	4652      	mov	r2, sl
 8018fd6:	4641      	mov	r1, r8
 8018fd8:	4638      	mov	r0, r7
 8018fda:	47c8      	blx	r9
 8018fdc:	3001      	adds	r0, #1
 8018fde:	d103      	bne.n	8018fe8 <_printf_common+0xac>
 8018fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8018fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fe8:	3501      	adds	r5, #1
 8018fea:	e7c6      	b.n	8018f7a <_printf_common+0x3e>
 8018fec:	18e1      	adds	r1, r4, r3
 8018fee:	1c5a      	adds	r2, r3, #1
 8018ff0:	2030      	movs	r0, #48	@ 0x30
 8018ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018ff6:	4422      	add	r2, r4
 8018ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019000:	3302      	adds	r3, #2
 8019002:	e7c7      	b.n	8018f94 <_printf_common+0x58>
 8019004:	2301      	movs	r3, #1
 8019006:	4622      	mov	r2, r4
 8019008:	4641      	mov	r1, r8
 801900a:	4638      	mov	r0, r7
 801900c:	47c8      	blx	r9
 801900e:	3001      	adds	r0, #1
 8019010:	d0e6      	beq.n	8018fe0 <_printf_common+0xa4>
 8019012:	3601      	adds	r6, #1
 8019014:	e7d9      	b.n	8018fca <_printf_common+0x8e>
	...

08019018 <_printf_i>:
 8019018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801901c:	7e0f      	ldrb	r7, [r1, #24]
 801901e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019020:	2f78      	cmp	r7, #120	@ 0x78
 8019022:	4691      	mov	r9, r2
 8019024:	4680      	mov	r8, r0
 8019026:	460c      	mov	r4, r1
 8019028:	469a      	mov	sl, r3
 801902a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801902e:	d807      	bhi.n	8019040 <_printf_i+0x28>
 8019030:	2f62      	cmp	r7, #98	@ 0x62
 8019032:	d80a      	bhi.n	801904a <_printf_i+0x32>
 8019034:	2f00      	cmp	r7, #0
 8019036:	f000 80d2 	beq.w	80191de <_printf_i+0x1c6>
 801903a:	2f58      	cmp	r7, #88	@ 0x58
 801903c:	f000 80b9 	beq.w	80191b2 <_printf_i+0x19a>
 8019040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019048:	e03a      	b.n	80190c0 <_printf_i+0xa8>
 801904a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801904e:	2b15      	cmp	r3, #21
 8019050:	d8f6      	bhi.n	8019040 <_printf_i+0x28>
 8019052:	a101      	add	r1, pc, #4	@ (adr r1, 8019058 <_printf_i+0x40>)
 8019054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019058:	080190b1 	.word	0x080190b1
 801905c:	080190c5 	.word	0x080190c5
 8019060:	08019041 	.word	0x08019041
 8019064:	08019041 	.word	0x08019041
 8019068:	08019041 	.word	0x08019041
 801906c:	08019041 	.word	0x08019041
 8019070:	080190c5 	.word	0x080190c5
 8019074:	08019041 	.word	0x08019041
 8019078:	08019041 	.word	0x08019041
 801907c:	08019041 	.word	0x08019041
 8019080:	08019041 	.word	0x08019041
 8019084:	080191c5 	.word	0x080191c5
 8019088:	080190ef 	.word	0x080190ef
 801908c:	0801917f 	.word	0x0801917f
 8019090:	08019041 	.word	0x08019041
 8019094:	08019041 	.word	0x08019041
 8019098:	080191e7 	.word	0x080191e7
 801909c:	08019041 	.word	0x08019041
 80190a0:	080190ef 	.word	0x080190ef
 80190a4:	08019041 	.word	0x08019041
 80190a8:	08019041 	.word	0x08019041
 80190ac:	08019187 	.word	0x08019187
 80190b0:	6833      	ldr	r3, [r6, #0]
 80190b2:	1d1a      	adds	r2, r3, #4
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	6032      	str	r2, [r6, #0]
 80190b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80190bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80190c0:	2301      	movs	r3, #1
 80190c2:	e09d      	b.n	8019200 <_printf_i+0x1e8>
 80190c4:	6833      	ldr	r3, [r6, #0]
 80190c6:	6820      	ldr	r0, [r4, #0]
 80190c8:	1d19      	adds	r1, r3, #4
 80190ca:	6031      	str	r1, [r6, #0]
 80190cc:	0606      	lsls	r6, r0, #24
 80190ce:	d501      	bpl.n	80190d4 <_printf_i+0xbc>
 80190d0:	681d      	ldr	r5, [r3, #0]
 80190d2:	e003      	b.n	80190dc <_printf_i+0xc4>
 80190d4:	0645      	lsls	r5, r0, #25
 80190d6:	d5fb      	bpl.n	80190d0 <_printf_i+0xb8>
 80190d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80190dc:	2d00      	cmp	r5, #0
 80190de:	da03      	bge.n	80190e8 <_printf_i+0xd0>
 80190e0:	232d      	movs	r3, #45	@ 0x2d
 80190e2:	426d      	negs	r5, r5
 80190e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80190e8:	4859      	ldr	r0, [pc, #356]	@ (8019250 <_printf_i+0x238>)
 80190ea:	230a      	movs	r3, #10
 80190ec:	e011      	b.n	8019112 <_printf_i+0xfa>
 80190ee:	6821      	ldr	r1, [r4, #0]
 80190f0:	6833      	ldr	r3, [r6, #0]
 80190f2:	0608      	lsls	r0, r1, #24
 80190f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80190f8:	d402      	bmi.n	8019100 <_printf_i+0xe8>
 80190fa:	0649      	lsls	r1, r1, #25
 80190fc:	bf48      	it	mi
 80190fe:	b2ad      	uxthmi	r5, r5
 8019100:	2f6f      	cmp	r7, #111	@ 0x6f
 8019102:	4853      	ldr	r0, [pc, #332]	@ (8019250 <_printf_i+0x238>)
 8019104:	6033      	str	r3, [r6, #0]
 8019106:	bf14      	ite	ne
 8019108:	230a      	movne	r3, #10
 801910a:	2308      	moveq	r3, #8
 801910c:	2100      	movs	r1, #0
 801910e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019112:	6866      	ldr	r6, [r4, #4]
 8019114:	60a6      	str	r6, [r4, #8]
 8019116:	2e00      	cmp	r6, #0
 8019118:	bfa2      	ittt	ge
 801911a:	6821      	ldrge	r1, [r4, #0]
 801911c:	f021 0104 	bicge.w	r1, r1, #4
 8019120:	6021      	strge	r1, [r4, #0]
 8019122:	b90d      	cbnz	r5, 8019128 <_printf_i+0x110>
 8019124:	2e00      	cmp	r6, #0
 8019126:	d04b      	beq.n	80191c0 <_printf_i+0x1a8>
 8019128:	4616      	mov	r6, r2
 801912a:	fbb5 f1f3 	udiv	r1, r5, r3
 801912e:	fb03 5711 	mls	r7, r3, r1, r5
 8019132:	5dc7      	ldrb	r7, [r0, r7]
 8019134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019138:	462f      	mov	r7, r5
 801913a:	42bb      	cmp	r3, r7
 801913c:	460d      	mov	r5, r1
 801913e:	d9f4      	bls.n	801912a <_printf_i+0x112>
 8019140:	2b08      	cmp	r3, #8
 8019142:	d10b      	bne.n	801915c <_printf_i+0x144>
 8019144:	6823      	ldr	r3, [r4, #0]
 8019146:	07df      	lsls	r7, r3, #31
 8019148:	d508      	bpl.n	801915c <_printf_i+0x144>
 801914a:	6923      	ldr	r3, [r4, #16]
 801914c:	6861      	ldr	r1, [r4, #4]
 801914e:	4299      	cmp	r1, r3
 8019150:	bfde      	ittt	le
 8019152:	2330      	movle	r3, #48	@ 0x30
 8019154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019158:	f106 36ff 	addle.w	r6, r6, #4294967295
 801915c:	1b92      	subs	r2, r2, r6
 801915e:	6122      	str	r2, [r4, #16]
 8019160:	f8cd a000 	str.w	sl, [sp]
 8019164:	464b      	mov	r3, r9
 8019166:	aa03      	add	r2, sp, #12
 8019168:	4621      	mov	r1, r4
 801916a:	4640      	mov	r0, r8
 801916c:	f7ff fee6 	bl	8018f3c <_printf_common>
 8019170:	3001      	adds	r0, #1
 8019172:	d14a      	bne.n	801920a <_printf_i+0x1f2>
 8019174:	f04f 30ff 	mov.w	r0, #4294967295
 8019178:	b004      	add	sp, #16
 801917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801917e:	6823      	ldr	r3, [r4, #0]
 8019180:	f043 0320 	orr.w	r3, r3, #32
 8019184:	6023      	str	r3, [r4, #0]
 8019186:	4833      	ldr	r0, [pc, #204]	@ (8019254 <_printf_i+0x23c>)
 8019188:	2778      	movs	r7, #120	@ 0x78
 801918a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801918e:	6823      	ldr	r3, [r4, #0]
 8019190:	6831      	ldr	r1, [r6, #0]
 8019192:	061f      	lsls	r7, r3, #24
 8019194:	f851 5b04 	ldr.w	r5, [r1], #4
 8019198:	d402      	bmi.n	80191a0 <_printf_i+0x188>
 801919a:	065f      	lsls	r7, r3, #25
 801919c:	bf48      	it	mi
 801919e:	b2ad      	uxthmi	r5, r5
 80191a0:	6031      	str	r1, [r6, #0]
 80191a2:	07d9      	lsls	r1, r3, #31
 80191a4:	bf44      	itt	mi
 80191a6:	f043 0320 	orrmi.w	r3, r3, #32
 80191aa:	6023      	strmi	r3, [r4, #0]
 80191ac:	b11d      	cbz	r5, 80191b6 <_printf_i+0x19e>
 80191ae:	2310      	movs	r3, #16
 80191b0:	e7ac      	b.n	801910c <_printf_i+0xf4>
 80191b2:	4827      	ldr	r0, [pc, #156]	@ (8019250 <_printf_i+0x238>)
 80191b4:	e7e9      	b.n	801918a <_printf_i+0x172>
 80191b6:	6823      	ldr	r3, [r4, #0]
 80191b8:	f023 0320 	bic.w	r3, r3, #32
 80191bc:	6023      	str	r3, [r4, #0]
 80191be:	e7f6      	b.n	80191ae <_printf_i+0x196>
 80191c0:	4616      	mov	r6, r2
 80191c2:	e7bd      	b.n	8019140 <_printf_i+0x128>
 80191c4:	6833      	ldr	r3, [r6, #0]
 80191c6:	6825      	ldr	r5, [r4, #0]
 80191c8:	6961      	ldr	r1, [r4, #20]
 80191ca:	1d18      	adds	r0, r3, #4
 80191cc:	6030      	str	r0, [r6, #0]
 80191ce:	062e      	lsls	r6, r5, #24
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	d501      	bpl.n	80191d8 <_printf_i+0x1c0>
 80191d4:	6019      	str	r1, [r3, #0]
 80191d6:	e002      	b.n	80191de <_printf_i+0x1c6>
 80191d8:	0668      	lsls	r0, r5, #25
 80191da:	d5fb      	bpl.n	80191d4 <_printf_i+0x1bc>
 80191dc:	8019      	strh	r1, [r3, #0]
 80191de:	2300      	movs	r3, #0
 80191e0:	6123      	str	r3, [r4, #16]
 80191e2:	4616      	mov	r6, r2
 80191e4:	e7bc      	b.n	8019160 <_printf_i+0x148>
 80191e6:	6833      	ldr	r3, [r6, #0]
 80191e8:	1d1a      	adds	r2, r3, #4
 80191ea:	6032      	str	r2, [r6, #0]
 80191ec:	681e      	ldr	r6, [r3, #0]
 80191ee:	6862      	ldr	r2, [r4, #4]
 80191f0:	2100      	movs	r1, #0
 80191f2:	4630      	mov	r0, r6
 80191f4:	f7e7 f88c 	bl	8000310 <memchr>
 80191f8:	b108      	cbz	r0, 80191fe <_printf_i+0x1e6>
 80191fa:	1b80      	subs	r0, r0, r6
 80191fc:	6060      	str	r0, [r4, #4]
 80191fe:	6863      	ldr	r3, [r4, #4]
 8019200:	6123      	str	r3, [r4, #16]
 8019202:	2300      	movs	r3, #0
 8019204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019208:	e7aa      	b.n	8019160 <_printf_i+0x148>
 801920a:	6923      	ldr	r3, [r4, #16]
 801920c:	4632      	mov	r2, r6
 801920e:	4649      	mov	r1, r9
 8019210:	4640      	mov	r0, r8
 8019212:	47d0      	blx	sl
 8019214:	3001      	adds	r0, #1
 8019216:	d0ad      	beq.n	8019174 <_printf_i+0x15c>
 8019218:	6823      	ldr	r3, [r4, #0]
 801921a:	079b      	lsls	r3, r3, #30
 801921c:	d413      	bmi.n	8019246 <_printf_i+0x22e>
 801921e:	68e0      	ldr	r0, [r4, #12]
 8019220:	9b03      	ldr	r3, [sp, #12]
 8019222:	4298      	cmp	r0, r3
 8019224:	bfb8      	it	lt
 8019226:	4618      	movlt	r0, r3
 8019228:	e7a6      	b.n	8019178 <_printf_i+0x160>
 801922a:	2301      	movs	r3, #1
 801922c:	4632      	mov	r2, r6
 801922e:	4649      	mov	r1, r9
 8019230:	4640      	mov	r0, r8
 8019232:	47d0      	blx	sl
 8019234:	3001      	adds	r0, #1
 8019236:	d09d      	beq.n	8019174 <_printf_i+0x15c>
 8019238:	3501      	adds	r5, #1
 801923a:	68e3      	ldr	r3, [r4, #12]
 801923c:	9903      	ldr	r1, [sp, #12]
 801923e:	1a5b      	subs	r3, r3, r1
 8019240:	42ab      	cmp	r3, r5
 8019242:	dcf2      	bgt.n	801922a <_printf_i+0x212>
 8019244:	e7eb      	b.n	801921e <_printf_i+0x206>
 8019246:	2500      	movs	r5, #0
 8019248:	f104 0619 	add.w	r6, r4, #25
 801924c:	e7f5      	b.n	801923a <_printf_i+0x222>
 801924e:	bf00      	nop
 8019250:	0801c89c 	.word	0x0801c89c
 8019254:	0801c8ad 	.word	0x0801c8ad

08019258 <__sflush_r>:
 8019258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019260:	0716      	lsls	r6, r2, #28
 8019262:	4605      	mov	r5, r0
 8019264:	460c      	mov	r4, r1
 8019266:	d454      	bmi.n	8019312 <__sflush_r+0xba>
 8019268:	684b      	ldr	r3, [r1, #4]
 801926a:	2b00      	cmp	r3, #0
 801926c:	dc02      	bgt.n	8019274 <__sflush_r+0x1c>
 801926e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019270:	2b00      	cmp	r3, #0
 8019272:	dd48      	ble.n	8019306 <__sflush_r+0xae>
 8019274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019276:	2e00      	cmp	r6, #0
 8019278:	d045      	beq.n	8019306 <__sflush_r+0xae>
 801927a:	2300      	movs	r3, #0
 801927c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019280:	682f      	ldr	r7, [r5, #0]
 8019282:	6a21      	ldr	r1, [r4, #32]
 8019284:	602b      	str	r3, [r5, #0]
 8019286:	d030      	beq.n	80192ea <__sflush_r+0x92>
 8019288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	0759      	lsls	r1, r3, #29
 801928e:	d505      	bpl.n	801929c <__sflush_r+0x44>
 8019290:	6863      	ldr	r3, [r4, #4]
 8019292:	1ad2      	subs	r2, r2, r3
 8019294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019296:	b10b      	cbz	r3, 801929c <__sflush_r+0x44>
 8019298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801929a:	1ad2      	subs	r2, r2, r3
 801929c:	2300      	movs	r3, #0
 801929e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80192a0:	6a21      	ldr	r1, [r4, #32]
 80192a2:	4628      	mov	r0, r5
 80192a4:	47b0      	blx	r6
 80192a6:	1c43      	adds	r3, r0, #1
 80192a8:	89a3      	ldrh	r3, [r4, #12]
 80192aa:	d106      	bne.n	80192ba <__sflush_r+0x62>
 80192ac:	6829      	ldr	r1, [r5, #0]
 80192ae:	291d      	cmp	r1, #29
 80192b0:	d82b      	bhi.n	801930a <__sflush_r+0xb2>
 80192b2:	4a2a      	ldr	r2, [pc, #168]	@ (801935c <__sflush_r+0x104>)
 80192b4:	410a      	asrs	r2, r1
 80192b6:	07d6      	lsls	r6, r2, #31
 80192b8:	d427      	bmi.n	801930a <__sflush_r+0xb2>
 80192ba:	2200      	movs	r2, #0
 80192bc:	6062      	str	r2, [r4, #4]
 80192be:	04d9      	lsls	r1, r3, #19
 80192c0:	6922      	ldr	r2, [r4, #16]
 80192c2:	6022      	str	r2, [r4, #0]
 80192c4:	d504      	bpl.n	80192d0 <__sflush_r+0x78>
 80192c6:	1c42      	adds	r2, r0, #1
 80192c8:	d101      	bne.n	80192ce <__sflush_r+0x76>
 80192ca:	682b      	ldr	r3, [r5, #0]
 80192cc:	b903      	cbnz	r3, 80192d0 <__sflush_r+0x78>
 80192ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80192d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80192d2:	602f      	str	r7, [r5, #0]
 80192d4:	b1b9      	cbz	r1, 8019306 <__sflush_r+0xae>
 80192d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80192da:	4299      	cmp	r1, r3
 80192dc:	d002      	beq.n	80192e4 <__sflush_r+0x8c>
 80192de:	4628      	mov	r0, r5
 80192e0:	f000 f924 	bl	801952c <_free_r>
 80192e4:	2300      	movs	r3, #0
 80192e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80192e8:	e00d      	b.n	8019306 <__sflush_r+0xae>
 80192ea:	2301      	movs	r3, #1
 80192ec:	4628      	mov	r0, r5
 80192ee:	47b0      	blx	r6
 80192f0:	4602      	mov	r2, r0
 80192f2:	1c50      	adds	r0, r2, #1
 80192f4:	d1c9      	bne.n	801928a <__sflush_r+0x32>
 80192f6:	682b      	ldr	r3, [r5, #0]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d0c6      	beq.n	801928a <__sflush_r+0x32>
 80192fc:	2b1d      	cmp	r3, #29
 80192fe:	d001      	beq.n	8019304 <__sflush_r+0xac>
 8019300:	2b16      	cmp	r3, #22
 8019302:	d11e      	bne.n	8019342 <__sflush_r+0xea>
 8019304:	602f      	str	r7, [r5, #0]
 8019306:	2000      	movs	r0, #0
 8019308:	e022      	b.n	8019350 <__sflush_r+0xf8>
 801930a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801930e:	b21b      	sxth	r3, r3
 8019310:	e01b      	b.n	801934a <__sflush_r+0xf2>
 8019312:	690f      	ldr	r7, [r1, #16]
 8019314:	2f00      	cmp	r7, #0
 8019316:	d0f6      	beq.n	8019306 <__sflush_r+0xae>
 8019318:	0793      	lsls	r3, r2, #30
 801931a:	680e      	ldr	r6, [r1, #0]
 801931c:	bf08      	it	eq
 801931e:	694b      	ldreq	r3, [r1, #20]
 8019320:	600f      	str	r7, [r1, #0]
 8019322:	bf18      	it	ne
 8019324:	2300      	movne	r3, #0
 8019326:	eba6 0807 	sub.w	r8, r6, r7
 801932a:	608b      	str	r3, [r1, #8]
 801932c:	f1b8 0f00 	cmp.w	r8, #0
 8019330:	dde9      	ble.n	8019306 <__sflush_r+0xae>
 8019332:	6a21      	ldr	r1, [r4, #32]
 8019334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019336:	4643      	mov	r3, r8
 8019338:	463a      	mov	r2, r7
 801933a:	4628      	mov	r0, r5
 801933c:	47b0      	blx	r6
 801933e:	2800      	cmp	r0, #0
 8019340:	dc08      	bgt.n	8019354 <__sflush_r+0xfc>
 8019342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801934a:	81a3      	strh	r3, [r4, #12]
 801934c:	f04f 30ff 	mov.w	r0, #4294967295
 8019350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019354:	4407      	add	r7, r0
 8019356:	eba8 0800 	sub.w	r8, r8, r0
 801935a:	e7e7      	b.n	801932c <__sflush_r+0xd4>
 801935c:	dfbffffe 	.word	0xdfbffffe

08019360 <_fflush_r>:
 8019360:	b538      	push	{r3, r4, r5, lr}
 8019362:	690b      	ldr	r3, [r1, #16]
 8019364:	4605      	mov	r5, r0
 8019366:	460c      	mov	r4, r1
 8019368:	b913      	cbnz	r3, 8019370 <_fflush_r+0x10>
 801936a:	2500      	movs	r5, #0
 801936c:	4628      	mov	r0, r5
 801936e:	bd38      	pop	{r3, r4, r5, pc}
 8019370:	b118      	cbz	r0, 801937a <_fflush_r+0x1a>
 8019372:	6a03      	ldr	r3, [r0, #32]
 8019374:	b90b      	cbnz	r3, 801937a <_fflush_r+0x1a>
 8019376:	f7ff faab 	bl	80188d0 <__sinit>
 801937a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d0f3      	beq.n	801936a <_fflush_r+0xa>
 8019382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019384:	07d0      	lsls	r0, r2, #31
 8019386:	d404      	bmi.n	8019392 <_fflush_r+0x32>
 8019388:	0599      	lsls	r1, r3, #22
 801938a:	d402      	bmi.n	8019392 <_fflush_r+0x32>
 801938c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801938e:	f7ff fbae 	bl	8018aee <__retarget_lock_acquire_recursive>
 8019392:	4628      	mov	r0, r5
 8019394:	4621      	mov	r1, r4
 8019396:	f7ff ff5f 	bl	8019258 <__sflush_r>
 801939a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801939c:	07da      	lsls	r2, r3, #31
 801939e:	4605      	mov	r5, r0
 80193a0:	d4e4      	bmi.n	801936c <_fflush_r+0xc>
 80193a2:	89a3      	ldrh	r3, [r4, #12]
 80193a4:	059b      	lsls	r3, r3, #22
 80193a6:	d4e1      	bmi.n	801936c <_fflush_r+0xc>
 80193a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80193aa:	f7ff fba1 	bl	8018af0 <__retarget_lock_release_recursive>
 80193ae:	e7dd      	b.n	801936c <_fflush_r+0xc>

080193b0 <fiprintf>:
 80193b0:	b40e      	push	{r1, r2, r3}
 80193b2:	b503      	push	{r0, r1, lr}
 80193b4:	4601      	mov	r1, r0
 80193b6:	ab03      	add	r3, sp, #12
 80193b8:	4805      	ldr	r0, [pc, #20]	@ (80193d0 <fiprintf+0x20>)
 80193ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80193be:	6800      	ldr	r0, [r0, #0]
 80193c0:	9301      	str	r3, [sp, #4]
 80193c2:	f7ff fca3 	bl	8018d0c <_vfiprintf_r>
 80193c6:	b002      	add	sp, #8
 80193c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80193cc:	b003      	add	sp, #12
 80193ce:	4770      	bx	lr
 80193d0:	24000044 	.word	0x24000044

080193d4 <__swbuf_r>:
 80193d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d6:	460e      	mov	r6, r1
 80193d8:	4614      	mov	r4, r2
 80193da:	4605      	mov	r5, r0
 80193dc:	b118      	cbz	r0, 80193e6 <__swbuf_r+0x12>
 80193de:	6a03      	ldr	r3, [r0, #32]
 80193e0:	b90b      	cbnz	r3, 80193e6 <__swbuf_r+0x12>
 80193e2:	f7ff fa75 	bl	80188d0 <__sinit>
 80193e6:	69a3      	ldr	r3, [r4, #24]
 80193e8:	60a3      	str	r3, [r4, #8]
 80193ea:	89a3      	ldrh	r3, [r4, #12]
 80193ec:	071a      	lsls	r2, r3, #28
 80193ee:	d501      	bpl.n	80193f4 <__swbuf_r+0x20>
 80193f0:	6923      	ldr	r3, [r4, #16]
 80193f2:	b943      	cbnz	r3, 8019406 <__swbuf_r+0x32>
 80193f4:	4621      	mov	r1, r4
 80193f6:	4628      	mov	r0, r5
 80193f8:	f000 f82a 	bl	8019450 <__swsetup_r>
 80193fc:	b118      	cbz	r0, 8019406 <__swbuf_r+0x32>
 80193fe:	f04f 37ff 	mov.w	r7, #4294967295
 8019402:	4638      	mov	r0, r7
 8019404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019406:	6823      	ldr	r3, [r4, #0]
 8019408:	6922      	ldr	r2, [r4, #16]
 801940a:	1a98      	subs	r0, r3, r2
 801940c:	6963      	ldr	r3, [r4, #20]
 801940e:	b2f6      	uxtb	r6, r6
 8019410:	4283      	cmp	r3, r0
 8019412:	4637      	mov	r7, r6
 8019414:	dc05      	bgt.n	8019422 <__swbuf_r+0x4e>
 8019416:	4621      	mov	r1, r4
 8019418:	4628      	mov	r0, r5
 801941a:	f7ff ffa1 	bl	8019360 <_fflush_r>
 801941e:	2800      	cmp	r0, #0
 8019420:	d1ed      	bne.n	80193fe <__swbuf_r+0x2a>
 8019422:	68a3      	ldr	r3, [r4, #8]
 8019424:	3b01      	subs	r3, #1
 8019426:	60a3      	str	r3, [r4, #8]
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	1c5a      	adds	r2, r3, #1
 801942c:	6022      	str	r2, [r4, #0]
 801942e:	701e      	strb	r6, [r3, #0]
 8019430:	6962      	ldr	r2, [r4, #20]
 8019432:	1c43      	adds	r3, r0, #1
 8019434:	429a      	cmp	r2, r3
 8019436:	d004      	beq.n	8019442 <__swbuf_r+0x6e>
 8019438:	89a3      	ldrh	r3, [r4, #12]
 801943a:	07db      	lsls	r3, r3, #31
 801943c:	d5e1      	bpl.n	8019402 <__swbuf_r+0x2e>
 801943e:	2e0a      	cmp	r6, #10
 8019440:	d1df      	bne.n	8019402 <__swbuf_r+0x2e>
 8019442:	4621      	mov	r1, r4
 8019444:	4628      	mov	r0, r5
 8019446:	f7ff ff8b 	bl	8019360 <_fflush_r>
 801944a:	2800      	cmp	r0, #0
 801944c:	d0d9      	beq.n	8019402 <__swbuf_r+0x2e>
 801944e:	e7d6      	b.n	80193fe <__swbuf_r+0x2a>

08019450 <__swsetup_r>:
 8019450:	b538      	push	{r3, r4, r5, lr}
 8019452:	4b29      	ldr	r3, [pc, #164]	@ (80194f8 <__swsetup_r+0xa8>)
 8019454:	4605      	mov	r5, r0
 8019456:	6818      	ldr	r0, [r3, #0]
 8019458:	460c      	mov	r4, r1
 801945a:	b118      	cbz	r0, 8019464 <__swsetup_r+0x14>
 801945c:	6a03      	ldr	r3, [r0, #32]
 801945e:	b90b      	cbnz	r3, 8019464 <__swsetup_r+0x14>
 8019460:	f7ff fa36 	bl	80188d0 <__sinit>
 8019464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019468:	0719      	lsls	r1, r3, #28
 801946a:	d422      	bmi.n	80194b2 <__swsetup_r+0x62>
 801946c:	06da      	lsls	r2, r3, #27
 801946e:	d407      	bmi.n	8019480 <__swsetup_r+0x30>
 8019470:	2209      	movs	r2, #9
 8019472:	602a      	str	r2, [r5, #0]
 8019474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019478:	81a3      	strh	r3, [r4, #12]
 801947a:	f04f 30ff 	mov.w	r0, #4294967295
 801947e:	e033      	b.n	80194e8 <__swsetup_r+0x98>
 8019480:	0758      	lsls	r0, r3, #29
 8019482:	d512      	bpl.n	80194aa <__swsetup_r+0x5a>
 8019484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019486:	b141      	cbz	r1, 801949a <__swsetup_r+0x4a>
 8019488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801948c:	4299      	cmp	r1, r3
 801948e:	d002      	beq.n	8019496 <__swsetup_r+0x46>
 8019490:	4628      	mov	r0, r5
 8019492:	f000 f84b 	bl	801952c <_free_r>
 8019496:	2300      	movs	r3, #0
 8019498:	6363      	str	r3, [r4, #52]	@ 0x34
 801949a:	89a3      	ldrh	r3, [r4, #12]
 801949c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80194a0:	81a3      	strh	r3, [r4, #12]
 80194a2:	2300      	movs	r3, #0
 80194a4:	6063      	str	r3, [r4, #4]
 80194a6:	6923      	ldr	r3, [r4, #16]
 80194a8:	6023      	str	r3, [r4, #0]
 80194aa:	89a3      	ldrh	r3, [r4, #12]
 80194ac:	f043 0308 	orr.w	r3, r3, #8
 80194b0:	81a3      	strh	r3, [r4, #12]
 80194b2:	6923      	ldr	r3, [r4, #16]
 80194b4:	b94b      	cbnz	r3, 80194ca <__swsetup_r+0x7a>
 80194b6:	89a3      	ldrh	r3, [r4, #12]
 80194b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80194bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80194c0:	d003      	beq.n	80194ca <__swsetup_r+0x7a>
 80194c2:	4621      	mov	r1, r4
 80194c4:	4628      	mov	r0, r5
 80194c6:	f000 f8a1 	bl	801960c <__smakebuf_r>
 80194ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194ce:	f013 0201 	ands.w	r2, r3, #1
 80194d2:	d00a      	beq.n	80194ea <__swsetup_r+0x9a>
 80194d4:	2200      	movs	r2, #0
 80194d6:	60a2      	str	r2, [r4, #8]
 80194d8:	6962      	ldr	r2, [r4, #20]
 80194da:	4252      	negs	r2, r2
 80194dc:	61a2      	str	r2, [r4, #24]
 80194de:	6922      	ldr	r2, [r4, #16]
 80194e0:	b942      	cbnz	r2, 80194f4 <__swsetup_r+0xa4>
 80194e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80194e6:	d1c5      	bne.n	8019474 <__swsetup_r+0x24>
 80194e8:	bd38      	pop	{r3, r4, r5, pc}
 80194ea:	0799      	lsls	r1, r3, #30
 80194ec:	bf58      	it	pl
 80194ee:	6962      	ldrpl	r2, [r4, #20]
 80194f0:	60a2      	str	r2, [r4, #8]
 80194f2:	e7f4      	b.n	80194de <__swsetup_r+0x8e>
 80194f4:	2000      	movs	r0, #0
 80194f6:	e7f7      	b.n	80194e8 <__swsetup_r+0x98>
 80194f8:	24000044 	.word	0x24000044

080194fc <_sbrk_r>:
 80194fc:	b538      	push	{r3, r4, r5, lr}
 80194fe:	4d06      	ldr	r5, [pc, #24]	@ (8019518 <_sbrk_r+0x1c>)
 8019500:	2300      	movs	r3, #0
 8019502:	4604      	mov	r4, r0
 8019504:	4608      	mov	r0, r1
 8019506:	602b      	str	r3, [r5, #0]
 8019508:	f7e8 fab0 	bl	8001a6c <_sbrk>
 801950c:	1c43      	adds	r3, r0, #1
 801950e:	d102      	bne.n	8019516 <_sbrk_r+0x1a>
 8019510:	682b      	ldr	r3, [r5, #0]
 8019512:	b103      	cbz	r3, 8019516 <_sbrk_r+0x1a>
 8019514:	6023      	str	r3, [r4, #0]
 8019516:	bd38      	pop	{r3, r4, r5, pc}
 8019518:	2400eaf4 	.word	0x2400eaf4

0801951c <abort>:
 801951c:	b508      	push	{r3, lr}
 801951e:	2006      	movs	r0, #6
 8019520:	f000 f8d8 	bl	80196d4 <raise>
 8019524:	2001      	movs	r0, #1
 8019526:	f7e8 fa29 	bl	800197c <_exit>
	...

0801952c <_free_r>:
 801952c:	b538      	push	{r3, r4, r5, lr}
 801952e:	4605      	mov	r5, r0
 8019530:	2900      	cmp	r1, #0
 8019532:	d041      	beq.n	80195b8 <_free_r+0x8c>
 8019534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019538:	1f0c      	subs	r4, r1, #4
 801953a:	2b00      	cmp	r3, #0
 801953c:	bfb8      	it	lt
 801953e:	18e4      	addlt	r4, r4, r3
 8019540:	f7ff fbae 	bl	8018ca0 <__malloc_lock>
 8019544:	4a1d      	ldr	r2, [pc, #116]	@ (80195bc <_free_r+0x90>)
 8019546:	6813      	ldr	r3, [r2, #0]
 8019548:	b933      	cbnz	r3, 8019558 <_free_r+0x2c>
 801954a:	6063      	str	r3, [r4, #4]
 801954c:	6014      	str	r4, [r2, #0]
 801954e:	4628      	mov	r0, r5
 8019550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019554:	f7ff bbaa 	b.w	8018cac <__malloc_unlock>
 8019558:	42a3      	cmp	r3, r4
 801955a:	d908      	bls.n	801956e <_free_r+0x42>
 801955c:	6820      	ldr	r0, [r4, #0]
 801955e:	1821      	adds	r1, r4, r0
 8019560:	428b      	cmp	r3, r1
 8019562:	bf01      	itttt	eq
 8019564:	6819      	ldreq	r1, [r3, #0]
 8019566:	685b      	ldreq	r3, [r3, #4]
 8019568:	1809      	addeq	r1, r1, r0
 801956a:	6021      	streq	r1, [r4, #0]
 801956c:	e7ed      	b.n	801954a <_free_r+0x1e>
 801956e:	461a      	mov	r2, r3
 8019570:	685b      	ldr	r3, [r3, #4]
 8019572:	b10b      	cbz	r3, 8019578 <_free_r+0x4c>
 8019574:	42a3      	cmp	r3, r4
 8019576:	d9fa      	bls.n	801956e <_free_r+0x42>
 8019578:	6811      	ldr	r1, [r2, #0]
 801957a:	1850      	adds	r0, r2, r1
 801957c:	42a0      	cmp	r0, r4
 801957e:	d10b      	bne.n	8019598 <_free_r+0x6c>
 8019580:	6820      	ldr	r0, [r4, #0]
 8019582:	4401      	add	r1, r0
 8019584:	1850      	adds	r0, r2, r1
 8019586:	4283      	cmp	r3, r0
 8019588:	6011      	str	r1, [r2, #0]
 801958a:	d1e0      	bne.n	801954e <_free_r+0x22>
 801958c:	6818      	ldr	r0, [r3, #0]
 801958e:	685b      	ldr	r3, [r3, #4]
 8019590:	6053      	str	r3, [r2, #4]
 8019592:	4408      	add	r0, r1
 8019594:	6010      	str	r0, [r2, #0]
 8019596:	e7da      	b.n	801954e <_free_r+0x22>
 8019598:	d902      	bls.n	80195a0 <_free_r+0x74>
 801959a:	230c      	movs	r3, #12
 801959c:	602b      	str	r3, [r5, #0]
 801959e:	e7d6      	b.n	801954e <_free_r+0x22>
 80195a0:	6820      	ldr	r0, [r4, #0]
 80195a2:	1821      	adds	r1, r4, r0
 80195a4:	428b      	cmp	r3, r1
 80195a6:	bf04      	itt	eq
 80195a8:	6819      	ldreq	r1, [r3, #0]
 80195aa:	685b      	ldreq	r3, [r3, #4]
 80195ac:	6063      	str	r3, [r4, #4]
 80195ae:	bf04      	itt	eq
 80195b0:	1809      	addeq	r1, r1, r0
 80195b2:	6021      	streq	r1, [r4, #0]
 80195b4:	6054      	str	r4, [r2, #4]
 80195b6:	e7ca      	b.n	801954e <_free_r+0x22>
 80195b8:	bd38      	pop	{r3, r4, r5, pc}
 80195ba:	bf00      	nop
 80195bc:	2400ec40 	.word	0x2400ec40

080195c0 <__swhatbuf_r>:
 80195c0:	b570      	push	{r4, r5, r6, lr}
 80195c2:	460c      	mov	r4, r1
 80195c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195c8:	2900      	cmp	r1, #0
 80195ca:	b096      	sub	sp, #88	@ 0x58
 80195cc:	4615      	mov	r5, r2
 80195ce:	461e      	mov	r6, r3
 80195d0:	da0d      	bge.n	80195ee <__swhatbuf_r+0x2e>
 80195d2:	89a3      	ldrh	r3, [r4, #12]
 80195d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80195d8:	f04f 0100 	mov.w	r1, #0
 80195dc:	bf14      	ite	ne
 80195de:	2340      	movne	r3, #64	@ 0x40
 80195e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80195e4:	2000      	movs	r0, #0
 80195e6:	6031      	str	r1, [r6, #0]
 80195e8:	602b      	str	r3, [r5, #0]
 80195ea:	b016      	add	sp, #88	@ 0x58
 80195ec:	bd70      	pop	{r4, r5, r6, pc}
 80195ee:	466a      	mov	r2, sp
 80195f0:	f000 f878 	bl	80196e4 <_fstat_r>
 80195f4:	2800      	cmp	r0, #0
 80195f6:	dbec      	blt.n	80195d2 <__swhatbuf_r+0x12>
 80195f8:	9901      	ldr	r1, [sp, #4]
 80195fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80195fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019602:	4259      	negs	r1, r3
 8019604:	4159      	adcs	r1, r3
 8019606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801960a:	e7eb      	b.n	80195e4 <__swhatbuf_r+0x24>

0801960c <__smakebuf_r>:
 801960c:	898b      	ldrh	r3, [r1, #12]
 801960e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019610:	079d      	lsls	r5, r3, #30
 8019612:	4606      	mov	r6, r0
 8019614:	460c      	mov	r4, r1
 8019616:	d507      	bpl.n	8019628 <__smakebuf_r+0x1c>
 8019618:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801961c:	6023      	str	r3, [r4, #0]
 801961e:	6123      	str	r3, [r4, #16]
 8019620:	2301      	movs	r3, #1
 8019622:	6163      	str	r3, [r4, #20]
 8019624:	b003      	add	sp, #12
 8019626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019628:	ab01      	add	r3, sp, #4
 801962a:	466a      	mov	r2, sp
 801962c:	f7ff ffc8 	bl	80195c0 <__swhatbuf_r>
 8019630:	9f00      	ldr	r7, [sp, #0]
 8019632:	4605      	mov	r5, r0
 8019634:	4639      	mov	r1, r7
 8019636:	4630      	mov	r0, r6
 8019638:	f7ff fab2 	bl	8018ba0 <_malloc_r>
 801963c:	b948      	cbnz	r0, 8019652 <__smakebuf_r+0x46>
 801963e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019642:	059a      	lsls	r2, r3, #22
 8019644:	d4ee      	bmi.n	8019624 <__smakebuf_r+0x18>
 8019646:	f023 0303 	bic.w	r3, r3, #3
 801964a:	f043 0302 	orr.w	r3, r3, #2
 801964e:	81a3      	strh	r3, [r4, #12]
 8019650:	e7e2      	b.n	8019618 <__smakebuf_r+0xc>
 8019652:	89a3      	ldrh	r3, [r4, #12]
 8019654:	6020      	str	r0, [r4, #0]
 8019656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801965a:	81a3      	strh	r3, [r4, #12]
 801965c:	9b01      	ldr	r3, [sp, #4]
 801965e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019662:	b15b      	cbz	r3, 801967c <__smakebuf_r+0x70>
 8019664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019668:	4630      	mov	r0, r6
 801966a:	f000 f84d 	bl	8019708 <_isatty_r>
 801966e:	b128      	cbz	r0, 801967c <__smakebuf_r+0x70>
 8019670:	89a3      	ldrh	r3, [r4, #12]
 8019672:	f023 0303 	bic.w	r3, r3, #3
 8019676:	f043 0301 	orr.w	r3, r3, #1
 801967a:	81a3      	strh	r3, [r4, #12]
 801967c:	89a3      	ldrh	r3, [r4, #12]
 801967e:	431d      	orrs	r5, r3
 8019680:	81a5      	strh	r5, [r4, #12]
 8019682:	e7cf      	b.n	8019624 <__smakebuf_r+0x18>

08019684 <_raise_r>:
 8019684:	291f      	cmp	r1, #31
 8019686:	b538      	push	{r3, r4, r5, lr}
 8019688:	4605      	mov	r5, r0
 801968a:	460c      	mov	r4, r1
 801968c:	d904      	bls.n	8019698 <_raise_r+0x14>
 801968e:	2316      	movs	r3, #22
 8019690:	6003      	str	r3, [r0, #0]
 8019692:	f04f 30ff 	mov.w	r0, #4294967295
 8019696:	bd38      	pop	{r3, r4, r5, pc}
 8019698:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801969a:	b112      	cbz	r2, 80196a2 <_raise_r+0x1e>
 801969c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196a0:	b94b      	cbnz	r3, 80196b6 <_raise_r+0x32>
 80196a2:	4628      	mov	r0, r5
 80196a4:	f000 f852 	bl	801974c <_getpid_r>
 80196a8:	4622      	mov	r2, r4
 80196aa:	4601      	mov	r1, r0
 80196ac:	4628      	mov	r0, r5
 80196ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196b2:	f000 b839 	b.w	8019728 <_kill_r>
 80196b6:	2b01      	cmp	r3, #1
 80196b8:	d00a      	beq.n	80196d0 <_raise_r+0x4c>
 80196ba:	1c59      	adds	r1, r3, #1
 80196bc:	d103      	bne.n	80196c6 <_raise_r+0x42>
 80196be:	2316      	movs	r3, #22
 80196c0:	6003      	str	r3, [r0, #0]
 80196c2:	2001      	movs	r0, #1
 80196c4:	e7e7      	b.n	8019696 <_raise_r+0x12>
 80196c6:	2100      	movs	r1, #0
 80196c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80196cc:	4620      	mov	r0, r4
 80196ce:	4798      	blx	r3
 80196d0:	2000      	movs	r0, #0
 80196d2:	e7e0      	b.n	8019696 <_raise_r+0x12>

080196d4 <raise>:
 80196d4:	4b02      	ldr	r3, [pc, #8]	@ (80196e0 <raise+0xc>)
 80196d6:	4601      	mov	r1, r0
 80196d8:	6818      	ldr	r0, [r3, #0]
 80196da:	f7ff bfd3 	b.w	8019684 <_raise_r>
 80196de:	bf00      	nop
 80196e0:	24000044 	.word	0x24000044

080196e4 <_fstat_r>:
 80196e4:	b538      	push	{r3, r4, r5, lr}
 80196e6:	4d07      	ldr	r5, [pc, #28]	@ (8019704 <_fstat_r+0x20>)
 80196e8:	2300      	movs	r3, #0
 80196ea:	4604      	mov	r4, r0
 80196ec:	4608      	mov	r0, r1
 80196ee:	4611      	mov	r1, r2
 80196f0:	602b      	str	r3, [r5, #0]
 80196f2:	f7e8 f993 	bl	8001a1c <_fstat>
 80196f6:	1c43      	adds	r3, r0, #1
 80196f8:	d102      	bne.n	8019700 <_fstat_r+0x1c>
 80196fa:	682b      	ldr	r3, [r5, #0]
 80196fc:	b103      	cbz	r3, 8019700 <_fstat_r+0x1c>
 80196fe:	6023      	str	r3, [r4, #0]
 8019700:	bd38      	pop	{r3, r4, r5, pc}
 8019702:	bf00      	nop
 8019704:	2400eaf4 	.word	0x2400eaf4

08019708 <_isatty_r>:
 8019708:	b538      	push	{r3, r4, r5, lr}
 801970a:	4d06      	ldr	r5, [pc, #24]	@ (8019724 <_isatty_r+0x1c>)
 801970c:	2300      	movs	r3, #0
 801970e:	4604      	mov	r4, r0
 8019710:	4608      	mov	r0, r1
 8019712:	602b      	str	r3, [r5, #0]
 8019714:	f7e8 f992 	bl	8001a3c <_isatty>
 8019718:	1c43      	adds	r3, r0, #1
 801971a:	d102      	bne.n	8019722 <_isatty_r+0x1a>
 801971c:	682b      	ldr	r3, [r5, #0]
 801971e:	b103      	cbz	r3, 8019722 <_isatty_r+0x1a>
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	2400eaf4 	.word	0x2400eaf4

08019728 <_kill_r>:
 8019728:	b538      	push	{r3, r4, r5, lr}
 801972a:	4d07      	ldr	r5, [pc, #28]	@ (8019748 <_kill_r+0x20>)
 801972c:	2300      	movs	r3, #0
 801972e:	4604      	mov	r4, r0
 8019730:	4608      	mov	r0, r1
 8019732:	4611      	mov	r1, r2
 8019734:	602b      	str	r3, [r5, #0]
 8019736:	f7e8 f90f 	bl	8001958 <_kill>
 801973a:	1c43      	adds	r3, r0, #1
 801973c:	d102      	bne.n	8019744 <_kill_r+0x1c>
 801973e:	682b      	ldr	r3, [r5, #0]
 8019740:	b103      	cbz	r3, 8019744 <_kill_r+0x1c>
 8019742:	6023      	str	r3, [r4, #0]
 8019744:	bd38      	pop	{r3, r4, r5, pc}
 8019746:	bf00      	nop
 8019748:	2400eaf4 	.word	0x2400eaf4

0801974c <_getpid_r>:
 801974c:	f7e8 b8fc 	b.w	8001948 <_getpid>

08019750 <_init>:
 8019750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019752:	bf00      	nop
 8019754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019756:	bc08      	pop	{r3}
 8019758:	469e      	mov	lr, r3
 801975a:	4770      	bx	lr

0801975c <_fini>:
 801975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801975e:	bf00      	nop
 8019760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019762:	bc08      	pop	{r3}
 8019764:	469e      	mov	lr, r3
 8019766:	4770      	bx	lr
