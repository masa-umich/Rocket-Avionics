
limestone-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8a8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003de0  0801eb78  0801eb78  0001fb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022958  08022958  00023958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022960  08022960  00023960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022964  08022964  00023964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08022968  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001b9b4  24000090  080229f8  00024090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401ba44  080229f8  00024a44  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  00025000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00024090  2**0
                  CONTENTS, READONLY
 11 .debug_info   000486dc  00000000  00000000  000240be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000989e  00000000  00000000  0006c79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003240  00000000  00000000  00076038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002802  00000000  00000000  00079278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004a783  00000000  00000000  0007ba7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000518e5  00000000  00000000  000c61fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00181674  00000000  00000000  00117ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00299156  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000dc00  00000000  00000000  0029919c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  002a6d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801eb60 	.word	0x0801eb60

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	0801eb60 	.word	0x0801eb60

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //SCB->VTOR = FLASH_BASE; // fuck this stupid bug kys
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006be:	f000 fcaf 	bl	8001020 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006c2:	4b44      	ldr	r3, [pc, #272]	@ (80007d4 <main+0x11c>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d11b      	bne.n	8000706 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006ce:	f3bf 8f4f 	dsb	sy
}
 80006d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d4:	f3bf 8f6f 	isb	sy
}
 80006d8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006da:	4b3e      	ldr	r3, [pc, #248]	@ (80007d4 <main+0x11c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006ee:	4b39      	ldr	r3, [pc, #228]	@ (80007d4 <main+0x11c>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a38      	ldr	r2, [pc, #224]	@ (80007d4 <main+0x11c>)
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000700:	f3bf 8f6f 	isb	sy
}
 8000704:	e000      	b.n	8000708 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000706:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000708:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <main+0x11c>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000710:	2b00      	cmp	r3, #0
 8000712:	d138      	bne.n	8000786 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000714:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <main+0x11c>)
 8000716:	2200      	movs	r2, #0
 8000718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800071c:	f3bf 8f4f 	dsb	sy
}
 8000720:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <main+0x11c>)
 8000724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000728:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	0b5b      	lsrs	r3, r3, #13
 800072e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000732:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800073c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	015a      	lsls	r2, r3, #5
 8000742:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000746:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800074c:	4921      	ldr	r1, [pc, #132]	@ (80007d4 <main+0x11c>)
 800074e:	4313      	orrs	r3, r2
 8000750:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	607a      	str	r2, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1ef      	bne.n	800073e <main+0x86>
    } while(sets-- != 0U);
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	60ba      	str	r2, [r7, #8]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1e5      	bne.n	8000734 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000768:	f3bf 8f4f 	dsb	sy
}
 800076c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <main+0x11c>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <main+0x11c>)
 8000774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000778:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800077a:	f3bf 8f4f 	dsb	sy
}
 800077e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000780:	f3bf 8f6f 	isb	sy
}
 8000784:	e000      	b.n	8000788 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000786:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f001 ff62 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f82a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 fb3c 	bl	8000e0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000794:	f000 f898 	bl	80008c8 <MX_I2C1_Init>
  MX_I2C5_Init();
 8000798:	f000 f8d6 	bl	8000948 <MX_I2C5_Init>
  MX_SPI1_Init();
 800079c:	f000 f93c 	bl	8000a18 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007a0:	f000 f990 	bl	8000ac4 <MX_SPI2_Init>
  MX_SPI4_Init();
 80007a4:	f000 f9e4 	bl	8000b70 <MX_SPI4_Init>
  MX_SPI5_Init();
 80007a8:	f000 fa38 	bl	8000c1c <MX_SPI5_Init>
  MX_SPI6_Init();
 80007ac:	f000 fa8c 	bl	8000cc8 <MX_SPI6_Init>
  MX_USART10_UART_Init();
 80007b0:	f000 fae0 	bl	8000d74 <MX_USART10_UART_Init>
  MX_RTC_Init();
 80007b4:	f000 f908 	bl	80009c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b8:	f009 fd12 	bl	800a1e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <main+0x120>)
 80007be:	2100      	movs	r1, #0
 80007c0:	4806      	ldr	r0, [pc, #24]	@ (80007dc <main+0x124>)
 80007c2:	f009 fd6c 	bl	800a29e <osThreadNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <main+0x128>)
 80007ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007cc:	f009 fd2c 	bl	800a228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <main+0x118>
 80007d4:	e000ed00 	.word	0xe000ed00
 80007d8:	08022684 	.word	0x08022684
 80007dc:	08000ff9 	.word	0x08000ff9
 80007e0:	240004b4 	.word	0x240004b4

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f01d fc36 	bl	801e064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f01d fc30 	bl	801e064 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f004 f963 	bl	8004ad0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <SystemClock_Config+0xe0>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000826:	bf00      	nop
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <SystemClock_Config+0xe0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000834:	d1f8      	bne.n	8000828 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000836:	230a      	movs	r3, #10
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083a:	2301      	movs	r3, #1
 800083c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800083e:	2340      	movs	r3, #64	@ 0x40
 8000840:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000842:	2301      	movs	r3, #1
 8000844:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	2300      	movs	r3, #0
 800084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084e:	2304      	movs	r3, #4
 8000850:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000852:	2322      	movs	r3, #34	@ 0x22
 8000854:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800085a:	2304      	movs	r3, #4
 800085c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000862:	230c      	movs	r3, #12
 8000864:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800086a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800086e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000874:	4618      	mov	r0, r3
 8000876:	f004 f985 	bl	8004b84 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000880:	f000 fc2e 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	233f      	movs	r3, #63	@ 0x3f
 8000886:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2303      	movs	r3, #3
 800088a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000890:	2308      	movs	r3, #8
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000894:	2340      	movs	r3, #64	@ 0x40
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000898:	2340      	movs	r3, #64	@ 0x40
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a2:	2340      	movs	r3, #64	@ 0x40
 80008a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2103      	movs	r1, #3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fd44 	bl	8005338 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80008b6:	f000 fc13 	bl	80010e0 <Error_Handler>
  }
}
 80008ba:	bf00      	nop
 80008bc:	3770      	adds	r7, #112	@ 0x70
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	58024800 	.word	0x58024800

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	@ (800093c <MX_I2C1_Init+0x74>)
 8000904:	f003 ffb0 	bl	8004868 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fbe7 	bl	80010e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	@ (800093c <MX_I2C1_Init+0x74>)
 8000916:	f004 f843 	bl	80049a0 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fbde 	bl	80010e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_I2C1_Init+0x74>)
 8000928:	f004 f885 	bl	8004a36 <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fbd5 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	240000ac 	.word	0x240000ac
 8000940:	40005400 	.word	0x40005400
 8000944:	60404e72 	.word	0x60404e72

08000948 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_I2C5_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <MX_I2C5_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x60404E72;
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	@ (80009c4 <MX_I2C5_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_I2C5_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_I2C5_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_I2C5_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000982:	480e      	ldr	r0, [pc, #56]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000984:	f003 ff70 	bl	8004868 <HAL_I2C_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 800098e:	f000 fba7 	bl	80010e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4809      	ldr	r0, [pc, #36]	@ (80009bc <MX_I2C5_Init+0x74>)
 8000996:	f004 f803 	bl	80049a0 <HAL_I2CEx_ConfigAnalogFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f000 fb9e 	bl	80010e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_I2C5_Init+0x74>)
 80009a8:	f004 f845 	bl	8004a36 <HAL_I2CEx_ConfigDigitalFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 fb95 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	24000100 	.word	0x24000100
 80009c0:	40006400 	.word	0x40006400
 80009c4:	60404e72 	.word	0x60404e72

080009c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009ce:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <MX_RTC_Init+0x4c>)
 80009d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009da:	227f      	movs	r2, #127	@ 0x7f
 80009dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009e0:	22ff      	movs	r2, #255	@ 0xff
 80009e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_RTC_Init+0x48>)
 80009fe:	f006 fe2b 	bl	8007658 <HAL_RTC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a08:	f000 fb6a 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000154 	.word	0x24000154
 8000a14:	58004000 	.word	0x58004000

08000a18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <MX_SPI1_Init+0xa8>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a44:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_SPI1_Init+0xa4>)
 8000aa8:	f006 feee 	bl	8007888 <HAL_SPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ab2:	f000 fb15 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000178 	.word	0x24000178
 8000ac0:	40013000 	.word	0x40013000

08000ac4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000aca:	4a28      	ldr	r2, [pc, #160]	@ (8000b6c <MX_SPI2_Init+0xa8>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000ad0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000af0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000af4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b40:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_SPI2_Init+0xa4>)
 8000b54:	f006 fe98 	bl	8007888 <HAL_SPI_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b5e:	f000 fabf 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	24000200 	.word	0x24000200
 8000b6c:	40003800 	.word	0x40003800

08000b70 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b74:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b76:	4a28      	ldr	r2, [pc, #160]	@ (8000c18 <MX_SPI4_Init+0xa8>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b7c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b80:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b24      	ldr	r3, [pc, #144]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000b9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_SPI4_Init+0xa4>)
 8000c00:	f006 fe42 	bl	8007888 <HAL_SPI_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000c0a:	f000 fa69 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000288 	.word	0x24000288
 8000c18:	40013400 	.word	0x40013400

08000c1c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c22:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <MX_SPI5_Init+0xa8>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c4c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c72:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_SPI5_Init+0xa4>)
 8000cac:	f006 fdec 	bl	8007888 <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000cb6:	f000 fa13 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	24000310 	.word	0x24000310
 8000cc4:	40015000 	.word	0x40015000

08000cc8 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000cce:	4a28      	ldr	r2, [pc, #160]	@ (8000d70 <MX_SPI6_Init+0xa8>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b26      	ldr	r3, [pc, #152]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000cd4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000cf4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cf8:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_SPI6_Init+0xa4>)
 8000d58:	f006 fd96 	bl	8007888 <HAL_SPI_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8000d62:	f000 f9bd 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24000398 	.word	0x24000398
 8000d70:	58001400 	.word	0x58001400

08000d74 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <MX_USART10_UART_Init+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000dbc:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000dbe:	f007 f989 	bl	80080d4 <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f000 f98a 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000dd0:	f008 fa95 	bl	80092fe <HAL_UARTEx_SetTxFifoThreshold>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8000dda:	f000 f981 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4808      	ldr	r0, [pc, #32]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000de2:	f008 faca 	bl	800937a <HAL_UARTEx_SetRxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f000 f978 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_USART10_UART_Init+0x90>)
 8000df2:	f008 fa4b 	bl	800928c <HAL_UARTEx_DisableFifoMode>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f000 f970 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24000420 	.word	0x24000420
 8000e08:	40011c00 	.word	0x40011c00

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	@ 0x30
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	4b6f      	ldr	r3, [pc, #444]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	4a6d      	ldr	r2, [pc, #436]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e32:	4b6b      	ldr	r3, [pc, #428]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e40:	4b67      	ldr	r3, [pc, #412]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a66      	ldr	r2, [pc, #408]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b63      	ldr	r3, [pc, #396]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	4b60      	ldr	r3, [pc, #384]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4a5e      	ldr	r2, [pc, #376]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b58      	ldr	r3, [pc, #352]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4a57      	ldr	r2, [pc, #348]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4b54      	ldr	r3, [pc, #336]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b51      	ldr	r3, [pc, #324]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb8:	4b49      	ldr	r3, [pc, #292]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4b45      	ldr	r3, [pc, #276]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed6:	4b42      	ldr	r3, [pc, #264]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	4a40      	ldr	r2, [pc, #256]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe0 <MX_GPIO_Init+0x1d4>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSRT_GPIO_Port, RF_NSRT_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	483a      	ldr	r0, [pc, #232]	@ (8000fe4 <MX_GPIO_Init+0x1d8>)
 8000efa:	f003 fc81 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC_CS1_Pin|TC_CS2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000f04:	4838      	ldr	r0, [pc, #224]	@ (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000f06:	f003 fc7b 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VLV_CTRL_GPIO_Port, VLV_CTRL_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f10:	4836      	ldr	r0, [pc, #216]	@ (8000fec <MX_GPIO_Init+0x1e0>)
 8000f12:	f003 fc75 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000f1c:	4834      	ldr	r0, [pc, #208]	@ (8000ff0 <MX_GPIO_Init+0x1e4>)
 8000f1e:	f003 fc6f 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2103      	movs	r1, #3
 8000f26:	4833      	ldr	r0, [pc, #204]	@ (8000ff4 <MX_GPIO_Init+0x1e8>)
 8000f28:	f003 fc6a 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4829      	ldr	r0, [pc, #164]	@ (8000fe4 <MX_GPIO_Init+0x1d8>)
 8000f40:	f003 fab6 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSRT_Pin */
  GPIO_InitStruct.Pin = RF_NSRT_Pin;
 8000f44:	2304      	movs	r3, #4
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RF_NSRT_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4822      	ldr	r0, [pc, #136]	@ (8000fe4 <MX_GPIO_Init+0x1d8>)
 8000f5c:	f003 faa8 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS1_Pin TC_CS2_Pin */
  GPIO_InitStruct.Pin = TC_CS1_Pin|TC_CS2_Pin;
 8000f60:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	@ (8000fe8 <MX_GPIO_Init+0x1dc>)
 8000f7a:	f003 fa99 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = VLV_CTRL_Pin;
 8000f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(VLV_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4815      	ldr	r0, [pc, #84]	@ (8000fec <MX_GPIO_Init+0x1e0>)
 8000f98:	f003 fa8a 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_RED_Pin;
 8000f9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <MX_GPIO_Init+0x1e4>)
 8000fb6:	f003 fa7b 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <MX_GPIO_Init+0x1e8>)
 8000fd2:	f003 fa6d 	bl	80044b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3730      	adds	r7, #48	@ 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020800 	.word	0x58020800
 8000fe8:	58020c00 	.word	0x58020c00
 8000fec:	58020000 	.word	0x58020000
 8000ff0:	58020400 	.word	0x58020400
 8000ff4:	58021000 	.word	0x58021000

08000ff8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001000:	f008 fa5a 	bl	80094b8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  server_init();
 8001004:	f000 fe7e 	bl	8001d04 <server_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001008:	2101      	movs	r1, #1
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <StartDefaultTask+0x24>)
 800100c:	f003 fc11 	bl	8004832 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001014:	f009 f9d6 	bl	800a3c4 <osDelay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001018:	bf00      	nop
 800101a:	e7f5      	b.n	8001008 <StartDefaultTask+0x10>
 800101c:	58021000 	.word	0x58021000

08001020 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001026:	463b      	mov	r3, r7
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001032:	f001 fc5d 	bl	80028f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001036:	2301      	movs	r3, #1
 8001038:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800103a:	2300      	movs	r3, #0
 800103c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001042:	231f      	movs	r3, #31
 8001044:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001046:	2387      	movs	r3, #135	@ 0x87
 8001048:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800104a:	2300      	movs	r3, #0
 800104c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800104e:	2300      	movs	r3, #0
 8001050:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001052:	2301      	movs	r3, #1
 8001054:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001056:	2301      	movs	r3, #1
 8001058:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001062:	463b      	mov	r3, r7
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fc7b 	bl	8002960 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800106a:	2301      	movs	r3, #1
 800106c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800106e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001072:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001074:	230e      	movs	r3, #14
 8001076:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001078:	2300      	movs	r3, #0
 800107a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800107c:	2301      	movs	r3, #1
 800107e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001080:	2303      	movs	r3, #3
 8001082:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fc68 	bl	8002960 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001090:	2302      	movs	r3, #2
 8001092:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001094:	2308      	movs	r3, #8
 8001096:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001098:	2300      	movs	r3, #0
 800109a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800109c:	2301      	movs	r3, #1
 800109e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80010a4:	463b      	mov	r3, r7
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fc5a 	bl	8002960 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80010ac:	2004      	movs	r0, #4
 80010ae:	f001 fc37 	bl	8002920 <HAL_MPU_Enable>

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ce:	f001 fafb 	bl	80026c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40001000 	.word	0x40001000

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <Error_Handler+0x4>

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <HAL_MspInit+0x38>)
 80010f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <HAL_MspInit+0x38>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <HAL_MspInit+0x38>)
 8001100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	210f      	movs	r1, #15
 8001110:	f06f 0001 	mvn.w	r0, #1
 8001114:	f001 fbc4 	bl	80028a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400

08001124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0bc      	sub	sp, #240	@ 0xf0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	22b8      	movs	r2, #184	@ 0xb8
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f01c ff8d 	bl	801e064 <memset>
  if(hi2c->Instance==I2C1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <HAL_I2C_MspInit+0x1a8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d146      	bne.n	80011e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001154:	f04f 0208 	mov.w	r2, #8
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fcb2 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001176:	f7ff ffb3 	bl	80010e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b55      	ldr	r3, [pc, #340]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a53      	ldr	r2, [pc, #332]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118a:	4b51      	ldr	r3, [pc, #324]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001198:	23c0      	movs	r3, #192	@ 0xc0
 800119a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b0:	2304      	movs	r3, #4
 80011b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011ba:	4619      	mov	r1, r3
 80011bc:	4845      	ldr	r0, [pc, #276]	@ (80012d4 <HAL_I2C_MspInit+0x1b0>)
 80011be:	f003 f977 	bl	80044b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c2:	4b43      	ldr	r3, [pc, #268]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 80011c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c8:	4a41      	ldr	r2, [pc, #260]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 80011ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011d2:	4b3f      	ldr	r3, [pc, #252]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 80011d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 80011e0:	e070      	b.n	80012c4 <HAL_I2C_MspInit+0x1a0>
  else if(hi2c->Instance==I2C5)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a3c      	ldr	r2, [pc, #240]	@ (80012d8 <HAL_I2C_MspInit+0x1b4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d16b      	bne.n	80012c4 <HAL_I2C_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 80011ec:	f04f 0208 	mov.w	r2, #8
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fc66 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800120e:	f7ff ff67 	bl	80010e0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001218:	4a2d      	ldr	r2, [pc, #180]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001222:	4b2b      	ldr	r3, [pc, #172]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001240:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800124e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001256:	2312      	movs	r3, #18
 8001258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 8001268:	2306      	movs	r3, #6
 800126a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001272:	4619      	mov	r1, r3
 8001274:	4819      	ldr	r0, [pc, #100]	@ (80012dc <HAL_I2C_MspInit+0x1b8>)
 8001276:	f003 f91b 	bl	80044b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800127a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001282:	2312      	movs	r3, #18
 8001284:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 8001294:	2306      	movs	r3, #6
 8001296:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800129e:	4619      	mov	r1, r3
 80012a0:	480f      	ldr	r0, [pc, #60]	@ (80012e0 <HAL_I2C_MspInit+0x1bc>)
 80012a2:	f003 f905 	bl	80044b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 80012a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ac:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 80012ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_I2C_MspInit+0x1ac>)
 80012b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	bf00      	nop
 80012c6:	37f0      	adds	r7, #240	@ 0xf0
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40005400 	.word	0x40005400
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58020400 	.word	0x58020400
 80012d8:	40006400 	.word	0x40006400
 80012dc:	58020800 	.word	0x58020800
 80012e0:	58020000 	.word	0x58020000

080012e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	@ 0xc0
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	22b8      	movs	r2, #184	@ 0xb8
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f01c feb5 	bl	801e064 <memset>
  if(hrtc->Instance==RTC)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a10      	ldr	r2, [pc, #64]	@ (8001340 <HAL_RTC_MspInit+0x5c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d119      	bne.n	8001338 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001304:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001314:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fbd9 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001328:	f7ff feda 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_RTC_MspInit+0x60>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_RTC_MspInit+0x60>)
 8001332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001336:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	37c0      	adds	r7, #192	@ 0xc0
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58004000 	.word	0x58004000
 8001344:	58024400 	.word	0x58024400

08001348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0c4      	sub	sp, #272	@ 0x110
 800134c:	af00      	add	r7, sp, #0
 800134e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001352:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001356:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800136c:	22b8      	movs	r2, #184	@ 0xb8
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f01c fe77 	bl	801e064 <memset>
  if(hspi->Instance==SPI1)
 8001376:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800137a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4ac3      	ldr	r2, [pc, #780]	@ (8001690 <HAL_SPI_MspInit+0x348>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d16b      	bne.n	8001460 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001388:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 fb98 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 80013aa:	f7ff fe99 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ae:	4bb9      	ldr	r3, [pc, #740]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b4:	4ab7      	ldr	r2, [pc, #732]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013be:	4bb5      	ldr	r3, [pc, #724]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	4ab0      	ldr	r2, [pc, #704]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013dc:	4bad      	ldr	r3, [pc, #692]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ea:	4baa      	ldr	r3, [pc, #680]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	4aa8      	ldr	r2, [pc, #672]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001404:	637b      	str	r3, [r7, #52]	@ 0x34
 8001406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001420:	2305      	movs	r3, #5
 8001422:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800142a:	4619      	mov	r1, r3
 800142c:	489a      	ldr	r0, [pc, #616]	@ (8001698 <HAL_SPI_MspInit+0x350>)
 800142e:	f003 f83f 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001432:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001436:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800144c:	2305      	movs	r3, #5
 800144e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001456:	4619      	mov	r1, r3
 8001458:	4890      	ldr	r0, [pc, #576]	@ (800169c <HAL_SPI_MspInit+0x354>)
 800145a:	f003 f829 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 800145e:	e1c7      	b.n	80017f0 <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI2)
 8001460:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001464:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a8c      	ldr	r2, [pc, #560]	@ (80016a0 <HAL_SPI_MspInit+0x358>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d16b      	bne.n	800154a <HAL_SPI_MspInit+0x202>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001472:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001488:	4618      	mov	r0, r3
 800148a:	f004 fb23 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8001494:	f7ff fe24 	bl	80010e0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001498:	4b7e      	ldr	r3, [pc, #504]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 800149a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800149e:	4a7d      	ldr	r2, [pc, #500]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80014b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b77      	ldr	r3, [pc, #476]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014bc:	4a75      	ldr	r2, [pc, #468]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014c6:	4b73      	ldr	r3, [pc, #460]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	4a6e      	ldr	r2, [pc, #440]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f2:	2308      	movs	r3, #8
 80014f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800150a:	2305      	movs	r3, #5
 800150c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001514:	4619      	mov	r1, r3
 8001516:	4863      	ldr	r0, [pc, #396]	@ (80016a4 <HAL_SPI_MspInit+0x35c>)
 8001518:	f002 ffca 	bl	80044b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800151c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001520:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001536:	2305      	movs	r3, #5
 8001538:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001540:	4619      	mov	r1, r3
 8001542:	4859      	ldr	r0, [pc, #356]	@ (80016a8 <HAL_SPI_MspInit+0x360>)
 8001544:	f002 ffb4 	bl	80044b0 <HAL_GPIO_Init>
}
 8001548:	e152      	b.n	80017f0 <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI4)
 800154a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800154e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a55      	ldr	r2, [pc, #340]	@ (80016ac <HAL_SPI_MspInit+0x364>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d147      	bne.n	80015ec <HAL_SPI_MspInit+0x2a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800155c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001572:	4618      	mov	r0, r3
 8001574:	f004 faae 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 800157e:	f7ff fdaf 	bl	80010e0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001582:	4b44      	ldr	r3, [pc, #272]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 8001584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001588:	4a42      	ldr	r2, [pc, #264]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 800158a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800158e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001592:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 8001594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b0:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80015be:	f44f 53c3 	mov.w	r3, #6240	@ 0x1860
 80015c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015d8:	2305      	movs	r3, #5
 80015da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015de:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80015e2:	4619      	mov	r1, r3
 80015e4:	4832      	ldr	r0, [pc, #200]	@ (80016b0 <HAL_SPI_MspInit+0x368>)
 80015e6:	f002 ff63 	bl	80044b0 <HAL_GPIO_Init>
}
 80015ea:	e101      	b.n	80017f0 <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI5)
 80015ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2e      	ldr	r2, [pc, #184]	@ (80016b4 <HAL_SPI_MspInit+0x36c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d15e      	bne.n	80016bc <HAL_SPI_MspInit+0x374>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80015fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001610:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fa5d 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_SPI_MspInit+0x2dc>
      Error_Handler();
 8001620:	f7ff fd5e 	bl	80010e0 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 8001626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800162a:	4a1a      	ldr	r2, [pc, #104]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 800162c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001630:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 8001636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 800164a:	f043 0320 	orr.w	r3, r3, #32
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_SPI_MspInit+0x34c>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001660:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001664:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800167a:	2305      	movs	r3, #5
 800167c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001680:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001684:	4619      	mov	r1, r3
 8001686:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <HAL_SPI_MspInit+0x370>)
 8001688:	f002 ff12 	bl	80044b0 <HAL_GPIO_Init>
}
 800168c:	e0b0      	b.n	80017f0 <HAL_SPI_MspInit+0x4a8>
 800168e:	bf00      	nop
 8001690:	40013000 	.word	0x40013000
 8001694:	58024400 	.word	0x58024400
 8001698:	58020c00 	.word	0x58020c00
 800169c:	58021800 	.word	0x58021800
 80016a0:	40003800 	.word	0x40003800
 80016a4:	58020800 	.word	0x58020800
 80016a8:	58020400 	.word	0x58020400
 80016ac:	40013400 	.word	0x40013400
 80016b0:	58021000 	.word	0x58021000
 80016b4:	40015000 	.word	0x40015000
 80016b8:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 80016bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	@ (80017fc <HAL_SPI_MspInit+0x4b4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f040 8090 	bne.w	80017f0 <HAL_SPI_MspInit+0x4a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80016d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016e6:	4618      	mov	r0, r3
 80016e8:	f004 f9f4 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_SPI_MspInit+0x3ae>
      Error_Handler();
 80016f2:	f7ff fcf5 	bl	80010e0 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80016f6:	4b42      	ldr	r3, [pc, #264]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 80016f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016fc:	4a40      	ldr	r2, [pc, #256]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 80016fe:	f043 0320 	orr.w	r3, r3, #32
 8001702:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001706:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 8001708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001714:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 8001716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171a:	4a39      	ldr	r2, [pc, #228]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001724:	4b36      	ldr	r3, [pc, #216]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001732:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800173c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001740:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001742:	4b2f      	ldr	r3, [pc, #188]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001748:	4a2d      	ldr	r2, [pc, #180]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 800174a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001752:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <HAL_SPI_MspInit+0x4b8>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001758:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800175c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001760:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800176a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800176e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001770:	2301      	movs	r3, #1
 8001772:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001788:	2305      	movs	r3, #5
 800178a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001792:	4619      	mov	r1, r3
 8001794:	481b      	ldr	r0, [pc, #108]	@ (8001804 <HAL_SPI_MspInit+0x4bc>)
 8001796:	f002 fe8b 	bl	80044b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800179a:	2360      	movs	r3, #96	@ 0x60
 800179c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80017b2:	2308      	movs	r3, #8
 80017b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80017bc:	4619      	mov	r1, r3
 80017be:	4811      	ldr	r0, [pc, #68]	@ (8001804 <HAL_SPI_MspInit+0x4bc>)
 80017c0:	f002 fe76 	bl	80044b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80017de:	2305      	movs	r3, #5
 80017e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <HAL_SPI_MspInit+0x4c0>)
 80017ec:	f002 fe60 	bl	80044b0 <HAL_GPIO_Init>
}
 80017f0:	bf00      	nop
 80017f2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	58001400 	.word	0x58001400
 8001800:	58024400 	.word	0x58024400
 8001804:	58020000 	.word	0x58020000
 8001808:	58021800 	.word	0x58021800

0800180c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0b8      	sub	sp, #224	@ 0xe0
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	22b8      	movs	r2, #184	@ 0xb8
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f01c fc19 	bl	801e064 <memset>
  if(huart->Instance==USART10)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a31      	ldr	r2, [pc, #196]	@ (80018fc <HAL_UART_MspInit+0xf0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d15a      	bne.n	80018f2 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800183c:	f04f 0201 	mov.w	r2, #1
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f004 f93e 	bl	8005ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800185e:	f7ff fc3f 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 8001864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001868:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 800186a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800186e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	4a1e      	ldr	r2, [pc, #120]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_UART_MspInit+0xf4>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189e:	2304      	movs	r3, #4
 80018a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80018b6:	2304      	movs	r3, #4
 80018b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018c0:	4619      	mov	r1, r3
 80018c2:	4810      	ldr	r0, [pc, #64]	@ (8001904 <HAL_UART_MspInit+0xf8>)
 80018c4:	f002 fdf4 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018c8:	2308      	movs	r3, #8
 80018ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80018e0:	230b      	movs	r3, #11
 80018e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	@ (8001904 <HAL_UART_MspInit+0xf8>)
 80018ee:	f002 fddf 	bl	80044b0 <HAL_GPIO_Init>

  /* USER CODE END USART10_MspInit 1 */

  }

}
 80018f2:	bf00      	nop
 80018f4:	37e0      	adds	r7, #224	@ 0xe0
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40011c00 	.word	0x40011c00
 8001900:	58024400 	.word	0x58024400
 8001904:	58021000 	.word	0x58021000

08001908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b090      	sub	sp, #64	@ 0x40
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d827      	bhi.n	8001966 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	2036      	movs	r0, #54	@ 0x36
 800191c:	f000 ffc0 	bl	80028a0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001920:	2036      	movs	r0, #54	@ 0x36
 8001922:	f000 ffd7 	bl	80028d4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001926:	4a29      	ldr	r2, [pc, #164]	@ (80019cc <HAL_InitTick+0xc4>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800192c:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_InitTick+0xc8>)
 800192e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001932:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <HAL_InitTick+0xc8>)
 8001934:	f043 0310 	orr.w	r3, r3, #16
 8001938:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800193c:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <HAL_InitTick+0xc8>)
 800193e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800194a:	f107 0210 	add.w	r2, r7, #16
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f004 f87b 	bl	8005a50 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001960:	2b00      	cmp	r3, #0
 8001962:	d106      	bne.n	8001972 <HAL_InitTick+0x6a>
 8001964:	e001      	b.n	800196a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e02b      	b.n	80019c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800196a:	f004 f845 	bl	80059f8 <HAL_RCC_GetPCLK1Freq>
 800196e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001970:	e004      	b.n	800197c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001972:	f004 f841 	bl	80059f8 <HAL_RCC_GetPCLK1Freq>
 8001976:	4603      	mov	r3, r0
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800197c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800197e:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <HAL_InitTick+0xcc>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	3b01      	subs	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800198a:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <HAL_InitTick+0xd0>)
 800198c:	4a13      	ldr	r2, [pc, #76]	@ (80019dc <HAL_InitTick+0xd4>)
 800198e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_InitTick+0xd0>)
 8001992:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001996:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001998:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_InitTick+0xd0>)
 800199a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_InitTick+0xd0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_InitTick+0xd0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019aa:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <HAL_InitTick+0xd0>)
 80019ac:	f006 f8ab 	bl	8007b06 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <HAL_InitTick+0xd0>)
 80019b8:	f006 f906 	bl	8007bc8 <HAL_TIM_Base_Start_IT>
 80019bc:	4603      	mov	r3, r0
 80019be:	e000      	b.n	80019c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3740      	adds	r7, #64	@ 0x40
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	24000008 	.word	0x24000008
 80019d0:	58024400 	.word	0x58024400
 80019d4:	431bde83 	.word	0x431bde83
 80019d8:	240004b8 	.word	0x240004b8
 80019dc:	40001000 	.word	0x40001000

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <NMI_Handler+0x4>

080019e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <MemManage_Handler+0x4>

080019f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <TIM6_DAC_IRQHandler+0x10>)
 8001a1e:	f006 f959 	bl	8007cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	240004b8 	.word	0x240004b8

08001a2c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <ETH_IRQHandler+0x10>)
 8001a32:	f001 fba9 	bl	8003188 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240005b8 	.word	0x240005b8

08001a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_kill>:

int _kill(int pid, int sig)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <_kill+0x20>)
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	240170b0 	.word	0x240170b0

08001a74 <_exit>:

void _exit (int status)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffe5 	bl	8001a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a86:	bf00      	nop
 8001a88:	e7fd      	b.n	8001a86 <_exit+0x12>

08001a8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e00a      	b.n	8001ab2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	60ba      	str	r2, [r7, #8]
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf0      	blt.n	8001a9c <_read+0x12>
  }

  return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e009      	b.n	8001aea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf1      	blt.n	8001ad6 <_write+0x12>
  }
  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_close>:

int _close(int file)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b24:	605a      	str	r2, [r3, #4]
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_isatty>:

int _isatty(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d205      	bcs.n	8001ba0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <_sbrk+0x6c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	e009      	b.n	8001bb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <_sbrk+0x64>)
 8001bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	371c      	adds	r7, #28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	24050000 	.word	0x24050000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	24000504 	.word	0x24000504
 8001bcc:	2401ba48 	.word	0x2401ba48
 8001bd0:	240170b0 	.word	0x240170b0

08001bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ccc <SystemInit+0xf8>)
 8001bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ccc <SystemInit+0xf8>)
 8001be2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bea:	4b39      	ldr	r3, [pc, #228]	@ (8001cd0 <SystemInit+0xfc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d807      	bhi.n	8001c06 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bf6:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <SystemInit+0xfc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 030f 	bic.w	r3, r3, #15
 8001bfe:	4a34      	ldr	r2, [pc, #208]	@ (8001cd0 <SystemInit+0xfc>)
 8001c00:	f043 0307 	orr.w	r3, r3, #7
 8001c04:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <SystemInit+0x100>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <SystemInit+0x100>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c12:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <SystemInit+0x100>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c18:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <SystemInit+0x100>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	492d      	ldr	r1, [pc, #180]	@ (8001cd4 <SystemInit+0x100>)
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <SystemInit+0x104>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c24:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <SystemInit+0xfc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c30:	4b27      	ldr	r3, [pc, #156]	@ (8001cd0 <SystemInit+0xfc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 030f 	bic.w	r3, r3, #15
 8001c38:	4a25      	ldr	r2, [pc, #148]	@ (8001cd0 <SystemInit+0xfc>)
 8001c3a:	f043 0307 	orr.w	r3, r3, #7
 8001c3e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c40:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <SystemInit+0x100>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c46:	4b23      	ldr	r3, [pc, #140]	@ (8001cd4 <SystemInit+0x100>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <SystemInit+0x100>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <SystemInit+0x100>)
 8001c54:	4a21      	ldr	r2, [pc, #132]	@ (8001cdc <SystemInit+0x108>)
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <SystemInit+0x100>)
 8001c5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <SystemInit+0x10c>)
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <SystemInit+0x100>)
 8001c60:	4a20      	ldr	r2, [pc, #128]	@ (8001ce4 <SystemInit+0x110>)
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <SystemInit+0x100>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <SystemInit+0x100>)
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce4 <SystemInit+0x110>)
 8001c6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <SystemInit+0x100>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <SystemInit+0x100>)
 8001c78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce4 <SystemInit+0x110>)
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <SystemInit+0x100>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <SystemInit+0x100>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a13      	ldr	r2, [pc, #76]	@ (8001cd4 <SystemInit+0x100>)
 8001c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <SystemInit+0x100>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001c94:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <SystemInit+0x100>)
 8001c96:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd4 <SystemInit+0x100>)
 8001c9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001ca0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <SystemInit+0x100>)
 8001ca6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001caa:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001cac:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <SystemInit+0x114>)
 8001cb0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <SystemInit+0xf8>)
 8001cb8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cbc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00
 8001cd0:	52002000 	.word	0x52002000
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cdc:	02020200 	.word	0x02020200
 8001ce0:	01ff0000 	.word	0x01ff0000
 8001ce4:	01010280 	.word	0x01010280
 8001ce8:	52004000 	.word	0x52004000

08001cec <msgFreeCallback>:
	}

}
#endif

void msgFreeCallback(void * data) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	free(data);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f01b fe95 	bl	801da24 <free>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <server_init>:

/*
 * Starts the TCP server
 * Creates a listen thread, a recv thread, and a send thread
 */
void server_init() {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af02      	add	r7, sp, #8

	memset(connections, -1, MAX_CONN_NUM * sizeof(int));
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	4823      	ldr	r0, [pc, #140]	@ (8001da0 <server_init+0x9c>)
 8001d12:	f01c f9a7 	bl	801e064 <memset>

	conn_mu = malloc(sizeof(sys_mutex_t));
 8001d16:	2004      	movs	r0, #4
 8001d18:	f01b fe7c 	bl	801da14 <malloc>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <server_init+0xa0>)
 8001d22:	601a      	str	r2, [r3, #0]
	err_t err = sys_mutex_new(conn_mu);
 8001d24:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <server_init+0xa0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f01b fdc9 	bl	801d8c0 <sys_mutex_new>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]

	// size of list element is max message size + length and connfd integers
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8001d32:	491d      	ldr	r1, [pc, #116]	@ (8001da8 <server_init+0xa4>)
 8001d34:	f44f 709a 	mov.w	r0, #308	@ 0x134
 8001d38:	f000 fa40 	bl	80021bc <list_create>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <server_init+0xa8>)
 8001d40:	6013      	str	r3, [r2, #0]
	txMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8001d42:	4919      	ldr	r1, [pc, #100]	@ (8001da8 <server_init+0xa4>)
 8001d44:	f44f 709a 	mov.w	r0, #308	@ 0x134
 8001d48:	f000 fa38 	bl	80021bc <list_create>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <server_init+0xac>)
 8001d50:	6013      	str	r3, [r2, #0]

	if (err == ERR_OK) {
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11b      	bne.n	8001d92 <server_init+0x8e>

		// prime server to connect to clients
		if ( NULL == sys_thread_new("server_listen_thread", server_listen, NULL, 512,
 8001d5a:	2318      	movs	r3, #24
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d62:	2200      	movs	r2, #0
 8001d64:	4913      	ldr	r1, [pc, #76]	@ (8001db4 <server_init+0xb0>)
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <server_init+0xb4>)
 8001d68:	f01b fddc 	bl	801d924 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to receive messages from clients
		if ( NULL == sys_thread_new("server_recv_thread", server_recv, NULL, 512,
 8001d6c:	2318      	movs	r3, #24
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d74:	2200      	movs	r2, #0
 8001d76:	4911      	ldr	r1, [pc, #68]	@ (8001dbc <server_init+0xb8>)
 8001d78:	4811      	ldr	r0, [pc, #68]	@ (8001dc0 <server_init+0xbc>)
 8001d7a:	f01b fdd3 	bl	801d924 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to send messages to clients
		if ( NULL == sys_thread_new("server_recv_thread", server_send, NULL, 512,
 8001d7e:	2318      	movs	r3, #24
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d86:	2200      	movs	r2, #0
 8001d88:	490e      	ldr	r1, [pc, #56]	@ (8001dc4 <server_init+0xc0>)
 8001d8a:	480d      	ldr	r0, [pc, #52]	@ (8001dc0 <server_init+0xbc>)
 8001d8c:	f01b fdca 	bl	801d924 <sys_thread_new>
		}
	}
	else {
		printf("Error in server init\r\n");
	}
}
 8001d90:	e002      	b.n	8001d98 <server_init+0x94>
		printf("Error in server init\r\n");
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <server_init+0xc4>)
 8001d94:	f01c f876 	bl	801de84 <puts>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	24000510 	.word	0x24000510
 8001da4:	24000530 	.word	0x24000530
 8001da8:	08001ced 	.word	0x08001ced
 8001dac:	24000508 	.word	0x24000508
 8001db0:	2400050c 	.word	0x2400050c
 8001db4:	08001dcd 	.word	0x08001dcd
 8001db8:	0801ec80 	.word	0x0801ec80
 8001dbc:	0800206d 	.word	0x0800206d
 8001dc0:	0801ec98 	.word	0x0801ec98
 8001dc4:	080020c1 	.word	0x080020c1
 8001dc8:	0801ecac 	.word	0x0801ecac

08001dcc <server_listen>:

/*
 * Sets the server in listen mode
 * When a connection is established, a fd is generated and pushed to the connections list for use
 */
void server_listen(void *arg) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	@ 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	int listen_sockfd, connfd;
	socklen_t clilen;

	/* IPv4 socket address structure */
	struct sockaddr_in serv, cli;
	serv.sin_family = AF_INET;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	767b      	strb	r3, [r7, #25]
	serv.sin_port = htons(SERVER_PORT);
 8001dd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ddc:	f010 fab8 	bl	8012350 <lwip_htons>
 8001de0:	4603      	mov	r3, r0
 8001de2:	837b      	strh	r3, [r7, #26]
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <server_listen+0x80>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61fb      	str	r3, [r7, #28]

	LWIP_UNUSED_ARG(arg);

	/* Create a new socket fd for listening */
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8001dea:	2206      	movs	r2, #6
 8001dec:	2101      	movs	r1, #1
 8001dee:	2002      	movs	r0, #2
 8001df0:	f00f fb40 	bl	8011474 <lwip_socket>
 8001df4:	6378      	str	r0, [r7, #52]	@ 0x34

	if (listen_sockfd != -1) {
 8001df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d022      	beq.n	8001e44 <server_listen+0x78>
		/* Bind socket to server port */
		err = bind(listen_sockfd, (struct sockaddr* ) &serv, sizeof(serv));
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	2210      	movs	r2, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e08:	f00e fde0 	bl	80109cc <lwip_bind>
 8001e0c:	6338      	str	r0, [r7, #48]	@ 0x30

		if (err == 0) {
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d114      	bne.n	8001e3e <server_listen+0x72>
			/* Tell connection to go into listening mode. */
			err = listen(listen_sockfd, MAX_CONN_NUM);
 8001e14:	2108      	movs	r1, #8
 8001e16:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e18:	f00e fe9c 	bl	8010b54 <lwip_listen>
 8001e1c:	6338      	str	r0, [r7, #48]	@ 0x30

			for (;;) {
				clilen = sizeof(cli);
 8001e1e:	2310      	movs	r3, #16
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28

				// Block until new connection, accept any that appear
				connfd = accept(listen_sockfd, (struct sockaddr* ) &cli, &clilen);
 8001e22:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e2e:	f00e fcaf 	bl	8010790 <lwip_accept>
 8001e32:	62f8      	str	r0, [r7, #44]	@ 0x2c

				server_addConnection(connfd);
 8001e34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e36:	f000 f80b 	bl	8001e50 <server_addConnection>
				clilen = sizeof(cli);
 8001e3a:	bf00      	nop
 8001e3c:	e7ef      	b.n	8001e1e <server_listen+0x52>
			} // end for(;;)
		} else { // Bind failed
			close(listen_sockfd);
 8001e3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e40:	f00e fe32 	bl	8010aa8 <lwip_close>
		}
	} else { // Socket creation failed

	}
}
 8001e44:	bf00      	nop
 8001e46:	3738      	adds	r7, #56	@ 0x38
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2400056c 	.word	0x2400056c

08001e50 <server_addConnection>:

/*
 * Adds socket to connections list
 */
void server_addConnection(int connfd) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

	sys_mutex_lock(conn_mu);
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <server_addConnection+0x58>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f01b fd45 	bl	801d8ec <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	e014      	b.n	8001e92 <server_addConnection+0x42>
		if (connections[i] == -1) {
 8001e68:	4a10      	ldr	r2, [pc, #64]	@ (8001eac <server_addConnection+0x5c>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d10a      	bne.n	8001e8c <server_addConnection+0x3c>
			connections[i] = connfd;
 8001e76:	490d      	ldr	r1, [pc, #52]	@ (8001eac <server_addConnection+0x5c>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			sys_mutex_unlock(conn_mu);
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <server_addConnection+0x58>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f01b fd40 	bl	801d90a <sys_mutex_unlock>
			return;
 8001e8a:	e00a      	b.n	8001ea2 <server_addConnection+0x52>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b07      	cmp	r3, #7
 8001e96:	dde7      	ble.n	8001e68 <server_addConnection+0x18>
		}
	}

	sys_mutex_unlock(conn_mu);
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <server_addConnection+0x58>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f01b fd34 	bl	801d90a <sys_mutex_unlock>

}
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	24000530 	.word	0x24000530
 8001eac:	24000510 	.word	0x24000510

08001eb0 <server_removeConnection>:

/*
 * Removes socket from connections list and frees fd for a new socket to use
 */
void server_removeConnection(int connfd) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

	sys_mutex_lock(conn_mu);
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <server_removeConnection+0x60>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f01b fd15 	bl	801d8ec <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e018      	b.n	8001efa <server_removeConnection+0x4a>
		if (connections[i] == connfd) {
 8001ec8:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <server_removeConnection+0x64>)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d10e      	bne.n	8001ef4 <server_removeConnection+0x44>
			connections[i] = -1;
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <server_removeConnection+0x64>)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f04f 31ff 	mov.w	r1, #4294967295
 8001ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			close(connfd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f00e fde0 	bl	8010aa8 <lwip_close>

			sys_mutex_unlock(conn_mu);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <server_removeConnection+0x60>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f01b fd0c 	bl	801d90a <sys_mutex_unlock>
			return;
 8001ef2:	e00a      	b.n	8001f0a <server_removeConnection+0x5a>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b07      	cmp	r3, #7
 8001efe:	dde3      	ble.n	8001ec8 <server_removeConnection+0x18>
		}
	}

	sys_mutex_unlock(conn_mu);
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <server_removeConnection+0x60>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f01b fd00 	bl	801d90a <sys_mutex_unlock>
}
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	24000530 	.word	0x24000530
 8001f14:	24000510 	.word	0x24000510

08001f18 <server_setFDs>:
	}

	sys_mutex_unlock(conn_mu);
}

void server_setFDs(fd_set *rfds) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	FD_ZERO(rfds);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	2302      	movs	r3, #2
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e007      	b.n	8001f3a <server_setFDs+0x22>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	2100      	movs	r1, #0
 8001f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f4      	bne.n	8001f2a <server_setFDs+0x12>

	sys_mutex_lock(conn_mu);
 8001f40:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <server_setFDs+0x94>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f01b fcd1 	bl	801d8ec <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e021      	b.n	8001f94 <server_setFDs+0x7c>
		if (connections[i] != -1) {
 8001f50:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <server_setFDs+0x98>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d017      	beq.n	8001f8e <server_setFDs+0x76>
			FD_SET(connections[i], rfds);
 8001f5e:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <server_setFDs+0x98>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da00      	bge.n	8001f6c <server_setFDs+0x54>
 8001f6a:	331f      	adds	r3, #31
 8001f6c:	115b      	asrs	r3, r3, #5
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f74:	480e      	ldr	r0, [pc, #56]	@ (8001fb0 <server_setFDs+0x98>)
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2001      	movs	r0, #1
 8001f82:	fa00 f202 	lsl.w	r2, r0, r2
 8001f86:	4311      	orrs	r1, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	3301      	adds	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	ddda      	ble.n	8001f50 <server_setFDs+0x38>
		}
	}

	sys_mutex_unlock(conn_mu);
 8001f9a:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <server_setFDs+0x94>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f01b fcb3 	bl	801d90a <sys_mutex_unlock>
}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	24000530 	.word	0x24000530
 8001fb0:	24000510 	.word	0x24000510

08001fb4 <server_handleRecv>:

void server_handleRecv(fd_set *rfds) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

	sys_mutex_lock(conn_mu);
 8001fbc:	4b28      	ldr	r3, [pc, #160]	@ (8002060 <server_handleRecv+0xac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f01b fc93 	bl	801d8ec <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fca:	e041      	b.n	8002050 <server_handleRecv+0x9c>

		if (connections[i] != -1) {
 8001fcc:	4a25      	ldr	r2, [pc, #148]	@ (8002064 <server_handleRecv+0xb0>)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d032      	beq.n	8002040 <server_handleRecv+0x8c>
			int connfd = connections[i];
 8001fda:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <server_handleRecv+0xb0>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	623b      	str	r3, [r7, #32]

			if (FD_ISSET(connfd, rfds)) { // FD data recv
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da00      	bge.n	8001fec <server_handleRecv+0x38>
 8001fea:	331f      	adds	r3, #31
 8001fec:	115b      	asrs	r3, r3, #5
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <server_handleRecv+0x8c>

				char* buf = malloc(MAX_MSG_LEN);
 8002008:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800200c:	f01b fd02 	bl	801da14 <malloc>
 8002010:	4603      	mov	r3, r0
 8002012:	61fb      	str	r3, [r7, #28]

				int n = recv(connfd, buf, MAX_MSG_LEN, 0);
 8002014:	2300      	movs	r3, #0
 8002016:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800201a:	69f9      	ldr	r1, [r7, #28]
 800201c:	6a38      	ldr	r0, [r7, #32]
 800201e:	f00f f903 	bl	8011228 <lwip_recv>
 8002022:	61b8      	str	r0, [r7, #24]
				// recv all waiting data

				struct message msg = {connfd, buf, n};
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	617b      	str	r3, [r7, #20]

				list_push(rxMsgBuffer, (void*)(&msg));
 8002030:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <server_handleRecv+0xb4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f107 020c 	add.w	r2, r7, #12
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f890 	bl	8002160 <list_push>

			}
		}
		sys_mutex_unlock(conn_mu);
 8002040:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <server_handleRecv+0xac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f01b fc60 	bl	801d90a <sys_mutex_unlock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	2b07      	cmp	r3, #7
 8002054:	ddba      	ble.n	8001fcc <server_handleRecv+0x18>
	}
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	@ 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000530 	.word	0x24000530
 8002064:	24000510 	.word	0x24000510
 8002068:	24000508 	.word	0x24000508

0800206c <server_recv>:

void server_recv(void *arg) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	@ 0x30
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
	LWIP_UNUSED_ARG(arg);

	/* Process the new connection. */
	/* receive the data from the client */
	for (;;) {
		server_setFDs(&rfds);
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff4d 	bl	8001f18 <server_setFDs>

		// Wait 1 second
		tv.tv_sec = 1;
 800207e:	f04f 0201 	mov.w	r2, #1
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c7 2302 	strd	r2, r3, [r7, #8]
		tv.tv_usec = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]

		retval = select(MAX_CONN_NUM+1, &rfds, NULL, NULL, &tv);
 800208e:	f107 011c 	add.w	r1, r7, #28
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2300      	movs	r3, #0
 800209a:	2200      	movs	r2, #0
 800209c:	2009      	movs	r0, #9
 800209e:	f00f fc23 	bl	80118e8 <lwip_select>
 80020a2:	6278      	str	r0, [r7, #36]	@ 0x24

		if (retval == -1) { // error
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d0e3      	beq.n	8002074 <server_recv+0x8>
			//server_probeConnections();
		} else if (retval) { // FD_ISSET will have some true fd
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0e0      	beq.n	8002074 <server_recv+0x8>
			server_handleRecv(&rfds);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff7c 	bl	8001fb4 <server_handleRecv>
		server_setFDs(&rfds);
 80020bc:	e7da      	b.n	8002074 <server_recv+0x8>
	...

080020c0 <server_send>:

void server_retrieveMsg(struct message* msg) {
	list_pop(rxMsgBuffer, (void*)(msg));
}

void server_send(void* args) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0d0      	sub	sp, #320	@ 0x140
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020ce:	6018      	str	r0, [r3, #0]

	char buf[MAX_MSG_LEN];

	for (;;) {

		struct message msg = {-1, buf, MAX_MSG_LEN};
 80020d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020d4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020d8:	f04f 32ff 	mov.w	r2, #4294967295
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020e6:	f107 0214 	add.w	r2, r7, #20
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020f0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020f4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020f8:	609a      	str	r2, [r3, #8]

		list_pop(txMsgBuffer, (void*)(&msg));
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <server_send+0x9c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f107 0208 	add.w	r2, r7, #8
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f838 	bl	800217a <list_pop>

		if (-1 == send(msg.connfd, msg.buf, msg.len, 0)) { // opts = 0
 800210a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800210e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002118:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002122:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	461a      	mov	r2, r3
 800212a:	2300      	movs	r3, #0
 800212c:	f00f f892 	bl	8011254 <lwip_send>
 8002130:	4603      	mov	r3, r0
 8002132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002136:	d107      	bne.n	8002148 <server_send+0x88>
			// message failed to send
			server_removeConnection(msg.connfd);
 8002138:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800213c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff feb4 	bl	8001eb0 <server_removeConnection>
		}

		free(msg.buf);
 8002148:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800214c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f01b fc66 	bl	801da24 <free>
	for (;;) {
 8002158:	e7ba      	b.n	80020d0 <server_send+0x10>
 800215a:	bf00      	nop
 800215c:	2400050c 	.word	0x2400050c

08002160 <list_push>:
 *
 * Thread Safe Queue
 *
 */

void list_push(List *list, void* data) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	list_add(list, data); // push to front
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f869 	bl	8002244 <list_add>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <list_pop>:

void list_pop(List *list, void* data) {
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
	list_remove(list, data); // pop from end
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8be 	bl	8002308 <list_remove>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <free_node_data>:

void free_node_data(CallbackFree free_callback, void *data) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
	if (free_callback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <free_node_data+0x18>
		free_callback(data);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	4798      	blx	r3
	else
		free(data);
}
 80021aa:	e002      	b.n	80021b2 <free_node_data+0x1e>
		free(data);
 80021ac:	6838      	ldr	r0, [r7, #0]
 80021ae:	f01b fc39 	bl	801da24 <free>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <list_create>:

List *list_create(int dataSize, CallbackFree free_callback) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	assert(dataSize > 0);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	dc05      	bgt.n	80021d8 <list_create+0x1c>
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <list_create+0x7c>)
 80021ce:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <list_create+0x80>)
 80021d0:	2120      	movs	r1, #32
 80021d2:	481b      	ldr	r0, [pc, #108]	@ (8002240 <list_create+0x84>)
 80021d4:	f01b fbe4 	bl	801d9a0 <__assert_func>

	List *list = (List *)malloc(sizeof(List));
 80021d8:	2020      	movs	r0, #32
 80021da:	f01b fc1b 	bl	801da14 <malloc>
 80021de:	4603      	mov	r3, r0
 80021e0:	60fb      	str	r3, [r7, #12]
	list->count = 0;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
	list->data_size = dataSize;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	605a      	str	r2, [r3, #4]
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 80021ee:	2101      	movs	r1, #1
 80021f0:	2008      	movs	r0, #8
 80021f2:	f01b fbf3 	bl	801d9dc <calloc>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	609a      	str	r2, [r3, #8]
	list->callback_free = free_callback;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	611a      	str	r2, [r3, #16]
	list->mutex = xSemaphoreCreateMutex();
 8002204:	2001      	movs	r0, #1
 8002206:	f008 ff06 	bl	800b016 <xQueueCreateMutex>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	615a      	str	r2, [r3, #20]
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8002210:	2100      	movs	r1, #0
 8002212:	2064      	movs	r0, #100	@ 0x64
 8002214:	f008 ffd7 	bl	800b1c6 <xQueueCreateCountingSemaphore>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	619a      	str	r2, [r3, #24]
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 800221e:	2164      	movs	r1, #100	@ 0x64
 8002220:	2064      	movs	r0, #100	@ 0x64
 8002222:	f008 ffd0 	bl	800b1c6 <xQueueCreateCountingSemaphore>
 8002226:	4602      	mov	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	61da      	str	r2, [r3, #28]

	return list;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	0801ecc4 	.word	0x0801ecc4
 800223c:	080226b8 	.word	0x080226b8
 8002240:	0801ecd4 	.word	0x0801ecd4

08002244 <list_add>:

	free(list);
}


void list_add(List *list, void *data) { // push to front
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

	assert(list != NULL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <list_add+0x1c>
 8002254:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <list_add+0xb4>)
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <list_add+0xb8>)
 8002258:	2145      	movs	r1, #69	@ 0x45
 800225a:	4829      	ldr	r0, [pc, #164]	@ (8002300 <list_add+0xbc>)
 800225c:	f01b fba0 	bl	801d9a0 <__assert_func>

	xSemaphoreTake(list->remainingSpace, portMAX_DELAY); // Only add to queue if there is space
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	4618      	mov	r0, r3
 800226a:	f009 faf3 	bl	800b854 <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f04f 31ff 	mov.w	r1, #4294967295
 8002276:	4618      	mov	r0, r3
 8002278:	f009 faec 	bl	800b854 <xQueueSemaphoreTake>

	assert(data != NULL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <list_add+0x4a>
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <list_add+0xc0>)
 8002284:	4a1d      	ldr	r2, [pc, #116]	@ (80022fc <list_add+0xb8>)
 8002286:	214b      	movs	r1, #75	@ 0x4b
 8002288:	481d      	ldr	r0, [pc, #116]	@ (8002300 <list_add+0xbc>)
 800228a:	f01b fb89 	bl	801d9a0 <__assert_func>

	Node *newNode = malloc(sizeof(Node));
 800228e:	2008      	movs	r0, #8
 8002290:	f01b fbc0 	bl	801da14 <malloc>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
	newNode->data = malloc(list->data_size);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4618      	mov	r0, r3
 800229e:	f01b fbb9 	bl	801da14 <malloc>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]
	memcpy(newNode->data, data, list->data_size);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	f01b ffb0 	bl	801e21a <memcpy>

	newNode->next = list->head;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
	list->head = newNode;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	609a      	str	r2, [r3, #8]
	list->count++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(list->mutex); // Unlock mutex
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6958      	ldr	r0, [r3, #20]
 80022d6:	2300      	movs	r3, #0
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	f008 ffa8 	bl	800b230 <xQueueGenericSend>

	xSemaphoreGive(list->msgs); // Notify waiting consumers
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6998      	ldr	r0, [r3, #24]
 80022e4:	2300      	movs	r3, #0
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	f008 ffa1 	bl	800b230 <xQueueGenericSend>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	0801ecec 	.word	0x0801ecec
 80022fc:	080226c4 	.word	0x080226c4
 8002300:	0801ecd4 	.word	0x0801ecd4
 8002304:	0801ecfc 	.word	0x0801ecfc

08002308 <list_remove>:

void list_remove(List *list, void* data) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]

	assert(list != NULL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <list_remove+0x1c>
 8002318:	4b31      	ldr	r3, [pc, #196]	@ (80023e0 <list_remove+0xd8>)
 800231a:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <list_remove+0xdc>)
 800231c:	215c      	movs	r1, #92	@ 0x5c
 800231e:	4832      	ldr	r0, [pc, #200]	@ (80023e8 <list_remove+0xe0>)
 8002320:	f01b fb3e 	bl	801d9a0 <__assert_func>

	xSemaphoreTake(list->msgs, portMAX_DELAY); // Remove message when at least one exists
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	4618      	mov	r0, r3
 800232e:	f009 fa91 	bl	800b854 <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f04f 31ff 	mov.w	r1, #4294967295
 800233a:	4618      	mov	r0, r3
 800233c:	f009 fa8a 	bl	800b854 <xQueueSemaphoreTake>

	assert(list->count > 0);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	dc05      	bgt.n	8002354 <list_remove+0x4c>
 8002348:	4b28      	ldr	r3, [pc, #160]	@ (80023ec <list_remove+0xe4>)
 800234a:	4a26      	ldr	r2, [pc, #152]	@ (80023e4 <list_remove+0xdc>)
 800234c:	2162      	movs	r1, #98	@ 0x62
 800234e:	4826      	ldr	r0, [pc, #152]	@ (80023e8 <list_remove+0xe0>)
 8002350:	f01b fb26 	bl	801d9a0 <__assert_func>

	Node *prev_node = NULL;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
	Node *curr_node = list->head;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	60bb      	str	r3, [r7, #8]

	// Condition OK because count > 0
	while (curr_node->next->next != NULL){ // look for last node in list
 800235e:	e004      	b.n	800236a <list_remove+0x62>
		prev_node = curr_node;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60fb      	str	r3, [r7, #12]
		curr_node = prev_node->next;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60bb      	str	r3, [r7, #8]
	while (curr_node->next->next != NULL){ // look for last node in list
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f5      	bne.n	8002360 <list_remove+0x58>
	}

	memcpy(data, curr_node->data, list->data_size);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6819      	ldr	r1, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	461a      	mov	r2, r3
 800237e:	6838      	ldr	r0, [r7, #0]
 8002380:	f01b ff4b 	bl	801e21a <memcpy>

	if (prev_node != NULL) {
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <list_remove+0x8c>
		prev_node->next = curr_node->next;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e003      	b.n	800239c <list_remove+0x94>
	} else {
		list->head = curr_node->next;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]
	}
	free_node_data(list->callback_free, curr_node->data);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f7ff fef4 	bl	8002194 <free_node_data>
	free(curr_node);
 80023ac:	68b8      	ldr	r0, [r7, #8]
 80023ae:	f01b fb39 	bl	801da24 <free>

	list->count--;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1e5a      	subs	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(list->mutex); // Unlock mutex
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6958      	ldr	r0, [r3, #20]
 80023c0:	2300      	movs	r3, #0
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	f008 ff33 	bl	800b230 <xQueueGenericSend>

	xSemaphoreGive(list->remainingSpace); // Notify waiting producers
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69d8      	ldr	r0, [r3, #28]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	f008 ff2c 	bl	800b230 <xQueueGenericSend>
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	0801ecec 	.word	0x0801ecec
 80023e4:	080226d0 	.word	0x080226d0
 80023e8:	0801ecd4 	.word	0x0801ecd4
 80023ec:	0801ed0c 	.word	0x0801ed0c

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002428 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023f4:	f7ff fbee 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fa:	490d      	ldr	r1, [pc, #52]	@ (8002430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002410:	4c0a      	ldr	r4, [pc, #40]	@ (800243c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241e:	f01b fed5 	bl	801e1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7fe f949 	bl	80006b8 <main>
  bx  lr
 8002426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002428:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800242c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002430:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8002434:	08022968 	.word	0x08022968
  ldr r2, =_sbss
 8002438:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 800243c:	2401ba44 	.word	0x2401ba44

08002440 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC3_IRQHandler>

08002442 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00b      	beq.n	800246a <LAN8742_RegisterBusIO+0x28>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <LAN8742_RegisterBusIO+0x28>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <LAN8742_RegisterBusIO+0x28>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	e014      	b.n	800249a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d139      	bne.n	8002536 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e01c      	b.n	8002516 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f107 020c 	add.w	r2, r7, #12
 80024e4:	2112      	movs	r1, #18
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	4798      	blx	r3
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da03      	bge.n	80024f8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80024f0:	f06f 0304 	mvn.w	r3, #4
 80024f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80024f6:	e00b      	b.n	8002510 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	d105      	bne.n	8002510 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
         break;
 800250e:	e005      	b.n	800251c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b1f      	cmp	r3, #31
 800251a:	d9df      	bls.n	80024dc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b1f      	cmp	r3, #31
 8002522:	d902      	bls.n	800252a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002524:	f06f 0302 	mvn.w	r3, #2
 8002528:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002536:	693b      	ldr	r3, [r7, #16]
 }
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6810      	ldr	r0, [r2, #0]
 8002554:	f107 020c 	add.w	r2, r7, #12
 8002558:	2101      	movs	r1, #1
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	da02      	bge.n	8002568 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002562:	f06f 0304 	mvn.w	r3, #4
 8002566:	e06e      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6810      	ldr	r0, [r2, #0]
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	2101      	movs	r1, #1
 8002576:	4798      	blx	r3
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	da02      	bge.n	8002584 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800257e:	f06f 0304 	mvn.w	r3, #4
 8002582:	e060      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800258e:	2301      	movs	r3, #1
 8002590:	e059      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6810      	ldr	r0, [r2, #0]
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	2100      	movs	r1, #0
 80025a0:	4798      	blx	r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da02      	bge.n	80025ae <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025a8:	f06f 0304 	mvn.w	r3, #4
 80025ac:	e04b      	b.n	8002646 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11b      	bne.n	80025f0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <LAN8742_GetLinkState+0x90>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025cc:	2302      	movs	r3, #2
 80025ce:	e03a      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025da:	2303      	movs	r3, #3
 80025dc:	e033      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80025e8:	2304      	movs	r3, #4
 80025ea:	e02c      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80025ec:	2305      	movs	r3, #5
 80025ee:	e02a      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6810      	ldr	r0, [r2, #0]
 80025f8:	f107 020c 	add.w	r2, r7, #12
 80025fc:	211f      	movs	r1, #31
 80025fe:	4798      	blx	r3
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	da02      	bge.n	800260c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002606:	f06f 0304 	mvn.w	r3, #4
 800260a:	e01c      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002616:	2306      	movs	r3, #6
 8002618:	e015      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 031c 	and.w	r3, r3, #28
 8002620:	2b18      	cmp	r3, #24
 8002622:	d101      	bne.n	8002628 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002624:	2302      	movs	r3, #2
 8002626:	e00e      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 031c 	and.w	r3, r3, #28
 800262e:	2b08      	cmp	r3, #8
 8002630:	d101      	bne.n	8002636 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002632:	2303      	movs	r3, #3
 8002634:	e007      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 031c 	and.w	r3, r3, #28
 800263c:	2b14      	cmp	r3, #20
 800263e:	d101      	bne.n	8002644 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002640:	2304      	movs	r3, #4
 8002642:	e000      	b.n	8002646 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002644:	2305      	movs	r3, #5
    }
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002656:	2003      	movs	r0, #3
 8002658:	f000 f917 	bl	800288a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800265c:	f003 f822 	bl	80056a4 <HAL_RCC_GetSysClockFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <HAL_Init+0x68>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	4913      	ldr	r1, [pc, #76]	@ (80026bc <HAL_Init+0x6c>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	fa22 f303 	lsr.w	r3, r2, r3
 8002678:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_Init+0x68>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a0e      	ldr	r2, [pc, #56]	@ (80026bc <HAL_Init+0x6c>)
 8002684:	5cd3      	ldrb	r3, [r2, r3]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_Init+0x70>)
 8002692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_Init+0x74>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269a:	200f      	movs	r0, #15
 800269c:	f7ff f934 	bl	8001908 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e002      	b.n	80026b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026aa:	f7fe fd1d 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58024400 	.word	0x58024400
 80026bc:	080226a8 	.word	0x080226a8
 80026c0:	24000004 	.word	0x24000004
 80026c4:	24000000 	.word	0x24000000

080026c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x20>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x24>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4413      	add	r3, r2
 80026d8:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <HAL_IncTick+0x24>)
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2400000c 	.word	0x2400000c
 80026ec:	24000534 	.word	0x24000534

080026f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b03      	ldr	r3, [pc, #12]	@ (8002704 <HAL_GetTick+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	24000534 	.word	0x24000534

08002708 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002718:	4904      	ldr	r1, [pc, #16]	@ (800272c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	58000400 	.word	0x58000400

08002730 <__NVIC_SetPriorityGrouping>:
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <__NVIC_SetPriorityGrouping+0x40>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <__NVIC_SetPriorityGrouping+0x40>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	05fa0000 	.word	0x05fa0000

08002778 <__NVIC_GetPriorityGrouping>:
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_EnableIRQ>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800279e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db0b      	blt.n	80027be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4907      	ldr	r1, [pc, #28]	@ (80027cc <__NVIC_EnableIRQ+0x38>)
 80027ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2001      	movs	r0, #1
 80027b6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <__NVIC_SetPriority>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	@ (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	@ (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <NVIC_EncodePriority>:
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	@ 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf28      	it	cs
 8002842:	2304      	movcs	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	2b06      	cmp	r3, #6
 800284c:	d902      	bls.n	8002854 <NVIC_EncodePriority+0x30>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3b03      	subs	r3, #3
 8002852:	e000      	b.n	8002856 <NVIC_EncodePriority+0x32>
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43d9      	mvns	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	4313      	orrs	r3, r2
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	@ 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ff4c 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028ae:	f7ff ff63 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f7ff ffb3 	bl	8002824 <NVIC_EncodePriority>
 80028be:	4602      	mov	r2, r0
 80028c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff82 	bl	80027d0 <__NVIC_SetPriority>
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff56 	bl	8002794 <__NVIC_EnableIRQ>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028f4:	f3bf 8f5f 	dmb	sy
}
 80028f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <HAL_MPU_Disable+0x28>)
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <HAL_MPU_Disable+0x28>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002904:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002906:	4b05      	ldr	r3, [pc, #20]	@ (800291c <HAL_MPU_Disable+0x2c>)
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00
 800291c:	e000ed90 	.word	0xe000ed90

08002920 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002928:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <HAL_MPU_Enable+0x38>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_MPU_Enable+0x3c>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <HAL_MPU_Enable+0x3c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
}
 8002942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002944:	f3bf 8f6f 	isb	sy
}
 8002948:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed90 	.word	0xe000ed90
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	785a      	ldrb	r2, [r3, #1]
 800296c:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 800296e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002970:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800297c:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7b1b      	ldrb	r3, [r3, #12]
 8002988:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7adb      	ldrb	r3, [r3, #11]
 800298e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002990:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a9b      	ldrb	r3, [r3, #10]
 8002996:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7b5b      	ldrb	r3, [r3, #13]
 800299e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7b9b      	ldrb	r3, [r3, #14]
 80029a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7bdb      	ldrb	r3, [r3, #15]
 80029ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7a5b      	ldrb	r3, [r3, #9]
 80029b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7a1b      	ldrb	r3, [r3, #8]
 80029be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c8:	4a04      	ldr	r2, [pc, #16]	@ (80029dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029cc:	6113      	str	r3, [r2, #16]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed90 	.word	0xe000ed90

080029e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e3      	b.n	8002bba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2223      	movs	r2, #35	@ 0x23
 8002a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f007 f967 	bl	8009cd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc4 <HAL_ETH_Init+0x1e4>)
 8002a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a10:	4a6c      	ldr	r2, [pc, #432]	@ (8002bc4 <HAL_ETH_Init+0x1e4>)
 8002a12:	f043 0302 	orr.w	r3, r3, #2
 8002a16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc4 <HAL_ETH_Init+0x1e4>)
 8002a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7a1b      	ldrb	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff fe69 	bl	8002708 <HAL_SYSCFG_ETHInterfaceSelect>
 8002a36:	e003      	b.n	8002a40 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a38:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a3c:	f7ff fe64 	bl	8002708 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a40:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <HAL_ETH_Init+0x1e8>)
 8002a42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5c:	f7ff fe48 	bl	80026f0 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a62:	e011      	b.n	8002a88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002a64:	f7ff fe44 	bl	80026f0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a72:	d909      	bls.n	8002a88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2204      	movs	r2, #4
 8002a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	22e0      	movs	r2, #224	@ 0xe0
 8002a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e098      	b.n	8002bba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e4      	bne.n	8002a64 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 ff1c 	bl	80038d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002aa0:	f002 ff7a 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a49      	ldr	r2, [pc, #292]	@ (8002bcc <HAL_ETH_Init+0x1ec>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	0c9a      	lsrs	r2, r3, #18
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3a01      	subs	r2, #1
 8002ab4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f001 f919 	bl	8003cf0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002aca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ad6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ada:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	22e0      	movs	r2, #224	@ 0xe0
 8002af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e05d      	b.n	8002bba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b06:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002b0a:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_ETH_Init+0x1f0>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6952      	ldr	r2, [r2, #20]
 8002b12:	0051      	lsls	r1, r2, #1
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b1e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f001 f981 	bl	8003e2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f001 f9c7 	bl	8003ebc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	3305      	adds	r3, #5
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	021a      	lsls	r2, r3, #8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	3303      	adds	r3, #3
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	3301      	adds	r3, #1
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b7a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b7c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_ETH_Init+0x1f4>)
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_ETH_Init+0x1f8>)
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	58000400 	.word	0x58000400
 8002bcc:	431bde83 	.word	0x431bde83
 8002bd0:	ffff8001 	.word	0xffff8001
 8002bd4:	0c020060 	.word	0x0c020060
 8002bd8:	0c20c000 	.word	0x0c20c000

08002bdc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d165      	bne.n	8002cba <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2223      	movs	r2, #35	@ 0x23
 8002bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9e4 	bl	8002fd0 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c10:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c20:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c3c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c48:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002c54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c58:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0202 	orr.w	r2, r2, #2
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c98:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002caa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2223      	movs	r2, #35	@ 0x23
 8002cb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd2:	2b23      	cmp	r3, #35	@ 0x23
 8002cd4:	d165      	bne.n	8002da2 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2223      	movs	r2, #35	@ 0x23
 8002cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ce6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b30      	ldr	r3, [pc, #192]	@ (8002db0 <HAL_ETH_Stop_IT+0xec>)
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cf6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d02:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d12:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	f023 0301 	bic.w	r3, r3, #1
 8002d2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d2e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0202 	bic.w	r2, r2, #2
 8002d64:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e00e      	b.n	8002d8a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	3212      	adds	r2, #18
 8002d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d76:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d9ed      	bls.n	8002d6c <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e000      	b.n	8002da4 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	ffff2f3e 	.word	0xffff2f3e

08002db4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e03a      	b.n	8002e4e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dde:	2b23      	cmp	r3, #35	@ 0x23
 8002de0:	d134      	bne.n	8002e4c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002dea:	2201      	movs	r2, #1
 8002dec:	6839      	ldr	r1, [r7, #0]
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f001 f8c2 	bl	8003f78 <ETH_Prepare_Tx_Descriptors>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f043 0202 	orr.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e01f      	b.n	8002e4e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002e0e:	f3bf 8f4f 	dsb	sy
}
 8002e12:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d904      	bls.n	8002e30 <HAL_ETH_Transmit_IT+0x7c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	1f1a      	subs	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3106      	adds	r1, #6
 8002e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e44:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
  }
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b088      	sub	sp, #32
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0a2      	b.n	8002fc8 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e88:	2b23      	cmp	r3, #35	@ 0x23
 8002e8a:	d001      	beq.n	8002e90 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e09b      	b.n	8002fc8 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	3212      	adds	r2, #18
 8002e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea6:	f1c3 0304 	rsb	r3, r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002eac:	e064      	b.n	8002f78 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_ETH_ReadData+0x88>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03a      	beq.n	8002f54 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f007 f89c 	bl	800a070 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d902      	bls.n	8002f66 <HAL_ETH_ReadData+0x110>
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	3b04      	subs	r3, #4
 8002f64:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	3212      	adds	r2, #18
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	db06      	blt.n	8002f8e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d202      	bcs.n	8002f8e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d08f      	beq.n	8002eae <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f814 	bl	8002fd0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d108      	bne.n	8002fc6 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fe4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	3212      	adds	r2, #18
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ff6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002ff8:	e038      	b.n	800306c <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d112      	bne.n	8003028 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003002:	f107 0308 	add.w	r3, r7, #8
 8003006:	4618      	mov	r0, r3
 8003008:	f007 f802 	bl	800a010 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	74fb      	strb	r3, [r7, #19]
 8003016:	e007      	b.n	8003028 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	461a      	mov	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	461a      	mov	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01e      	beq.n	800306c <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e003      	b.n	8003048 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8003046:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d902      	bls.n	800305a <ETH_UpdateDescriptor+0x8a>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3b04      	subs	r3, #4
 8003058:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	3212      	adds	r2, #18
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	617b      	str	r3, [r7, #20]
      desccount--;
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	3b01      	subs	r3, #1
 800306a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <ETH_UpdateDescriptor+0xa8>
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1c0      	bne.n	8002ffa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	429a      	cmp	r2, r3
 8003080:	d01b      	beq.n	80030ba <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800308c:	f3bf 8f5f 	dmb	sy
}
 8003090:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6919      	ldr	r1, [r3, #16]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	18ca      	adds	r2, r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030aa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3318      	adds	r3, #24
 80030ce:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80030e0:	e047      	b.n	8003172 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3304      	adds	r3, #4
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3301      	adds	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d902      	bls.n	800310e <HAL_ETH_ReleaseTxPacket+0x4c>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3b04      	subs	r3, #4
 800310c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8003112:	7bbb      	ldrb	r3, [r7, #14]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02c      	beq.n	8003172 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68d9      	ldr	r1, [r3, #12]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4613      	mov	r3, r2
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db1f      	blt.n	800316e <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3304      	adds	r3, #4
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	f007 f800 	bl	800a140 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	3304      	adds	r3, #4
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	3301      	adds	r3, #1
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d902      	bls.n	8003160 <HAL_ETH_ReleaseTxPacket+0x9e>
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	3b04      	subs	r3, #4
 800315e:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800316c:	e001      	b.n	8003172 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_ETH_ReleaseTxPacket+0xbc>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1b1      	bne.n	80030e2 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80031a6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80031b4:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80031b6:	4b6d      	ldr	r3, [pc, #436]	@ (800336c <HAL_ETH_IRQHandler+0x1e4>)
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d010      	beq.n	80031e8 <HAL_ETH_IRQHandler+0x60>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00b      	beq.n	80031e8 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d8:	461a      	mov	r2, r3
 80031da:	f248 0340 	movw	r3, #32832	@ 0x8040
 80031de:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f006 fab8 	bl	8009758 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_ETH_IRQHandler+0x8c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003204:	461a      	mov	r2, r3
 8003206:	f248 0301 	movw	r3, #32769	@ 0x8001
 800320a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f006 fab2 	bl	8009778 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d047      	beq.n	80032ae <HAL_ETH_IRQHandler+0x126>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d042      	beq.n	80032ae <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f043 0208 	orr.w	r2, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01e      	beq.n	8003280 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800324a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800324e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8003252:	4013      	ands	r3, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003262:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800326e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003272:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	22e0      	movs	r2, #224	@ 0xe0
 800327a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800327e:	e013      	b.n	80032a8 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003288:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800328c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329e:	461a      	mov	r2, r3
 80032a0:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80032a4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f006 fa75 	bl	8009798 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d019      	beq.n	80032f6 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	22e0      	movs	r2, #224	@ 0xe0
 80032e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f006 fa55 	bl	8009798 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00f      	beq.n	8003320 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003308:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f82c 	bl	8003370 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00f      	beq.n	800334a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f821 	bl	8003384 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_ETH_IRQHandler+0x1e4>)
 8003356:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f81b 	bl	8003398 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	58000080 	.word	0x58000080

08003370 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e03e      	b.n	800344c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033d6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	055b      	lsls	r3, r3, #21
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f043 030c 	orr.w	r3, r3, #12
 80033fa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800340e:	f7ff f96f 	bl	80026f0 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003414:	e009      	b.n	800342a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003416:	f7ff f96b 	bl	80026f0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003424:	d901      	bls.n	800342a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e010      	b.n	800344c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1ed      	bne.n	8003416 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e03c      	b.n	80034f0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800347e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	055b      	lsls	r3, r3, #21
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 030c 	bic.w	r3, r3, #12
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	4b10      	ldr	r3, [pc, #64]	@ (80034f8 <HAL_ETH_WritePHYRegister+0xa4>)
 80034b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80034ba:	4a0f      	ldr	r2, [pc, #60]	@ (80034f8 <HAL_ETH_WritePHYRegister+0xa4>)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80034c2:	f7ff f915 	bl	80026f0 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80034c8:	e009      	b.n	80034de <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80034ca:	f7ff f911 	bl	80026f0 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034d8:	d901      	bls.n	80034de <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e008      	b.n	80034f0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ed      	bne.n	80034ca <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40028000 	.word	0x40028000

080034fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e1c3      	b.n	8003898 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800359e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	461a      	mov	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800368a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf14      	ite	ne
 80036ba:	2301      	movne	r3, #1
 80036bc:	2300      	moveq	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	461a      	mov	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	0e5b      	lsrs	r3, r3, #25
 800375a:	f003 021f 	and.w	r2, r3, #31
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	b29a      	uxth	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003806:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003824:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003834:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e00b      	b.n	80038d0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d105      	bne.n	80038ce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80038c2:	6839      	ldr	r1, [r7, #0]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f871 	bl	80039ac <ETH_SetMACConfig>

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80038f2:	f002 f851 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 80038f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d804      	bhi.n	800390a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e022      	b.n	8003950 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <HAL_ETH_SetMDIOClockRange+0x90>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d204      	bcs.n	800391c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e019      	b.n	8003950 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4a13      	ldr	r2, [pc, #76]	@ (800396c <HAL_ETH_SetMDIOClockRange+0x94>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d915      	bls.n	8003950 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d804      	bhi.n	8003936 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e00c      	b.n	8003950 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4a0e      	ldr	r2, [pc, #56]	@ (8003974 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d804      	bhi.n	8003948 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e003      	b.n	8003950 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800394e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	02160ebf 	.word	0x02160ebf
 8003968:	03938700 	.word	0x03938700
 800396c:	05f5e0ff 	.word	0x05f5e0ff
 8003970:	08f0d17f 	.word	0x08f0d17f
 8003974:	0ee6b27f 	.word	0x0ee6b27f

08003978 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80039be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	791b      	ldrb	r3, [r3, #4]
 80039c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80039c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	7b1b      	ldrb	r3, [r3, #12]
 80039cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80039ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	7b5b      	ldrb	r3, [r3, #13]
 80039d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80039d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7b9b      	ldrb	r3, [r3, #14]
 80039dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80039de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	7bdb      	ldrb	r3, [r3, #15]
 80039e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80039e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	7c12      	ldrb	r2, [r2, #16]
 80039ec:	2a00      	cmp	r2, #0
 80039ee:	d102      	bne.n	80039f6 <ETH_SetMACConfig+0x4a>
 80039f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80039f4:	e000      	b.n	80039f8 <ETH_SetMACConfig+0x4c>
 80039f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80039f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	7c52      	ldrb	r2, [r2, #17]
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	d102      	bne.n	8003a08 <ETH_SetMACConfig+0x5c>
 8003a02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a06:	e000      	b.n	8003a0a <ETH_SetMACConfig+0x5e>
 8003a08:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003a0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	7c9b      	ldrb	r3, [r3, #18]
 8003a10:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003a12:	431a      	orrs	r2, r3
               macconf->Speed |
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003a18:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	7f1b      	ldrb	r3, [r3, #28]
 8003a24:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003a26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	7f5b      	ldrb	r3, [r3, #29]
 8003a2c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003a2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	7f92      	ldrb	r2, [r2, #30]
 8003a34:	2a00      	cmp	r2, #0
 8003a36:	d102      	bne.n	8003a3e <ETH_SetMACConfig+0x92>
 8003a38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a3c:	e000      	b.n	8003a40 <ETH_SetMACConfig+0x94>
 8003a3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003a40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	7fdb      	ldrb	r3, [r3, #31]
 8003a46:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003a48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d102      	bne.n	8003a5a <ETH_SetMACConfig+0xae>
 8003a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a58:	e000      	b.n	8003a5c <ETH_SetMACConfig+0xb0>
 8003a5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003a5c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a6a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003a6c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b56      	ldr	r3, [pc, #344]	@ (8003bd8 <ETH_SetMACConfig+0x22c>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a96:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003a98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003aa0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003aaa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003aac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d102      	bne.n	8003abe <ETH_SetMACConfig+0x112>
 8003ab8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003abc:	e000      	b.n	8003ac0 <ETH_SetMACConfig+0x114>
 8003abe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003ac0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4b42      	ldr	r3, [pc, #264]	@ (8003bdc <ETH_SetMACConfig+0x230>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <ETH_SetMACConfig+0x234>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	430b      	orrs	r3, r1
 8003b00:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003b08:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003b16:	2a00      	cmp	r2, #0
 8003b18:	d101      	bne.n	8003b1e <ETH_SetMACConfig+0x172>
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	e000      	b.n	8003b20 <ETH_SetMACConfig+0x174>
 8003b1e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003b20:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b32:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003b48:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003b50:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	f023 0103 	bic.w	r1, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003b76:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d101      	bne.n	8003b9a <ETH_SetMACConfig+0x1ee>
 8003b96:	2240      	movs	r2, #64	@ 0x40
 8003b98:	e000      	b.n	8003b9c <ETH_SetMACConfig+0x1f0>
 8003b9a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003b9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003ba4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ba6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003bae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003bbc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	00048083 	.word	0x00048083
 8003bdc:	c0f88000 	.word	0xc0f88000
 8003be0:	fffffef0 	.word	0xfffffef0

08003be4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b38      	ldr	r3, [pc, #224]	@ (8003cdc <ETH_SetDMAConfig+0xf8>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	6811      	ldr	r1, [r2, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c0a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	791b      	ldrb	r3, [r3, #4]
 8003c10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	7b1b      	ldrb	r3, [r3, #12]
 8003c1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce0 <ETH_SetDMAConfig+0xfc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c3c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	7b5b      	ldrb	r3, [r3, #13]
 8003c42:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c54:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003c58:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <ETH_SetDMAConfig+0x100>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c68:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	7d1b      	ldrb	r3, [r3, #20]
 8003c74:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	7f5b      	ldrb	r3, [r3, #29]
 8003c7c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <ETH_SetDMAConfig+0x104>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c9e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7f1b      	ldrb	r3, [r3, #28]
 8003ca6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <ETH_SetDMAConfig+0x108>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ccc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	ffff87fd 	.word	0xffff87fd
 8003ce0:	ffff2ffe 	.word	0xffff2ffe
 8003ce4:	fffec000 	.word	0xfffec000
 8003ce8:	ffc0efef 	.word	0xffc0efef
 8003cec:	7fc0ffff 	.word	0x7fc0ffff

08003cf0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0a4      	sub	sp, #144	@ 0x90
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d30:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003d48:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003d4c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003d54:	2300      	movs	r3, #0
 8003d56:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003d72:	2300      	movs	r3, #0
 8003d74:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003d9a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003da0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003da4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003dac:	2302      	movs	r3, #2
 8003dae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dd8:	4619      	mov	r1, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fde6 	bl	80039ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003de4:	2301      	movs	r3, #1
 8003de6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dfa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003e10:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003e14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fee1 	bl	8003be4 <ETH_SetDMAConfig>
}
 8003e22:	bf00      	nop
 8003e24:	3790      	adds	r7, #144	@ 0x90
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e01d      	b.n	8003e74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68d9      	ldr	r1, [r3, #12]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	440b      	add	r3, r1
 8003e48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	3206      	adds	r2, #6
 8003e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d9de      	bls.n	8003e38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eac:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e023      	b.n	8003f12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	3212      	adds	r2, #18
 8003f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d9d8      	bls.n	8003eca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2303      	movs	r3, #3
 8003f42:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f52:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f66:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b091      	sub	sp, #68	@ 0x44
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3318      	adds	r3, #24
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fba:	d007      	beq.n	8003fcc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e266      	b.n	800449e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d044      	beq.n	8004066 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	4b75      	ldr	r3, [pc, #468]	@ (80041b8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d027      	beq.n	8004066 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	b29a      	uxth	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	041b      	lsls	r3, r3, #16
 8004022:	431a      	orrs	r2, r3
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004040:	431a      	orrs	r2, r3
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004054:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004064:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00e      	beq.n	8004090 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	4b51      	ldr	r3, [pc, #324]	@ (80041bc <ETH_Prepare_Tx_Descriptors+0x244>)
 8004078:	4013      	ands	r3, r2
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	6992      	ldr	r2, [r2, #24]
 800407e:	431a      	orrs	r2, r3
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d036      	beq.n	8004116 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80040b4:	f3bf 8f5f 	dmb	sy
}
 80040b8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80040c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c8:	3301      	adds	r3, #1
 80040ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d902      	bls.n	80040d8 <ETH_Prepare_Tx_Descriptors+0x160>
 80040d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d4:	3b04      	subs	r3, #4
 80040d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e0:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	3301      	adds	r3, #1
 80040e6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040f4:	d10f      	bne.n	8004116 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004100:	f3bf 8f5f 	dmb	sy
}
 8004104:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	e1c3      	b.n	800449e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8004116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004118:	3301      	adds	r3, #1
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <ETH_Prepare_Tx_Descriptors+0x244>)
 800412c:	4013      	ands	r3, r2
 800412e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004130:	6852      	ldr	r2, [r2, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d012      	beq.n	8004166 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8004140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8004156:	4013      	ands	r3, r2
 8004158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800415a:	6852      	ldr	r2, [r2, #4]
 800415c:	0412      	lsls	r2, r2, #16
 800415e:	431a      	orrs	r2, r3
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	e008      	b.n	8004178 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8004172:	4013      	ands	r3, r2
 8004174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004176:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d021      	beq.n	80041c8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	04db      	lsls	r3, r3, #19
 8004192:	431a      	orrs	r2, r3
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	69d2      	ldr	r2, [r2, #28]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e02e      	b.n	8004216 <ETH_Prepare_Tx_Descriptors+0x29e>
 80041b8:	ffff0000 	.word	0xffff0000
 80041bc:	ffffc000 	.word	0xffffc000
 80041c0:	c000ffff 	.word	0xc000ffff
 80041c4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	4b7b      	ldr	r3, [pc, #492]	@ (80043bc <ETH_Prepare_Tx_Descriptors+0x444>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	6852      	ldr	r2, [r2, #4]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	431a      	orrs	r2, r3
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	431a      	orrs	r2, r3
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800424c:	f3bf 8f5f 	dmb	sy
}
 8004250:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80da 	beq.w	8004420 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	431a      	orrs	r2, r3
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800427e:	e0cf      	b.n	8004420 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	3301      	adds	r3, #1
 8004290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004294:	2b03      	cmp	r3, #3
 8004296:	d902      	bls.n	800429e <ETH_Prepare_Tx_Descriptors+0x326>
 8004298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800429a:	3b04      	subs	r3, #4
 800429c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042c0:	d007      	beq.n	80042d2 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80042c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c6:	3304      	adds	r3, #4
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d029      	beq.n	8004326 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042e4:	e019      	b.n	800431a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80042e6:	f3bf 8f5f 	dmb	sy
}
 80042ea:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80042f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fa:	3301      	adds	r3, #1
 80042fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004300:	2b03      	cmp	r3, #3
 8004302:	d902      	bls.n	800430a <ETH_Prepare_Tx_Descriptors+0x392>
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	3b04      	subs	r3, #4
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004312:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004316:	3301      	adds	r3, #1
 8004318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800431a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	429a      	cmp	r2, r3
 8004320:	d3e1      	bcc.n	80042e6 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8004322:	2302      	movs	r3, #2
 8004324:	e0bb      	b.n	800449e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8004326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004328:	3301      	adds	r3, #1
 800432a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	4b1f      	ldr	r3, [pc, #124]	@ (80043c0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8004342:	4013      	ands	r3, r2
 8004344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004346:	6852      	ldr	r2, [r2, #4]
 8004348:	431a      	orrs	r2, r3
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d012      	beq.n	800437c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	4b16      	ldr	r3, [pc, #88]	@ (80043c4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800436c:	4013      	ands	r3, r2
 800436e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004370:	6852      	ldr	r2, [r2, #4]
 8004372:	0412      	lsls	r2, r2, #16
 8004374:	431a      	orrs	r2, r3
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	609a      	str	r2, [r3, #8]
 800437a:	e008      	b.n	800438e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800437c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437e:	2200      	movs	r2, #0
 8004380:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	4b0f      	ldr	r3, [pc, #60]	@ (80043c4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004388:	4013      	ands	r3, r2
 800438a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <ETH_Prepare_Tx_Descriptors+0x450>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	69d2      	ldr	r2, [r2, #28]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	60da      	str	r2, [r3, #12]
 80043b8:	e020      	b.n	80043fc <ETH_Prepare_Tx_Descriptors+0x484>
 80043ba:	bf00      	nop
 80043bc:	ffff8000 	.word	0xffff8000
 80043c0:	ffffc000 	.word	0xffffc000
 80043c4:	c000ffff 	.word	0xc000ffff
 80043c8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <ETH_Prepare_Tx_Descriptors+0x534>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	6852      	ldr	r2, [r2, #4]
 80043d8:	431a      	orrs	r2, r3
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	3301      	adds	r3, #1
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004402:	f3bf 8f5f 	dmb	sy
}
 8004406:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004412:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f af2b 	bne.w	8004280 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	e005      	b.n	800444a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004448:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800444a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800445a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	3304      	adds	r3, #4
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800446a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446c:	f3ef 8310 	mrs	r3, PRIMASK
 8004470:	613b      	str	r3, [r7, #16]
  return(result);
 8004472:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	2301      	movs	r3, #1
 8004478:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f383 8810 	msr	PRIMASK, r3
}
 8004480:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	4413      	add	r3, r2
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	f383 8810 	msr	PRIMASK, r3
}
 800449a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3744      	adds	r7, #68	@ 0x44
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	ffff8000 	.word	0xffff8000

080044b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044be:	4b86      	ldr	r3, [pc, #536]	@ (80046d8 <HAL_GPIO_Init+0x228>)
 80044c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044c2:	e18c      	b.n	80047de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 817e 	beq.w	80047d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d005      	beq.n	80044f4 <HAL_GPIO_Init+0x44>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d130      	bne.n	8004556 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800452a:	2201      	movs	r2, #1
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0201 	and.w	r2, r3, #1
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b03      	cmp	r3, #3
 8004560:	d017      	beq.n	8004592 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d123      	bne.n	80045e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	08da      	lsrs	r2, r3, #3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3208      	adds	r2, #8
 80045a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	220f      	movs	r2, #15
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	08da      	lsrs	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3208      	adds	r2, #8
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	2203      	movs	r2, #3
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f003 0203 	and.w	r2, r3, #3
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80d8 	beq.w	80047d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004628:	4b2c      	ldr	r3, [pc, #176]	@ (80046dc <HAL_GPIO_Init+0x22c>)
 800462a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800462e:	4a2b      	ldr	r2, [pc, #172]	@ (80046dc <HAL_GPIO_Init+0x22c>)
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004638:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <HAL_GPIO_Init+0x22c>)
 800463a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a26      	ldr	r2, [pc, #152]	@ (80046e0 <HAL_GPIO_Init+0x230>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_GPIO_Init+0x234>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d04a      	beq.n	8004708 <HAL_GPIO_Init+0x258>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <HAL_GPIO_Init+0x238>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d02b      	beq.n	80046d2 <HAL_GPIO_Init+0x222>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <HAL_GPIO_Init+0x23c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d025      	beq.n	80046ce <HAL_GPIO_Init+0x21e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <HAL_GPIO_Init+0x240>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <HAL_GPIO_Init+0x21a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_GPIO_Init+0x244>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d019      	beq.n	80046c6 <HAL_GPIO_Init+0x216>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a18      	ldr	r2, [pc, #96]	@ (80046f8 <HAL_GPIO_Init+0x248>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_GPIO_Init+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a17      	ldr	r2, [pc, #92]	@ (80046fc <HAL_GPIO_Init+0x24c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00d      	beq.n	80046be <HAL_GPIO_Init+0x20e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a16      	ldr	r2, [pc, #88]	@ (8004700 <HAL_GPIO_Init+0x250>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_Init+0x20a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <HAL_GPIO_Init+0x254>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_Init+0x206>
 80046b2:	2309      	movs	r3, #9
 80046b4:	e029      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046b6:	230a      	movs	r3, #10
 80046b8:	e027      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046ba:	2307      	movs	r3, #7
 80046bc:	e025      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046be:	2306      	movs	r3, #6
 80046c0:	e023      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046c2:	2305      	movs	r3, #5
 80046c4:	e021      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046c6:	2304      	movs	r3, #4
 80046c8:	e01f      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046ca:	2303      	movs	r3, #3
 80046cc:	e01d      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e01b      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e019      	b.n	800470a <HAL_GPIO_Init+0x25a>
 80046d6:	bf00      	nop
 80046d8:	58000080 	.word	0x58000080
 80046dc:	58024400 	.word	0x58024400
 80046e0:	58000400 	.word	0x58000400
 80046e4:	58020000 	.word	0x58020000
 80046e8:	58020400 	.word	0x58020400
 80046ec:	58020800 	.word	0x58020800
 80046f0:	58020c00 	.word	0x58020c00
 80046f4:	58021000 	.word	0x58021000
 80046f8:	58021400 	.word	0x58021400
 80046fc:	58021800 	.word	0x58021800
 8004700:	58021c00 	.word	0x58021c00
 8004704:	58022400 	.word	0x58022400
 8004708:	2300      	movs	r3, #0
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	f002 0203 	and.w	r2, r2, #3
 8004710:	0092      	lsls	r2, r2, #2
 8004712:	4093      	lsls	r3, r2
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800471a:	4938      	ldr	r1, [pc, #224]	@ (80047fc <HAL_GPIO_Init+0x34c>)
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	089b      	lsrs	r3, r3, #2
 8004720:	3302      	adds	r3, #2
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800474e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800477c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	fa22 f303 	lsr.w	r3, r2, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f47f ae6b 	bne.w	80044c4 <HAL_GPIO_Init+0x14>
  }
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	3724      	adds	r7, #36	@ 0x24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	58000400 	.word	0x58000400

08004800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004810:	787b      	ldrb	r3, [r7, #1]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800481c:	e003      	b.n	8004826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004844:	887a      	ldrh	r2, [r7, #2]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4013      	ands	r3, r2
 800484a:	041a      	lsls	r2, r3, #16
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	43d9      	mvns	r1, r3
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	400b      	ands	r3, r1
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	619a      	str	r2, [r3, #24]
}
 800485a:	bf00      	nop
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e08b      	b.n	8004992 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc fc48 	bl	8001124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	@ 0x24
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e006      	b.n	80048f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d108      	bne.n	800490a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	e007      	b.n	800491a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004918:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <HAL_I2C_Init+0x134>)
 8004926:	430b      	orrs	r3, r1
 8004928:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1a      	ldr	r2, [r3, #32]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	02008000 	.word	0x02008000

080049a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d138      	bne.n	8004a28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e032      	b.n	8004a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	@ 0x24
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d139      	bne.n	8004ac0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e033      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	@ 0x24
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004ad8:	4b29      	ldr	r3, [pc, #164]	@ (8004b80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	2b06      	cmp	r3, #6
 8004ae2:	d00a      	beq.n	8004afa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ae4:	4b26      	ldr	r3, [pc, #152]	@ (8004b80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e03f      	b.n	8004b76 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e03d      	b.n	8004b76 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004afa:	4b21      	ldr	r3, [pc, #132]	@ (8004b80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004b02:	491f      	ldr	r1, [pc, #124]	@ (8004b80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b0a:	f7fd fdf1 	bl	80026f0 <HAL_GetTick>
 8004b0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b10:	e009      	b.n	8004b26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b12:	f7fd fded 	bl	80026f0 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b20:	d901      	bls.n	8004b26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e027      	b.n	8004b76 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b26:	4b16      	ldr	r3, [pc, #88]	@ (8004b80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b32:	d1ee      	bne.n	8004b12 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b1e      	cmp	r3, #30
 8004b38:	d008      	beq.n	8004b4c <HAL_PWREx_ConfigSupply+0x7c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b3e:	d005      	beq.n	8004b4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b1d      	cmp	r3, #29
 8004b44:	d002      	beq.n	8004b4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b2d      	cmp	r3, #45	@ 0x2d
 8004b4a:	d113      	bne.n	8004b74 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b4c:	f7fd fdd0 	bl	80026f0 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b52:	e009      	b.n	8004b68 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b54:	f7fd fdcc 	bl	80026f0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b62:	d901      	bls.n	8004b68 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e006      	b.n	8004b76 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0311 	and.w	r3, r3, #17
 8004b70:	2b11      	cmp	r3, #17
 8004b72:	d1ef      	bne.n	8004b54 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	58024800 	.word	0x58024800

08004b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	@ 0x30
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e3c8      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8087 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba4:	4b88      	ldr	r3, [pc, #544]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bae:	4b86      	ldr	r3, [pc, #536]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d007      	beq.n	8004bca <HAL_RCC_OscConfig+0x46>
 8004bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbc:	2b18      	cmp	r3, #24
 8004bbe:	d110      	bne.n	8004be2 <HAL_RCC_OscConfig+0x5e>
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d10b      	bne.n	8004be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bca:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d06c      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x12c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d168      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e3a2      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bea:	d106      	bne.n	8004bfa <HAL_RCC_OscConfig+0x76>
 8004bec:	4b76      	ldr	r3, [pc, #472]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a75      	ldr	r2, [pc, #468]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	e02e      	b.n	8004c58 <HAL_RCC_OscConfig+0xd4>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x98>
 8004c02:	4b71      	ldr	r3, [pc, #452]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a70      	ldr	r2, [pc, #448]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a6d      	ldr	r2, [pc, #436]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e01d      	b.n	8004c58 <HAL_RCC_OscConfig+0xd4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0xbc>
 8004c26:	4b68      	ldr	r3, [pc, #416]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a67      	ldr	r2, [pc, #412]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b65      	ldr	r3, [pc, #404]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a64      	ldr	r2, [pc, #400]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCC_OscConfig+0xd4>
 8004c40:	4b61      	ldr	r3, [pc, #388]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a60      	ldr	r2, [pc, #384]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5d      	ldr	r2, [pc, #372]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c60:	f7fd fd46 	bl	80026f0 <HAL_GetTick>
 8004c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c68:	f7fd fd42 	bl	80026f0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	@ 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e356      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c7a:	4b53      	ldr	r3, [pc, #332]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0xe4>
 8004c86:	e014      	b.n	8004cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fd fd32 	bl	80026f0 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c90:	f7fd fd2e 	bl	80026f0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	@ 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e342      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca2:	4b49      	ldr	r3, [pc, #292]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x10c>
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 808c 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc0:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x162>
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2b18      	cmp	r3, #24
 8004cda:	d137      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1c8>
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d132      	bne.n	8004d4c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce6:	4b38      	ldr	r3, [pc, #224]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x17a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e314      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cfe:	4b32      	ldr	r3, [pc, #200]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0219 	bic.w	r2, r3, #25
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	492f      	ldr	r1, [pc, #188]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fd fcee 	bl	80026f0 <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fd fcea 	bl	80026f0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e2fe      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d2a:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b24      	ldr	r3, [pc, #144]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	4920      	ldr	r1, [pc, #128]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d4a:	e045      	b.n	8004dd8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d026      	beq.n	8004da2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 0219 	bic.w	r2, r3, #25
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4919      	ldr	r1, [pc, #100]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fd fcc3 	bl	80026f0 <HAL_GetTick>
 8004d6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6e:	f7fd fcbf 	bl	80026f0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e2d3      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d80:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	061b      	lsls	r3, r3, #24
 8004d9a:	490b      	ldr	r1, [pc, #44]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]
 8004da0:	e01a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da2:	4b09      	ldr	r3, [pc, #36]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <HAL_RCC_OscConfig+0x244>)
 8004da8:	f023 0301 	bic.w	r3, r3, #1
 8004dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fd fc9f 	bl	80026f0 <HAL_GetTick>
 8004db2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db6:	f7fd fc9b 	bl	80026f0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d903      	bls.n	8004dcc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e2af      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
 8004dc8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dcc:	4b96      	ldr	r3, [pc, #600]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ee      	bne.n	8004db6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06a      	beq.n	8004eba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de4:	4b90      	ldr	r3, [pc, #576]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dee:	4b8e      	ldr	r3, [pc, #568]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d007      	beq.n	8004e0a <HAL_RCC_OscConfig+0x286>
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b18      	cmp	r3, #24
 8004dfe:	d11b      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2b4>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d116      	bne.n	8004e38 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e0a:	4b87      	ldr	r3, [pc, #540]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_RCC_OscConfig+0x29e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	2b80      	cmp	r3, #128	@ 0x80
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e282      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e22:	4b81      	ldr	r3, [pc, #516]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	497d      	ldr	r1, [pc, #500]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e36:	e040      	b.n	8004eba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d023      	beq.n	8004e88 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e40:	4b79      	ldr	r3, [pc, #484]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a78      	ldr	r2, [pc, #480]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fc50 	bl	80026f0 <HAL_GetTick>
 8004e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e54:	f7fd fc4c 	bl	80026f0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e260      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e66:	4b70      	ldr	r3, [pc, #448]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e72:	4b6d      	ldr	r3, [pc, #436]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	061b      	lsls	r3, r3, #24
 8004e80:	4969      	ldr	r1, [pc, #420]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60cb      	str	r3, [r1, #12]
 8004e86:	e018      	b.n	8004eba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e88:	4b67      	ldr	r3, [pc, #412]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a66      	ldr	r2, [pc, #408]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fc2c 	bl	80026f0 <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e9c:	f7fd fc28 	bl	80026f0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e23c      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004eae:	4b5e      	ldr	r3, [pc, #376]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d036      	beq.n	8004f34 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d019      	beq.n	8004f02 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ece:	4b56      	ldr	r3, [pc, #344]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed2:	4a55      	ldr	r2, [pc, #340]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd fc09 	bl	80026f0 <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fd fc05 	bl	80026f0 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e219      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x35e>
 8004f00:	e018      	b.n	8004f34 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f02:	4b49      	ldr	r3, [pc, #292]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f06:	4a48      	ldr	r2, [pc, #288]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fbef 	bl	80026f0 <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f16:	f7fd fbeb 	bl	80026f0 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1ff      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f28:	4b3f      	ldr	r3, [pc, #252]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d036      	beq.n	8004fae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f48:	4b37      	ldr	r3, [pc, #220]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a36      	ldr	r2, [pc, #216]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f54:	f7fd fbcc 	bl	80026f0 <HAL_GetTick>
 8004f58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f5c:	f7fd fbc8 	bl	80026f0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1dc      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x3d8>
 8004f7a:	e018      	b.n	8004fae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f88:	f7fd fbb2 	bl	80026f0 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f90:	f7fd fbae 	bl	80026f0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1c2      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fa2:	4b21      	ldr	r3, [pc, #132]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8086 	beq.w	80050c8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x4a8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800502c <HAL_RCC_OscConfig+0x4a8>)
 8004fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fc8:	f7fd fb92 	bl	80026f0 <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd0:	f7fd fb8e 	bl	80026f0 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	@ 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1a2      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fe2:	4b12      	ldr	r3, [pc, #72]	@ (800502c <HAL_RCC_OscConfig+0x4a8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d106      	bne.n	8005004 <HAL_RCC_OscConfig+0x480>
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6713      	str	r3, [r2, #112]	@ 0x70
 8005002:	e032      	b.n	800506a <HAL_RCC_OscConfig+0x4e6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d111      	bne.n	8005030 <HAL_RCC_OscConfig+0x4ac>
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005010:	4a05      	ldr	r2, [pc, #20]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	6713      	str	r3, [r2, #112]	@ 0x70
 8005018:	4b03      	ldr	r3, [pc, #12]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 800501a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501c:	4a02      	ldr	r2, [pc, #8]	@ (8005028 <HAL_RCC_OscConfig+0x4a4>)
 800501e:	f023 0304 	bic.w	r3, r3, #4
 8005022:	6713      	str	r3, [r2, #112]	@ 0x70
 8005024:	e021      	b.n	800506a <HAL_RCC_OscConfig+0x4e6>
 8005026:	bf00      	nop
 8005028:	58024400 	.word	0x58024400
 800502c:	58024800 	.word	0x58024800
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b05      	cmp	r3, #5
 8005036:	d10c      	bne.n	8005052 <HAL_RCC_OscConfig+0x4ce>
 8005038:	4b83      	ldr	r3, [pc, #524]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	4a82      	ldr	r2, [pc, #520]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
 8005044:	4b80      	ldr	r3, [pc, #512]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	4a7f      	ldr	r2, [pc, #508]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005050:	e00b      	b.n	800506a <HAL_RCC_OscConfig+0x4e6>
 8005052:	4b7d      	ldr	r3, [pc, #500]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005056:	4a7c      	ldr	r2, [pc, #496]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	6713      	str	r3, [r2, #112]	@ 0x70
 800505e:	4b7a      	ldr	r3, [pc, #488]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	4a79      	ldr	r2, [pc, #484]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d015      	beq.n	800509e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005072:	f7fd fb3d 	bl	80026f0 <HAL_GetTick>
 8005076:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fd fb39 	bl	80026f0 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e14b      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005090:	4b6d      	ldr	r3, [pc, #436]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ee      	beq.n	800507a <HAL_RCC_OscConfig+0x4f6>
 800509c:	e014      	b.n	80050c8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fd fb27 	bl	80026f0 <HAL_GetTick>
 80050a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fb23 	bl	80026f0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e135      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050bc:	4b62      	ldr	r3, [pc, #392]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ee      	bne.n	80050a6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 812a 	beq.w	8005326 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050da:	2b18      	cmp	r3, #24
 80050dc:	f000 80ba 	beq.w	8005254 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	f040 8095 	bne.w	8005214 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b57      	ldr	r3, [pc, #348]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a56      	ldr	r2, [pc, #344]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80050f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fd fafb 	bl	80026f0 <HAL_GetTick>
 80050fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fd faf7 	bl	80026f0 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e10b      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005110:	4b4d      	ldr	r3, [pc, #308]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800511c:	4b4a      	ldr	r3, [pc, #296]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800511e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005120:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <HAL_RCC_OscConfig+0x6c8>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800512c:	0112      	lsls	r2, r2, #4
 800512e:	430a      	orrs	r2, r1
 8005130:	4945      	ldr	r1, [pc, #276]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	628b      	str	r3, [r1, #40]	@ 0x28
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513a:	3b01      	subs	r3, #1
 800513c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005144:	3b01      	subs	r3, #1
 8005146:	025b      	lsls	r3, r3, #9
 8005148:	b29b      	uxth	r3, r3
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515e:	3b01      	subs	r3, #1
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005166:	4938      	ldr	r1, [pc, #224]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800516c:	4b36      	ldr	r3, [pc, #216]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	4a35      	ldr	r2, [pc, #212]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005178:	4b33      	ldr	r3, [pc, #204]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800517a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800517c:	4b34      	ldr	r3, [pc, #208]	@ (8005250 <HAL_RCC_OscConfig+0x6cc>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005184:	00d2      	lsls	r2, r2, #3
 8005186:	4930      	ldr	r1, [pc, #192]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800518c:	4b2e      	ldr	r3, [pc, #184]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	f023 020c 	bic.w	r2, r3, #12
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	492b      	ldr	r1, [pc, #172]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800519e:	4b2a      	ldr	r3, [pc, #168]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	f023 0202 	bic.w	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	4927      	ldr	r1, [pc, #156]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	4a24      	ldr	r2, [pc, #144]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051bc:	4b22      	ldr	r3, [pc, #136]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	4a21      	ldr	r2, [pc, #132]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a18      	ldr	r2, [pc, #96]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fd fa80 	bl	80026f0 <HAL_GetTick>
 80051f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fd fa7c 	bl	80026f0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e090      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005206:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x670>
 8005212:	e088      	b.n	8005326 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0b      	ldr	r2, [pc, #44]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800521a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800521e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd fa66 	bl	80026f0 <HAL_GetTick>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005228:	f7fd fa62 	bl	80026f0 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e076      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800523a:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <HAL_RCC_OscConfig+0x6c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x6a4>
 8005246:	e06e      	b.n	8005326 <HAL_RCC_OscConfig+0x7a2>
 8005248:	58024400 	.word	0x58024400
 800524c:	fffffc0c 	.word	0xfffffc0c
 8005250:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005254:	4b36      	ldr	r3, [pc, #216]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800525a:	4b35      	ldr	r3, [pc, #212]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	2b01      	cmp	r3, #1
 8005266:	d031      	beq.n	80052cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f003 0203 	and.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d12a      	bne.n	80052cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d122      	bne.n	80052cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005292:	429a      	cmp	r2, r3
 8005294:	d11a      	bne.n	80052cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0a5b      	lsrs	r3, r3, #9
 800529a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d111      	bne.n	80052cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d108      	bne.n	80052cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e02b      	b.n	8005328 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052d0:	4b17      	ldr	r3, [pc, #92]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 80052d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d01f      	beq.n	8005326 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052e6:	4b12      	ldr	r3, [pc, #72]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ea:	4a11      	ldr	r2, [pc, #68]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052f2:	f7fd f9fd 	bl	80026f0 <HAL_GetTick>
 80052f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052f8:	bf00      	nop
 80052fa:	f7fd f9f9 	bl	80026f0 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	4293      	cmp	r3, r2
 8005304:	d0f9      	beq.n	80052fa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005306:	4b0a      	ldr	r3, [pc, #40]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 8005308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800530a:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <HAL_RCC_OscConfig+0x7b0>)
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005312:	00d2      	lsls	r2, r2, #3
 8005314:	4906      	ldr	r1, [pc, #24]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 8005316:	4313      	orrs	r3, r2
 8005318:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800531a:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <HAL_RCC_OscConfig+0x7ac>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3730      	adds	r7, #48	@ 0x30
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	58024400 	.word	0x58024400
 8005334:	ffff0007 	.word	0xffff0007

08005338 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e19c      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b8a      	ldr	r3, [pc, #552]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d910      	bls.n	800537c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b87      	ldr	r3, [pc, #540]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 020f 	bic.w	r2, r3, #15
 8005362:	4985      	ldr	r1, [pc, #532]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b83      	ldr	r3, [pc, #524]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e184      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d010      	beq.n	80053aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005394:	429a      	cmp	r2, r3
 8005396:	d908      	bls.n	80053aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005398:	4b78      	ldr	r3, [pc, #480]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	4975      	ldr	r1, [pc, #468]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d010      	beq.n	80053d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	4b70      	ldr	r3, [pc, #448]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d908      	bls.n	80053d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053c6:	4b6d      	ldr	r3, [pc, #436]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	496a      	ldr	r1, [pc, #424]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	4b64      	ldr	r3, [pc, #400]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d908      	bls.n	8005406 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053f4:	4b61      	ldr	r3, [pc, #388]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	495e      	ldr	r1, [pc, #376]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005402:	4313      	orrs	r3, r2
 8005404:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d010      	beq.n	8005434 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	4b59      	ldr	r3, [pc, #356]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800541e:	429a      	cmp	r2, r3
 8005420:	d908      	bls.n	8005434 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005422:	4b56      	ldr	r3, [pc, #344]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	4953      	ldr	r1, [pc, #332]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005430:	4313      	orrs	r3, r2
 8005432:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d010      	beq.n	8005462 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	4b4d      	ldr	r3, [pc, #308]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	429a      	cmp	r2, r3
 800544e:	d908      	bls.n	8005462 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005450:	4b4a      	ldr	r3, [pc, #296]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f023 020f 	bic.w	r2, r3, #15
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4947      	ldr	r1, [pc, #284]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800545e:	4313      	orrs	r3, r2
 8005460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d055      	beq.n	800551a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800546e:	4b43      	ldr	r3, [pc, #268]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	4940      	ldr	r1, [pc, #256]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800547c:	4313      	orrs	r3, r2
 800547e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d107      	bne.n	8005498 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005488:	4b3c      	ldr	r3, [pc, #240]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d121      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0f6      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054a0:	4b36      	ldr	r3, [pc, #216]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0ea      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054b8:	4b30      	ldr	r3, [pc, #192]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0de      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c8:	4b2c      	ldr	r3, [pc, #176]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0d6      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054d8:	4b28      	ldr	r3, [pc, #160]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f023 0207 	bic.w	r2, r3, #7
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4925      	ldr	r1, [pc, #148]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ea:	f7fd f901 	bl	80026f0 <HAL_GetTick>
 80054ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f2:	f7fd f8fd 	bl	80026f0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e0be      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005508:	4b1c      	ldr	r3, [pc, #112]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	429a      	cmp	r2, r3
 8005518:	d1eb      	bne.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d010      	beq.n	8005548 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	4b14      	ldr	r3, [pc, #80]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	429a      	cmp	r2, r3
 8005534:	d208      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005536:	4b11      	ldr	r3, [pc, #68]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f023 020f 	bic.w	r2, r3, #15
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	490e      	ldr	r1, [pc, #56]	@ (800557c <HAL_RCC_ClockConfig+0x244>)
 8005544:	4313      	orrs	r3, r2
 8005546:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d214      	bcs.n	8005580 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 020f 	bic.w	r2, r3, #15
 800555e:	4906      	ldr	r1, [pc, #24]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b04      	ldr	r3, [pc, #16]	@ (8005578 <HAL_RCC_ClockConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d005      	beq.n	8005580 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e086      	b.n	8005686 <HAL_RCC_ClockConfig+0x34e>
 8005578:	52002000 	.word	0x52002000
 800557c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005598:	429a      	cmp	r2, r3
 800559a:	d208      	bcs.n	80055ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800559c:	4b3c      	ldr	r3, [pc, #240]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4939      	ldr	r1, [pc, #228]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d010      	beq.n	80055dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	4b34      	ldr	r3, [pc, #208]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d208      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	492e      	ldr	r1, [pc, #184]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699a      	ldr	r2, [r3, #24]
 80055ec:	4b28      	ldr	r3, [pc, #160]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d208      	bcs.n	800560a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055f8:	4b25      	ldr	r3, [pc, #148]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	4922      	ldr	r1, [pc, #136]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 8005606:	4313      	orrs	r3, r2
 8005608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	4b1d      	ldr	r3, [pc, #116]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005622:	429a      	cmp	r2, r3
 8005624:	d208      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005626:	4b1a      	ldr	r3, [pc, #104]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	4917      	ldr	r1, [pc, #92]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 8005634:	4313      	orrs	r3, r2
 8005636:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005638:	f000 f834 	bl	80056a4 <HAL_RCC_GetSysClockFreq>
 800563c:	4602      	mov	r2, r0
 800563e:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	4912      	ldr	r1, [pc, #72]	@ (8005694 <HAL_RCC_ClockConfig+0x35c>)
 800564a:	5ccb      	ldrb	r3, [r1, r3]
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005656:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <HAL_RCC_ClockConfig+0x358>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	4a0d      	ldr	r2, [pc, #52]	@ (8005694 <HAL_RCC_ClockConfig+0x35c>)
 8005660:	5cd3      	ldrb	r3, [r2, r3]
 8005662:	f003 031f 	and.w	r3, r3, #31
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
 800566c:	4a0a      	ldr	r2, [pc, #40]	@ (8005698 <HAL_RCC_ClockConfig+0x360>)
 800566e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005670:	4a0a      	ldr	r2, [pc, #40]	@ (800569c <HAL_RCC_ClockConfig+0x364>)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005676:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <HAL_RCC_ClockConfig+0x368>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc f944 	bl	8001908 <HAL_InitTick>
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	58024400 	.word	0x58024400
 8005694:	080226a8 	.word	0x080226a8
 8005698:	24000004 	.word	0x24000004
 800569c:	24000000 	.word	0x24000000
 80056a0:	24000008 	.word	0x24000008

080056a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	@ 0x24
 80056a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056aa:	4bb3      	ldr	r3, [pc, #716]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b2:	2b18      	cmp	r3, #24
 80056b4:	f200 8155 	bhi.w	8005962 <HAL_RCC_GetSysClockFreq+0x2be>
 80056b8:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	08005725 	.word	0x08005725
 80056c4:	08005963 	.word	0x08005963
 80056c8:	08005963 	.word	0x08005963
 80056cc:	08005963 	.word	0x08005963
 80056d0:	08005963 	.word	0x08005963
 80056d4:	08005963 	.word	0x08005963
 80056d8:	08005963 	.word	0x08005963
 80056dc:	08005963 	.word	0x08005963
 80056e0:	0800574b 	.word	0x0800574b
 80056e4:	08005963 	.word	0x08005963
 80056e8:	08005963 	.word	0x08005963
 80056ec:	08005963 	.word	0x08005963
 80056f0:	08005963 	.word	0x08005963
 80056f4:	08005963 	.word	0x08005963
 80056f8:	08005963 	.word	0x08005963
 80056fc:	08005963 	.word	0x08005963
 8005700:	08005751 	.word	0x08005751
 8005704:	08005963 	.word	0x08005963
 8005708:	08005963 	.word	0x08005963
 800570c:	08005963 	.word	0x08005963
 8005710:	08005963 	.word	0x08005963
 8005714:	08005963 	.word	0x08005963
 8005718:	08005963 	.word	0x08005963
 800571c:	08005963 	.word	0x08005963
 8005720:	08005757 	.word	0x08005757
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005724:	4b94      	ldr	r3, [pc, #592]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005730:	4b91      	ldr	r3, [pc, #580]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	4a90      	ldr	r2, [pc, #576]	@ (800597c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005742:	e111      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005744:	4b8d      	ldr	r3, [pc, #564]	@ (800597c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005746:	61bb      	str	r3, [r7, #24]
      break;
 8005748:	e10e      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800574a:	4b8d      	ldr	r3, [pc, #564]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800574c:	61bb      	str	r3, [r7, #24]
      break;
 800574e:	e10b      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005750:	4b8c      	ldr	r3, [pc, #560]	@ (8005984 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005752:	61bb      	str	r3, [r7, #24]
      break;
 8005754:	e108      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005756:	4b88      	ldr	r3, [pc, #544]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005760:	4b85      	ldr	r3, [pc, #532]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	091b      	lsrs	r3, r3, #4
 8005766:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800576a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800576c:	4b82      	ldr	r3, [pc, #520]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005776:	4b80      	ldr	r3, [pc, #512]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	08db      	lsrs	r3, r3, #3
 800577c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80e1 	beq.w	800595c <HAL_RCC_GetSysClockFreq+0x2b8>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b02      	cmp	r3, #2
 800579e:	f000 8083 	beq.w	80058a8 <HAL_RCC_GetSysClockFreq+0x204>
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	f200 80a1 	bhi.w	80058ec <HAL_RCC_GetSysClockFreq+0x248>
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCC_GetSysClockFreq+0x114>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d056      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057b6:	e099      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02d      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	4a6b      	ldr	r2, [pc, #428]	@ (800597c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b62      	ldr	r3, [pc, #392]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005802:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005988 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800581e:	e087      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800598c <HAL_RCC_GetSysClockFreq+0x2e8>
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b51      	ldr	r3, [pc, #324]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a02 	vldr	s12, [r7, #8]
 8005846:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005862:	e065      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b40      	ldr	r3, [pc, #256]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a02 	vldr	s12, [r7, #8]
 800588a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005988 <HAL_RCC_GetSysClockFreq+0x2e4>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058a6:	e043      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005994 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005988 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ea:	e021      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005990 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005912:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005988 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800592e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005930:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005934:	0a5b      	lsrs	r3, r3, #9
 8005936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800593a:	3301      	adds	r3, #1
 800593c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	ee07 3a90 	vmov	s15, r3
 8005944:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005948:	edd7 6a07 	vldr	s13, [r7, #28]
 800594c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005954:	ee17 3a90 	vmov	r3, s15
 8005958:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800595a:	e005      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
      break;
 8005960:	e002      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005962:	4b07      	ldr	r3, [pc, #28]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005964:	61bb      	str	r3, [r7, #24]
      break;
 8005966:	bf00      	nop
  }

  return sysclockfreq;
 8005968:	69bb      	ldr	r3, [r7, #24]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3724      	adds	r7, #36	@ 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	03d09000 	.word	0x03d09000
 8005980:	003d0900 	.word	0x003d0900
 8005984:	02dc6c00 	.word	0x02dc6c00
 8005988:	46000000 	.word	0x46000000
 800598c:	4c742400 	.word	0x4c742400
 8005990:	4a742400 	.word	0x4a742400
 8005994:	4c371b00 	.word	0x4c371b00

08005998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800599e:	f7ff fe81 	bl	80056a4 <HAL_RCC_GetSysClockFreq>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4b10      	ldr	r3, [pc, #64]	@ (80059e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	490f      	ldr	r1, [pc, #60]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x54>)
 80059b0:	5ccb      	ldrb	r3, [r1, r3]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	4a09      	ldr	r2, [pc, #36]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x54>)
 80059c6:	5cd3      	ldrb	r3, [r2, r3]
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	4a07      	ldr	r2, [pc, #28]	@ (80059f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059d6:	4a07      	ldr	r2, [pc, #28]	@ (80059f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059dc:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58024400 	.word	0x58024400
 80059ec:	080226a8 	.word	0x080226a8
 80059f0:	24000004 	.word	0x24000004
 80059f4:	24000000 	.word	0x24000000

080059f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059fc:	f7ff ffcc 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	4904      	ldr	r1, [pc, #16]	@ (8005a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a0e:	5ccb      	ldrb	r3, [r1, r3]
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	080226a8 	.word	0x080226a8

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a28:	f7ff ffb6 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4904      	ldr	r1, [pc, #16]	@ (8005a4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	58024400 	.word	0x58024400
 8005a4c:	080226a8 	.word	0x080226a8

08005a50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	223f      	movs	r2, #63	@ 0x3f
 8005a5e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a60:	4b1a      	ldr	r3, [pc, #104]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0207 	and.w	r2, r3, #7
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005a6c:	4b17      	ldr	r3, [pc, #92]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005a78:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005a84:	4b11      	ldr	r3, [pc, #68]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005a90:	4b0e      	ldr	r3, [pc, #56]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005aa8:	4b08      	ldr	r3, [pc, #32]	@ (8005acc <HAL_RCC_GetClockConfig+0x7c>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <HAL_RCC_GetClockConfig+0x80>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 020f 	and.w	r2, r3, #15
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	601a      	str	r2, [r3, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	52002000 	.word	0x52002000

08005ad4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad8:	b0c6      	sub	sp, #280	@ 0x118
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005af8:	2500      	movs	r5, #0
 8005afa:	ea54 0305 	orrs.w	r3, r4, r5
 8005afe:	d049      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b0a:	d02f      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b10:	d828      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b16:	d01a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b1c:	d822      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b26:	d007      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b28:	e01c      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2a:	4bab      	ldr	r3, [pc, #684]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	4aaa      	ldr	r2, [pc, #680]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b36:	e01a      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	2102      	movs	r1, #2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fc25 	bl	8007390 <RCCEx_PLL2_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b4c:	e00f      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b52:	3328      	adds	r3, #40	@ 0x28
 8005b54:	2102      	movs	r1, #2
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fccc 	bl	80074f4 <RCCEx_PLL3_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b62:	e004      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10a      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b76:	4b98      	ldr	r3, [pc, #608]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b7a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b84:	4a94      	ldr	r2, [pc, #592]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b86:	430b      	orrs	r3, r1
 8005b88:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b8a:	e003      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005ba0:	f04f 0900 	mov.w	r9, #0
 8005ba4:	ea58 0309 	orrs.w	r3, r8, r9
 8005ba8:	d047      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d82a      	bhi.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bd1 	.word	0x08005bd1
 8005bc0:	08005bdf 	.word	0x08005bdf
 8005bc4:	08005bf5 	.word	0x08005bf5
 8005bc8:	08005c13 	.word	0x08005c13
 8005bcc:	08005c13 	.word	0x08005c13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd0:	4b81      	ldr	r3, [pc, #516]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	4a80      	ldr	r2, [pc, #512]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bdc:	e01a      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	3308      	adds	r3, #8
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fbd2 	bl	8007390 <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bf2:	e00f      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	3328      	adds	r3, #40	@ 0x28
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fc79 	bl	80074f4 <RCCEx_PLL3_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c1c:	4b6e      	ldr	r3, [pc, #440]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c20:	f023 0107 	bic.w	r1, r3, #7
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c46:	f04f 0b00 	mov.w	fp, #0
 8005c4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c4e:	d05b      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c58:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c5c:	d03b      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c5e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005c62:	d834      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c68:	d037      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c6e:	d82e      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c74:	d033      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c7a:	d828      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c80:	d01a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c86:	d822      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d003      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005c8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c90:	d007      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005c92:	e01c      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c94:	4b50      	ldr	r3, [pc, #320]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	4a4f      	ldr	r2, [pc, #316]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca0:	e01e      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 fb70 	bl	8007390 <RCCEx_PLL2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cb6:	e013      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbc:	3328      	adds	r3, #40	@ 0x28
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fc17 	bl	80074f4 <RCCEx_PLL3_Config>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cf8:	4a37      	ldr	r2, [pc, #220]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfe:	e003      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d22:	460b      	mov	r3, r1
 8005d24:	4313      	orrs	r3, r2
 8005d26:	d05d      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d30:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d34:	d03b      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d36:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d3a:	d834      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d40:	d037      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d46:	d82e      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d4c:	d033      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d52:	d828      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d58:	d01a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d5e:	d822      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d68:	d007      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d6a:	e01c      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4a19      	ldr	r2, [pc, #100]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d78:	e01e      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7e:	3308      	adds	r3, #8
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fb04 	bl	8007390 <RCCEx_PLL2_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d8e:	e013      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d94:	3328      	adds	r3, #40	@ 0x28
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fbab 	bl	80074f4 <RCCEx_PLL3_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005da4:	e008      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dac:	e004      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10d      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dd0:	4a01      	ldr	r2, [pc, #4]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd6:	e005      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005df0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	d03a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0a:	2b30      	cmp	r3, #48	@ 0x30
 8005e0c:	d01f      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e0e:	2b30      	cmp	r3, #48	@ 0x30
 8005e10:	d819      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d00c      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d815      	bhi.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d019      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e1e:	2b10      	cmp	r3, #16
 8005e20:	d111      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e22:	4baa      	ldr	r3, [pc, #680]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4aa9      	ldr	r2, [pc, #676]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e2e:	e011      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e34:	3308      	adds	r3, #8
 8005e36:	2102      	movs	r1, #2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 faa9 	bl	8007390 <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e44:	e006      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e5c:	4b9b      	ldr	r3, [pc, #620]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e6a:	4a98      	ldr	r2, [pc, #608]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e70:	e003      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d051      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea4:	d035      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eaa:	d82e      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb0:	d031      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005eb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005eb6:	d828      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ebc:	d01a      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec2:	d822      	bhi.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ecc:	d007      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ece:	e01c      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005edc:	e01c      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fa52 	bl	8007390 <RCCEx_PLL2_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ef2:	e011      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	3328      	adds	r3, #40	@ 0x28
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 faf9 	bl	80074f4 <RCCEx_PLL3_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f08:	e006      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f10:	e002      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f20:	4b6a      	ldr	r3, [pc, #424]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2e:	4a67      	ldr	r2, [pc, #412]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f34:	e003      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f54:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	d053      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f68:	d033      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f6e:	d82c      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f74:	d02f      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f7a:	d826      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f80:	d02b      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f86:	d820      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f8c:	d012      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f92:	d81a      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d022      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d115      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 f9f2 	bl	8007390 <RCCEx_PLL2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fb2:	e015      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	3328      	adds	r3, #40	@ 0x28
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fa99 	bl	80074f4 <RCCEx_PLL3_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e00a      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fd0:	e006      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fd2:	bf00      	nop
 8005fd4:	e004      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fd6:	bf00      	nop
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fda:	bf00      	nop
 8005fdc:	e000      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fe8:	4b38      	ldr	r3, [pc, #224]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff6:	4a35      	ldr	r2, [pc, #212]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ffc:	e003      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006002:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006016:	2300      	movs	r3, #0
 8006018:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800601c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006020:	460b      	mov	r3, r1
 8006022:	4313      	orrs	r3, r2
 8006024:	d058      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800602e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006032:	d033      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006038:	d82c      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603e:	d02f      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d826      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800604a:	d02b      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800604c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006050:	d820      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006056:	d012      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800605c:	d81a      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d022      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006066:	d115      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	3308      	adds	r3, #8
 800606e:	2101      	movs	r1, #1
 8006070:	4618      	mov	r0, r3
 8006072:	f001 f98d 	bl	8007390 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800607c:	e015      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006082:	3328      	adds	r3, #40	@ 0x28
 8006084:	2101      	movs	r1, #1
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fa34 	bl	80074f4 <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006092:	e00a      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800609a:	e006      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800609c:	bf00      	nop
 800609e:	e004      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10e      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060c2:	4a02      	ldr	r2, [pc, #8]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c8:	e006      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060ca:	bf00      	nop
 80060cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4313      	orrs	r3, r2
 80060f6:	d037      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006102:	d00e      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006108:	d816      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d018      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800610e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006112:	d111      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006114:	4bc4      	ldr	r3, [pc, #784]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	4ac3      	ldr	r2, [pc, #780]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800611a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006120:	e00f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	3308      	adds	r3, #8
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f001 f930 	bl	8007390 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800614a:	4bb7      	ldr	r3, [pc, #732]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800614c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006158:	4ab3      	ldr	r2, [pc, #716]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615a:	430b      	orrs	r3, r1
 800615c:	6513      	str	r3, [r2, #80]	@ 0x50
 800615e:	e003      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800617e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d039      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800618e:	2b03      	cmp	r3, #3
 8006190:	d81c      	bhi.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006192:	a201      	add	r2, pc, #4	@ (adr r2, 8006198 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061d5 	.word	0x080061d5
 800619c:	080061a9 	.word	0x080061a9
 80061a0:	080061b7 	.word	0x080061b7
 80061a4:	080061d5 	.word	0x080061d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a8:	4b9f      	ldr	r3, [pc, #636]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	4a9e      	ldr	r2, [pc, #632]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061b4:	e00f      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ba:	3308      	adds	r3, #8
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f001 f8e6 	bl	8007390 <RCCEx_PLL2_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061de:	4b92      	ldr	r3, [pc, #584]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e2:	f023 0103 	bic.w	r1, r3, #3
 80061e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ec:	4a8e      	ldr	r2, [pc, #568]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ee:	430b      	orrs	r3, r1
 80061f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061f2:	e003      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800620c:	2300      	movs	r3, #0
 800620e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006212:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006216:	460b      	mov	r3, r1
 8006218:	4313      	orrs	r3, r2
 800621a:	f000 8099 	beq.w	8006350 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800621e:	4b83      	ldr	r3, [pc, #524]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a82      	ldr	r2, [pc, #520]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800622a:	f7fc fa61 	bl	80026f0 <HAL_GetTick>
 800622e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006232:	e00b      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006234:	f7fc fa5c 	bl	80026f0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b64      	cmp	r3, #100	@ 0x64
 8006242:	d903      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800624a:	e005      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624c:	4b77      	ldr	r3, [pc, #476]	@ (800642c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ed      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800625c:	2b00      	cmp	r3, #0
 800625e:	d173      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006260:	4b71      	ldr	r3, [pc, #452]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800626c:	4053      	eors	r3, r2
 800626e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006272:	2b00      	cmp	r3, #0
 8006274:	d015      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006276:	4b6c      	ldr	r3, [pc, #432]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800627e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006282:	4b69      	ldr	r3, [pc, #420]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	4a68      	ldr	r2, [pc, #416]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800628e:	4b66      	ldr	r3, [pc, #408]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006292:	4a65      	ldr	r2, [pc, #404]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006298:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800629a:	4a63      	ldr	r2, [pc, #396]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ae:	d118      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fc fa1e 	bl	80026f0 <HAL_GetTick>
 80062b4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b8:	e00d      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ba:	f7fc fa19 	bl	80026f0 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d903      	bls.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80062d4:	e005      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d6:	4b54      	ldr	r3, [pc, #336]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0eb      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d129      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062fa:	d10e      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80062fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800630c:	091a      	lsrs	r2, r3, #4
 800630e:	4b48      	ldr	r3, [pc, #288]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006310:	4013      	ands	r3, r2
 8006312:	4a45      	ldr	r2, [pc, #276]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006314:	430b      	orrs	r3, r1
 8006316:	6113      	str	r3, [r2, #16]
 8006318:	e005      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800631a:	4b43      	ldr	r3, [pc, #268]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	4a42      	ldr	r2, [pc, #264]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006320:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006324:	6113      	str	r3, [r2, #16]
 8006326:	4b40      	ldr	r3, [pc, #256]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006328:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800632a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800632e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006336:	4a3c      	ldr	r2, [pc, #240]	@ (8006428 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006338:	430b      	orrs	r3, r1
 800633a:	6713      	str	r3, [r2, #112]	@ 0x70
 800633c:	e008      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800633e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006342:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006346:	e003      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800634c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 0301 	and.w	r3, r2, #1
 800635c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006360:	2300      	movs	r3, #0
 8006362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006366:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800636a:	460b      	mov	r3, r1
 800636c:	4313      	orrs	r3, r2
 800636e:	f000 808f 	beq.w	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006378:	2b28      	cmp	r3, #40	@ 0x28
 800637a:	d871      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006469 	.word	0x08006469
 8006388:	08006461 	.word	0x08006461
 800638c:	08006461 	.word	0x08006461
 8006390:	08006461 	.word	0x08006461
 8006394:	08006461 	.word	0x08006461
 8006398:	08006461 	.word	0x08006461
 800639c:	08006461 	.word	0x08006461
 80063a0:	08006461 	.word	0x08006461
 80063a4:	08006435 	.word	0x08006435
 80063a8:	08006461 	.word	0x08006461
 80063ac:	08006461 	.word	0x08006461
 80063b0:	08006461 	.word	0x08006461
 80063b4:	08006461 	.word	0x08006461
 80063b8:	08006461 	.word	0x08006461
 80063bc:	08006461 	.word	0x08006461
 80063c0:	08006461 	.word	0x08006461
 80063c4:	0800644b 	.word	0x0800644b
 80063c8:	08006461 	.word	0x08006461
 80063cc:	08006461 	.word	0x08006461
 80063d0:	08006461 	.word	0x08006461
 80063d4:	08006461 	.word	0x08006461
 80063d8:	08006461 	.word	0x08006461
 80063dc:	08006461 	.word	0x08006461
 80063e0:	08006461 	.word	0x08006461
 80063e4:	08006469 	.word	0x08006469
 80063e8:	08006461 	.word	0x08006461
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006461 	.word	0x08006461
 80063f4:	08006461 	.word	0x08006461
 80063f8:	08006461 	.word	0x08006461
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006461 	.word	0x08006461
 8006404:	08006469 	.word	0x08006469
 8006408:	08006461 	.word	0x08006461
 800640c:	08006461 	.word	0x08006461
 8006410:	08006461 	.word	0x08006461
 8006414:	08006461 	.word	0x08006461
 8006418:	08006461 	.word	0x08006461
 800641c:	08006461 	.word	0x08006461
 8006420:	08006461 	.word	0x08006461
 8006424:	08006469 	.word	0x08006469
 8006428:	58024400 	.word	0x58024400
 800642c:	58024800 	.word	0x58024800
 8006430:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	3308      	adds	r3, #8
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f000 ffa7 	bl	8007390 <RCCEx_PLL2_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006448:	e00f      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	3328      	adds	r3, #40	@ 0x28
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f001 f84e 	bl	80074f4 <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800645e:	e004      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006472:	4bbf      	ldr	r3, [pc, #764]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006476:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006480:	4abb      	ldr	r2, [pc, #748]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006482:	430b      	orrs	r3, r1
 8006484:	6553      	str	r3, [r2, #84]	@ 0x54
 8006486:	e003      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800648c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f002 0302 	and.w	r3, r2, #2
 800649c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d041      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b6:	2b05      	cmp	r3, #5
 80064b8:	d824      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	0800650d 	.word	0x0800650d
 80064c4:	080064d9 	.word	0x080064d9
 80064c8:	080064ef 	.word	0x080064ef
 80064cc:	0800650d 	.word	0x0800650d
 80064d0:	0800650d 	.word	0x0800650d
 80064d4:	0800650d 	.word	0x0800650d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	3308      	adds	r3, #8
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ff55 	bl	8007390 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	3328      	adds	r3, #40	@ 0x28
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fffc 	bl	80074f4 <RCCEx_PLL3_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006516:	4b96      	ldr	r3, [pc, #600]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	f023 0107 	bic.w	r1, r3, #7
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006524:	4a92      	ldr	r2, [pc, #584]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006526:	430b      	orrs	r3, r1
 8006528:	6553      	str	r3, [r2, #84]	@ 0x54
 800652a:	e003      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f002 0304 	and.w	r3, r2, #4
 8006540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800654a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d044      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655c:	2b05      	cmp	r3, #5
 800655e:	d825      	bhi.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	080065b5 	.word	0x080065b5
 800656c:	08006581 	.word	0x08006581
 8006570:	08006597 	.word	0x08006597
 8006574:	080065b5 	.word	0x080065b5
 8006578:	080065b5 	.word	0x080065b5
 800657c:	080065b5 	.word	0x080065b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006584:	3308      	adds	r3, #8
 8006586:	2101      	movs	r1, #1
 8006588:	4618      	mov	r0, r3
 800658a:	f000 ff01 	bl	8007390 <RCCEx_PLL2_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006594:	e00f      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659a:	3328      	adds	r3, #40	@ 0x28
 800659c:	2101      	movs	r1, #1
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ffa8 	bl	80074f4 <RCCEx_PLL3_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065aa:	e004      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065b2:	e000      	b.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065be:	4b6c      	ldr	r3, [pc, #432]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c2:	f023 0107 	bic.w	r1, r3, #7
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ce:	4a68      	ldr	r2, [pc, #416]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80065d4:	e003      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f002 0320 	and.w	r3, r2, #32
 80065ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065ee:	2300      	movs	r3, #0
 80065f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4313      	orrs	r3, r2
 80065fc:	d055      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800660a:	d033      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800660c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006610:	d82c      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006616:	d02f      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661c:	d826      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800661e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006622:	d02b      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006628:	d820      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800662a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800662e:	d012      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006634:	d81a      	bhi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006636:	2b00      	cmp	r3, #0
 8006638:	d022      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800663a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800663e:	d115      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	3308      	adds	r3, #8
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fea1 	bl	8007390 <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006654:	e015      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665a:	3328      	adds	r3, #40	@ 0x28
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ff48 	bl	80074f4 <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800666a:	e00a      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006672:	e006      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006674:	bf00      	nop
 8006676:	e004      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800668a:	4b39      	ldr	r3, [pc, #228]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800668c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800669a:	4a35      	ldr	r2, [pc, #212]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6553      	str	r3, [r2, #84]	@ 0x54
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066ba:	2300      	movs	r3, #0
 80066bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066c0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d058      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066d6:	d033      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066dc:	d82c      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e2:	d02f      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e8:	d826      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066ee:	d02b      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80066f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066f4:	d820      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066fa:	d012      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006700:	d81a      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d022      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670a:	d115      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	3308      	adds	r3, #8
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fe3b 	bl	8007390 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006720:	e015      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	3328      	adds	r3, #40	@ 0x28
 8006728:	2102      	movs	r1, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fee2 	bl	80074f4 <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800673e:	e006      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006740:	bf00      	nop
 8006742:	e004      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10e      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006756:	4b06      	ldr	r3, [pc, #24]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800675a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006766:	4a02      	ldr	r2, [pc, #8]	@ (8006770 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6593      	str	r3, [r2, #88]	@ 0x58
 800676c:	e006      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800678c:	2300      	movs	r3, #0
 800678e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006792:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006796:	460b      	mov	r3, r1
 8006798:	4313      	orrs	r3, r2
 800679a:	d055      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067a8:	d033      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067ae:	d82c      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067b4:	d02f      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ba:	d826      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067c0:	d02b      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80067c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067c6:	d820      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067cc:	d012      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80067ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067d2:	d81a      	bhi.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d022      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067dc:	d115      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	3308      	adds	r3, #8
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fdd2 	bl	8007390 <RCCEx_PLL2_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067f2:	e015      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	3328      	adds	r3, #40	@ 0x28
 80067fa:	2102      	movs	r1, #2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fe79 	bl	80074f4 <RCCEx_PLL3_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006808:	e00a      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006810:	e006      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006812:	bf00      	nop
 8006814:	e004      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006816:	bf00      	nop
 8006818:	e002      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800681a:	bf00      	nop
 800681c:	e000      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800681e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006828:	4ba0      	ldr	r3, [pc, #640]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800682a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006838:	4a9c      	ldr	r2, [pc, #624]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800683a:	430b      	orrs	r3, r1
 800683c:	6593      	str	r3, [r2, #88]	@ 0x58
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006844:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f002 0308 	and.w	r3, r2, #8
 8006854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800685e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d01e      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006874:	d10c      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	3328      	adds	r3, #40	@ 0x28
 800687c:	2102      	movs	r1, #2
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fe38 	bl	80074f4 <RCCEx_PLL3_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006890:	4b86      	ldr	r3, [pc, #536]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006894:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	4a82      	ldr	r2, [pc, #520]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f002 0310 	and.w	r3, r2, #16
 80068b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d01e      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d2:	d10c      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	3328      	adds	r3, #40	@ 0x28
 80068da:	2102      	movs	r1, #2
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fe09 	bl	80074f4 <RCCEx_PLL3_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068ee:	4b6f      	ldr	r3, [pc, #444]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068fe:	4a6b      	ldr	r2, [pc, #428]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006900:	430b      	orrs	r3, r1
 8006902:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006910:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006912:	2300      	movs	r3, #0
 8006914:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006916:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800691a:	460b      	mov	r3, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	d03e      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692c:	d022      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800692e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006932:	d81b      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693c:	d00b      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800693e:	e015      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006944:	3308      	adds	r3, #8
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fd21 	bl	8007390 <RCCEx_PLL2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006954:	e00f      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695a:	3328      	adds	r3, #40	@ 0x28
 800695c:	2102      	movs	r1, #2
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fdc8 	bl	80074f4 <RCCEx_PLL3_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800696a:	e004      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10b      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800697e:	4b4b      	ldr	r3, [pc, #300]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006982:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800698e:	4a47      	ldr	r2, [pc, #284]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6593      	str	r3, [r2, #88]	@ 0x58
 8006994:	e003      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800699a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80069ac:	2300      	movs	r3, #0
 80069ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80069b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d03b      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069c6:	d01f      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069cc:	d818      	bhi.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80069ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069d2:	d003      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80069d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069d8:	d007      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80069da:	e011      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069dc:	4b33      	ldr	r3, [pc, #204]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	4a32      	ldr	r2, [pc, #200]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069e8:	e00f      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ee:	3328      	adds	r3, #40	@ 0x28
 80069f0:	2101      	movs	r1, #1
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fd7e 	bl	80074f4 <RCCEx_PLL3_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80069fe:	e004      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a06:	e000      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a12:	4b26      	ldr	r3, [pc, #152]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a22:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a28:	e003      	b.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a40:	2300      	movs	r3, #0
 8006a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a44:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	d034      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a5c:	d007      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a5e:	e011      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a60:	4b12      	ldr	r3, [pc, #72]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	4a11      	ldr	r2, [pc, #68]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a6c:	e00e      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a72:	3308      	adds	r3, #8
 8006a74:	2102      	movs	r1, #2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fc8a 	bl	8007390 <RCCEx_PLL2_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a82:	e003      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10d      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa2:	4a02      	ldr	r2, [pc, #8]	@ (8006aac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aa8:	e006      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006aaa:	bf00      	nop
 8006aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d00c      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	3328      	adds	r3, #40	@ 0x28
 8006ada:	2102      	movs	r1, #2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fd09 	bl	80074f4 <RCCEx_PLL3_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006afc:	2300      	movs	r3, #0
 8006afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b00:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d036      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b14:	d018      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b1a:	d811      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b20:	d014      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b26:	d80b      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d011      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b30:	d106      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b32:	4bb7      	ldr	r3, [pc, #732]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	4ab6      	ldr	r2, [pc, #728]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b3e:	e008      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b46:	e004      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b48:	bf00      	nop
 8006b4a:	e002      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b4c:	bf00      	nop
 8006b4e:	e000      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b5a:	4bad      	ldr	r3, [pc, #692]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b68:	4aa9      	ldr	r2, [pc, #676]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b6e:	e003      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b86:	2300      	movs	r3, #0
 8006b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d009      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b94:	4b9e      	ldr	r3, [pc, #632]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba2:	4a9b      	ldr	r2, [pc, #620]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bc4:	4b92      	ldr	r3, [pc, #584]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd2:	4a8f      	ldr	r2, [pc, #572]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006be6:	2300      	movs	r3, #0
 8006be8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bf4:	4b86      	ldr	r3, [pc, #536]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	4a85      	ldr	r2, [pc, #532]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bfe:	6113      	str	r3, [r2, #16]
 8006c00:	4b83      	ldr	r3, [pc, #524]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c02:	6919      	ldr	r1, [r3, #16]
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c0c:	4a80      	ldr	r2, [pc, #512]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c24:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c2e:	4b78      	ldr	r3, [pc, #480]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3c:	4a74      	ldr	r2, [pc, #464]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c50:	2300      	movs	r3, #0
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c54:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	d00a      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c5e:	4b6c      	ldr	r3, [pc, #432]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c62:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	4a68      	ldr	r2, [pc, #416]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c86:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	d011      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	3308      	adds	r3, #8
 8006c96:	2100      	movs	r1, #0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fb79 	bl	8007390 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	6239      	str	r1, [r7, #32]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	d011      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fb59 	bl	8007390 <RCCEx_PLL2_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	61b9      	str	r1, [r7, #24]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d011      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	3308      	adds	r3, #8
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fb39 	bl	8007390 <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6139      	str	r1, [r7, #16]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	d011      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	3328      	adds	r3, #40	@ 0x28
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fbcb 	bl	80074f4 <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d011      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d94:	3328      	adds	r3, #40	@ 0x28
 8006d96:	2101      	movs	r1, #1
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbab 	bl	80074f4 <RCCEx_PLL3_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	6039      	str	r1, [r7, #0]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d011      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd4:	3328      	adds	r3, #40	@ 0x28
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fb8b 	bl	80074f4 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006df4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e000      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400

08006e14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e18:	f7fe fdbe 	bl	8005998 <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	091b      	lsrs	r3, r3, #4
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4904      	ldr	r1, [pc, #16]	@ (8006e3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	080226a8 	.word	0x080226a8

08006e40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b089      	sub	sp, #36	@ 0x24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e48:	4ba1      	ldr	r3, [pc, #644]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e52:	4b9f      	ldr	r3, [pc, #636]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	0b1b      	lsrs	r3, r3, #12
 8006e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e5e:	4b9c      	ldr	r3, [pc, #624]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e62:	091b      	lsrs	r3, r3, #4
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e6a:	4b99      	ldr	r3, [pc, #612]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6e:	08db      	lsrs	r3, r3, #3
 8006e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8111 	beq.w	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	f000 8083 	beq.w	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	f200 80a1 	bhi.w	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d056      	beq.n	8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006eaa:	e099      	b.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eac:	4b88      	ldr	r3, [pc, #544]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d02d      	beq.n	8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006eb8:	4b85      	ldr	r3, [pc, #532]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	08db      	lsrs	r3, r3, #3
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	4a84      	ldr	r2, [pc, #528]	@ (80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee2:	4b7b      	ldr	r3, [pc, #492]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f12:	e087      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f26:	4b6a      	ldr	r3, [pc, #424]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f56:	e065      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6a:	4b59      	ldr	r3, [pc, #356]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9a:	e043      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b48      	ldr	r3, [pc, #288]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fde:	e021      	b.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b37      	ldr	r3, [pc, #220]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a03 	vldr	s12, [r7, #12]
 8007006:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007022:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007024:	4b2a      	ldr	r3, [pc, #168]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007028:	0a5b      	lsrs	r3, r3, #9
 800702a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800703a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800703e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007046:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800704a:	ee17 2a90 	vmov	r2, s15
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007052:	4b1f      	ldr	r3, [pc, #124]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	0c1b      	lsrs	r3, r3, #16
 8007058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007068:	ee37 7a87 	vadd.f32	s14, s15, s14
 800706c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007078:	ee17 2a90 	vmov	r2, s15
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007080:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007084:	0e1b      	lsrs	r3, r3, #24
 8007086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800709a:	edd7 6a07 	vldr	s13, [r7, #28]
 800709e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a6:	ee17 2a90 	vmov	r2, s15
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070ae:	e008      	b.n	80070c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
}
 80070c2:	bf00      	nop
 80070c4:	3724      	adds	r7, #36	@ 0x24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	58024400 	.word	0x58024400
 80070d4:	03d09000 	.word	0x03d09000
 80070d8:	46000000 	.word	0x46000000
 80070dc:	4c742400 	.word	0x4c742400
 80070e0:	4a742400 	.word	0x4a742400
 80070e4:	4c371b00 	.word	0x4c371b00

080070e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b089      	sub	sp, #36	@ 0x24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f0:	4ba1      	ldr	r3, [pc, #644]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070fa:	4b9f      	ldr	r3, [pc, #636]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fe:	0d1b      	lsrs	r3, r3, #20
 8007100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007104:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007106:	4b9c      	ldr	r3, [pc, #624]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007112:	4b99      	ldr	r3, [pc, #612]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	fb02 f303 	mul.w	r3, r2, r3
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 8111 	beq.w	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b02      	cmp	r3, #2
 800713a:	f000 8083 	beq.w	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	2b02      	cmp	r3, #2
 8007142:	f200 80a1 	bhi.w	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d056      	beq.n	8007200 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007152:	e099      	b.n	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007154:	4b88      	ldr	r3, [pc, #544]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02d      	beq.n	80071bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007160:	4b85      	ldr	r3, [pc, #532]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	08db      	lsrs	r3, r3, #3
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	4a84      	ldr	r2, [pc, #528]	@ (800737c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
 8007170:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b7b      	ldr	r3, [pc, #492]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a03 	vldr	s12, [r7, #12]
 800719e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071ba:	e087      	b.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fe:	e065      	b.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b59      	ldr	r3, [pc, #356]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a03 	vldr	s12, [r7, #12]
 8007226:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007242:	e043      	b.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b48      	ldr	r3, [pc, #288]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007286:	e021      	b.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b37      	ldr	r3, [pc, #220]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072cc:	4b2a      	ldr	r3, [pc, #168]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	0a5b      	lsrs	r3, r3, #9
 80072d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f2:	ee17 2a90 	vmov	r2, s15
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80072fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007310:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007314:	edd7 6a07 	vldr	s13, [r7, #28]
 8007318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007320:	ee17 2a90 	vmov	r2, s15
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007328:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800732a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732c:	0e1b      	lsrs	r3, r3, #24
 800732e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007342:	edd7 6a07 	vldr	s13, [r7, #28]
 8007346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734e:	ee17 2a90 	vmov	r2, s15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007356:	e008      	b.n	800736a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	609a      	str	r2, [r3, #8]
}
 800736a:	bf00      	nop
 800736c:	3724      	adds	r7, #36	@ 0x24
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	58024400 	.word	0x58024400
 800737c:	03d09000 	.word	0x03d09000
 8007380:	46000000 	.word	0x46000000
 8007384:	4c742400 	.word	0x4c742400
 8007388:	4a742400 	.word	0x4a742400
 800738c:	4c371b00 	.word	0x4c371b00

08007390 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800739e:	4b53      	ldr	r3, [pc, #332]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d101      	bne.n	80073ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e099      	b.n	80074e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073ae:	4b4f      	ldr	r3, [pc, #316]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a4e      	ldr	r2, [pc, #312]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ba:	f7fb f999 	bl	80026f0 <HAL_GetTick>
 80073be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c0:	e008      	b.n	80073d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073c2:	f7fb f995 	bl	80026f0 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e086      	b.n	80074e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d4:	4b45      	ldr	r3, [pc, #276]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f0      	bne.n	80073c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073e0:	4b42      	ldr	r3, [pc, #264]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	031b      	lsls	r3, r3, #12
 80073ee:	493f      	ldr	r1, [pc, #252]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	3b01      	subs	r3, #1
 8007404:	025b      	lsls	r3, r3, #9
 8007406:	b29b      	uxth	r3, r3
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	3b01      	subs	r3, #1
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	3b01      	subs	r3, #1
 800741e:	061b      	lsls	r3, r3, #24
 8007420:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007424:	4931      	ldr	r1, [pc, #196]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800742a:	4b30      	ldr	r3, [pc, #192]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	492d      	ldr	r1, [pc, #180]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007438:	4313      	orrs	r3, r2
 800743a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800743c:	4b2b      	ldr	r3, [pc, #172]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	f023 0220 	bic.w	r2, r3, #32
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	4928      	ldr	r1, [pc, #160]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800744e:	4b27      	ldr	r3, [pc, #156]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	4a26      	ldr	r2, [pc, #152]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007454:	f023 0310 	bic.w	r3, r3, #16
 8007458:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800745a:	4b24      	ldr	r3, [pc, #144]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800745c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800745e:	4b24      	ldr	r3, [pc, #144]	@ (80074f0 <RCCEx_PLL2_Config+0x160>)
 8007460:	4013      	ands	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	69d2      	ldr	r2, [r2, #28]
 8007466:	00d2      	lsls	r2, r2, #3
 8007468:	4920      	ldr	r1, [pc, #128]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800746a:	4313      	orrs	r3, r2
 800746c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800746e:	4b1f      	ldr	r3, [pc, #124]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	4a1e      	ldr	r2, [pc, #120]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007474:	f043 0310 	orr.w	r3, r3, #16
 8007478:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007480:	4b1a      	ldr	r3, [pc, #104]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	4a19      	ldr	r2, [pc, #100]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007486:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800748a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800748c:	e00f      	b.n	80074ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007494:	4b15      	ldr	r3, [pc, #84]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 8007496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007498:	4a14      	ldr	r2, [pc, #80]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 800749a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800749e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074a0:	e005      	b.n	80074ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074a2:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	4a11      	ldr	r2, [pc, #68]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074ae:	4b0f      	ldr	r3, [pc, #60]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a0e      	ldr	r2, [pc, #56]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ba:	f7fb f919 	bl	80026f0 <HAL_GetTick>
 80074be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c0:	e008      	b.n	80074d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074c2:	f7fb f915 	bl	80026f0 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e006      	b.n	80074e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d4:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <RCCEx_PLL2_Config+0x15c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400
 80074f0:	ffff0007 	.word	0xffff0007

080074f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007502:	4b53      	ldr	r3, [pc, #332]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b03      	cmp	r3, #3
 800750c:	d101      	bne.n	8007512 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e099      	b.n	8007646 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007512:	4b4f      	ldr	r3, [pc, #316]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4e      	ldr	r2, [pc, #312]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800751c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751e:	f7fb f8e7 	bl	80026f0 <HAL_GetTick>
 8007522:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007524:	e008      	b.n	8007538 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007526:	f7fb f8e3 	bl	80026f0 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e086      	b.n	8007646 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007538:	4b45      	ldr	r3, [pc, #276]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f0      	bne.n	8007526 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007544:	4b42      	ldr	r3, [pc, #264]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007548:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	051b      	lsls	r3, r3, #20
 8007552:	493f      	ldr	r1, [pc, #252]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007554:	4313      	orrs	r3, r2
 8007556:	628b      	str	r3, [r1, #40]	@ 0x28
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	3b01      	subs	r3, #1
 800755e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	3b01      	subs	r3, #1
 8007568:	025b      	lsls	r3, r3, #9
 800756a:	b29b      	uxth	r3, r3
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	3b01      	subs	r3, #1
 8007574:	041b      	lsls	r3, r3, #16
 8007576:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	3b01      	subs	r3, #1
 8007582:	061b      	lsls	r3, r3, #24
 8007584:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007588:	4931      	ldr	r1, [pc, #196]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800758a:	4313      	orrs	r3, r2
 800758c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800758e:	4b30      	ldr	r3, [pc, #192]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007592:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	492d      	ldr	r1, [pc, #180]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	4928      	ldr	r1, [pc, #160]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075b2:	4b27      	ldr	r3, [pc, #156]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a26      	ldr	r2, [pc, #152]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075be:	4b24      	ldr	r3, [pc, #144]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075c2:	4b24      	ldr	r3, [pc, #144]	@ (8007654 <RCCEx_PLL3_Config+0x160>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	69d2      	ldr	r2, [r2, #28]
 80075ca:	00d2      	lsls	r2, r2, #3
 80075cc:	4920      	ldr	r1, [pc, #128]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075d2:	4b1f      	ldr	r3, [pc, #124]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	4a19      	ldr	r2, [pc, #100]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075f0:	e00f      	b.n	8007612 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d106      	bne.n	8007606 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075f8:	4b15      	ldr	r3, [pc, #84]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007602:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007604:	e005      	b.n	8007612 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007606:	4b12      	ldr	r3, [pc, #72]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4a11      	ldr	r2, [pc, #68]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800760c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007610:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007612:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a0e      	ldr	r2, [pc, #56]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 8007618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800761c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800761e:	f7fb f867 	bl	80026f0 <HAL_GetTick>
 8007622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007624:	e008      	b.n	8007638 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007626:	f7fb f863 	bl	80026f0 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e006      	b.n	8007646 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007638:	4b05      	ldr	r3, [pc, #20]	@ (8007650 <RCCEx_PLL3_Config+0x15c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0f0      	beq.n	8007626 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	58024400 	.word	0x58024400
 8007654:	ffff0007 	.word	0xffff0007

08007658 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d071      	beq.n	800774e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7f9 fe30 	bl	80012e4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b10      	cmp	r3, #16
 8007698:	d050      	beq.n	800773c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	22ca      	movs	r2, #202	@ 0xca
 80076a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2253      	movs	r2, #83	@ 0x53
 80076a8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f87a 	bl	80077a4 <RTC_EnterInitMode>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d124      	bne.n	8007704 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6899      	ldr	r1, [r3, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b24      	ldr	r3, [pc, #144]	@ (8007758 <HAL_RTC_Init+0x100>)
 80076c6:	400b      	ands	r3, r1
 80076c8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6899      	ldr	r1, [r3, #8]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	0419      	lsls	r1, r3, #16
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f886 	bl	800780c <RTC_ExitInitMode>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d113      	bne.n	8007732 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0203 	bic.w	r2, r2, #3
 8007718:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	430a      	orrs	r2, r1
 8007730:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	22ff      	movs	r2, #255	@ 0xff
 8007738:	625a      	str	r2, [r3, #36]	@ 0x24
 800773a:	e001      	b.n	8007740 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	ff8fffbf 	.word	0xff8fffbf

0800775c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a0d      	ldr	r2, [pc, #52]	@ (80077a0 <HAL_RTC_WaitForSynchro+0x44>)
 800776a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800776c:	f7fa ffc0 	bl	80026f0 <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007772:	e009      	b.n	8007788 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007774:	f7fa ffbc 	bl	80026f0 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007782:	d901      	bls.n	8007788 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e007      	b.n	8007798 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0ee      	beq.n	8007774 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	0003ff5f 	.word	0x0003ff5f

080077a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d120      	bne.n	8007800 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295
 80077c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80077c8:	f7fa ff92 	bl	80026f0 <HAL_GetTick>
 80077cc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077ce:	e00d      	b.n	80077ec <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80077d0:	f7fa ff8e 	bl	80026f0 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077de:	d905      	bls.n	80077ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2203      	movs	r2, #3
 80077e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <RTC_EnterInitMode+0x5c>
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d1e7      	bne.n	80077d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <RTC_ExitInitMode+0x78>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4a19      	ldr	r2, [pc, #100]	@ (8007884 <RTC_ExitInitMode+0x78>)
 800781e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007822:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007824:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10c      	bne.n	800784a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff93 	bl	800775c <HAL_RTC_WaitForSynchro>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d01e      	beq.n	800787a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
 8007848:	e017      	b.n	800787a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800784a:	4b0e      	ldr	r3, [pc, #56]	@ (8007884 <RTC_ExitInitMode+0x78>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	4a0d      	ldr	r2, [pc, #52]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007850:	f023 0320 	bic.w	r3, r3, #32
 8007854:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff80 	bl	800775c <HAL_RTC_WaitForSynchro>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2203      	movs	r2, #3
 8007866:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800786e:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <RTC_ExitInitMode+0x78>)
 8007874:	f043 0320 	orr.w	r3, r3, #32
 8007878:	6093      	str	r3, [r2, #8]
  }

  return status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	58004000 	.word	0x58004000

08007888 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e10f      	b.n	8007aba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a87      	ldr	r2, [pc, #540]	@ (8007ac4 <HAL_SPI_Init+0x23c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00f      	beq.n	80078ca <HAL_SPI_Init+0x42>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a86      	ldr	r2, [pc, #536]	@ (8007ac8 <HAL_SPI_Init+0x240>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00a      	beq.n	80078ca <HAL_SPI_Init+0x42>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a84      	ldr	r2, [pc, #528]	@ (8007acc <HAL_SPI_Init+0x244>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d005      	beq.n	80078ca <HAL_SPI_Init+0x42>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d901      	bls.n	80078ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e0f7      	b.n	8007aba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f900 	bl	8007ad0 <SPI_GetPacketSize>
 80078d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ac4 <HAL_SPI_Init+0x23c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00c      	beq.n	80078f6 <HAL_SPI_Init+0x6e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a79      	ldr	r2, [pc, #484]	@ (8007ac8 <HAL_SPI_Init+0x240>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <HAL_SPI_Init+0x6e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a78      	ldr	r2, [pc, #480]	@ (8007acc <HAL_SPI_Init+0x244>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d002      	beq.n	80078f6 <HAL_SPI_Init+0x6e>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d811      	bhi.n	800791a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078fa:	4a72      	ldr	r2, [pc, #456]	@ (8007ac4 <HAL_SPI_Init+0x23c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a70      	ldr	r2, [pc, #448]	@ (8007ac8 <HAL_SPI_Init+0x240>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_SPI_Init+0x8c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a6f      	ldr	r2, [pc, #444]	@ (8007acc <HAL_SPI_Init+0x244>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d104      	bne.n	800791e <HAL_SPI_Init+0x96>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b10      	cmp	r3, #16
 8007918:	d901      	bls.n	800791e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e0cd      	b.n	8007aba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d106      	bne.n	8007938 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7f9 fd08 	bl	8001348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800795a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007964:	d119      	bne.n	800799a <HAL_SPI_Init+0x112>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800796e:	d103      	bne.n	8007978 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007988:	d107      	bne.n	800799a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007998:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <HAL_SPI_Init+0x13e>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d90b      	bls.n	80079c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e007      	b.n	80079d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69da      	ldr	r2, [r3, #28]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	431a      	orrs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	ea42 0103 	orr.w	r1, r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a36:	ea42 0103 	orr.w	r1, r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d113      	bne.n	8007a76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40013000 	.word	0x40013000
 8007ac8:	40003800 	.word	0x40003800
 8007acc:	40003c00 	.word	0x40003c00

08007ad0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3307      	adds	r3, #7
 8007aee:	08db      	lsrs	r3, r3, #3
 8007af0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e049      	b.n	8007bac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f841 	bl	8007bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f000 f9f5 	bl	8007f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d001      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e05e      	b.n	8007c9e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8007cac <HAL_TIM_Base_Start_IT+0xe4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d02c      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0a:	d027      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a27      	ldr	r2, [pc, #156]	@ (8007cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d022      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a26      	ldr	r2, [pc, #152]	@ (8007cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d01d      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a24      	ldr	r2, [pc, #144]	@ (8007cb8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d018      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a23      	ldr	r2, [pc, #140]	@ (8007cbc <HAL_TIM_Base_Start_IT+0xf4>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d013      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a21      	ldr	r2, [pc, #132]	@ (8007cc0 <HAL_TIM_Base_Start_IT+0xf8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00e      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a20      	ldr	r2, [pc, #128]	@ (8007cc4 <HAL_TIM_Base_Start_IT+0xfc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d009      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc8 <HAL_TIM_Base_Start_IT+0x100>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d004      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x94>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a1d      	ldr	r2, [pc, #116]	@ (8007ccc <HAL_TIM_Base_Start_IT+0x104>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d115      	bne.n	8007c88 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd0 <HAL_TIM_Base_Start_IT+0x108>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b06      	cmp	r3, #6
 8007c6c:	d015      	beq.n	8007c9a <HAL_TIM_Base_Start_IT+0xd2>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c74:	d011      	beq.n	8007c9a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c86:	e008      	b.n	8007c9a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e000      	b.n	8007c9c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40010000 	.word	0x40010000
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40010400 	.word	0x40010400
 8007cc0:	40001800 	.word	0x40001800
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	4000e000 	.word	0x4000e000
 8007ccc:	4000e400 	.word	0x4000e400
 8007cd0:	00010007 	.word	0x00010007

08007cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01b      	beq.n	8007d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f06f 0202 	mvn.w	r2, #2
 8007d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f8e9 	bl	8007ef6 <HAL_TIM_IC_CaptureCallback>
 8007d24:	e005      	b.n	8007d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f8db 	bl	8007ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8ec 	bl	8007f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d020      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d01b      	beq.n	8007d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0204 	mvn.w	r2, #4
 8007d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8c3 	bl	8007ef6 <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8b5 	bl	8007ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8c6 	bl	8007f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d020      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01b      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0208 	mvn.w	r2, #8
 8007da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f89d 	bl	8007ef6 <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f88f 	bl	8007ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8a0 	bl	8007f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d020      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d01b      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2208      	movs	r2, #8
 8007df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f877 	bl	8007ef6 <HAL_TIM_IC_CaptureCallback>
 8007e08:	e005      	b.n	8007e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f869 	bl	8007ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f87a 	bl	8007f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0201 	mvn.w	r2, #1
 8007e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7f9 f93e 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f91f 	bl	80080ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00c      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f917 	bl	80080c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f834 	bl	8007f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f06f 0220 	mvn.w	r2, #32
 8007ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8df 	bl	8008098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a4a      	ldr	r2, [pc, #296]	@ (8008070 <TIM_Base_SetConfig+0x13c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d013      	beq.n	8007f74 <TIM_Base_SetConfig+0x40>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f52:	d00f      	beq.n	8007f74 <TIM_Base_SetConfig+0x40>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a47      	ldr	r2, [pc, #284]	@ (8008074 <TIM_Base_SetConfig+0x140>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00b      	beq.n	8007f74 <TIM_Base_SetConfig+0x40>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a46      	ldr	r2, [pc, #280]	@ (8008078 <TIM_Base_SetConfig+0x144>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d007      	beq.n	8007f74 <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a45      	ldr	r2, [pc, #276]	@ (800807c <TIM_Base_SetConfig+0x148>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a44      	ldr	r2, [pc, #272]	@ (8008080 <TIM_Base_SetConfig+0x14c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d108      	bne.n	8007f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a39      	ldr	r2, [pc, #228]	@ (8008070 <TIM_Base_SetConfig+0x13c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d027      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f94:	d023      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a36      	ldr	r2, [pc, #216]	@ (8008074 <TIM_Base_SetConfig+0x140>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d01f      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a35      	ldr	r2, [pc, #212]	@ (8008078 <TIM_Base_SetConfig+0x144>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01b      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a34      	ldr	r2, [pc, #208]	@ (800807c <TIM_Base_SetConfig+0x148>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d017      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a33      	ldr	r2, [pc, #204]	@ (8008080 <TIM_Base_SetConfig+0x14c>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a32      	ldr	r2, [pc, #200]	@ (8008084 <TIM_Base_SetConfig+0x150>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00f      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a31      	ldr	r2, [pc, #196]	@ (8008088 <TIM_Base_SetConfig+0x154>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00b      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a30      	ldr	r2, [pc, #192]	@ (800808c <TIM_Base_SetConfig+0x158>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d007      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8008090 <TIM_Base_SetConfig+0x15c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d003      	beq.n	8007fde <TIM_Base_SetConfig+0xaa>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8008094 <TIM_Base_SetConfig+0x160>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d108      	bne.n	8007ff0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a16      	ldr	r2, [pc, #88]	@ (8008070 <TIM_Base_SetConfig+0x13c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00f      	beq.n	800803c <TIM_Base_SetConfig+0x108>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <TIM_Base_SetConfig+0x14c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00b      	beq.n	800803c <TIM_Base_SetConfig+0x108>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a17      	ldr	r2, [pc, #92]	@ (8008084 <TIM_Base_SetConfig+0x150>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d007      	beq.n	800803c <TIM_Base_SetConfig+0x108>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <TIM_Base_SetConfig+0x154>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_Base_SetConfig+0x108>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a15      	ldr	r2, [pc, #84]	@ (800808c <TIM_Base_SetConfig+0x158>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d103      	bne.n	8008044 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b01      	cmp	r3, #1
 8008054:	d105      	bne.n	8008062 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	f023 0201 	bic.w	r2, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	611a      	str	r2, [r3, #16]
  }
}
 8008062:	bf00      	nop
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40010000 	.word	0x40010000
 8008074:	40000400 	.word	0x40000400
 8008078:	40000800 	.word	0x40000800
 800807c:	40000c00 	.word	0x40000c00
 8008080:	40010400 	.word	0x40010400
 8008084:	40014000 	.word	0x40014000
 8008088:	40014400 	.word	0x40014400
 800808c:	40014800 	.word	0x40014800
 8008090:	4000e000 	.word	0x4000e000
 8008094:	4000e400 	.word	0x4000e400

08008098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e042      	b.n	800816c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d106      	bne.n	80080fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7f9 fb87 	bl	800180c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2224      	movs	r2, #36	@ 0x24
 8008102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0201 	bic.w	r2, r2, #1
 8008114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fe94 	bl	8008e4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f825 	bl	8008174 <UART_SetConfig>
 800812a:	4603      	mov	r3, r0
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e01b      	b.n	800816c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 ff13 	bl	8008f90 <UART_CheckIdleState>
 800816a:	4603      	mov	r3, r0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008178:	b092      	sub	sp, #72	@ 0x48
 800817a:	af00      	add	r7, sp, #0
 800817c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	431a      	orrs	r2, r3
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	431a      	orrs	r2, r3
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	4313      	orrs	r3, r2
 800819a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4bbe      	ldr	r3, [pc, #760]	@ (800849c <UART_SetConfig+0x328>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081ac:	430b      	orrs	r3, r1
 80081ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4ab3      	ldr	r2, [pc, #716]	@ (80084a0 <UART_SetConfig+0x32c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081dc:	4313      	orrs	r3, r2
 80081de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	4baf      	ldr	r3, [pc, #700]	@ (80084a4 <UART_SetConfig+0x330>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	f023 010f 	bic.w	r1, r3, #15
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4aa6      	ldr	r2, [pc, #664]	@ (80084a8 <UART_SetConfig+0x334>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d177      	bne.n	8008304 <UART_SetConfig+0x190>
 8008214:	4ba5      	ldr	r3, [pc, #660]	@ (80084ac <UART_SetConfig+0x338>)
 8008216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008218:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800821c:	2b28      	cmp	r3, #40	@ 0x28
 800821e:	d86d      	bhi.n	80082fc <UART_SetConfig+0x188>
 8008220:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <UART_SetConfig+0xb4>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	080082cd 	.word	0x080082cd
 800822c:	080082fd 	.word	0x080082fd
 8008230:	080082fd 	.word	0x080082fd
 8008234:	080082fd 	.word	0x080082fd
 8008238:	080082fd 	.word	0x080082fd
 800823c:	080082fd 	.word	0x080082fd
 8008240:	080082fd 	.word	0x080082fd
 8008244:	080082fd 	.word	0x080082fd
 8008248:	080082d5 	.word	0x080082d5
 800824c:	080082fd 	.word	0x080082fd
 8008250:	080082fd 	.word	0x080082fd
 8008254:	080082fd 	.word	0x080082fd
 8008258:	080082fd 	.word	0x080082fd
 800825c:	080082fd 	.word	0x080082fd
 8008260:	080082fd 	.word	0x080082fd
 8008264:	080082fd 	.word	0x080082fd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082fd 	.word	0x080082fd
 8008270:	080082fd 	.word	0x080082fd
 8008274:	080082fd 	.word	0x080082fd
 8008278:	080082fd 	.word	0x080082fd
 800827c:	080082fd 	.word	0x080082fd
 8008280:	080082fd 	.word	0x080082fd
 8008284:	080082fd 	.word	0x080082fd
 8008288:	080082e5 	.word	0x080082e5
 800828c:	080082fd 	.word	0x080082fd
 8008290:	080082fd 	.word	0x080082fd
 8008294:	080082fd 	.word	0x080082fd
 8008298:	080082fd 	.word	0x080082fd
 800829c:	080082fd 	.word	0x080082fd
 80082a0:	080082fd 	.word	0x080082fd
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	080082ed 	.word	0x080082ed
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	080082fd 	.word	0x080082fd
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	080082fd 	.word	0x080082fd
 80082bc:	080082fd 	.word	0x080082fd
 80082c0:	080082fd 	.word	0x080082fd
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e326      	b.n	8008922 <UART_SetConfig+0x7ae>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e322      	b.n	8008922 <UART_SetConfig+0x7ae>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e2:	e31e      	b.n	8008922 <UART_SetConfig+0x7ae>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ea:	e31a      	b.n	8008922 <UART_SetConfig+0x7ae>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f2:	e316      	b.n	8008922 <UART_SetConfig+0x7ae>
 80082f4:	2340      	movs	r3, #64	@ 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fa:	e312      	b.n	8008922 <UART_SetConfig+0x7ae>
 80082fc:	2380      	movs	r3, #128	@ 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008302:	e30e      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a69      	ldr	r2, [pc, #420]	@ (80084b0 <UART_SetConfig+0x33c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x1fc>
 800830e:	4b67      	ldr	r3, [pc, #412]	@ (80084ac <UART_SetConfig+0x338>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x1f4>
 800831a:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x1ac>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e2f0      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e2ec      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834e:	e2e8      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e2e4      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e2e0      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008360:	2340      	movs	r3, #64	@ 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e2dc      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008368:	2380      	movs	r3, #128	@ 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e2d8      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a4f      	ldr	r2, [pc, #316]	@ (80084b4 <UART_SetConfig+0x340>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x268>
 800837a:	4b4c      	ldr	r3, [pc, #304]	@ (80084ac <UART_SetConfig+0x338>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x260>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <UART_SetConfig+0x218>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e2ba      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e2b6      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e2b2      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e2ae      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ca:	e2aa      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083cc:	2340      	movs	r3, #64	@ 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e2a6      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083d4:	2380      	movs	r3, #128	@ 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083da:	e2a2      	b.n	8008922 <UART_SetConfig+0x7ae>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a35      	ldr	r2, [pc, #212]	@ (80084b8 <UART_SetConfig+0x344>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d130      	bne.n	8008448 <UART_SetConfig+0x2d4>
 80083e6:	4b31      	ldr	r3, [pc, #196]	@ (80084ac <UART_SetConfig+0x338>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d826      	bhi.n	8008440 <UART_SetConfig+0x2cc>
 80083f2:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x284>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008421 	.word	0x08008421
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e284      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e280      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e27c      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842e:	e278      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008430:	2320      	movs	r3, #32
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008436:	e274      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008438:	2340      	movs	r3, #64	@ 0x40
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e270      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008440:	2380      	movs	r3, #128	@ 0x80
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e26c      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1b      	ldr	r2, [pc, #108]	@ (80084bc <UART_SetConfig+0x348>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d142      	bne.n	80084d8 <UART_SetConfig+0x364>
 8008452:	4b16      	ldr	r3, [pc, #88]	@ (80084ac <UART_SetConfig+0x338>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b05      	cmp	r3, #5
 800845c:	d838      	bhi.n	80084d0 <UART_SetConfig+0x35c>
 800845e:	a201      	add	r2, pc, #4	@ (adr r2, 8008464 <UART_SetConfig+0x2f0>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008495 	.word	0x08008495
 8008474:	080084c1 	.word	0x080084c1
 8008478:	080084c9 	.word	0x080084c9
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008482:	e24e      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848a:	e24a      	b.n	8008922 <UART_SetConfig+0x7ae>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008492:	e246      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e242      	b.n	8008922 <UART_SetConfig+0x7ae>
 800849c:	cfff69f3 	.word	0xcfff69f3
 80084a0:	58000c00 	.word	0x58000c00
 80084a4:	11fff4ff 	.word	0x11fff4ff
 80084a8:	40011000 	.word	0x40011000
 80084ac:	58024400 	.word	0x58024400
 80084b0:	40004400 	.word	0x40004400
 80084b4:	40004800 	.word	0x40004800
 80084b8:	40004c00 	.word	0x40004c00
 80084bc:	40005000 	.word	0x40005000
 80084c0:	2320      	movs	r3, #32
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e22c      	b.n	8008922 <UART_SetConfig+0x7ae>
 80084c8:	2340      	movs	r3, #64	@ 0x40
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e228      	b.n	8008922 <UART_SetConfig+0x7ae>
 80084d0:	2380      	movs	r3, #128	@ 0x80
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e224      	b.n	8008922 <UART_SetConfig+0x7ae>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4ab1      	ldr	r2, [pc, #708]	@ (80087a4 <UART_SetConfig+0x630>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d176      	bne.n	80085d0 <UART_SetConfig+0x45c>
 80084e2:	4bb1      	ldr	r3, [pc, #708]	@ (80087a8 <UART_SetConfig+0x634>)
 80084e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084ea:	2b28      	cmp	r3, #40	@ 0x28
 80084ec:	d86c      	bhi.n	80085c8 <UART_SetConfig+0x454>
 80084ee:	a201      	add	r2, pc, #4	@ (adr r2, 80084f4 <UART_SetConfig+0x380>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008599 	.word	0x08008599
 80084f8:	080085c9 	.word	0x080085c9
 80084fc:	080085c9 	.word	0x080085c9
 8008500:	080085c9 	.word	0x080085c9
 8008504:	080085c9 	.word	0x080085c9
 8008508:	080085c9 	.word	0x080085c9
 800850c:	080085c9 	.word	0x080085c9
 8008510:	080085c9 	.word	0x080085c9
 8008514:	080085a1 	.word	0x080085a1
 8008518:	080085c9 	.word	0x080085c9
 800851c:	080085c9 	.word	0x080085c9
 8008520:	080085c9 	.word	0x080085c9
 8008524:	080085c9 	.word	0x080085c9
 8008528:	080085c9 	.word	0x080085c9
 800852c:	080085c9 	.word	0x080085c9
 8008530:	080085c9 	.word	0x080085c9
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085c9 	.word	0x080085c9
 800853c:	080085c9 	.word	0x080085c9
 8008540:	080085c9 	.word	0x080085c9
 8008544:	080085c9 	.word	0x080085c9
 8008548:	080085c9 	.word	0x080085c9
 800854c:	080085c9 	.word	0x080085c9
 8008550:	080085c9 	.word	0x080085c9
 8008554:	080085b1 	.word	0x080085b1
 8008558:	080085c9 	.word	0x080085c9
 800855c:	080085c9 	.word	0x080085c9
 8008560:	080085c9 	.word	0x080085c9
 8008564:	080085c9 	.word	0x080085c9
 8008568:	080085c9 	.word	0x080085c9
 800856c:	080085c9 	.word	0x080085c9
 8008570:	080085c9 	.word	0x080085c9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085c9 	.word	0x080085c9
 800857c:	080085c9 	.word	0x080085c9
 8008580:	080085c9 	.word	0x080085c9
 8008584:	080085c9 	.word	0x080085c9
 8008588:	080085c9 	.word	0x080085c9
 800858c:	080085c9 	.word	0x080085c9
 8008590:	080085c9 	.word	0x080085c9
 8008594:	080085c1 	.word	0x080085c1
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859e:	e1c0      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a6:	e1bc      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ae:	e1b8      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b6:	e1b4      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085b8:	2320      	movs	r3, #32
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085be:	e1b0      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085c0:	2340      	movs	r3, #64	@ 0x40
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085c6:	e1ac      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085c8:	2380      	movs	r3, #128	@ 0x80
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ce:	e1a8      	b.n	8008922 <UART_SetConfig+0x7ae>
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a75      	ldr	r2, [pc, #468]	@ (80087ac <UART_SetConfig+0x638>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d130      	bne.n	800863c <UART_SetConfig+0x4c8>
 80085da:	4b73      	ldr	r3, [pc, #460]	@ (80087a8 <UART_SetConfig+0x634>)
 80085dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d826      	bhi.n	8008634 <UART_SetConfig+0x4c0>
 80085e6:	a201      	add	r2, pc, #4	@ (adr r2, 80085ec <UART_SetConfig+0x478>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	08008605 	.word	0x08008605
 80085f0:	0800860d 	.word	0x0800860d
 80085f4:	08008615 	.word	0x08008615
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800862d 	.word	0x0800862d
 8008604:	2300      	movs	r3, #0
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800860a:	e18a      	b.n	8008922 <UART_SetConfig+0x7ae>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008612:	e186      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800861a:	e182      	b.n	8008922 <UART_SetConfig+0x7ae>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008622:	e17e      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008624:	2320      	movs	r3, #32
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e17a      	b.n	8008922 <UART_SetConfig+0x7ae>
 800862c:	2340      	movs	r3, #64	@ 0x40
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e176      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008634:	2380      	movs	r3, #128	@ 0x80
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e172      	b.n	8008922 <UART_SetConfig+0x7ae>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a5b      	ldr	r2, [pc, #364]	@ (80087b0 <UART_SetConfig+0x63c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d130      	bne.n	80086a8 <UART_SetConfig+0x534>
 8008646:	4b58      	ldr	r3, [pc, #352]	@ (80087a8 <UART_SetConfig+0x634>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b05      	cmp	r3, #5
 8008650:	d826      	bhi.n	80086a0 <UART_SetConfig+0x52c>
 8008652:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <UART_SetConfig+0x4e4>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008671 	.word	0x08008671
 800865c:	08008679 	.word	0x08008679
 8008660:	08008681 	.word	0x08008681
 8008664:	08008689 	.word	0x08008689
 8008668:	08008691 	.word	0x08008691
 800866c:	08008699 	.word	0x08008699
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008676:	e154      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008678:	2304      	movs	r3, #4
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800867e:	e150      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008686:	e14c      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008688:	2310      	movs	r3, #16
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800868e:	e148      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008690:	2320      	movs	r3, #32
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008696:	e144      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008698:	2340      	movs	r3, #64	@ 0x40
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800869e:	e140      	b.n	8008922 <UART_SetConfig+0x7ae>
 80086a0:	2380      	movs	r3, #128	@ 0x80
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80086a6:	e13c      	b.n	8008922 <UART_SetConfig+0x7ae>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a41      	ldr	r2, [pc, #260]	@ (80087b4 <UART_SetConfig+0x640>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	f040 8082 	bne.w	80087b8 <UART_SetConfig+0x644>
 80086b4:	4b3c      	ldr	r3, [pc, #240]	@ (80087a8 <UART_SetConfig+0x634>)
 80086b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086bc:	2b28      	cmp	r3, #40	@ 0x28
 80086be:	d86d      	bhi.n	800879c <UART_SetConfig+0x628>
 80086c0:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <UART_SetConfig+0x554>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	0800876d 	.word	0x0800876d
 80086cc:	0800879d 	.word	0x0800879d
 80086d0:	0800879d 	.word	0x0800879d
 80086d4:	0800879d 	.word	0x0800879d
 80086d8:	0800879d 	.word	0x0800879d
 80086dc:	0800879d 	.word	0x0800879d
 80086e0:	0800879d 	.word	0x0800879d
 80086e4:	0800879d 	.word	0x0800879d
 80086e8:	08008775 	.word	0x08008775
 80086ec:	0800879d 	.word	0x0800879d
 80086f0:	0800879d 	.word	0x0800879d
 80086f4:	0800879d 	.word	0x0800879d
 80086f8:	0800879d 	.word	0x0800879d
 80086fc:	0800879d 	.word	0x0800879d
 8008700:	0800879d 	.word	0x0800879d
 8008704:	0800879d 	.word	0x0800879d
 8008708:	0800877d 	.word	0x0800877d
 800870c:	0800879d 	.word	0x0800879d
 8008710:	0800879d 	.word	0x0800879d
 8008714:	0800879d 	.word	0x0800879d
 8008718:	0800879d 	.word	0x0800879d
 800871c:	0800879d 	.word	0x0800879d
 8008720:	0800879d 	.word	0x0800879d
 8008724:	0800879d 	.word	0x0800879d
 8008728:	08008785 	.word	0x08008785
 800872c:	0800879d 	.word	0x0800879d
 8008730:	0800879d 	.word	0x0800879d
 8008734:	0800879d 	.word	0x0800879d
 8008738:	0800879d 	.word	0x0800879d
 800873c:	0800879d 	.word	0x0800879d
 8008740:	0800879d 	.word	0x0800879d
 8008744:	0800879d 	.word	0x0800879d
 8008748:	0800878d 	.word	0x0800878d
 800874c:	0800879d 	.word	0x0800879d
 8008750:	0800879d 	.word	0x0800879d
 8008754:	0800879d 	.word	0x0800879d
 8008758:	0800879d 	.word	0x0800879d
 800875c:	0800879d 	.word	0x0800879d
 8008760:	0800879d 	.word	0x0800879d
 8008764:	0800879d 	.word	0x0800879d
 8008768:	08008795 	.word	0x08008795
 800876c:	2301      	movs	r3, #1
 800876e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008772:	e0d6      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008774:	2304      	movs	r3, #4
 8008776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877a:	e0d2      	b.n	8008922 <UART_SetConfig+0x7ae>
 800877c:	2308      	movs	r3, #8
 800877e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008782:	e0ce      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008784:	2310      	movs	r3, #16
 8008786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878a:	e0ca      	b.n	8008922 <UART_SetConfig+0x7ae>
 800878c:	2320      	movs	r3, #32
 800878e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008792:	e0c6      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008794:	2340      	movs	r3, #64	@ 0x40
 8008796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879a:	e0c2      	b.n	8008922 <UART_SetConfig+0x7ae>
 800879c:	2380      	movs	r3, #128	@ 0x80
 800879e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087a2:	e0be      	b.n	8008922 <UART_SetConfig+0x7ae>
 80087a4:	40011400 	.word	0x40011400
 80087a8:	58024400 	.word	0x58024400
 80087ac:	40007800 	.word	0x40007800
 80087b0:	40007c00 	.word	0x40007c00
 80087b4:	40011800 	.word	0x40011800
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4aad      	ldr	r2, [pc, #692]	@ (8008a74 <UART_SetConfig+0x900>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d176      	bne.n	80088b0 <UART_SetConfig+0x73c>
 80087c2:	4bad      	ldr	r3, [pc, #692]	@ (8008a78 <UART_SetConfig+0x904>)
 80087c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087ca:	2b28      	cmp	r3, #40	@ 0x28
 80087cc:	d86c      	bhi.n	80088a8 <UART_SetConfig+0x734>
 80087ce:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <UART_SetConfig+0x660>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	08008879 	.word	0x08008879
 80087d8:	080088a9 	.word	0x080088a9
 80087dc:	080088a9 	.word	0x080088a9
 80087e0:	080088a9 	.word	0x080088a9
 80087e4:	080088a9 	.word	0x080088a9
 80087e8:	080088a9 	.word	0x080088a9
 80087ec:	080088a9 	.word	0x080088a9
 80087f0:	080088a9 	.word	0x080088a9
 80087f4:	08008881 	.word	0x08008881
 80087f8:	080088a9 	.word	0x080088a9
 80087fc:	080088a9 	.word	0x080088a9
 8008800:	080088a9 	.word	0x080088a9
 8008804:	080088a9 	.word	0x080088a9
 8008808:	080088a9 	.word	0x080088a9
 800880c:	080088a9 	.word	0x080088a9
 8008810:	080088a9 	.word	0x080088a9
 8008814:	08008889 	.word	0x08008889
 8008818:	080088a9 	.word	0x080088a9
 800881c:	080088a9 	.word	0x080088a9
 8008820:	080088a9 	.word	0x080088a9
 8008824:	080088a9 	.word	0x080088a9
 8008828:	080088a9 	.word	0x080088a9
 800882c:	080088a9 	.word	0x080088a9
 8008830:	080088a9 	.word	0x080088a9
 8008834:	08008891 	.word	0x08008891
 8008838:	080088a9 	.word	0x080088a9
 800883c:	080088a9 	.word	0x080088a9
 8008840:	080088a9 	.word	0x080088a9
 8008844:	080088a9 	.word	0x080088a9
 8008848:	080088a9 	.word	0x080088a9
 800884c:	080088a9 	.word	0x080088a9
 8008850:	080088a9 	.word	0x080088a9
 8008854:	08008899 	.word	0x08008899
 8008858:	080088a9 	.word	0x080088a9
 800885c:	080088a9 	.word	0x080088a9
 8008860:	080088a9 	.word	0x080088a9
 8008864:	080088a9 	.word	0x080088a9
 8008868:	080088a9 	.word	0x080088a9
 800886c:	080088a9 	.word	0x080088a9
 8008870:	080088a9 	.word	0x080088a9
 8008874:	080088a1 	.word	0x080088a1
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800887e:	e050      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008880:	2304      	movs	r3, #4
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008886:	e04c      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008888:	2308      	movs	r3, #8
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e048      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008890:	2310      	movs	r3, #16
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e044      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008898:	2320      	movs	r3, #32
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e040      	b.n	8008922 <UART_SetConfig+0x7ae>
 80088a0:	2340      	movs	r3, #64	@ 0x40
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e03c      	b.n	8008922 <UART_SetConfig+0x7ae>
 80088a8:	2380      	movs	r3, #128	@ 0x80
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e038      	b.n	8008922 <UART_SetConfig+0x7ae>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a71      	ldr	r2, [pc, #452]	@ (8008a7c <UART_SetConfig+0x908>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d130      	bne.n	800891c <UART_SetConfig+0x7a8>
 80088ba:	4b6f      	ldr	r3, [pc, #444]	@ (8008a78 <UART_SetConfig+0x904>)
 80088bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	2b05      	cmp	r3, #5
 80088c4:	d826      	bhi.n	8008914 <UART_SetConfig+0x7a0>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <UART_SetConfig+0x758>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088e5 	.word	0x080088e5
 80088d0:	080088ed 	.word	0x080088ed
 80088d4:	080088f5 	.word	0x080088f5
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	08008905 	.word	0x08008905
 80088e0:	0800890d 	.word	0x0800890d
 80088e4:	2302      	movs	r3, #2
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ea:	e01a      	b.n	8008922 <UART_SetConfig+0x7ae>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f2:	e016      	b.n	8008922 <UART_SetConfig+0x7ae>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e012      	b.n	8008922 <UART_SetConfig+0x7ae>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e00e      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008904:	2320      	movs	r3, #32
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e00a      	b.n	8008922 <UART_SetConfig+0x7ae>
 800890c:	2340      	movs	r3, #64	@ 0x40
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e006      	b.n	8008922 <UART_SetConfig+0x7ae>
 8008914:	2380      	movs	r3, #128	@ 0x80
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e002      	b.n	8008922 <UART_SetConfig+0x7ae>
 800891c:	2380      	movs	r3, #128	@ 0x80
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a55      	ldr	r2, [pc, #340]	@ (8008a7c <UART_SetConfig+0x908>)
 8008928:	4293      	cmp	r3, r2
 800892a:	f040 80f8 	bne.w	8008b1e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800892e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008932:	2b20      	cmp	r3, #32
 8008934:	dc46      	bgt.n	80089c4 <UART_SetConfig+0x850>
 8008936:	2b02      	cmp	r3, #2
 8008938:	db75      	blt.n	8008a26 <UART_SetConfig+0x8b2>
 800893a:	3b02      	subs	r3, #2
 800893c:	2b1e      	cmp	r3, #30
 800893e:	d872      	bhi.n	8008a26 <UART_SetConfig+0x8b2>
 8008940:	a201      	add	r2, pc, #4	@ (adr r2, 8008948 <UART_SetConfig+0x7d4>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	080089cb 	.word	0x080089cb
 800894c:	08008a27 	.word	0x08008a27
 8008950:	080089d3 	.word	0x080089d3
 8008954:	08008a27 	.word	0x08008a27
 8008958:	08008a27 	.word	0x08008a27
 800895c:	08008a27 	.word	0x08008a27
 8008960:	080089e3 	.word	0x080089e3
 8008964:	08008a27 	.word	0x08008a27
 8008968:	08008a27 	.word	0x08008a27
 800896c:	08008a27 	.word	0x08008a27
 8008970:	08008a27 	.word	0x08008a27
 8008974:	08008a27 	.word	0x08008a27
 8008978:	08008a27 	.word	0x08008a27
 800897c:	08008a27 	.word	0x08008a27
 8008980:	080089f3 	.word	0x080089f3
 8008984:	08008a27 	.word	0x08008a27
 8008988:	08008a27 	.word	0x08008a27
 800898c:	08008a27 	.word	0x08008a27
 8008990:	08008a27 	.word	0x08008a27
 8008994:	08008a27 	.word	0x08008a27
 8008998:	08008a27 	.word	0x08008a27
 800899c:	08008a27 	.word	0x08008a27
 80089a0:	08008a27 	.word	0x08008a27
 80089a4:	08008a27 	.word	0x08008a27
 80089a8:	08008a27 	.word	0x08008a27
 80089ac:	08008a27 	.word	0x08008a27
 80089b0:	08008a27 	.word	0x08008a27
 80089b4:	08008a27 	.word	0x08008a27
 80089b8:	08008a27 	.word	0x08008a27
 80089bc:	08008a27 	.word	0x08008a27
 80089c0:	08008a19 	.word	0x08008a19
 80089c4:	2b40      	cmp	r3, #64	@ 0x40
 80089c6:	d02a      	beq.n	8008a1e <UART_SetConfig+0x8aa>
 80089c8:	e02d      	b.n	8008a26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80089ca:	f7fe fa23 	bl	8006e14 <HAL_RCCEx_GetD3PCLK1Freq>
 80089ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089d0:	e02f      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fa32 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e0:	e027      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e2:	f107 0318 	add.w	r3, r7, #24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fb7e 	bl	80070e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f0:	e01f      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089f2:	4b21      	ldr	r3, [pc, #132]	@ (8008a78 <UART_SetConfig+0x904>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008a78 <UART_SetConfig+0x904>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	08db      	lsrs	r3, r3, #3
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	4a1d      	ldr	r2, [pc, #116]	@ (8008a80 <UART_SetConfig+0x90c>)
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a10:	e00f      	b.n	8008a32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a12:	4b1b      	ldr	r3, [pc, #108]	@ (8008a80 <UART_SetConfig+0x90c>)
 8008a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a16:	e00c      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a18:	4b1a      	ldr	r3, [pc, #104]	@ (8008a84 <UART_SetConfig+0x910>)
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 81ee 	beq.w	8008e16 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	4a12      	ldr	r2, [pc, #72]	@ (8008a88 <UART_SetConfig+0x914>)
 8008a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	4413      	add	r3, r2
 8008a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d305      	bcc.n	8008a6a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d910      	bls.n	8008a8c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008a70:	e1d1      	b.n	8008e16 <UART_SetConfig+0xca2>
 8008a72:	bf00      	nop
 8008a74:	40011c00 	.word	0x40011c00
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	58000c00 	.word	0x58000c00
 8008a80:	03d09000 	.word	0x03d09000
 8008a84:	003d0900 	.word	0x003d0900
 8008a88:	080226dc 	.word	0x080226dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a8e:	2200      	movs	r2, #0
 8008a90:	60bb      	str	r3, [r7, #8]
 8008a92:	60fa      	str	r2, [r7, #12]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a98:	4ac0      	ldr	r2, [pc, #768]	@ (8008d9c <UART_SetConfig+0xc28>)
 8008a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008aae:	f7f7 fc7f 	bl	80003b0 <__aeabi_uldivmod>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	020b      	lsls	r3, r1, #8
 8008ac4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ac8:	0202      	lsls	r2, r0, #8
 8008aca:	6979      	ldr	r1, [r7, #20]
 8008acc:	6849      	ldr	r1, [r1, #4]
 8008ace:	0849      	lsrs	r1, r1, #1
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	eb12 0804 	adds.w	r8, r2, r4
 8008ada:	eb43 0905 	adc.w	r9, r3, r5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	469a      	mov	sl, r3
 8008ae6:	4693      	mov	fp, r2
 8008ae8:	4652      	mov	r2, sl
 8008aea:	465b      	mov	r3, fp
 8008aec:	4640      	mov	r0, r8
 8008aee:	4649      	mov	r1, r9
 8008af0:	f7f7 fc5e 	bl	80003b0 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4613      	mov	r3, r2
 8008afa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b02:	d308      	bcc.n	8008b16 <UART_SetConfig+0x9a2>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b0a:	d204      	bcs.n	8008b16 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b12:	60da      	str	r2, [r3, #12]
 8008b14:	e17f      	b.n	8008e16 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008b1c:	e17b      	b.n	8008e16 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b26:	f040 80bd 	bne.w	8008ca4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008b2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	dc48      	bgt.n	8008bc4 <UART_SetConfig+0xa50>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	db7b      	blt.n	8008c2e <UART_SetConfig+0xaba>
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d879      	bhi.n	8008c2e <UART_SetConfig+0xaba>
 8008b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b40 <UART_SetConfig+0x9cc>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008bcb 	.word	0x08008bcb
 8008b44:	08008bd3 	.word	0x08008bd3
 8008b48:	08008c2f 	.word	0x08008c2f
 8008b4c:	08008c2f 	.word	0x08008c2f
 8008b50:	08008bdb 	.word	0x08008bdb
 8008b54:	08008c2f 	.word	0x08008c2f
 8008b58:	08008c2f 	.word	0x08008c2f
 8008b5c:	08008c2f 	.word	0x08008c2f
 8008b60:	08008beb 	.word	0x08008beb
 8008b64:	08008c2f 	.word	0x08008c2f
 8008b68:	08008c2f 	.word	0x08008c2f
 8008b6c:	08008c2f 	.word	0x08008c2f
 8008b70:	08008c2f 	.word	0x08008c2f
 8008b74:	08008c2f 	.word	0x08008c2f
 8008b78:	08008c2f 	.word	0x08008c2f
 8008b7c:	08008c2f 	.word	0x08008c2f
 8008b80:	08008bfb 	.word	0x08008bfb
 8008b84:	08008c2f 	.word	0x08008c2f
 8008b88:	08008c2f 	.word	0x08008c2f
 8008b8c:	08008c2f 	.word	0x08008c2f
 8008b90:	08008c2f 	.word	0x08008c2f
 8008b94:	08008c2f 	.word	0x08008c2f
 8008b98:	08008c2f 	.word	0x08008c2f
 8008b9c:	08008c2f 	.word	0x08008c2f
 8008ba0:	08008c2f 	.word	0x08008c2f
 8008ba4:	08008c2f 	.word	0x08008c2f
 8008ba8:	08008c2f 	.word	0x08008c2f
 8008bac:	08008c2f 	.word	0x08008c2f
 8008bb0:	08008c2f 	.word	0x08008c2f
 8008bb4:	08008c2f 	.word	0x08008c2f
 8008bb8:	08008c2f 	.word	0x08008c2f
 8008bbc:	08008c2f 	.word	0x08008c2f
 8008bc0:	08008c21 	.word	0x08008c21
 8008bc4:	2b40      	cmp	r3, #64	@ 0x40
 8008bc6:	d02e      	beq.n	8008c26 <UART_SetConfig+0xab2>
 8008bc8:	e031      	b.n	8008c2e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bca:	f7fc ff15 	bl	80059f8 <HAL_RCC_GetPCLK1Freq>
 8008bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bd0:	e033      	b.n	8008c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bd2:	f7fc ff27 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8008bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bd8:	e02f      	b.n	8008c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe f92e 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be8:	e027      	b.n	8008c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bea:	f107 0318 	add.w	r3, r7, #24
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fa7a 	bl	80070e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf8:	e01f      	b.n	8008c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bfa:	4b69      	ldr	r3, [pc, #420]	@ (8008da0 <UART_SetConfig+0xc2c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d009      	beq.n	8008c1a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c06:	4b66      	ldr	r3, [pc, #408]	@ (8008da0 <UART_SetConfig+0xc2c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	08db      	lsrs	r3, r3, #3
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	4a64      	ldr	r2, [pc, #400]	@ (8008da4 <UART_SetConfig+0xc30>)
 8008c12:	fa22 f303 	lsr.w	r3, r2, r3
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c18:	e00f      	b.n	8008c3a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008c1a:	4b62      	ldr	r3, [pc, #392]	@ (8008da4 <UART_SetConfig+0xc30>)
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1e:	e00c      	b.n	8008c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c20:	4b61      	ldr	r3, [pc, #388]	@ (8008da8 <UART_SetConfig+0xc34>)
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c24:	e009      	b.n	8008c3a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c2c:	e005      	b.n	8008c3a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 80ea 	beq.w	8008e16 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c46:	4a55      	ldr	r2, [pc, #340]	@ (8008d9c <UART_SetConfig+0xc28>)
 8008c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c54:	005a      	lsls	r2, r3, #1
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	441a      	add	r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	2b0f      	cmp	r3, #15
 8008c6c:	d916      	bls.n	8008c9c <UART_SetConfig+0xb28>
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c74:	d212      	bcs.n	8008c9c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	f023 030f 	bic.w	r3, r3, #15
 8008c7e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c82:	085b      	lsrs	r3, r3, #1
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008c98:	60da      	str	r2, [r3, #12]
 8008c9a:	e0bc      	b.n	8008e16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008ca2:	e0b8      	b.n	8008e16 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	dc4b      	bgt.n	8008d44 <UART_SetConfig+0xbd0>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f2c0 8087 	blt.w	8008dc0 <UART_SetConfig+0xc4c>
 8008cb2:	2b20      	cmp	r3, #32
 8008cb4:	f200 8084 	bhi.w	8008dc0 <UART_SetConfig+0xc4c>
 8008cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc0 <UART_SetConfig+0xb4c>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008d4b 	.word	0x08008d4b
 8008cc4:	08008d53 	.word	0x08008d53
 8008cc8:	08008dc1 	.word	0x08008dc1
 8008ccc:	08008dc1 	.word	0x08008dc1
 8008cd0:	08008d5b 	.word	0x08008d5b
 8008cd4:	08008dc1 	.word	0x08008dc1
 8008cd8:	08008dc1 	.word	0x08008dc1
 8008cdc:	08008dc1 	.word	0x08008dc1
 8008ce0:	08008d6b 	.word	0x08008d6b
 8008ce4:	08008dc1 	.word	0x08008dc1
 8008ce8:	08008dc1 	.word	0x08008dc1
 8008cec:	08008dc1 	.word	0x08008dc1
 8008cf0:	08008dc1 	.word	0x08008dc1
 8008cf4:	08008dc1 	.word	0x08008dc1
 8008cf8:	08008dc1 	.word	0x08008dc1
 8008cfc:	08008dc1 	.word	0x08008dc1
 8008d00:	08008d7b 	.word	0x08008d7b
 8008d04:	08008dc1 	.word	0x08008dc1
 8008d08:	08008dc1 	.word	0x08008dc1
 8008d0c:	08008dc1 	.word	0x08008dc1
 8008d10:	08008dc1 	.word	0x08008dc1
 8008d14:	08008dc1 	.word	0x08008dc1
 8008d18:	08008dc1 	.word	0x08008dc1
 8008d1c:	08008dc1 	.word	0x08008dc1
 8008d20:	08008dc1 	.word	0x08008dc1
 8008d24:	08008dc1 	.word	0x08008dc1
 8008d28:	08008dc1 	.word	0x08008dc1
 8008d2c:	08008dc1 	.word	0x08008dc1
 8008d30:	08008dc1 	.word	0x08008dc1
 8008d34:	08008dc1 	.word	0x08008dc1
 8008d38:	08008dc1 	.word	0x08008dc1
 8008d3c:	08008dc1 	.word	0x08008dc1
 8008d40:	08008db3 	.word	0x08008db3
 8008d44:	2b40      	cmp	r3, #64	@ 0x40
 8008d46:	d037      	beq.n	8008db8 <UART_SetConfig+0xc44>
 8008d48:	e03a      	b.n	8008dc0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d4a:	f7fc fe55 	bl	80059f8 <HAL_RCC_GetPCLK1Freq>
 8008d4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d50:	e03c      	b.n	8008dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d52:	f7fc fe67 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 8008d56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d58:	e038      	b.n	8008dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe f86e 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d68:	e030      	b.n	8008dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d6a:	f107 0318 	add.w	r3, r7, #24
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe f9ba 	bl	80070e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d78:	e028      	b.n	8008dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <UART_SetConfig+0xc2c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d012      	beq.n	8008dac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d86:	4b06      	ldr	r3, [pc, #24]	@ (8008da0 <UART_SetConfig+0xc2c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	08db      	lsrs	r3, r3, #3
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	4a04      	ldr	r2, [pc, #16]	@ (8008da4 <UART_SetConfig+0xc30>)
 8008d92:	fa22 f303 	lsr.w	r3, r2, r3
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d98:	e018      	b.n	8008dcc <UART_SetConfig+0xc58>
 8008d9a:	bf00      	nop
 8008d9c:	080226dc 	.word	0x080226dc
 8008da0:	58024400 	.word	0x58024400
 8008da4:	03d09000 	.word	0x03d09000
 8008da8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008dac:	4b24      	ldr	r3, [pc, #144]	@ (8008e40 <UART_SetConfig+0xccc>)
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db0:	e00c      	b.n	8008dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008db2:	4b24      	ldr	r3, [pc, #144]	@ (8008e44 <UART_SetConfig+0xcd0>)
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db6:	e009      	b.n	8008dcc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dbe:	e005      	b.n	8008dcc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008dca:	bf00      	nop
    }

    if (pclk != 0U)
 8008dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d021      	beq.n	8008e16 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e48 <UART_SetConfig+0xcd4>)
 8008dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	441a      	add	r2, r3
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d909      	bls.n	8008e10 <UART_SetConfig+0xc9c>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e02:	d205      	bcs.n	8008e10 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60da      	str	r2, [r3, #12]
 8008e0e:	e002      	b.n	8008e16 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008e32:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3748      	adds	r7, #72	@ 0x48
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e40:	03d09000 	.word	0x03d09000
 8008e44:	003d0900 	.word	0x003d0900
 8008e48:	080226dc 	.word	0x080226dc

08008e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00a      	beq.n	8008e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00a      	beq.n	8008e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00a      	beq.n	8008eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	f003 0310 	and.w	r3, r3, #16
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00a      	beq.n	8008efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	430a      	orrs	r2, r1
 8008efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01a      	beq.n	8008f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f4a:	d10a      	bne.n	8008f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
  }
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b098      	sub	sp, #96	@ 0x60
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fa0:	f7f9 fba6 	bl	80026f0 <HAL_GetTick>
 8008fa4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d12f      	bne.n	8009014 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f88e 	bl	80090e4 <UART_WaitOnFlagUntilTimeout>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d022      	beq.n	8009014 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fe2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ff2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e6      	bne.n	8008fce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e063      	b.n	80090dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b04      	cmp	r3, #4
 8009020:	d149      	bne.n	80090b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009022:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800902a:	2200      	movs	r2, #0
 800902c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f857 	bl	80090e4 <UART_WaitOnFlagUntilTimeout>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d03c      	beq.n	80090b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	623b      	str	r3, [r7, #32]
   return(result);
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800905a:	633b      	str	r3, [r7, #48]	@ 0x30
 800905c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e6      	bne.n	800903c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	60fb      	str	r3, [r7, #12]
   return(result);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f023 0301 	bic.w	r3, r3, #1
 8009084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800908e:	61fa      	str	r2, [r7, #28]
 8009090:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	69b9      	ldr	r1, [r7, #24]
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	617b      	str	r3, [r7, #20]
   return(result);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e5      	bne.n	800906e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e012      	b.n	80090dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3758      	adds	r7, #88	@ 0x58
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4613      	mov	r3, r2
 80090f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090f4:	e04f      	b.n	8009196 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d04b      	beq.n	8009196 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090fe:	f7f9 faf7 	bl	80026f0 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	429a      	cmp	r2, r3
 800910c:	d302      	bcc.n	8009114 <UART_WaitOnFlagUntilTimeout+0x30>
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e04e      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0304 	and.w	r3, r3, #4
 8009122:	2b00      	cmp	r3, #0
 8009124:	d037      	beq.n	8009196 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b80      	cmp	r3, #128	@ 0x80
 800912a:	d034      	beq.n	8009196 <UART_WaitOnFlagUntilTimeout+0xb2>
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b40      	cmp	r3, #64	@ 0x40
 8009130:	d031      	beq.n	8009196 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b08      	cmp	r3, #8
 800913e:	d110      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2208      	movs	r2, #8
 8009146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f839 	bl	80091c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2208      	movs	r2, #8
 8009152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e029      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800916c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009170:	d111      	bne.n	8009196 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800917a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f81f 	bl	80091c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2220      	movs	r2, #32
 8009186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e00f      	b.n	80091b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69da      	ldr	r2, [r3, #28]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2300      	movne	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d0a0      	beq.n	80090f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b095      	sub	sp, #84	@ 0x54
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	e853 3f00 	ldrex	r3, [r3]
 80091d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e6      	bne.n	80091c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	61fb      	str	r3, [r7, #28]
   return(result);
 800920a:	69fa      	ldr	r2, [r7, #28]
 800920c:	4b1e      	ldr	r3, [pc, #120]	@ (8009288 <UART_EndRxTransfer+0xc8>)
 800920e:	4013      	ands	r3, r2
 8009210:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800921a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e5      	bne.n	80091fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d118      	bne.n	8009268 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	60bb      	str	r3, [r7, #8]
   return(result);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	647b      	str	r3, [r7, #68]	@ 0x44
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6979      	ldr	r1, [r7, #20]
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	613b      	str	r3, [r7, #16]
   return(result);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e6      	bne.n	8009236 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800927c:	bf00      	nop
 800927e:	3754      	adds	r7, #84	@ 0x54
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	effffffe 	.word	0xeffffffe

0800928c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800929e:	2302      	movs	r3, #2
 80092a0:	e027      	b.n	80092f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2224      	movs	r2, #36	@ 0x24
 80092ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0201 	bic.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80092d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009312:	2302      	movs	r3, #2
 8009314:	e02d      	b.n	8009372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2224      	movs	r2, #36	@ 0x24
 8009322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f022 0201 	bic.w	r2, r2, #1
 800933c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f850 	bl	80093f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800938e:	2302      	movs	r3, #2
 8009390:	e02d      	b.n	80093ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2224      	movs	r2, #36	@ 0x24
 800939e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0201 	bic.w	r2, r2, #1
 80093b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f812 	bl	80093f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009404:	2b00      	cmp	r3, #0
 8009406:	d108      	bne.n	800941a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009418:	e031      	b.n	800947e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800941a:	2310      	movs	r3, #16
 800941c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800941e:	2310      	movs	r3, #16
 8009420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	0e5b      	lsrs	r3, r3, #25
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	0f5b      	lsrs	r3, r3, #29
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	7b3a      	ldrb	r2, [r7, #12]
 8009446:	4911      	ldr	r1, [pc, #68]	@ (800948c <UARTEx_SetNbDataToProcess+0x94>)
 8009448:	5c8a      	ldrb	r2, [r1, r2]
 800944a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800944e:	7b3a      	ldrb	r2, [r7, #12]
 8009450:	490f      	ldr	r1, [pc, #60]	@ (8009490 <UARTEx_SetNbDataToProcess+0x98>)
 8009452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009454:	fb93 f3f2 	sdiv	r3, r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	7b7a      	ldrb	r2, [r7, #13]
 8009464:	4909      	ldr	r1, [pc, #36]	@ (800948c <UARTEx_SetNbDataToProcess+0x94>)
 8009466:	5c8a      	ldrb	r2, [r1, r2]
 8009468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800946c:	7b7a      	ldrb	r2, [r7, #13]
 800946e:	4908      	ldr	r1, [pc, #32]	@ (8009490 <UARTEx_SetNbDataToProcess+0x98>)
 8009470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009472:	fb93 f3f2 	sdiv	r3, r3, r2
 8009476:	b29a      	uxth	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800947e:	bf00      	nop
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	080226f4 	.word	0x080226f4
 8009490:	080226fc 	.word	0x080226fc

08009494 <tcipip_init_wrap>:
#define INTERFACE_THREAD_STACK_SIZE ( 1024 )
osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
static inline void tcipip_init_wrap(tcpip_init_done_fn initfunc, void *arg) {
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
	tcpip_init(initfunc, arg);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f008 ff0b 	bl	80122bc <tcpip_init>
	LOCK_TCPIP_CORE();
 80094a6:	4803      	ldr	r0, [pc, #12]	@ (80094b4 <tcipip_init_wrap+0x20>)
 80094a8:	f014 fa20 	bl	801d8ec <sys_mutex_lock>
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	24010348 	.word	0x24010348

080094b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80094be:	4b93      	ldr	r3, [pc, #588]	@ (800970c <MX_LWIP_Init+0x254>)
 80094c0:	22c0      	movs	r2, #192	@ 0xc0
 80094c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80094c4:	4b91      	ldr	r3, [pc, #580]	@ (800970c <MX_LWIP_Init+0x254>)
 80094c6:	22a8      	movs	r2, #168	@ 0xa8
 80094c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 80094ca:	4b90      	ldr	r3, [pc, #576]	@ (800970c <MX_LWIP_Init+0x254>)
 80094cc:	2232      	movs	r2, #50	@ 0x32
 80094ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80094d0:	4b8e      	ldr	r3, [pc, #568]	@ (800970c <MX_LWIP_Init+0x254>)
 80094d2:	220a      	movs	r2, #10
 80094d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80094d6:	4b8e      	ldr	r3, [pc, #568]	@ (8009710 <MX_LWIP_Init+0x258>)
 80094d8:	22ff      	movs	r2, #255	@ 0xff
 80094da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80094dc:	4b8c      	ldr	r3, [pc, #560]	@ (8009710 <MX_LWIP_Init+0x258>)
 80094de:	22ff      	movs	r2, #255	@ 0xff
 80094e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80094e2:	4b8b      	ldr	r3, [pc, #556]	@ (8009710 <MX_LWIP_Init+0x258>)
 80094e4:	22ff      	movs	r2, #255	@ 0xff
 80094e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80094e8:	4b89      	ldr	r3, [pc, #548]	@ (8009710 <MX_LWIP_Init+0x258>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80094ee:	4b89      	ldr	r3, [pc, #548]	@ (8009714 <MX_LWIP_Init+0x25c>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80094f4:	4b87      	ldr	r3, [pc, #540]	@ (8009714 <MX_LWIP_Init+0x25c>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80094fa:	4b86      	ldr	r3, [pc, #536]	@ (8009714 <MX_LWIP_Init+0x25c>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009500:	4b84      	ldr	r3, [pc, #528]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009502:	2200      	movs	r2, #0
 8009504:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009506:	2100      	movs	r1, #0
 8009508:	2000      	movs	r0, #0
 800950a:	f7ff ffc3 	bl	8009494 <tcipip_init_wrap>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800950e:	4b7f      	ldr	r3, [pc, #508]	@ (800970c <MX_LWIP_Init+0x254>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	061a      	lsls	r2, r3, #24
 8009514:	4b7d      	ldr	r3, [pc, #500]	@ (800970c <MX_LWIP_Init+0x254>)
 8009516:	785b      	ldrb	r3, [r3, #1]
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	431a      	orrs	r2, r3
 800951c:	4b7b      	ldr	r3, [pc, #492]	@ (800970c <MX_LWIP_Init+0x254>)
 800951e:	789b      	ldrb	r3, [r3, #2]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	4313      	orrs	r3, r2
 8009524:	4a79      	ldr	r2, [pc, #484]	@ (800970c <MX_LWIP_Init+0x254>)
 8009526:	78d2      	ldrb	r2, [r2, #3]
 8009528:	4313      	orrs	r3, r2
 800952a:	061a      	lsls	r2, r3, #24
 800952c:	4b77      	ldr	r3, [pc, #476]	@ (800970c <MX_LWIP_Init+0x254>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	0619      	lsls	r1, r3, #24
 8009532:	4b76      	ldr	r3, [pc, #472]	@ (800970c <MX_LWIP_Init+0x254>)
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	041b      	lsls	r3, r3, #16
 8009538:	4319      	orrs	r1, r3
 800953a:	4b74      	ldr	r3, [pc, #464]	@ (800970c <MX_LWIP_Init+0x254>)
 800953c:	789b      	ldrb	r3, [r3, #2]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	430b      	orrs	r3, r1
 8009542:	4972      	ldr	r1, [pc, #456]	@ (800970c <MX_LWIP_Init+0x254>)
 8009544:	78c9      	ldrb	r1, [r1, #3]
 8009546:	430b      	orrs	r3, r1
 8009548:	021b      	lsls	r3, r3, #8
 800954a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800954e:	431a      	orrs	r2, r3
 8009550:	4b6e      	ldr	r3, [pc, #440]	@ (800970c <MX_LWIP_Init+0x254>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	0619      	lsls	r1, r3, #24
 8009556:	4b6d      	ldr	r3, [pc, #436]	@ (800970c <MX_LWIP_Init+0x254>)
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	4319      	orrs	r1, r3
 800955e:	4b6b      	ldr	r3, [pc, #428]	@ (800970c <MX_LWIP_Init+0x254>)
 8009560:	789b      	ldrb	r3, [r3, #2]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	430b      	orrs	r3, r1
 8009566:	4969      	ldr	r1, [pc, #420]	@ (800970c <MX_LWIP_Init+0x254>)
 8009568:	78c9      	ldrb	r1, [r1, #3]
 800956a:	430b      	orrs	r3, r1
 800956c:	0a1b      	lsrs	r3, r3, #8
 800956e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009572:	431a      	orrs	r2, r3
 8009574:	4b65      	ldr	r3, [pc, #404]	@ (800970c <MX_LWIP_Init+0x254>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	0619      	lsls	r1, r3, #24
 800957a:	4b64      	ldr	r3, [pc, #400]	@ (800970c <MX_LWIP_Init+0x254>)
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	041b      	lsls	r3, r3, #16
 8009580:	4319      	orrs	r1, r3
 8009582:	4b62      	ldr	r3, [pc, #392]	@ (800970c <MX_LWIP_Init+0x254>)
 8009584:	789b      	ldrb	r3, [r3, #2]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	430b      	orrs	r3, r1
 800958a:	4960      	ldr	r1, [pc, #384]	@ (800970c <MX_LWIP_Init+0x254>)
 800958c:	78c9      	ldrb	r1, [r1, #3]
 800958e:	430b      	orrs	r3, r1
 8009590:	0e1b      	lsrs	r3, r3, #24
 8009592:	4313      	orrs	r3, r2
 8009594:	4a60      	ldr	r2, [pc, #384]	@ (8009718 <MX_LWIP_Init+0x260>)
 8009596:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009598:	4b5d      	ldr	r3, [pc, #372]	@ (8009710 <MX_LWIP_Init+0x258>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	061a      	lsls	r2, r3, #24
 800959e:	4b5c      	ldr	r3, [pc, #368]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	041b      	lsls	r3, r3, #16
 80095a4:	431a      	orrs	r2, r3
 80095a6:	4b5a      	ldr	r3, [pc, #360]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095a8:	789b      	ldrb	r3, [r3, #2]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	4313      	orrs	r3, r2
 80095ae:	4a58      	ldr	r2, [pc, #352]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095b0:	78d2      	ldrb	r2, [r2, #3]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	061a      	lsls	r2, r3, #24
 80095b6:	4b56      	ldr	r3, [pc, #344]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	0619      	lsls	r1, r3, #24
 80095bc:	4b54      	ldr	r3, [pc, #336]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	041b      	lsls	r3, r3, #16
 80095c2:	4319      	orrs	r1, r3
 80095c4:	4b52      	ldr	r3, [pc, #328]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095c6:	789b      	ldrb	r3, [r3, #2]
 80095c8:	021b      	lsls	r3, r3, #8
 80095ca:	430b      	orrs	r3, r1
 80095cc:	4950      	ldr	r1, [pc, #320]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095ce:	78c9      	ldrb	r1, [r1, #3]
 80095d0:	430b      	orrs	r3, r1
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095d8:	431a      	orrs	r2, r3
 80095da:	4b4d      	ldr	r3, [pc, #308]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	0619      	lsls	r1, r3, #24
 80095e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	041b      	lsls	r3, r3, #16
 80095e6:	4319      	orrs	r1, r3
 80095e8:	4b49      	ldr	r3, [pc, #292]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095ea:	789b      	ldrb	r3, [r3, #2]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	430b      	orrs	r3, r1
 80095f0:	4947      	ldr	r1, [pc, #284]	@ (8009710 <MX_LWIP_Init+0x258>)
 80095f2:	78c9      	ldrb	r1, [r1, #3]
 80095f4:	430b      	orrs	r3, r1
 80095f6:	0a1b      	lsrs	r3, r3, #8
 80095f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095fc:	431a      	orrs	r2, r3
 80095fe:	4b44      	ldr	r3, [pc, #272]	@ (8009710 <MX_LWIP_Init+0x258>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	0619      	lsls	r1, r3, #24
 8009604:	4b42      	ldr	r3, [pc, #264]	@ (8009710 <MX_LWIP_Init+0x258>)
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	041b      	lsls	r3, r3, #16
 800960a:	4319      	orrs	r1, r3
 800960c:	4b40      	ldr	r3, [pc, #256]	@ (8009710 <MX_LWIP_Init+0x258>)
 800960e:	789b      	ldrb	r3, [r3, #2]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	430b      	orrs	r3, r1
 8009614:	493e      	ldr	r1, [pc, #248]	@ (8009710 <MX_LWIP_Init+0x258>)
 8009616:	78c9      	ldrb	r1, [r1, #3]
 8009618:	430b      	orrs	r3, r1
 800961a:	0e1b      	lsrs	r3, r3, #24
 800961c:	4313      	orrs	r3, r2
 800961e:	4a3f      	ldr	r2, [pc, #252]	@ (800971c <MX_LWIP_Init+0x264>)
 8009620:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009622:	4b3c      	ldr	r3, [pc, #240]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	061a      	lsls	r2, r3, #24
 8009628:	4b3a      	ldr	r3, [pc, #232]	@ (8009714 <MX_LWIP_Init+0x25c>)
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	041b      	lsls	r3, r3, #16
 800962e:	431a      	orrs	r2, r3
 8009630:	4b38      	ldr	r3, [pc, #224]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009632:	789b      	ldrb	r3, [r3, #2]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	4313      	orrs	r3, r2
 8009638:	4a36      	ldr	r2, [pc, #216]	@ (8009714 <MX_LWIP_Init+0x25c>)
 800963a:	78d2      	ldrb	r2, [r2, #3]
 800963c:	4313      	orrs	r3, r2
 800963e:	061a      	lsls	r2, r3, #24
 8009640:	4b34      	ldr	r3, [pc, #208]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	0619      	lsls	r1, r3, #24
 8009646:	4b33      	ldr	r3, [pc, #204]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	041b      	lsls	r3, r3, #16
 800964c:	4319      	orrs	r1, r3
 800964e:	4b31      	ldr	r3, [pc, #196]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009650:	789b      	ldrb	r3, [r3, #2]
 8009652:	021b      	lsls	r3, r3, #8
 8009654:	430b      	orrs	r3, r1
 8009656:	492f      	ldr	r1, [pc, #188]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009658:	78c9      	ldrb	r1, [r1, #3]
 800965a:	430b      	orrs	r3, r1
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009662:	431a      	orrs	r2, r3
 8009664:	4b2b      	ldr	r3, [pc, #172]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	0619      	lsls	r1, r3, #24
 800966a:	4b2a      	ldr	r3, [pc, #168]	@ (8009714 <MX_LWIP_Init+0x25c>)
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	041b      	lsls	r3, r3, #16
 8009670:	4319      	orrs	r1, r3
 8009672:	4b28      	ldr	r3, [pc, #160]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009674:	789b      	ldrb	r3, [r3, #2]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	430b      	orrs	r3, r1
 800967a:	4926      	ldr	r1, [pc, #152]	@ (8009714 <MX_LWIP_Init+0x25c>)
 800967c:	78c9      	ldrb	r1, [r1, #3]
 800967e:	430b      	orrs	r3, r1
 8009680:	0a1b      	lsrs	r3, r3, #8
 8009682:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009686:	431a      	orrs	r2, r3
 8009688:	4b22      	ldr	r3, [pc, #136]	@ (8009714 <MX_LWIP_Init+0x25c>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	0619      	lsls	r1, r3, #24
 800968e:	4b21      	ldr	r3, [pc, #132]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	4319      	orrs	r1, r3
 8009696:	4b1f      	ldr	r3, [pc, #124]	@ (8009714 <MX_LWIP_Init+0x25c>)
 8009698:	789b      	ldrb	r3, [r3, #2]
 800969a:	021b      	lsls	r3, r3, #8
 800969c:	430b      	orrs	r3, r1
 800969e:	491d      	ldr	r1, [pc, #116]	@ (8009714 <MX_LWIP_Init+0x25c>)
 80096a0:	78c9      	ldrb	r1, [r1, #3]
 80096a2:	430b      	orrs	r3, r1
 80096a4:	0e1b      	lsrs	r3, r3, #24
 80096a6:	4313      	orrs	r3, r2
 80096a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009720 <MX_LWIP_Init+0x268>)
 80096aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80096ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009724 <MX_LWIP_Init+0x26c>)
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009728 <MX_LWIP_Init+0x270>)
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	2300      	movs	r3, #0
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	4b19      	ldr	r3, [pc, #100]	@ (8009720 <MX_LWIP_Init+0x268>)
 80096ba:	4a18      	ldr	r2, [pc, #96]	@ (800971c <MX_LWIP_Init+0x264>)
 80096bc:	4916      	ldr	r1, [pc, #88]	@ (8009718 <MX_LWIP_Init+0x260>)
 80096be:	481b      	ldr	r0, [pc, #108]	@ (800972c <MX_LWIP_Init+0x274>)
 80096c0:	f009 fc8e 	bl	8012fe0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80096c4:	4819      	ldr	r0, [pc, #100]	@ (800972c <MX_LWIP_Init+0x274>)
 80096c6:	f009 fe3d 	bl	8013344 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80096ca:	4818      	ldr	r0, [pc, #96]	@ (800972c <MX_LWIP_Init+0x274>)
 80096cc:	f009 fe4a 	bl	8013364 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80096d0:	4917      	ldr	r1, [pc, #92]	@ (8009730 <MX_LWIP_Init+0x278>)
 80096d2:	4816      	ldr	r0, [pc, #88]	@ (800972c <MX_LWIP_Init+0x274>)
 80096d4:	f009 ff48 	bl	8013568 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80096d8:	2224      	movs	r2, #36	@ 0x24
 80096da:	2100      	movs	r1, #0
 80096dc:	4815      	ldr	r0, [pc, #84]	@ (8009734 <MX_LWIP_Init+0x27c>)
 80096de:	f014 fcc1 	bl	801e064 <memset>
  attributes.name = "EthLink";
 80096e2:	4b14      	ldr	r3, [pc, #80]	@ (8009734 <MX_LWIP_Init+0x27c>)
 80096e4:	4a14      	ldr	r2, [pc, #80]	@ (8009738 <MX_LWIP_Init+0x280>)
 80096e6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80096e8:	4b12      	ldr	r3, [pc, #72]	@ (8009734 <MX_LWIP_Init+0x27c>)
 80096ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80096ee:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80096f0:	4b10      	ldr	r3, [pc, #64]	@ (8009734 <MX_LWIP_Init+0x27c>)
 80096f2:	2210      	movs	r2, #16
 80096f4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80096f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009734 <MX_LWIP_Init+0x27c>)
 80096f8:	490c      	ldr	r1, [pc, #48]	@ (800972c <MX_LWIP_Init+0x274>)
 80096fa:	4810      	ldr	r0, [pc, #64]	@ (800973c <MX_LWIP_Init+0x284>)
 80096fc:	f000 fdcf 	bl	800a29e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
UNLOCK_TCPIP_CORE();
 8009700:	480f      	ldr	r0, [pc, #60]	@ (8009740 <MX_LWIP_Init+0x288>)
 8009702:	f014 f902 	bl	801d90a <sys_mutex_unlock>
/* USER CODE END 3 */
}
 8009706:	bf00      	nop
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	24000578 	.word	0x24000578
 8009710:	2400057c 	.word	0x2400057c
 8009714:	24000580 	.word	0x24000580
 8009718:	2400056c 	.word	0x2400056c
 800971c:	24000570 	.word	0x24000570
 8009720:	24000574 	.word	0x24000574
 8009724:	080121cd 	.word	0x080121cd
 8009728:	08009c2d 	.word	0x08009c2d
 800972c:	24000538 	.word	0x24000538
 8009730:	08009745 	.word	0x08009745
 8009734:	24000584 	.word	0x24000584
 8009738:	0801ed1c 	.word	0x0801ed1c
 800973c:	08009edd 	.word	0x08009edd
 8009740:	24010348 	.word	0x24010348

08009744 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8009760:	4b04      	ldr	r3, [pc, #16]	@ (8009774 <HAL_ETH_RxCpltCallback+0x1c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4618      	mov	r0, r3
 8009766:	f001 f831 	bl	800a7cc <osSemaphoreRelease>
}
 800976a:	bf00      	nop
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	240005b0 	.word	0x240005b0

08009778 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8009780:	4b04      	ldr	r3, [pc, #16]	@ (8009794 <HAL_ETH_TxCpltCallback+0x1c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f001 f821 	bl	800a7cc <osSemaphoreRelease>
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	240005b4 	.word	0x240005b4

08009798 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fa f8f6 	bl	8003992 <HAL_ETH_GetDMAError>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ac:	2b80      	cmp	r3, #128	@ 0x80
 80097ae:	d104      	bne.n	80097ba <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80097b0:	4b04      	ldr	r3, [pc, #16]	@ (80097c4 <HAL_ETH_ErrorCallback+0x2c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f001 f809 	bl	800a7cc <osSemaphoreRelease>
  }
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	240005b0 	.word	0x240005b0

080097c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b0aa      	sub	sp, #168	@ 0xa8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80097d6:	2300      	movs	r3, #0
 80097d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80097e2:	f107 0310 	add.w	r3, r7, #16
 80097e6:	2264      	movs	r2, #100	@ 0x64
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f014 fc3a 	bl	801e064 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80097f0:	4b89      	ldr	r3, [pc, #548]	@ (8009a18 <low_level_init+0x250>)
 80097f2:	4a8a      	ldr	r2, [pc, #552]	@ (8009a1c <low_level_init+0x254>)
 80097f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80097f6:	2300      	movs	r3, #0
 80097f8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80097fa:	2380      	movs	r3, #128	@ 0x80
 80097fc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80097fe:	23e1      	movs	r3, #225	@ 0xe1
 8009800:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009802:	2300      	movs	r3, #0
 8009804:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009806:	2300      	movs	r3, #0
 8009808:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800980a:	2300      	movs	r3, #0
 800980c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800980e:	4a82      	ldr	r2, [pc, #520]	@ (8009a18 <low_level_init+0x250>)
 8009810:	f107 0308 	add.w	r3, r7, #8
 8009814:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009816:	4b80      	ldr	r3, [pc, #512]	@ (8009a18 <low_level_init+0x250>)
 8009818:	2201      	movs	r2, #1
 800981a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800981c:	4b7e      	ldr	r3, [pc, #504]	@ (8009a18 <low_level_init+0x250>)
 800981e:	4a80      	ldr	r2, [pc, #512]	@ (8009a20 <low_level_init+0x258>)
 8009820:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009822:	4b7d      	ldr	r3, [pc, #500]	@ (8009a18 <low_level_init+0x250>)
 8009824:	4a7f      	ldr	r2, [pc, #508]	@ (8009a24 <low_level_init+0x25c>)
 8009826:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009828:	4b7b      	ldr	r3, [pc, #492]	@ (8009a18 <low_level_init+0x250>)
 800982a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800982e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009830:	4879      	ldr	r0, [pc, #484]	@ (8009a18 <low_level_init+0x250>)
 8009832:	f7f9 f8d5 	bl	80029e0 <HAL_ETH_Init>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800983c:	2238      	movs	r2, #56	@ 0x38
 800983e:	2100      	movs	r1, #0
 8009840:	4879      	ldr	r0, [pc, #484]	@ (8009a28 <low_level_init+0x260>)
 8009842:	f014 fc0f 	bl	801e064 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009846:	4b78      	ldr	r3, [pc, #480]	@ (8009a28 <low_level_init+0x260>)
 8009848:	2221      	movs	r2, #33	@ 0x21
 800984a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800984c:	4b76      	ldr	r3, [pc, #472]	@ (8009a28 <low_level_init+0x260>)
 800984e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8009852:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009854:	4b74      	ldr	r3, [pc, #464]	@ (8009a28 <low_level_init+0x260>)
 8009856:	2200      	movs	r2, #0
 8009858:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800985a:	4874      	ldr	r0, [pc, #464]	@ (8009a2c <low_level_init+0x264>)
 800985c:	f009 fa7a 	bl	8012d54 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2206      	movs	r2, #6
 8009864:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009868:	4b6b      	ldr	r3, [pc, #428]	@ (8009a18 <low_level_init+0x250>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	781a      	ldrb	r2, [r3, #0]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009874:	4b68      	ldr	r3, [pc, #416]	@ (8009a18 <low_level_init+0x250>)
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	785a      	ldrb	r2, [r3, #1]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009880:	4b65      	ldr	r3, [pc, #404]	@ (8009a18 <low_level_init+0x250>)
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	789a      	ldrb	r2, [r3, #2]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800988c:	4b62      	ldr	r3, [pc, #392]	@ (8009a18 <low_level_init+0x250>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	78da      	ldrb	r2, [r3, #3]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009898:	4b5f      	ldr	r3, [pc, #380]	@ (8009a18 <low_level_init+0x250>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	791a      	ldrb	r2, [r3, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80098a4:	4b5c      	ldr	r3, [pc, #368]	@ (8009a18 <low_level_init+0x250>)
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	795a      	ldrb	r2, [r3, #5]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80098b6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80098be:	f043 030a 	orr.w	r3, r3, #10
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80098ca:	2200      	movs	r2, #0
 80098cc:	2100      	movs	r1, #0
 80098ce:	2001      	movs	r0, #1
 80098d0:	f000 fea1 	bl	800a616 <osSemaphoreNew>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4a56      	ldr	r2, [pc, #344]	@ (8009a30 <low_level_init+0x268>)
 80098d8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80098da:	2200      	movs	r2, #0
 80098dc:	2100      	movs	r1, #0
 80098de:	2001      	movs	r0, #1
 80098e0:	f000 fe99 	bl	800a616 <osSemaphoreNew>
 80098e4:	4603      	mov	r3, r0
 80098e6:	4a53      	ldr	r2, [pc, #332]	@ (8009a34 <low_level_init+0x26c>)
 80098e8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80098ea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80098ee:	2224      	movs	r2, #36	@ 0x24
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f014 fbb6 	bl	801e064 <memset>
  attributes.name = "EthIf";
 80098f8:	4b4f      	ldr	r3, [pc, #316]	@ (8009a38 <low_level_init+0x270>)
 80098fa:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80098fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8009904:	2330      	movs	r3, #48	@ 0x30
 8009906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800990a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800990e:	461a      	mov	r2, r3
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	484a      	ldr	r0, [pc, #296]	@ (8009a3c <low_level_init+0x274>)
 8009914:	f000 fcc3 	bl	800a29e <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009918:	4949      	ldr	r1, [pc, #292]	@ (8009a40 <low_level_init+0x278>)
 800991a:	484a      	ldr	r0, [pc, #296]	@ (8009a44 <low_level_init+0x27c>)
 800991c:	f7f8 fd91 	bl	8002442 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009920:	4848      	ldr	r0, [pc, #288]	@ (8009a44 <low_level_init+0x27c>)
 8009922:	f7f8 fdc0 	bl	80024a6 <LAN8742_Init>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d006      	beq.n	800993a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f009 fdeb 	bl	8013508 <netif_set_link_down>
    netif_set_down(netif);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f009 fd82 	bl	801343c <netif_set_down>
 8009938:	e06b      	b.n	8009a12 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800993a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800993e:	2b00      	cmp	r3, #0
 8009940:	d165      	bne.n	8009a0e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009942:	4840      	ldr	r0, [pc, #256]	@ (8009a44 <low_level_init+0x27c>)
 8009944:	f7f8 fdfc 	bl	8002540 <LAN8742_GetLinkState>
 8009948:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800994c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009950:	2b01      	cmp	r3, #1
 8009952:	dc06      	bgt.n	8009962 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f009 fdd7 	bl	8013508 <netif_set_link_down>
      netif_set_down(netif);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f009 fd6e 	bl	801343c <netif_set_down>
 8009960:	e057      	b.n	8009a12 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8009962:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009966:	3b02      	subs	r3, #2
 8009968:	2b03      	cmp	r3, #3
 800996a:	d82b      	bhi.n	80099c4 <low_level_init+0x1fc>
 800996c:	a201      	add	r2, pc, #4	@ (adr r2, 8009974 <low_level_init+0x1ac>)
 800996e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009972:	bf00      	nop
 8009974:	08009985 	.word	0x08009985
 8009978:	08009997 	.word	0x08009997
 800997c:	080099a7 	.word	0x080099a7
 8009980:	080099b7 	.word	0x080099b7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800998c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009990:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009994:	e01f      	b.n	80099d6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009996:	2300      	movs	r3, #0
 8009998:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800999c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80099a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80099a4:	e017      	b.n	80099d6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80099a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80099aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80099b4:	e00f      	b.n	80099d6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80099bc:	2300      	movs	r3, #0
 80099be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80099c2:	e008      	b.n	80099d6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80099c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80099c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80099cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80099d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80099d4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80099d6:	f107 0310 	add.w	r3, r7, #16
 80099da:	4619      	mov	r1, r3
 80099dc:	480e      	ldr	r0, [pc, #56]	@ (8009a18 <low_level_init+0x250>)
 80099de:	f7f9 fd8d 	bl	80034fc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80099e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80099e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80099ee:	f107 0310 	add.w	r3, r7, #16
 80099f2:	4619      	mov	r1, r3
 80099f4:	4808      	ldr	r0, [pc, #32]	@ (8009a18 <low_level_init+0x250>)
 80099f6:	f7f9 ff55 	bl	80038a4 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80099fa:	4807      	ldr	r0, [pc, #28]	@ (8009a18 <low_level_init+0x250>)
 80099fc:	f7f9 f8ee 	bl	8002bdc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f009 fcaf 	bl	8013364 <netif_set_up>
    netif_set_link_up(netif);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f009 fd4a 	bl	80134a0 <netif_set_link_up>
 8009a0c:	e001      	b.n	8009a12 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8009a0e:	f7f7 fb67 	bl	80010e0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009a12:	37a8      	adds	r7, #168	@ 0xa8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	240005b8 	.word	0x240005b8
 8009a1c:	40028000 	.word	0x40028000
 8009a20:	30000100 	.word	0x30000100
 8009a24:	30000000 	.word	0x30000000
 8009a28:	24000668 	.word	0x24000668
 8009a2c:	08022704 	.word	0x08022704
 8009a30:	240005b0 	.word	0x240005b0
 8009a34:	240005b4 	.word	0x240005b4
 8009a38:	0801ed24 	.word	0x0801ed24
 8009a3c:	08009bd9 	.word	0x08009bd9
 8009a40:	24000010 	.word	0x24000010
 8009a44:	240006a0 	.word	0x240006a0

08009a48 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b092      	sub	sp, #72	@ 0x48
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009a60:	f107 030c 	add.w	r3, r7, #12
 8009a64:	2230      	movs	r2, #48	@ 0x30
 8009a66:	2100      	movs	r1, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f014 fafb 	bl	801e064 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009a6e:	f107 030c 	add.w	r3, r7, #12
 8009a72:	2230      	movs	r2, #48	@ 0x30
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f014 faf4 	bl	801e064 <memset>

  for(q = p; q != NULL; q = q->next)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a80:	e045      	b.n	8009b0e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d902      	bls.n	8009a8e <low_level_output+0x46>
      return ERR_IF;
 8009a88:	f06f 030b 	mvn.w	r3, #11
 8009a8c:	e07f      	b.n	8009b8e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8009a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a90:	6859      	ldr	r1, [r3, #4]
 8009a92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	3348      	adds	r3, #72	@ 0x48
 8009a9e:	443b      	add	r3, r7
 8009aa0:	3b3c      	subs	r3, #60	@ 0x3c
 8009aa2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aa6:	895b      	ldrh	r3, [r3, #10]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aac:	4613      	mov	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	3348      	adds	r3, #72	@ 0x48
 8009ab6:	443b      	add	r3, r7
 8009ab8:	3b38      	subs	r3, #56	@ 0x38
 8009aba:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d011      	beq.n	8009ae6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac4:	1e5a      	subs	r2, r3, #1
 8009ac6:	f107 000c 	add.w	r0, r7, #12
 8009aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009acc:	460b      	mov	r3, r1
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	440b      	add	r3, r1
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	18c1      	adds	r1, r0, r3
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	3348      	adds	r3, #72	@ 0x48
 8009ae0:	443b      	add	r3, r7
 8009ae2:	3b34      	subs	r3, #52	@ 0x34
 8009ae4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af0:	4613      	mov	r3, r2
 8009af2:	005b      	lsls	r3, r3, #1
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	3348      	adds	r3, #72	@ 0x48
 8009afa:	443b      	add	r3, r7
 8009afc:	3b34      	subs	r3, #52	@ 0x34
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b04:	3301      	adds	r3, #1
 8009b06:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1b6      	bne.n	8009a82 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	891b      	ldrh	r3, [r3, #8]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009b98 <low_level_output+0x150>)
 8009b1c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b98 <low_level_output+0x150>)
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009b26:	4a1c      	ldr	r2, [pc, #112]	@ (8009b98 <low_level_output+0x150>)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8009b2c:	6838      	ldr	r0, [r7, #0]
 8009b2e:	f00a f9a5 	bl	8013e7c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8009b32:	4919      	ldr	r1, [pc, #100]	@ (8009b98 <low_level_output+0x150>)
 8009b34:	4819      	ldr	r0, [pc, #100]	@ (8009b9c <low_level_output+0x154>)
 8009b36:	f7f9 f93d 	bl	8002db4 <HAL_ETH_Transmit_IT>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d103      	bne.n	8009b48 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009b46:	e01b      	b.n	8009b80 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8009b48:	4814      	ldr	r0, [pc, #80]	@ (8009b9c <low_level_output+0x154>)
 8009b4a:	f7f9 ff15 	bl	8003978 <HAL_ETH_GetError>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00d      	beq.n	8009b74 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8009b58:	4b11      	ldr	r3, [pc, #68]	@ (8009ba0 <low_level_output+0x158>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 fde1 	bl	800a728 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8009b66:	480d      	ldr	r0, [pc, #52]	@ (8009b9c <low_level_output+0x154>)
 8009b68:	f7f9 faab 	bl	80030c2 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8009b6c:	23fe      	movs	r3, #254	@ 0xfe
 8009b6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009b72:	e005      	b.n	8009b80 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8009b74:	6838      	ldr	r0, [r7, #0]
 8009b76:	f00a f8db 	bl	8013d30 <pbuf_free>
        errval =  ERR_IF;
 8009b7a:	23f4      	movs	r3, #244	@ 0xf4
 8009b7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8009b80:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009b84:	f113 0f02 	cmn.w	r3, #2
 8009b88:	d0d3      	beq.n	8009b32 <low_level_output+0xea>

  return errval;
 8009b8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3748      	adds	r7, #72	@ 0x48
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	24000668 	.word	0x24000668
 8009b9c:	240005b8 	.word	0x240005b8
 8009ba0:	240005b4 	.word	0x240005b4

08009ba4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009bb0:	4b07      	ldr	r3, [pc, #28]	@ (8009bd0 <low_level_input+0x2c>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d105      	bne.n	8009bc4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4805      	ldr	r0, [pc, #20]	@ (8009bd4 <low_level_input+0x30>)
 8009bc0:	f7f9 f949 	bl	8002e56 <HAL_ETH_ReadData>
  }

  return p;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	240005ac 	.word	0x240005ac
 8009bd4:	240005b8 	.word	0x240005b8

08009bd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009be8:	4b0f      	ldr	r3, [pc, #60]	@ (8009c28 <ethernetif_input+0x50>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f04f 31ff 	mov.w	r1, #4294967295
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 fd99 	bl	800a728 <osSemaphoreAcquire>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1f5      	bne.n	8009be8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009bfc:	68b8      	ldr	r0, [r7, #8]
 8009bfe:	f7ff ffd1 	bl	8009ba4 <low_level_input>
 8009c02:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	4798      	blx	r3
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f00a f888 	bl	8013d30 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1ea      	bne.n	8009bfc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009c26:	e7df      	b.n	8009be8 <ethernetif_input+0x10>
 8009c28:	240005b0 	.word	0x240005b0

08009c2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d106      	bne.n	8009c48 <ethernetif_init+0x1c>
 8009c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c74 <ethernetif_init+0x48>)
 8009c3c:	f240 2222 	movw	r2, #546	@ 0x222
 8009c40:	490d      	ldr	r1, [pc, #52]	@ (8009c78 <ethernetif_init+0x4c>)
 8009c42:	480e      	ldr	r0, [pc, #56]	@ (8009c7c <ethernetif_init+0x50>)
 8009c44:	f014 f8b6 	bl	801ddb4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2273      	movs	r2, #115	@ 0x73
 8009c4c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2274      	movs	r2, #116	@ 0x74
 8009c54:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a09      	ldr	r2, [pc, #36]	@ (8009c80 <ethernetif_init+0x54>)
 8009c5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a08      	ldr	r2, [pc, #32]	@ (8009c84 <ethernetif_init+0x58>)
 8009c62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7ff fdaf 	bl	80097c8 <low_level_init>

  return ERR_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	0801ed2c 	.word	0x0801ed2c
 8009c78:	0801ed48 	.word	0x0801ed48
 8009c7c:	0801ed58 	.word	0x0801ed58
 8009c80:	0801b8f5 	.word	0x0801b8f5
 8009c84:	08009a49 	.word	0x08009a49

08009c88 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009c94:	68f9      	ldr	r1, [r7, #12]
 8009c96:	4809      	ldr	r0, [pc, #36]	@ (8009cbc <pbuf_free_custom+0x34>)
 8009c98:	f009 f94c 	bl	8012f34 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009c9c:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <pbuf_free_custom+0x38>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d107      	bne.n	8009cb4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009ca4:	4b06      	ldr	r3, [pc, #24]	@ (8009cc0 <pbuf_free_custom+0x38>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8009caa:	4b06      	ldr	r3, [pc, #24]	@ (8009cc4 <pbuf_free_custom+0x3c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fd8c 	bl	800a7cc <osSemaphoreRelease>
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	08022704 	.word	0x08022704
 8009cc0:	240005ac 	.word	0x240005ac
 8009cc4:	240005b0 	.word	0x240005b0

08009cc8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009ccc:	f7f8 fd10 	bl	80026f0 <HAL_GetTick>
 8009cd0:	4603      	mov	r3, r0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08e      	sub	sp, #56	@ 0x38
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	605a      	str	r2, [r3, #4]
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	60da      	str	r2, [r3, #12]
 8009cee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8009e2c <HAL_ETH_MspInit+0x154>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	f040 8093 	bne.w	8009e22 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8009cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d02:	4a4b      	ldr	r2, [pc, #300]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009d0c:	4b48      	ldr	r3, [pc, #288]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d16:	623b      	str	r3, [r7, #32]
 8009d18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8009d1a:	4b45      	ldr	r3, [pc, #276]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d20:	4a43      	ldr	r2, [pc, #268]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009d2a:	4b41      	ldr	r3, [pc, #260]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8009d38:	4b3d      	ldr	r3, [pc, #244]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d44:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009d48:	4b39      	ldr	r3, [pc, #228]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d52:	61bb      	str	r3, [r7, #24]
 8009d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d56:	4b36      	ldr	r3, [pc, #216]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d5c:	4a34      	ldr	r2, [pc, #208]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d5e:	f043 0304 	orr.w	r3, r3, #4
 8009d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009d66:	4b32      	ldr	r3, [pc, #200]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d74:	4b2e      	ldr	r3, [pc, #184]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009d84:	4b2a      	ldr	r3, [pc, #168]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
 8009d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d92:	4b27      	ldr	r3, [pc, #156]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d98:	4a25      	ldr	r2, [pc, #148]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009d9a:	f043 0302 	orr.w	r3, r3, #2
 8009d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009da2:	4b23      	ldr	r3, [pc, #140]	@ (8009e30 <HAL_ETH_MspInit+0x158>)
 8009da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	60fb      	str	r3, [r7, #12]
 8009dae:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009db0:	2332      	movs	r3, #50	@ 0x32
 8009db2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db4:	2302      	movs	r3, #2
 8009db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db8:	2300      	movs	r3, #0
 8009dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009dc0:	230b      	movs	r3, #11
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dc8:	4619      	mov	r1, r3
 8009dca:	481a      	ldr	r0, [pc, #104]	@ (8009e34 <HAL_ETH_MspInit+0x15c>)
 8009dcc:	f7fa fb70 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009dd0:	2386      	movs	r3, #134	@ 0x86
 8009dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009de0:	230b      	movs	r3, #11
 8009de2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009de8:	4619      	mov	r1, r3
 8009dea:	4813      	ldr	r0, [pc, #76]	@ (8009e38 <HAL_ETH_MspInit+0x160>)
 8009dec:	f7fa fb60 	bl	80044b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009df0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df6:	2302      	movs	r3, #2
 8009df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009e02:	230b      	movs	r3, #11
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	480b      	ldr	r0, [pc, #44]	@ (8009e3c <HAL_ETH_MspInit+0x164>)
 8009e0e:	f7fa fb4f 	bl	80044b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009e12:	2200      	movs	r2, #0
 8009e14:	2105      	movs	r1, #5
 8009e16:	203d      	movs	r0, #61	@ 0x3d
 8009e18:	f7f8 fd42 	bl	80028a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009e1c:	203d      	movs	r0, #61	@ 0x3d
 8009e1e:	f7f8 fd59 	bl	80028d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009e22:	bf00      	nop
 8009e24:	3738      	adds	r7, #56	@ 0x38
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40028000 	.word	0x40028000
 8009e30:	58024400 	.word	0x58024400
 8009e34:	58020800 	.word	0x58020800
 8009e38:	58020000 	.word	0x58020000
 8009e3c:	58020400 	.word	0x58020400

08009e40 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009e44:	4802      	ldr	r0, [pc, #8]	@ (8009e50 <ETH_PHY_IO_Init+0x10>)
 8009e46:	f7f9 fd47 	bl	80038d8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	240005b8 	.word	0x240005b8

08009e54 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009e54:	b480      	push	{r7}
 8009e56:	af00      	add	r7, sp, #0
  return 0;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	68f9      	ldr	r1, [r7, #12]
 8009e76:	4807      	ldr	r0, [pc, #28]	@ (8009e94 <ETH_PHY_IO_ReadReg+0x30>)
 8009e78:	f7f9 fa98 	bl	80033ac <HAL_ETH_ReadPHYRegister>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	e000      	b.n	8009e8a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	240005b8 	.word	0x240005b8

08009e98 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	68f9      	ldr	r1, [r7, #12]
 8009eaa:	4807      	ldr	r0, [pc, #28]	@ (8009ec8 <ETH_PHY_IO_WriteReg+0x30>)
 8009eac:	f7f9 fad2 	bl	8003454 <HAL_ETH_WritePHYRegister>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eba:	e000      	b.n	8009ebe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	240005b8 	.word	0x240005b8

08009ecc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009ed0:	f7f8 fc0e 	bl	80026f0 <HAL_GetTick>
 8009ed4:	4603      	mov	r3, r0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b0a0      	sub	sp, #128	@ 0x80
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009ee4:	f107 0308 	add.w	r3, r7, #8
 8009ee8:	2264      	movs	r2, #100	@ 0x64
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f014 f8b9 	bl	801e064 <memset>
  int32_t PHYLinkState = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009efa:	2300      	movs	r3, #0
 8009efc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009efe:	2300      	movs	r3, #0
 8009f00:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
/* USER CODE BEGIN ETH link init */
#define HAL_ETH_Start HAL_ETH_Start_IT
  LOCK_TCPIP_CORE();
 8009f06:	483f      	ldr	r0, [pc, #252]	@ (800a004 <ethernet_link_thread+0x128>)
 8009f08:	f013 fcf0 	bl	801d8ec <sys_mutex_lock>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009f0c:	483e      	ldr	r0, [pc, #248]	@ (800a008 <ethernet_link_thread+0x12c>)
 8009f0e:	f7f8 fb17 	bl	8002540 <LAN8742_GetLinkState>
 8009f12:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f1a:	089b      	lsrs	r3, r3, #2
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00c      	beq.n	8009f40 <ethernet_link_thread+0x64>
 8009f26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	dc09      	bgt.n	8009f40 <ethernet_link_thread+0x64>
  {
    HAL_ETH_Stop_IT(&heth);
 8009f2c:	4837      	ldr	r0, [pc, #220]	@ (800a00c <ethernet_link_thread+0x130>)
 8009f2e:	f7f8 fec9 	bl	8002cc4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009f32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f34:	f009 fa82 	bl	801343c <netif_set_down>
    netif_set_link_down(netif);
 8009f38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f3a:	f009 fae5 	bl	8013508 <netif_set_link_down>
 8009f3e:	e056      	b.n	8009fee <ethernet_link_thread+0x112>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d14f      	bne.n	8009fee <ethernet_link_thread+0x112>
 8009f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	dd4c      	ble.n	8009fee <ethernet_link_thread+0x112>
  {
    switch (PHYLinkState)
 8009f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f56:	3b02      	subs	r3, #2
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d82b      	bhi.n	8009fb4 <ethernet_link_thread+0xd8>
 8009f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f64 <ethernet_link_thread+0x88>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	08009f75 	.word	0x08009f75
 8009f68:	08009f87 	.word	0x08009f87
 8009f6c:	08009f97 	.word	0x08009f97
 8009f70:	08009fa7 	.word	0x08009fa7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009f74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f78:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009f7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009f80:	2301      	movs	r3, #1
 8009f82:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009f84:	e017      	b.n	8009fb6 <ethernet_link_thread+0xda>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009f86:	2300      	movs	r3, #0
 8009f88:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009f8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009f90:	2301      	movs	r3, #1
 8009f92:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009f94:	e00f      	b.n	8009fb6 <ethernet_link_thread+0xda>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009f9a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009fa4:	e007      	b.n	8009fb6 <ethernet_link_thread+0xda>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009faa:	2300      	movs	r3, #0
 8009fac:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009fb2:	e000      	b.n	8009fb6 <ethernet_link_thread+0xda>
    default:
      break;
 8009fb4:	bf00      	nop
    }

    if(linkchanged)
 8009fb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d018      	beq.n	8009fee <ethernet_link_thread+0x112>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009fbc:	f107 0308 	add.w	r3, r7, #8
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4812      	ldr	r0, [pc, #72]	@ (800a00c <ethernet_link_thread+0x130>)
 8009fc4:	f7f9 fa9a 	bl	80034fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009fca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	480d      	ldr	r0, [pc, #52]	@ (800a00c <ethernet_link_thread+0x130>)
 8009fd8:	f7f9 fc64 	bl	80038a4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009fdc:	480b      	ldr	r0, [pc, #44]	@ (800a00c <ethernet_link_thread+0x130>)
 8009fde:	f7f8 fdfd 	bl	8002bdc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009fe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fe4:	f009 f9be 	bl	8013364 <netif_set_up>
      netif_set_link_up(netif);
 8009fe8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009fea:	f009 fa59 	bl	80134a0 <netif_set_link_up>
    }
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */
UNLOCK_TCPIP_CORE();
 8009fee:	4805      	ldr	r0, [pc, #20]	@ (800a004 <ethernet_link_thread+0x128>)
 8009ff0:	f013 fc8b 	bl	801d90a <sys_mutex_unlock>
osDelay(100);
 8009ff4:	2064      	movs	r0, #100	@ 0x64
 8009ff6:	f000 f9e5 	bl	800a3c4 <osDelay>
LOCK_TCPIP_CORE();
 8009ffa:	4802      	ldr	r0, [pc, #8]	@ (800a004 <ethernet_link_thread+0x128>)
 8009ffc:	f013 fc76 	bl	801d8ec <sys_mutex_lock>
continue;
 800a000:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a002:	e783      	b.n	8009f0c <ethernet_link_thread+0x30>
 800a004:	24010348 	.word	0x24010348
 800a008:	240006a0 	.word	0x240006a0
 800a00c:	240005b8 	.word	0x240005b8

0800a010 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af02      	add	r7, sp, #8
 800a016:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

	  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a018:	4812      	ldr	r0, [pc, #72]	@ (800a064 <HAL_ETH_RxAllocateCallback+0x54>)
 800a01a:	f008 ff17 	bl	8012e4c <memp_malloc_pool>
 800a01e:	60f8      	str	r0, [r7, #12]
	  if (p)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d014      	beq.n	800a050 <HAL_ETH_RxAllocateCallback+0x40>
	  {
	    /* Get the buff from the struct pbuf address. */
	    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f103 0220 	add.w	r2, r3, #32
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
	    p->custom_free_function = pbuf_free_custom;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a0d      	ldr	r2, [pc, #52]	@ (800a068 <HAL_ETH_RxAllocateCallback+0x58>)
 800a034:	611a      	str	r2, [r3, #16]
	    /* Initialize the struct pbuf.
	    * This must be performed whenever a buffer's allocated because it may be
	    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
	    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a03e:	9201      	str	r2, [sp, #4]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2241      	movs	r2, #65	@ 0x41
 800a046:	2100      	movs	r1, #0
 800a048:	2000      	movs	r0, #0
 800a04a:	f009 fc85 	bl	8013958 <pbuf_alloced_custom>
	  {
	    RxAllocStatus = RX_ALLOC_ERROR;
	    *buff = NULL;
	  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a04e:	e005      	b.n	800a05c <HAL_ETH_RxAllocateCallback+0x4c>
	    RxAllocStatus = RX_ALLOC_ERROR;
 800a050:	4b06      	ldr	r3, [pc, #24]	@ (800a06c <HAL_ETH_RxAllocateCallback+0x5c>)
 800a052:	2201      	movs	r2, #1
 800a054:	701a      	strb	r2, [r3, #0]
	    *buff = NULL;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
}
 800a05c:	bf00      	nop
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	08022704 	.word	0x08022704
 800a068:	08009c89 	.word	0x08009c89
 800a06c:	240005ac 	.word	0x240005ac

0800a070 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a070:	b480      	push	{r7}
 800a072:	b08d      	sub	sp, #52	@ 0x34
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	62bb      	str	r3, [r7, #40]	@ 0x28
	  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
	  struct pbuf *p = NULL;
 800a086:	2300      	movs	r3, #0
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  /* Get the struct pbuf from the buff address. */
	  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3b20      	subs	r3, #32
 800a08e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  p->next = NULL;
 800a090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
	  p->tot_len = 0;
 800a096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a098:	2200      	movs	r2, #0
 800a09a:	811a      	strh	r2, [r3, #8]
	  p->len = Length;
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	887a      	ldrh	r2, [r7, #2]
 800a0a0:	815a      	strh	r2, [r3, #10]

	  /* Chain the buffer. */
	  if (!*ppStart)
 800a0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <HAL_ETH_RxLinkCallback+0x42>
	  {
	    /* The first buffer of the packet. */
	    *ppStart = p;
 800a0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	e003      	b.n	800a0ba <HAL_ETH_RxLinkCallback+0x4a>
	  }
	  else
	  {
	    /* Chain the buffer to the end of the packet. */
	    (*ppEnd)->next = p;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0b8:	601a      	str	r2, [r3, #0]
	  }
	  *ppEnd  = p;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0be:	601a      	str	r2, [r3, #0]

	  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	   * set to its own length, plus the length of all the following pbufs in the chain. */
	  for (p = *ppStart; p != NULL; p = p->next)
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0c6:	e009      	b.n	800a0dc <HAL_ETH_RxLinkCallback+0x6c>
	  {
	    p->tot_len += Length;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ca:	891a      	ldrh	r2, [r3, #8]
 800a0cc:	887b      	ldrh	r3, [r7, #2]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d4:	811a      	strh	r2, [r3, #8]
	  for (p = *ppStart; p != NULL; p = p->next)
 800a0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f2      	bne.n	800a0c8 <HAL_ETH_RxLinkCallback+0x58>
	  }

	  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a0e2:	887b      	ldrh	r3, [r7, #2]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	623a      	str	r2, [r7, #32]
 800a0e8:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd1d      	ble.n	800a12c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	f003 021f 	and.w	r2, r3, #31
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a100:	f3bf 8f4f 	dsb	sy
}
 800a104:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a106:	4a0d      	ldr	r2, [pc, #52]	@ (800a13c <HAL_ETH_RxLinkCallback+0xcc>)
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	3320      	adds	r3, #32
 800a112:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	3b20      	subs	r3, #32
 800a118:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dcf2      	bgt.n	800a106 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800a120:	f3bf 8f4f 	dsb	sy
}
 800a124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a126:	f3bf 8f6f 	isb	sy
}
 800a12a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a12c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a12e:	bf00      	nop
 800a130:	3734      	adds	r7, #52	@ 0x34
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	e000ed00 	.word	0xe000ed00

0800a140 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

	  pbuf_free((struct pbuf *)buff);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f009 fdf1 	bl	8013d30 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <__NVIC_SetPriority>:
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	6039      	str	r1, [r7, #0]
 800a162:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	db0a      	blt.n	800a182 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	490c      	ldr	r1, [pc, #48]	@ (800a1a4 <__NVIC_SetPriority+0x4c>)
 800a172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a176:	0112      	lsls	r2, r2, #4
 800a178:	b2d2      	uxtb	r2, r2
 800a17a:	440b      	add	r3, r1
 800a17c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a180:	e00a      	b.n	800a198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	b2da      	uxtb	r2, r3
 800a186:	4908      	ldr	r1, [pc, #32]	@ (800a1a8 <__NVIC_SetPriority+0x50>)
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	f003 030f 	and.w	r3, r3, #15
 800a18e:	3b04      	subs	r3, #4
 800a190:	0112      	lsls	r2, r2, #4
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	440b      	add	r3, r1
 800a196:	761a      	strb	r2, [r3, #24]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	e000e100 	.word	0xe000e100
 800a1a8:	e000ed00 	.word	0xe000ed00

0800a1ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a1b0:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <SysTick_Handler+0x1c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a1b4:	f002 fd7a 	bl	800ccac <xTaskGetSchedulerState>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d001      	beq.n	800a1c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a1be:	f003 fc73 	bl	800daa8 <xPortSysTickHandler>
  }
}
 800a1c2:	bf00      	nop
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	e000e010 	.word	0xe000e010

0800a1cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	f06f 0004 	mvn.w	r0, #4
 800a1d6:	f7ff ffbf 	bl	800a158 <__NVIC_SetPriority>
#endif
}
 800a1da:	bf00      	nop
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e6:	f3ef 8305 	mrs	r3, IPSR
 800a1ea:	603b      	str	r3, [r7, #0]
  return(result);
 800a1ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1f2:	f06f 0305 	mvn.w	r3, #5
 800a1f6:	607b      	str	r3, [r7, #4]
 800a1f8:	e00c      	b.n	800a214 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a224 <osKernelInitialize+0x44>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d105      	bne.n	800a20e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a202:	4b08      	ldr	r3, [pc, #32]	@ (800a224 <osKernelInitialize+0x44>)
 800a204:	2201      	movs	r2, #1
 800a206:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a208:	2300      	movs	r3, #0
 800a20a:	607b      	str	r3, [r7, #4]
 800a20c:	e002      	b.n	800a214 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a214:	687b      	ldr	r3, [r7, #4]
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	240006c0 	.word	0x240006c0

0800a228 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22e:	f3ef 8305 	mrs	r3, IPSR
 800a232:	603b      	str	r3, [r7, #0]
  return(result);
 800a234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a23a:	f06f 0305 	mvn.w	r3, #5
 800a23e:	607b      	str	r3, [r7, #4]
 800a240:	e010      	b.n	800a264 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a242:	4b0b      	ldr	r3, [pc, #44]	@ (800a270 <osKernelStart+0x48>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d109      	bne.n	800a25e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a24a:	f7ff ffbf 	bl	800a1cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a24e:	4b08      	ldr	r3, [pc, #32]	@ (800a270 <osKernelStart+0x48>)
 800a250:	2202      	movs	r2, #2
 800a252:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a254:	f002 f896 	bl	800c384 <vTaskStartScheduler>
      stat = osOK;
 800a258:	2300      	movs	r3, #0
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	e002      	b.n	800a264 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295
 800a262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a264:	687b      	ldr	r3, [r7, #4]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	240006c0 	.word	0x240006c0

0800a274 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a27a:	f3ef 8305 	mrs	r3, IPSR
 800a27e:	603b      	str	r3, [r7, #0]
  return(result);
 800a280:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a286:	f002 f9a9 	bl	800c5dc <xTaskGetTickCountFromISR>
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	e002      	b.n	800a294 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a28e:	f002 f995 	bl	800c5bc <xTaskGetTickCount>
 800a292:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a294:	687b      	ldr	r3, [r7, #4]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b08e      	sub	sp, #56	@ 0x38
 800a2a2:	af04      	add	r7, sp, #16
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ae:	f3ef 8305 	mrs	r3, IPSR
 800a2b2:	617b      	str	r3, [r7, #20]
  return(result);
 800a2b4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d17f      	bne.n	800a3ba <osThreadNew+0x11c>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d07c      	beq.n	800a3ba <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a2c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2c6:	2318      	movs	r3, #24
 800a2c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d045      	beq.n	800a366 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <osThreadNew+0x4a>
        name = attr->name;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d008      	beq.n	800a30e <osThreadNew+0x70>
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	2b38      	cmp	r3, #56	@ 0x38
 800a300:	d805      	bhi.n	800a30e <osThreadNew+0x70>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <osThreadNew+0x74>
        return (NULL);
 800a30e:	2300      	movs	r3, #0
 800a310:	e054      	b.n	800a3bc <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	089b      	lsrs	r3, r3, #2
 800a320:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00e      	beq.n	800a348 <osThreadNew+0xaa>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2ba7      	cmp	r3, #167	@ 0xa7
 800a330:	d90a      	bls.n	800a348 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a336:	2b00      	cmp	r3, #0
 800a338:	d006      	beq.n	800a348 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <osThreadNew+0xaa>
        mem = 1;
 800a342:	2301      	movs	r3, #1
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	e010      	b.n	800a36a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10c      	bne.n	800a36a <osThreadNew+0xcc>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d108      	bne.n	800a36a <osThreadNew+0xcc>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d104      	bne.n	800a36a <osThreadNew+0xcc>
          mem = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	61bb      	str	r3, [r7, #24]
 800a364:	e001      	b.n	800a36a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d110      	bne.n	800a392 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a378:	9202      	str	r2, [sp, #8]
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	6a3a      	ldr	r2, [r7, #32]
 800a384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f001 fe08 	bl	800bf9c <xTaskCreateStatic>
 800a38c:	4603      	mov	r3, r0
 800a38e:	613b      	str	r3, [r7, #16]
 800a390:	e013      	b.n	800a3ba <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d110      	bne.n	800a3ba <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	f107 0310 	add.w	r3, r7, #16
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f001 fe56 	bl	800c05c <xTaskCreate>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d001      	beq.n	800a3ba <osThreadNew+0x11c>
            hTask = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3ba:	693b      	ldr	r3, [r7, #16]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3728      	adds	r7, #40	@ 0x28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3cc:	f3ef 8305 	mrs	r3, IPSR
 800a3d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <osDelay+0x1c>
    stat = osErrorISR;
 800a3d8:	f06f 0305 	mvn.w	r3, #5
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	e007      	b.n	800a3f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f001 ff94 	bl	800c318 <vTaskDelay>
    }
  }

  return (stat);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b088      	sub	sp, #32
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a406:	f3ef 8305 	mrs	r3, IPSR
 800a40a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a40c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d174      	bne.n	800a4fc <osMutexNew+0x102>
    if (attr != NULL) {
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d003      	beq.n	800a420 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	61bb      	str	r3, [r7, #24]
 800a41e:	e001      	b.n	800a424 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <osMutexNew+0x3a>
      rmtx = 1U;
 800a42e:	2301      	movs	r3, #1
 800a430:	617b      	str	r3, [r7, #20]
 800a432:	e001      	b.n	800a438 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	f003 0308 	and.w	r3, r3, #8
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d15c      	bne.n	800a4fc <osMutexNew+0x102>
      mem = -1;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d015      	beq.n	800a47a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d006      	beq.n	800a464 <osMutexNew+0x6a>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	2b4f      	cmp	r3, #79	@ 0x4f
 800a45c:	d902      	bls.n	800a464 <osMutexNew+0x6a>
          mem = 1;
 800a45e:	2301      	movs	r3, #1
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	e00c      	b.n	800a47e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d108      	bne.n	800a47e <osMutexNew+0x84>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <osMutexNew+0x84>
            mem = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	613b      	str	r3, [r7, #16]
 800a478:	e001      	b.n	800a47e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a47a:	2300      	movs	r3, #0
 800a47c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d112      	bne.n	800a4aa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	4619      	mov	r1, r3
 800a490:	2004      	movs	r0, #4
 800a492:	f000 fdd8 	bl	800b046 <xQueueCreateMutexStatic>
 800a496:	61f8      	str	r0, [r7, #28]
 800a498:	e016      	b.n	800a4c8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	f000 fdd0 	bl	800b046 <xQueueCreateMutexStatic>
 800a4a6:	61f8      	str	r0, [r7, #28]
 800a4a8:	e00e      	b.n	800a4c8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d004      	beq.n	800a4c0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a4b6:	2004      	movs	r0, #4
 800a4b8:	f000 fdad 	bl	800b016 <xQueueCreateMutex>
 800a4bc:	61f8      	str	r0, [r7, #28]
 800a4be:	e003      	b.n	800a4c8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	f000 fda8 	bl	800b016 <xQueueCreateMutex>
 800a4c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00c      	beq.n	800a4e8 <osMutexNew+0xee>
        if (attr != NULL) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <osMutexNew+0xe2>
          name = attr->name;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60fb      	str	r3, [r7, #12]
 800a4da:	e001      	b.n	800a4e0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a4e0:	68f9      	ldr	r1, [r7, #12]
 800a4e2:	69f8      	ldr	r0, [r7, #28]
 800a4e4:	f001 fcd2 	bl	800be8c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <osMutexNew+0x102>
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	f043 0301 	orr.w	r3, r3, #1
 800a4fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a4fc:	69fb      	ldr	r3, [r7, #28]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a506:	b580      	push	{r7, lr}
 800a508:	b086      	sub	sp, #24
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f023 0301 	bic.w	r3, r3, #1
 800a516:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f003 0301 	and.w	r3, r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a520:	2300      	movs	r3, #0
 800a522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a524:	f3ef 8305 	mrs	r3, IPSR
 800a528:	60bb      	str	r3, [r7, #8]
  return(result);
 800a52a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a530:	f06f 0305 	mvn.w	r3, #5
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	e02c      	b.n	800a592 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d103      	bne.n	800a546 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a53e:	f06f 0303 	mvn.w	r3, #3
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	e025      	b.n	800a592 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d011      	beq.n	800a570 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6938      	ldr	r0, [r7, #16]
 800a550:	f000 fdc9 	bl	800b0e6 <xQueueTakeMutexRecursive>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	d01b      	beq.n	800a592 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a560:	f06f 0301 	mvn.w	r3, #1
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	e014      	b.n	800a592 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a568:	f06f 0302 	mvn.w	r3, #2
 800a56c:	617b      	str	r3, [r7, #20]
 800a56e:	e010      	b.n	800a592 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6938      	ldr	r0, [r7, #16]
 800a574:	f001 f96e 	bl	800b854 <xQueueSemaphoreTake>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d009      	beq.n	800a592 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a584:	f06f 0301 	mvn.w	r3, #1
 800a588:	617b      	str	r3, [r7, #20]
 800a58a:	e002      	b.n	800a592 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a58c:	f06f 0302 	mvn.w	r3, #2
 800a590:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a592:	697b      	ldr	r3, [r7, #20]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5b8:	f3ef 8305 	mrs	r3, IPSR
 800a5bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <osMutexRelease+0x30>
    stat = osErrorISR;
 800a5c4:	f06f 0305 	mvn.w	r3, #5
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	e01f      	b.n	800a60c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a5d2:	f06f 0303 	mvn.w	r3, #3
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e018      	b.n	800a60c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d009      	beq.n	800a5f4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a5e0:	6938      	ldr	r0, [r7, #16]
 800a5e2:	f000 fd4b 	bl	800b07c <xQueueGiveMutexRecursive>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d00f      	beq.n	800a60c <osMutexRelease+0x70>
        stat = osErrorResource;
 800a5ec:	f06f 0302 	mvn.w	r3, #2
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e00b      	b.n	800a60c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	6938      	ldr	r0, [r7, #16]
 800a5fc:	f000 fe18 	bl	800b230 <xQueueGenericSend>
 800a600:	4603      	mov	r3, r0
 800a602:	2b01      	cmp	r3, #1
 800a604:	d002      	beq.n	800a60c <osMutexRelease+0x70>
        stat = osErrorResource;
 800a606:	f06f 0302 	mvn.w	r3, #2
 800a60a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a60c:	697b      	ldr	r3, [r7, #20]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a616:	b580      	push	{r7, lr}
 800a618:	b08a      	sub	sp, #40	@ 0x28
 800a61a:	af02      	add	r7, sp, #8
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a626:	f3ef 8305 	mrs	r3, IPSR
 800a62a:	613b      	str	r3, [r7, #16]
  return(result);
 800a62c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d175      	bne.n	800a71e <osSemaphoreNew+0x108>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d072      	beq.n	800a71e <osSemaphoreNew+0x108>
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d86e      	bhi.n	800a71e <osSemaphoreNew+0x108>
    mem = -1;
 800a640:	f04f 33ff 	mov.w	r3, #4294967295
 800a644:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d015      	beq.n	800a678 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d006      	beq.n	800a662 <osSemaphoreNew+0x4c>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b4f      	cmp	r3, #79	@ 0x4f
 800a65a:	d902      	bls.n	800a662 <osSemaphoreNew+0x4c>
        mem = 1;
 800a65c:	2301      	movs	r3, #1
 800a65e:	61bb      	str	r3, [r7, #24]
 800a660:	e00c      	b.n	800a67c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d108      	bne.n	800a67c <osSemaphoreNew+0x66>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <osSemaphoreNew+0x66>
          mem = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	61bb      	str	r3, [r7, #24]
 800a676:	e001      	b.n	800a67c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a682:	d04c      	beq.n	800a71e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d128      	bne.n	800a6dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d10a      	bne.n	800a6a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	2203      	movs	r2, #3
 800a696:	9200      	str	r2, [sp, #0]
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	2001      	movs	r0, #1
 800a69e:	f000 fbc5 	bl	800ae2c <xQueueGenericCreateStatic>
 800a6a2:	61f8      	str	r0, [r7, #28]
 800a6a4:	e005      	b.n	800a6b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	f000 fc3b 	bl	800af26 <xQueueGenericCreate>
 800a6b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d022      	beq.n	800a6fe <osSemaphoreNew+0xe8>
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d01f      	beq.n	800a6fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	69f8      	ldr	r0, [r7, #28]
 800a6c6:	f000 fdb3 	bl	800b230 <xQueueGenericSend>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d016      	beq.n	800a6fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a6d0:	69f8      	ldr	r0, [r7, #28]
 800a6d2:	f001 fa8f 	bl	800bbf4 <vQueueDelete>
            hSemaphore = NULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	61fb      	str	r3, [r7, #28]
 800a6da:	e010      	b.n	800a6fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d108      	bne.n	800a6f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fd32 	bl	800b154 <xQueueCreateCountingSemaphoreStatic>
 800a6f0:	61f8      	str	r0, [r7, #28]
 800a6f2:	e004      	b.n	800a6fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 fd65 	bl	800b1c6 <xQueueCreateCountingSemaphore>
 800a6fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00c      	beq.n	800a71e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	e001      	b.n	800a716 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a716:	6979      	ldr	r1, [r7, #20]
 800a718:	69f8      	ldr	r0, [r7, #28]
 800a71a:	f001 fbb7 	bl	800be8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a71e:	69fb      	ldr	r3, [r7, #28]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3720      	adds	r7, #32
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a736:	2300      	movs	r3, #0
 800a738:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d103      	bne.n	800a748 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a740:	f06f 0303 	mvn.w	r3, #3
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	e039      	b.n	800a7bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a748:	f3ef 8305 	mrs	r3, IPSR
 800a74c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a74e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a750:	2b00      	cmp	r3, #0
 800a752:	d022      	beq.n	800a79a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a75a:	f06f 0303 	mvn.w	r3, #3
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e02c      	b.n	800a7bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a762:	2300      	movs	r3, #0
 800a764:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a766:	f107 0308 	add.w	r3, r7, #8
 800a76a:	461a      	mov	r2, r3
 800a76c:	2100      	movs	r1, #0
 800a76e:	6938      	ldr	r0, [r7, #16]
 800a770:	f001 f980 	bl	800ba74 <xQueueReceiveFromISR>
 800a774:	4603      	mov	r3, r0
 800a776:	2b01      	cmp	r3, #1
 800a778:	d003      	beq.n	800a782 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a77a:	f06f 0302 	mvn.w	r3, #2
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	e01c      	b.n	800a7bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d019      	beq.n	800a7bc <osSemaphoreAcquire+0x94>
 800a788:	4b0f      	ldr	r3, [pc, #60]	@ (800a7c8 <osSemaphoreAcquire+0xa0>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	e010      	b.n	800a7bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6938      	ldr	r0, [r7, #16]
 800a79e:	f001 f859 	bl	800b854 <xQueueSemaphoreTake>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d009      	beq.n	800a7bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a7ae:	f06f 0301 	mvn.w	r3, #1
 800a7b2:	617b      	str	r3, [r7, #20]
 800a7b4:	e002      	b.n	800a7bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a7b6:	f06f 0302 	mvn.w	r3, #2
 800a7ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a7bc:	697b      	ldr	r3, [r7, #20]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d103      	bne.n	800a7ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a7e2:	f06f 0303 	mvn.w	r3, #3
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e02c      	b.n	800a844 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ea:	f3ef 8305 	mrs	r3, IPSR
 800a7ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d01a      	beq.n	800a82c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a7fa:	f107 0308 	add.w	r3, r7, #8
 800a7fe:	4619      	mov	r1, r3
 800a800:	6938      	ldr	r0, [r7, #16]
 800a802:	f000 feb5 	bl	800b570 <xQueueGiveFromISR>
 800a806:	4603      	mov	r3, r0
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d003      	beq.n	800a814 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a80c:	f06f 0302 	mvn.w	r3, #2
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	e017      	b.n	800a844 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d014      	beq.n	800a844 <osSemaphoreRelease+0x78>
 800a81a:	4b0d      	ldr	r3, [pc, #52]	@ (800a850 <osSemaphoreRelease+0x84>)
 800a81c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	e00b      	b.n	800a844 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a82c:	2300      	movs	r3, #0
 800a82e:	2200      	movs	r2, #0
 800a830:	2100      	movs	r1, #0
 800a832:	6938      	ldr	r0, [r7, #16]
 800a834:	f000 fcfc 	bl	800b230 <xQueueGenericSend>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d002      	beq.n	800a844 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a83e:	f06f 0302 	mvn.w	r3, #2
 800a842:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a844:	697b      	ldr	r3, [r7, #20]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	e000ed04 	.word	0xe000ed04

0800a854 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a860:	f3ef 8305 	mrs	r3, IPSR
 800a864:	60fb      	str	r3, [r7, #12]
  return(result);
 800a866:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a86c:	f06f 0305 	mvn.w	r3, #5
 800a870:	617b      	str	r3, [r7, #20]
 800a872:	e00e      	b.n	800a892 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d103      	bne.n	800a882 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a87a:	f06f 0303 	mvn.w	r3, #3
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	e007      	b.n	800a892 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a882:	6938      	ldr	r0, [r7, #16]
 800a884:	f001 fb2c 	bl	800bee0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a888:	2300      	movs	r3, #0
 800a88a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a88c:	6938      	ldr	r0, [r7, #16]
 800a88e:	f001 f9b1 	bl	800bbf4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a892:	697b      	ldr	r3, [r7, #20]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3718      	adds	r7, #24
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	@ 0x28
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ac:	f3ef 8305 	mrs	r3, IPSR
 800a8b0:	613b      	str	r3, [r7, #16]
  return(result);
 800a8b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d15f      	bne.n	800a978 <osMessageQueueNew+0xdc>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d05c      	beq.n	800a978 <osMessageQueueNew+0xdc>
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d059      	beq.n	800a978 <osMessageQueueNew+0xdc>
    mem = -1;
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d029      	beq.n	800a924 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d012      	beq.n	800a8fe <osMessageQueueNew+0x62>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b4f      	cmp	r3, #79	@ 0x4f
 800a8de:	d90e      	bls.n	800a8fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	695a      	ldr	r2, [r3, #20]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	fb01 f303 	mul.w	r3, r1, r3
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d302      	bcc.n	800a8fe <osMessageQueueNew+0x62>
        mem = 1;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	61bb      	str	r3, [r7, #24]
 800a8fc:	e014      	b.n	800a928 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d110      	bne.n	800a928 <osMessageQueueNew+0x8c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10c      	bne.n	800a928 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a912:	2b00      	cmp	r3, #0
 800a914:	d108      	bne.n	800a928 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <osMessageQueueNew+0x8c>
          mem = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	e001      	b.n	800a928 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d10b      	bne.n	800a946 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	2100      	movs	r1, #0
 800a938:	9100      	str	r1, [sp, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fa75 	bl	800ae2c <xQueueGenericCreateStatic>
 800a942:	61f8      	str	r0, [r7, #28]
 800a944:	e008      	b.n	800a958 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d105      	bne.n	800a958 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a94c:	2200      	movs	r2, #0
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fae8 	bl	800af26 <xQueueGenericCreate>
 800a956:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00c      	beq.n	800a978 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	e001      	b.n	800a970 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a96c:	2300      	movs	r3, #0
 800a96e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a970:	6979      	ldr	r1, [r7, #20]
 800a972:	69f8      	ldr	r0, [r7, #28]
 800a974:	f001 fa8a 	bl	800be8c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a978:	69fb      	ldr	r3, [r7, #28]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a998:	2300      	movs	r3, #0
 800a99a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a99c:	f3ef 8305 	mrs	r3, IPSR
 800a9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a9a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d028      	beq.n	800a9fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d005      	beq.n	800a9ba <osMessageQueuePut+0x36>
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <osMessageQueuePut+0x36>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a9ba:	f06f 0303 	mvn.w	r3, #3
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e038      	b.n	800aa34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a9c6:	f107 0210 	add.w	r2, r7, #16
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	69b8      	ldr	r0, [r7, #24]
 800a9d0:	f000 fd30 	bl	800b434 <xQueueGenericSendFromISR>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d003      	beq.n	800a9e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a9da:	f06f 0302 	mvn.w	r3, #2
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e028      	b.n	800aa34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d025      	beq.n	800aa34 <osMessageQueuePut+0xb0>
 800a9e8:	4b15      	ldr	r3, [pc, #84]	@ (800aa40 <osMessageQueuePut+0xbc>)
 800a9ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	e01c      	b.n	800aa34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <osMessageQueuePut+0x82>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800aa06:	f06f 0303 	mvn.w	r3, #3
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	e012      	b.n	800aa34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa0e:	2300      	movs	r3, #0
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	69b8      	ldr	r0, [r7, #24]
 800aa16:	f000 fc0b 	bl	800b230 <xQueueGenericSend>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d009      	beq.n	800aa34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800aa26:	f06f 0301 	mvn.w	r3, #1
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	e002      	b.n	800aa34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800aa2e:	f06f 0302 	mvn.w	r3, #2
 800aa32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa34:	69fb      	ldr	r3, [r7, #28]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa5a:	f3ef 8305 	mrs	r3, IPSR
 800aa5e:	617b      	str	r3, [r7, #20]
  return(result);
 800aa60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d028      	beq.n	800aab8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <osMessageQueueGet+0x34>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <osMessageQueueGet+0x34>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aa78:	f06f 0303 	mvn.w	r3, #3
 800aa7c:	61fb      	str	r3, [r7, #28]
 800aa7e:	e037      	b.n	800aaf0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa84:	f107 0310 	add.w	r3, r7, #16
 800aa88:	461a      	mov	r2, r3
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	69b8      	ldr	r0, [r7, #24]
 800aa8e:	f000 fff1 	bl	800ba74 <xQueueReceiveFromISR>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d003      	beq.n	800aaa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aa98:	f06f 0302 	mvn.w	r3, #2
 800aa9c:	61fb      	str	r3, [r7, #28]
 800aa9e:	e027      	b.n	800aaf0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d024      	beq.n	800aaf0 <osMessageQueueGet+0xac>
 800aaa6:	4b15      	ldr	r3, [pc, #84]	@ (800aafc <osMessageQueueGet+0xb8>)
 800aaa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	e01b      	b.n	800aaf0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <osMessageQueueGet+0x80>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d103      	bne.n	800aacc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aac4:	f06f 0303 	mvn.w	r3, #3
 800aac8:	61fb      	str	r3, [r7, #28]
 800aaca:	e011      	b.n	800aaf0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	69b8      	ldr	r0, [r7, #24]
 800aad2:	f000 fddd 	bl	800b690 <xQueueReceive>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d009      	beq.n	800aaf0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aae2:	f06f 0301 	mvn.w	r3, #1
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e002      	b.n	800aaf0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aaea:	f06f 0302 	mvn.w	r3, #2
 800aaee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aaf0:	69fb      	ldr	r3, [r7, #28]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3720      	adds	r7, #32
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <osMessageQueueGetCount+0x18>
    count = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	e00e      	b.n	800ab36 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab18:	f3ef 8305 	mrs	r3, IPSR
 800ab1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800ab24:	6938      	ldr	r0, [r7, #16]
 800ab26:	f001 f846 	bl	800bbb6 <uxQueueMessagesWaitingFromISR>
 800ab2a:	6178      	str	r0, [r7, #20]
 800ab2c:	e003      	b.n	800ab36 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ab2e:	6938      	ldr	r0, [r7, #16]
 800ab30:	f001 f822 	bl	800bb78 <uxQueueMessagesWaiting>
 800ab34:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800ab36:	697b      	ldr	r3, [r7, #20]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab4c:	f3ef 8305 	mrs	r3, IPSR
 800ab50:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab52:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800ab58:	f06f 0305 	mvn.w	r3, #5
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	e00e      	b.n	800ab7e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d103      	bne.n	800ab6e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800ab66:	f06f 0303 	mvn.w	r3, #3
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	e007      	b.n	800ab7e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800ab6e:	6938      	ldr	r0, [r7, #16]
 800ab70:	f001 f9b6 	bl	800bee0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800ab78:	6938      	ldr	r0, [r7, #16]
 800ab7a:	f001 f83b 	bl	800bbf4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ab7e:	697b      	ldr	r3, [r7, #20]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3718      	adds	r7, #24
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	4a07      	ldr	r2, [pc, #28]	@ (800abb4 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	4a06      	ldr	r2, [pc, #24]	@ (800abb8 <vApplicationGetIdleTaskMemory+0x30>)
 800ab9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aba6:	601a      	str	r2, [r3, #0]
}
 800aba8:	bf00      	nop
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	240006c4 	.word	0x240006c4
 800abb8:	2400076c 	.word	0x2400076c

0800abbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4a07      	ldr	r2, [pc, #28]	@ (800abe8 <vApplicationGetTimerTaskMemory+0x2c>)
 800abcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4a06      	ldr	r2, [pc, #24]	@ (800abec <vApplicationGetTimerTaskMemory+0x30>)
 800abd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800abda:	601a      	str	r2, [r3, #0]
}
 800abdc:	bf00      	nop
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	24000f6c 	.word	0x24000f6c
 800abec:	24001014 	.word	0x24001014

0800abf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f103 0208 	add.w	r2, r3, #8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f04f 32ff 	mov.w	r2, #4294967295
 800ac08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f103 0208 	add.w	r2, r3, #8
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f103 0208 	add.w	r2, r3, #8
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac3e:	bf00      	nop
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b085      	sub	sp, #20
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	601a      	str	r2, [r3, #0]
}
 800ac86:	bf00      	nop
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca8:	d103      	bne.n	800acb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	60fb      	str	r3, [r7, #12]
 800acb0:	e00c      	b.n	800accc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3308      	adds	r3, #8
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e002      	b.n	800acc0 <vListInsert+0x2e>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d2f6      	bcs.n	800acba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	601a      	str	r2, [r3, #0]
}
 800acf8:	bf00      	nop
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	6892      	ldr	r2, [r2, #8]
 800ad1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	689b      	ldr	r3, [r3, #8]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	6852      	ldr	r2, [r2, #4]
 800ad24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d103      	bne.n	800ad38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	1e5a      	subs	r2, r3, #1
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10b      	bne.n	800ad84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	e7fd      	b.n	800ad80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ad84:	f002 fe00 	bl	800d988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ad94:	fb01 f303 	mul.w	r3, r1, r3
 800ad98:	441a      	add	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb4:	3b01      	subs	r3, #1
 800adb6:	68f9      	ldr	r1, [r7, #12]
 800adb8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800adba:	fb01 f303 	mul.w	r3, r1, r3
 800adbe:	441a      	add	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	22ff      	movs	r2, #255	@ 0xff
 800adc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	22ff      	movs	r2, #255	@ 0xff
 800add0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d114      	bne.n	800ae04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01a      	beq.n	800ae18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3310      	adds	r3, #16
 800ade6:	4618      	mov	r0, r3
 800ade8:	f001 fd8a 	bl	800c900 <xTaskRemoveFromEventList>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d012      	beq.n	800ae18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800adf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <xQueueGenericReset+0xd0>)
 800adf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	e009      	b.n	800ae18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	3310      	adds	r3, #16
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff fef1 	bl	800abf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3324      	adds	r3, #36	@ 0x24
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff feec 	bl	800abf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae18:	f002 fde8 	bl	800d9ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae1c:	2301      	movs	r3, #1
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	e000ed04 	.word	0xe000ed04

0800ae2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	@ 0x38
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <xQueueGenericCreateStatic+0x56>
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <xQueueGenericCreateStatic+0x5a>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <xQueueGenericCreateStatic+0x5c>
 800ae86:	2300      	movs	r3, #0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10b      	bne.n	800aea4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	623b      	str	r3, [r7, #32]
}
 800ae9e:	bf00      	nop
 800aea0:	bf00      	nop
 800aea2:	e7fd      	b.n	800aea0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d102      	bne.n	800aeb0 <xQueueGenericCreateStatic+0x84>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <xQueueGenericCreateStatic+0x88>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e000      	b.n	800aeb6 <xQueueGenericCreateStatic+0x8a>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d10b      	bne.n	800aed2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	61fb      	str	r3, [r7, #28]
}
 800aecc:	bf00      	nop
 800aece:	bf00      	nop
 800aed0:	e7fd      	b.n	800aece <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aed2:	2350      	movs	r3, #80	@ 0x50
 800aed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b50      	cmp	r3, #80	@ 0x50
 800aeda:	d00b      	beq.n	800aef4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	61bb      	str	r3, [r7, #24]
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	e7fd      	b.n	800aef0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aef4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00d      	beq.n	800af1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	4613      	mov	r3, r2
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	68b9      	ldr	r1, [r7, #8]
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f000 f840 	bl	800af9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800af1e:	4618      	mov	r0, r3
 800af20:	3730      	adds	r7, #48	@ 0x30
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af26:	b580      	push	{r7, lr}
 800af28:	b08a      	sub	sp, #40	@ 0x28
 800af2a:	af02      	add	r7, sp, #8
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	4613      	mov	r3, r2
 800af32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10b      	bne.n	800af52 <xQueueGenericCreate+0x2c>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	613b      	str	r3, [r7, #16]
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	e7fd      	b.n	800af4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	3350      	adds	r3, #80	@ 0x50
 800af60:	4618      	mov	r0, r3
 800af62:	f002 fe33 	bl	800dbcc <pvPortMalloc>
 800af66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d011      	beq.n	800af92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	3350      	adds	r3, #80	@ 0x50
 800af76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af80:	79fa      	ldrb	r2, [r7, #7]
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	4613      	mov	r3, r2
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	68b9      	ldr	r1, [r7, #8]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 f805 	bl	800af9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af92:	69bb      	ldr	r3, [r7, #24]
	}
 800af94:	4618      	mov	r0, r3
 800af96:	3720      	adds	r7, #32
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	e002      	b.n	800afbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afca:	2101      	movs	r1, #1
 800afcc:	69b8      	ldr	r0, [r7, #24]
 800afce:	f7ff fec3 	bl	800ad58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	78fa      	ldrb	r2, [r7, #3]
 800afd6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00e      	beq.n	800b00e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b002:	2300      	movs	r3, #0
 800b004:	2200      	movs	r2, #0
 800b006:	2100      	movs	r1, #0
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f911 	bl	800b230 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	4603      	mov	r3, r0
 800b01e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b020:	2301      	movs	r3, #1
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	2300      	movs	r3, #0
 800b026:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	461a      	mov	r2, r3
 800b02c:	6939      	ldr	r1, [r7, #16]
 800b02e:	6978      	ldr	r0, [r7, #20]
 800b030:	f7ff ff79 	bl	800af26 <xQueueGenericCreate>
 800b034:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff ffd3 	bl	800afe2 <prvInitialiseMutex>

		return xNewQueue;
 800b03c:	68fb      	ldr	r3, [r7, #12]
	}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b046:	b580      	push	{r7, lr}
 800b048:	b088      	sub	sp, #32
 800b04a:	af02      	add	r7, sp, #8
 800b04c:	4603      	mov	r3, r0
 800b04e:	6039      	str	r1, [r7, #0]
 800b050:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b052:	2301      	movs	r3, #1
 800b054:	617b      	str	r3, [r7, #20]
 800b056:	2300      	movs	r3, #0
 800b058:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b05a:	79fb      	ldrb	r3, [r7, #7]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2200      	movs	r2, #0
 800b062:	6939      	ldr	r1, [r7, #16]
 800b064:	6978      	ldr	r0, [r7, #20]
 800b066:	f7ff fee1 	bl	800ae2c <xQueueGenericCreateStatic>
 800b06a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7ff ffb8 	bl	800afe2 <prvInitialiseMutex>

		return xNewQueue;
 800b072:	68fb      	ldr	r3, [r7, #12]
	}
 800b074:	4618      	mov	r0, r3
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b07c:	b590      	push	{r4, r7, lr}
 800b07e:	b087      	sub	sp, #28
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10b      	bne.n	800b0a6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	60fb      	str	r3, [r7, #12]
}
 800b0a0:	bf00      	nop
 800b0a2:	bf00      	nop
 800b0a4:	e7fd      	b.n	800b0a2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	689c      	ldr	r4, [r3, #8]
 800b0aa:	f001 fdef 	bl	800cc8c <xTaskGetCurrentTaskHandle>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	429c      	cmp	r4, r3
 800b0b2:	d111      	bne.n	800b0d8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	1e5a      	subs	r2, r3, #1
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d105      	bne.n	800b0d2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	6938      	ldr	r0, [r7, #16]
 800b0ce:	f000 f8af 	bl	800b230 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	e001      	b.n	800b0dc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b0dc:	697b      	ldr	r3, [r7, #20]
	}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	371c      	adds	r7, #28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd90      	pop	{r4, r7, pc}

0800b0e6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b0e6:	b590      	push	{r4, r7, lr}
 800b0e8:	b087      	sub	sp, #28
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d10b      	bne.n	800b112 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	60fb      	str	r3, [r7, #12]
}
 800b10c:	bf00      	nop
 800b10e:	bf00      	nop
 800b110:	e7fd      	b.n	800b10e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	689c      	ldr	r4, [r3, #8]
 800b116:	f001 fdb9 	bl	800cc8c <xTaskGetCurrentTaskHandle>
 800b11a:	4603      	mov	r3, r0
 800b11c:	429c      	cmp	r4, r3
 800b11e:	d107      	bne.n	800b130 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b12a:	2301      	movs	r3, #1
 800b12c:	617b      	str	r3, [r7, #20]
 800b12e:	e00c      	b.n	800b14a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6938      	ldr	r0, [r7, #16]
 800b134:	f000 fb8e 	bl	800b854 <xQueueSemaphoreTake>
 800b138:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d004      	beq.n	800b14a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b14a:	697b      	ldr	r3, [r7, #20]
	}
 800b14c:	4618      	mov	r0, r3
 800b14e:	371c      	adds	r7, #28
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}

0800b154 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08a      	sub	sp, #40	@ 0x28
 800b158:	af02      	add	r7, sp, #8
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10b      	bne.n	800b17e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	61bb      	str	r3, [r7, #24]
}
 800b178:	bf00      	nop
 800b17a:	bf00      	nop
 800b17c:	e7fd      	b.n	800b17a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	429a      	cmp	r2, r3
 800b184:	d90b      	bls.n	800b19e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	617b      	str	r3, [r7, #20]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b19e:	2302      	movs	r3, #2
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff fe3f 	bl	800ae2c <xQueueGenericCreateStatic>
 800b1ae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
	}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b086      	sub	sp, #24
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10b      	bne.n	800b1ee <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	613b      	str	r3, [r7, #16]
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	e7fd      	b.n	800b1ea <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d90b      	bls.n	800b20e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60fb      	str	r3, [r7, #12]
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	e7fd      	b.n	800b20a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b20e:	2202      	movs	r2, #2
 800b210:	2100      	movs	r1, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff fe87 	bl	800af26 <xQueueGenericCreate>
 800b218:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b226:	697b      	ldr	r3, [r7, #20]
	}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b08e      	sub	sp, #56	@ 0x38
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b23e:	2300      	movs	r3, #0
 800b240:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10b      	bne.n	800b264 <xQueueGenericSend+0x34>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b25e:	bf00      	nop
 800b260:	bf00      	nop
 800b262:	e7fd      	b.n	800b260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d103      	bne.n	800b272 <xQueueGenericSend+0x42>
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <xQueueGenericSend+0x46>
 800b272:	2301      	movs	r3, #1
 800b274:	e000      	b.n	800b278 <xQueueGenericSend+0x48>
 800b276:	2300      	movs	r3, #0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10b      	bne.n	800b294 <xQueueGenericSend+0x64>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b28e:	bf00      	nop
 800b290:	bf00      	nop
 800b292:	e7fd      	b.n	800b290 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d103      	bne.n	800b2a2 <xQueueGenericSend+0x72>
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d101      	bne.n	800b2a6 <xQueueGenericSend+0x76>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e000      	b.n	800b2a8 <xQueueGenericSend+0x78>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10b      	bne.n	800b2c4 <xQueueGenericSend+0x94>
	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b0:	f383 8811 	msr	BASEPRI, r3
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	623b      	str	r3, [r7, #32]
}
 800b2be:	bf00      	nop
 800b2c0:	bf00      	nop
 800b2c2:	e7fd      	b.n	800b2c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2c4:	f001 fcf2 	bl	800ccac <xTaskGetSchedulerState>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d102      	bne.n	800b2d4 <xQueueGenericSend+0xa4>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <xQueueGenericSend+0xa8>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e000      	b.n	800b2da <xQueueGenericSend+0xaa>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10b      	bne.n	800b2f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	61fb      	str	r3, [r7, #28]
}
 800b2f0:	bf00      	nop
 800b2f2:	bf00      	nop
 800b2f4:	e7fd      	b.n	800b2f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2f6:	f002 fb47 	bl	800d988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b302:	429a      	cmp	r2, r3
 800b304:	d302      	bcc.n	800b30c <xQueueGenericSend+0xdc>
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d129      	bne.n	800b360 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b312:	f000 fcab 	bl	800bc6c <prvCopyDataToQueue>
 800b316:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d010      	beq.n	800b342 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b322:	3324      	adds	r3, #36	@ 0x24
 800b324:	4618      	mov	r0, r3
 800b326:	f001 faeb 	bl	800c900 <xTaskRemoveFromEventList>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d013      	beq.n	800b358 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b330:	4b3f      	ldr	r3, [pc, #252]	@ (800b430 <xQueueGenericSend+0x200>)
 800b332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	e00a      	b.n	800b358 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b344:	2b00      	cmp	r3, #0
 800b346:	d007      	beq.n	800b358 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b348:	4b39      	ldr	r3, [pc, #228]	@ (800b430 <xQueueGenericSend+0x200>)
 800b34a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b34e:	601a      	str	r2, [r3, #0]
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b358:	f002 fb48 	bl	800d9ec <vPortExitCritical>
				return pdPASS;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e063      	b.n	800b428 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d103      	bne.n	800b36e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b366:	f002 fb41 	bl	800d9ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	e05c      	b.n	800b428 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b370:	2b00      	cmp	r3, #0
 800b372:	d106      	bne.n	800b382 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	4618      	mov	r0, r3
 800b37a:	f001 fb25 	bl	800c9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b37e:	2301      	movs	r3, #1
 800b380:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b382:	f002 fb33 	bl	800d9ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b386:	f001 f86d 	bl	800c464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b38a:	f002 fafd 	bl	800d988 <vPortEnterCritical>
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b394:	b25b      	sxtb	r3, r3
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d103      	bne.n	800b3a4 <xQueueGenericSend+0x174>
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b0:	d103      	bne.n	800b3ba <xQueueGenericSend+0x18a>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3ba:	f002 fb17 	bl	800d9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3be:	1d3a      	adds	r2, r7, #4
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f001 fb14 	bl	800c9f4 <xTaskCheckForTimeOut>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d124      	bne.n	800b41c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b3d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3d4:	f000 fd42 	bl	800be5c <prvIsQueueFull>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d018      	beq.n	800b410 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	3310      	adds	r3, #16
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f001 fa38 	bl	800c85c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b3ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3ee:	f000 fccd 	bl	800bd8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b3f2:	f001 f845 	bl	800c480 <xTaskResumeAll>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f47f af7c 	bne.w	800b2f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b3fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b430 <xQueueGenericSend+0x200>)
 800b400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	e772      	b.n	800b2f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b412:	f000 fcbb 	bl	800bd8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b416:	f001 f833 	bl	800c480 <xTaskResumeAll>
 800b41a:	e76c      	b.n	800b2f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b41c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b41e:	f000 fcb5 	bl	800bd8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b422:	f001 f82d 	bl	800c480 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3738      	adds	r7, #56	@ 0x38
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b090      	sub	sp, #64	@ 0x40
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10b      	bne.n	800b464 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	e7fd      	b.n	800b460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d103      	bne.n	800b472 <xQueueGenericSendFromISR+0x3e>
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <xQueueGenericSendFromISR+0x42>
 800b472:	2301      	movs	r3, #1
 800b474:	e000      	b.n	800b478 <xQueueGenericSendFromISR+0x44>
 800b476:	2300      	movs	r3, #0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10b      	bne.n	800b494 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b48e:	bf00      	nop
 800b490:	bf00      	nop
 800b492:	e7fd      	b.n	800b490 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b02      	cmp	r3, #2
 800b498:	d103      	bne.n	800b4a2 <xQueueGenericSendFromISR+0x6e>
 800b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d101      	bne.n	800b4a6 <xQueueGenericSendFromISR+0x72>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <xQueueGenericSendFromISR+0x74>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10b      	bne.n	800b4c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	623b      	str	r3, [r7, #32]
}
 800b4be:	bf00      	nop
 800b4c0:	bf00      	nop
 800b4c2:	e7fd      	b.n	800b4c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4c4:	f002 fb40 	bl	800db48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b4c8:	f3ef 8211 	mrs	r2, BASEPRI
 800b4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	61fa      	str	r2, [r7, #28]
 800b4de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b4e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d302      	bcc.n	800b4f6 <xQueueGenericSendFromISR+0xc2>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d12f      	bne.n	800b556 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b504:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	68b9      	ldr	r1, [r7, #8]
 800b50a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b50c:	f000 fbae 	bl	800bc6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b510:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d112      	bne.n	800b540 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d016      	beq.n	800b550 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b524:	3324      	adds	r3, #36	@ 0x24
 800b526:	4618      	mov	r0, r3
 800b528:	f001 f9ea 	bl	800c900 <xTaskRemoveFromEventList>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00e      	beq.n	800b550 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e007      	b.n	800b550 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b540:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b544:	3301      	adds	r3, #1
 800b546:	b2db      	uxtb	r3, r3
 800b548:	b25a      	sxtb	r2, r3
 800b54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b550:	2301      	movs	r3, #1
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b554:	e001      	b.n	800b55a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b564:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3740      	adds	r7, #64	@ 0x40
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b08e      	sub	sp, #56	@ 0x38
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	623b      	str	r3, [r7, #32]
}
 800b596:	bf00      	nop
 800b598:	bf00      	nop
 800b59a:	e7fd      	b.n	800b598 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00b      	beq.n	800b5bc <xQueueGiveFromISR+0x4c>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	61fb      	str	r3, [r7, #28]
}
 800b5b6:	bf00      	nop
 800b5b8:	bf00      	nop
 800b5ba:	e7fd      	b.n	800b5b8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d103      	bne.n	800b5cc <xQueueGiveFromISR+0x5c>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <xQueueGiveFromISR+0x60>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e000      	b.n	800b5d2 <xQueueGiveFromISR+0x62>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10b      	bne.n	800b5ee <xQueueGiveFromISR+0x7e>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	61bb      	str	r3, [r7, #24]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5ee:	f002 faab 	bl	800db48 <vPortValidateInterruptPriority>
	__asm volatile
 800b5f2:	f3ef 8211 	mrs	r2, BASEPRI
 800b5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	617a      	str	r2, [r7, #20]
 800b608:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b60a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b612:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d22b      	bcs.n	800b676 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b620:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b630:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b638:	d112      	bne.n	800b660 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d016      	beq.n	800b670 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	3324      	adds	r3, #36	@ 0x24
 800b646:	4618      	mov	r0, r3
 800b648:	f001 f95a 	bl	800c900 <xTaskRemoveFromEventList>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00e      	beq.n	800b670 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00b      	beq.n	800b670 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2201      	movs	r2, #1
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	e007      	b.n	800b670 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b664:	3301      	adds	r3, #1
 800b666:	b2db      	uxtb	r3, r3
 800b668:	b25a      	sxtb	r2, r3
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b670:	2301      	movs	r3, #1
 800b672:	637b      	str	r3, [r7, #52]	@ 0x34
 800b674:	e001      	b.n	800b67a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b676:	2300      	movs	r3, #0
 800b678:	637b      	str	r3, [r7, #52]	@ 0x34
 800b67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f383 8811 	msr	BASEPRI, r3
}
 800b684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3738      	adds	r7, #56	@ 0x38
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b08c      	sub	sp, #48	@ 0x30
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10b      	bne.n	800b6c2 <xQueueReceive+0x32>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	623b      	str	r3, [r7, #32]
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	e7fd      	b.n	800b6be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <xQueueReceive+0x40>
 800b6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <xQueueReceive+0x44>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e000      	b.n	800b6d6 <xQueueReceive+0x46>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10b      	bne.n	800b6f2 <xQueueReceive+0x62>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	61fb      	str	r3, [r7, #28]
}
 800b6ec:	bf00      	nop
 800b6ee:	bf00      	nop
 800b6f0:	e7fd      	b.n	800b6ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6f2:	f001 fadb 	bl	800ccac <xTaskGetSchedulerState>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <xQueueReceive+0x72>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <xQueueReceive+0x76>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <xQueueReceive+0x78>
 800b706:	2300      	movs	r3, #0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10b      	bne.n	800b724 <xQueueReceive+0x94>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	61bb      	str	r3, [r7, #24]
}
 800b71e:	bf00      	nop
 800b720:	bf00      	nop
 800b722:	e7fd      	b.n	800b720 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b724:	f002 f930 	bl	800d988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01f      	beq.n	800b774 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b734:	68b9      	ldr	r1, [r7, #8]
 800b736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b738:	f000 fb02 	bl	800bd40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	1e5a      	subs	r2, r3, #1
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00f      	beq.n	800b76c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b74e:	3310      	adds	r3, #16
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f8d5 	bl	800c900 <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b75c:	4b3c      	ldr	r3, [pc, #240]	@ (800b850 <xQueueReceive+0x1c0>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b76c:	f002 f93e 	bl	800d9ec <vPortExitCritical>
				return pdPASS;
 800b770:	2301      	movs	r3, #1
 800b772:	e069      	b.n	800b848 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d103      	bne.n	800b782 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b77a:	f002 f937 	bl	800d9ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b77e:	2300      	movs	r3, #0
 800b780:	e062      	b.n	800b848 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b784:	2b00      	cmp	r3, #0
 800b786:	d106      	bne.n	800b796 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b788:	f107 0310 	add.w	r3, r7, #16
 800b78c:	4618      	mov	r0, r3
 800b78e:	f001 f91b 	bl	800c9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b792:	2301      	movs	r3, #1
 800b794:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b796:	f002 f929 	bl	800d9ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b79a:	f000 fe63 	bl	800c464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b79e:	f002 f8f3 	bl	800d988 <vPortEnterCritical>
 800b7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7a8:	b25b      	sxtb	r3, r3
 800b7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ae:	d103      	bne.n	800b7b8 <xQueueReceive+0x128>
 800b7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7be:	b25b      	sxtb	r3, r3
 800b7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c4:	d103      	bne.n	800b7ce <xQueueReceive+0x13e>
 800b7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7ce:	f002 f90d 	bl	800d9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7d2:	1d3a      	adds	r2, r7, #4
 800b7d4:	f107 0310 	add.w	r3, r7, #16
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 f90a 	bl	800c9f4 <xTaskCheckForTimeOut>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d123      	bne.n	800b82e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7e8:	f000 fb22 	bl	800be30 <prvIsQueueEmpty>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d017      	beq.n	800b822 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f4:	3324      	adds	r3, #36	@ 0x24
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f001 f82e 	bl	800c85c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b802:	f000 fac3 	bl	800bd8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b806:	f000 fe3b 	bl	800c480 <xTaskResumeAll>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d189      	bne.n	800b724 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b810:	4b0f      	ldr	r3, [pc, #60]	@ (800b850 <xQueueReceive+0x1c0>)
 800b812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	f3bf 8f6f 	isb	sy
 800b820:	e780      	b.n	800b724 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b824:	f000 fab2 	bl	800bd8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b828:	f000 fe2a 	bl	800c480 <xTaskResumeAll>
 800b82c:	e77a      	b.n	800b724 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b830:	f000 faac 	bl	800bd8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b834:	f000 fe24 	bl	800c480 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b83a:	f000 faf9 	bl	800be30 <prvIsQueueEmpty>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	f43f af6f 	beq.w	800b724 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b846:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3730      	adds	r7, #48	@ 0x30
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08e      	sub	sp, #56	@ 0x38
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b85e:	2300      	movs	r3, #0
 800b860:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b866:	2300      	movs	r3, #0
 800b868:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d10b      	bne.n	800b888 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	623b      	str	r3, [r7, #32]
}
 800b882:	bf00      	nop
 800b884:	bf00      	nop
 800b886:	e7fd      	b.n	800b884 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00b      	beq.n	800b8a8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	61fb      	str	r3, [r7, #28]
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	e7fd      	b.n	800b8a4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8a8:	f001 fa00 	bl	800ccac <xTaskGetSchedulerState>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <xQueueSemaphoreTake+0x64>
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <xQueueSemaphoreTake+0x68>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e000      	b.n	800b8be <xQueueSemaphoreTake+0x6a>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10b      	bne.n	800b8da <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	61bb      	str	r3, [r7, #24]
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop
 800b8d8:	e7fd      	b.n	800b8d6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8da:	f002 f855 	bl	800d988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d024      	beq.n	800b934 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ec:	1e5a      	subs	r2, r3, #1
 800b8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d104      	bne.n	800b904 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b8fa:	f001 fb51 	bl	800cfa0 <pvTaskIncrementMutexHeldCount>
 800b8fe:	4602      	mov	r2, r0
 800b900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b902:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00f      	beq.n	800b92c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90e:	3310      	adds	r3, #16
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fff5 	bl	800c900 <xTaskRemoveFromEventList>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d007      	beq.n	800b92c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b91c:	4b54      	ldr	r3, [pc, #336]	@ (800ba70 <xQueueSemaphoreTake+0x21c>)
 800b91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b92c:	f002 f85e 	bl	800d9ec <vPortExitCritical>
				return pdPASS;
 800b930:	2301      	movs	r3, #1
 800b932:	e098      	b.n	800ba66 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d112      	bne.n	800b960 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00b      	beq.n	800b958 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	617b      	str	r3, [r7, #20]
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	e7fd      	b.n	800b954 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b958:	f002 f848 	bl	800d9ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b95c:	2300      	movs	r3, #0
 800b95e:	e082      	b.n	800ba66 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b966:	f107 030c 	add.w	r3, r7, #12
 800b96a:	4618      	mov	r0, r3
 800b96c:	f001 f82c 	bl	800c9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b970:	2301      	movs	r3, #1
 800b972:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b974:	f002 f83a 	bl	800d9ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b978:	f000 fd74 	bl	800c464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b97c:	f002 f804 	bl	800d988 <vPortEnterCritical>
 800b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b982:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b986:	b25b      	sxtb	r3, r3
 800b988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98c:	d103      	bne.n	800b996 <xQueueSemaphoreTake+0x142>
 800b98e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b990:	2200      	movs	r2, #0
 800b992:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b99c:	b25b      	sxtb	r3, r3
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d103      	bne.n	800b9ac <xQueueSemaphoreTake+0x158>
 800b9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9ac:	f002 f81e 	bl	800d9ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9b0:	463a      	mov	r2, r7
 800b9b2:	f107 030c 	add.w	r3, r7, #12
 800b9b6:	4611      	mov	r1, r2
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f001 f81b 	bl	800c9f4 <xTaskCheckForTimeOut>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d132      	bne.n	800ba2a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b9c6:	f000 fa33 	bl	800be30 <prvIsQueueEmpty>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d026      	beq.n	800ba1e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d109      	bne.n	800b9ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b9d8:	f001 ffd6 	bl	800d988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	689b      	ldr	r3, [r3, #8]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 f981 	bl	800cce8 <xTaskPriorityInherit>
 800b9e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b9e8:	f002 f800 	bl	800d9ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ee:	3324      	adds	r3, #36	@ 0x24
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 ff31 	bl	800c85c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b9fc:	f000 f9c6 	bl	800bd8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba00:	f000 fd3e 	bl	800c480 <xTaskResumeAll>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f47f af67 	bne.w	800b8da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ba0c:	4b18      	ldr	r3, [pc, #96]	@ (800ba70 <xQueueSemaphoreTake+0x21c>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	e75d      	b.n	800b8da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ba1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba20:	f000 f9b4 	bl	800bd8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba24:	f000 fd2c 	bl	800c480 <xTaskResumeAll>
 800ba28:	e757      	b.n	800b8da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ba2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba2c:	f000 f9ae 	bl	800bd8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba30:	f000 fd26 	bl	800c480 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba36:	f000 f9fb 	bl	800be30 <prvIsQueueEmpty>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f43f af4c 	beq.w	800b8da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ba42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00d      	beq.n	800ba64 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ba48:	f001 ff9e 	bl	800d988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ba4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba4e:	f000 f8f5 	bl	800bc3c <prvGetDisinheritPriorityAfterTimeout>
 800ba52:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ba54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fa1c 	bl	800ce98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ba60:	f001 ffc4 	bl	800d9ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3738      	adds	r7, #56	@ 0x38
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	e000ed04 	.word	0xe000ed04

0800ba74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08e      	sub	sp, #56	@ 0x38
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ba84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	623b      	str	r3, [r7, #32]
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	e7fd      	b.n	800ba9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d103      	bne.n	800bab0 <xQueueReceiveFromISR+0x3c>
 800baa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baac:	2b00      	cmp	r3, #0
 800baae:	d101      	bne.n	800bab4 <xQueueReceiveFromISR+0x40>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e000      	b.n	800bab6 <xQueueReceiveFromISR+0x42>
 800bab4:	2300      	movs	r3, #0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10b      	bne.n	800bad2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	61fb      	str	r3, [r7, #28]
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	e7fd      	b.n	800bace <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bad2:	f002 f839 	bl	800db48 <vPortValidateInterruptPriority>
	__asm volatile
 800bad6:	f3ef 8211 	mrs	r2, BASEPRI
 800bada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	61ba      	str	r2, [r7, #24]
 800baec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800baee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800baf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d02f      	beq.n	800bb5e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb0c:	f000 f918 	bl	800bd40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb12:	1e5a      	subs	r2, r3, #1
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bb18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb20:	d112      	bne.n	800bb48 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d016      	beq.n	800bb58 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 fee6 	bl	800c900 <xTaskRemoveFromEventList>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00e      	beq.n	800bb58 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00b      	beq.n	800bb58 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	e007      	b.n	800bb58 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bb48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	b25a      	sxtb	r2, r3
 800bb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb5c:	e001      	b.n	800bb62 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f383 8811 	msr	BASEPRI, r3
}
 800bb6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3738      	adds	r7, #56	@ 0x38
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10b      	bne.n	800bb9e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60bb      	str	r3, [r7, #8]
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop
 800bb9c:	e7fd      	b.n	800bb9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800bb9e:	f001 fef3 	bl	800d988 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800bba8:	f001 ff20 	bl	800d9ec <vPortExitCritical>

	return uxReturn;
 800bbac:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b087      	sub	sp, #28
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10b      	bne.n	800bbe0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800bbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbcc:	f383 8811 	msr	BASEPRI, r3
 800bbd0:	f3bf 8f6f 	isb	sy
 800bbd4:	f3bf 8f4f 	dsb	sy
 800bbd8:	60fb      	str	r3, [r7, #12]
}
 800bbda:	bf00      	nop
 800bbdc:	bf00      	nop
 800bbde:	e7fd      	b.n	800bbdc <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800bbe6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800bbe8:	4618      	mov	r0, r3
 800bbea:	371c      	adds	r7, #28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10b      	bne.n	800bc1e <vQueueDelete+0x2a>
	__asm volatile
 800bc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	60bb      	str	r3, [r7, #8]
}
 800bc18:	bf00      	nop
 800bc1a:	bf00      	nop
 800bc1c:	e7fd      	b.n	800bc1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f95e 	bl	800bee0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d102      	bne.n	800bc34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f002 f89a 	bl	800dd68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d006      	beq.n	800bc5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	e001      	b.n	800bc5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10d      	bne.n	800bca6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d14d      	bne.n	800bd2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 f88e 	bl	800cdb8 <xTaskPriorityDisinherit>
 800bc9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	609a      	str	r2, [r3, #8]
 800bca4:	e043      	b.n	800bd2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d119      	bne.n	800bce0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6858      	ldr	r0, [r3, #4]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	f012 faaf 	bl	801e21a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcc4:	441a      	add	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d32b      	bcc.n	800bd2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	605a      	str	r2, [r3, #4]
 800bcde:	e026      	b.n	800bd2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	68d8      	ldr	r0, [r3, #12]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce8:	461a      	mov	r2, r3
 800bcea:	68b9      	ldr	r1, [r7, #8]
 800bcec:	f012 fa95 	bl	801e21a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68da      	ldr	r2, [r3, #12]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf8:	425b      	negs	r3, r3
 800bcfa:	441a      	add	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	68da      	ldr	r2, [r3, #12]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d207      	bcs.n	800bd1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	689a      	ldr	r2, [r3, #8]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd14:	425b      	negs	r3, r3
 800bd16:	441a      	add	r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d105      	bne.n	800bd2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bd36:	697b      	ldr	r3, [r7, #20]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d018      	beq.n	800bd84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd5a:	441a      	add	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d303      	bcc.n	800bd74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68d9      	ldr	r1, [r3, #12]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6838      	ldr	r0, [r7, #0]
 800bd80:	f012 fa4b 	bl	801e21a <memcpy>
	}
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bd94:	f001 fdf8 	bl	800d988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bda0:	e011      	b.n	800bdc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d012      	beq.n	800bdd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3324      	adds	r3, #36	@ 0x24
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 fda6 	bl	800c900 <xTaskRemoveFromEventList>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d001      	beq.n	800bdbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bdba:	f000 fe7f 	bl	800cabc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bdc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	dce9      	bgt.n	800bda2 <prvUnlockQueue+0x16>
 800bdce:	e000      	b.n	800bdd2 <prvUnlockQueue+0x46>
					break;
 800bdd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	22ff      	movs	r2, #255	@ 0xff
 800bdd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bdda:	f001 fe07 	bl	800d9ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bdde:	f001 fdd3 	bl	800d988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bde8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bdea:	e011      	b.n	800be10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d012      	beq.n	800be1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3310      	adds	r3, #16
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fd81 	bl	800c900 <xTaskRemoveFromEventList>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800be04:	f000 fe5a 	bl	800cabc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800be08:	7bbb      	ldrb	r3, [r7, #14]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be14:	2b00      	cmp	r3, #0
 800be16:	dce9      	bgt.n	800bdec <prvUnlockQueue+0x60>
 800be18:	e000      	b.n	800be1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800be1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	22ff      	movs	r2, #255	@ 0xff
 800be20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800be24:	f001 fde2 	bl	800d9ec <vPortExitCritical>
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be38:	f001 fda6 	bl	800d988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be40:	2b00      	cmp	r3, #0
 800be42:	d102      	bne.n	800be4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800be44:	2301      	movs	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	e001      	b.n	800be4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800be4a:	2300      	movs	r3, #0
 800be4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be4e:	f001 fdcd 	bl	800d9ec <vPortExitCritical>

	return xReturn;
 800be52:	68fb      	ldr	r3, [r7, #12]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be64:	f001 fd90 	bl	800d988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be70:	429a      	cmp	r2, r3
 800be72:	d102      	bne.n	800be7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800be74:	2301      	movs	r3, #1
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	e001      	b.n	800be7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800be7a:	2300      	movs	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800be7e:	f001 fdb5 	bl	800d9ec <vPortExitCritical>

	return xReturn;
 800be82:	68fb      	ldr	r3, [r7, #12]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800be96:	2300      	movs	r3, #0
 800be98:	60fb      	str	r3, [r7, #12]
 800be9a:	e014      	b.n	800bec6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800be9c:	4a0f      	ldr	r2, [pc, #60]	@ (800bedc <vQueueAddToRegistry+0x50>)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10b      	bne.n	800bec0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bea8:	490c      	ldr	r1, [pc, #48]	@ (800bedc <vQueueAddToRegistry+0x50>)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	683a      	ldr	r2, [r7, #0]
 800beae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800beb2:	4a0a      	ldr	r2, [pc, #40]	@ (800bedc <vQueueAddToRegistry+0x50>)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	00db      	lsls	r3, r3, #3
 800beb8:	4413      	add	r3, r2
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bebe:	e006      	b.n	800bece <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3301      	adds	r3, #1
 800bec4:	60fb      	str	r3, [r7, #12]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2b07      	cmp	r3, #7
 800beca:	d9e7      	bls.n	800be9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	24002014 	.word	0x24002014

0800bee0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bee8:	2300      	movs	r3, #0
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e016      	b.n	800bf1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800beee:	4a10      	ldr	r2, [pc, #64]	@ (800bf30 <vQueueUnregisterQueue+0x50>)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	4413      	add	r3, r2
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d10b      	bne.n	800bf16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800befe:	4a0c      	ldr	r2, [pc, #48]	@ (800bf30 <vQueueUnregisterQueue+0x50>)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2100      	movs	r1, #0
 800bf04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bf08:	4a09      	ldr	r2, [pc, #36]	@ (800bf30 <vQueueUnregisterQueue+0x50>)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	4413      	add	r3, r2
 800bf10:	2200      	movs	r2, #0
 800bf12:	605a      	str	r2, [r3, #4]
				break;
 800bf14:	e006      	b.n	800bf24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b07      	cmp	r3, #7
 800bf20:	d9e5      	bls.n	800beee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bf22:	bf00      	nop
 800bf24:	bf00      	nop
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	24002014 	.word	0x24002014

0800bf34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bf44:	f001 fd20 	bl	800d988 <vPortEnterCritical>
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf4e:	b25b      	sxtb	r3, r3
 800bf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf54:	d103      	bne.n	800bf5e <vQueueWaitForMessageRestricted+0x2a>
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf64:	b25b      	sxtb	r3, r3
 800bf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6a:	d103      	bne.n	800bf74 <vQueueWaitForMessageRestricted+0x40>
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf74:	f001 fd3a 	bl	800d9ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d106      	bne.n	800bf8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	3324      	adds	r3, #36	@ 0x24
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fc8d 	bl	800c8a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bf8e:	6978      	ldr	r0, [r7, #20]
 800bf90:	f7ff fefc 	bl	800bd8c <prvUnlockQueue>
	}
 800bf94:	bf00      	nop
 800bf96:	3718      	adds	r7, #24
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b08e      	sub	sp, #56	@ 0x38
 800bfa0:	af04      	add	r7, sp, #16
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bfaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10b      	bne.n	800bfc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	623b      	str	r3, [r7, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	bf00      	nop
 800bfc6:	e7fd      	b.n	800bfc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10b      	bne.n	800bfe6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	61fb      	str	r3, [r7, #28]
}
 800bfe0:	bf00      	nop
 800bfe2:	bf00      	nop
 800bfe4:	e7fd      	b.n	800bfe2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfe6:	23a8      	movs	r3, #168	@ 0xa8
 800bfe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	2ba8      	cmp	r3, #168	@ 0xa8
 800bfee:	d00b      	beq.n	800c008 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	61bb      	str	r3, [r7, #24]
}
 800c002:	bf00      	nop
 800c004:	bf00      	nop
 800c006:	e7fd      	b.n	800c004 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c008:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01e      	beq.n	800c04e <xTaskCreateStatic+0xb2>
 800c010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01b      	beq.n	800c04e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c01e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c022:	2202      	movs	r2, #2
 800c024:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c028:	2300      	movs	r3, #0
 800c02a:	9303      	str	r3, [sp, #12]
 800c02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02e:	9302      	str	r3, [sp, #8]
 800c030:	f107 0314 	add.w	r3, r7, #20
 800c034:	9301      	str	r3, [sp, #4]
 800c036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	68b9      	ldr	r1, [r7, #8]
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f000 f851 	bl	800c0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c048:	f000 f8f6 	bl	800c238 <prvAddNewTaskToReadyList>
 800c04c:	e001      	b.n	800c052 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c052:	697b      	ldr	r3, [r7, #20]
	}
 800c054:	4618      	mov	r0, r3
 800c056:	3728      	adds	r7, #40	@ 0x28
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08c      	sub	sp, #48	@ 0x30
 800c060:	af04      	add	r7, sp, #16
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	4613      	mov	r3, r2
 800c06a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c06c:	88fb      	ldrh	r3, [r7, #6]
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4618      	mov	r0, r3
 800c072:	f001 fdab 	bl	800dbcc <pvPortMalloc>
 800c076:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00e      	beq.n	800c09c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c07e:	20a8      	movs	r0, #168	@ 0xa8
 800c080:	f001 fda4 	bl	800dbcc <pvPortMalloc>
 800c084:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	631a      	str	r2, [r3, #48]	@ 0x30
 800c092:	e005      	b.n	800c0a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c094:	6978      	ldr	r0, [r7, #20]
 800c096:	f001 fe67 	bl	800dd68 <vPortFree>
 800c09a:	e001      	b.n	800c0a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c09c:	2300      	movs	r3, #0
 800c09e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d017      	beq.n	800c0d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0ae:	88fa      	ldrh	r2, [r7, #6]
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9303      	str	r3, [sp, #12]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	9302      	str	r3, [sp, #8]
 800c0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 f80f 	bl	800c0e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0ca:	69f8      	ldr	r0, [r7, #28]
 800c0cc:	f000 f8b4 	bl	800c238 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e002      	b.n	800c0dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0dc:	69bb      	ldr	r3, [r7, #24]
	}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	461a      	mov	r2, r3
 800c100:	21a5      	movs	r1, #165	@ 0xa5
 800c102:	f011 ffaf 	bl	801e064 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c108:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c10a:	6879      	ldr	r1, [r7, #4]
 800c10c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c110:	440b      	add	r3, r1
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	f023 0307 	bic.w	r3, r3, #7
 800c11e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	f003 0307 	and.w	r3, r3, #7
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00b      	beq.n	800c142 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	617b      	str	r3, [r7, #20]
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	e7fd      	b.n	800c13e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d01f      	beq.n	800c188 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c148:	2300      	movs	r3, #0
 800c14a:	61fb      	str	r3, [r7, #28]
 800c14c:	e012      	b.n	800c174 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	4413      	add	r3, r2
 800c154:	7819      	ldrb	r1, [r3, #0]
 800c156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	4413      	add	r3, r2
 800c15c:	3334      	adds	r3, #52	@ 0x34
 800c15e:	460a      	mov	r2, r1
 800c160:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	4413      	add	r3, r2
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d006      	beq.n	800c17c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	3301      	adds	r3, #1
 800c172:	61fb      	str	r3, [r7, #28]
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	2b0f      	cmp	r3, #15
 800c178:	d9e9      	bls.n	800c14e <prvInitialiseNewTask+0x66>
 800c17a:	e000      	b.n	800c17e <prvInitialiseNewTask+0x96>
			{
				break;
 800c17c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c186:	e003      	b.n	800c190 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c192:	2b37      	cmp	r3, #55	@ 0x37
 800c194:	d901      	bls.n	800c19a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c196:	2337      	movs	r3, #55	@ 0x37
 800c198:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c19e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe fd3d 	bl	800ac30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	3318      	adds	r3, #24
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fd38 	bl	800ac30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	3354      	adds	r3, #84	@ 0x54
 800c1ea:	224c      	movs	r2, #76	@ 0x4c
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f011 ff38 	bl	801e064 <memset>
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f6:	4a0d      	ldr	r2, [pc, #52]	@ (800c22c <prvInitialiseNewTask+0x144>)
 800c1f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fc:	4a0c      	ldr	r2, [pc, #48]	@ (800c230 <prvInitialiseNewTask+0x148>)
 800c1fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c202:	4a0c      	ldr	r2, [pc, #48]	@ (800c234 <prvInitialiseNewTask+0x14c>)
 800c204:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	68f9      	ldr	r1, [r7, #12]
 800c20a:	69b8      	ldr	r0, [r7, #24]
 800c20c:	f001 fa8a 	bl	800d724 <pxPortInitialiseStack>
 800c210:	4602      	mov	r2, r0
 800c212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c214:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c222:	bf00      	nop
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	24016f74 	.word	0x24016f74
 800c230:	24016fdc 	.word	0x24016fdc
 800c234:	24017044 	.word	0x24017044

0800c238 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c240:	f001 fba2 	bl	800d988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c244:	4b2d      	ldr	r3, [pc, #180]	@ (800c2fc <prvAddNewTaskToReadyList+0xc4>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	4a2c      	ldr	r2, [pc, #176]	@ (800c2fc <prvAddNewTaskToReadyList+0xc4>)
 800c24c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c24e:	4b2c      	ldr	r3, [pc, #176]	@ (800c300 <prvAddNewTaskToReadyList+0xc8>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c256:	4a2a      	ldr	r2, [pc, #168]	@ (800c300 <prvAddNewTaskToReadyList+0xc8>)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c25c:	4b27      	ldr	r3, [pc, #156]	@ (800c2fc <prvAddNewTaskToReadyList+0xc4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d110      	bne.n	800c286 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c264:	f000 fc4e 	bl	800cb04 <prvInitialiseTaskLists>
 800c268:	e00d      	b.n	800c286 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c26a:	4b26      	ldr	r3, [pc, #152]	@ (800c304 <prvAddNewTaskToReadyList+0xcc>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d109      	bne.n	800c286 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c272:	4b23      	ldr	r3, [pc, #140]	@ (800c300 <prvAddNewTaskToReadyList+0xc8>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d802      	bhi.n	800c286 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c280:	4a1f      	ldr	r2, [pc, #124]	@ (800c300 <prvAddNewTaskToReadyList+0xc8>)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c286:	4b20      	ldr	r3, [pc, #128]	@ (800c308 <prvAddNewTaskToReadyList+0xd0>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3301      	adds	r3, #1
 800c28c:	4a1e      	ldr	r2, [pc, #120]	@ (800c308 <prvAddNewTaskToReadyList+0xd0>)
 800c28e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c290:	4b1d      	ldr	r3, [pc, #116]	@ (800c308 <prvAddNewTaskToReadyList+0xd0>)
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c29c:	4b1b      	ldr	r3, [pc, #108]	@ (800c30c <prvAddNewTaskToReadyList+0xd4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d903      	bls.n	800c2ac <prvAddNewTaskToReadyList+0x74>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a8:	4a18      	ldr	r2, [pc, #96]	@ (800c30c <prvAddNewTaskToReadyList+0xd4>)
 800c2aa:	6013      	str	r3, [r2, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4a15      	ldr	r2, [pc, #84]	@ (800c310 <prvAddNewTaskToReadyList+0xd8>)
 800c2ba:	441a      	add	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	3304      	adds	r3, #4
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	f7fe fcc1 	bl	800ac4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2c8:	f001 fb90 	bl	800d9ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c304 <prvAddNewTaskToReadyList+0xcc>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d00e      	beq.n	800c2f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c300 <prvAddNewTaskToReadyList+0xc8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d207      	bcs.n	800c2f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c314 <prvAddNewTaskToReadyList+0xdc>)
 800c2e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2f2:	bf00      	nop
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	24002528 	.word	0x24002528
 800c300:	24002054 	.word	0x24002054
 800c304:	24002534 	.word	0x24002534
 800c308:	24002544 	.word	0x24002544
 800c30c:	24002530 	.word	0x24002530
 800c310:	24002058 	.word	0x24002058
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c320:	2300      	movs	r3, #0
 800c322:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d018      	beq.n	800c35c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c32a:	4b14      	ldr	r3, [pc, #80]	@ (800c37c <vTaskDelay+0x64>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00b      	beq.n	800c34a <vTaskDelay+0x32>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	60bb      	str	r3, [r7, #8]
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop
 800c348:	e7fd      	b.n	800c346 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c34a:	f000 f88b 	bl	800c464 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c34e:	2100      	movs	r1, #0
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 fe39 	bl	800cfc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c356:	f000 f893 	bl	800c480 <xTaskResumeAll>
 800c35a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d107      	bne.n	800c372 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c362:	4b07      	ldr	r3, [pc, #28]	@ (800c380 <vTaskDelay+0x68>)
 800c364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c372:	bf00      	nop
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	24002550 	.word	0x24002550
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08a      	sub	sp, #40	@ 0x28
 800c388:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c38e:	2300      	movs	r3, #0
 800c390:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c392:	463a      	mov	r2, r7
 800c394:	1d39      	adds	r1, r7, #4
 800c396:	f107 0308 	add.w	r3, r7, #8
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe fbf4 	bl	800ab88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	9202      	str	r2, [sp, #8]
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	460a      	mov	r2, r1
 800c3b2:	4924      	ldr	r1, [pc, #144]	@ (800c444 <vTaskStartScheduler+0xc0>)
 800c3b4:	4824      	ldr	r0, [pc, #144]	@ (800c448 <vTaskStartScheduler+0xc4>)
 800c3b6:	f7ff fdf1 	bl	800bf9c <xTaskCreateStatic>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	4a23      	ldr	r2, [pc, #140]	@ (800c44c <vTaskStartScheduler+0xc8>)
 800c3be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c3c0:	4b22      	ldr	r3, [pc, #136]	@ (800c44c <vTaskStartScheduler+0xc8>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	617b      	str	r3, [r7, #20]
 800c3cc:	e001      	b.n	800c3d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d102      	bne.n	800c3de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c3d8:	f000 fe4a 	bl	800d070 <xTimerCreateTimerTask>
 800c3dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d11b      	bne.n	800c41c <vTaskStartScheduler+0x98>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	613b      	str	r3, [r7, #16]
}
 800c3f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3f8:	4b15      	ldr	r3, [pc, #84]	@ (800c450 <vTaskStartScheduler+0xcc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3354      	adds	r3, #84	@ 0x54
 800c3fe:	4a15      	ldr	r2, [pc, #84]	@ (800c454 <vTaskStartScheduler+0xd0>)
 800c400:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c402:	4b15      	ldr	r3, [pc, #84]	@ (800c458 <vTaskStartScheduler+0xd4>)
 800c404:	f04f 32ff 	mov.w	r2, #4294967295
 800c408:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c40a:	4b14      	ldr	r3, [pc, #80]	@ (800c45c <vTaskStartScheduler+0xd8>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c410:	4b13      	ldr	r3, [pc, #76]	@ (800c460 <vTaskStartScheduler+0xdc>)
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c416:	f001 fa13 	bl	800d840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c41a:	e00f      	b.n	800c43c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c422:	d10b      	bne.n	800c43c <vTaskStartScheduler+0xb8>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <vTaskStartScheduler+0xb4>
}
 800c43c:	bf00      	nop
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	0801edcc 	.word	0x0801edcc
 800c448:	0800cad5 	.word	0x0800cad5
 800c44c:	2400254c 	.word	0x2400254c
 800c450:	24002054 	.word	0x24002054
 800c454:	24000040 	.word	0x24000040
 800c458:	24002548 	.word	0x24002548
 800c45c:	24002534 	.word	0x24002534
 800c460:	2400252c 	.word	0x2400252c

0800c464 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c464:	b480      	push	{r7}
 800c466:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c468:	4b04      	ldr	r3, [pc, #16]	@ (800c47c <vTaskSuspendAll+0x18>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3301      	adds	r3, #1
 800c46e:	4a03      	ldr	r2, [pc, #12]	@ (800c47c <vTaskSuspendAll+0x18>)
 800c470:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c472:	bf00      	nop
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	24002550 	.word	0x24002550

0800c480 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c486:	2300      	movs	r3, #0
 800c488:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c48e:	4b42      	ldr	r3, [pc, #264]	@ (800c598 <xTaskResumeAll+0x118>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10b      	bne.n	800c4ae <xTaskResumeAll+0x2e>
	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	603b      	str	r3, [r7, #0]
}
 800c4a8:	bf00      	nop
 800c4aa:	bf00      	nop
 800c4ac:	e7fd      	b.n	800c4aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c4ae:	f001 fa6b 	bl	800d988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c4b2:	4b39      	ldr	r3, [pc, #228]	@ (800c598 <xTaskResumeAll+0x118>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	4a37      	ldr	r2, [pc, #220]	@ (800c598 <xTaskResumeAll+0x118>)
 800c4ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4bc:	4b36      	ldr	r3, [pc, #216]	@ (800c598 <xTaskResumeAll+0x118>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d162      	bne.n	800c58a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c4c4:	4b35      	ldr	r3, [pc, #212]	@ (800c59c <xTaskResumeAll+0x11c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d05e      	beq.n	800c58a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c4cc:	e02f      	b.n	800c52e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ce:	4b34      	ldr	r3, [pc, #208]	@ (800c5a0 <xTaskResumeAll+0x120>)
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3318      	adds	r3, #24
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fe fc12 	bl	800ad04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fc0d 	bl	800ad04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4ee:	4b2d      	ldr	r3, [pc, #180]	@ (800c5a4 <xTaskResumeAll+0x124>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d903      	bls.n	800c4fe <xTaskResumeAll+0x7e>
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800c5a4 <xTaskResumeAll+0x124>)
 800c4fc:	6013      	str	r3, [r2, #0]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c502:	4613      	mov	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4a27      	ldr	r2, [pc, #156]	@ (800c5a8 <xTaskResumeAll+0x128>)
 800c50c:	441a      	add	r2, r3
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3304      	adds	r3, #4
 800c512:	4619      	mov	r1, r3
 800c514:	4610      	mov	r0, r2
 800c516:	f7fe fb98 	bl	800ac4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c51e:	4b23      	ldr	r3, [pc, #140]	@ (800c5ac <xTaskResumeAll+0x12c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c524:	429a      	cmp	r2, r3
 800c526:	d302      	bcc.n	800c52e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c528:	4b21      	ldr	r3, [pc, #132]	@ (800c5b0 <xTaskResumeAll+0x130>)
 800c52a:	2201      	movs	r2, #1
 800c52c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c52e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5a0 <xTaskResumeAll+0x120>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1cb      	bne.n	800c4ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c53c:	f000 fb86 	bl	800cc4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c540:	4b1c      	ldr	r3, [pc, #112]	@ (800c5b4 <xTaskResumeAll+0x134>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d010      	beq.n	800c56e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c54c:	f000 f858 	bl	800c600 <xTaskIncrementTick>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c556:	4b16      	ldr	r3, [pc, #88]	@ (800c5b0 <xTaskResumeAll+0x130>)
 800c558:	2201      	movs	r2, #1
 800c55a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3b01      	subs	r3, #1
 800c560:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1f1      	bne.n	800c54c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c568:	4b12      	ldr	r3, [pc, #72]	@ (800c5b4 <xTaskResumeAll+0x134>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c56e:	4b10      	ldr	r3, [pc, #64]	@ (800c5b0 <xTaskResumeAll+0x130>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d009      	beq.n	800c58a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c576:	2301      	movs	r3, #1
 800c578:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c57a:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b8 <xTaskResumeAll+0x138>)
 800c57c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c58a:	f001 fa2f 	bl	800d9ec <vPortExitCritical>

	return xAlreadyYielded;
 800c58e:	68bb      	ldr	r3, [r7, #8]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	24002550 	.word	0x24002550
 800c59c:	24002528 	.word	0x24002528
 800c5a0:	240024e8 	.word	0x240024e8
 800c5a4:	24002530 	.word	0x24002530
 800c5a8:	24002058 	.word	0x24002058
 800c5ac:	24002054 	.word	0x24002054
 800c5b0:	2400253c 	.word	0x2400253c
 800c5b4:	24002538 	.word	0x24002538
 800c5b8:	e000ed04 	.word	0xe000ed04

0800c5bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c5c2:	4b05      	ldr	r3, [pc, #20]	@ (800c5d8 <xTaskGetTickCount+0x1c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c5c8:	687b      	ldr	r3, [r7, #4]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	2400252c 	.word	0x2400252c

0800c5dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5e2:	f001 fab1 	bl	800db48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c5ea:	4b04      	ldr	r3, [pc, #16]	@ (800c5fc <xTaskGetTickCountFromISR+0x20>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5f0:	683b      	ldr	r3, [r7, #0]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	2400252c 	.word	0x2400252c

0800c600 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c606:	2300      	movs	r3, #0
 800c608:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c60a:	4b4f      	ldr	r3, [pc, #316]	@ (800c748 <xTaskIncrementTick+0x148>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f040 8090 	bne.w	800c734 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c614:	4b4d      	ldr	r3, [pc, #308]	@ (800c74c <xTaskIncrementTick+0x14c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c61c:	4a4b      	ldr	r2, [pc, #300]	@ (800c74c <xTaskIncrementTick+0x14c>)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d121      	bne.n	800c66c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c628:	4b49      	ldr	r3, [pc, #292]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00b      	beq.n	800c64a <xTaskIncrementTick+0x4a>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	603b      	str	r3, [r7, #0]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <xTaskIncrementTick+0x46>
 800c64a:	4b41      	ldr	r3, [pc, #260]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	4b40      	ldr	r3, [pc, #256]	@ (800c754 <xTaskIncrementTick+0x154>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a3e      	ldr	r2, [pc, #248]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	4a3e      	ldr	r2, [pc, #248]	@ (800c754 <xTaskIncrementTick+0x154>)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	4b3e      	ldr	r3, [pc, #248]	@ (800c758 <xTaskIncrementTick+0x158>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a3c      	ldr	r2, [pc, #240]	@ (800c758 <xTaskIncrementTick+0x158>)
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	f000 faf0 	bl	800cc4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c66c:	4b3b      	ldr	r3, [pc, #236]	@ (800c75c <xTaskIncrementTick+0x15c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	429a      	cmp	r2, r3
 800c674:	d349      	bcc.n	800c70a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c676:	4b36      	ldr	r3, [pc, #216]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d104      	bne.n	800c68a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c680:	4b36      	ldr	r3, [pc, #216]	@ (800c75c <xTaskIncrementTick+0x15c>)
 800c682:	f04f 32ff 	mov.w	r2, #4294967295
 800c686:	601a      	str	r2, [r3, #0]
					break;
 800c688:	e03f      	b.n	800c70a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68a:	4b31      	ldr	r3, [pc, #196]	@ (800c750 <xTaskIncrementTick+0x150>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d203      	bcs.n	800c6aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6a2:	4a2e      	ldr	r2, [pc, #184]	@ (800c75c <xTaskIncrementTick+0x15c>)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6a8:	e02f      	b.n	800c70a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fb28 	bl	800ad04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	3318      	adds	r3, #24
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe fb1f 	bl	800ad04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ca:	4b25      	ldr	r3, [pc, #148]	@ (800c760 <xTaskIncrementTick+0x160>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d903      	bls.n	800c6da <xTaskIncrementTick+0xda>
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d6:	4a22      	ldr	r2, [pc, #136]	@ (800c760 <xTaskIncrementTick+0x160>)
 800c6d8:	6013      	str	r3, [r2, #0]
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4a1f      	ldr	r2, [pc, #124]	@ (800c764 <xTaskIncrementTick+0x164>)
 800c6e8:	441a      	add	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f7fe faaa 	bl	800ac4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800c768 <xTaskIncrementTick+0x168>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c700:	429a      	cmp	r2, r3
 800c702:	d3b8      	bcc.n	800c676 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c704:	2301      	movs	r3, #1
 800c706:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c708:	e7b5      	b.n	800c676 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c70a:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <xTaskIncrementTick+0x168>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c710:	4914      	ldr	r1, [pc, #80]	@ (800c764 <xTaskIncrementTick+0x164>)
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	440b      	add	r3, r1
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d901      	bls.n	800c726 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c722:	2301      	movs	r3, #1
 800c724:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c726:	4b11      	ldr	r3, [pc, #68]	@ (800c76c <xTaskIncrementTick+0x16c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d007      	beq.n	800c73e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c72e:	2301      	movs	r3, #1
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	e004      	b.n	800c73e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c734:	4b0e      	ldr	r3, [pc, #56]	@ (800c770 <xTaskIncrementTick+0x170>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3301      	adds	r3, #1
 800c73a:	4a0d      	ldr	r2, [pc, #52]	@ (800c770 <xTaskIncrementTick+0x170>)
 800c73c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c73e:	697b      	ldr	r3, [r7, #20]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	24002550 	.word	0x24002550
 800c74c:	2400252c 	.word	0x2400252c
 800c750:	240024e0 	.word	0x240024e0
 800c754:	240024e4 	.word	0x240024e4
 800c758:	24002540 	.word	0x24002540
 800c75c:	24002548 	.word	0x24002548
 800c760:	24002530 	.word	0x24002530
 800c764:	24002058 	.word	0x24002058
 800c768:	24002054 	.word	0x24002054
 800c76c:	2400253c 	.word	0x2400253c
 800c770:	24002538 	.word	0x24002538

0800c774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c77a:	4b32      	ldr	r3, [pc, #200]	@ (800c844 <vTaskSwitchContext+0xd0>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c782:	4b31      	ldr	r3, [pc, #196]	@ (800c848 <vTaskSwitchContext+0xd4>)
 800c784:	2201      	movs	r2, #1
 800c786:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c788:	e058      	b.n	800c83c <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800c78a:	4b2f      	ldr	r3, [pc, #188]	@ (800c848 <vTaskSwitchContext+0xd4>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c790:	4b2e      	ldr	r3, [pc, #184]	@ (800c84c <vTaskSwitchContext+0xd8>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4b2d      	ldr	r3, [pc, #180]	@ (800c84c <vTaskSwitchContext+0xd8>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d808      	bhi.n	800c7b2 <vTaskSwitchContext+0x3e>
 800c7a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c84c <vTaskSwitchContext+0xd8>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	4b29      	ldr	r3, [pc, #164]	@ (800c84c <vTaskSwitchContext+0xd8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3334      	adds	r3, #52	@ 0x34
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	f7f3 ff77 	bl	80006a0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b2:	4b27      	ldr	r3, [pc, #156]	@ (800c850 <vTaskSwitchContext+0xdc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	e011      	b.n	800c7de <vTaskSwitchContext+0x6a>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10b      	bne.n	800c7d8 <vTaskSwitchContext+0x64>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	607b      	str	r3, [r7, #4]
}
 800c7d2:	bf00      	nop
 800c7d4:	bf00      	nop
 800c7d6:	e7fd      	b.n	800c7d4 <vTaskSwitchContext+0x60>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	491d      	ldr	r1, [pc, #116]	@ (800c854 <vTaskSwitchContext+0xe0>)
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	440b      	add	r3, r1
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0e3      	beq.n	800c7ba <vTaskSwitchContext+0x46>
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4a15      	ldr	r2, [pc, #84]	@ (800c854 <vTaskSwitchContext+0xe0>)
 800c7fe:	4413      	add	r3, r2
 800c800:	60bb      	str	r3, [r7, #8]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	605a      	str	r2, [r3, #4]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	3308      	adds	r3, #8
 800c814:	429a      	cmp	r2, r3
 800c816:	d104      	bne.n	800c822 <vTaskSwitchContext+0xae>
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4a08      	ldr	r2, [pc, #32]	@ (800c84c <vTaskSwitchContext+0xd8>)
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	4a08      	ldr	r2, [pc, #32]	@ (800c850 <vTaskSwitchContext+0xdc>)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c832:	4b06      	ldr	r3, [pc, #24]	@ (800c84c <vTaskSwitchContext+0xd8>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3354      	adds	r3, #84	@ 0x54
 800c838:	4a07      	ldr	r2, [pc, #28]	@ (800c858 <vTaskSwitchContext+0xe4>)
 800c83a:	6013      	str	r3, [r2, #0]
}
 800c83c:	bf00      	nop
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	24002550 	.word	0x24002550
 800c848:	2400253c 	.word	0x2400253c
 800c84c:	24002054 	.word	0x24002054
 800c850:	24002530 	.word	0x24002530
 800c854:	24002058 	.word	0x24002058
 800c858:	24000040 	.word	0x24000040

0800c85c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10b      	bne.n	800c884 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	60fb      	str	r3, [r7, #12]
}
 800c87e:	bf00      	nop
 800c880:	bf00      	nop
 800c882:	e7fd      	b.n	800c880 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c884:	4b07      	ldr	r3, [pc, #28]	@ (800c8a4 <vTaskPlaceOnEventList+0x48>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3318      	adds	r3, #24
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7fe fa00 	bl	800ac92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c892:	2101      	movs	r1, #1
 800c894:	6838      	ldr	r0, [r7, #0]
 800c896:	f000 fb97 	bl	800cfc8 <prvAddCurrentTaskToDelayedList>
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	24002054 	.word	0x24002054

0800c8a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10b      	bne.n	800c8d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	617b      	str	r3, [r7, #20]
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	e7fd      	b.n	800c8ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c8fc <vTaskPlaceOnEventListRestricted+0x54>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3318      	adds	r3, #24
 800c8d8:	4619      	mov	r1, r3
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7fe f9b5 	bl	800ac4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c8ec:	6879      	ldr	r1, [r7, #4]
 800c8ee:	68b8      	ldr	r0, [r7, #8]
 800c8f0:	f000 fb6a 	bl	800cfc8 <prvAddCurrentTaskToDelayedList>
	}
 800c8f4:	bf00      	nop
 800c8f6:	3718      	adds	r7, #24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	24002054 	.word	0x24002054

0800c900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b086      	sub	sp, #24
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10b      	bne.n	800c92e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	60fb      	str	r3, [r7, #12]
}
 800c928:	bf00      	nop
 800c92a:	bf00      	nop
 800c92c:	e7fd      	b.n	800c92a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3318      	adds	r3, #24
 800c932:	4618      	mov	r0, r3
 800c934:	f7fe f9e6 	bl	800ad04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c938:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b0 <xTaskRemoveFromEventList+0xb0>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d11d      	bne.n	800c97c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	3304      	adds	r3, #4
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe f9dd 	bl	800ad04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c94e:	4b19      	ldr	r3, [pc, #100]	@ (800c9b4 <xTaskRemoveFromEventList+0xb4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d903      	bls.n	800c95e <xTaskRemoveFromEventList+0x5e>
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c95a:	4a16      	ldr	r2, [pc, #88]	@ (800c9b4 <xTaskRemoveFromEventList+0xb4>)
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c962:	4613      	mov	r3, r2
 800c964:	009b      	lsls	r3, r3, #2
 800c966:	4413      	add	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4a13      	ldr	r2, [pc, #76]	@ (800c9b8 <xTaskRemoveFromEventList+0xb8>)
 800c96c:	441a      	add	r2, r3
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	3304      	adds	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	4610      	mov	r0, r2
 800c976:	f7fe f968 	bl	800ac4a <vListInsertEnd>
 800c97a:	e005      	b.n	800c988 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	3318      	adds	r3, #24
 800c980:	4619      	mov	r1, r3
 800c982:	480e      	ldr	r0, [pc, #56]	@ (800c9bc <xTaskRemoveFromEventList+0xbc>)
 800c984:	f7fe f961 	bl	800ac4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c98c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c0 <xTaskRemoveFromEventList+0xc0>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c992:	429a      	cmp	r2, r3
 800c994:	d905      	bls.n	800c9a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c996:	2301      	movs	r3, #1
 800c998:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c99a:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c4 <xTaskRemoveFromEventList+0xc4>)
 800c99c:	2201      	movs	r2, #1
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	e001      	b.n	800c9a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9a6:	697b      	ldr	r3, [r7, #20]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	24002550 	.word	0x24002550
 800c9b4:	24002530 	.word	0x24002530
 800c9b8:	24002058 	.word	0x24002058
 800c9bc:	240024e8 	.word	0x240024e8
 800c9c0:	24002054 	.word	0x24002054
 800c9c4:	2400253c 	.word	0x2400253c

0800c9c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9d0:	4b06      	ldr	r3, [pc, #24]	@ (800c9ec <vTaskInternalSetTimeOutState+0x24>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9d8:	4b05      	ldr	r3, [pc, #20]	@ (800c9f0 <vTaskInternalSetTimeOutState+0x28>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	605a      	str	r2, [r3, #4]
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	24002540 	.word	0x24002540
 800c9f0:	2400252c 	.word	0x2400252c

0800c9f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10b      	bne.n	800ca1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	613b      	str	r3, [r7, #16]
}
 800ca16:	bf00      	nop
 800ca18:	bf00      	nop
 800ca1a:	e7fd      	b.n	800ca18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10b      	bne.n	800ca3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	60fb      	str	r3, [r7, #12]
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop
 800ca38:	e7fd      	b.n	800ca36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ca3a:	f000 ffa5 	bl	800d988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca3e:	4b1d      	ldr	r3, [pc, #116]	@ (800cab4 <xTaskCheckForTimeOut+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	69ba      	ldr	r2, [r7, #24]
 800ca4a:	1ad3      	subs	r3, r2, r3
 800ca4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca56:	d102      	bne.n	800ca5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	61fb      	str	r3, [r7, #28]
 800ca5c:	e023      	b.n	800caa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	4b15      	ldr	r3, [pc, #84]	@ (800cab8 <xTaskCheckForTimeOut+0xc4>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d007      	beq.n	800ca7a <xTaskCheckForTimeOut+0x86>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	69ba      	ldr	r2, [r7, #24]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d302      	bcc.n	800ca7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca74:	2301      	movs	r3, #1
 800ca76:	61fb      	str	r3, [r7, #28]
 800ca78:	e015      	b.n	800caa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	697a      	ldr	r2, [r7, #20]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d20b      	bcs.n	800ca9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	1ad2      	subs	r2, r2, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff ff99 	bl	800c9c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ca96:	2300      	movs	r3, #0
 800ca98:	61fb      	str	r3, [r7, #28]
 800ca9a:	e004      	b.n	800caa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800caa2:	2301      	movs	r3, #1
 800caa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800caa6:	f000 ffa1 	bl	800d9ec <vPortExitCritical>

	return xReturn;
 800caaa:	69fb      	ldr	r3, [r7, #28]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3720      	adds	r7, #32
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	2400252c 	.word	0x2400252c
 800cab8:	24002540 	.word	0x24002540

0800cabc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cac0:	4b03      	ldr	r3, [pc, #12]	@ (800cad0 <vTaskMissedYield+0x14>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	601a      	str	r2, [r3, #0]
}
 800cac6:	bf00      	nop
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	2400253c 	.word	0x2400253c

0800cad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cadc:	f000 f852 	bl	800cb84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cae0:	4b06      	ldr	r3, [pc, #24]	@ (800cafc <prvIdleTask+0x28>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d9f9      	bls.n	800cadc <prvIdleTask+0x8>
			{
				taskYIELD();
 800cae8:	4b05      	ldr	r3, [pc, #20]	@ (800cb00 <prvIdleTask+0x2c>)
 800caea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800caf8:	e7f0      	b.n	800cadc <prvIdleTask+0x8>
 800cafa:	bf00      	nop
 800cafc:	24002058 	.word	0x24002058
 800cb00:	e000ed04 	.word	0xe000ed04

0800cb04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	607b      	str	r3, [r7, #4]
 800cb0e:	e00c      	b.n	800cb2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4a12      	ldr	r2, [pc, #72]	@ (800cb64 <prvInitialiseTaskLists+0x60>)
 800cb1c:	4413      	add	r3, r2
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe f866 	bl	800abf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3301      	adds	r3, #1
 800cb28:	607b      	str	r3, [r7, #4]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b37      	cmp	r3, #55	@ 0x37
 800cb2e:	d9ef      	bls.n	800cb10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb30:	480d      	ldr	r0, [pc, #52]	@ (800cb68 <prvInitialiseTaskLists+0x64>)
 800cb32:	f7fe f85d 	bl	800abf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb36:	480d      	ldr	r0, [pc, #52]	@ (800cb6c <prvInitialiseTaskLists+0x68>)
 800cb38:	f7fe f85a 	bl	800abf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb3c:	480c      	ldr	r0, [pc, #48]	@ (800cb70 <prvInitialiseTaskLists+0x6c>)
 800cb3e:	f7fe f857 	bl	800abf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb42:	480c      	ldr	r0, [pc, #48]	@ (800cb74 <prvInitialiseTaskLists+0x70>)
 800cb44:	f7fe f854 	bl	800abf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb48:	480b      	ldr	r0, [pc, #44]	@ (800cb78 <prvInitialiseTaskLists+0x74>)
 800cb4a:	f7fe f851 	bl	800abf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <prvInitialiseTaskLists+0x78>)
 800cb50:	4a05      	ldr	r2, [pc, #20]	@ (800cb68 <prvInitialiseTaskLists+0x64>)
 800cb52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb54:	4b0a      	ldr	r3, [pc, #40]	@ (800cb80 <prvInitialiseTaskLists+0x7c>)
 800cb56:	4a05      	ldr	r2, [pc, #20]	@ (800cb6c <prvInitialiseTaskLists+0x68>)
 800cb58:	601a      	str	r2, [r3, #0]
}
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	24002058 	.word	0x24002058
 800cb68:	240024b8 	.word	0x240024b8
 800cb6c:	240024cc 	.word	0x240024cc
 800cb70:	240024e8 	.word	0x240024e8
 800cb74:	240024fc 	.word	0x240024fc
 800cb78:	24002514 	.word	0x24002514
 800cb7c:	240024e0 	.word	0x240024e0
 800cb80:	240024e4 	.word	0x240024e4

0800cb84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb8a:	e019      	b.n	800cbc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cb8c:	f000 fefc 	bl	800d988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb90:	4b10      	ldr	r3, [pc, #64]	@ (800cbd4 <prvCheckTasksWaitingTermination+0x50>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fe f8b1 	bl	800ad04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cba2:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd8 <prvCheckTasksWaitingTermination+0x54>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	4a0b      	ldr	r2, [pc, #44]	@ (800cbd8 <prvCheckTasksWaitingTermination+0x54>)
 800cbaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbac:	4b0b      	ldr	r3, [pc, #44]	@ (800cbdc <prvCheckTasksWaitingTermination+0x58>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	4a0a      	ldr	r2, [pc, #40]	@ (800cbdc <prvCheckTasksWaitingTermination+0x58>)
 800cbb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbb6:	f000 ff19 	bl	800d9ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f810 	bl	800cbe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbc0:	4b06      	ldr	r3, [pc, #24]	@ (800cbdc <prvCheckTasksWaitingTermination+0x58>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e1      	bne.n	800cb8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbc8:	bf00      	nop
 800cbca:	bf00      	nop
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	240024fc 	.word	0x240024fc
 800cbd8:	24002528 	.word	0x24002528
 800cbdc:	24002510 	.word	0x24002510

0800cbe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	3354      	adds	r3, #84	@ 0x54
 800cbec:	4618      	mov	r0, r3
 800cbee:	f011 fa51 	bl	801e094 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d108      	bne.n	800cc0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc00:	4618      	mov	r0, r3
 800cc02:	f001 f8b1 	bl	800dd68 <vPortFree>
				vPortFree( pxTCB );
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f001 f8ae 	bl	800dd68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc0c:	e019      	b.n	800cc42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d103      	bne.n	800cc20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f001 f8a5 	bl	800dd68 <vPortFree>
	}
 800cc1e:	e010      	b.n	800cc42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d00b      	beq.n	800cc42 <prvDeleteTCB+0x62>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc2e:	f383 8811 	msr	BASEPRI, r3
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	60fb      	str	r3, [r7, #12]
}
 800cc3c:	bf00      	nop
 800cc3e:	bf00      	nop
 800cc40:	e7fd      	b.n	800cc3e <prvDeleteTCB+0x5e>
	}
 800cc42:	bf00      	nop
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc52:	4b0c      	ldr	r3, [pc, #48]	@ (800cc84 <prvResetNextTaskUnblockTime+0x38>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d104      	bne.n	800cc66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc88 <prvResetNextTaskUnblockTime+0x3c>)
 800cc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc64:	e008      	b.n	800cc78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc66:	4b07      	ldr	r3, [pc, #28]	@ (800cc84 <prvResetNextTaskUnblockTime+0x38>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4a04      	ldr	r2, [pc, #16]	@ (800cc88 <prvResetNextTaskUnblockTime+0x3c>)
 800cc76:	6013      	str	r3, [r2, #0]
}
 800cc78:	bf00      	nop
 800cc7a:	370c      	adds	r7, #12
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr
 800cc84:	240024e0 	.word	0x240024e0
 800cc88:	24002548 	.word	0x24002548

0800cc8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800cc92:	4b05      	ldr	r3, [pc, #20]	@ (800cca8 <xTaskGetCurrentTaskHandle+0x1c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	607b      	str	r3, [r7, #4]

		return xReturn;
 800cc98:	687b      	ldr	r3, [r7, #4]
	}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	24002054 	.word	0x24002054

0800ccac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccb2:	4b0b      	ldr	r3, [pc, #44]	@ (800cce0 <xTaskGetSchedulerState+0x34>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d102      	bne.n	800ccc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	e008      	b.n	800ccd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccc0:	4b08      	ldr	r3, [pc, #32]	@ (800cce4 <xTaskGetSchedulerState+0x38>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	e001      	b.n	800ccd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccd2:	687b      	ldr	r3, [r7, #4]
	}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	24002534 	.word	0x24002534
 800cce4:	24002550 	.word	0x24002550

0800cce8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d051      	beq.n	800cda2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd02:	4b2a      	ldr	r3, [pc, #168]	@ (800cdac <xTaskPriorityInherit+0xc4>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d241      	bcs.n	800cd90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	db06      	blt.n	800cd22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd14:	4b25      	ldr	r3, [pc, #148]	@ (800cdac <xTaskPriorityInherit+0xc4>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	6959      	ldr	r1, [r3, #20]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4413      	add	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4a1f      	ldr	r2, [pc, #124]	@ (800cdb0 <xTaskPriorityInherit+0xc8>)
 800cd34:	4413      	add	r3, r2
 800cd36:	4299      	cmp	r1, r3
 800cd38:	d122      	bne.n	800cd80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fd ffe0 	bl	800ad04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd44:	4b19      	ldr	r3, [pc, #100]	@ (800cdac <xTaskPriorityInherit+0xc4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd52:	4b18      	ldr	r3, [pc, #96]	@ (800cdb4 <xTaskPriorityInherit+0xcc>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d903      	bls.n	800cd62 <xTaskPriorityInherit+0x7a>
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd5e:	4a15      	ldr	r2, [pc, #84]	@ (800cdb4 <xTaskPriorityInherit+0xcc>)
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4a10      	ldr	r2, [pc, #64]	@ (800cdb0 <xTaskPriorityInherit+0xc8>)
 800cd70:	441a      	add	r2, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	3304      	adds	r3, #4
 800cd76:	4619      	mov	r1, r3
 800cd78:	4610      	mov	r0, r2
 800cd7a:	f7fd ff66 	bl	800ac4a <vListInsertEnd>
 800cd7e:	e004      	b.n	800cd8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd80:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <xTaskPriorityInherit+0xc4>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e008      	b.n	800cda2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd94:	4b05      	ldr	r3, [pc, #20]	@ (800cdac <xTaskPriorityInherit+0xc4>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d201      	bcs.n	800cda2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cda2:	68fb      	ldr	r3, [r7, #12]
	}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	24002054 	.word	0x24002054
 800cdb0:	24002058 	.word	0x24002058
 800cdb4:	24002530 	.word	0x24002530

0800cdb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d058      	beq.n	800ce80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cdce:	4b2f      	ldr	r3, [pc, #188]	@ (800ce8c <xTaskPriorityDisinherit+0xd4>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d00b      	beq.n	800cdf0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cdd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	60fb      	str	r3, [r7, #12]
}
 800cdea:	bf00      	nop
 800cdec:	bf00      	nop
 800cdee:	e7fd      	b.n	800cdec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10b      	bne.n	800ce10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	60bb      	str	r3, [r7, #8]
}
 800ce0a:	bf00      	nop
 800ce0c:	bf00      	nop
 800ce0e:	e7fd      	b.n	800ce0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce14:	1e5a      	subs	r2, r3, #1
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d02c      	beq.n	800ce80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d128      	bne.n	800ce80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	3304      	adds	r3, #4
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fd ff66 	bl	800ad04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce50:	4b0f      	ldr	r3, [pc, #60]	@ (800ce90 <xTaskPriorityDisinherit+0xd8>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d903      	bls.n	800ce60 <xTaskPriorityDisinherit+0xa8>
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ce90 <xTaskPriorityDisinherit+0xd8>)
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce64:	4613      	mov	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4a09      	ldr	r2, [pc, #36]	@ (800ce94 <xTaskPriorityDisinherit+0xdc>)
 800ce6e:	441a      	add	r2, r3
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4619      	mov	r1, r3
 800ce76:	4610      	mov	r0, r2
 800ce78:	f7fd fee7 	bl	800ac4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce80:	697b      	ldr	r3, [r7, #20]
	}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3718      	adds	r7, #24
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	24002054 	.word	0x24002054
 800ce90:	24002530 	.word	0x24002530
 800ce94:	24002058 	.word	0x24002058

0800ce98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b088      	sub	sp, #32
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cea6:	2301      	movs	r3, #1
 800cea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d06c      	beq.n	800cf8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10b      	bne.n	800ced0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ceb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	60fb      	str	r3, [r7, #12]
}
 800ceca:	bf00      	nop
 800cecc:	bf00      	nop
 800cece:	e7fd      	b.n	800cecc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d902      	bls.n	800cee0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	61fb      	str	r3, [r7, #28]
 800cede:	e002      	b.n	800cee6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cee4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceea:	69fa      	ldr	r2, [r7, #28]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d04c      	beq.n	800cf8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cef4:	697a      	ldr	r2, [r7, #20]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d147      	bne.n	800cf8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cefa:	4b26      	ldr	r3, [pc, #152]	@ (800cf94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d10b      	bne.n	800cf1c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cf04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf08:	f383 8811 	msr	BASEPRI, r3
 800cf0c:	f3bf 8f6f 	isb	sy
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	60bb      	str	r3, [r7, #8]
}
 800cf16:	bf00      	nop
 800cf18:	bf00      	nop
 800cf1a:	e7fd      	b.n	800cf18 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf1c:	69bb      	ldr	r3, [r7, #24]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	69fa      	ldr	r2, [r7, #28]
 800cf26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	db04      	blt.n	800cf3a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	6959      	ldr	r1, [r3, #20]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4a13      	ldr	r2, [pc, #76]	@ (800cf98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cf4a:	4413      	add	r3, r2
 800cf4c:	4299      	cmp	r1, r3
 800cf4e:	d11c      	bne.n	800cf8a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	3304      	adds	r3, #4
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fd fed5 	bl	800ad04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d903      	bls.n	800cf6e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf9c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cf6c:	6013      	str	r3, [r2, #0]
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4a07      	ldr	r2, [pc, #28]	@ (800cf98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cf7c:	441a      	add	r2, r3
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4619      	mov	r1, r3
 800cf84:	4610      	mov	r0, r2
 800cf86:	f7fd fe60 	bl	800ac4a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf8a:	bf00      	nop
 800cf8c:	3720      	adds	r7, #32
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	24002054 	.word	0x24002054
 800cf98:	24002058 	.word	0x24002058
 800cf9c:	24002530 	.word	0x24002530

0800cfa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cfa0:	b480      	push	{r7}
 800cfa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cfa4:	4b07      	ldr	r3, [pc, #28]	@ (800cfc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d004      	beq.n	800cfb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cfac:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfb2:	3201      	adds	r2, #1
 800cfb4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cfb6:	4b03      	ldr	r3, [pc, #12]	@ (800cfc4 <pvTaskIncrementMutexHeldCount+0x24>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
	}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	24002054 	.word	0x24002054

0800cfc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cfd2:	4b21      	ldr	r3, [pc, #132]	@ (800d058 <prvAddCurrentTaskToDelayedList+0x90>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfd8:	4b20      	ldr	r3, [pc, #128]	@ (800d05c <prvAddCurrentTaskToDelayedList+0x94>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3304      	adds	r3, #4
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fd fe90 	bl	800ad04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfea:	d10a      	bne.n	800d002 <prvAddCurrentTaskToDelayedList+0x3a>
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d007      	beq.n	800d002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cff2:	4b1a      	ldr	r3, [pc, #104]	@ (800d05c <prvAddCurrentTaskToDelayedList+0x94>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3304      	adds	r3, #4
 800cff8:	4619      	mov	r1, r3
 800cffa:	4819      	ldr	r0, [pc, #100]	@ (800d060 <prvAddCurrentTaskToDelayedList+0x98>)
 800cffc:	f7fd fe25 	bl	800ac4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d000:	e026      	b.n	800d050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	4413      	add	r3, r2
 800d008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d00a:	4b14      	ldr	r3, [pc, #80]	@ (800d05c <prvAddCurrentTaskToDelayedList+0x94>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	429a      	cmp	r2, r3
 800d018:	d209      	bcs.n	800d02e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d01a:	4b12      	ldr	r3, [pc, #72]	@ (800d064 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b0f      	ldr	r3, [pc, #60]	@ (800d05c <prvAddCurrentTaskToDelayedList+0x94>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	3304      	adds	r3, #4
 800d024:	4619      	mov	r1, r3
 800d026:	4610      	mov	r0, r2
 800d028:	f7fd fe33 	bl	800ac92 <vListInsert>
}
 800d02c:	e010      	b.n	800d050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d02e:	4b0e      	ldr	r3, [pc, #56]	@ (800d068 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	4b0a      	ldr	r3, [pc, #40]	@ (800d05c <prvAddCurrentTaskToDelayedList+0x94>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3304      	adds	r3, #4
 800d038:	4619      	mov	r1, r3
 800d03a:	4610      	mov	r0, r2
 800d03c:	f7fd fe29 	bl	800ac92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d040:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	429a      	cmp	r2, r3
 800d048:	d202      	bcs.n	800d050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d04a:	4a08      	ldr	r2, [pc, #32]	@ (800d06c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	6013      	str	r3, [r2, #0]
}
 800d050:	bf00      	nop
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	2400252c 	.word	0x2400252c
 800d05c:	24002054 	.word	0x24002054
 800d060:	24002514 	.word	0x24002514
 800d064:	240024e4 	.word	0x240024e4
 800d068:	240024e0 	.word	0x240024e0
 800d06c:	24002548 	.word	0x24002548

0800d070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08a      	sub	sp, #40	@ 0x28
 800d074:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d076:	2300      	movs	r3, #0
 800d078:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d07a:	f000 fb13 	bl	800d6a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d07e:	4b1d      	ldr	r3, [pc, #116]	@ (800d0f4 <xTimerCreateTimerTask+0x84>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d021      	beq.n	800d0ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d086:	2300      	movs	r3, #0
 800d088:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d08e:	1d3a      	adds	r2, r7, #4
 800d090:	f107 0108 	add.w	r1, r7, #8
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fd fd8f 	bl	800abbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d09e:	6879      	ldr	r1, [r7, #4]
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	9202      	str	r2, [sp, #8]
 800d0a6:	9301      	str	r3, [sp, #4]
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	460a      	mov	r2, r1
 800d0b0:	4911      	ldr	r1, [pc, #68]	@ (800d0f8 <xTimerCreateTimerTask+0x88>)
 800d0b2:	4812      	ldr	r0, [pc, #72]	@ (800d0fc <xTimerCreateTimerTask+0x8c>)
 800d0b4:	f7fe ff72 	bl	800bf9c <xTaskCreateStatic>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	4a11      	ldr	r2, [pc, #68]	@ (800d100 <xTimerCreateTimerTask+0x90>)
 800d0bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0be:	4b10      	ldr	r3, [pc, #64]	@ (800d100 <xTimerCreateTimerTask+0x90>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10b      	bne.n	800d0e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	613b      	str	r3, [r7, #16]
}
 800d0e2:	bf00      	nop
 800d0e4:	bf00      	nop
 800d0e6:	e7fd      	b.n	800d0e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d0e8:	697b      	ldr	r3, [r7, #20]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	24002584 	.word	0x24002584
 800d0f8:	0801edd4 	.word	0x0801edd4
 800d0fc:	0800d23d 	.word	0x0800d23d
 800d100:	24002588 	.word	0x24002588

0800d104 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b08a      	sub	sp, #40	@ 0x28
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
 800d110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d112:	2300      	movs	r3, #0
 800d114:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10b      	bne.n	800d134 <xTimerGenericCommand+0x30>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	623b      	str	r3, [r7, #32]
}
 800d12e:	bf00      	nop
 800d130:	bf00      	nop
 800d132:	e7fd      	b.n	800d130 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d134:	4b19      	ldr	r3, [pc, #100]	@ (800d19c <xTimerGenericCommand+0x98>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d02a      	beq.n	800d192 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2b05      	cmp	r3, #5
 800d14c:	dc18      	bgt.n	800d180 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d14e:	f7ff fdad 	bl	800ccac <xTaskGetSchedulerState>
 800d152:	4603      	mov	r3, r0
 800d154:	2b02      	cmp	r3, #2
 800d156:	d109      	bne.n	800d16c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d158:	4b10      	ldr	r3, [pc, #64]	@ (800d19c <xTimerGenericCommand+0x98>)
 800d15a:	6818      	ldr	r0, [r3, #0]
 800d15c:	f107 0110 	add.w	r1, r7, #16
 800d160:	2300      	movs	r3, #0
 800d162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d164:	f7fe f864 	bl	800b230 <xQueueGenericSend>
 800d168:	6278      	str	r0, [r7, #36]	@ 0x24
 800d16a:	e012      	b.n	800d192 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d16c:	4b0b      	ldr	r3, [pc, #44]	@ (800d19c <xTimerGenericCommand+0x98>)
 800d16e:	6818      	ldr	r0, [r3, #0]
 800d170:	f107 0110 	add.w	r1, r7, #16
 800d174:	2300      	movs	r3, #0
 800d176:	2200      	movs	r2, #0
 800d178:	f7fe f85a 	bl	800b230 <xQueueGenericSend>
 800d17c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d17e:	e008      	b.n	800d192 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d180:	4b06      	ldr	r3, [pc, #24]	@ (800d19c <xTimerGenericCommand+0x98>)
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	f107 0110 	add.w	r1, r7, #16
 800d188:	2300      	movs	r3, #0
 800d18a:	683a      	ldr	r2, [r7, #0]
 800d18c:	f7fe f952 	bl	800b434 <xQueueGenericSendFromISR>
 800d190:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d194:	4618      	mov	r0, r3
 800d196:	3728      	adds	r7, #40	@ 0x28
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	24002584 	.word	0x24002584

0800d1a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b088      	sub	sp, #32
 800d1a4:	af02      	add	r7, sp, #8
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1aa:	4b23      	ldr	r3, [pc, #140]	@ (800d238 <prvProcessExpiredTimer+0x98>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fd fda3 	bl	800ad04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d023      	beq.n	800d214 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	699a      	ldr	r2, [r3, #24]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	18d1      	adds	r1, r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	6978      	ldr	r0, [r7, #20]
 800d1da:	f000 f8d5 	bl	800d388 <prvInsertTimerInActiveList>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d020      	beq.n	800d226 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	6978      	ldr	r0, [r7, #20]
 800d1f0:	f7ff ff88 	bl	800d104 <xTimerGenericCommand>
 800d1f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d114      	bne.n	800d226 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	60fb      	str	r3, [r7, #12]
}
 800d20e:	bf00      	nop
 800d210:	bf00      	nop
 800d212:	e7fd      	b.n	800d210 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d21a:	f023 0301 	bic.w	r3, r3, #1
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	6978      	ldr	r0, [r7, #20]
 800d22c:	4798      	blx	r3
}
 800d22e:	bf00      	nop
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	2400257c 	.word	0x2400257c

0800d23c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d244:	f107 0308 	add.w	r3, r7, #8
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f859 	bl	800d300 <prvGetNextExpireTime>
 800d24e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	4619      	mov	r1, r3
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f000 f805 	bl	800d264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d25a:	f000 f8d7 	bl	800d40c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d25e:	bf00      	nop
 800d260:	e7f0      	b.n	800d244 <prvTimerTask+0x8>
	...

0800d264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d26e:	f7ff f8f9 	bl	800c464 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d272:	f107 0308 	add.w	r3, r7, #8
 800d276:	4618      	mov	r0, r3
 800d278:	f000 f866 	bl	800d348 <prvSampleTimeNow>
 800d27c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d130      	bne.n	800d2e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10a      	bne.n	800d2a0 <prvProcessTimerOrBlockTask+0x3c>
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d806      	bhi.n	800d2a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d292:	f7ff f8f5 	bl	800c480 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d296:	68f9      	ldr	r1, [r7, #12]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff ff81 	bl	800d1a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d29e:	e024      	b.n	800d2ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d008      	beq.n	800d2b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2a6:	4b13      	ldr	r3, [pc, #76]	@ (800d2f4 <prvProcessTimerOrBlockTask+0x90>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <prvProcessTimerOrBlockTask+0x50>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e000      	b.n	800d2b6 <prvProcessTimerOrBlockTask+0x52>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f8 <prvProcessTimerOrBlockTask+0x94>)
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	f7fe fe35 	bl	800bf34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2ca:	f7ff f8d9 	bl	800c480 <xTaskResumeAll>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d2d4:	4b09      	ldr	r3, [pc, #36]	@ (800d2fc <prvProcessTimerOrBlockTask+0x98>)
 800d2d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2da:	601a      	str	r2, [r3, #0]
 800d2dc:	f3bf 8f4f 	dsb	sy
 800d2e0:	f3bf 8f6f 	isb	sy
}
 800d2e4:	e001      	b.n	800d2ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d2e6:	f7ff f8cb 	bl	800c480 <xTaskResumeAll>
}
 800d2ea:	bf00      	nop
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	24002580 	.word	0x24002580
 800d2f8:	24002584 	.word	0x24002584
 800d2fc:	e000ed04 	.word	0xe000ed04

0800d300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d308:	4b0e      	ldr	r3, [pc, #56]	@ (800d344 <prvGetNextExpireTime+0x44>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <prvGetNextExpireTime+0x16>
 800d312:	2201      	movs	r2, #1
 800d314:	e000      	b.n	800d318 <prvGetNextExpireTime+0x18>
 800d316:	2200      	movs	r2, #0
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d105      	bne.n	800d330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d324:	4b07      	ldr	r3, [pc, #28]	@ (800d344 <prvGetNextExpireTime+0x44>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	60fb      	str	r3, [r7, #12]
 800d32e:	e001      	b.n	800d334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d330:	2300      	movs	r3, #0
 800d332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d334:	68fb      	ldr	r3, [r7, #12]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3714      	adds	r7, #20
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	2400257c 	.word	0x2400257c

0800d348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d350:	f7ff f934 	bl	800c5bc <xTaskGetTickCount>
 800d354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d356:	4b0b      	ldr	r3, [pc, #44]	@ (800d384 <prvSampleTimeNow+0x3c>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	68fa      	ldr	r2, [r7, #12]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d205      	bcs.n	800d36c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d360:	f000 f93a 	bl	800d5d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	601a      	str	r2, [r3, #0]
 800d36a:	e002      	b.n	800d372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d372:	4a04      	ldr	r2, [pc, #16]	@ (800d384 <prvSampleTimeNow+0x3c>)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d378:	68fb      	ldr	r3, [r7, #12]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	2400258c 	.word	0x2400258c

0800d388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d396:	2300      	movs	r3, #0
 800d398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d812      	bhi.n	800d3d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	1ad2      	subs	r2, r2, r3
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d302      	bcc.n	800d3c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	617b      	str	r3, [r7, #20]
 800d3c0:	e01b      	b.n	800d3fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3c2:	4b10      	ldr	r3, [pc, #64]	@ (800d404 <prvInsertTimerInActiveList+0x7c>)
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	f7fd fc60 	bl	800ac92 <vListInsert>
 800d3d2:	e012      	b.n	800d3fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d206      	bcs.n	800d3ea <prvInsertTimerInActiveList+0x62>
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d302      	bcc.n	800d3ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	e007      	b.n	800d3fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3ea:	4b07      	ldr	r3, [pc, #28]	@ (800d408 <prvInsertTimerInActiveList+0x80>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	4610      	mov	r0, r2
 800d3f6:	f7fd fc4c 	bl	800ac92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d3fa:	697b      	ldr	r3, [r7, #20]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3718      	adds	r7, #24
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	24002580 	.word	0x24002580
 800d408:	2400257c 	.word	0x2400257c

0800d40c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b08e      	sub	sp, #56	@ 0x38
 800d410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d412:	e0ce      	b.n	800d5b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	da19      	bge.n	800d44e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d41a:	1d3b      	adds	r3, r7, #4
 800d41c:	3304      	adds	r3, #4
 800d41e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10b      	bne.n	800d43e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d42a:	f383 8811 	msr	BASEPRI, r3
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	61fb      	str	r3, [r7, #28]
}
 800d438:	bf00      	nop
 800d43a:	bf00      	nop
 800d43c:	e7fd      	b.n	800d43a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d444:	6850      	ldr	r0, [r2, #4]
 800d446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d448:	6892      	ldr	r2, [r2, #8]
 800d44a:	4611      	mov	r1, r2
 800d44c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	f2c0 80ae 	blt.w	800d5b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45c:	695b      	ldr	r3, [r3, #20]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d464:	3304      	adds	r3, #4
 800d466:	4618      	mov	r0, r3
 800d468:	f7fd fc4c 	bl	800ad04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d46c:	463b      	mov	r3, r7
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff ff6a 	bl	800d348 <prvSampleTimeNow>
 800d474:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b09      	cmp	r3, #9
 800d47a:	f200 8097 	bhi.w	800d5ac <prvProcessReceivedCommands+0x1a0>
 800d47e:	a201      	add	r2, pc, #4	@ (adr r2, 800d484 <prvProcessReceivedCommands+0x78>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d4ad 	.word	0x0800d4ad
 800d488:	0800d4ad 	.word	0x0800d4ad
 800d48c:	0800d4ad 	.word	0x0800d4ad
 800d490:	0800d523 	.word	0x0800d523
 800d494:	0800d537 	.word	0x0800d537
 800d498:	0800d583 	.word	0x0800d583
 800d49c:	0800d4ad 	.word	0x0800d4ad
 800d4a0:	0800d4ad 	.word	0x0800d4ad
 800d4a4:	0800d523 	.word	0x0800d523
 800d4a8:	0800d537 	.word	0x0800d537
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4b2:	f043 0301 	orr.w	r3, r3, #1
 800d4b6:	b2da      	uxtb	r2, r3
 800d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	18d1      	adds	r1, r2, r3
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4cc:	f7ff ff5c 	bl	800d388 <prvInsertTimerInActiveList>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d06c      	beq.n	800d5b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d8:	6a1b      	ldr	r3, [r3, #32]
 800d4da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4e4:	f003 0304 	and.w	r3, r3, #4
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d061      	beq.n	800d5b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f0:	699b      	ldr	r3, [r3, #24]
 800d4f2:	441a      	add	r2, r3
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4fe:	f7ff fe01 	bl	800d104 <xTimerGenericCommand>
 800d502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d152      	bne.n	800d5b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	61bb      	str	r3, [r7, #24]
}
 800d51c:	bf00      	nop
 800d51e:	bf00      	nop
 800d520:	e7fd      	b.n	800d51e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d528:	f023 0301 	bic.w	r3, r3, #1
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d530:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d534:	e03d      	b.n	800d5b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d53c:	f043 0301 	orr.w	r3, r3, #1
 800d540:	b2da      	uxtb	r2, r3
 800d542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d544:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d54c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10b      	bne.n	800d56e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	617b      	str	r3, [r7, #20]
}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	e7fd      	b.n	800d56a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d570:	699a      	ldr	r2, [r3, #24]
 800d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d574:	18d1      	adds	r1, r2, r3
 800d576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d57a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d57c:	f7ff ff04 	bl	800d388 <prvInsertTimerInActiveList>
					break;
 800d580:	e017      	b.n	800d5b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d588:	f003 0302 	and.w	r3, r3, #2
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d103      	bne.n	800d598 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d592:	f000 fbe9 	bl	800dd68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d596:	e00c      	b.n	800d5b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d59e:	f023 0301 	bic.w	r3, r3, #1
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d5aa:	e002      	b.n	800d5b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d5ac:	bf00      	nop
 800d5ae:	e000      	b.n	800d5b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d5b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5b2:	4b08      	ldr	r3, [pc, #32]	@ (800d5d4 <prvProcessReceivedCommands+0x1c8>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	1d39      	adds	r1, r7, #4
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7fe f868 	bl	800b690 <xQueueReceive>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f47f af26 	bne.w	800d414 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d5c8:	bf00      	nop
 800d5ca:	bf00      	nop
 800d5cc:	3730      	adds	r7, #48	@ 0x30
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	24002584 	.word	0x24002584

0800d5d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b088      	sub	sp, #32
 800d5dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5de:	e049      	b.n	800d674 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d69c <prvSwitchTimerLists+0xc4>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ea:	4b2c      	ldr	r3, [pc, #176]	@ (800d69c <prvSwitchTimerLists+0xc4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fd fb83 	bl	800ad04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6a1b      	ldr	r3, [r3, #32]
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d60c:	f003 0304 	and.w	r3, r3, #4
 800d610:	2b00      	cmp	r3, #0
 800d612:	d02f      	beq.n	800d674 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	4413      	add	r3, r2
 800d61c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d61e:	68ba      	ldr	r2, [r7, #8]
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	429a      	cmp	r2, r3
 800d624:	d90e      	bls.n	800d644 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	68ba      	ldr	r2, [r7, #8]
 800d62a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d632:	4b1a      	ldr	r3, [pc, #104]	@ (800d69c <prvSwitchTimerLists+0xc4>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3304      	adds	r3, #4
 800d63a:	4619      	mov	r1, r3
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7fd fb28 	bl	800ac92 <vListInsert>
 800d642:	e017      	b.n	800d674 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d644:	2300      	movs	r3, #0
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2300      	movs	r3, #0
 800d64a:	693a      	ldr	r2, [r7, #16]
 800d64c:	2100      	movs	r1, #0
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f7ff fd58 	bl	800d104 <xTimerGenericCommand>
 800d654:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10b      	bne.n	800d674 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	603b      	str	r3, [r7, #0]
}
 800d66e:	bf00      	nop
 800d670:	bf00      	nop
 800d672:	e7fd      	b.n	800d670 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d674:	4b09      	ldr	r3, [pc, #36]	@ (800d69c <prvSwitchTimerLists+0xc4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1b0      	bne.n	800d5e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d67e:	4b07      	ldr	r3, [pc, #28]	@ (800d69c <prvSwitchTimerLists+0xc4>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d684:	4b06      	ldr	r3, [pc, #24]	@ (800d6a0 <prvSwitchTimerLists+0xc8>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a04      	ldr	r2, [pc, #16]	@ (800d69c <prvSwitchTimerLists+0xc4>)
 800d68a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d68c:	4a04      	ldr	r2, [pc, #16]	@ (800d6a0 <prvSwitchTimerLists+0xc8>)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6013      	str	r3, [r2, #0]
}
 800d692:	bf00      	nop
 800d694:	3718      	adds	r7, #24
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	2400257c 	.word	0x2400257c
 800d6a0:	24002580 	.word	0x24002580

0800d6a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6aa:	f000 f96d 	bl	800d988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6ae:	4b15      	ldr	r3, [pc, #84]	@ (800d704 <prvCheckForValidListAndQueue+0x60>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d120      	bne.n	800d6f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6b6:	4814      	ldr	r0, [pc, #80]	@ (800d708 <prvCheckForValidListAndQueue+0x64>)
 800d6b8:	f7fd fa9a 	bl	800abf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6bc:	4813      	ldr	r0, [pc, #76]	@ (800d70c <prvCheckForValidListAndQueue+0x68>)
 800d6be:	f7fd fa97 	bl	800abf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6c2:	4b13      	ldr	r3, [pc, #76]	@ (800d710 <prvCheckForValidListAndQueue+0x6c>)
 800d6c4:	4a10      	ldr	r2, [pc, #64]	@ (800d708 <prvCheckForValidListAndQueue+0x64>)
 800d6c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6c8:	4b12      	ldr	r3, [pc, #72]	@ (800d714 <prvCheckForValidListAndQueue+0x70>)
 800d6ca:	4a10      	ldr	r2, [pc, #64]	@ (800d70c <prvCheckForValidListAndQueue+0x68>)
 800d6cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	4b11      	ldr	r3, [pc, #68]	@ (800d718 <prvCheckForValidListAndQueue+0x74>)
 800d6d4:	4a11      	ldr	r2, [pc, #68]	@ (800d71c <prvCheckForValidListAndQueue+0x78>)
 800d6d6:	2110      	movs	r1, #16
 800d6d8:	200a      	movs	r0, #10
 800d6da:	f7fd fba7 	bl	800ae2c <xQueueGenericCreateStatic>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	4a08      	ldr	r2, [pc, #32]	@ (800d704 <prvCheckForValidListAndQueue+0x60>)
 800d6e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d6e4:	4b07      	ldr	r3, [pc, #28]	@ (800d704 <prvCheckForValidListAndQueue+0x60>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d005      	beq.n	800d6f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d6ec:	4b05      	ldr	r3, [pc, #20]	@ (800d704 <prvCheckForValidListAndQueue+0x60>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	490b      	ldr	r1, [pc, #44]	@ (800d720 <prvCheckForValidListAndQueue+0x7c>)
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe fbca 	bl	800be8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d6f8:	f000 f978 	bl	800d9ec <vPortExitCritical>
}
 800d6fc:	bf00      	nop
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	24002584 	.word	0x24002584
 800d708:	24002554 	.word	0x24002554
 800d70c:	24002568 	.word	0x24002568
 800d710:	2400257c 	.word	0x2400257c
 800d714:	24002580 	.word	0x24002580
 800d718:	24002630 	.word	0x24002630
 800d71c:	24002590 	.word	0x24002590
 800d720:	0801eddc 	.word	0x0801eddc

0800d724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	3b04      	subs	r3, #4
 800d734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d73c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3b04      	subs	r3, #4
 800d742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	f023 0201 	bic.w	r2, r3, #1
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3b04      	subs	r3, #4
 800d752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d754:	4a0c      	ldr	r2, [pc, #48]	@ (800d788 <pxPortInitialiseStack+0x64>)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3b14      	subs	r3, #20
 800d75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	3b04      	subs	r3, #4
 800d76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f06f 0202 	mvn.w	r2, #2
 800d772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3b20      	subs	r3, #32
 800d778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d77a:	68fb      	ldr	r3, [r7, #12]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	0800d78d 	.word	0x0800d78d

0800d78c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d796:	4b13      	ldr	r3, [pc, #76]	@ (800d7e4 <prvTaskExitError+0x58>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d79e:	d00b      	beq.n	800d7b8 <prvTaskExitError+0x2c>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	60fb      	str	r3, [r7, #12]
}
 800d7b2:	bf00      	nop
 800d7b4:	bf00      	nop
 800d7b6:	e7fd      	b.n	800d7b4 <prvTaskExitError+0x28>
	__asm volatile
 800d7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7bc:	f383 8811 	msr	BASEPRI, r3
 800d7c0:	f3bf 8f6f 	isb	sy
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	60bb      	str	r3, [r7, #8]
}
 800d7ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7cc:	bf00      	nop
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d0fc      	beq.n	800d7ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	24000024 	.word	0x24000024
	...

0800d7f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d7f0:	4b07      	ldr	r3, [pc, #28]	@ (800d810 <pxCurrentTCBConst2>)
 800d7f2:	6819      	ldr	r1, [r3, #0]
 800d7f4:	6808      	ldr	r0, [r1, #0]
 800d7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fa:	f380 8809 	msr	PSP, r0
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f04f 0000 	mov.w	r0, #0
 800d806:	f380 8811 	msr	BASEPRI, r0
 800d80a:	4770      	bx	lr
 800d80c:	f3af 8000 	nop.w

0800d810 <pxCurrentTCBConst2>:
 800d810:	24002054 	.word	0x24002054
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop

0800d818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d818:	4808      	ldr	r0, [pc, #32]	@ (800d83c <prvPortStartFirstTask+0x24>)
 800d81a:	6800      	ldr	r0, [r0, #0]
 800d81c:	6800      	ldr	r0, [r0, #0]
 800d81e:	f380 8808 	msr	MSP, r0
 800d822:	f04f 0000 	mov.w	r0, #0
 800d826:	f380 8814 	msr	CONTROL, r0
 800d82a:	b662      	cpsie	i
 800d82c:	b661      	cpsie	f
 800d82e:	f3bf 8f4f 	dsb	sy
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	df00      	svc	0
 800d838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d83a:	bf00      	nop
 800d83c:	e000ed08 	.word	0xe000ed08

0800d840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d846:	4b47      	ldr	r3, [pc, #284]	@ (800d964 <xPortStartScheduler+0x124>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a47      	ldr	r2, [pc, #284]	@ (800d968 <xPortStartScheduler+0x128>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d10b      	bne.n	800d868 <xPortStartScheduler+0x28>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	613b      	str	r3, [r7, #16]
}
 800d862:	bf00      	nop
 800d864:	bf00      	nop
 800d866:	e7fd      	b.n	800d864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d868:	4b3e      	ldr	r3, [pc, #248]	@ (800d964 <xPortStartScheduler+0x124>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a3f      	ldr	r2, [pc, #252]	@ (800d96c <xPortStartScheduler+0x12c>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d10b      	bne.n	800d88a <xPortStartScheduler+0x4a>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	60fb      	str	r3, [r7, #12]
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop
 800d888:	e7fd      	b.n	800d886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d88a:	4b39      	ldr	r3, [pc, #228]	@ (800d970 <xPortStartScheduler+0x130>)
 800d88c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	b2db      	uxtb	r3, r3
 800d894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	22ff      	movs	r2, #255	@ 0xff
 800d89a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8a4:	78fb      	ldrb	r3, [r7, #3]
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	4b31      	ldr	r3, [pc, #196]	@ (800d974 <xPortStartScheduler+0x134>)
 800d8b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8b2:	4b31      	ldr	r3, [pc, #196]	@ (800d978 <xPortStartScheduler+0x138>)
 800d8b4:	2207      	movs	r2, #7
 800d8b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8b8:	e009      	b.n	800d8ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d8ba:	4b2f      	ldr	r3, [pc, #188]	@ (800d978 <xPortStartScheduler+0x138>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	4a2d      	ldr	r2, [pc, #180]	@ (800d978 <xPortStartScheduler+0x138>)
 800d8c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8d6:	2b80      	cmp	r3, #128	@ 0x80
 800d8d8:	d0ef      	beq.n	800d8ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8da:	4b27      	ldr	r3, [pc, #156]	@ (800d978 <xPortStartScheduler+0x138>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f1c3 0307 	rsb	r3, r3, #7
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	d00b      	beq.n	800d8fe <xPortStartScheduler+0xbe>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	60bb      	str	r3, [r7, #8]
}
 800d8f8:	bf00      	nop
 800d8fa:	bf00      	nop
 800d8fc:	e7fd      	b.n	800d8fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d978 <xPortStartScheduler+0x138>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	021b      	lsls	r3, r3, #8
 800d904:	4a1c      	ldr	r2, [pc, #112]	@ (800d978 <xPortStartScheduler+0x138>)
 800d906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d908:	4b1b      	ldr	r3, [pc, #108]	@ (800d978 <xPortStartScheduler+0x138>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d910:	4a19      	ldr	r2, [pc, #100]	@ (800d978 <xPortStartScheduler+0x138>)
 800d912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	b2da      	uxtb	r2, r3
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d91c:	4b17      	ldr	r3, [pc, #92]	@ (800d97c <xPortStartScheduler+0x13c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a16      	ldr	r2, [pc, #88]	@ (800d97c <xPortStartScheduler+0x13c>)
 800d922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d928:	4b14      	ldr	r3, [pc, #80]	@ (800d97c <xPortStartScheduler+0x13c>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4a13      	ldr	r2, [pc, #76]	@ (800d97c <xPortStartScheduler+0x13c>)
 800d92e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d934:	f000 f8da 	bl	800daec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d938:	4b11      	ldr	r3, [pc, #68]	@ (800d980 <xPortStartScheduler+0x140>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d93e:	f000 f8f9 	bl	800db34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d942:	4b10      	ldr	r3, [pc, #64]	@ (800d984 <xPortStartScheduler+0x144>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a0f      	ldr	r2, [pc, #60]	@ (800d984 <xPortStartScheduler+0x144>)
 800d948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d94c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d94e:	f7ff ff63 	bl	800d818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d952:	f7fe ff0f 	bl	800c774 <vTaskSwitchContext>
	prvTaskExitError();
 800d956:	f7ff ff19 	bl	800d78c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3718      	adds	r7, #24
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	e000ed00 	.word	0xe000ed00
 800d968:	410fc271 	.word	0x410fc271
 800d96c:	410fc270 	.word	0x410fc270
 800d970:	e000e400 	.word	0xe000e400
 800d974:	24002680 	.word	0x24002680
 800d978:	24002684 	.word	0x24002684
 800d97c:	e000ed20 	.word	0xe000ed20
 800d980:	24000024 	.word	0x24000024
 800d984:	e000ef34 	.word	0xe000ef34

0800d988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	607b      	str	r3, [r7, #4]
}
 800d9a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9a2:	4b10      	ldr	r3, [pc, #64]	@ (800d9e4 <vPortEnterCritical+0x5c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	4a0e      	ldr	r2, [pc, #56]	@ (800d9e4 <vPortEnterCritical+0x5c>)
 800d9aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d9e4 <vPortEnterCritical+0x5c>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d110      	bne.n	800d9d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e8 <vPortEnterCritical+0x60>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00b      	beq.n	800d9d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	603b      	str	r3, [r7, #0]
}
 800d9d0:	bf00      	nop
 800d9d2:	bf00      	nop
 800d9d4:	e7fd      	b.n	800d9d2 <vPortEnterCritical+0x4a>
	}
}
 800d9d6:	bf00      	nop
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	24000024 	.word	0x24000024
 800d9e8:	e000ed04 	.word	0xe000ed04

0800d9ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9f2:	4b12      	ldr	r3, [pc, #72]	@ (800da3c <vPortExitCritical+0x50>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d10b      	bne.n	800da12 <vPortExitCritical+0x26>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	607b      	str	r3, [r7, #4]
}
 800da0c:	bf00      	nop
 800da0e:	bf00      	nop
 800da10:	e7fd      	b.n	800da0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da12:	4b0a      	ldr	r3, [pc, #40]	@ (800da3c <vPortExitCritical+0x50>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	3b01      	subs	r3, #1
 800da18:	4a08      	ldr	r2, [pc, #32]	@ (800da3c <vPortExitCritical+0x50>)
 800da1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da1c:	4b07      	ldr	r3, [pc, #28]	@ (800da3c <vPortExitCritical+0x50>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d105      	bne.n	800da30 <vPortExitCritical+0x44>
 800da24:	2300      	movs	r3, #0
 800da26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	f383 8811 	msr	BASEPRI, r3
}
 800da2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	24000024 	.word	0x24000024

0800da40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da40:	f3ef 8009 	mrs	r0, PSP
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	4b15      	ldr	r3, [pc, #84]	@ (800daa0 <pxCurrentTCBConst>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	f01e 0f10 	tst.w	lr, #16
 800da50:	bf08      	it	eq
 800da52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	6010      	str	r0, [r2, #0]
 800da5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800da64:	f380 8811 	msr	BASEPRI, r0
 800da68:	f3bf 8f4f 	dsb	sy
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f7fe fe80 	bl	800c774 <vTaskSwitchContext>
 800da74:	f04f 0000 	mov.w	r0, #0
 800da78:	f380 8811 	msr	BASEPRI, r0
 800da7c:	bc09      	pop	{r0, r3}
 800da7e:	6819      	ldr	r1, [r3, #0]
 800da80:	6808      	ldr	r0, [r1, #0]
 800da82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da86:	f01e 0f10 	tst.w	lr, #16
 800da8a:	bf08      	it	eq
 800da8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da90:	f380 8809 	msr	PSP, r0
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w

0800daa0 <pxCurrentTCBConst>:
 800daa0:	24002054 	.word	0x24002054
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop

0800daa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	607b      	str	r3, [r7, #4]
}
 800dac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dac2:	f7fe fd9d 	bl	800c600 <xTaskIncrementTick>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dacc:	4b06      	ldr	r3, [pc, #24]	@ (800dae8 <xPortSysTickHandler+0x40>)
 800dace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	2300      	movs	r3, #0
 800dad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	f383 8811 	msr	BASEPRI, r3
}
 800dade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dae0:	bf00      	nop
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	e000ed04 	.word	0xe000ed04

0800daec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800daec:	b480      	push	{r7}
 800daee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800daf0:	4b0b      	ldr	r3, [pc, #44]	@ (800db20 <vPortSetupTimerInterrupt+0x34>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800daf6:	4b0b      	ldr	r3, [pc, #44]	@ (800db24 <vPortSetupTimerInterrupt+0x38>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dafc:	4b0a      	ldr	r3, [pc, #40]	@ (800db28 <vPortSetupTimerInterrupt+0x3c>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a0a      	ldr	r2, [pc, #40]	@ (800db2c <vPortSetupTimerInterrupt+0x40>)
 800db02:	fba2 2303 	umull	r2, r3, r2, r3
 800db06:	099b      	lsrs	r3, r3, #6
 800db08:	4a09      	ldr	r2, [pc, #36]	@ (800db30 <vPortSetupTimerInterrupt+0x44>)
 800db0a:	3b01      	subs	r3, #1
 800db0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db0e:	4b04      	ldr	r3, [pc, #16]	@ (800db20 <vPortSetupTimerInterrupt+0x34>)
 800db10:	2207      	movs	r2, #7
 800db12:	601a      	str	r2, [r3, #0]
}
 800db14:	bf00      	nop
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	e000e010 	.word	0xe000e010
 800db24:	e000e018 	.word	0xe000e018
 800db28:	24000000 	.word	0x24000000
 800db2c:	10624dd3 	.word	0x10624dd3
 800db30:	e000e014 	.word	0xe000e014

0800db34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800db44 <vPortEnableVFP+0x10>
 800db38:	6801      	ldr	r1, [r0, #0]
 800db3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800db3e:	6001      	str	r1, [r0, #0]
 800db40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db42:	bf00      	nop
 800db44:	e000ed88 	.word	0xe000ed88

0800db48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db4e:	f3ef 8305 	mrs	r3, IPSR
 800db52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b0f      	cmp	r3, #15
 800db58:	d915      	bls.n	800db86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db5a:	4a18      	ldr	r2, [pc, #96]	@ (800dbbc <vPortValidateInterruptPriority+0x74>)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	4413      	add	r3, r2
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db64:	4b16      	ldr	r3, [pc, #88]	@ (800dbc0 <vPortValidateInterruptPriority+0x78>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	7afa      	ldrb	r2, [r7, #11]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d20b      	bcs.n	800db86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800db6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db72:	f383 8811 	msr	BASEPRI, r3
 800db76:	f3bf 8f6f 	isb	sy
 800db7a:	f3bf 8f4f 	dsb	sy
 800db7e:	607b      	str	r3, [r7, #4]
}
 800db80:	bf00      	nop
 800db82:	bf00      	nop
 800db84:	e7fd      	b.n	800db82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db86:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc4 <vPortValidateInterruptPriority+0x7c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800db8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc8 <vPortValidateInterruptPriority+0x80>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	429a      	cmp	r2, r3
 800db94:	d90b      	bls.n	800dbae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	603b      	str	r3, [r7, #0]
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	e7fd      	b.n	800dbaa <vPortValidateInterruptPriority+0x62>
	}
 800dbae:	bf00      	nop
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop
 800dbbc:	e000e3f0 	.word	0xe000e3f0
 800dbc0:	24002680 	.word	0x24002680
 800dbc4:	e000ed0c 	.word	0xe000ed0c
 800dbc8:	24002684 	.word	0x24002684

0800dbcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b08a      	sub	sp, #40	@ 0x28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbd8:	f7fe fc44 	bl	800c464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbdc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd50 <pvPortMalloc+0x184>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d101      	bne.n	800dbe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbe4:	f000 f924 	bl	800de30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbe8:	4b5a      	ldr	r3, [pc, #360]	@ (800dd54 <pvPortMalloc+0x188>)
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4013      	ands	r3, r2
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f040 8095 	bne.w	800dd20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01e      	beq.n	800dc3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dbfc:	2208      	movs	r2, #8
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4413      	add	r3, r2
 800dc02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f003 0307 	and.w	r3, r3, #7
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d015      	beq.n	800dc3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f023 0307 	bic.w	r3, r3, #7
 800dc14:	3308      	adds	r3, #8
 800dc16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f003 0307 	and.w	r3, r3, #7
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00b      	beq.n	800dc3a <pvPortMalloc+0x6e>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	617b      	str	r3, [r7, #20]
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop
 800dc38:	e7fd      	b.n	800dc36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d06f      	beq.n	800dd20 <pvPortMalloc+0x154>
 800dc40:	4b45      	ldr	r3, [pc, #276]	@ (800dd58 <pvPortMalloc+0x18c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d86a      	bhi.n	800dd20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc4a:	4b44      	ldr	r3, [pc, #272]	@ (800dd5c <pvPortMalloc+0x190>)
 800dc4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc4e:	4b43      	ldr	r3, [pc, #268]	@ (800dd5c <pvPortMalloc+0x190>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc54:	e004      	b.n	800dc60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d903      	bls.n	800dc72 <pvPortMalloc+0xa6>
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1f1      	bne.n	800dc56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc72:	4b37      	ldr	r3, [pc, #220]	@ (800dd50 <pvPortMalloc+0x184>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d051      	beq.n	800dd20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2208      	movs	r2, #8
 800dc82:	4413      	add	r3, r2
 800dc84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	1ad2      	subs	r2, r2, r3
 800dc96:	2308      	movs	r3, #8
 800dc98:	005b      	lsls	r3, r3, #1
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d920      	bls.n	800dce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4413      	add	r3, r2
 800dca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	f003 0307 	and.w	r3, r3, #7
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00b      	beq.n	800dcc8 <pvPortMalloc+0xfc>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	613b      	str	r3, [r7, #16]
}
 800dcc2:	bf00      	nop
 800dcc4:	bf00      	nop
 800dcc6:	e7fd      	b.n	800dcc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcca:	685a      	ldr	r2, [r3, #4]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	1ad2      	subs	r2, r2, r3
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcda:	69b8      	ldr	r0, [r7, #24]
 800dcdc:	f000 f90a 	bl	800def4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dce0:	4b1d      	ldr	r3, [pc, #116]	@ (800dd58 <pvPortMalloc+0x18c>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	1ad3      	subs	r3, r2, r3
 800dcea:	4a1b      	ldr	r2, [pc, #108]	@ (800dd58 <pvPortMalloc+0x18c>)
 800dcec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcee:	4b1a      	ldr	r3, [pc, #104]	@ (800dd58 <pvPortMalloc+0x18c>)
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	4b1b      	ldr	r3, [pc, #108]	@ (800dd60 <pvPortMalloc+0x194>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d203      	bcs.n	800dd02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dcfa:	4b17      	ldr	r3, [pc, #92]	@ (800dd58 <pvPortMalloc+0x18c>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a18      	ldr	r2, [pc, #96]	@ (800dd60 <pvPortMalloc+0x194>)
 800dd00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd04:	685a      	ldr	r2, [r3, #4]
 800dd06:	4b13      	ldr	r3, [pc, #76]	@ (800dd54 <pvPortMalloc+0x188>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	431a      	orrs	r2, r3
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd12:	2200      	movs	r2, #0
 800dd14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd16:	4b13      	ldr	r3, [pc, #76]	@ (800dd64 <pvPortMalloc+0x198>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	4a11      	ldr	r2, [pc, #68]	@ (800dd64 <pvPortMalloc+0x198>)
 800dd1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd20:	f7fe fbae 	bl	800c480 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	f003 0307 	and.w	r3, r3, #7
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00b      	beq.n	800dd46 <pvPortMalloc+0x17a>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	60fb      	str	r3, [r7, #12]
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	e7fd      	b.n	800dd42 <pvPortMalloc+0x176>
	return pvReturn;
 800dd46:	69fb      	ldr	r3, [r7, #28]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3728      	adds	r7, #40	@ 0x28
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	240102e0 	.word	0x240102e0
 800dd54:	240102f4 	.word	0x240102f4
 800dd58:	240102e4 	.word	0x240102e4
 800dd5c:	240102d8 	.word	0x240102d8
 800dd60:	240102e8 	.word	0x240102e8
 800dd64:	240102ec 	.word	0x240102ec

0800dd68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d04f      	beq.n	800de1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd7a:	2308      	movs	r3, #8
 800dd7c:	425b      	negs	r3, r3
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	4413      	add	r3, r2
 800dd82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	4b25      	ldr	r3, [pc, #148]	@ (800de24 <vPortFree+0xbc>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4013      	ands	r3, r2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10b      	bne.n	800ddae <vPortFree+0x46>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	60fb      	str	r3, [r7, #12]
}
 800dda8:	bf00      	nop
 800ddaa:	bf00      	nop
 800ddac:	e7fd      	b.n	800ddaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00b      	beq.n	800ddce <vPortFree+0x66>
	__asm volatile
 800ddb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddba:	f383 8811 	msr	BASEPRI, r3
 800ddbe:	f3bf 8f6f 	isb	sy
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	60bb      	str	r3, [r7, #8]
}
 800ddc8:	bf00      	nop
 800ddca:	bf00      	nop
 800ddcc:	e7fd      	b.n	800ddca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	4b14      	ldr	r3, [pc, #80]	@ (800de24 <vPortFree+0xbc>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d01e      	beq.n	800de1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d11a      	bne.n	800de1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	685a      	ldr	r2, [r3, #4]
 800dde8:	4b0e      	ldr	r3, [pc, #56]	@ (800de24 <vPortFree+0xbc>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	43db      	mvns	r3, r3
 800ddee:	401a      	ands	r2, r3
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ddf4:	f7fe fb36 	bl	800c464 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	4b0a      	ldr	r3, [pc, #40]	@ (800de28 <vPortFree+0xc0>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4413      	add	r3, r2
 800de02:	4a09      	ldr	r2, [pc, #36]	@ (800de28 <vPortFree+0xc0>)
 800de04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de06:	6938      	ldr	r0, [r7, #16]
 800de08:	f000 f874 	bl	800def4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de0c:	4b07      	ldr	r3, [pc, #28]	@ (800de2c <vPortFree+0xc4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3301      	adds	r3, #1
 800de12:	4a06      	ldr	r2, [pc, #24]	@ (800de2c <vPortFree+0xc4>)
 800de14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de16:	f7fe fb33 	bl	800c480 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de1a:	bf00      	nop
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	240102f4 	.word	0x240102f4
 800de28:	240102e4 	.word	0x240102e4
 800de2c:	240102f0 	.word	0x240102f0

0800de30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de30:	b480      	push	{r7}
 800de32:	b085      	sub	sp, #20
 800de34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de36:	f64d 4350 	movw	r3, #56400	@ 0xdc50
 800de3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de3c:	4b27      	ldr	r3, [pc, #156]	@ (800dedc <prvHeapInit+0xac>)
 800de3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00c      	beq.n	800de64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	3307      	adds	r3, #7
 800de4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0307 	bic.w	r3, r3, #7
 800de56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de58:	68ba      	ldr	r2, [r7, #8]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	1ad3      	subs	r3, r2, r3
 800de5e:	4a1f      	ldr	r2, [pc, #124]	@ (800dedc <prvHeapInit+0xac>)
 800de60:	4413      	add	r3, r2
 800de62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de68:	4a1d      	ldr	r2, [pc, #116]	@ (800dee0 <prvHeapInit+0xb0>)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de6e:	4b1c      	ldr	r3, [pc, #112]	@ (800dee0 <prvHeapInit+0xb0>)
 800de70:	2200      	movs	r2, #0
 800de72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	68ba      	ldr	r2, [r7, #8]
 800de78:	4413      	add	r3, r2
 800de7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de7c:	2208      	movs	r2, #8
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	1a9b      	subs	r3, r3, r2
 800de82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f023 0307 	bic.w	r3, r3, #7
 800de8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4a15      	ldr	r2, [pc, #84]	@ (800dee4 <prvHeapInit+0xb4>)
 800de90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de92:	4b14      	ldr	r3, [pc, #80]	@ (800dee4 <prvHeapInit+0xb4>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2200      	movs	r2, #0
 800de98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de9a:	4b12      	ldr	r3, [pc, #72]	@ (800dee4 <prvHeapInit+0xb4>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	1ad2      	subs	r2, r2, r3
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800deb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <prvHeapInit+0xb4>)
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	4a0a      	ldr	r2, [pc, #40]	@ (800dee8 <prvHeapInit+0xb8>)
 800debe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	4a09      	ldr	r2, [pc, #36]	@ (800deec <prvHeapInit+0xbc>)
 800dec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dec8:	4b09      	ldr	r3, [pc, #36]	@ (800def0 <prvHeapInit+0xc0>)
 800deca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dece:	601a      	str	r2, [r3, #0]
}
 800ded0:	bf00      	nop
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	24002688 	.word	0x24002688
 800dee0:	240102d8 	.word	0x240102d8
 800dee4:	240102e0 	.word	0x240102e0
 800dee8:	240102e8 	.word	0x240102e8
 800deec:	240102e4 	.word	0x240102e4
 800def0:	240102f4 	.word	0x240102f4

0800def4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800defc:	4b28      	ldr	r3, [pc, #160]	@ (800dfa0 <prvInsertBlockIntoFreeList+0xac>)
 800defe:	60fb      	str	r3, [r7, #12]
 800df00:	e002      	b.n	800df08 <prvInsertBlockIntoFreeList+0x14>
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	60fb      	str	r3, [r7, #12]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d8f7      	bhi.n	800df02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	68ba      	ldr	r2, [r7, #8]
 800df1c:	4413      	add	r3, r2
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	429a      	cmp	r2, r3
 800df22:	d108      	bne.n	800df36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	685a      	ldr	r2, [r3, #4]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	441a      	add	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	68ba      	ldr	r2, [r7, #8]
 800df40:	441a      	add	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	d118      	bne.n	800df7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	4b15      	ldr	r3, [pc, #84]	@ (800dfa4 <prvInsertBlockIntoFreeList+0xb0>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	429a      	cmp	r2, r3
 800df54:	d00d      	beq.n	800df72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	441a      	add	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	e008      	b.n	800df84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df72:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <prvInsertBlockIntoFreeList+0xb0>)
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	e003      	b.n	800df84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d002      	beq.n	800df92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df92:	bf00      	nop
 800df94:	3714      	adds	r7, #20
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	240102d8 	.word	0x240102d8
 800dfa4:	240102e0 	.word	0x240102e0

0800dfa8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	330c      	adds	r3, #12
 800dfb8:	461a      	mov	r2, r3
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f004 f967 	bl	8012290 <tcpip_send_msg_wait_sem>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dfc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d103      	bne.n	800dfd6 <netconn_apimsg+0x2e>
    return apimsg->err;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dfd4:	e001      	b.n	800dfda <netconn_apimsg+0x32>
  }
  return err;
 800dfd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b08c      	sub	sp, #48	@ 0x30
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	603a      	str	r2, [r7, #0]
 800dfee:	71fb      	strb	r3, [r7, #7]
 800dff0:	460b      	mov	r3, r1
 800dff2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	6839      	ldr	r1, [r7, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f001 f9a7 	bl	800f34c <netconn_alloc>
 800dffe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800e000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e002:	2b00      	cmp	r3, #0
 800e004:	d054      	beq.n	800e0b0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e006:	79bb      	ldrb	r3, [r7, #6]
 800e008:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e00e:	f107 0308 	add.w	r3, r7, #8
 800e012:	4619      	mov	r1, r3
 800e014:	4829      	ldr	r0, [pc, #164]	@ (800e0bc <netconn_new_with_proto_and_callback+0xd8>)
 800e016:	f7ff ffc7 	bl	800dfa8 <netconn_apimsg>
 800e01a:	4603      	mov	r3, r0
 800e01c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800e020:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e024:	2b00      	cmp	r3, #0
 800e026:	d043      	beq.n	800e0b0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <netconn_new_with_proto_and_callback+0x58>
 800e030:	4b23      	ldr	r3, [pc, #140]	@ (800e0c0 <netconn_new_with_proto_and_callback+0xdc>)
 800e032:	22a3      	movs	r2, #163	@ 0xa3
 800e034:	4923      	ldr	r1, [pc, #140]	@ (800e0c4 <netconn_new_with_proto_and_callback+0xe0>)
 800e036:	4824      	ldr	r0, [pc, #144]	@ (800e0c8 <netconn_new_with_proto_and_callback+0xe4>)
 800e038:	f00f febc 	bl	801ddb4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03e:	3310      	adds	r3, #16
 800e040:	4618      	mov	r0, r3
 800e042:	f00f fb85 	bl	801d750 <sys_mbox_valid>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d105      	bne.n	800e058 <netconn_new_with_proto_and_callback+0x74>
 800e04c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0c0 <netconn_new_with_proto_and_callback+0xdc>)
 800e04e:	22a4      	movs	r2, #164	@ 0xa4
 800e050:	491e      	ldr	r1, [pc, #120]	@ (800e0cc <netconn_new_with_proto_and_callback+0xe8>)
 800e052:	481d      	ldr	r0, [pc, #116]	@ (800e0c8 <netconn_new_with_proto_and_callback+0xe4>)
 800e054:	f00f feae 	bl	801ddb4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05a:	3314      	adds	r3, #20
 800e05c:	4618      	mov	r0, r3
 800e05e:	f00f fb77 	bl	801d750 <sys_mbox_valid>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <netconn_new_with_proto_and_callback+0x90>
 800e068:	4b15      	ldr	r3, [pc, #84]	@ (800e0c0 <netconn_new_with_proto_and_callback+0xdc>)
 800e06a:	22a6      	movs	r2, #166	@ 0xa6
 800e06c:	4918      	ldr	r1, [pc, #96]	@ (800e0d0 <netconn_new_with_proto_and_callback+0xec>)
 800e06e:	4816      	ldr	r0, [pc, #88]	@ (800e0c8 <netconn_new_with_proto_and_callback+0xe4>)
 800e070:	f00f fea0 	bl	801ddb4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e076:	330c      	adds	r3, #12
 800e078:	4618      	mov	r0, r3
 800e07a:	f00f fbf7 	bl	801d86c <sys_sem_valid>
 800e07e:	4603      	mov	r3, r0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d105      	bne.n	800e090 <netconn_new_with_proto_and_callback+0xac>
 800e084:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c0 <netconn_new_with_proto_and_callback+0xdc>)
 800e086:	22a9      	movs	r2, #169	@ 0xa9
 800e088:	4912      	ldr	r1, [pc, #72]	@ (800e0d4 <netconn_new_with_proto_and_callback+0xf0>)
 800e08a:	480f      	ldr	r0, [pc, #60]	@ (800e0c8 <netconn_new_with_proto_and_callback+0xe4>)
 800e08c:	f00f fe92 	bl	801ddb4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e092:	330c      	adds	r3, #12
 800e094:	4618      	mov	r0, r3
 800e096:	f00f fbdc 	bl	801d852 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09c:	3310      	adds	r3, #16
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f00f fae2 	bl	801d668 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e0a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0a6:	2007      	movs	r0, #7
 800e0a8:	f004 ff68 	bl	8012f7c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e000      	b.n	800e0b2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3730      	adds	r7, #48	@ 0x30
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	0800f321 	.word	0x0800f321
 800e0c0:	0801ede4 	.word	0x0801ede4
 800e0c4:	0801ee18 	.word	0x0801ee18
 800e0c8:	0801ee3c 	.word	0x0801ee3c
 800e0cc:	0801ee64 	.word	0x0801ee64
 800e0d0:	0801ee7c 	.word	0x0801ee7c
 800e0d4:	0801eea0 	.word	0x0801eea0

0800e0d8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b08c      	sub	sp, #48	@ 0x30
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e014      	b.n	800e114 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e0ee:	2329      	movs	r3, #41	@ 0x29
 800e0f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e0f2:	f107 030c 	add.w	r3, r7, #12
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4808      	ldr	r0, [pc, #32]	@ (800e11c <netconn_prepare_delete+0x44>)
 800e0fa:	f7ff ff55 	bl	800dfa8 <netconn_apimsg>
 800e0fe:	4603      	mov	r3, r0
 800e100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e104:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d002      	beq.n	800e112 <netconn_prepare_delete+0x3a>
    return err;
 800e10c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e110:	e000      	b.n	800e114 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3730      	adds	r7, #48	@ 0x30
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	0800f88d 	.word	0x0800f88d

0800e120 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <netconn_delete+0x12>
    return ERR_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	e00d      	b.n	800e14e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7ff ffd0 	bl	800e0d8 <netconn_prepare_delete>
 800e138:	4603      	mov	r3, r0
 800e13a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <netconn_delete+0x2a>
    netconn_free(conn);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f001 f96f 	bl	800f428 <netconn_free>
  }
  return err;
 800e14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b08e      	sub	sp, #56	@ 0x38
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d109      	bne.n	800e180 <netconn_getaddr+0x28>
 800e16c:	4b1d      	ldr	r3, [pc, #116]	@ (800e1e4 <netconn_getaddr+0x8c>)
 800e16e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e172:	491d      	ldr	r1, [pc, #116]	@ (800e1e8 <netconn_getaddr+0x90>)
 800e174:	481d      	ldr	r0, [pc, #116]	@ (800e1ec <netconn_getaddr+0x94>)
 800e176:	f00f fe1d 	bl	801ddb4 <iprintf>
 800e17a:	f06f 030f 	mvn.w	r3, #15
 800e17e:	e02d      	b.n	800e1dc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d109      	bne.n	800e19a <netconn_getaddr+0x42>
 800e186:	4b17      	ldr	r3, [pc, #92]	@ (800e1e4 <netconn_getaddr+0x8c>)
 800e188:	f240 1213 	movw	r2, #275	@ 0x113
 800e18c:	4918      	ldr	r1, [pc, #96]	@ (800e1f0 <netconn_getaddr+0x98>)
 800e18e:	4817      	ldr	r0, [pc, #92]	@ (800e1ec <netconn_getaddr+0x94>)
 800e190:	f00f fe10 	bl	801ddb4 <iprintf>
 800e194:	f06f 030f 	mvn.w	r3, #15
 800e198:	e020      	b.n	800e1dc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d109      	bne.n	800e1b4 <netconn_getaddr+0x5c>
 800e1a0:	4b10      	ldr	r3, [pc, #64]	@ (800e1e4 <netconn_getaddr+0x8c>)
 800e1a2:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800e1a6:	4913      	ldr	r1, [pc, #76]	@ (800e1f4 <netconn_getaddr+0x9c>)
 800e1a8:	4810      	ldr	r0, [pc, #64]	@ (800e1ec <netconn_getaddr+0x94>)
 800e1aa:	f00f fe03 	bl	801ddb4 <iprintf>
 800e1ae:	f06f 030f 	mvn.w	r3, #15
 800e1b2:	e013      	b.n	800e1dc <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800e1b8:	78fb      	ldrb	r3, [r7, #3]
 800e1ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800e1c6:	f107 0314 	add.w	r3, r7, #20
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	480a      	ldr	r0, [pc, #40]	@ (800e1f8 <netconn_getaddr+0xa0>)
 800e1ce:	f7ff feeb 	bl	800dfa8 <netconn_apimsg>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800e1d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3738      	adds	r7, #56	@ 0x38
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	0801ede4 	.word	0x0801ede4
 800e1e8:	0801eebc 	.word	0x0801eebc
 800e1ec:	0801ee3c 	.word	0x0801ee3c
 800e1f0:	0801eedc 	.word	0x0801eedc
 800e1f4:	0801eefc 	.word	0x0801eefc
 800e1f8:	080101b1 	.word	0x080101b1

0800e1fc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08e      	sub	sp, #56	@ 0x38
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	4613      	mov	r3, r2
 800e208:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d109      	bne.n	800e224 <netconn_bind+0x28>
 800e210:	4b11      	ldr	r3, [pc, #68]	@ (800e258 <netconn_bind+0x5c>)
 800e212:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800e216:	4911      	ldr	r1, [pc, #68]	@ (800e25c <netconn_bind+0x60>)
 800e218:	4811      	ldr	r0, [pc, #68]	@ (800e260 <netconn_bind+0x64>)
 800e21a:	f00f fdcb 	bl	801ddb4 <iprintf>
 800e21e:	f06f 030f 	mvn.w	r3, #15
 800e222:	e015      	b.n	800e250 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d101      	bne.n	800e22e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e22a:	4b0e      	ldr	r3, [pc, #56]	@ (800e264 <netconn_bind+0x68>)
 800e22c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e236:	88fb      	ldrh	r3, [r7, #6]
 800e238:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e23a:	f107 0314 	add.w	r3, r7, #20
 800e23e:	4619      	mov	r1, r3
 800e240:	4809      	ldr	r0, [pc, #36]	@ (800e268 <netconn_bind+0x6c>)
 800e242:	f7ff feb1 	bl	800dfa8 <netconn_apimsg>
 800e246:	4603      	mov	r3, r0
 800e248:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e24c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e250:	4618      	mov	r0, r3
 800e252:	3738      	adds	r7, #56	@ 0x38
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	0801ede4 	.word	0x0801ede4
 800e25c:	0801ef1c 	.word	0x0801ef1c
 800e260:	0801ee3c 	.word	0x0801ee3c
 800e264:	08022868 	.word	0x08022868
 800e268:	0800fa55 	.word	0x0800fa55

0800e26c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08c      	sub	sp, #48	@ 0x30
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	460b      	mov	r3, r1
 800e276:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d109      	bne.n	800e292 <netconn_listen_with_backlog+0x26>
 800e27e:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b4 <netconn_listen_with_backlog+0x48>)
 800e280:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800e284:	490c      	ldr	r1, [pc, #48]	@ (800e2b8 <netconn_listen_with_backlog+0x4c>)
 800e286:	480d      	ldr	r0, [pc, #52]	@ (800e2bc <netconn_listen_with_backlog+0x50>)
 800e288:	f00f fd94 	bl	801ddb4 <iprintf>
 800e28c:	f06f 030f 	mvn.w	r3, #15
 800e290:	e00c      	b.n	800e2ac <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e296:	f107 030c 	add.w	r3, r7, #12
 800e29a:	4619      	mov	r1, r3
 800e29c:	4808      	ldr	r0, [pc, #32]	@ (800e2c0 <netconn_listen_with_backlog+0x54>)
 800e29e:	f7ff fe83 	bl	800dfa8 <netconn_apimsg>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e2a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3730      	adds	r7, #48	@ 0x30
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	0801ede4 	.word	0x0801ede4
 800e2b8:	0801ef9c 	.word	0x0801ef9c
 800e2bc:	0801ee3c 	.word	0x0801ee3c
 800e2c0:	0800fac9 	.word	0x0800fac9

0800e2c4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d109      	bne.n	800e2e8 <netconn_accept+0x24>
 800e2d4:	4b3d      	ldr	r3, [pc, #244]	@ (800e3cc <netconn_accept+0x108>)
 800e2d6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e2da:	493d      	ldr	r1, [pc, #244]	@ (800e3d0 <netconn_accept+0x10c>)
 800e2dc:	483d      	ldr	r0, [pc, #244]	@ (800e3d4 <netconn_accept+0x110>)
 800e2de:	f00f fd69 	bl	801ddb4 <iprintf>
 800e2e2:	f06f 030f 	mvn.w	r3, #15
 800e2e6:	e06c      	b.n	800e3c2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d109      	bne.n	800e308 <netconn_accept+0x44>
 800e2f4:	4b35      	ldr	r3, [pc, #212]	@ (800e3cc <netconn_accept+0x108>)
 800e2f6:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800e2fa:	4937      	ldr	r1, [pc, #220]	@ (800e3d8 <netconn_accept+0x114>)
 800e2fc:	4835      	ldr	r0, [pc, #212]	@ (800e3d4 <netconn_accept+0x110>)
 800e2fe:	f00f fd59 	bl	801ddb4 <iprintf>
 800e302:	f06f 030f 	mvn.w	r3, #15
 800e306:	e05c      	b.n	800e3c2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 fb99 	bl	800ea40 <netconn_err>
 800e30e:	4603      	mov	r3, r0
 800e310:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800e312:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800e31a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e31e:	e050      	b.n	800e3c2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	3314      	adds	r3, #20
 800e324:	4618      	mov	r0, r3
 800e326:	f00f fa13 	bl	801d750 <sys_mbox_valid>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d005      	beq.n	800e33c <netconn_accept+0x78>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7f1b      	ldrb	r3, [r3, #28]
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800e33c:	f06f 030e 	mvn.w	r3, #14
 800e340:	e03f      	b.n	800e3c2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	7f1b      	ldrb	r3, [r3, #28]
 800e346:	f003 0302 	and.w	r3, r3, #2
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00e      	beq.n	800e36c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3314      	adds	r3, #20
 800e352:	f107 020c 	add.w	r2, r7, #12
 800e356:	4611      	mov	r1, r2
 800e358:	4618      	mov	r0, r3
 800e35a:	f00f f9e2 	bl	801d722 <sys_arch_mbox_tryfetch>
 800e35e:	4603      	mov	r3, r0
 800e360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e364:	d10a      	bne.n	800e37c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800e366:	f06f 0306 	mvn.w	r3, #6
 800e36a:	e02a      	b.n	800e3c2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3314      	adds	r3, #20
 800e370:	f107 010c 	add.w	r1, r7, #12
 800e374:	2200      	movs	r2, #0
 800e376:	4618      	mov	r0, r3
 800e378:	f00f f9a2 	bl	801d6c0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e380:	2b00      	cmp	r3, #0
 800e382:	d005      	beq.n	800e390 <netconn_accept+0xcc>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e388:	2200      	movs	r2, #0
 800e38a:	2101      	movs	r1, #1
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f107 0213 	add.w	r2, r7, #19
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 fba3 	bl	800eae4 <lwip_netconn_is_err_msg>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800e3a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3a8:	e00b      	b.n	800e3c2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800e3b0:	f06f 030e 	mvn.w	r3, #14
 800e3b4:	e005      	b.n	800e3c2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e3c0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	0801ede4 	.word	0x0801ede4
 800e3d0:	0801efbc 	.word	0x0801efbc
 800e3d4:	0801ee3c 	.word	0x0801ee3c
 800e3d8:	0801efdc 	.word	0x0801efdc

0800e3dc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b088      	sub	sp, #32
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	60f8      	str	r0, [r7, #12]
 800e3e4:	60b9      	str	r1, [r7, #8]
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d109      	bne.n	800e408 <netconn_recv_data+0x2c>
 800e3f4:	4b58      	ldr	r3, [pc, #352]	@ (800e558 <netconn_recv_data+0x17c>)
 800e3f6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800e3fa:	4958      	ldr	r1, [pc, #352]	@ (800e55c <netconn_recv_data+0x180>)
 800e3fc:	4858      	ldr	r0, [pc, #352]	@ (800e560 <netconn_recv_data+0x184>)
 800e3fe:	f00f fcd9 	bl	801ddb4 <iprintf>
 800e402:	f06f 030f 	mvn.w	r3, #15
 800e406:	e0a2      	b.n	800e54e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2200      	movs	r2, #0
 800e40c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d109      	bne.n	800e428 <netconn_recv_data+0x4c>
 800e414:	4b50      	ldr	r3, [pc, #320]	@ (800e558 <netconn_recv_data+0x17c>)
 800e416:	f240 224a 	movw	r2, #586	@ 0x24a
 800e41a:	4952      	ldr	r1, [pc, #328]	@ (800e564 <netconn_recv_data+0x188>)
 800e41c:	4850      	ldr	r0, [pc, #320]	@ (800e560 <netconn_recv_data+0x184>)
 800e41e:	f00f fcc9 	bl	801ddb4 <iprintf>
 800e422:	f06f 030f 	mvn.w	r3, #15
 800e426:	e092      	b.n	800e54e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	3310      	adds	r3, #16
 800e42c:	4618      	mov	r0, r3
 800e42e:	f00f f98f 	bl	801d750 <sys_mbox_valid>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10e      	bne.n	800e456 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 fb01 	bl	800ea40 <netconn_err>
 800e43e:	4603      	mov	r3, r0
 800e440:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e442:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d002      	beq.n	800e450 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e44a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e44e:	e07e      	b.n	800e54e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e450:	f06f 030a 	mvn.w	r3, #10
 800e454:	e07b      	b.n	800e54e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	7f1b      	ldrb	r3, [r3, #28]
 800e45a:	f003 0302 	and.w	r3, r3, #2
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10f      	bne.n	800e482 <netconn_recv_data+0xa6>
 800e462:	79fb      	ldrb	r3, [r7, #7]
 800e464:	f003 0304 	and.w	r3, r3, #4
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d10a      	bne.n	800e482 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	7f1b      	ldrb	r3, [r3, #28]
 800e470:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e474:	2b00      	cmp	r3, #0
 800e476:	d104      	bne.n	800e482 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d023      	beq.n	800e4ca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3310      	adds	r3, #16
 800e486:	f107 0218 	add.w	r2, r7, #24
 800e48a:	4611      	mov	r1, r2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f00f f948 	bl	801d722 <sys_arch_mbox_tryfetch>
 800e492:	4603      	mov	r3, r0
 800e494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e498:	d11f      	bne.n	800e4da <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f000 fad0 	bl	800ea40 <netconn_err>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e4a4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e4ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e4b0:	e04d      	b.n	800e54e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	7f1b      	ldrb	r3, [r3, #28]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e4be:	f06f 030a 	mvn.w	r3, #10
 800e4c2:	e044      	b.n	800e54e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e4c4:	f06f 0306 	mvn.w	r3, #6
 800e4c8:	e041      	b.n	800e54e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3310      	adds	r3, #16
 800e4ce:	f107 0118 	add.w	r1, r7, #24
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f00f f8f3 	bl	801d6c0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e4e2:	2b10      	cmp	r3, #16
 800e4e4:	d117      	bne.n	800e516 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	f107 0217 	add.w	r2, r7, #23
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 faf8 	bl	800eae4 <lwip_netconn_is_err_msg>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d009      	beq.n	800e50e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e4fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4fe:	f113 0f0f 	cmn.w	r3, #15
 800e502:	d101      	bne.n	800e508 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	e022      	b.n	800e54e <netconn_recv_data+0x172>
      }
      return err;
 800e508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e50c:	e01f      	b.n	800e54e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	891b      	ldrh	r3, [r3, #8]
 800e512:	83fb      	strh	r3, [r7, #30]
 800e514:	e00d      	b.n	800e532 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d106      	bne.n	800e52a <netconn_recv_data+0x14e>
 800e51c:	4b0e      	ldr	r3, [pc, #56]	@ (800e558 <netconn_recv_data+0x17c>)
 800e51e:	f240 2291 	movw	r2, #657	@ 0x291
 800e522:	4911      	ldr	r1, [pc, #68]	@ (800e568 <netconn_recv_data+0x18c>)
 800e524:	480e      	ldr	r0, [pc, #56]	@ (800e560 <netconn_recv_data+0x184>)
 800e526:	f00f fc45 	bl	801ddb4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	891b      	ldrh	r3, [r3, #8]
 800e530:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <netconn_recv_data+0x16a>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e53e:	8bfa      	ldrh	r2, [r7, #30]
 800e540:	2101      	movs	r1, #1
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e546:	69ba      	ldr	r2, [r7, #24]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3720      	adds	r7, #32
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	0801ede4 	.word	0x0801ede4
 800e55c:	0801effc 	.word	0x0801effc
 800e560:	0801ee3c 	.word	0x0801ee3c
 800e564:	0801f01c 	.word	0x0801f01c
 800e568:	0801f038 	.word	0x0801f038

0800e56c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d005      	beq.n	800e58a <netconn_tcp_recvd_msg+0x1e>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e586:	2b10      	cmp	r3, #16
 800e588:	d009      	beq.n	800e59e <netconn_tcp_recvd_msg+0x32>
 800e58a:	4b0c      	ldr	r3, [pc, #48]	@ (800e5bc <netconn_tcp_recvd_msg+0x50>)
 800e58c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800e590:	490b      	ldr	r1, [pc, #44]	@ (800e5c0 <netconn_tcp_recvd_msg+0x54>)
 800e592:	480c      	ldr	r0, [pc, #48]	@ (800e5c4 <netconn_tcp_recvd_msg+0x58>)
 800e594:	f00f fc0e 	bl	801ddb4 <iprintf>
 800e598:	f06f 030f 	mvn.w	r3, #15
 800e59c:	e00a      	b.n	800e5b4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68ba      	ldr	r2, [r7, #8]
 800e5a8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e5aa:	6879      	ldr	r1, [r7, #4]
 800e5ac:	4806      	ldr	r0, [pc, #24]	@ (800e5c8 <netconn_tcp_recvd_msg+0x5c>)
 800e5ae:	f7ff fcfb 	bl	800dfa8 <netconn_apimsg>
 800e5b2:	4603      	mov	r3, r0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	0801ede4 	.word	0x0801ede4
 800e5c0:	0801f044 	.word	0x0801f044
 800e5c4:	0801ee3c 	.word	0x0801ee3c
 800e5c8:	0800fc93 	.word	0x0800fc93

0800e5cc <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08c      	sub	sp, #48	@ 0x30
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d005      	beq.n	800e5e8 <netconn_tcp_recvd+0x1c>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e5e4:	2b10      	cmp	r3, #16
 800e5e6:	d009      	beq.n	800e5fc <netconn_tcp_recvd+0x30>
 800e5e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e61c <netconn_tcp_recvd+0x50>)
 800e5ea:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800e5ee:	490c      	ldr	r1, [pc, #48]	@ (800e620 <netconn_tcp_recvd+0x54>)
 800e5f0:	480c      	ldr	r0, [pc, #48]	@ (800e624 <netconn_tcp_recvd+0x58>)
 800e5f2:	f00f fbdf 	bl	801ddb4 <iprintf>
 800e5f6:	f06f 030f 	mvn.w	r3, #15
 800e5fa:	e00b      	b.n	800e614 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800e5fc:	f107 030c 	add.w	r3, r7, #12
 800e600:	461a      	mov	r2, r3
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7ff ffb1 	bl	800e56c <netconn_tcp_recvd_msg>
 800e60a:	4603      	mov	r3, r0
 800e60c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800e610:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e614:	4618      	mov	r0, r3
 800e616:	3730      	adds	r7, #48	@ 0x30
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	0801ede4 	.word	0x0801ede4
 800e620:	0801f044 	.word	0x0801f044
 800e624:	0801ee3c 	.word	0x0801ee3c

0800e628 <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b090      	sub	sp, #64	@ 0x40
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	4613      	mov	r3, r2
 800e634:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3310      	adds	r3, #16
 800e63a:	4618      	mov	r0, r3
 800e63c:	f00f f888 	bl	801d750 <sys_mbox_valid>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d102      	bne.n	800e64c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e646:	f06f 030a 	mvn.w	r3, #10
 800e64a:	e06d      	b.n	800e728 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	7f1b      	ldrb	r3, [r3, #28]
 800e650:	b25b      	sxtb	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	da07      	bge.n	800e666 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	7f1b      	ldrb	r3, [r3, #28]
 800e65a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e664:	e039      	b.n	800e6da <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	461a      	mov	r2, r3
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff feb5 	bl	800e3dc <netconn_recv_data>
 800e672:	4603      	mov	r3, r0
 800e674:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800e678:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d002      	beq.n	800e686 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e680:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e684:	e050      	b.n	800e728 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	f003 0308 	and.w	r3, r3, #8
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10e      	bne.n	800e6b4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <netconn_recv_data_tcp+0x7a>
 800e69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69e:	891b      	ldrh	r3, [r3, #8]
 800e6a0:	e000      	b.n	800e6a4 <netconn_recv_data_tcp+0x7c>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e6a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e6a8:	f107 0214 	add.w	r2, r7, #20
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f7ff ff5c 	bl	800e56c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d134      	bne.n	800e724 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	f003 0310 	and.w	r3, r3, #16
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d009      	beq.n	800e6d8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	7f1b      	ldrb	r3, [r3, #28]
 800e6c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e6d2:	f06f 0306 	mvn.w	r3, #6
 800e6d6:	e027      	b.n	800e728 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e6d8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d005      	beq.n	800e6ee <netconn_recv_data_tcp+0xc6>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10f      	bne.n	800e716 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f000 f9a2 	bl	800ea40 <netconn_err>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800e702:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e706:	2b00      	cmp	r3, #0
 800e708:	d002      	beq.n	800e710 <netconn_recv_data_tcp+0xe8>
          return err;
 800e70a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e70e:	e00b      	b.n	800e728 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e710:	f06f 030d 	mvn.w	r3, #13
 800e714:	e008      	b.n	800e728 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e716:	2101      	movs	r1, #1
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f000 f961 	bl	800e9e0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e71e:	f06f 030e 	mvn.w	r3, #14
 800e722:	e001      	b.n	800e728 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e724:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3740      	adds	r7, #64	@ 0x40
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	4613      	mov	r3, r2
 800e73c:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d005      	beq.n	800e750 <netconn_recv_tcp_pbuf_flags+0x20>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e74c:	2b10      	cmp	r3, #16
 800e74e:	d009      	beq.n	800e764 <netconn_recv_tcp_pbuf_flags+0x34>
 800e750:	4b0a      	ldr	r3, [pc, #40]	@ (800e77c <netconn_recv_tcp_pbuf_flags+0x4c>)
 800e752:	f240 3225 	movw	r2, #805	@ 0x325
 800e756:	490a      	ldr	r1, [pc, #40]	@ (800e780 <netconn_recv_tcp_pbuf_flags+0x50>)
 800e758:	480a      	ldr	r0, [pc, #40]	@ (800e784 <netconn_recv_tcp_pbuf_flags+0x54>)
 800e75a:	f00f fb2b 	bl	801ddb4 <iprintf>
 800e75e:	f06f 030f 	mvn.w	r3, #15
 800e762:	e006      	b.n	800e772 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800e764:	79fb      	ldrb	r3, [r7, #7]
 800e766:	461a      	mov	r2, r3
 800e768:	68b9      	ldr	r1, [r7, #8]
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff ff5c 	bl	800e628 <netconn_recv_data_tcp>
 800e770:	4603      	mov	r3, r0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	0801ede4 	.word	0x0801ede4
 800e780:	0801f044 	.word	0x0801f044
 800e784:	0801ee3c 	.word	0x0801ee3c

0800e788 <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	4613      	mov	r3, r2
 800e794:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d005      	beq.n	800e7a8 <netconn_recv_udp_raw_netbuf_flags+0x20>
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7a4:	2b10      	cmp	r3, #16
 800e7a6:	d109      	bne.n	800e7bc <netconn_recv_udp_raw_netbuf_flags+0x34>
 800e7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800e7d4 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800e7aa:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800e7ae:	490a      	ldr	r1, [pc, #40]	@ (800e7d8 <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800e7b0:	480a      	ldr	r0, [pc, #40]	@ (800e7dc <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800e7b2:	f00f faff 	bl	801ddb4 <iprintf>
 800e7b6:	f06f 030f 	mvn.w	r3, #15
 800e7ba:	e006      	b.n	800e7ca <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	68b9      	ldr	r1, [r7, #8]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f7ff fe0a 	bl	800e3dc <netconn_recv_data>
 800e7c8:	4603      	mov	r3, r0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	0801ede4 	.word	0x0801ede4
 800e7d8:	0801f068 	.word	0x0801f068
 800e7dc:	0801ee3c 	.word	0x0801ee3c

0800e7e0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08c      	sub	sp, #48	@ 0x30
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d109      	bne.n	800e804 <netconn_send+0x24>
 800e7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e82c <netconn_send+0x4c>)
 800e7f2:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800e7f6:	490e      	ldr	r1, [pc, #56]	@ (800e830 <netconn_send+0x50>)
 800e7f8:	480e      	ldr	r0, [pc, #56]	@ (800e834 <netconn_send+0x54>)
 800e7fa:	f00f fadb 	bl	801ddb4 <iprintf>
 800e7fe:	f06f 030f 	mvn.w	r3, #15
 800e802:	e00e      	b.n	800e822 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e80c:	f107 030c 	add.w	r3, r7, #12
 800e810:	4619      	mov	r1, r3
 800e812:	4809      	ldr	r0, [pc, #36]	@ (800e838 <netconn_send+0x58>)
 800e814:	f7ff fbc8 	bl	800dfa8 <netconn_apimsg>
 800e818:	4603      	mov	r3, r0
 800e81a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e81e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e822:	4618      	mov	r0, r3
 800e824:	3730      	adds	r7, #48	@ 0x30
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	0801ede4 	.word	0x0801ede4
 800e830:	0801f0a0 	.word	0x0801f0a0
 800e834:	0801ee3c 	.word	0x0801ee3c
 800e838:	0800fbf9 	.word	0x0800fbf9

0800e83c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b088      	sub	sp, #32
 800e840:	af02      	add	r7, sp, #8
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e852:	78fa      	ldrb	r2, [r7, #3]
 800e854:	f107 0110 	add.w	r1, r7, #16
 800e858:	6a3b      	ldr	r3, [r7, #32]
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	4613      	mov	r3, r2
 800e85e:	2201      	movs	r2, #1
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 f805 	bl	800e870 <netconn_write_vectors_partly>
 800e866:	4603      	mov	r3, r0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b092      	sub	sp, #72	@ 0x48
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	4611      	mov	r1, r2
 800e87c:	461a      	mov	r2, r3
 800e87e:	460b      	mov	r3, r1
 800e880:	80fb      	strh	r3, [r7, #6]
 800e882:	4613      	mov	r3, r2
 800e884:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d109      	bne.n	800e8a0 <netconn_write_vectors_partly+0x30>
 800e88c:	4b4e      	ldr	r3, [pc, #312]	@ (800e9c8 <netconn_write_vectors_partly+0x158>)
 800e88e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e892:	494e      	ldr	r1, [pc, #312]	@ (800e9cc <netconn_write_vectors_partly+0x15c>)
 800e894:	484e      	ldr	r0, [pc, #312]	@ (800e9d0 <netconn_write_vectors_partly+0x160>)
 800e896:	f00f fa8d 	bl	801ddb4 <iprintf>
 800e89a:	f06f 030f 	mvn.w	r3, #15
 800e89e:	e08e      	b.n	800e9be <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e8a8:	2b10      	cmp	r3, #16
 800e8aa:	d009      	beq.n	800e8c0 <netconn_write_vectors_partly+0x50>
 800e8ac:	4b46      	ldr	r3, [pc, #280]	@ (800e9c8 <netconn_write_vectors_partly+0x158>)
 800e8ae:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800e8b2:	4948      	ldr	r1, [pc, #288]	@ (800e9d4 <netconn_write_vectors_partly+0x164>)
 800e8b4:	4846      	ldr	r0, [pc, #280]	@ (800e9d0 <netconn_write_vectors_partly+0x160>)
 800e8b6:	f00f fa7d 	bl	801ddb4 <iprintf>
 800e8ba:	f06f 0305 	mvn.w	r3, #5
 800e8be:	e07e      	b.n	800e9be <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	7f1b      	ldrb	r3, [r3, #28]
 800e8c4:	f003 0302 	and.w	r3, r3, #2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d104      	bne.n	800e8d6 <netconn_write_vectors_partly+0x66>
 800e8cc:	797b      	ldrb	r3, [r7, #5]
 800e8ce:	f003 0304 	and.w	r3, r3, #4
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d001      	beq.n	800e8da <netconn_write_vectors_partly+0x6a>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	e000      	b.n	800e8dc <netconn_write_vectors_partly+0x6c>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e8e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d005      	beq.n	800e8f4 <netconn_write_vectors_partly+0x84>
 800e8e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d102      	bne.n	800e8f4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e8ee:	f06f 0305 	mvn.w	r3, #5
 800e8f2:	e064      	b.n	800e9be <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800e8fc:	e015      	b.n	800e92a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e900:	00db      	lsls	r3, r3, #3
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	4413      	add	r3, r2
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e90a:	4413      	add	r3, r2
 800e90c:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800e90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	4413      	add	r3, r2
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d202      	bcs.n	800e924 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e91e:	f06f 0305 	mvn.w	r3, #5
 800e922:	e04c      	b.n	800e9be <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e926:	3301      	adds	r3, #1
 800e928:	643b      	str	r3, [r7, #64]	@ 0x40
 800e92a:	88fb      	ldrh	r3, [r7, #6]
 800e92c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e92e:	429a      	cmp	r2, r3
 800e930:	dbe5      	blt.n	800e8fe <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	e040      	b.n	800e9be <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e93c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e93e:	2b00      	cmp	r3, #0
 800e940:	da0a      	bge.n	800e958 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e944:	2b00      	cmp	r3, #0
 800e946:	d102      	bne.n	800e94e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e948:	f06f 0305 	mvn.w	r3, #5
 800e94c:	e037      	b.n	800e9be <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e94e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e952:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800e954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e956:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e960:	88fb      	ldrh	r3, [r7, #6]
 800e962:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e964:	2300      	movs	r3, #0
 800e966:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e968:	797b      	ldrb	r3, [r7, #5]
 800e96a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e96e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e970:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e972:	2300      	movs	r3, #0
 800e974:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e976:	f107 0314 	add.w	r3, r7, #20
 800e97a:	4619      	mov	r1, r3
 800e97c:	4816      	ldr	r0, [pc, #88]	@ (800e9d8 <netconn_write_vectors_partly+0x168>)
 800e97e:	f7ff fb13 	bl	800dfa8 <netconn_apimsg>
 800e982:	4603      	mov	r3, r0
 800e984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800e988:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d114      	bne.n	800e9ba <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e99a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e99c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10a      	bne.n	800e9ba <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d006      	beq.n	800e9ba <netconn_write_vectors_partly+0x14a>
 800e9ac:	4b06      	ldr	r3, [pc, #24]	@ (800e9c8 <netconn_write_vectors_partly+0x158>)
 800e9ae:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e9b2:	490a      	ldr	r1, [pc, #40]	@ (800e9dc <netconn_write_vectors_partly+0x16c>)
 800e9b4:	4806      	ldr	r0, [pc, #24]	@ (800e9d0 <netconn_write_vectors_partly+0x160>)
 800e9b6:	f00f f9fd 	bl	801ddb4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e9ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3748      	adds	r7, #72	@ 0x48
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	0801ede4 	.word	0x0801ede4
 800e9cc:	0801f0bc 	.word	0x0801f0bc
 800e9d0:	0801ee3c 	.word	0x0801ee3c
 800e9d4:	0801f0d8 	.word	0x0801f0d8
 800e9d8:	08010099 	.word	0x08010099
 800e9dc:	0801f0fc 	.word	0x0801f0fc

0800e9e0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08c      	sub	sp, #48	@ 0x30
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d109      	bne.n	800ea06 <netconn_close_shutdown+0x26>
 800e9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ea30 <netconn_close_shutdown+0x50>)
 800e9f4:	f240 4247 	movw	r2, #1095	@ 0x447
 800e9f8:	490e      	ldr	r1, [pc, #56]	@ (800ea34 <netconn_close_shutdown+0x54>)
 800e9fa:	480f      	ldr	r0, [pc, #60]	@ (800ea38 <netconn_close_shutdown+0x58>)
 800e9fc:	f00f f9da 	bl	801ddb4 <iprintf>
 800ea00:	f06f 030f 	mvn.w	r3, #15
 800ea04:	e010      	b.n	800ea28 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ea0a:	78fb      	ldrb	r3, [r7, #3]
 800ea0c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ea0e:	2329      	movs	r3, #41	@ 0x29
 800ea10:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ea12:	f107 030c 	add.w	r3, r7, #12
 800ea16:	4619      	mov	r1, r3
 800ea18:	4808      	ldr	r0, [pc, #32]	@ (800ea3c <netconn_close_shutdown+0x5c>)
 800ea1a:	f7ff fac5 	bl	800dfa8 <netconn_apimsg>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ea24:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3730      	adds	r7, #48	@ 0x30
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	0801ede4 	.word	0x0801ede4
 800ea34:	0801f120 	.word	0x0801f120
 800ea38:	0801ee3c 	.word	0x0801ee3c
 800ea3c:	080102bd 	.word	0x080102bd

0800ea40 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d101      	bne.n	800ea52 <netconn_err+0x12>
    return ERR_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e00d      	b.n	800ea6e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ea52:	f00e ff87 	bl	801d964 <sys_arch_protect>
 800ea56:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	7a1b      	ldrb	r3, [r3, #8]
 800ea5c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f00e ff8b 	bl	801d980 <sys_arch_unprotect>
  return err;
 800ea6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
	...

0800ea78 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ea82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea86:	f113 0f0d 	cmn.w	r3, #13
 800ea8a:	d009      	beq.n	800eaa0 <lwip_netconn_err_to_msg+0x28>
 800ea8c:	f113 0f0d 	cmn.w	r3, #13
 800ea90:	dc0c      	bgt.n	800eaac <lwip_netconn_err_to_msg+0x34>
 800ea92:	f113 0f0f 	cmn.w	r3, #15
 800ea96:	d007      	beq.n	800eaa8 <lwip_netconn_err_to_msg+0x30>
 800ea98:	f113 0f0e 	cmn.w	r3, #14
 800ea9c:	d002      	beq.n	800eaa4 <lwip_netconn_err_to_msg+0x2c>
 800ea9e:	e005      	b.n	800eaac <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800eaa0:	4b0a      	ldr	r3, [pc, #40]	@ (800eacc <lwip_netconn_err_to_msg+0x54>)
 800eaa2:	e00e      	b.n	800eac2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800eaa4:	4b0a      	ldr	r3, [pc, #40]	@ (800ead0 <lwip_netconn_err_to_msg+0x58>)
 800eaa6:	e00c      	b.n	800eac2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800eaa8:	4b0a      	ldr	r3, [pc, #40]	@ (800ead4 <lwip_netconn_err_to_msg+0x5c>)
 800eaaa:	e00a      	b.n	800eac2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800eaac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d005      	beq.n	800eac0 <lwip_netconn_err_to_msg+0x48>
 800eab4:	4b08      	ldr	r3, [pc, #32]	@ (800ead8 <lwip_netconn_err_to_msg+0x60>)
 800eab6:	227d      	movs	r2, #125	@ 0x7d
 800eab8:	4908      	ldr	r1, [pc, #32]	@ (800eadc <lwip_netconn_err_to_msg+0x64>)
 800eaba:	4809      	ldr	r0, [pc, #36]	@ (800eae0 <lwip_netconn_err_to_msg+0x68>)
 800eabc:	f00f f97a 	bl	801ddb4 <iprintf>
      return NULL;
 800eac0:	2300      	movs	r3, #0
  }
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	08022710 	.word	0x08022710
 800ead0:	08022711 	.word	0x08022711
 800ead4:	08022712 	.word	0x08022712
 800ead8:	0801f13c 	.word	0x0801f13c
 800eadc:	0801f170 	.word	0x0801f170
 800eae0:	0801f180 	.word	0x0801f180

0800eae4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d105      	bne.n	800eb00 <lwip_netconn_is_err_msg+0x1c>
 800eaf4:	4b12      	ldr	r3, [pc, #72]	@ (800eb40 <lwip_netconn_is_err_msg+0x5c>)
 800eaf6:	2285      	movs	r2, #133	@ 0x85
 800eaf8:	4912      	ldr	r1, [pc, #72]	@ (800eb44 <lwip_netconn_is_err_msg+0x60>)
 800eafa:	4813      	ldr	r0, [pc, #76]	@ (800eb48 <lwip_netconn_is_err_msg+0x64>)
 800eafc:	f00f f95a 	bl	801ddb4 <iprintf>

  if (msg == &netconn_aborted) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a12      	ldr	r2, [pc, #72]	@ (800eb4c <lwip_netconn_is_err_msg+0x68>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d104      	bne.n	800eb12 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	22f3      	movs	r2, #243	@ 0xf3
 800eb0c:	701a      	strb	r2, [r3, #0]
    return 1;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e012      	b.n	800eb38 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	4a0e      	ldr	r2, [pc, #56]	@ (800eb50 <lwip_netconn_is_err_msg+0x6c>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d104      	bne.n	800eb24 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	22f2      	movs	r2, #242	@ 0xf2
 800eb1e:	701a      	strb	r2, [r3, #0]
    return 1;
 800eb20:	2301      	movs	r3, #1
 800eb22:	e009      	b.n	800eb38 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	4a0b      	ldr	r2, [pc, #44]	@ (800eb54 <lwip_netconn_is_err_msg+0x70>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d104      	bne.n	800eb36 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	22f1      	movs	r2, #241	@ 0xf1
 800eb30:	701a      	strb	r2, [r3, #0]
    return 1;
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	0801f13c 	.word	0x0801f13c
 800eb44:	0801f1a8 	.word	0x0801f1a8
 800eb48:	0801f180 	.word	0x0801f180
 800eb4c:	08022710 	.word	0x08022710
 800eb50:	08022711 	.word	0x08022711
 800eb54:	08022712 	.word	0x08022712

0800eb58 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b088      	sub	sp, #32
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d105      	bne.n	800eb78 <recv_udp+0x20>
 800eb6c:	4b34      	ldr	r3, [pc, #208]	@ (800ec40 <recv_udp+0xe8>)
 800eb6e:	22e5      	movs	r2, #229	@ 0xe5
 800eb70:	4934      	ldr	r1, [pc, #208]	@ (800ec44 <recv_udp+0xec>)
 800eb72:	4835      	ldr	r0, [pc, #212]	@ (800ec48 <recv_udp+0xf0>)
 800eb74:	f00f f91e 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d105      	bne.n	800eb8a <recv_udp+0x32>
 800eb7e:	4b30      	ldr	r3, [pc, #192]	@ (800ec40 <recv_udp+0xe8>)
 800eb80:	22e6      	movs	r2, #230	@ 0xe6
 800eb82:	4932      	ldr	r1, [pc, #200]	@ (800ec4c <recv_udp+0xf4>)
 800eb84:	4830      	ldr	r0, [pc, #192]	@ (800ec48 <recv_udp+0xf0>)
 800eb86:	f00f f915 	bl	801ddb4 <iprintf>
  conn = (struct netconn *)arg;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d103      	bne.n	800eb9c <recv_udp+0x44>
    pbuf_free(p);
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f005 f8cb 	bl	8013d30 <pbuf_free>
    return;
 800eb9a:	e04d      	b.n	800ec38 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d005      	beq.n	800ebb2 <recv_udp+0x5a>
 800eba6:	4b26      	ldr	r3, [pc, #152]	@ (800ec40 <recv_udp+0xe8>)
 800eba8:	22ee      	movs	r2, #238	@ 0xee
 800ebaa:	4929      	ldr	r1, [pc, #164]	@ (800ec50 <recv_udp+0xf8>)
 800ebac:	4826      	ldr	r0, [pc, #152]	@ (800ec48 <recv_udp+0xf0>)
 800ebae:	f00f f901 	bl	801ddb4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	3310      	adds	r3, #16
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f00e fdca 	bl	801d750 <sys_mbox_valid>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d103      	bne.n	800ebca <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f005 f8b4 	bl	8013d30 <pbuf_free>
    return;
 800ebc8:	e036      	b.n	800ec38 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ebca:	2006      	movs	r0, #6
 800ebcc:	f004 f960 	bl	8012e90 <memp_malloc>
 800ebd0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d103      	bne.n	800ebe0 <recv_udp+0x88>
    pbuf_free(p);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f005 f8a9 	bl	8013d30 <pbuf_free>
    return;
 800ebde:	e02b      	b.n	800ec38 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <recv_udp+0xa0>
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	e000      	b.n	800ebfa <recv_udp+0xa2>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	69ba      	ldr	r2, [r7, #24]
 800ebfc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ec02:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	891b      	ldrh	r3, [r3, #8]
 800ec08:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	3310      	adds	r3, #16
 800ec0e:	69b9      	ldr	r1, [r7, #24]
 800ec10:	4618      	mov	r0, r3
 800ec12:	f00e fd3b 	bl	801d68c <sys_mbox_trypost>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d003      	beq.n	800ec24 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ec1c:	69b8      	ldr	r0, [r7, #24]
 800ec1e:	f001 fbf7 	bl	8010410 <netbuf_delete>
    return;
 800ec22:	e009      	b.n	800ec38 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <recv_udp+0xe0>
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec30:	8afa      	ldrh	r2, [r7, #22]
 800ec32:	2100      	movs	r1, #0
 800ec34:	69f8      	ldr	r0, [r7, #28]
 800ec36:	4798      	blx	r3
  }
}
 800ec38:	3720      	adds	r7, #32
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	0801f13c 	.word	0x0801f13c
 800ec44:	0801f1b4 	.word	0x0801f1b4
 800ec48:	0801f180 	.word	0x0801f180
 800ec4c:	0801f1d8 	.word	0x0801f1d8
 800ec50:	0801f1f8 	.word	0x0801f1f8

0800ec54 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d106      	bne.n	800ec76 <recv_tcp+0x22>
 800ec68:	4b36      	ldr	r3, [pc, #216]	@ (800ed44 <recv_tcp+0xf0>)
 800ec6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ec6e:	4936      	ldr	r1, [pc, #216]	@ (800ed48 <recv_tcp+0xf4>)
 800ec70:	4836      	ldr	r0, [pc, #216]	@ (800ed4c <recv_tcp+0xf8>)
 800ec72:	f00f f89f 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d106      	bne.n	800ec8a <recv_tcp+0x36>
 800ec7c:	4b31      	ldr	r3, [pc, #196]	@ (800ed44 <recv_tcp+0xf0>)
 800ec7e:	f240 122d 	movw	r2, #301	@ 0x12d
 800ec82:	4933      	ldr	r1, [pc, #204]	@ (800ed50 <recv_tcp+0xfc>)
 800ec84:	4831      	ldr	r0, [pc, #196]	@ (800ed4c <recv_tcp+0xf8>)
 800ec86:	f00f f895 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ec8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d006      	beq.n	800eca0 <recv_tcp+0x4c>
 800ec92:	4b2c      	ldr	r3, [pc, #176]	@ (800ed44 <recv_tcp+0xf0>)
 800ec94:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800ec98:	492e      	ldr	r1, [pc, #184]	@ (800ed54 <recv_tcp+0x100>)
 800ec9a:	482c      	ldr	r0, [pc, #176]	@ (800ed4c <recv_tcp+0xf8>)
 800ec9c:	f00f f88a 	bl	801ddb4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d102      	bne.n	800ecb0 <recv_tcp+0x5c>
    return ERR_VAL;
 800ecaa:	f06f 0305 	mvn.w	r3, #5
 800ecae:	e045      	b.n	800ed3c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d006      	beq.n	800ecc8 <recv_tcp+0x74>
 800ecba:	4b22      	ldr	r3, [pc, #136]	@ (800ed44 <recv_tcp+0xf0>)
 800ecbc:	f240 1235 	movw	r2, #309	@ 0x135
 800ecc0:	4925      	ldr	r1, [pc, #148]	@ (800ed58 <recv_tcp+0x104>)
 800ecc2:	4822      	ldr	r0, [pc, #136]	@ (800ed4c <recv_tcp+0xf8>)
 800ecc4:	f00f f876 	bl	801ddb4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	3310      	adds	r3, #16
 800eccc:	4618      	mov	r0, r3
 800ecce:	f00e fd3f 	bl	801d750 <sys_mbox_valid>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d10d      	bne.n	800ecf4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d008      	beq.n	800ecf0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	891b      	ldrh	r3, [r3, #8]
 800ece2:	4619      	mov	r1, r3
 800ece4:	68b8      	ldr	r0, [r7, #8]
 800ece6:	f005 ffeb 	bl	8014cc0 <tcp_recved>
      pbuf_free(p);
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f005 f820 	bl	8013d30 <pbuf_free>
    }
    return ERR_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	e023      	b.n	800ed3c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d005      	beq.n	800ed06 <recv_tcp+0xb2>
    msg = p;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	891b      	ldrh	r3, [r3, #8]
 800ed02:	83fb      	strh	r3, [r7, #30]
 800ed04:	e003      	b.n	800ed0e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ed06:	4b15      	ldr	r3, [pc, #84]	@ (800ed5c <recv_tcp+0x108>)
 800ed08:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	3310      	adds	r3, #16
 800ed12:	69b9      	ldr	r1, [r7, #24]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f00e fcb9 	bl	801d68c <sys_mbox_trypost>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ed20:	f04f 33ff 	mov.w	r3, #4294967295
 800ed24:	e00a      	b.n	800ed3c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d005      	beq.n	800ed3a <recv_tcp+0xe6>
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed32:	8bfa      	ldrh	r2, [r7, #30]
 800ed34:	2100      	movs	r1, #0
 800ed36:	6978      	ldr	r0, [r7, #20]
 800ed38:	4798      	blx	r3
  }

  return ERR_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3720      	adds	r7, #32
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	0801f13c 	.word	0x0801f13c
 800ed48:	0801f218 	.word	0x0801f218
 800ed4c:	0801f180 	.word	0x0801f180
 800ed50:	0801f23c 	.word	0x0801f23c
 800ed54:	0801f25c 	.word	0x0801f25c
 800ed58:	0801f274 	.word	0x0801f274
 800ed5c:	08022712 	.word	0x08022712

0800ed60 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d106      	bne.n	800ed82 <poll_tcp+0x22>
 800ed74:	4b2a      	ldr	r3, [pc, #168]	@ (800ee20 <poll_tcp+0xc0>)
 800ed76:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800ed7a:	492a      	ldr	r1, [pc, #168]	@ (800ee24 <poll_tcp+0xc4>)
 800ed7c:	482a      	ldr	r0, [pc, #168]	@ (800ee28 <poll_tcp+0xc8>)
 800ed7e:	f00f f819 	bl	801ddb4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	785b      	ldrb	r3, [r3, #1]
 800ed86:	2b01      	cmp	r3, #1
 800ed88:	d104      	bne.n	800ed94 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ed8a:	2101      	movs	r1, #1
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f000 ffb5 	bl	800fcfc <lwip_netconn_do_writemore>
 800ed92:	e016      	b.n	800edc2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	785b      	ldrb	r3, [r3, #1]
 800ed98:	2b04      	cmp	r3, #4
 800ed9a:	d112      	bne.n	800edc2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6a1b      	ldr	r3, [r3, #32]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00a      	beq.n	800edba <poll_tcp+0x5a>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6a1b      	ldr	r3, [r3, #32]
 800eda8:	7a5b      	ldrb	r3, [r3, #9]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d005      	beq.n	800edba <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	6a1b      	ldr	r3, [r3, #32]
 800edb2:	7a5a      	ldrb	r2, [r3, #9]
 800edb4:	3a01      	subs	r2, #1
 800edb6:	b2d2      	uxtb	r2, r2
 800edb8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800edba:	2101      	movs	r1, #1
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f000 fbfb 	bl	800f5b8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	7f1b      	ldrb	r3, [r3, #28]
 800edc6:	f003 0310 	and.w	r3, r3, #16
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d022      	beq.n	800ee14 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d01e      	beq.n	800ee14 <poll_tcp+0xb4>
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800edde:	f640 3269 	movw	r2, #2921	@ 0xb69
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d916      	bls.n	800ee14 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800edee:	2b07      	cmp	r3, #7
 800edf0:	d810      	bhi.n	800ee14 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	7f1b      	ldrb	r3, [r3, #28]
 800edf6:	f023 0310 	bic.w	r3, r3, #16
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d005      	beq.n	800ee14 <poll_tcp+0xb4>
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	2102      	movs	r1, #2
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	0801f13c 	.word	0x0801f13c
 800ee24:	0801f294 	.word	0x0801f294
 800ee28:	0801f180 	.word	0x0801f180

0800ee2c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	4613      	mov	r3, r2
 800ee38:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d106      	bne.n	800ee52 <sent_tcp+0x26>
 800ee44:	4b21      	ldr	r3, [pc, #132]	@ (800eecc <sent_tcp+0xa0>)
 800ee46:	f240 1293 	movw	r2, #403	@ 0x193
 800ee4a:	4921      	ldr	r1, [pc, #132]	@ (800eed0 <sent_tcp+0xa4>)
 800ee4c:	4821      	ldr	r0, [pc, #132]	@ (800eed4 <sent_tcp+0xa8>)
 800ee4e:	f00e ffb1 	bl	801ddb4 <iprintf>

  if (conn) {
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d033      	beq.n	800eec0 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	785b      	ldrb	r3, [r3, #1]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d104      	bne.n	800ee6a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ee60:	2101      	movs	r1, #1
 800ee62:	6978      	ldr	r0, [r7, #20]
 800ee64:	f000 ff4a 	bl	800fcfc <lwip_netconn_do_writemore>
 800ee68:	e007      	b.n	800ee7a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	785b      	ldrb	r3, [r3, #1]
 800ee6e:	2b04      	cmp	r3, #4
 800ee70:	d103      	bne.n	800ee7a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ee72:	2101      	movs	r1, #1
 800ee74:	6978      	ldr	r0, [r7, #20]
 800ee76:	f000 fb9f 	bl	800f5b8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d01e      	beq.n	800eec0 <sent_tcp+0x94>
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ee8a:	f640 3269 	movw	r2, #2921	@ 0xb69
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d916      	bls.n	800eec0 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ee9a:	2b07      	cmp	r3, #7
 800ee9c:	d810      	bhi.n	800eec0 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	7f1b      	ldrb	r3, [r3, #28]
 800eea2:	f023 0310 	bic.w	r3, r3, #16
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d005      	beq.n	800eec0 <sent_tcp+0x94>
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeb8:	88fa      	ldrh	r2, [r7, #6]
 800eeba:	2102      	movs	r1, #2
 800eebc:	6978      	ldr	r0, [r7, #20]
 800eebe:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	0801f13c 	.word	0x0801f13c
 800eed0:	0801f294 	.word	0x0801f294
 800eed4:	0801f180 	.word	0x0801f180

0800eed8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <err_tcp+0x24>
 800eeee:	4b5f      	ldr	r3, [pc, #380]	@ (800f06c <err_tcp+0x194>)
 800eef0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800eef4:	495e      	ldr	r1, [pc, #376]	@ (800f070 <err_tcp+0x198>)
 800eef6:	485f      	ldr	r0, [pc, #380]	@ (800f074 <err_tcp+0x19c>)
 800eef8:	f00e ff5c 	bl	801ddb4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800eefc:	f00e fd32 	bl	801d964 <sys_arch_protect>
 800ef00:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	2200      	movs	r2, #0
 800ef06:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	78fa      	ldrb	r2, [r7, #3]
 800ef0c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	7f1b      	ldrb	r3, [r3, #28]
 800ef12:	f043 0301 	orr.w	r3, r3, #1
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	785b      	ldrb	r3, [r3, #1]
 800ef20:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	2200      	movs	r2, #0
 800ef26:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ef28:	69b8      	ldr	r0, [r7, #24]
 800ef2a:	f00e fd29 	bl	801d980 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d005      	beq.n	800ef42 <err_tcp+0x6a>
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	2104      	movs	r1, #4
 800ef3e:	69f8      	ldr	r0, [r7, #28]
 800ef40:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d005      	beq.n	800ef56 <err_tcp+0x7e>
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef4e:	2200      	movs	r2, #0
 800ef50:	2100      	movs	r1, #0
 800ef52:	69f8      	ldr	r0, [r7, #28]
 800ef54:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d005      	beq.n	800ef6a <err_tcp+0x92>
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef62:	2200      	movs	r2, #0
 800ef64:	2102      	movs	r1, #2
 800ef66:	69f8      	ldr	r0, [r7, #28]
 800ef68:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ef6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fd82 	bl	800ea78 <lwip_netconn_err_to_msg>
 800ef74:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	3310      	adds	r3, #16
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f00e fbe8 	bl	801d750 <sys_mbox_valid>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d005      	beq.n	800ef92 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	3310      	adds	r3, #16
 800ef8a:	6939      	ldr	r1, [r7, #16]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f00e fb7d 	bl	801d68c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	3314      	adds	r3, #20
 800ef96:	4618      	mov	r0, r3
 800ef98:	f00e fbda 	bl	801d750 <sys_mbox_valid>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d005      	beq.n	800efae <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	3314      	adds	r3, #20
 800efa6:	6939      	ldr	r1, [r7, #16]
 800efa8:	4618      	mov	r0, r3
 800efaa:	f00e fb6f 	bl	801d68c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800efae:	7dfb      	ldrb	r3, [r7, #23]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d005      	beq.n	800efc0 <err_tcp+0xe8>
 800efb4:	7dfb      	ldrb	r3, [r7, #23]
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d002      	beq.n	800efc0 <err_tcp+0xe8>
 800efba:	7dfb      	ldrb	r3, [r7, #23]
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d143      	bne.n	800f048 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	7f1b      	ldrb	r3, [r3, #28]
 800efc4:	f003 0304 	and.w	r3, r3, #4
 800efc8:	2b00      	cmp	r3, #0
 800efca:	bf14      	ite	ne
 800efcc:	2301      	movne	r3, #1
 800efce:	2300      	moveq	r3, #0
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	7f1b      	ldrb	r3, [r3, #28]
 800efd8:	f023 0304 	bic.w	r3, r3, #4
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d13b      	bne.n	800f060 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800efe8:	69fb      	ldr	r3, [r7, #28]
 800efea:	6a1b      	ldr	r3, [r3, #32]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <err_tcp+0x126>
 800eff0:	4b1e      	ldr	r3, [pc, #120]	@ (800f06c <err_tcp+0x194>)
 800eff2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800eff6:	4920      	ldr	r1, [pc, #128]	@ (800f078 <err_tcp+0x1a0>)
 800eff8:	481e      	ldr	r0, [pc, #120]	@ (800f074 <err_tcp+0x19c>)
 800effa:	f00e fedb 	bl	801ddb4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800effe:	7dfb      	ldrb	r3, [r7, #23]
 800f000:	2b04      	cmp	r3, #4
 800f002:	d104      	bne.n	800f00e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	6a1b      	ldr	r3, [r3, #32]
 800f008:	2200      	movs	r2, #0
 800f00a:	711a      	strb	r2, [r3, #4]
 800f00c:	e003      	b.n	800f016 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	6a1b      	ldr	r3, [r3, #32]
 800f012:	78fa      	ldrb	r2, [r7, #3]
 800f014:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	6a1b      	ldr	r3, [r3, #32]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	330c      	adds	r3, #12
 800f01e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f020:	68b8      	ldr	r0, [r7, #8]
 800f022:	f00e fc23 	bl	801d86c <sys_sem_valid>
 800f026:	4603      	mov	r3, r0
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d106      	bne.n	800f03a <err_tcp+0x162>
 800f02c:	4b0f      	ldr	r3, [pc, #60]	@ (800f06c <err_tcp+0x194>)
 800f02e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800f032:	4912      	ldr	r1, [pc, #72]	@ (800f07c <err_tcp+0x1a4>)
 800f034:	480f      	ldr	r0, [pc, #60]	@ (800f074 <err_tcp+0x19c>)
 800f036:	f00e febd 	bl	801ddb4 <iprintf>
      conn->current_msg = NULL;
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	2200      	movs	r2, #0
 800f03e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f040:	68b8      	ldr	r0, [r7, #8]
 800f042:	f00e fbf9 	bl	801d838 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f046:	e00b      	b.n	800f060 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	6a1b      	ldr	r3, [r3, #32]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d008      	beq.n	800f062 <err_tcp+0x18a>
 800f050:	4b06      	ldr	r3, [pc, #24]	@ (800f06c <err_tcp+0x194>)
 800f052:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800f056:	490a      	ldr	r1, [pc, #40]	@ (800f080 <err_tcp+0x1a8>)
 800f058:	4806      	ldr	r0, [pc, #24]	@ (800f074 <err_tcp+0x19c>)
 800f05a:	f00e feab 	bl	801ddb4 <iprintf>
  }
}
 800f05e:	e000      	b.n	800f062 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f060:	bf00      	nop
}
 800f062:	bf00      	nop
 800f064:	3720      	adds	r7, #32
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	0801f13c 	.word	0x0801f13c
 800f070:	0801f294 	.word	0x0801f294
 800f074:	0801f180 	.word	0x0801f180
 800f078:	0801f2a4 	.word	0x0801f2a4
 800f07c:	0801f2c0 	.word	0x0801f2c0
 800f080:	0801f2dc 	.word	0x0801f2dc

0800f084 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f092:	6879      	ldr	r1, [r7, #4]
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f006 fcdf 	bl	8015a58 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f09a:	490a      	ldr	r1, [pc, #40]	@ (800f0c4 <setup_tcp+0x40>)
 800f09c:	68f8      	ldr	r0, [r7, #12]
 800f09e:	f006 fced 	bl	8015a7c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f0a2:	4909      	ldr	r1, [pc, #36]	@ (800f0c8 <setup_tcp+0x44>)
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f006 fd0b 	bl	8015ac0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	4907      	ldr	r1, [pc, #28]	@ (800f0cc <setup_tcp+0x48>)
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f006 fd62 	bl	8015b78 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f0b4:	4906      	ldr	r1, [pc, #24]	@ (800f0d0 <setup_tcp+0x4c>)
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f006 fd24 	bl	8015b04 <tcp_err>
}
 800f0bc:	bf00      	nop
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	0800ec55 	.word	0x0800ec55
 800f0c8:	0800ee2d 	.word	0x0800ee2d
 800f0cc:	0800ed61 	.word	0x0800ed61
 800f0d0:	0800eed9 	.word	0x0800eed9

0800f0d4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f0d4:	b590      	push	{r4, r7, lr}
 800f0d6:	b089      	sub	sp, #36	@ 0x24
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	4613      	mov	r3, r2
 800f0e0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d102      	bne.n	800f0f2 <accept_function+0x1e>
    return ERR_VAL;
 800f0ec:	f06f 0305 	mvn.w	r3, #5
 800f0f0:	e0a1      	b.n	800f236 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	3314      	adds	r3, #20
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f00e fb2a 	bl	801d750 <sys_mbox_valid>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d102      	bne.n	800f108 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f102:	f06f 0305 	mvn.w	r3, #5
 800f106:	e096      	b.n	800f236 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d11b      	bne.n	800f146 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	f103 0414 	add.w	r4, r3, #20
 800f114:	f06f 000c 	mvn.w	r0, #12
 800f118:	f7ff fcae 	bl	800ea78 <lwip_netconn_err_to_msg>
 800f11c:	4603      	mov	r3, r0
 800f11e:	4619      	mov	r1, r3
 800f120:	4620      	mov	r0, r4
 800f122:	f00e fab3 	bl	801d68c <sys_mbox_trypost>
 800f126:	4603      	mov	r3, r0
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d109      	bne.n	800f140 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f130:	2b00      	cmp	r3, #0
 800f132:	d005      	beq.n	800f140 <accept_function+0x6c>
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f138:	2200      	movs	r2, #0
 800f13a:	2100      	movs	r1, #0
 800f13c:	69f8      	ldr	r0, [r7, #28]
 800f13e:	4798      	blx	r3
    }
    return ERR_VAL;
 800f140:	f06f 0305 	mvn.w	r3, #5
 800f144:	e077      	b.n	800f236 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d006      	beq.n	800f15c <accept_function+0x88>
 800f14e:	4b3c      	ldr	r3, [pc, #240]	@ (800f240 <accept_function+0x16c>)
 800f150:	f240 222a 	movw	r2, #554	@ 0x22a
 800f154:	493b      	ldr	r1, [pc, #236]	@ (800f244 <accept_function+0x170>)
 800f156:	483c      	ldr	r0, [pc, #240]	@ (800f248 <accept_function+0x174>)
 800f158:	f00e fe2c 	bl	801ddb4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	781a      	ldrb	r2, [r3, #0]
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f164:	4619      	mov	r1, r3
 800f166:	4610      	mov	r0, r2
 800f168:	f000 f8f0 	bl	800f34c <netconn_alloc>
 800f16c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d11b      	bne.n	800f1ac <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	f103 0414 	add.w	r4, r3, #20
 800f17a:	f06f 000c 	mvn.w	r0, #12
 800f17e:	f7ff fc7b 	bl	800ea78 <lwip_netconn_err_to_msg>
 800f182:	4603      	mov	r3, r0
 800f184:	4619      	mov	r1, r3
 800f186:	4620      	mov	r0, r4
 800f188:	f00e fa80 	bl	801d68c <sys_mbox_trypost>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d109      	bne.n	800f1a6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f196:	2b00      	cmp	r3, #0
 800f198:	d005      	beq.n	800f1a6 <accept_function+0xd2>
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f19e:	2200      	movs	r2, #0
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	69f8      	ldr	r0, [r7, #28]
 800f1a4:	4798      	blx	r3
    }
    return ERR_MEM;
 800f1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1aa:	e044      	b.n	800f236 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f1b2:	69b8      	ldr	r0, [r7, #24]
 800f1b4:	f7ff ff66 	bl	800f084 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	3314      	adds	r3, #20
 800f1bc:	69b9      	ldr	r1, [r7, #24]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f00e fa64 	bl	801d68c <sys_mbox_trypost>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d02a      	beq.n	800f220 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	6978      	ldr	r0, [r7, #20]
 800f1d4:	f006 fc40 	bl	8015a58 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f1d8:	2100      	movs	r1, #0
 800f1da:	6978      	ldr	r0, [r7, #20]
 800f1dc:	f006 fc4e 	bl	8015a7c <tcp_recv>
    tcp_sent(pcb, NULL);
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	6978      	ldr	r0, [r7, #20]
 800f1e4:	f006 fc6c 	bl	8015ac0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	6978      	ldr	r0, [r7, #20]
 800f1ee:	f006 fcc3 	bl	8015b78 <tcp_poll>
    tcp_err(pcb, NULL);
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	6978      	ldr	r0, [r7, #20]
 800f1f6:	f006 fc85 	bl	8015b04 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	3310      	adds	r3, #16
 800f204:	4618      	mov	r0, r3
 800f206:	f00e fa2f 	bl	801d668 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	3310      	adds	r3, #16
 800f20e:	4618      	mov	r0, r3
 800f210:	f00e faaf 	bl	801d772 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f214:	69b8      	ldr	r0, [r7, #24]
 800f216:	f000 f907 	bl	800f428 <netconn_free>
    return ERR_MEM;
 800f21a:	f04f 33ff 	mov.w	r3, #4294967295
 800f21e:	e00a      	b.n	800f236 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f224:	2b00      	cmp	r3, #0
 800f226:	d005      	beq.n	800f234 <accept_function+0x160>
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f22c:	2200      	movs	r2, #0
 800f22e:	2100      	movs	r1, #0
 800f230:	69f8      	ldr	r0, [r7, #28]
 800f232:	4798      	blx	r3
  }

  return ERR_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3724      	adds	r7, #36	@ 0x24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd90      	pop	{r4, r7, pc}
 800f23e:	bf00      	nop
 800f240:	0801f13c 	.word	0x0801f13c
 800f244:	0801f2f8 	.word	0x0801f2f8
 800f248:	0801f180 	.word	0x0801f180

0800f24c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f24c:	b590      	push	{r4, r7, lr}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f254:	2300      	movs	r3, #0
 800f256:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d006      	beq.n	800f270 <pcb_new+0x24>
 800f262:	4b2b      	ldr	r3, [pc, #172]	@ (800f310 <pcb_new+0xc4>)
 800f264:	f240 2265 	movw	r2, #613	@ 0x265
 800f268:	492a      	ldr	r1, [pc, #168]	@ (800f314 <pcb_new+0xc8>)
 800f26a:	482b      	ldr	r0, [pc, #172]	@ (800f318 <pcb_new+0xcc>)
 800f26c:	f00e fda2 	bl	801ddb4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f27a:	2b10      	cmp	r3, #16
 800f27c:	d022      	beq.n	800f2c4 <pcb_new+0x78>
 800f27e:	2b20      	cmp	r3, #32
 800f280:	d133      	bne.n	800f2ea <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681c      	ldr	r4, [r3, #0]
 800f286:	7bfb      	ldrb	r3, [r7, #15]
 800f288:	4618      	mov	r0, r3
 800f28a:	f00b feaa 	bl	801afe2 <udp_new_ip_type>
 800f28e:	4603      	mov	r3, r0
 800f290:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d02a      	beq.n	800f2f2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b22      	cmp	r3, #34	@ 0x22
 800f2a4:	d104      	bne.n	800f2b0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	2201      	movs	r2, #1
 800f2ae:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	6858      	ldr	r0, [r3, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4917      	ldr	r1, [pc, #92]	@ (800f31c <pcb_new+0xd0>)
 800f2be:	f00b fe17 	bl	801aef0 <udp_recv>
      }
      break;
 800f2c2:	e016      	b.n	800f2f2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681c      	ldr	r4, [r3, #0]
 800f2c8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f006 fbb6 	bl	8015a3c <tcp_new_ip_type>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00b      	beq.n	800f2f6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff fece 	bl	800f084 <setup_tcp>
      }
      break;
 800f2e8:	e005      	b.n	800f2f6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	22fa      	movs	r2, #250	@ 0xfa
 800f2ee:	711a      	strb	r2, [r3, #4]
      return;
 800f2f0:	e00a      	b.n	800f308 <pcb_new+0xbc>
      break;
 800f2f2:	bf00      	nop
 800f2f4:	e000      	b.n	800f2f8 <pcb_new+0xac>
      break;
 800f2f6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d102      	bne.n	800f308 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	22ff      	movs	r2, #255	@ 0xff
 800f306:	711a      	strb	r2, [r3, #4]
  }
}
 800f308:	3714      	adds	r7, #20
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd90      	pop	{r4, r7, pc}
 800f30e:	bf00      	nop
 800f310:	0801f13c 	.word	0x0801f13c
 800f314:	0801f320 	.word	0x0801f320
 800f318:	0801f180 	.word	0x0801f180
 800f31c:	0800eb59 	.word	0x0800eb59

0800f320 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d102      	bne.n	800f342 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f7ff ff85 	bl	800f24c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f342:	bf00      	nop
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
	...

0800f34c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b086      	sub	sp, #24
 800f350:	af00      	add	r7, sp, #0
 800f352:	4603      	mov	r3, r0
 800f354:	6039      	str	r1, [r7, #0]
 800f356:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f358:	2300      	movs	r3, #0
 800f35a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f35c:	2007      	movs	r0, #7
 800f35e:	f003 fd97 	bl	8012e90 <memp_malloc>
 800f362:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <netconn_alloc+0x22>
    return NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	e052      	b.n	800f414 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2200      	movs	r2, #0
 800f372:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	79fa      	ldrb	r2, [r7, #7]
 800f378:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f380:	79fb      	ldrb	r3, [r7, #7]
 800f382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f386:	2b10      	cmp	r3, #16
 800f388:	d004      	beq.n	800f394 <netconn_alloc+0x48>
 800f38a:	2b20      	cmp	r3, #32
 800f38c:	d105      	bne.n	800f39a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f38e:	2306      	movs	r3, #6
 800f390:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f392:	e00a      	b.n	800f3aa <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f394:	2306      	movs	r3, #6
 800f396:	617b      	str	r3, [r7, #20]
      break;
 800f398:	e007      	b.n	800f3aa <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f39a:	4b20      	ldr	r3, [pc, #128]	@ (800f41c <netconn_alloc+0xd0>)
 800f39c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800f3a0:	491f      	ldr	r1, [pc, #124]	@ (800f420 <netconn_alloc+0xd4>)
 800f3a2:	4820      	ldr	r0, [pc, #128]	@ (800f424 <netconn_alloc+0xd8>)
 800f3a4:	f00e fd06 	bl	801ddb4 <iprintf>
      goto free_and_return;
 800f3a8:	e02f      	b.n	800f40a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	3310      	adds	r3, #16
 800f3ae:	6979      	ldr	r1, [r7, #20]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f00e f93f 	bl	801d634 <sys_mbox_new>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d125      	bne.n	800f408 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	330c      	adds	r3, #12
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f00e f9e2 	bl	801d78c <sys_sem_new>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d005      	beq.n	800f3da <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	3310      	adds	r3, #16
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f00e f948 	bl	801d668 <sys_mbox_free>
    goto free_and_return;
 800f3d8:	e017      	b.n	800f40a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	3314      	adds	r3, #20
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f00e f9c7 	bl	801d772 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f3f0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	7cfa      	ldrb	r2, [r7, #19]
 800f402:	771a      	strb	r2, [r3, #28]
  return conn;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	e005      	b.n	800f414 <netconn_alloc+0xc8>
    goto free_and_return;
 800f408:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f40a:	68f9      	ldr	r1, [r7, #12]
 800f40c:	2007      	movs	r0, #7
 800f40e:	f003 fdb5 	bl	8012f7c <memp_free>
  return NULL;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	0801f13c 	.word	0x0801f13c
 800f420:	0801f340 	.word	0x0801f340
 800f424:	0801f180 	.word	0x0801f180

0800f428 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d006      	beq.n	800f446 <netconn_free+0x1e>
 800f438:	4b1b      	ldr	r3, [pc, #108]	@ (800f4a8 <netconn_free+0x80>)
 800f43a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f43e:	491b      	ldr	r1, [pc, #108]	@ (800f4ac <netconn_free+0x84>)
 800f440:	481b      	ldr	r0, [pc, #108]	@ (800f4b0 <netconn_free+0x88>)
 800f442:	f00e fcb7 	bl	801ddb4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3310      	adds	r3, #16
 800f44a:	4618      	mov	r0, r3
 800f44c:	f00e f980 	bl	801d750 <sys_mbox_valid>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d006      	beq.n	800f464 <netconn_free+0x3c>
 800f456:	4b14      	ldr	r3, [pc, #80]	@ (800f4a8 <netconn_free+0x80>)
 800f458:	f240 3223 	movw	r2, #803	@ 0x323
 800f45c:	4915      	ldr	r1, [pc, #84]	@ (800f4b4 <netconn_free+0x8c>)
 800f45e:	4814      	ldr	r0, [pc, #80]	@ (800f4b0 <netconn_free+0x88>)
 800f460:	f00e fca8 	bl	801ddb4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3314      	adds	r3, #20
 800f468:	4618      	mov	r0, r3
 800f46a:	f00e f971 	bl	801d750 <sys_mbox_valid>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d006      	beq.n	800f482 <netconn_free+0x5a>
 800f474:	4b0c      	ldr	r3, [pc, #48]	@ (800f4a8 <netconn_free+0x80>)
 800f476:	f240 3226 	movw	r2, #806	@ 0x326
 800f47a:	490f      	ldr	r1, [pc, #60]	@ (800f4b8 <netconn_free+0x90>)
 800f47c:	480c      	ldr	r0, [pc, #48]	@ (800f4b0 <netconn_free+0x88>)
 800f47e:	f00e fc99 	bl	801ddb4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	330c      	adds	r3, #12
 800f486:	4618      	mov	r0, r3
 800f488:	f00e f9e3 	bl	801d852 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	330c      	adds	r3, #12
 800f490:	4618      	mov	r0, r3
 800f492:	f00e f9fc 	bl	801d88e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	2007      	movs	r0, #7
 800f49a:	f003 fd6f 	bl	8012f7c <memp_free>
}
 800f49e:	bf00      	nop
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	0801f13c 	.word	0x0801f13c
 800f4ac:	0801f368 	.word	0x0801f368
 800f4b0:	0801f180 	.word	0x0801f180
 800f4b4:	0801f398 	.word	0x0801f398
 800f4b8:	0801f3d4 	.word	0x0801f3d4

0800f4bc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	3310      	adds	r3, #16
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f00e f941 	bl	801d750 <sys_mbox_valid>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d02f      	beq.n	800f534 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f4d4:	e018      	b.n	800f508 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f4de:	2b10      	cmp	r3, #16
 800f4e0:	d10e      	bne.n	800f500 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	f107 020f 	add.w	r2, r7, #15
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7ff fafa 	bl	800eae4 <lwip_netconn_is_err_msg>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d108      	bne.n	800f508 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f004 fc19 	bl	8013d30 <pbuf_free>
 800f4fe:	e003      	b.n	800f508 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 ff84 	bl	8010410 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3310      	adds	r3, #16
 800f50c:	f107 0210 	add.w	r2, r7, #16
 800f510:	4611      	mov	r1, r2
 800f512:	4618      	mov	r0, r3
 800f514:	f00e f905 	bl	801d722 <sys_arch_mbox_tryfetch>
 800f518:	4603      	mov	r3, r0
 800f51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51e:	d1da      	bne.n	800f4d6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	3310      	adds	r3, #16
 800f524:	4618      	mov	r0, r3
 800f526:	f00e f89f 	bl	801d668 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	3310      	adds	r3, #16
 800f52e:	4618      	mov	r0, r3
 800f530:	f00e f91f 	bl	801d772 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3314      	adds	r3, #20
 800f538:	4618      	mov	r0, r3
 800f53a:	f00e f909 	bl	801d750 <sys_mbox_valid>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d034      	beq.n	800f5ae <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f544:	e01d      	b.n	800f582 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	f107 020e 	add.w	r2, r7, #14
 800f54c:	4611      	mov	r1, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff fac8 	bl	800eae4 <lwip_netconn_is_err_msg>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	d113      	bne.n	800f582 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f55e:	6978      	ldr	r0, [r7, #20]
 800f560:	f7ff ffac 	bl	800f4bc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d007      	beq.n	800f57c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	4618      	mov	r0, r3
 800f572:	f005 f9dd 	bl	8014930 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2200      	movs	r2, #0
 800f57a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f57c:	6978      	ldr	r0, [r7, #20]
 800f57e:	f7ff ff53 	bl	800f428 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	3314      	adds	r3, #20
 800f586:	f107 0210 	add.w	r2, r7, #16
 800f58a:	4611      	mov	r1, r2
 800f58c:	4618      	mov	r0, r3
 800f58e:	f00e f8c8 	bl	801d722 <sys_arch_mbox_tryfetch>
 800f592:	4603      	mov	r3, r0
 800f594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f598:	d1d5      	bne.n	800f546 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3314      	adds	r3, #20
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f00e f862 	bl	801d668 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	3314      	adds	r3, #20
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f00e f8e2 	bl	801d772 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f5ae:	bf00      	nop
 800f5b0:	3718      	adds	r7, #24
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
	...

0800f5b8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d106      	bne.n	800f5dc <lwip_netconn_do_close_internal+0x24>
 800f5ce:	4b87      	ldr	r3, [pc, #540]	@ (800f7ec <lwip_netconn_do_close_internal+0x234>)
 800f5d0:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800f5d4:	4986      	ldr	r1, [pc, #536]	@ (800f7f0 <lwip_netconn_do_close_internal+0x238>)
 800f5d6:	4887      	ldr	r0, [pc, #540]	@ (800f7f4 <lwip_netconn_do_close_internal+0x23c>)
 800f5d8:	f00e fbec 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f5e4:	2b10      	cmp	r3, #16
 800f5e6:	d006      	beq.n	800f5f6 <lwip_netconn_do_close_internal+0x3e>
 800f5e8:	4b80      	ldr	r3, [pc, #512]	@ (800f7ec <lwip_netconn_do_close_internal+0x234>)
 800f5ea:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800f5ee:	4982      	ldr	r1, [pc, #520]	@ (800f7f8 <lwip_netconn_do_close_internal+0x240>)
 800f5f0:	4880      	ldr	r0, [pc, #512]	@ (800f7f4 <lwip_netconn_do_close_internal+0x23c>)
 800f5f2:	f00e fbdf 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	785b      	ldrb	r3, [r3, #1]
 800f5fa:	2b04      	cmp	r3, #4
 800f5fc:	d006      	beq.n	800f60c <lwip_netconn_do_close_internal+0x54>
 800f5fe:	4b7b      	ldr	r3, [pc, #492]	@ (800f7ec <lwip_netconn_do_close_internal+0x234>)
 800f600:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800f604:	497d      	ldr	r1, [pc, #500]	@ (800f7fc <lwip_netconn_do_close_internal+0x244>)
 800f606:	487b      	ldr	r0, [pc, #492]	@ (800f7f4 <lwip_netconn_do_close_internal+0x23c>)
 800f608:	f00e fbd4 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d106      	bne.n	800f622 <lwip_netconn_do_close_internal+0x6a>
 800f614:	4b75      	ldr	r3, [pc, #468]	@ (800f7ec <lwip_netconn_do_close_internal+0x234>)
 800f616:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800f61a:	4979      	ldr	r1, [pc, #484]	@ (800f800 <lwip_netconn_do_close_internal+0x248>)
 800f61c:	4875      	ldr	r0, [pc, #468]	@ (800f7f4 <lwip_netconn_do_close_internal+0x23c>)
 800f61e:	f00e fbc9 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d106      	bne.n	800f638 <lwip_netconn_do_close_internal+0x80>
 800f62a:	4b70      	ldr	r3, [pc, #448]	@ (800f7ec <lwip_netconn_do_close_internal+0x234>)
 800f62c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f630:	4974      	ldr	r1, [pc, #464]	@ (800f804 <lwip_netconn_do_close_internal+0x24c>)
 800f632:	4870      	ldr	r0, [pc, #448]	@ (800f7f4 <lwip_netconn_do_close_internal+0x23c>)
 800f634:	f00e fbbe 	bl	801ddb4 <iprintf>

  tpcb = conn->pcb.tcp;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	7a1b      	ldrb	r3, [r3, #8]
 800f644:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f646:	7bfb      	ldrb	r3, [r7, #15]
 800f648:	f003 0301 	and.w	r3, r3, #1
 800f64c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f64e:	7bfb      	ldrb	r3, [r7, #15]
 800f650:	f003 0302 	and.w	r3, r3, #2
 800f654:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f656:	7bfb      	ldrb	r3, [r7, #15]
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d102      	bne.n	800f662 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f65c:	2301      	movs	r3, #1
 800f65e:	75bb      	strb	r3, [r7, #22]
 800f660:	e01f      	b.n	800f6a2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f662:	7bbb      	ldrb	r3, [r7, #14]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00e      	beq.n	800f686 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f66c:	2b05      	cmp	r3, #5
 800f66e:	d007      	beq.n	800f680 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f674:	2b06      	cmp	r3, #6
 800f676:	d003      	beq.n	800f680 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f67c:	2b08      	cmp	r3, #8
 800f67e:	d102      	bne.n	800f686 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f680:	2301      	movs	r3, #1
 800f682:	75bb      	strb	r3, [r7, #22]
 800f684:	e00d      	b.n	800f6a2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f686:	7b7b      	ldrb	r3, [r7, #13]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d008      	beq.n	800f69e <lwip_netconn_do_close_internal+0xe6>
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	8b5b      	ldrh	r3, [r3, #26]
 800f690:	f003 0310 	and.w	r3, r3, #16
 800f694:	2b00      	cmp	r3, #0
 800f696:	d002      	beq.n	800f69e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f698:	2301      	movs	r3, #1
 800f69a:	75bb      	strb	r3, [r7, #22]
 800f69c:	e001      	b.n	800f6a2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f6a2:	7dbb      	ldrb	r3, [r7, #22]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d003      	beq.n	800f6b0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	6938      	ldr	r0, [r7, #16]
 800f6ac:	f006 f9d4 	bl	8015a58 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	7d1b      	ldrb	r3, [r3, #20]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d104      	bne.n	800f6c2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	6938      	ldr	r0, [r7, #16]
 800f6bc:	f006 fa44 	bl	8015b48 <tcp_accept>
 800f6c0:	e01d      	b.n	800f6fe <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f6c2:	7bbb      	ldrb	r3, [r7, #14]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d007      	beq.n	800f6d8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	6938      	ldr	r0, [r7, #16]
 800f6cc:	f006 f9d6 	bl	8015a7c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	6938      	ldr	r0, [r7, #16]
 800f6d4:	f006 fa38 	bl	8015b48 <tcp_accept>
    }
    if (shut_tx) {
 800f6d8:	7b7b      	ldrb	r3, [r7, #13]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f6de:	2100      	movs	r1, #0
 800f6e0:	6938      	ldr	r0, [r7, #16]
 800f6e2:	f006 f9ed 	bl	8015ac0 <tcp_sent>
    }
    if (shut_close) {
 800f6e6:	7dbb      	ldrb	r3, [r7, #22]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d008      	beq.n	800f6fe <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	6938      	ldr	r0, [r7, #16]
 800f6f2:	f006 fa41 	bl	8015b78 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	6938      	ldr	r0, [r7, #16]
 800f6fa:	f006 fa03 	bl	8015b04 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f6fe:	7dbb      	ldrb	r3, [r7, #22]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d005      	beq.n	800f710 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f704:	6938      	ldr	r0, [r7, #16]
 800f706:	f004 ffcd 	bl	80146a4 <tcp_close>
 800f70a:	4603      	mov	r3, r0
 800f70c:	75fb      	strb	r3, [r7, #23]
 800f70e:	e007      	b.n	800f720 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f710:	7bbb      	ldrb	r3, [r7, #14]
 800f712:	7b7a      	ldrb	r2, [r7, #13]
 800f714:	4619      	mov	r1, r3
 800f716:	6938      	ldr	r0, [r7, #16]
 800f718:	f004 fff0 	bl	80146fc <tcp_shutdown>
 800f71c:	4603      	mov	r3, r0
 800f71e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d102      	bne.n	800f72e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f728:	2301      	movs	r3, #1
 800f72a:	757b      	strb	r3, [r7, #21]
 800f72c:	e016      	b.n	800f75c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f72e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f736:	d10f      	bne.n	800f758 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6a1b      	ldr	r3, [r3, #32]
 800f73c:	7a5b      	ldrb	r3, [r3, #9]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10c      	bne.n	800f75c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f742:	2301      	movs	r3, #1
 800f744:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f746:	7dbb      	ldrb	r3, [r7, #22]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d007      	beq.n	800f75c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f74c:	6938      	ldr	r0, [r7, #16]
 800f74e:	f005 f8ef 	bl	8014930 <tcp_abort>
          err = ERR_OK;
 800f752:	2300      	movs	r3, #0
 800f754:	75fb      	strb	r3, [r7, #23]
 800f756:	e001      	b.n	800f75c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f758:	2301      	movs	r3, #1
 800f75a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f75c:	7d7b      	ldrb	r3, [r7, #21]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d052      	beq.n	800f808 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	330c      	adds	r3, #12
 800f76a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6a1b      	ldr	r3, [r3, #32]
 800f770:	7dfa      	ldrb	r2, [r7, #23]
 800f772:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2200      	movs	r2, #0
 800f778:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2200      	movs	r2, #0
 800f77e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d129      	bne.n	800f7dc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f788:	7dbb      	ldrb	r3, [r7, #22]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00c      	beq.n	800f7a8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d005      	beq.n	800f7a8 <lwip_netconn_do_close_internal+0x1f0>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2104      	movs	r1, #4
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	4798      	blx	r3
      }
      if (shut_rx) {
 800f7a8:	7bbb      	ldrb	r3, [r7, #14]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d009      	beq.n	800f7c2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d005      	beq.n	800f7c2 <lwip_netconn_do_close_internal+0x20a>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	2100      	movs	r1, #0
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	4798      	blx	r3
      }
      if (shut_tx) {
 800f7c2:	7b7b      	ldrb	r3, [r7, #13]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d009      	beq.n	800f7dc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d005      	beq.n	800f7dc <lwip_netconn_do_close_internal+0x224>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2102      	movs	r1, #2
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f7dc:	78fb      	ldrb	r3, [r7, #3]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d002      	beq.n	800f7e8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f7e2:	68b8      	ldr	r0, [r7, #8]
 800f7e4:	f00e f828 	bl	801d838 <sys_sem_signal>
    }
    return ERR_OK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	e03c      	b.n	800f866 <lwip_netconn_do_close_internal+0x2ae>
 800f7ec:	0801f13c 	.word	0x0801f13c
 800f7f0:	0801f410 	.word	0x0801f410
 800f7f4:	0801f180 	.word	0x0801f180
 800f7f8:	0801f420 	.word	0x0801f420
 800f7fc:	0801f440 	.word	0x0801f440
 800f800:	0801f464 	.word	0x0801f464
 800f804:	0801f2a4 	.word	0x0801f2a4
  }
  if (!close_finished) {
 800f808:	7d7b      	ldrb	r3, [r7, #21]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d11e      	bne.n	800f84c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	7d1b      	ldrb	r3, [r3, #20]
 800f812:	2b01      	cmp	r3, #1
 800f814:	d106      	bne.n	800f824 <lwip_netconn_do_close_internal+0x26c>
 800f816:	4b16      	ldr	r3, [pc, #88]	@ (800f870 <lwip_netconn_do_close_internal+0x2b8>)
 800f818:	f240 4241 	movw	r2, #1089	@ 0x441
 800f81c:	4915      	ldr	r1, [pc, #84]	@ (800f874 <lwip_netconn_do_close_internal+0x2bc>)
 800f81e:	4816      	ldr	r0, [pc, #88]	@ (800f878 <lwip_netconn_do_close_internal+0x2c0>)
 800f820:	f00e fac8 	bl	801ddb4 <iprintf>
    if (shut_tx) {
 800f824:	7b7b      	ldrb	r3, [r7, #13]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d003      	beq.n	800f832 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800f82a:	4914      	ldr	r1, [pc, #80]	@ (800f87c <lwip_netconn_do_close_internal+0x2c4>)
 800f82c:	6938      	ldr	r0, [r7, #16]
 800f82e:	f006 f947 	bl	8015ac0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f832:	2201      	movs	r2, #1
 800f834:	4912      	ldr	r1, [pc, #72]	@ (800f880 <lwip_netconn_do_close_internal+0x2c8>)
 800f836:	6938      	ldr	r0, [r7, #16]
 800f838:	f006 f99e 	bl	8015b78 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f83c:	4911      	ldr	r1, [pc, #68]	@ (800f884 <lwip_netconn_do_close_internal+0x2cc>)
 800f83e:	6938      	ldr	r0, [r7, #16]
 800f840:	f006 f960 	bl	8015b04 <tcp_err>
    tcp_arg(tpcb, conn);
 800f844:	6879      	ldr	r1, [r7, #4]
 800f846:	6938      	ldr	r0, [r7, #16]
 800f848:	f006 f906 	bl	8015a58 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f84c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d106      	bne.n	800f862 <lwip_netconn_do_close_internal+0x2aa>
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <lwip_netconn_do_close_internal+0x2b8>)
 800f856:	f240 424d 	movw	r2, #1101	@ 0x44d
 800f85a:	490b      	ldr	r1, [pc, #44]	@ (800f888 <lwip_netconn_do_close_internal+0x2d0>)
 800f85c:	4806      	ldr	r0, [pc, #24]	@ (800f878 <lwip_netconn_do_close_internal+0x2c0>)
 800f85e:	f00e faa9 	bl	801ddb4 <iprintf>
  return err;
 800f862:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3718      	adds	r7, #24
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	0801f13c 	.word	0x0801f13c
 800f874:	0801f478 	.word	0x0801f478
 800f878:	0801f180 	.word	0x0801f180
 800f87c:	0800ee2d 	.word	0x0800ee2d
 800f880:	0800ed61 	.word	0x0800ed61
 800f884:	0800eed9 	.word	0x0800eed9
 800f888:	0801f49c 	.word	0x0801f49c

0800f88c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b084      	sub	sp, #16
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	785b      	ldrb	r3, [r3, #1]
 800f89e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f8a0:	7afb      	ldrb	r3, [r7, #11]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00d      	beq.n	800f8c2 <lwip_netconn_do_delconn+0x36>
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f8b0:	2b10      	cmp	r3, #16
 800f8b2:	d006      	beq.n	800f8c2 <lwip_netconn_do_delconn+0x36>
 800f8b4:	4b60      	ldr	r3, [pc, #384]	@ (800fa38 <lwip_netconn_do_delconn+0x1ac>)
 800f8b6:	f240 425e 	movw	r2, #1118	@ 0x45e
 800f8ba:	4960      	ldr	r1, [pc, #384]	@ (800fa3c <lwip_netconn_do_delconn+0x1b0>)
 800f8bc:	4860      	ldr	r0, [pc, #384]	@ (800fa40 <lwip_netconn_do_delconn+0x1b4>)
 800f8be:	f00e fa79 	bl	801ddb4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f8c2:	7afb      	ldrb	r3, [r7, #11]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d005      	beq.n	800f8d4 <lwip_netconn_do_delconn+0x48>
 800f8c8:	7afb      	ldrb	r3, [r7, #11]
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d002      	beq.n	800f8d4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f8ce:	7afb      	ldrb	r3, [r7, #11]
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	d109      	bne.n	800f8e8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f8d4:	7afb      	ldrb	r3, [r7, #11]
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d10a      	bne.n	800f8f0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	7f1b      	ldrb	r3, [r3, #28]
 800f8e0:	f003 0304 	and.w	r3, r3, #4
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d103      	bne.n	800f8f0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	22fb      	movs	r2, #251	@ 0xfb
 800f8ec:	711a      	strb	r2, [r3, #4]
 800f8ee:	e097      	b.n	800fa20 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f8f0:	7afb      	ldrb	r3, [r7, #11]
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	d10d      	bne.n	800f912 <lwip_netconn_do_delconn+0x86>
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	7f1b      	ldrb	r3, [r3, #28]
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	2b00      	cmp	r3, #0
 800f902:	d106      	bne.n	800f912 <lwip_netconn_do_delconn+0x86>
 800f904:	4b4c      	ldr	r3, [pc, #304]	@ (800fa38 <lwip_netconn_do_delconn+0x1ac>)
 800f906:	f240 427a 	movw	r2, #1146	@ 0x47a
 800f90a:	494e      	ldr	r1, [pc, #312]	@ (800fa44 <lwip_netconn_do_delconn+0x1b8>)
 800f90c:	484c      	ldr	r0, [pc, #304]	@ (800fa40 <lwip_netconn_do_delconn+0x1b4>)
 800f90e:	f00e fa51 	bl	801ddb4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7ff fdcd 	bl	800f4bc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	685b      	ldr	r3, [r3, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d05f      	beq.n	800f9ec <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f936:	2b10      	cmp	r3, #16
 800f938:	d00d      	beq.n	800f956 <lwip_netconn_do_delconn+0xca>
 800f93a:	2b20      	cmp	r3, #32
 800f93c:	d151      	bne.n	800f9e2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	4618      	mov	r0, r3
 800f950:	f00b faee 	bl	801af30 <udp_remove>
          break;
 800f954:	e046      	b.n	800f9e4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	6a1b      	ldr	r3, [r3, #32]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d006      	beq.n	800f96e <lwip_netconn_do_delconn+0xe2>
 800f960:	4b35      	ldr	r3, [pc, #212]	@ (800fa38 <lwip_netconn_do_delconn+0x1ac>)
 800f962:	f240 4294 	movw	r2, #1172	@ 0x494
 800f966:	4938      	ldr	r1, [pc, #224]	@ (800fa48 <lwip_netconn_do_delconn+0x1bc>)
 800f968:	4835      	ldr	r0, [pc, #212]	@ (800fa40 <lwip_netconn_do_delconn+0x1b4>)
 800f96a:	f00e fa23 	bl	801ddb4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2204      	movs	r2, #4
 800f974:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2203      	movs	r2, #3
 800f97a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2100      	movs	r1, #0
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7ff fe14 	bl	800f5b8 <lwip_netconn_do_close_internal>
 800f990:	4603      	mov	r3, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	d04b      	beq.n	800fa2e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	785b      	ldrb	r3, [r3, #1]
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	d006      	beq.n	800f9ae <lwip_netconn_do_delconn+0x122>
 800f9a0:	4b25      	ldr	r3, [pc, #148]	@ (800fa38 <lwip_netconn_do_delconn+0x1ac>)
 800f9a2:	f240 429a 	movw	r2, #1178	@ 0x49a
 800f9a6:	4929      	ldr	r1, [pc, #164]	@ (800fa4c <lwip_netconn_do_delconn+0x1c0>)
 800f9a8:	4825      	ldr	r0, [pc, #148]	@ (800fa40 <lwip_netconn_do_delconn+0x1b4>)
 800f9aa:	f00e fa03 	bl	801ddb4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800f9ae:	4828      	ldr	r0, [pc, #160]	@ (800fa50 <lwip_netconn_do_delconn+0x1c4>)
 800f9b0:	f00d ffab 	bl	801d90a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	330c      	adds	r3, #12
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f00d ff0a 	bl	801d7d6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800f9c2:	4823      	ldr	r0, [pc, #140]	@ (800fa50 <lwip_netconn_do_delconn+0x1c4>)
 800f9c4:	f00d ff92 	bl	801d8ec <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	785b      	ldrb	r3, [r3, #1]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d02d      	beq.n	800fa2e <lwip_netconn_do_delconn+0x1a2>
 800f9d2:	4b19      	ldr	r3, [pc, #100]	@ (800fa38 <lwip_netconn_do_delconn+0x1ac>)
 800f9d4:	f240 429e 	movw	r2, #1182	@ 0x49e
 800f9d8:	491c      	ldr	r1, [pc, #112]	@ (800fa4c <lwip_netconn_do_delconn+0x1c0>)
 800f9da:	4819      	ldr	r0, [pc, #100]	@ (800fa40 <lwip_netconn_do_delconn+0x1b4>)
 800f9dc:	f00e f9ea 	bl	801ddb4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800f9e0:	e025      	b.n	800fa2e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800f9e2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d007      	beq.n	800fa06 <lwip_netconn_do_delconn+0x17a>
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	6810      	ldr	r0, [r2, #0]
 800fa00:	2200      	movs	r2, #0
 800fa02:	2100      	movs	r1, #0
 800fa04:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d007      	beq.n	800fa20 <lwip_netconn_do_delconn+0x194>
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	6810      	ldr	r0, [r2, #0]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	2102      	movs	r1, #2
 800fa1e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	330c      	adds	r3, #12
 800fa26:	4618      	mov	r0, r3
 800fa28:	f00d ff20 	bl	801d86c <sys_sem_valid>
 800fa2c:	e000      	b.n	800fa30 <lwip_netconn_do_delconn+0x1a4>
          return;
 800fa2e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	0801f13c 	.word	0x0801f13c
 800fa3c:	0801f4ac 	.word	0x0801f4ac
 800fa40:	0801f180 	.word	0x0801f180
 800fa44:	0801f4c0 	.word	0x0801f4c0
 800fa48:	0801f4e0 	.word	0x0801f4e0
 800fa4c:	0801f4fc 	.word	0x0801f4fc
 800fa50:	24010348 	.word	0x24010348

0800fa54 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d025      	beq.n	800fab6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa74:	2b10      	cmp	r3, #16
 800fa76:	d00e      	beq.n	800fa96 <lwip_netconn_do_bind+0x42>
 800fa78:	2b20      	cmp	r3, #32
 800fa7a:	d119      	bne.n	800fab0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6858      	ldr	r0, [r3, #4]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	6899      	ldr	r1, [r3, #8]
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	899b      	ldrh	r3, [r3, #12]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	f00b f9a8 	bl	801ade0 <udp_bind>
 800fa90:	4603      	mov	r3, r0
 800fa92:	73fb      	strb	r3, [r7, #15]
        break;
 800fa94:	e011      	b.n	800faba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	6858      	ldr	r0, [r3, #4]
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	6899      	ldr	r1, [r3, #8]
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	899b      	ldrh	r3, [r3, #12]
 800faa4:	461a      	mov	r2, r3
 800faa6:	f004 ff4f 	bl	8014948 <tcp_bind>
 800faaa:	4603      	mov	r3, r0
 800faac:	73fb      	strb	r3, [r7, #15]
        break;
 800faae:	e004      	b.n	800faba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800fab0:	23fa      	movs	r3, #250	@ 0xfa
 800fab2:	73fb      	strb	r3, [r7, #15]
        break;
 800fab4:	e001      	b.n	800faba <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800fab6:	23fa      	movs	r3, #250	@ 0xfa
 800fab8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	7bfa      	ldrb	r2, [r7, #15]
 800fabe:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fac0:	bf00      	nop
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d07f      	beq.n	800fbde <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fae8:	2b10      	cmp	r3, #16
 800faea:	d175      	bne.n	800fbd8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	785b      	ldrb	r3, [r3, #1]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d165      	bne.n	800fbc2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d002      	beq.n	800fb08 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800fb02:	23fa      	movs	r3, #250	@ 0xfa
 800fb04:	72fb      	strb	r3, [r7, #11]
 800fb06:	e06c      	b.n	800fbe2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800fb08:	23ff      	movs	r3, #255	@ 0xff
 800fb0a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	f107 020b 	add.w	r2, r7, #11
 800fb16:	7cf9      	ldrb	r1, [r7, #19]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f004 ffcd 	bl	8014ab8 <tcp_listen_with_backlog_and_err>
 800fb1e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d05d      	beq.n	800fbe2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3310      	adds	r3, #16
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f00d fe0f 	bl	801d750 <sys_mbox_valid>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00b      	beq.n	800fb50 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	3310      	adds	r3, #16
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f00d fd92 	bl	801d668 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3310      	adds	r3, #16
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f00d fe11 	bl	801d772 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800fb50:	2300      	movs	r3, #0
 800fb52:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3314      	adds	r3, #20
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f00d fdf8 	bl	801d750 <sys_mbox_valid>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d108      	bne.n	800fb78 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	3314      	adds	r3, #20
 800fb6c:	2106      	movs	r1, #6
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f00d fd60 	bl	801d634 <sys_mbox_new>
 800fb74:	4603      	mov	r3, r0
 800fb76:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800fb78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d118      	bne.n	800fbb2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	2202      	movs	r2, #2
 800fb86:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	68fa      	ldr	r2, [r7, #12]
 800fb8e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	f005 ff5b 	bl	8015a58 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	4912      	ldr	r1, [pc, #72]	@ (800fbf4 <lwip_netconn_do_listen+0x12c>)
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f005 ffcc 	bl	8015b48 <tcp_accept>
 800fbb0:	e017      	b.n	800fbe2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f004 fd76 	bl	80146a4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	605a      	str	r2, [r3, #4]
 800fbc0:	e00f      	b.n	800fbe2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	785b      	ldrb	r3, [r3, #1]
 800fbc8:	2b02      	cmp	r3, #2
 800fbca:	d102      	bne.n	800fbd2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	72fb      	strb	r3, [r7, #11]
 800fbd0:	e007      	b.n	800fbe2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800fbd2:	23f5      	movs	r3, #245	@ 0xf5
 800fbd4:	72fb      	strb	r3, [r7, #11]
 800fbd6:	e004      	b.n	800fbe2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800fbd8:	23f0      	movs	r3, #240	@ 0xf0
 800fbda:	72fb      	strb	r3, [r7, #11]
 800fbdc:	e001      	b.n	800fbe2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800fbde:	23f5      	movs	r3, #245	@ 0xf5
 800fbe0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800fbe2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fbea:	bf00      	nop
 800fbec:	3718      	adds	r7, #24
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	0800f0d5 	.word	0x0800f0d5

0800fbf8 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fe ff19 	bl	800ea40 <netconn_err>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d134      	bne.n	800fc84 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d02d      	beq.n	800fc80 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fc2e:	2b20      	cmp	r3, #32
 800fc30:	d123      	bne.n	800fc7a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10c      	bne.n	800fc56 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4619      	mov	r1, r3
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	f00a fede 	bl	801aa0c <udp_send>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800fc54:	e016      	b.n	800fc84 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	6858      	ldr	r0, [r3, #4]
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	6819      	ldr	r1, [r3, #0]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	689b      	ldr	r3, [r3, #8]
 800fc66:	f103 0208 	add.w	r2, r3, #8
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	899b      	ldrh	r3, [r3, #12]
 800fc70:	f00a ff00 	bl	801aa74 <udp_sendto>
 800fc74:	4603      	mov	r3, r0
 800fc76:	73fb      	strb	r3, [r7, #15]
          break;
 800fc78:	e004      	b.n	800fc84 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800fc7a:	23f5      	movs	r3, #245	@ 0xf5
 800fc7c:	73fb      	strb	r3, [r7, #15]
          break;
 800fc7e:	e001      	b.n	800fc84 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800fc80:	23f5      	movs	r3, #245	@ 0xf5
 800fc82:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	7bfa      	ldrb	r2, [r7, #15]
 800fc88:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fc8a:	bf00      	nop
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	2200      	movs	r2, #0
 800fca2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d022      	beq.n	800fcf4 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fcb8:	2b10      	cmp	r3, #16
 800fcba:	d11b      	bne.n	800fcf4 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fcc8:	d202      	bcs.n	800fcd0 <lwip_netconn_do_recv+0x3e>
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	e001      	b.n	800fcd4 <lwip_netconn_do_recv+0x42>
 800fcd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcd4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	89fa      	ldrh	r2, [r7, #14]
 800fcde:	4611      	mov	r1, r2
 800fce0:	4618      	mov	r0, r3
 800fce2:	f004 ffed 	bl	8014cc0 <tcp_recved>
        remaining -= recved;
 800fce6:	89fb      	ldrh	r3, [r7, #14]
 800fce8:	697a      	ldr	r2, [r7, #20]
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1e6      	bne.n	800fcc2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fcf4:	bf00      	nop
 800fcf6:	3718      	adds	r7, #24
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b088      	sub	sp, #32
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d106      	bne.n	800fd20 <lwip_netconn_do_writemore+0x24>
 800fd12:	4b96      	ldr	r3, [pc, #600]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fd14:	f240 6273 	movw	r2, #1651	@ 0x673
 800fd18:	4995      	ldr	r1, [pc, #596]	@ (800ff70 <lwip_netconn_do_writemore+0x274>)
 800fd1a:	4896      	ldr	r0, [pc, #600]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fd1c:	f00e f84a 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	785b      	ldrb	r3, [r3, #1]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d006      	beq.n	800fd36 <lwip_netconn_do_writemore+0x3a>
 800fd28:	4b90      	ldr	r3, [pc, #576]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fd2a:	f240 6274 	movw	r2, #1652	@ 0x674
 800fd2e:	4992      	ldr	r1, [pc, #584]	@ (800ff78 <lwip_netconn_do_writemore+0x27c>)
 800fd30:	4890      	ldr	r0, [pc, #576]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fd32:	f00e f83f 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <lwip_netconn_do_writemore+0x50>
 800fd3e:	4b8b      	ldr	r3, [pc, #556]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fd40:	f240 6275 	movw	r2, #1653	@ 0x675
 800fd44:	498d      	ldr	r1, [pc, #564]	@ (800ff7c <lwip_netconn_do_writemore+0x280>)
 800fd46:	488b      	ldr	r0, [pc, #556]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fd48:	f00e f834 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <lwip_netconn_do_writemore+0x66>
 800fd54:	4b85      	ldr	r3, [pc, #532]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fd56:	f240 6276 	movw	r2, #1654	@ 0x676
 800fd5a:	4989      	ldr	r1, [pc, #548]	@ (800ff80 <lwip_netconn_do_writemore+0x284>)
 800fd5c:	4885      	ldr	r0, [pc, #532]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fd5e:	f00e f829 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a1b      	ldr	r3, [r3, #32]
 800fd66:	699a      	ldr	r2, [r3, #24]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6a1b      	ldr	r3, [r3, #32]
 800fd6c:	695b      	ldr	r3, [r3, #20]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d306      	bcc.n	800fd80 <lwip_netconn_do_writemore+0x84>
 800fd72:	4b7e      	ldr	r3, [pc, #504]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fd74:	f240 6277 	movw	r2, #1655	@ 0x677
 800fd78:	4982      	ldr	r1, [pc, #520]	@ (800ff84 <lwip_netconn_do_writemore+0x288>)
 800fd7a:	487e      	ldr	r0, [pc, #504]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fd7c:	f00e f81a 	bl	801ddb4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a1b      	ldr	r3, [r3, #32]
 800fd84:	899b      	ldrh	r3, [r3, #12]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d106      	bne.n	800fd98 <lwip_netconn_do_writemore+0x9c>
 800fd8a:	4b78      	ldr	r3, [pc, #480]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fd8c:	f240 6279 	movw	r2, #1657	@ 0x679
 800fd90:	497d      	ldr	r1, [pc, #500]	@ (800ff88 <lwip_netconn_do_writemore+0x28c>)
 800fd92:	4878      	ldr	r0, [pc, #480]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fd94:	f00e f80e 	bl	801ddb4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a1b      	ldr	r3, [r3, #32]
 800fd9c:	7f1b      	ldrb	r3, [r3, #28]
 800fd9e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7f1b      	ldrb	r3, [r3, #28]
 800fda4:	f003 0302 	and.w	r3, r3, #2
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d104      	bne.n	800fdb6 <lwip_netconn_do_writemore+0xba>
 800fdac:	7ebb      	ldrb	r3, [r7, #26]
 800fdae:	f003 0304 	and.w	r3, r3, #4
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d001      	beq.n	800fdba <lwip_netconn_do_writemore+0xbe>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e000      	b.n	800fdbc <lwip_netconn_do_writemore+0xc0>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a1b      	ldr	r3, [r3, #32]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1b      	ldr	r3, [r3, #32]
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	4413      	add	r3, r2
 800fdce:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a1b      	ldr	r3, [r3, #32]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	685a      	ldr	r2, [r3, #4]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a1b      	ldr	r3, [r3, #32]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	1ad3      	subs	r3, r2, r3
 800fde0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fde8:	d307      	bcc.n	800fdfa <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800fdea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fdee:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fdf0:	7ebb      	ldrb	r3, [r7, #26]
 800fdf2:	f043 0302 	orr.w	r3, r3, #2
 800fdf6:	76bb      	strb	r3, [r7, #26]
 800fdf8:	e001      	b.n	800fdfe <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe06:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800fe08:	89fa      	ldrh	r2, [r7, #14]
 800fe0a:	8bbb      	ldrh	r3, [r7, #28]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d216      	bcs.n	800fe3e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800fe10:	89fb      	ldrh	r3, [r7, #14]
 800fe12:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800fe14:	7e3b      	ldrb	r3, [r7, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00d      	beq.n	800fe36 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800fe1a:	8bbb      	ldrh	r3, [r7, #28]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d10e      	bne.n	800fe3e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a1b      	ldr	r3, [r3, #32]
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d102      	bne.n	800fe30 <lwip_netconn_do_writemore+0x134>
 800fe2a:	f06f 0306 	mvn.w	r3, #6
 800fe2e:	e000      	b.n	800fe32 <lwip_netconn_do_writemore+0x136>
 800fe30:	2300      	movs	r3, #0
 800fe32:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800fe34:	e07d      	b.n	800ff32 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800fe36:	7ebb      	ldrb	r3, [r7, #26]
 800fe38:	f043 0302 	orr.w	r3, r3, #2
 800fe3c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	691a      	ldr	r2, [r3, #16]
 800fe44:	8bbb      	ldrh	r3, [r7, #28]
 800fe46:	441a      	add	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d906      	bls.n	800fe62 <lwip_netconn_do_writemore+0x166>
 800fe54:	4b45      	ldr	r3, [pc, #276]	@ (800ff6c <lwip_netconn_do_writemore+0x270>)
 800fe56:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800fe5a:	494c      	ldr	r1, [pc, #304]	@ (800ff8c <lwip_netconn_do_writemore+0x290>)
 800fe5c:	4845      	ldr	r0, [pc, #276]	@ (800ff74 <lwip_netconn_do_writemore+0x278>)
 800fe5e:	f00d ffa9 	bl	801ddb4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fe62:	8bbb      	ldrh	r3, [r7, #28]
 800fe64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d103      	bne.n	800fe74 <lwip_netconn_do_writemore+0x178>
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe72:	d209      	bcs.n	800fe88 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800fe78:	8bba      	ldrh	r2, [r7, #28]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d10b      	bne.n	800fe96 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6a1b      	ldr	r3, [r3, #32]
 800fe82:	899b      	ldrh	r3, [r3, #12]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d906      	bls.n	800fe96 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fe8c:	7ebb      	ldrb	r3, [r7, #26]
 800fe8e:	f043 0302 	orr.w	r3, r3, #2
 800fe92:	76bb      	strb	r3, [r7, #26]
 800fe94:	e001      	b.n	800fe9a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6858      	ldr	r0, [r3, #4]
 800fe9e:	7ebb      	ldrb	r3, [r7, #26]
 800fea0:	8bba      	ldrh	r2, [r7, #28]
 800fea2:	6979      	ldr	r1, [r7, #20]
 800fea4:	f008 fd16 	bl	80188d4 <tcp_write>
 800fea8:	4603      	mov	r3, r0
 800feaa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800feac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d12c      	bne.n	800ff0e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	6999      	ldr	r1, [r3, #24]
 800feba:	8bba      	ldrh	r2, [r7, #28]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6a1b      	ldr	r3, [r3, #32]
 800fec0:	440a      	add	r2, r1
 800fec2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6a1b      	ldr	r3, [r3, #32]
 800fec8:	6919      	ldr	r1, [r3, #16]
 800feca:	8bba      	ldrh	r2, [r7, #28]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	440a      	add	r2, r1
 800fed2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6a1b      	ldr	r3, [r3, #32]
 800fed8:	691a      	ldr	r2, [r3, #16]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a1b      	ldr	r3, [r3, #32]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d113      	bne.n	800ff0e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a1b      	ldr	r3, [r3, #32]
 800feea:	899a      	ldrh	r2, [r3, #12]
 800feec:	3a01      	subs	r2, #1
 800feee:	b292      	uxth	r2, r2
 800fef0:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a1b      	ldr	r3, [r3, #32]
 800fef6:	899b      	ldrh	r3, [r3, #12]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d008      	beq.n	800ff0e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6a1b      	ldr	r3, [r3, #32]
 800ff00:	689a      	ldr	r2, [r3, #8]
 800ff02:	3208      	adds	r2, #8
 800ff04:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a1b      	ldr	r3, [r3, #32]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ff0e:	7e7b      	ldrb	r3, [r7, #25]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d004      	beq.n	800ff1e <lwip_netconn_do_writemore+0x222>
 800ff14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f43f af50 	beq.w	800fdbe <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ff1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d004      	beq.n	800ff30 <lwip_netconn_do_writemore+0x234>
 800ff26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2e:	d147      	bne.n	800ffc0 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800ff30:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ff32:	7e3b      	ldrb	r3, [r7, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d02b      	beq.n	800ff90 <lwip_netconn_do_writemore+0x294>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a1b      	ldr	r3, [r3, #32]
 800ff3c:	699a      	ldr	r2, [r3, #24]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6a1b      	ldr	r3, [r3, #32]
 800ff42:	695b      	ldr	r3, [r3, #20]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d223      	bcs.n	800ff90 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d005      	beq.n	800ff5c <lwip_netconn_do_writemore+0x260>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff54:	2200      	movs	r2, #0
 800ff56:	2103      	movs	r1, #3
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	7f1b      	ldrb	r3, [r3, #28]
 800ff60:	f043 0310 	orr.w	r3, r3, #16
 800ff64:	b2da      	uxtb	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	771a      	strb	r2, [r3, #28]
 800ff6a:	e029      	b.n	800ffc0 <lwip_netconn_do_writemore+0x2c4>
 800ff6c:	0801f13c 	.word	0x0801f13c
 800ff70:	0801f294 	.word	0x0801f294
 800ff74:	0801f180 	.word	0x0801f180
 800ff78:	0801f59c 	.word	0x0801f59c
 800ff7c:	0801f2a4 	.word	0x0801f2a4
 800ff80:	0801f5bc 	.word	0x0801f5bc
 800ff84:	0801f5d4 	.word	0x0801f5d4
 800ff88:	0801f614 	.word	0x0801f614
 800ff8c:	0801f63c 	.word	0x0801f63c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff98:	f640 3269 	movw	r2, #2921	@ 0xb69
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d905      	bls.n	800ffac <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ffa8:	2b07      	cmp	r3, #7
 800ffaa:	d909      	bls.n	800ffc0 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d005      	beq.n	800ffc0 <lwip_netconn_do_writemore+0x2c4>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb8:	2200      	movs	r2, #0
 800ffba:	2103      	movs	r1, #3
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ffc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d11d      	bne.n	8010004 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a1b      	ldr	r3, [r3, #32]
 800ffcc:	699a      	ldr	r2, [r3, #24]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6a1b      	ldr	r3, [r3, #32]
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d002      	beq.n	800ffde <lwip_netconn_do_writemore+0x2e2>
 800ffd8:	7e3b      	ldrb	r3, [r7, #24]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f009 fa5e 	bl	80194a8 <tcp_output>
 800ffec:	4603      	mov	r3, r0
 800ffee:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800fff0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800fff4:	f113 0f04 	cmn.w	r3, #4
 800fff8:	d12c      	bne.n	8010054 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fffa:	7b3b      	ldrb	r3, [r7, #12]
 800fffc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800fffe:	2301      	movs	r3, #1
 8010000:	76fb      	strb	r3, [r7, #27]
 8010002:	e027      	b.n	8010054 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8010004:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000c:	d120      	bne.n	8010050 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	4618      	mov	r0, r3
 8010014:	f009 fa48 	bl	80194a8 <tcp_output>
 8010018:	4603      	mov	r3, r0
 801001a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801001c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010020:	f113 0f04 	cmn.w	r3, #4
 8010024:	d104      	bne.n	8010030 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010026:	7b7b      	ldrb	r3, [r7, #13]
 8010028:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801002a:	2301      	movs	r3, #1
 801002c:	76fb      	strb	r3, [r7, #27]
 801002e:	e011      	b.n	8010054 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 8010030:	7e3b      	ldrb	r3, [r7, #24]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00e      	beq.n	8010054 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	699b      	ldr	r3, [r3, #24]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d102      	bne.n	8010046 <lwip_netconn_do_writemore+0x34a>
 8010040:	f06f 0306 	mvn.w	r3, #6
 8010044:	e000      	b.n	8010048 <lwip_netconn_do_writemore+0x34c>
 8010046:	2300      	movs	r3, #0
 8010048:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801004a:	2301      	movs	r3, #1
 801004c:	76fb      	strb	r3, [r7, #27]
 801004e:	e001      	b.n	8010054 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010050:	2301      	movs	r3, #1
 8010052:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010054:	7efb      	ldrb	r3, [r7, #27]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d015      	beq.n	8010086 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a1b      	ldr	r3, [r3, #32]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	330c      	adds	r3, #12
 8010062:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a1b      	ldr	r3, [r3, #32]
 8010068:	7ffa      	ldrb	r2, [r7, #31]
 801006a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010078:	78fb      	ldrb	r3, [r7, #3]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d006      	beq.n	801008c <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801007e:	68b8      	ldr	r0, [r7, #8]
 8010080:	f00d fbda 	bl	801d838 <sys_sem_signal>
 8010084:	e002      	b.n	801008c <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010086:	f04f 33ff 	mov.w	r3, #4294967295
 801008a:	e000      	b.n	801008e <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 801008c:	2300      	movs	r3, #0
}
 801008e:	4618      	mov	r0, r3
 8010090:	3720      	adds	r7, #32
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop

08010098 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fe fcc9 	bl	800ea40 <netconn_err>
 80100ae:	4603      	mov	r3, r0
 80100b0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80100b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d166      	bne.n	8010188 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80100c4:	2b10      	cmp	r3, #16
 80100c6:	d15d      	bne.n	8010184 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	785b      	ldrb	r3, [r3, #1]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80100d2:	23fb      	movs	r3, #251	@ 0xfb
 80100d4:	73fb      	strb	r3, [r7, #15]
 80100d6:	e057      	b.n	8010188 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d04d      	beq.n	801017e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	2201      	movs	r2, #1
 80100e8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	6a1b      	ldr	r3, [r3, #32]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d006      	beq.n	8010102 <lwip_netconn_do_write+0x6a>
 80100f4:	4b28      	ldr	r3, [pc, #160]	@ (8010198 <lwip_netconn_do_write+0x100>)
 80100f6:	f240 7223 	movw	r2, #1827	@ 0x723
 80100fa:	4928      	ldr	r1, [pc, #160]	@ (801019c <lwip_netconn_do_write+0x104>)
 80100fc:	4828      	ldr	r0, [pc, #160]	@ (80101a0 <lwip_netconn_do_write+0x108>)
 80100fe:	f00d fe59 	bl	801ddb4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	695b      	ldr	r3, [r3, #20]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d106      	bne.n	8010118 <lwip_netconn_do_write+0x80>
 801010a:	4b23      	ldr	r3, [pc, #140]	@ (8010198 <lwip_netconn_do_write+0x100>)
 801010c:	f240 7224 	movw	r2, #1828	@ 0x724
 8010110:	4924      	ldr	r1, [pc, #144]	@ (80101a4 <lwip_netconn_do_write+0x10c>)
 8010112:	4823      	ldr	r0, [pc, #140]	@ (80101a0 <lwip_netconn_do_write+0x108>)
 8010114:	f00d fe4e 	bl	801ddb4 <iprintf>
        msg->conn->current_msg = msg;
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2100      	movs	r1, #0
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fde8 	bl	800fcfc <lwip_netconn_do_writemore>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d02e      	beq.n	8010190 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	785b      	ldrb	r3, [r3, #1]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d006      	beq.n	801014a <lwip_netconn_do_write+0xb2>
 801013c:	4b16      	ldr	r3, [pc, #88]	@ (8010198 <lwip_netconn_do_write+0x100>)
 801013e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8010142:	4919      	ldr	r1, [pc, #100]	@ (80101a8 <lwip_netconn_do_write+0x110>)
 8010144:	4816      	ldr	r0, [pc, #88]	@ (80101a0 <lwip_netconn_do_write+0x108>)
 8010146:	f00d fe35 	bl	801ddb4 <iprintf>
          UNLOCK_TCPIP_CORE();
 801014a:	4818      	ldr	r0, [pc, #96]	@ (80101ac <lwip_netconn_do_write+0x114>)
 801014c:	f00d fbdd 	bl	801d90a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	330c      	adds	r3, #12
 8010156:	2100      	movs	r1, #0
 8010158:	4618      	mov	r0, r3
 801015a:	f00d fb3c 	bl	801d7d6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801015e:	4813      	ldr	r0, [pc, #76]	@ (80101ac <lwip_netconn_do_write+0x114>)
 8010160:	f00d fbc4 	bl	801d8ec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	785b      	ldrb	r3, [r3, #1]
 801016a:	2b01      	cmp	r3, #1
 801016c:	d110      	bne.n	8010190 <lwip_netconn_do_write+0xf8>
 801016e:	4b0a      	ldr	r3, [pc, #40]	@ (8010198 <lwip_netconn_do_write+0x100>)
 8010170:	f240 722c 	movw	r2, #1836	@ 0x72c
 8010174:	490c      	ldr	r1, [pc, #48]	@ (80101a8 <lwip_netconn_do_write+0x110>)
 8010176:	480a      	ldr	r0, [pc, #40]	@ (80101a0 <lwip_netconn_do_write+0x108>)
 8010178:	f00d fe1c 	bl	801ddb4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 801017c:	e008      	b.n	8010190 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801017e:	23f5      	movs	r3, #245	@ 0xf5
 8010180:	73fb      	strb	r3, [r7, #15]
 8010182:	e001      	b.n	8010188 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010184:	23fa      	movs	r3, #250	@ 0xfa
 8010186:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	7bfa      	ldrb	r2, [r7, #15]
 801018c:	711a      	strb	r2, [r3, #4]
 801018e:	e000      	b.n	8010192 <lwip_netconn_do_write+0xfa>
        return;
 8010190:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010192:	3710      	adds	r7, #16
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	0801f13c 	.word	0x0801f13c
 801019c:	0801f4e0 	.word	0x0801f4e0
 80101a0:	0801f180 	.word	0x0801f180
 80101a4:	0801f668 	.word	0x0801f668
 80101a8:	0801f4fc 	.word	0x0801f4fc
 80101ac:	24010348 	.word	0x24010348

080101b0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d06b      	beq.n	801029e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	7c1b      	ldrb	r3, [r3, #16]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d007      	beq.n	80101de <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	685a      	ldr	r2, [r3, #4]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	6812      	ldr	r2, [r2, #0]
 80101da:	601a      	str	r2, [r3, #0]
 80101dc:	e006      	b.n	80101ec <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685a      	ldr	r2, [r3, #4]
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	689b      	ldr	r3, [r3, #8]
 80101e8:	6852      	ldr	r2, [r2, #4]
 80101ea:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2200      	movs	r2, #0
 80101f0:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101fc:	2b10      	cmp	r3, #16
 80101fe:	d021      	beq.n	8010244 <lwip_netconn_do_getaddr+0x94>
 8010200:	2b20      	cmp	r3, #32
 8010202:	d144      	bne.n	801028e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	7c1b      	ldrb	r3, [r3, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d007      	beq.n	801021c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	8a52      	ldrh	r2, [r2, #18]
 8010218:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 801021a:	e044      	b.n	80102a6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	7c1b      	ldrb	r3, [r3, #16]
 8010224:	f003 0304 	and.w	r3, r3, #4
 8010228:	2b00      	cmp	r3, #0
 801022a:	d103      	bne.n	8010234 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	22f5      	movs	r2, #245	@ 0xf5
 8010230:	711a      	strb	r2, [r3, #4]
        break;
 8010232:	e038      	b.n	80102a6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	685a      	ldr	r2, [r3, #4]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	8a92      	ldrh	r2, [r2, #20]
 8010240:	801a      	strh	r2, [r3, #0]
        break;
 8010242:	e030      	b.n	80102a6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	7c1b      	ldrb	r3, [r3, #16]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10f      	bne.n	801026c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8010254:	2b00      	cmp	r3, #0
 8010256:	d005      	beq.n	8010264 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	7d1b      	ldrb	r3, [r3, #20]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d103      	bne.n	801026c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	22f5      	movs	r2, #245	@ 0xf5
 8010268:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 801026a:	e01c      	b.n	80102a6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	7c1b      	ldrb	r3, [r3, #16]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d004      	beq.n	801027e <lwip_netconn_do_getaddr+0xce>
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	8adb      	ldrh	r3, [r3, #22]
 801027c:	e003      	b.n	8010286 <lwip_netconn_do_getaddr+0xd6>
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	8b1b      	ldrh	r3, [r3, #24]
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	68d2      	ldr	r2, [r2, #12]
 801028a:	8013      	strh	r3, [r2, #0]
        break;
 801028c:	e00b      	b.n	80102a6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 801028e:	4b08      	ldr	r3, [pc, #32]	@ (80102b0 <lwip_netconn_do_getaddr+0x100>)
 8010290:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010294:	4907      	ldr	r1, [pc, #28]	@ (80102b4 <lwip_netconn_do_getaddr+0x104>)
 8010296:	4808      	ldr	r0, [pc, #32]	@ (80102b8 <lwip_netconn_do_getaddr+0x108>)
 8010298:	f00d fd8c 	bl	801ddb4 <iprintf>
        break;
 801029c:	e003      	b.n	80102a6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	22f5      	movs	r2, #245	@ 0xf5
 80102a2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 80102a4:	bf00      	nop
 80102a6:	bf00      	nop
 80102a8:	3710      	adds	r7, #16
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	0801f13c 	.word	0x0801f13c
 80102b4:	0801f67c 	.word	0x0801f67c
 80102b8:	0801f180 	.word	0x0801f180

080102bc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	785b      	ldrb	r3, [r3, #1]
 80102ce:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d069      	beq.n	80103ae <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80102e4:	2b10      	cmp	r3, #16
 80102e6:	d162      	bne.n	80103ae <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80102ec:	2b03      	cmp	r3, #3
 80102ee:	d002      	beq.n	80102f6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80102f0:	7afb      	ldrb	r3, [r7, #11]
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d05b      	beq.n	80103ae <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80102f6:	7afb      	ldrb	r3, [r7, #11]
 80102f8:	2b03      	cmp	r3, #3
 80102fa:	d103      	bne.n	8010304 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	22f5      	movs	r2, #245	@ 0xf5
 8010300:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010302:	e059      	b.n	80103b8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010304:	7afb      	ldrb	r3, [r7, #11]
 8010306:	2b01      	cmp	r3, #1
 8010308:	d103      	bne.n	8010312 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	22fb      	movs	r2, #251	@ 0xfb
 801030e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010310:	e052      	b.n	80103b8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	7a1b      	ldrb	r3, [r3, #8]
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	2b00      	cmp	r3, #0
 801031c:	d004      	beq.n	8010328 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4618      	mov	r0, r3
 8010324:	f7ff f8ca 	bl	800f4bc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6a1b      	ldr	r3, [r3, #32]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d006      	beq.n	8010340 <lwip_netconn_do_close+0x84>
 8010332:	4b23      	ldr	r3, [pc, #140]	@ (80103c0 <lwip_netconn_do_close+0x104>)
 8010334:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8010338:	4922      	ldr	r1, [pc, #136]	@ (80103c4 <lwip_netconn_do_close+0x108>)
 801033a:	4823      	ldr	r0, [pc, #140]	@ (80103c8 <lwip_netconn_do_close+0x10c>)
 801033c:	f00d fd3a 	bl	801ddb4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2204      	movs	r2, #4
 8010346:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2100      	movs	r1, #0
 8010356:	4618      	mov	r0, r3
 8010358:	f7ff f92e 	bl	800f5b8 <lwip_netconn_do_close_internal>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d029      	beq.n	80103b6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	785b      	ldrb	r3, [r3, #1]
 8010368:	2b04      	cmp	r3, #4
 801036a:	d006      	beq.n	801037a <lwip_netconn_do_close+0xbe>
 801036c:	4b14      	ldr	r3, [pc, #80]	@ (80103c0 <lwip_netconn_do_close+0x104>)
 801036e:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8010372:	4916      	ldr	r1, [pc, #88]	@ (80103cc <lwip_netconn_do_close+0x110>)
 8010374:	4814      	ldr	r0, [pc, #80]	@ (80103c8 <lwip_netconn_do_close+0x10c>)
 8010376:	f00d fd1d 	bl	801ddb4 <iprintf>
        UNLOCK_TCPIP_CORE();
 801037a:	4815      	ldr	r0, [pc, #84]	@ (80103d0 <lwip_netconn_do_close+0x114>)
 801037c:	f00d fac5 	bl	801d90a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	330c      	adds	r3, #12
 8010386:	2100      	movs	r1, #0
 8010388:	4618      	mov	r0, r3
 801038a:	f00d fa24 	bl	801d7d6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801038e:	4810      	ldr	r0, [pc, #64]	@ (80103d0 <lwip_netconn_do_close+0x114>)
 8010390:	f00d faac 	bl	801d8ec <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	785b      	ldrb	r3, [r3, #1]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00b      	beq.n	80103b6 <lwip_netconn_do_close+0xfa>
 801039e:	4b08      	ldr	r3, [pc, #32]	@ (80103c0 <lwip_netconn_do_close+0x104>)
 80103a0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80103a4:	4909      	ldr	r1, [pc, #36]	@ (80103cc <lwip_netconn_do_close+0x110>)
 80103a6:	4808      	ldr	r0, [pc, #32]	@ (80103c8 <lwip_netconn_do_close+0x10c>)
 80103a8:	f00d fd04 	bl	801ddb4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80103ac:	e003      	b.n	80103b6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	22f5      	movs	r2, #245	@ 0xf5
 80103b2:	711a      	strb	r2, [r3, #4]
 80103b4:	e000      	b.n	80103b8 <lwip_netconn_do_close+0xfc>
      return;
 80103b6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}
 80103be:	bf00      	nop
 80103c0:	0801f13c 	.word	0x0801f13c
 80103c4:	0801f4e0 	.word	0x0801f4e0
 80103c8:	0801f180 	.word	0x0801f180
 80103cc:	0801f4fc 	.word	0x0801f4fc
 80103d0:	24010348 	.word	0x24010348

080103d4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 80103d4:	b480      	push	{r7}
 80103d6:	b083      	sub	sp, #12
 80103d8:	af00      	add	r7, sp, #0
 80103da:	4603      	mov	r3, r0
 80103dc:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80103de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	dc04      	bgt.n	80103f0 <err_to_errno+0x1c>
 80103e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103ea:	f113 0f10 	cmn.w	r3, #16
 80103ee:	da01      	bge.n	80103f4 <err_to_errno+0x20>
    return EIO;
 80103f0:	2305      	movs	r3, #5
 80103f2:	e005      	b.n	8010400 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 80103f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80103f8:	425b      	negs	r3, r3
 80103fa:	4a04      	ldr	r2, [pc, #16]	@ (801040c <err_to_errno+0x38>)
 80103fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8010400:	4618      	mov	r0, r3
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	08022714 	.word	0x08022714

08010410 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d013      	beq.n	8010446 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00b      	beq.n	801043e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	f003 fc80 	bl	8013d30 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	605a      	str	r2, [r3, #4]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	685a      	ldr	r2, [r3, #4]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801043e:	6879      	ldr	r1, [r7, #4]
 8010440:	2006      	movs	r0, #6
 8010442:	f002 fd9b 	bl	8012f7c <memp_free>
  }
}
 8010446:	bf00      	nop
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
	...

08010450 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d106      	bne.n	801046c <netbuf_free+0x1c>
 801045e:	4b0d      	ldr	r3, [pc, #52]	@ (8010494 <netbuf_free+0x44>)
 8010460:	2281      	movs	r2, #129	@ 0x81
 8010462:	490d      	ldr	r1, [pc, #52]	@ (8010498 <netbuf_free+0x48>)
 8010464:	480d      	ldr	r0, [pc, #52]	@ (801049c <netbuf_free+0x4c>)
 8010466:	f00d fca5 	bl	801ddb4 <iprintf>
 801046a:	e00f      	b.n	801048c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d004      	beq.n	801047e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	4618      	mov	r0, r3
 801047a:	f003 fc59 	bl	8013d30 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	605a      	str	r2, [r3, #4]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 801048c:	3708      	adds	r7, #8
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	0801f694 	.word	0x0801f694
 8010498:	0801f730 	.word	0x0801f730
 801049c:	0801f6e4 	.word	0x0801f6e4

080104a0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	4613      	mov	r3, r2
 80104ac:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d108      	bne.n	80104c6 <netbuf_ref+0x26>
 80104b4:	4b1c      	ldr	r3, [pc, #112]	@ (8010528 <netbuf_ref+0x88>)
 80104b6:	2299      	movs	r2, #153	@ 0x99
 80104b8:	491c      	ldr	r1, [pc, #112]	@ (801052c <netbuf_ref+0x8c>)
 80104ba:	481d      	ldr	r0, [pc, #116]	@ (8010530 <netbuf_ref+0x90>)
 80104bc:	f00d fc7a 	bl	801ddb4 <iprintf>
 80104c0:	f06f 030f 	mvn.w	r3, #15
 80104c4:	e02b      	b.n	801051e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d004      	beq.n	80104d8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f003 fc2c 	bl	8013d30 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80104d8:	2241      	movs	r2, #65	@ 0x41
 80104da:	2100      	movs	r1, #0
 80104dc:	2036      	movs	r0, #54	@ 0x36
 80104de:	f003 f90d 	bl	80136fc <pbuf_alloc>
 80104e2:	4602      	mov	r2, r0
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d105      	bne.n	80104fc <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2200      	movs	r2, #0
 80104f4:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80104f6:	f04f 33ff 	mov.w	r3, #4294967295
 80104fa:	e010      	b.n	801051e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	68ba      	ldr	r2, [r7, #8]
 8010502:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	88fa      	ldrh	r2, [r7, #6]
 801050a:	811a      	strh	r2, [r3, #8]
 801050c:	68fa      	ldr	r2, [r7, #12]
 801050e:	6812      	ldr	r2, [r2, #0]
 8010510:	891b      	ldrh	r3, [r3, #8]
 8010512:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681a      	ldr	r2, [r3, #0]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	0801f694 	.word	0x0801f694
 801052c:	0801f74c 	.word	0x0801f74c
 8010530:	0801f6e4 	.word	0x0801f6e4

08010534 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8010534:	b480      	push	{r7}
 8010536:	b085      	sub	sp, #20
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2b00      	cmp	r3, #0
 8010544:	db02      	blt.n	801054c <tryget_socket_unconn_nouse+0x18>
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2b03      	cmp	r3, #3
 801054a:	dd01      	ble.n	8010550 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 801054c:	2300      	movs	r3, #0
 801054e:	e003      	b.n	8010558 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	011b      	lsls	r3, r3, #4
 8010554:	4a03      	ldr	r2, [pc, #12]	@ (8010564 <tryget_socket_unconn_nouse+0x30>)
 8010556:	4413      	add	r3, r2
}
 8010558:	4618      	mov	r0, r3
 801055a:	3714      	adds	r7, #20
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr
 8010564:	240102f8 	.word	0x240102f8

08010568 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff ffdf 	bl	8010534 <tryget_socket_unconn_nouse>
 8010576:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8010578:	68fb      	ldr	r3, [r7, #12]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b084      	sub	sp, #16
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ffd2 	bl	8010534 <tryget_socket_unconn_nouse>
 8010590:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 8010592:	68fb      	ldr	r3, [r7, #12]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7ff ffdf 	bl	8010568 <tryget_socket_unconn>
 80105aa:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d005      	beq.n	80105be <tryget_socket+0x22>
    if (sock->conn) {
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <tryget_socket+0x22>
      return sock;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	e000      	b.n	80105c0 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f7ff ffe3 	bl	801059c <tryget_socket>
 80105d6:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d104      	bne.n	80105e8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80105de:	4b05      	ldr	r3, [pc, #20]	@ (80105f4 <get_socket+0x2c>)
 80105e0:	2209      	movs	r2, #9
 80105e2:	601a      	str	r2, [r3, #0]
    return NULL;
 80105e4:	2300      	movs	r3, #0
 80105e6:	e000      	b.n	80105ea <get_socket+0x22>
  }
  return sock;
 80105e8:	68fb      	ldr	r3, [r7, #12]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	240170b0 	.word	0x240170b0

080105f8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8010602:	2300      	movs	r3, #0
 8010604:	60fb      	str	r3, [r7, #12]
 8010606:	e052      	b.n	80106ae <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8010608:	f00d f9ac 	bl	801d964 <sys_arch_protect>
 801060c:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 801060e:	4a2c      	ldr	r2, [pc, #176]	@ (80106c0 <alloc_socket+0xc8>)
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	011b      	lsls	r3, r3, #4
 8010614:	4413      	add	r3, r2
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d142      	bne.n	80106a2 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 801061c:	4a28      	ldr	r2, [pc, #160]	@ (80106c0 <alloc_socket+0xc8>)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	011b      	lsls	r3, r3, #4
 8010622:	4413      	add	r3, r2
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8010628:	68b8      	ldr	r0, [r7, #8]
 801062a:	f00d f9a9 	bl	801d980 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 801062e:	4a24      	ldr	r2, [pc, #144]	@ (80106c0 <alloc_socket+0xc8>)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	011b      	lsls	r3, r3, #4
 8010634:	4413      	add	r3, r2
 8010636:	3304      	adds	r3, #4
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 801063c:	4a20      	ldr	r2, [pc, #128]	@ (80106c0 <alloc_socket+0xc8>)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	011b      	lsls	r3, r3, #4
 8010642:	4413      	add	r3, r2
 8010644:	330e      	adds	r3, #14
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d006      	beq.n	801065a <alloc_socket+0x62>
 801064c:	4b1d      	ldr	r3, [pc, #116]	@ (80106c4 <alloc_socket+0xcc>)
 801064e:	f240 220e 	movw	r2, #526	@ 0x20e
 8010652:	491d      	ldr	r1, [pc, #116]	@ (80106c8 <alloc_socket+0xd0>)
 8010654:	481d      	ldr	r0, [pc, #116]	@ (80106cc <alloc_socket+0xd4>)
 8010656:	f00d fbad 	bl	801ddb4 <iprintf>
      sockets[i].rcvevent   = 0;
 801065a:	4a19      	ldr	r2, [pc, #100]	@ (80106c0 <alloc_socket+0xc8>)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	011b      	lsls	r3, r3, #4
 8010660:	4413      	add	r3, r2
 8010662:	3308      	adds	r3, #8
 8010664:	2200      	movs	r2, #0
 8010666:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010670:	2b10      	cmp	r3, #16
 8010672:	d102      	bne.n	801067a <alloc_socket+0x82>
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <alloc_socket+0x86>
 801067a:	2301      	movs	r3, #1
 801067c:	e000      	b.n	8010680 <alloc_socket+0x88>
 801067e:	2300      	movs	r3, #0
 8010680:	b299      	uxth	r1, r3
 8010682:	4a0f      	ldr	r2, [pc, #60]	@ (80106c0 <alloc_socket+0xc8>)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	011b      	lsls	r3, r3, #4
 8010688:	4413      	add	r3, r2
 801068a:	330a      	adds	r3, #10
 801068c:	460a      	mov	r2, r1
 801068e:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 8010690:	4a0b      	ldr	r2, [pc, #44]	@ (80106c0 <alloc_socket+0xc8>)
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	011b      	lsls	r3, r3, #4
 8010696:	4413      	add	r3, r2
 8010698:	330c      	adds	r3, #12
 801069a:	2200      	movs	r2, #0
 801069c:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	e00a      	b.n	80106b8 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80106a2:	68b8      	ldr	r0, [r7, #8]
 80106a4:	f00d f96c 	bl	801d980 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	3301      	adds	r3, #1
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2b03      	cmp	r3, #3
 80106b2:	dda9      	ble.n	8010608 <alloc_socket+0x10>
  }
  return -1;
 80106b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3710      	adds	r7, #16
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	240102f8 	.word	0x240102f8
 80106c4:	0801f82c 	.word	0x0801f82c
 80106c8:	0801f860 	.word	0x0801f860
 80106cc:	0801f880 	.word	0x0801f880

080106d0 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b085      	sub	sp, #20
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
 80106dc:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	6852      	ldr	r2, [r2, #4]
 80106e4:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2200      	movs	r2, #0
 80106ea:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]
  return 1;
 80106fa:	2301      	movs	r3, #1
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3714      	adds	r7, #20
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00d      	beq.n	8010738 <free_socket_free_elements+0x30>
    if (is_tcp) {
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d005      	beq.n	801072e <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4618      	mov	r0, r3
 8010728:	f003 fb02 	bl	8013d30 <pbuf_free>
 801072c:	e004      	b.n	8010738 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4618      	mov	r0, r3
 8010734:	f7ff fe6c 	bl	8010410 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d002      	beq.n	8010744 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 801073e:	68b8      	ldr	r0, [r7, #8]
 8010740:	f7fd fcee 	bl	800e120 <netconn_delete>
  }
}
 8010744:	bf00      	nop
 8010746:	3710      	adds	r7, #16
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b086      	sub	sp, #24
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8010756:	f00d f905 	bl	801d964 <sys_arch_protect>
 801075a:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 801075c:	f107 0308 	add.w	r3, r7, #8
 8010760:	f107 020c 	add.w	r2, r7, #12
 8010764:	6839      	ldr	r1, [r7, #0]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7ff ffb2 	bl	80106d0 <free_socket_locked>
 801076c:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 801076e:	6978      	ldr	r0, [r7, #20]
 8010770:	f00d f906 	bl	801d980 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d006      	beq.n	8010788 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f107 0208 	add.w	r2, r7, #8
 8010780:	4619      	mov	r1, r3
 8010782:	6838      	ldr	r0, [r7, #0]
 8010784:	f7ff ffc0 	bl	8010708 <free_socket_free_elements>
  }
}
 8010788:	bf00      	nop
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 8010790:	b590      	push	{r4, r7, lr}
 8010792:	b099      	sub	sp, #100	@ 0x64
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 801079c:	2300      	movs	r3, #0
 801079e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f7ff ff11 	bl	80105c8 <get_socket>
 80107a6:	65b8      	str	r0, [r7, #88]	@ 0x58
  if (!sock) {
 80107a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d102      	bne.n	80107b4 <lwip_accept+0x24>
    return -1;
 80107ae:	f04f 33ff 	mov.w	r3, #4294967295
 80107b2:	e0f8      	b.n	80109a6 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 80107b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f7fd fd80 	bl	800e2c4 <netconn_accept>
 80107c4:	4603      	mov	r3, r0
 80107c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (err != ERR_OK) {
 80107ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d02c      	beq.n	801082c <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80107d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80107dc:	2b10      	cmp	r3, #16
 80107de:	d008      	beq.n	80107f2 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 80107e0:	235f      	movs	r3, #95	@ 0x5f
 80107e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80107e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d01d      	beq.n	8010826 <lwip_accept+0x96>
 80107ea:	4a71      	ldr	r2, [pc, #452]	@ (80109b0 <lwip_accept+0x220>)
 80107ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ee:	6013      	str	r3, [r2, #0]
 80107f0:	e019      	b.n	8010826 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 80107f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80107f6:	f113 0f0f 	cmn.w	r3, #15
 80107fa:	d108      	bne.n	801080e <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 80107fc:	2316      	movs	r3, #22
 80107fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8010800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00f      	beq.n	8010826 <lwip_accept+0x96>
 8010806:	4a6a      	ldr	r2, [pc, #424]	@ (80109b0 <lwip_accept+0x220>)
 8010808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	e00b      	b.n	8010826 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 801080e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8010812:	4618      	mov	r0, r3
 8010814:	f7ff fdde 	bl	80103d4 <err_to_errno>
 8010818:	63b8      	str	r0, [r7, #56]	@ 0x38
 801081a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <lwip_accept+0x96>
 8010820:	4a63      	ldr	r2, [pc, #396]	@ (80109b0 <lwip_accept+0x220>)
 8010822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010824:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010826:	f04f 33ff 	mov.w	r3, #4294967295
 801082a:	e0bc      	b.n	80109a6 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 801082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <lwip_accept+0xb0>
 8010832:	4b60      	ldr	r3, [pc, #384]	@ (80109b4 <lwip_accept+0x224>)
 8010834:	f240 228b 	movw	r2, #651	@ 0x28b
 8010838:	495f      	ldr	r1, [pc, #380]	@ (80109b8 <lwip_accept+0x228>)
 801083a:	4860      	ldr	r0, [pc, #384]	@ (80109bc <lwip_accept+0x22c>)
 801083c:	f00d faba 	bl	801ddb4 <iprintf>

  newsock = alloc_socket(newconn, 1);
 8010840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010842:	2101      	movs	r1, #1
 8010844:	4618      	mov	r0, r3
 8010846:	f7ff fed7 	bl	80105f8 <alloc_socket>
 801084a:	6538      	str	r0, [r7, #80]	@ 0x50
  if (newsock == -1) {
 801084c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801084e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010852:	d10e      	bne.n	8010872 <lwip_accept+0xe2>
    netconn_delete(newconn);
 8010854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010856:	4618      	mov	r0, r3
 8010858:	f7fd fc62 	bl	800e120 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 801085c:	2317      	movs	r3, #23
 801085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010862:	2b00      	cmp	r3, #0
 8010864:	d002      	beq.n	801086c <lwip_accept+0xdc>
 8010866:	4a52      	ldr	r2, [pc, #328]	@ (80109b0 <lwip_accept+0x220>)
 8010868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801086a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 801086c:	f04f 33ff 	mov.w	r3, #4294967295
 8010870:	e099      	b.n	80109a6 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8010872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010874:	2b00      	cmp	r3, #0
 8010876:	db02      	blt.n	801087e <lwip_accept+0xee>
 8010878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801087a:	2b03      	cmp	r3, #3
 801087c:	dd06      	ble.n	801088c <lwip_accept+0xfc>
 801087e:	4b4d      	ldr	r3, [pc, #308]	@ (80109b4 <lwip_accept+0x224>)
 8010880:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8010884:	494e      	ldr	r1, [pc, #312]	@ (80109c0 <lwip_accept+0x230>)
 8010886:	484d      	ldr	r0, [pc, #308]	@ (80109bc <lwip_accept+0x22c>)
 8010888:	f00d fa94 	bl	801ddb4 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 801088c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801088e:	011b      	lsls	r3, r3, #4
 8010890:	4a4c      	ldr	r2, [pc, #304]	@ (80109c4 <lwip_accept+0x234>)
 8010892:	4413      	add	r3, r2
 8010894:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8010896:	f00d f865 	bl	801d964 <sys_arch_protect>
 801089a:	64b8      	str	r0, [r7, #72]	@ 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 801089c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089e:	699b      	ldr	r3, [r3, #24]
 80108a0:	b21b      	sxth	r3, r3
 80108a2:	43db      	mvns	r3, r3
 80108a4:	b21b      	sxth	r3, r3
 80108a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  newconn->socket = newsock;
 80108a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80108ac:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 80108ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80108b0:	f00d f866 	bl	801d980 <sys_arch_unprotect>

  if (newconn->callback) {
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d012      	beq.n	80108e2 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 80108bc:	4842      	ldr	r0, [pc, #264]	@ (80109c8 <lwip_accept+0x238>)
 80108be:	f00d f815 	bl	801d8ec <sys_mutex_lock>
    while (recvevent > 0) {
 80108c2:	e008      	b.n	80108d6 <lwip_accept+0x146>
      recvevent--;
 80108c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108c6:	3b01      	subs	r3, #1
 80108c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108d0:	2200      	movs	r2, #0
 80108d2:	2100      	movs	r1, #0
 80108d4:	4798      	blx	r3
    while (recvevent > 0) {
 80108d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dcf3      	bgt.n	80108c4 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 80108dc:	483a      	ldr	r0, [pc, #232]	@ (80109c8 <lwip_accept+0x238>)
 80108de:	f00d f814 	bl	801d90a <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d055      	beq.n	8010994 <lwip_accept+0x204>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d052      	beq.n	8010994 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 80108ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108f0:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 80108f4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80108f8:	2300      	movs	r3, #0
 80108fa:	f7fd fc2d 	bl	800e158 <netconn_getaddr>
 80108fe:	4603      	mov	r3, r0
 8010900:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (err != ERR_OK) {
 8010904:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8010908:	2b00      	cmp	r3, #0
 801090a:	d016      	beq.n	801093a <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 801090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090e:	4618      	mov	r0, r3
 8010910:	f7fd fc06 	bl	800e120 <netconn_delete>
      free_socket(nsock, 1);
 8010914:	2101      	movs	r1, #1
 8010916:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010918:	f7ff ff18 	bl	801074c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 801091c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8010920:	4618      	mov	r0, r3
 8010922:	f7ff fd57 	bl	80103d4 <err_to_errno>
 8010926:	6478      	str	r0, [r7, #68]	@ 0x44
 8010928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801092a:	2b00      	cmp	r3, #0
 801092c:	d002      	beq.n	8010934 <lwip_accept+0x1a4>
 801092e:	4a20      	ldr	r2, [pc, #128]	@ (80109b0 <lwip_accept+0x220>)
 8010930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010932:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8010934:	f04f 33ff 	mov.w	r3, #4294967295
 8010938:	e035      	b.n	80109a6 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 801093a:	f107 0314 	add.w	r3, r7, #20
 801093e:	2210      	movs	r2, #16
 8010940:	701a      	strb	r2, [r3, #0]
 8010942:	f107 0314 	add.w	r3, r7, #20
 8010946:	2202      	movs	r2, #2
 8010948:	705a      	strb	r2, [r3, #1]
 801094a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801094c:	f107 0414 	add.w	r4, r7, #20
 8010950:	4618      	mov	r0, r3
 8010952:	f001 fcfd 	bl	8012350 <lwip_htons>
 8010956:	4603      	mov	r3, r0
 8010958:	8063      	strh	r3, [r4, #2]
 801095a:	f107 0314 	add.w	r3, r7, #20
 801095e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010960:	605a      	str	r2, [r3, #4]
 8010962:	f107 0314 	add.w	r3, r7, #20
 8010966:	3308      	adds	r3, #8
 8010968:	2208      	movs	r2, #8
 801096a:	2100      	movs	r1, #0
 801096c:	4618      	mov	r0, r3
 801096e:	f00d fb79 	bl	801e064 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	7d3a      	ldrb	r2, [r7, #20]
 8010978:	4293      	cmp	r3, r2
 801097a:	d903      	bls.n	8010984 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 801097c:	7d3b      	ldrb	r3, [r7, #20]
 801097e:	461a      	mov	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	f107 0314 	add.w	r3, r7, #20
 801098c:	4619      	mov	r1, r3
 801098e:	68b8      	ldr	r0, [r7, #8]
 8010990:	f00d fc43 	bl	801e21a <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8010994:	2300      	movs	r3, #0
 8010996:	643b      	str	r3, [r7, #64]	@ 0x40
 8010998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801099a:	2b00      	cmp	r3, #0
 801099c:	d002      	beq.n	80109a4 <lwip_accept+0x214>
 801099e:	4a04      	ldr	r2, [pc, #16]	@ (80109b0 <lwip_accept+0x220>)
 80109a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109a2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 80109a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3764      	adds	r7, #100	@ 0x64
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd90      	pop	{r4, r7, pc}
 80109ae:	bf00      	nop
 80109b0:	240170b0 	.word	0x240170b0
 80109b4:	0801f82c 	.word	0x0801f82c
 80109b8:	0801f8a8 	.word	0x0801f8a8
 80109bc:	0801f880 	.word	0x0801f880
 80109c0:	0801f8b8 	.word	0x0801f8b8
 80109c4:	240102f8 	.word	0x240102f8
 80109c8:	24010348 	.word	0x24010348

080109cc <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b08a      	sub	sp, #40	@ 0x28
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	60f8      	str	r0, [r7, #12]
 80109d4:	60b9      	str	r1, [r7, #8]
 80109d6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f7ff fdf5 	bl	80105c8 <get_socket>
 80109de:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 80109e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d102      	bne.n	80109ec <lwip_bind+0x20>
    return -1;
 80109e6:	f04f 33ff 	mov.w	r3, #4294967295
 80109ea:	e051      	b.n	8010a90 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b10      	cmp	r3, #16
 80109f0:	d108      	bne.n	8010a04 <lwip_bind+0x38>
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	785b      	ldrb	r3, [r3, #1]
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	d104      	bne.n	8010a04 <lwip_bind+0x38>
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	f003 0303 	and.w	r3, r3, #3
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d014      	beq.n	8010a2e <lwip_bind+0x62>
 8010a04:	4b24      	ldr	r3, [pc, #144]	@ (8010a98 <lwip_bind+0xcc>)
 8010a06:	f240 22e2 	movw	r2, #738	@ 0x2e2
 8010a0a:	4924      	ldr	r1, [pc, #144]	@ (8010a9c <lwip_bind+0xd0>)
 8010a0c:	4824      	ldr	r0, [pc, #144]	@ (8010aa0 <lwip_bind+0xd4>)
 8010a0e:	f00d f9d1 	bl	801ddb4 <iprintf>
 8010a12:	f06f 000f 	mvn.w	r0, #15
 8010a16:	f7ff fcdd 	bl	80103d4 <err_to_errno>
 8010a1a:	6178      	str	r0, [r7, #20]
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d002      	beq.n	8010a28 <lwip_bind+0x5c>
 8010a22:	4a20      	ldr	r2, [pc, #128]	@ (8010aa4 <lwip_bind+0xd8>)
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	6013      	str	r3, [r2, #0]
 8010a28:	f04f 33ff 	mov.w	r3, #4294967295
 8010a2c:	e030      	b.n	8010a90 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	613b      	str	r3, [r7, #16]
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	885b      	ldrh	r3, [r3, #2]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f001 fc89 	bl	8012350 <lwip_htons>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8010a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010a48:	f107 0110 	add.w	r1, r7, #16
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fd fbd5 	bl	800e1fc <netconn_bind>
 8010a52:	4603      	mov	r3, r0
 8010a54:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 8010a58:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00e      	beq.n	8010a7e <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8010a60:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7ff fcb5 	bl	80103d4 <err_to_errno>
 8010a6a:	61b8      	str	r0, [r7, #24]
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d002      	beq.n	8010a78 <lwip_bind+0xac>
 8010a72:	4a0c      	ldr	r2, [pc, #48]	@ (8010aa4 <lwip_bind+0xd8>)
 8010a74:	69bb      	ldr	r3, [r7, #24]
 8010a76:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010a78:	f04f 33ff 	mov.w	r3, #4294967295
 8010a7c:	e008      	b.n	8010a90 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8010a7e:	2300      	movs	r3, #0
 8010a80:	61fb      	str	r3, [r7, #28]
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <lwip_bind+0xc2>
 8010a88:	4a06      	ldr	r2, [pc, #24]	@ (8010aa4 <lwip_bind+0xd8>)
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010a8e:	2300      	movs	r3, #0
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3728      	adds	r7, #40	@ 0x28
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	0801f82c 	.word	0x0801f82c
 8010a9c:	0801f8d0 	.word	0x0801f8d0
 8010aa0:	0801f880 	.word	0x0801f880
 8010aa4:	240170b0 	.word	0x240170b0

08010aa8 <lwip_close>:

int
lwip_close(int s)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7ff fd87 	bl	80105c8 <get_socket>
 8010aba:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d102      	bne.n	8010ac8 <lwip_close+0x20>
    return -1;
 8010ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac6:	e039      	b.n	8010b3c <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00b      	beq.n	8010ae8 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010ada:	2b10      	cmp	r3, #16
 8010adc:	bf0c      	ite	eq
 8010ade:	2301      	moveq	r3, #1
 8010ae0:	2300      	movne	r3, #0
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	617b      	str	r3, [r7, #20]
 8010ae6:	e00a      	b.n	8010afe <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d006      	beq.n	8010afe <lwip_close+0x56>
 8010af0:	4b14      	ldr	r3, [pc, #80]	@ (8010b44 <lwip_close+0x9c>)
 8010af2:	f44f 7245 	mov.w	r2, #788	@ 0x314
 8010af6:	4914      	ldr	r1, [pc, #80]	@ (8010b48 <lwip_close+0xa0>)
 8010af8:	4814      	ldr	r0, [pc, #80]	@ (8010b4c <lwip_close+0xa4>)
 8010afa:	f00d f95b 	bl	801ddb4 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7fd fae8 	bl	800e0d8 <netconn_prepare_delete>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d00e      	beq.n	8010b32 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8010b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff fc5b 	bl	80103d4 <err_to_errno>
 8010b1e:	60b8      	str	r0, [r7, #8]
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d002      	beq.n	8010b2c <lwip_close+0x84>
 8010b26:	4a0a      	ldr	r2, [pc, #40]	@ (8010b50 <lwip_close+0xa8>)
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b30:	e004      	b.n	8010b3c <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8010b32:	6979      	ldr	r1, [r7, #20]
 8010b34:	6938      	ldr	r0, [r7, #16]
 8010b36:	f7ff fe09 	bl	801074c <free_socket>
  set_errno(0);
  return 0;
 8010b3a:	2300      	movs	r3, #0
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3718      	adds	r7, #24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	0801f82c 	.word	0x0801f82c
 8010b48:	0801f8ec 	.word	0x0801f8ec
 8010b4c:	0801f880 	.word	0x0801f880
 8010b50:	240170b0 	.word	0x240170b0

08010b54 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b088      	sub	sp, #32
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7ff fd32 	bl	80105c8 <get_socket>
 8010b64:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d102      	bne.n	8010b72 <lwip_listen+0x1e>
    return -1;
 8010b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b70:	e03e      	b.n	8010bf0 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	2bfe      	cmp	r3, #254	@ 0xfe
 8010b76:	dc03      	bgt.n	8010b80 <lwip_listen+0x2c>
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b7e:	e000      	b.n	8010b82 <lwip_listen+0x2e>
 8010b80:	23ff      	movs	r3, #255	@ 0xff
 8010b82:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	683a      	ldr	r2, [r7, #0]
 8010b8a:	b2d2      	uxtb	r2, r2
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fd fb6c 	bl	800e26c <netconn_listen_with_backlog>
 8010b94:	4603      	mov	r3, r0
 8010b96:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8010b98:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d01e      	beq.n	8010bde <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010baa:	2b10      	cmp	r3, #16
 8010bac:	d008      	beq.n	8010bc0 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8010bae:	235f      	movs	r3, #95	@ 0x5f
 8010bb0:	60fb      	str	r3, [r7, #12]
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00f      	beq.n	8010bd8 <lwip_listen+0x84>
 8010bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8010bf8 <lwip_listen+0xa4>)
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6013      	str	r3, [r2, #0]
 8010bbe:	e00b      	b.n	8010bd8 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8010bc0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f7ff fc05 	bl	80103d4 <err_to_errno>
 8010bca:	6138      	str	r0, [r7, #16]
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d002      	beq.n	8010bd8 <lwip_listen+0x84>
 8010bd2:	4a09      	ldr	r2, [pc, #36]	@ (8010bf8 <lwip_listen+0xa4>)
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8010bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bdc:	e008      	b.n	8010bf0 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8010bde:	2300      	movs	r3, #0
 8010be0:	617b      	str	r3, [r7, #20]
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <lwip_listen+0x9a>
 8010be8:	4a03      	ldr	r2, [pc, #12]	@ (8010bf8 <lwip_listen+0xa4>)
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8010bee:	2300      	movs	r3, #0
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3720      	adds	r7, #32
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	240170b0 	.word	0x240170b0

08010bfc <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b08c      	sub	sp, #48	@ 0x30
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
 8010c08:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8010c0a:	2308      	movs	r3, #8
 8010c0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	db01      	blt.n	8010c1e <lwip_recv_tcp+0x22>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	e001      	b.n	8010c22 <lwip_recv_tcp+0x26>
 8010c1e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010c22:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d106      	bne.n	8010c38 <lwip_recv_tcp+0x3c>
 8010c2a:	4b74      	ldr	r3, [pc, #464]	@ (8010dfc <lwip_recv_tcp+0x200>)
 8010c2c:	f240 329e 	movw	r2, #926	@ 0x39e
 8010c30:	4973      	ldr	r1, [pc, #460]	@ (8010e00 <lwip_recv_tcp+0x204>)
 8010c32:	4874      	ldr	r0, [pc, #464]	@ (8010e04 <lwip_recv_tcp+0x208>)
 8010c34:	f00d f8be 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010c42:	2b10      	cmp	r3, #16
 8010c44:	d006      	beq.n	8010c54 <lwip_recv_tcp+0x58>
 8010c46:	4b6d      	ldr	r3, [pc, #436]	@ (8010dfc <lwip_recv_tcp+0x200>)
 8010c48:	f240 329f 	movw	r2, #927	@ 0x39f
 8010c4c:	496e      	ldr	r1, [pc, #440]	@ (8010e08 <lwip_recv_tcp+0x20c>)
 8010c4e:	486d      	ldr	r0, [pc, #436]	@ (8010e04 <lwip_recv_tcp+0x208>)
 8010c50:	f00d f8b0 	bl	801ddb4 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	f003 0308 	and.w	r3, r3, #8
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8010c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c62:	f043 0304 	orr.w	r3, r3, #4
 8010c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	617b      	str	r3, [r7, #20]
 8010c78:	e036      	b.n	8010ce8 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8010c82:	f107 0114 	add.w	r1, r7, #20
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fd fd52 	bl	800e730 <netconn_recv_tcp_pbuf_flags>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8010c92:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d019      	beq.n	8010cce <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8010c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f300 808d 	bgt.w	8010dbc <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8010ca2:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7ff fb94 	bl	80103d4 <err_to_errno>
 8010cac:	61f8      	str	r0, [r7, #28]
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d002      	beq.n	8010cba <lwip_recv_tcp+0xbe>
 8010cb4:	4a55      	ldr	r2, [pc, #340]	@ (8010e0c <lwip_recv_tcp+0x210>)
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8010cba:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8010cbe:	f113 0f0f 	cmn.w	r3, #15
 8010cc2:	d101      	bne.n	8010cc8 <lwip_recv_tcp+0xcc>
          return 0;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	e094      	b.n	8010df2 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8010cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ccc:	e091      	b.n	8010df2 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d106      	bne.n	8010ce2 <lwip_recv_tcp+0xe6>
 8010cd4:	4b49      	ldr	r3, [pc, #292]	@ (8010dfc <lwip_recv_tcp+0x200>)
 8010cd6:	f240 32c5 	movw	r2, #965	@ 0x3c5
 8010cda:	494d      	ldr	r1, [pc, #308]	@ (8010e10 <lwip_recv_tcp+0x214>)
 8010cdc:	4849      	ldr	r0, [pc, #292]	@ (8010e04 <lwip_recv_tcp+0x208>)
 8010cde:	f00d f869 	bl	801ddb4 <iprintf>
      sock->lastdata.pbuf = p;
 8010ce2:	697a      	ldr	r2, [r7, #20]
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	891b      	ldrh	r3, [r3, #8]
 8010cec:	461a      	mov	r2, r3
 8010cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	dd03      	ble.n	8010cfc <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	891b      	ldrh	r3, [r3, #8]
 8010cf8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010cfa:	e001      	b.n	8010d00 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfe:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 8010d00:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d04:	4413      	add	r3, r2
 8010d06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	dd03      	ble.n	8010d14 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8010d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	43db      	mvns	r3, r3
 8010d12:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8010d14:	6978      	ldr	r0, [r7, #20]
 8010d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	18d1      	adds	r1, r2, r3
 8010d1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010d1e:	2300      	movs	r3, #0
 8010d20:	f003 fa0c 	bl	801413c <pbuf_copy_partial>

    recvd += copylen;
 8010d24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d28:	4413      	add	r3, r2
 8010d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8010d2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d30:	429a      	cmp	r2, r3
 8010d32:	da06      	bge.n	8010d42 <lwip_recv_tcp+0x146>
 8010d34:	4b31      	ldr	r3, [pc, #196]	@ (8010dfc <lwip_recv_tcp+0x200>)
 8010d36:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8010d3a:	4936      	ldr	r1, [pc, #216]	@ (8010e14 <lwip_recv_tcp+0x218>)
 8010d3c:	4831      	ldr	r0, [pc, #196]	@ (8010e04 <lwip_recv_tcp+0x208>)
 8010d3e:	f00d f839 	bl	801ddb4 <iprintf>
    recv_left -= copylen;
 8010d42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d46:	1ad3      	subs	r3, r2, r3
 8010d48:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	f003 0301 	and.w	r3, r3, #1
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d123      	bne.n	8010d9c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	891b      	ldrh	r3, [r3, #8]
 8010d58:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d906      	bls.n	8010d6c <lwip_recv_tcp+0x170>
 8010d5e:	4b27      	ldr	r3, [pc, #156]	@ (8010dfc <lwip_recv_tcp+0x200>)
 8010d60:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8010d64:	492c      	ldr	r1, [pc, #176]	@ (8010e18 <lwip_recv_tcp+0x21c>)
 8010d66:	4827      	ldr	r0, [pc, #156]	@ (8010e04 <lwip_recv_tcp+0x208>)
 8010d68:	f00d f824 	bl	801ddb4 <iprintf>
      if (p->tot_len - copylen > 0) {
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	891b      	ldrh	r3, [r3, #8]
 8010d70:	461a      	mov	r2, r3
 8010d72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	dd09      	ble.n	8010d8e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010d7e:	4611      	mov	r1, r2
 8010d80:	4618      	mov	r0, r3
 8010d82:	f002 ffa2 	bl	8013cca <pbuf_free_header>
 8010d86:	4602      	mov	r2, r0
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	605a      	str	r2, [r3, #4]
 8010d8c:	e006      	b.n	8010d9c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2200      	movs	r2, #0
 8010d92:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f002 ffca 	bl	8013d30 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8010d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010da0:	f043 0314 	orr.w	r3, r3, #20
 8010da4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8010da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	dd08      	ble.n	8010dc0 <lwip_recv_tcp+0x1c4>
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f43f af58 	beq.w	8010c6a <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8010dba:	e001      	b.n	8010dc0 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8010dbc:	bf00      	nop
 8010dbe:	e000      	b.n	8010dc2 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 8010dc0:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8010dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	dd0b      	ble.n	8010de0 <lwip_recv_tcp+0x1e4>
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	f003 0301 	and.w	r3, r3, #1
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d106      	bne.n	8010de0 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dd8:	4611      	mov	r1, r2
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fd fbf6 	bl	800e5cc <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 8010de0:	2300      	movs	r3, #0
 8010de2:	61bb      	str	r3, [r7, #24]
 8010de4:	69bb      	ldr	r3, [r7, #24]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <lwip_recv_tcp+0x1f4>
 8010dea:	4a08      	ldr	r2, [pc, #32]	@ (8010e0c <lwip_recv_tcp+0x210>)
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	6013      	str	r3, [r2, #0]
  return recvd;
 8010df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3730      	adds	r7, #48	@ 0x30
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	0801f82c 	.word	0x0801f82c
 8010e00:	0801f924 	.word	0x0801f924
 8010e04:	0801f880 	.word	0x0801f880
 8010e08:	0801f934 	.word	0x0801f934
 8010e0c:	240170b0 	.word	0x240170b0
 8010e10:	0801f958 	.word	0x0801f958
 8010e14:	0801f964 	.word	0x0801f964
 8010e18:	0801f98c 	.word	0x0801f98c

08010e1c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8010e1c:	b590      	push	{r4, r7, lr}
 8010e1e:	b08b      	sub	sp, #44	@ 0x2c
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	4613      	mov	r3, r2
 8010e2a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d106      	bne.n	8010e44 <lwip_sock_make_addr+0x28>
 8010e36:	4b2b      	ldr	r3, [pc, #172]	@ (8010ee4 <lwip_sock_make_addr+0xc8>)
 8010e38:	f240 4207 	movw	r2, #1031	@ 0x407
 8010e3c:	492a      	ldr	r1, [pc, #168]	@ (8010ee8 <lwip_sock_make_addr+0xcc>)
 8010e3e:	482b      	ldr	r0, [pc, #172]	@ (8010eec <lwip_sock_make_addr+0xd0>)
 8010e40:	f00c ffb8 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d106      	bne.n	8010e58 <lwip_sock_make_addr+0x3c>
 8010e4a:	4b26      	ldr	r3, [pc, #152]	@ (8010ee4 <lwip_sock_make_addr+0xc8>)
 8010e4c:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8010e50:	4927      	ldr	r1, [pc, #156]	@ (8010ef0 <lwip_sock_make_addr+0xd4>)
 8010e52:	4826      	ldr	r0, [pc, #152]	@ (8010eec <lwip_sock_make_addr+0xd0>)
 8010e54:	f00c ffae 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8010e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <lwip_sock_make_addr+0x50>
 8010e5e:	4b21      	ldr	r3, [pc, #132]	@ (8010ee4 <lwip_sock_make_addr+0xc8>)
 8010e60:	f240 4209 	movw	r2, #1033	@ 0x409
 8010e64:	4923      	ldr	r1, [pc, #140]	@ (8010ef4 <lwip_sock_make_addr+0xd8>)
 8010e66:	4821      	ldr	r0, [pc, #132]	@ (8010eec <lwip_sock_make_addr+0xd0>)
 8010e68:	f00c ffa4 	bl	801ddb4 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8010e6c:	f107 0314 	add.w	r3, r7, #20
 8010e70:	2210      	movs	r2, #16
 8010e72:	701a      	strb	r2, [r3, #0]
 8010e74:	f107 0314 	add.w	r3, r7, #20
 8010e78:	2202      	movs	r2, #2
 8010e7a:	705a      	strb	r2, [r3, #1]
 8010e7c:	f107 0414 	add.w	r4, r7, #20
 8010e80:	88fb      	ldrh	r3, [r7, #6]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f001 fa64 	bl	8012350 <lwip_htons>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	8063      	strh	r3, [r4, #2]
 8010e8c:	f107 0314 	add.w	r3, r7, #20
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	6812      	ldr	r2, [r2, #0]
 8010e94:	605a      	str	r2, [r3, #4]
 8010e96:	f107 0314 	add.w	r3, r7, #20
 8010e9a:	3308      	adds	r3, #8
 8010e9c:	2208      	movs	r2, #8
 8010e9e:	2100      	movs	r1, #0
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f00d f8df 	bl	801e064 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8010ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	7d3a      	ldrb	r2, [r7, #20]
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d202      	bcs.n	8010eb6 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010eb4:	e008      	b.n	8010ec8 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	7d3a      	ldrb	r2, [r7, #20]
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d903      	bls.n	8010ec8 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 8010ec0:	7d3b      	ldrb	r3, [r7, #20]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec6:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8010ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	f107 0314 	add.w	r3, r7, #20
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6838      	ldr	r0, [r7, #0]
 8010ed4:	f00d f9a1 	bl	801e21a <memcpy>
  return truncated;
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	372c      	adds	r7, #44	@ 0x2c
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd90      	pop	{r4, r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	0801f82c 	.word	0x0801f82c
 8010ee8:	0801f99c 	.word	0x0801f99c
 8010eec:	0801f880 	.word	0x0801f880
 8010ef0:	0801f9b0 	.word	0x0801f9b0
 8010ef4:	0801f9c0 	.word	0x0801f9c0

08010ef8 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af02      	add	r7, sp, #8
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <lwip_recv_tcp_from+0x18>
    return 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	e021      	b.n	8010f54 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d01d      	beq.n	8010f52 <lwip_recv_tcp_from+0x5a>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d01a      	beq.n	8010f52 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6818      	ldr	r0, [r3, #0]
 8010f20:	f107 0216 	add.w	r2, r7, #22
 8010f24:	f107 0110 	add.w	r1, r7, #16
 8010f28:	2300      	movs	r3, #0
 8010f2a:	f7fd f915 	bl	800e158 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00e      	beq.n	8010f52 <lwip_recv_tcp_from+0x5a>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00b      	beq.n	8010f52 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	6818      	ldr	r0, [r3, #0]
 8010f3e:	8afa      	ldrh	r2, [r7, #22]
 8010f40:	f107 0110 	add.w	r1, r7, #16
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	f7ff ff67 	bl	8010e1c <lwip_sock_make_addr>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	e000      	b.n	8010f54 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 8010f52:	2300      	movs	r3, #0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 8010f5c:	b590      	push	{r4, r7, lr}
 8010f5e:	b08d      	sub	sp, #52	@ 0x34
 8010f60:	af02      	add	r7, sp, #8
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
 8010f66:	607a      	str	r2, [r7, #4]
 8010f68:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d10d      	bne.n	8010f8e <lwip_recvfrom_udp_raw+0x32>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	68db      	ldr	r3, [r3, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	dd09      	ble.n	8010f8e <lwip_recvfrom_udp_raw+0x32>
 8010f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80110f4 <lwip_recvfrom_udp_raw+0x198>)
 8010f7c:	f240 4249 	movw	r2, #1097	@ 0x449
 8010f80:	495d      	ldr	r1, [pc, #372]	@ (80110f8 <lwip_recvfrom_udp_raw+0x19c>)
 8010f82:	485e      	ldr	r0, [pc, #376]	@ (80110fc <lwip_recvfrom_udp_raw+0x1a0>)
 8010f84:	f00c ff16 	bl	801ddb4 <iprintf>
 8010f88:	f06f 030f 	mvn.w	r3, #15
 8010f8c:	e0ad      	b.n	80110ea <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	f003 0308 	and.w	r3, r3, #8
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d003      	beq.n	8010fa0 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8010f98:	2304      	movs	r3, #4
 8010f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f9e:	e002      	b.n	8010fa6 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d11e      	bne.n	8010ff0 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010fba:	f107 0110 	add.w	r1, r7, #16
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7fd fbe2 	bl	800e788 <netconn_recv_udp_raw_netbuf_flags>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8010fc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d002      	beq.n	8010fd6 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 8010fd0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010fd4:	e089      	b.n	80110ea <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d106      	bne.n	8010fea <lwip_recvfrom_udp_raw+0x8e>
 8010fdc:	4b45      	ldr	r3, [pc, #276]	@ (80110f4 <lwip_recvfrom_udp_raw+0x198>)
 8010fde:	f240 425e 	movw	r2, #1118	@ 0x45e
 8010fe2:	4947      	ldr	r1, [pc, #284]	@ (8011100 <lwip_recvfrom_udp_raw+0x1a4>)
 8010fe4:	4845      	ldr	r0, [pc, #276]	@ (80110fc <lwip_recvfrom_udp_raw+0x1a0>)
 8010fe6:	f00c fee5 	bl	801ddb4 <iprintf>
    sock->lastdata.netbuf = buf;
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	891b      	ldrh	r3, [r3, #8]
 8010ff6:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	61fb      	str	r3, [r7, #28]
 8011000:	e029      	b.n	8011056 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 8011002:	8b3a      	ldrh	r2, [r7, #24]
 8011004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	689a      	ldr	r2, [r3, #8]
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	4413      	add	r3, r2
 8011014:	685a      	ldr	r2, [r3, #4]
 8011016:	8afb      	ldrh	r3, [r7, #22]
 8011018:	429a      	cmp	r2, r3
 801101a:	d902      	bls.n	8011022 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 801101c:	8afb      	ldrh	r3, [r7, #22]
 801101e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011020:	e006      	b.n	8011030 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	689a      	ldr	r2, [r3, #8]
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	4413      	add	r3, r2
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	6818      	ldr	r0, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	689a      	ldr	r2, [r3, #8]
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	00db      	lsls	r3, r3, #3
 801103c:	4413      	add	r3, r2
 801103e:	6819      	ldr	r1, [r3, #0]
 8011040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011042:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011044:	f003 f87a 	bl	801413c <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8011048:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801104a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801104c:	4413      	add	r3, r2
 801104e:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8011050:	69fb      	ldr	r3, [r7, #28]
 8011052:	3301      	adds	r3, #1
 8011054:	61fb      	str	r3, [r7, #28]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	69fa      	ldr	r2, [r7, #28]
 801105c:	429a      	cmp	r2, r3
 801105e:	da03      	bge.n	8011068 <lwip_recvfrom_udp_raw+0x10c>
 8011060:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011062:	8b3b      	ldrh	r3, [r7, #24]
 8011064:	429a      	cmp	r2, r3
 8011066:	d3cc      	bcc.n	8011002 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d01a      	beq.n	80110a6 <lwip_recvfrom_udp_raw+0x14a>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d016      	beq.n	80110a6 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d012      	beq.n	80110a6 <lwip_recvfrom_udp_raw+0x14a>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00e      	beq.n	80110a6 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6818      	ldr	r0, [r3, #0]
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	f103 0108 	add.w	r1, r3, #8
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3304      	adds	r3, #4
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	4623      	mov	r3, r4
 80110a2:	f7ff febb 	bl	8010e1c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d007      	beq.n	80110c4 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 80110b8:	7d7b      	ldrb	r3, [r7, #21]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d102      	bne.n	80110c4 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	f003 0301 	and.w	r3, r3, #1
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d106      	bne.n	80110dc <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2200      	movs	r2, #0
 80110d2:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7ff f99a 	bl	8010410 <netbuf_delete>
  }
  if (datagram_len) {
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d002      	beq.n	80110e8 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	8b3a      	ldrh	r2, [r7, #24]
 80110e6:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 80110e8:	2300      	movs	r3, #0
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	372c      	adds	r7, #44	@ 0x2c
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd90      	pop	{r4, r7, pc}
 80110f2:	bf00      	nop
 80110f4:	0801f82c 	.word	0x0801f82c
 80110f8:	0801f9d0 	.word	0x0801f9d0
 80110fc:	0801f880 	.word	0x0801f880
 8011100:	0801f9fc 	.word	0x0801f9fc

08011104 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b096      	sub	sp, #88	@ 0x58
 8011108:	af02      	add	r7, sp, #8
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
 8011110:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f7ff fa58 	bl	80105c8 <get_socket>
 8011118:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 801111a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801111c:	2b00      	cmp	r3, #0
 801111e:	d102      	bne.n	8011126 <lwip_recvfrom+0x22>
    return -1;
 8011120:	f04f 33ff 	mov.w	r3, #4294967295
 8011124:	e078      	b.n	8011218 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8011126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011130:	2b10      	cmp	r3, #16
 8011132:	d112      	bne.n	801115a <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	68b9      	ldr	r1, [r7, #8]
 801113a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801113c:	f7ff fd5e 	bl	8010bfc <lwip_recv_tcp>
 8011140:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 8011142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011144:	9301      	str	r3, [sp, #4]
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	9300      	str	r3, [sp, #0]
 801114a:	4b35      	ldr	r3, [pc, #212]	@ (8011220 <lwip_recvfrom+0x11c>)
 801114c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801114e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011150:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011152:	f7ff fed1 	bl	8010ef8 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 8011156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011158:	e05e      	b.n	8011218 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 8011166:	2300      	movs	r3, #0
 8011168:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 8011172:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011176:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 8011178:	2301      	movs	r3, #1
 801117a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 801117c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801117e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8011180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <lwip_recvfrom+0x88>
 8011186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	e000      	b.n	801118e <lwip_recvfrom+0x8a>
 801118c:	2300      	movs	r3, #0
 801118e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8011190:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 8011194:	f107 0214 	add.w	r2, r7, #20
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	460b      	mov	r3, r1
 801119e:	6839      	ldr	r1, [r7, #0]
 80111a0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80111a2:	f7ff fedb 	bl	8010f5c <lwip_recvfrom_udp_raw>
 80111a6:	4603      	mov	r3, r0
 80111a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 80111ac:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00e      	beq.n	80111d2 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 80111b4:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7ff f90b 	bl	80103d4 <err_to_errno>
 80111be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80111c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d002      	beq.n	80111cc <lwip_recvfrom+0xc8>
 80111c6:	4a17      	ldr	r2, [pc, #92]	@ (8011224 <lwip_recvfrom+0x120>)
 80111c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ca:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 80111cc:	f04f 33ff 	mov.w	r3, #4294967295
 80111d0:	e022      	b.n	8011218 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80111d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80111d4:	461a      	mov	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4293      	cmp	r3, r2
 80111da:	bf28      	it	cs
 80111dc:	4613      	movcs	r3, r2
 80111de:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80111e2:	4293      	cmp	r3, r2
 80111e4:	d206      	bcs.n	80111f4 <lwip_recvfrom+0xf0>
 80111e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80111e8:	461a      	mov	r2, r3
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4293      	cmp	r3, r2
 80111ee:	bf28      	it	cs
 80111f0:	4613      	movcs	r3, r2
 80111f2:	e001      	b.n	80111f8 <lwip_recvfrom+0xf4>
 80111f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80111f8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 80111fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011204:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8011206:	2300      	movs	r3, #0
 8011208:	643b      	str	r3, [r7, #64]	@ 0x40
 801120a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <lwip_recvfrom+0x112>
 8011210:	4a04      	ldr	r2, [pc, #16]	@ (8011224 <lwip_recvfrom+0x120>)
 8011212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011214:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8011216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8011218:	4618      	mov	r0, r3
 801121a:	3750      	adds	r7, #80	@ 0x50
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	0801fa08 	.word	0x0801fa08
 8011224:	240170b0 	.word	0x240170b0

08011228 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b086      	sub	sp, #24
 801122c:	af02      	add	r7, sp, #8
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]
 8011234:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8011236:	2300      	movs	r3, #0
 8011238:	9301      	str	r3, [sp, #4]
 801123a:	2300      	movs	r3, #0
 801123c:	9300      	str	r3, [sp, #0]
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	68b9      	ldr	r1, [r7, #8]
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f7ff ff5d 	bl	8011104 <lwip_recvfrom>
 801124a:	4603      	mov	r3, r0
}
 801124c:	4618      	mov	r0, r3
 801124e:	3710      	adds	r7, #16
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b08a      	sub	sp, #40	@ 0x28
 8011258:	af02      	add	r7, sp, #8
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
 8011260:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7ff f9b0 	bl	80105c8 <get_socket>
 8011268:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 801126a:	69fb      	ldr	r3, [r7, #28]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d102      	bne.n	8011276 <lwip_send+0x22>
    return -1;
 8011270:	f04f 33ff 	mov.w	r3, #4294967295
 8011274:	e046      	b.n	8011304 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011280:	2b10      	cmp	r3, #16
 8011282:	d00b      	beq.n	801129c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8011284:	2300      	movs	r3, #0
 8011286:	9301      	str	r3, [sp, #4]
 8011288:	2300      	movs	r3, #0
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	68b9      	ldr	r1, [r7, #8]
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f000 f83c 	bl	8011310 <lwip_sendto>
 8011298:	4603      	mov	r3, r0
 801129a:	e033      	b.n	8011304 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d001      	beq.n	80112aa <lwip_send+0x56>
 80112a6:	2203      	movs	r2, #3
 80112a8:	e000      	b.n	80112ac <lwip_send+0x58>
 80112aa:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	105b      	asrs	r3, r3, #1
 80112b0:	b25b      	sxtb	r3, r3
 80112b2:	f003 0304 	and.w	r3, r3, #4
 80112b6:	b25b      	sxtb	r3, r3
 80112b8:	4313      	orrs	r3, r2
 80112ba:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 80112bc:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 80112be:	2300      	movs	r3, #0
 80112c0:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	7efa      	ldrb	r2, [r7, #27]
 80112c8:	f107 0310 	add.w	r3, r7, #16
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	4613      	mov	r3, r2
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	68b9      	ldr	r1, [r7, #8]
 80112d4:	f7fd fab2 	bl	800e83c <netconn_write_partly>
 80112d8:	4603      	mov	r3, r0
 80112da:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80112dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff f877 	bl	80103d4 <err_to_errno>
 80112e6:	6178      	str	r0, [r7, #20]
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d002      	beq.n	80112f4 <lwip_send+0xa0>
 80112ee:	4a07      	ldr	r2, [pc, #28]	@ (801130c <lwip_send+0xb8>)
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 80112f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <lwip_send+0xac>
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	e001      	b.n	8011304 <lwip_send+0xb0>
 8011300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011304:	4618      	mov	r0, r3
 8011306:	3720      	adds	r7, #32
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	240170b0 	.word	0x240170b0

08011310 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b08e      	sub	sp, #56	@ 0x38
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
 801131c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f7ff f952 	bl	80105c8 <get_socket>
 8011324:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 8011326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011328:	2b00      	cmp	r3, #0
 801132a:	d102      	bne.n	8011332 <lwip_sendto+0x22>
    return -1;
 801132c:	f04f 33ff 	mov.w	r3, #4294967295
 8011330:	e093      	b.n	801145a <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8011332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801133c:	2b10      	cmp	r3, #16
 801133e:	d107      	bne.n	8011350 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	68b9      	ldr	r1, [r7, #8]
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f7ff ff84 	bl	8011254 <lwip_send>
 801134c:	4603      	mov	r3, r0
 801134e:	e084      	b.n	801145a <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011356:	d30a      	bcc.n	801136e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8011358:	235a      	movs	r3, #90	@ 0x5a
 801135a:	623b      	str	r3, [r7, #32]
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <lwip_sendto+0x58>
 8011362:	4a40      	ldr	r2, [pc, #256]	@ (8011464 <lwip_sendto+0x154>)
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8011368:	f04f 33ff 	mov.w	r3, #4294967295
 801136c:	e075      	b.n	801145a <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8011372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011374:	2b00      	cmp	r3, #0
 8011376:	d102      	bne.n	801137e <lwip_sendto+0x6e>
 8011378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801137a:	2b00      	cmp	r3, #0
 801137c:	d023      	beq.n	80113c6 <lwip_sendto+0xb6>
 801137e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011380:	2b10      	cmp	r3, #16
 8011382:	d10b      	bne.n	801139c <lwip_sendto+0x8c>
 8011384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011386:	2b00      	cmp	r3, #0
 8011388:	d008      	beq.n	801139c <lwip_sendto+0x8c>
 801138a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801138c:	785b      	ldrb	r3, [r3, #1]
 801138e:	2b02      	cmp	r3, #2
 8011390:	d104      	bne.n	801139c <lwip_sendto+0x8c>
 8011392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011394:	f003 0303 	and.w	r3, r3, #3
 8011398:	2b00      	cmp	r3, #0
 801139a:	d014      	beq.n	80113c6 <lwip_sendto+0xb6>
 801139c:	4b32      	ldr	r3, [pc, #200]	@ (8011468 <lwip_sendto+0x158>)
 801139e:	f240 6252 	movw	r2, #1618	@ 0x652
 80113a2:	4932      	ldr	r1, [pc, #200]	@ (801146c <lwip_sendto+0x15c>)
 80113a4:	4832      	ldr	r0, [pc, #200]	@ (8011470 <lwip_sendto+0x160>)
 80113a6:	f00c fd05 	bl	801ddb4 <iprintf>
 80113aa:	f06f 000f 	mvn.w	r0, #15
 80113ae:	f7ff f811 	bl	80103d4 <err_to_errno>
 80113b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 80113b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d002      	beq.n	80113c0 <lwip_sendto+0xb0>
 80113ba:	4a2a      	ldr	r2, [pc, #168]	@ (8011464 <lwip_sendto+0x154>)
 80113bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113be:	6013      	str	r3, [r2, #0]
 80113c0:	f04f 33ff 	mov.w	r3, #4294967295
 80113c4:	e049      	b.n	801145a <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80113c6:	2300      	movs	r3, #0
 80113c8:	617b      	str	r3, [r7, #20]
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80113ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d00a      	beq.n	80113ea <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80113d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	61bb      	str	r3, [r7, #24]
 80113da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113dc:	885b      	ldrh	r3, [r3, #2]
 80113de:	4618      	mov	r0, r3
 80113e0:	f000 ffb6 	bl	8012350 <lwip_htons>
 80113e4:	4603      	mov	r3, r0
 80113e6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80113e8:	e003      	b.n	80113f2 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80113ee:	2300      	movs	r3, #0
 80113f0:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 80113f2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80113f4:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 80113f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80113f8:	f107 0310 	add.w	r3, r7, #16
 80113fc:	68b9      	ldr	r1, [r7, #8]
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff f84e 	bl	80104a0 <netbuf_ref>
 8011404:	4603      	mov	r3, r0
 8011406:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 801140a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801140e:	2b00      	cmp	r3, #0
 8011410:	d10a      	bne.n	8011428 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8011412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f107 0210 	add.w	r2, r7, #16
 801141a:	4611      	mov	r1, r2
 801141c:	4618      	mov	r0, r3
 801141e:	f7fd f9df 	bl	800e7e0 <netconn_send>
 8011422:	4603      	mov	r3, r0
 8011424:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8011428:	f107 0310 	add.w	r3, r7, #16
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff f80f 	bl	8010450 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8011432:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8011436:	4618      	mov	r0, r3
 8011438:	f7fe ffcc 	bl	80103d4 <err_to_errno>
 801143c:	6278      	str	r0, [r7, #36]	@ 0x24
 801143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011440:	2b00      	cmp	r3, #0
 8011442:	d002      	beq.n	801144a <lwip_sendto+0x13a>
 8011444:	4a07      	ldr	r2, [pc, #28]	@ (8011464 <lwip_sendto+0x154>)
 8011446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011448:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 801144a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <lwip_sendto+0x146>
 8011452:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011454:	e001      	b.n	801145a <lwip_sendto+0x14a>
 8011456:	f04f 33ff 	mov.w	r3, #4294967295
}
 801145a:	4618      	mov	r0, r3
 801145c:	3738      	adds	r7, #56	@ 0x38
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	240170b0 	.word	0x240170b0
 8011468:	0801f82c 	.word	0x0801f82c
 801146c:	0801fb0c 	.word	0x0801fb0c
 8011470:	0801f880 	.word	0x0801f880

08011474 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b03      	cmp	r3, #3
 8011484:	d009      	beq.n	801149a <lwip_socket+0x26>
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	2b03      	cmp	r3, #3
 801148a:	dc23      	bgt.n	80114d4 <lwip_socket+0x60>
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d019      	beq.n	80114c6 <lwip_socket+0x52>
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	2b02      	cmp	r3, #2
 8011496:	d009      	beq.n	80114ac <lwip_socket+0x38>
 8011498:	e01c      	b.n	80114d4 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	b2db      	uxtb	r3, r3
 801149e:	4a22      	ldr	r2, [pc, #136]	@ (8011528 <lwip_socket+0xb4>)
 80114a0:	4619      	mov	r1, r3
 80114a2:	2040      	movs	r0, #64	@ 0x40
 80114a4:	f7fc fd9e 	bl	800dfe4 <netconn_new_with_proto_and_callback>
 80114a8:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80114aa:	e019      	b.n	80114e0 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b88      	cmp	r3, #136	@ 0x88
 80114b0:	d101      	bne.n	80114b6 <lwip_socket+0x42>
 80114b2:	2321      	movs	r3, #33	@ 0x21
 80114b4:	e000      	b.n	80114b8 <lwip_socket+0x44>
 80114b6:	2320      	movs	r3, #32
 80114b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011528 <lwip_socket+0xb4>)
 80114ba:	2100      	movs	r1, #0
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fc fd91 	bl	800dfe4 <netconn_new_with_proto_and_callback>
 80114c2:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80114c4:	e00c      	b.n	80114e0 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 80114c6:	4a18      	ldr	r2, [pc, #96]	@ (8011528 <lwip_socket+0xb4>)
 80114c8:	2100      	movs	r1, #0
 80114ca:	2010      	movs	r0, #16
 80114cc:	f7fc fd8a 	bl	800dfe4 <netconn_new_with_proto_and_callback>
 80114d0:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 80114d2:	e005      	b.n	80114e0 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 80114d4:	4b15      	ldr	r3, [pc, #84]	@ (801152c <lwip_socket+0xb8>)
 80114d6:	2216      	movs	r2, #22
 80114d8:	601a      	str	r2, [r3, #0]
      return -1;
 80114da:	f04f 33ff 	mov.w	r3, #4294967295
 80114de:	e01e      	b.n	801151e <lwip_socket+0xaa>
  }

  if (!conn) {
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d105      	bne.n	80114f2 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 80114e6:	4b11      	ldr	r3, [pc, #68]	@ (801152c <lwip_socket+0xb8>)
 80114e8:	2269      	movs	r2, #105	@ 0x69
 80114ea:	601a      	str	r2, [r3, #0]
    return -1;
 80114ec:	f04f 33ff 	mov.w	r3, #4294967295
 80114f0:	e015      	b.n	801151e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 80114f2:	2100      	movs	r1, #0
 80114f4:	6978      	ldr	r0, [r7, #20]
 80114f6:	f7ff f87f 	bl	80105f8 <alloc_socket>
 80114fa:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011502:	d108      	bne.n	8011516 <lwip_socket+0xa2>
    netconn_delete(conn);
 8011504:	6978      	ldr	r0, [r7, #20]
 8011506:	f7fc fe0b 	bl	800e120 <netconn_delete>
    set_errno(ENFILE);
 801150a:	4b08      	ldr	r3, [pc, #32]	@ (801152c <lwip_socket+0xb8>)
 801150c:	2217      	movs	r2, #23
 801150e:	601a      	str	r2, [r3, #0]
    return -1;
 8011510:	f04f 33ff 	mov.w	r3, #4294967295
 8011514:	e003      	b.n	801151e <lwip_socket+0xaa>
  }
  conn->socket = i;
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	693a      	ldr	r2, [r7, #16]
 801151a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 801151c:	693b      	ldr	r3, [r7, #16]
}
 801151e:	4618      	mov	r0, r3
 8011520:	3718      	adds	r7, #24
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	08011d4d 	.word	0x08011d4d
 801152c:	240170b0 	.word	0x240170b0

08011530 <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8011538:	480c      	ldr	r0, [pc, #48]	@ (801156c <lwip_link_select_cb+0x3c>)
 801153a:	f00c f9d7 	bl	801d8ec <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 801153e:	4b0c      	ldr	r3, [pc, #48]	@ (8011570 <lwip_link_select_cb+0x40>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 8011546:	4b0a      	ldr	r3, [pc, #40]	@ (8011570 <lwip_link_select_cb+0x40>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d003      	beq.n	8011556 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 801154e:	4b08      	ldr	r3, [pc, #32]	@ (8011570 <lwip_link_select_cb+0x40>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 8011556:	4a06      	ldr	r2, [pc, #24]	@ (8011570 <lwip_link_select_cb+0x40>)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 801155c:	4803      	ldr	r0, [pc, #12]	@ (801156c <lwip_link_select_cb+0x3c>)
 801155e:	f00c f9d4 	bl	801d90a <sys_mutex_unlock>
}
 8011562:	bf00      	nop
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
 801156a:	bf00      	nop
 801156c:	24010348 	.word	0x24010348
 8011570:	24010338 	.word	0x24010338

08011574 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 801157c:	481b      	ldr	r0, [pc, #108]	@ (80115ec <lwip_unlink_select_cb+0x78>)
 801157e:	f00c f9b5 	bl	801d8ec <sys_mutex_lock>
  if (select_cb->next != NULL) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d004      	beq.n	8011594 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	6852      	ldr	r2, [r2, #4]
 8011592:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 8011594:	4b16      	ldr	r3, [pc, #88]	@ (80115f0 <lwip_unlink_select_cb+0x7c>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	429a      	cmp	r2, r3
 801159c:	d10f      	bne.n	80115be <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <lwip_unlink_select_cb+0x40>
 80115a6:	4b13      	ldr	r3, [pc, #76]	@ (80115f4 <lwip_unlink_select_cb+0x80>)
 80115a8:	f240 720d 	movw	r2, #1805	@ 0x70d
 80115ac:	4912      	ldr	r1, [pc, #72]	@ (80115f8 <lwip_unlink_select_cb+0x84>)
 80115ae:	4813      	ldr	r0, [pc, #76]	@ (80115fc <lwip_unlink_select_cb+0x88>)
 80115b0:	f00c fc00 	bl	801ddb4 <iprintf>
    select_cb_list = select_cb->next;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a0d      	ldr	r2, [pc, #52]	@ (80115f0 <lwip_unlink_select_cb+0x7c>)
 80115ba:	6013      	str	r3, [r2, #0]
 80115bc:	e00f      	b.n	80115de <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d106      	bne.n	80115d4 <lwip_unlink_select_cb+0x60>
 80115c6:	4b0b      	ldr	r3, [pc, #44]	@ (80115f4 <lwip_unlink_select_cb+0x80>)
 80115c8:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 80115cc:	490c      	ldr	r1, [pc, #48]	@ (8011600 <lwip_unlink_select_cb+0x8c>)
 80115ce:	480b      	ldr	r0, [pc, #44]	@ (80115fc <lwip_unlink_select_cb+0x88>)
 80115d0:	f00c fbf0 	bl	801ddb4 <iprintf>
    select_cb->prev->next = select_cb->next;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	6812      	ldr	r2, [r2, #0]
 80115dc:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80115de:	4803      	ldr	r0, [pc, #12]	@ (80115ec <lwip_unlink_select_cb+0x78>)
 80115e0:	f00c f993 	bl	801d90a <sys_mutex_unlock>
}
 80115e4:	bf00      	nop
 80115e6:	3708      	adds	r7, #8
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	24010348 	.word	0x24010348
 80115f0:	24010338 	.word	0x24010338
 80115f4:	0801f82c 	.word	0x0801f82c
 80115f8:	0801fb2c 	.word	0x0801fb2c
 80115fc:	0801f880 	.word	0x0801f880
 8011600:	0801fb44 	.word	0x0801fb44

08011604 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b098      	sub	sp, #96	@ 0x60
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	65bb      	str	r3, [r7, #88]	@ 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 8011616:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801161a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801161c:	2302      	movs	r3, #2
 801161e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011620:	e007      	b.n	8011632 <lwip_selscan+0x2e>
 8011622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011624:	3b01      	subs	r3, #1
 8011626:	657b      	str	r3, [r7, #84]	@ 0x54
 8011628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801162a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801162c:	2100      	movs	r1, #0
 801162e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1f4      	bne.n	8011622 <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 8011638:	f107 031c 	add.w	r3, r7, #28
 801163c:	647b      	str	r3, [r7, #68]	@ 0x44
 801163e:	2302      	movs	r3, #2
 8011640:	653b      	str	r3, [r7, #80]	@ 0x50
 8011642:	e007      	b.n	8011654 <lwip_selscan+0x50>
 8011644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011646:	3b01      	subs	r3, #1
 8011648:	653b      	str	r3, [r7, #80]	@ 0x50
 801164a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801164c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801164e:	2100      	movs	r1, #0
 8011650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1f4      	bne.n	8011644 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 801165a:	f107 0314 	add.w	r3, r7, #20
 801165e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011660:	2302      	movs	r3, #2
 8011662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011664:	e007      	b.n	8011676 <lwip_selscan+0x72>
 8011666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011668:	3b01      	subs	r3, #1
 801166a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801166c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801166e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011670:	2100      	movs	r1, #0
 8011672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1f4      	bne.n	8011666 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 801167c:	2300      	movs	r3, #0
 801167e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011680:	e0ff      	b.n	8011882 <lwip_selscan+0x27e>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d011      	beq.n	80116ac <lwip_selscan+0xa8>
 8011688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801168a:	2b00      	cmp	r3, #0
 801168c:	da00      	bge.n	8011690 <lwip_selscan+0x8c>
 801168e:	331f      	adds	r3, #31
 8011690:	115b      	asrs	r3, r3, #5
 8011692:	461a      	mov	r2, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801169a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801169c:	f003 031f 	and.w	r3, r3, #31
 80116a0:	fa22 f303 	lsr.w	r3, r2, r3
 80116a4:	f003 0301 	and.w	r3, r3, #1
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d12b      	bne.n	8011704 <lwip_selscan+0x100>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d011      	beq.n	80116d6 <lwip_selscan+0xd2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 80116b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	da00      	bge.n	80116ba <lwip_selscan+0xb6>
 80116b8:	331f      	adds	r3, #31
 80116ba:	115b      	asrs	r3, r3, #5
 80116bc:	461a      	mov	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80116c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116c6:	f003 031f 	and.w	r3, r3, #31
 80116ca:	fa22 f303 	lsr.w	r3, r2, r3
 80116ce:	f003 0301 	and.w	r3, r3, #1
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d116      	bne.n	8011704 <lwip_selscan+0x100>
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f000 80ce 	beq.w	801187a <lwip_selscan+0x276>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 80116de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	da00      	bge.n	80116e6 <lwip_selscan+0xe2>
 80116e4:	331f      	adds	r3, #31
 80116e6:	115b      	asrs	r3, r3, #5
 80116e8:	461a      	mov	r2, r3
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80116f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116f2:	f003 031f 	and.w	r3, r3, #31
 80116f6:	fa22 f303 	lsr.w	r3, r2, r3
 80116fa:	f003 0301 	and.w	r3, r3, #1
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f000 80bb 	beq.w	801187a <lwip_selscan+0x276>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 8011704:	f00c f92e 	bl	801d964 <sys_arch_protect>
 8011708:	63f8      	str	r0, [r7, #60]	@ 0x3c
    sock = tryget_socket_unconn_locked(i);
 801170a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801170c:	f7fe ff39 	bl	8010582 <tryget_socket_unconn_locked>
 8011710:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (sock != NULL) {
 8011712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011714:	2b00      	cmp	r3, #0
 8011716:	f000 80aa 	beq.w	801186e <lwip_selscan+0x26a>
      void *lastdata = sock->lastdata.pbuf;
 801171a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	637b      	str	r3, [r7, #52]	@ 0x34
      s16_t rcvevent = sock->rcvevent;
 8011720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011722:	891b      	ldrh	r3, [r3, #8]
 8011724:	867b      	strh	r3, [r7, #50]	@ 0x32
      u16_t sendevent = sock->sendevent;
 8011726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011728:	895b      	ldrh	r3, [r3, #10]
 801172a:	863b      	strh	r3, [r7, #48]	@ 0x30
      u16_t errevent = sock->errevent;
 801172c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801172e:	899b      	ldrh	r3, [r3, #12]
 8011730:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      SYS_ARCH_UNPROTECT(lev);
 8011732:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011734:	f00c f924 	bl	801d980 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d032      	beq.n	80117a4 <lwip_selscan+0x1a0>
 801173e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011740:	2b00      	cmp	r3, #0
 8011742:	da00      	bge.n	8011746 <lwip_selscan+0x142>
 8011744:	331f      	adds	r3, #31
 8011746:	115b      	asrs	r3, r3, #5
 8011748:	461a      	mov	r2, r3
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011752:	f003 031f 	and.w	r3, r3, #31
 8011756:	fa22 f303 	lsr.w	r3, r2, r3
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	2b00      	cmp	r3, #0
 8011760:	d020      	beq.n	80117a4 <lwip_selscan+0x1a0>
 8011762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011764:	2b00      	cmp	r3, #0
 8011766:	d103      	bne.n	8011770 <lwip_selscan+0x16c>
 8011768:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 801176c:	2b00      	cmp	r3, #0
 801176e:	dd19      	ble.n	80117a4 <lwip_selscan+0x1a0>
        FD_SET(i, &lreadset);
 8011770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011772:	2b00      	cmp	r3, #0
 8011774:	da00      	bge.n	8011778 <lwip_selscan+0x174>
 8011776:	331f      	adds	r3, #31
 8011778:	115b      	asrs	r3, r3, #5
 801177a:	461a      	mov	r2, r3
 801177c:	0093      	lsls	r3, r2, #2
 801177e:	3360      	adds	r3, #96	@ 0x60
 8011780:	443b      	add	r3, r7
 8011782:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8011786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011788:	f003 031f 	and.w	r3, r3, #31
 801178c:	2001      	movs	r0, #1
 801178e:	fa00 f303 	lsl.w	r3, r0, r3
 8011792:	4319      	orrs	r1, r3
 8011794:	0093      	lsls	r3, r2, #2
 8011796:	3360      	adds	r3, #96	@ 0x60
 8011798:	443b      	add	r3, r7
 801179a:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 801179e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117a0:	3301      	adds	r3, #1
 80117a2:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d02e      	beq.n	8011808 <lwip_selscan+0x204>
 80117aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	da00      	bge.n	80117b2 <lwip_selscan+0x1ae>
 80117b0:	331f      	adds	r3, #31
 80117b2:	115b      	asrs	r3, r3, #5
 80117b4:	461a      	mov	r2, r3
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80117bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117be:	f003 031f 	and.w	r3, r3, #31
 80117c2:	fa22 f303 	lsr.w	r3, r2, r3
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d01c      	beq.n	8011808 <lwip_selscan+0x204>
 80117ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d019      	beq.n	8011808 <lwip_selscan+0x204>
        FD_SET(i, &lwriteset);
 80117d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	da00      	bge.n	80117dc <lwip_selscan+0x1d8>
 80117da:	331f      	adds	r3, #31
 80117dc:	115b      	asrs	r3, r3, #5
 80117de:	461a      	mov	r2, r3
 80117e0:	0093      	lsls	r3, r2, #2
 80117e2:	3360      	adds	r3, #96	@ 0x60
 80117e4:	443b      	add	r3, r7
 80117e6:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80117ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117ec:	f003 031f 	and.w	r3, r3, #31
 80117f0:	2001      	movs	r0, #1
 80117f2:	fa00 f303 	lsl.w	r3, r0, r3
 80117f6:	4319      	orrs	r1, r3
 80117f8:	0093      	lsls	r3, r2, #2
 80117fa:	3360      	adds	r3, #96	@ 0x60
 80117fc:	443b      	add	r3, r7
 80117fe:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 8011802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011804:	3301      	adds	r3, #1
 8011806:	65bb      	str	r3, [r7, #88]	@ 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d036      	beq.n	801187c <lwip_selscan+0x278>
 801180e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011810:	2b00      	cmp	r3, #0
 8011812:	da00      	bge.n	8011816 <lwip_selscan+0x212>
 8011814:	331f      	adds	r3, #31
 8011816:	115b      	asrs	r3, r3, #5
 8011818:	461a      	mov	r2, r3
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011822:	f003 031f 	and.w	r3, r3, #31
 8011826:	fa22 f303 	lsr.w	r3, r2, r3
 801182a:	f003 0301 	and.w	r3, r3, #1
 801182e:	2b00      	cmp	r3, #0
 8011830:	d024      	beq.n	801187c <lwip_selscan+0x278>
 8011832:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011834:	2b00      	cmp	r3, #0
 8011836:	d021      	beq.n	801187c <lwip_selscan+0x278>
        FD_SET(i, &lexceptset);
 8011838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801183a:	2b00      	cmp	r3, #0
 801183c:	da00      	bge.n	8011840 <lwip_selscan+0x23c>
 801183e:	331f      	adds	r3, #31
 8011840:	115b      	asrs	r3, r3, #5
 8011842:	461a      	mov	r2, r3
 8011844:	0093      	lsls	r3, r2, #2
 8011846:	3360      	adds	r3, #96	@ 0x60
 8011848:	443b      	add	r3, r7
 801184a:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801184e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011850:	f003 031f 	and.w	r3, r3, #31
 8011854:	2001      	movs	r0, #1
 8011856:	fa00 f303 	lsl.w	r3, r0, r3
 801185a:	4319      	orrs	r1, r3
 801185c:	0093      	lsls	r3, r2, #2
 801185e:	3360      	adds	r3, #96	@ 0x60
 8011860:	443b      	add	r3, r7
 8011862:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 8011866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011868:	3301      	adds	r3, #1
 801186a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801186c:	e006      	b.n	801187c <lwip_selscan+0x278>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 801186e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011870:	f00c f886 	bl	801d980 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 8011874:	f04f 33ff 	mov.w	r3, #4294967295
 8011878:	e02b      	b.n	80118d2 <lwip_selscan+0x2ce>
      continue;
 801187a:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 801187c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801187e:	3301      	adds	r3, #1
 8011880:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011882:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	429a      	cmp	r2, r3
 8011888:	f6ff aefb 	blt.w	8011682 <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 801188c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801188e:	461a      	mov	r2, r3
 8011890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011894:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011898:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 801189c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801189e:	461a      	mov	r2, r3
 80118a0:	f107 031c 	add.w	r3, r7, #28
 80118a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80118a8:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 80118ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80118ae:	461a      	mov	r2, r3
 80118b0:	f107 0314 	add.w	r3, r7, #20
 80118b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80118b8:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 80118bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118be:	2b00      	cmp	r3, #0
 80118c0:	da06      	bge.n	80118d0 <lwip_selscan+0x2cc>
 80118c2:	4b06      	ldr	r3, [pc, #24]	@ (80118dc <lwip_selscan+0x2d8>)
 80118c4:	f240 7269 	movw	r2, #1897	@ 0x769
 80118c8:	4905      	ldr	r1, [pc, #20]	@ (80118e0 <lwip_selscan+0x2dc>)
 80118ca:	4806      	ldr	r0, [pc, #24]	@ (80118e4 <lwip_selscan+0x2e0>)
 80118cc:	f00c fa72 	bl	801ddb4 <iprintf>
  return nready;
 80118d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	3760      	adds	r7, #96	@ 0x60
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}
 80118da:	bf00      	nop
 80118dc:	0801f82c 	.word	0x0801f82c
 80118e0:	0801fb5c 	.word	0x0801fb5c
 80118e4:	0801f880 	.word	0x0801f880

080118e8 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b0a0      	sub	sp, #128	@ 0x80
 80118ec:	af04      	add	r7, sp, #16
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
 80118f4:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 80118f6:	2300      	movs	r3, #0
 80118f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	db02      	blt.n	8011906 <lwip_select+0x1e>
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b40      	cmp	r3, #64	@ 0x40
 8011904:	dd05      	ble.n	8011912 <lwip_select+0x2a>
    set_errno(EINVAL);
 8011906:	4b8a      	ldr	r3, [pc, #552]	@ (8011b30 <lwip_select+0x248>)
 8011908:	2216      	movs	r2, #22
 801190a:	601a      	str	r2, [r3, #0]
    return -1;
 801190c:	f04f 33ff 	mov.w	r3, #4294967295
 8011910:	e1cb      	b.n	8011caa <lwip_select+0x3c2>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011912:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011916:	9302      	str	r3, [sp, #8]
 8011918:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	68b9      	ldr	r1, [r7, #8]
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f7ff fe6a 	bl	8011604 <lwip_selscan>
 8011930:	66b8      	str	r0, [r7, #104]	@ 0x68

  if (nready < 0) {
 8011932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011934:	2b00      	cmp	r3, #0
 8011936:	da05      	bge.n	8011944 <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 8011938:	4b7d      	ldr	r3, [pc, #500]	@ (8011b30 <lwip_select+0x248>)
 801193a:	2209      	movs	r2, #9
 801193c:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 801193e:	f04f 33ff 	mov.w	r3, #4294967295
 8011942:	e1b2      	b.n	8011caa <lwip_select+0x3c2>
  } else if (nready > 0) {
 8011944:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011946:	2b00      	cmp	r3, #0
 8011948:	f300 818d 	bgt.w	8011c66 <lwip_select+0x37e>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 801194c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801194e:	2b00      	cmp	r3, #0
 8011950:	d009      	beq.n	8011966 <lwip_select+0x7e>
 8011952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011958:	4313      	orrs	r3, r2
 801195a:	d104      	bne.n	8011966 <lwip_select+0x7e>
 801195c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801195e:	689b      	ldr	r3, [r3, #8]
 8011960:	2b00      	cmp	r3, #0
 8011962:	f000 8180 	beq.w	8011c66 <lwip_select+0x37e>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 8011966:	f107 0310 	add.w	r3, r7, #16
 801196a:	2224      	movs	r2, #36	@ 0x24
 801196c:	2100      	movs	r1, #0
 801196e:	4618      	mov	r0, r3
 8011970:	f00c fb78 	bl	801e064 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8011980:	f107 0310 	add.w	r3, r7, #16
 8011984:	3320      	adds	r3, #32
 8011986:	2100      	movs	r1, #0
 8011988:	4618      	mov	r0, r3
 801198a:	f00b feff 	bl	801d78c <sys_sem_new>
 801198e:	4603      	mov	r3, r0
 8011990:	2b00      	cmp	r3, #0
 8011992:	d005      	beq.n	80119a0 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 8011994:	4b66      	ldr	r3, [pc, #408]	@ (8011b30 <lwip_select+0x248>)
 8011996:	220c      	movs	r2, #12
 8011998:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 801199a:	f04f 33ff 	mov.w	r3, #4294967295
 801199e:	e184      	b.n	8011caa <lwip_select+0x3c2>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 80119a0:	f107 0310 	add.w	r3, r7, #16
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7ff fdc3 	bl	8011530 <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80119ae:	2300      	movs	r3, #0
 80119b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80119b2:	e077      	b.n	8011aa4 <lwip_select+0x1bc>
        if ((readset && FD_ISSET(i, readset)) ||
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d011      	beq.n	80119de <lwip_select+0xf6>
 80119ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80119bc:	2b00      	cmp	r3, #0
 80119be:	da00      	bge.n	80119c2 <lwip_select+0xda>
 80119c0:	331f      	adds	r3, #31
 80119c2:	115b      	asrs	r3, r3, #5
 80119c4:	461a      	mov	r2, r3
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80119cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80119ce:	f003 031f 	and.w	r3, r3, #31
 80119d2:	fa22 f303 	lsr.w	r3, r2, r3
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d129      	bne.n	8011a32 <lwip_select+0x14a>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d011      	beq.n	8011a08 <lwip_select+0x120>
            (writeset && FD_ISSET(i, writeset)) ||
 80119e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	da00      	bge.n	80119ec <lwip_select+0x104>
 80119ea:	331f      	adds	r3, #31
 80119ec:	115b      	asrs	r3, r3, #5
 80119ee:	461a      	mov	r2, r3
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80119f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80119f8:	f003 031f 	and.w	r3, r3, #31
 80119fc:	fa22 f303 	lsr.w	r3, r2, r3
 8011a00:	f003 0301 	and.w	r3, r3, #1
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d114      	bne.n	8011a32 <lwip_select+0x14a>
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d047      	beq.n	8011a9e <lwip_select+0x1b6>
            (exceptset && FD_ISSET(i, exceptset))) {
 8011a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	da00      	bge.n	8011a16 <lwip_select+0x12e>
 8011a14:	331f      	adds	r3, #31
 8011a16:	115b      	asrs	r3, r3, #5
 8011a18:	461a      	mov	r2, r3
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a22:	f003 031f 	and.w	r3, r3, #31
 8011a26:	fa22 f303 	lsr.w	r3, r2, r3
 8011a2a:	f003 0301 	and.w	r3, r3, #1
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d035      	beq.n	8011a9e <lwip_select+0x1b6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 8011a32:	f00b ff97 	bl	801d964 <sys_arch_protect>
 8011a36:	65b8      	str	r0, [r7, #88]	@ 0x58
          sock = tryget_socket_unconn_locked(i);
 8011a38:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8011a3a:	f7fe fda2 	bl	8010582 <tryget_socket_unconn_locked>
 8011a3e:	6578      	str	r0, [r7, #84]	@ 0x54
          if (sock != NULL) {
 8011a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d01f      	beq.n	8011a86 <lwip_select+0x19e>
            sock->select_waiting++;
 8011a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a48:	7b9b      	ldrb	r3, [r3, #14]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a50:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 8011a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a54:	7b9b      	ldrb	r3, [r3, #14]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d111      	bne.n	8011a7e <lwip_select+0x196>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 8011a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a5c:	7b9b      	ldrb	r3, [r3, #14]
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	b2da      	uxtb	r2, r3
 8011a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a64:	739a      	strb	r2, [r3, #14]
              nready = -1;
 8011a66:	f04f 33ff 	mov.w	r3, #4294967295
 8011a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
              maxfdp2 = i;
 8011a6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
              SYS_ARCH_UNPROTECT(lev);
 8011a70:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011a72:	f00b ff85 	bl	801d980 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 8011a76:	4b2e      	ldr	r3, [pc, #184]	@ (8011b30 <lwip_select+0x248>)
 8011a78:	2210      	movs	r2, #16
 8011a7a:	601a      	str	r2, [r3, #0]
              break;
 8011a7c:	e016      	b.n	8011aac <lwip_select+0x1c4>
            }
            SYS_ARCH_UNPROTECT(lev);
 8011a7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011a80:	f00b ff7e 	bl	801d980 <sys_arch_unprotect>
 8011a84:	e00b      	b.n	8011a9e <lwip_select+0x1b6>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 8011a86:	f04f 33ff 	mov.w	r3, #4294967295
 8011a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
            maxfdp2 = i;
 8011a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            SYS_ARCH_UNPROTECT(lev);
 8011a90:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011a92:	f00b ff75 	bl	801d980 <sys_arch_unprotect>
            set_errno(EBADF);
 8011a96:	4b26      	ldr	r3, [pc, #152]	@ (8011b30 <lwip_select+0x248>)
 8011a98:	2209      	movs	r2, #9
 8011a9a:	601a      	str	r2, [r3, #0]
            break;
 8011a9c:	e006      	b.n	8011aac <lwip_select+0x1c4>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8011a9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8011aa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	db83      	blt.n	80119b4 <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 8011aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	db3b      	blt.n	8011b2a <lwip_select+0x242>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011ab2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ab6:	9302      	str	r3, [sp, #8]
 8011ab8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011ac2:	9300      	str	r3, [sp, #0]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	68b9      	ldr	r1, [r7, #8]
 8011aca:	68f8      	ldr	r0, [r7, #12]
 8011acc:	f7ff fd9a 	bl	8011604 <lwip_selscan>
 8011ad0:	66b8      	str	r0, [r7, #104]	@ 0x68
        if (!nready) {
 8011ad2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d128      	bne.n	8011b2a <lwip_select+0x242>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 8011ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d102      	bne.n	8011ae4 <lwip_select+0x1fc>
            /* Wait forever */
            msectimeout = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	667b      	str	r3, [r7, #100]	@ 0x64
 8011ae2:	e01a      	b.n	8011b1a <lwip_select+0x232>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 8011ae4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011aee:	fb03 f202 	mul.w	r2, r3, r2
 8011af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8011afa:	490e      	ldr	r1, [pc, #56]	@ (8011b34 <lwip_select+0x24c>)
 8011afc:	fb81 0103 	smull	r0, r1, r1, r3
 8011b00:	1189      	asrs	r1, r1, #6
 8011b02:	17db      	asrs	r3, r3, #31
 8011b04:	1acb      	subs	r3, r1, r3
 8011b06:	4413      	add	r3, r2
 8011b08:	653b      	str	r3, [r7, #80]	@ 0x50
            if (msecs_long <= 0) {
 8011b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	dc02      	bgt.n	8011b16 <lwip_select+0x22e>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 8011b10:	2301      	movs	r3, #1
 8011b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8011b14:	e001      	b.n	8011b1a <lwip_select+0x232>
            } else {
              msectimeout = (u32_t)msecs_long;
 8011b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b18:	667b      	str	r3, [r7, #100]	@ 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8011b1a:	f107 0310 	add.w	r3, r7, #16
 8011b1e:	3320      	adds	r3, #32
 8011b20:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011b22:	4618      	mov	r0, r3
 8011b24:	f00b fe57 	bl	801d7d6 <sys_arch_sem_wait>
 8011b28:	66f8      	str	r0, [r7, #108]	@ 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8011b2e:	e071      	b.n	8011c14 <lwip_select+0x32c>
 8011b30:	240170b0 	.word	0x240170b0
 8011b34:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d011      	beq.n	8011b62 <lwip_select+0x27a>
 8011b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	da00      	bge.n	8011b46 <lwip_select+0x25e>
 8011b44:	331f      	adds	r3, #31
 8011b46:	115b      	asrs	r3, r3, #5
 8011b48:	461a      	mov	r2, r3
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b52:	f003 031f 	and.w	r3, r3, #31
 8011b56:	fa22 f303 	lsr.w	r3, r2, r3
 8011b5a:	f003 0301 	and.w	r3, r3, #1
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d129      	bne.n	8011bb6 <lwip_select+0x2ce>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d011      	beq.n	8011b8c <lwip_select+0x2a4>
            (writeset && FD_ISSET(i, writeset)) ||
 8011b68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	da00      	bge.n	8011b70 <lwip_select+0x288>
 8011b6e:	331f      	adds	r3, #31
 8011b70:	115b      	asrs	r3, r3, #5
 8011b72:	461a      	mov	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b7c:	f003 031f 	and.w	r3, r3, #31
 8011b80:	fa22 f303 	lsr.w	r3, r2, r3
 8011b84:	f003 0301 	and.w	r3, r3, #1
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d114      	bne.n	8011bb6 <lwip_select+0x2ce>
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d03d      	beq.n	8011c0e <lwip_select+0x326>
            (exceptset && FD_ISSET(i, exceptset))) {
 8011b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	da00      	bge.n	8011b9a <lwip_select+0x2b2>
 8011b98:	331f      	adds	r3, #31
 8011b9a:	115b      	asrs	r3, r3, #5
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011ba6:	f003 031f 	and.w	r3, r3, #31
 8011baa:	fa22 f303 	lsr.w	r3, r2, r3
 8011bae:	f003 0301 	and.w	r3, r3, #1
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d02b      	beq.n	8011c0e <lwip_select+0x326>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 8011bb6:	f00b fed5 	bl	801d964 <sys_arch_protect>
 8011bba:	65b8      	str	r0, [r7, #88]	@ 0x58
          sock = tryget_socket_unconn_locked(i);
 8011bbc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8011bbe:	f7fe fce0 	bl	8010582 <tryget_socket_unconn_locked>
 8011bc2:	64f8      	str	r0, [r7, #76]	@ 0x4c
          if (sock != NULL) {
 8011bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d018      	beq.n	8011bfc <lwip_select+0x314>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 8011bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bcc:	7b9b      	ldrb	r3, [r3, #14]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d106      	bne.n	8011be0 <lwip_select+0x2f8>
 8011bd2:	4b38      	ldr	r3, [pc, #224]	@ (8011cb4 <lwip_select+0x3cc>)
 8011bd4:	f640 023c 	movw	r2, #2108	@ 0x83c
 8011bd8:	4937      	ldr	r1, [pc, #220]	@ (8011cb8 <lwip_select+0x3d0>)
 8011bda:	4838      	ldr	r0, [pc, #224]	@ (8011cbc <lwip_select+0x3d4>)
 8011bdc:	f00c f8ea 	bl	801ddb4 <iprintf>
            if (sock->select_waiting > 0) {
 8011be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011be2:	7b9b      	ldrb	r3, [r3, #14]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d005      	beq.n	8011bf4 <lwip_select+0x30c>
              sock->select_waiting--;
 8011be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bea:	7b9b      	ldrb	r3, [r3, #14]
 8011bec:	3b01      	subs	r3, #1
 8011bee:	b2da      	uxtb	r2, r3
 8011bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bf2:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 8011bf4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011bf6:	f00b fec3 	bl	801d980 <sys_arch_unprotect>
 8011bfa:	e008      	b.n	8011c0e <lwip_select+0x326>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 8011bfc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011bfe:	f00b febf 	bl	801d980 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 8011c02:	f04f 33ff 	mov.w	r3, #4294967295
 8011c06:	66bb      	str	r3, [r7, #104]	@ 0x68
            set_errno(EBADF);
 8011c08:	4b2d      	ldr	r3, [pc, #180]	@ (8011cc0 <lwip_select+0x3d8>)
 8011c0a:	2209      	movs	r2, #9
 8011c0c:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8011c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011c10:	3301      	adds	r3, #1
 8011c12:	663b      	str	r3, [r7, #96]	@ 0x60
 8011c14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	db8d      	blt.n	8011b38 <lwip_select+0x250>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8011c1c:	f107 0310 	add.w	r3, r7, #16
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7ff fca7 	bl	8011574 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 8011c26:	f107 0310 	add.w	r3, r7, #16
 8011c2a:	3320      	adds	r3, #32
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f00b fe10 	bl	801d852 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 8011c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	da02      	bge.n	8011c3e <lwip_select+0x356>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 8011c38:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3c:	e035      	b.n	8011caa <lwip_select+0x3c2>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 8011c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c44:	d00f      	beq.n	8011c66 <lwip_select+0x37e>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8011c46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c4a:	9302      	str	r3, [sp, #8]
 8011c4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011c50:	9301      	str	r3, [sp, #4]
 8011c52:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011c56:	9300      	str	r3, [sp, #0]
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	68b9      	ldr	r1, [r7, #8]
 8011c5e:	68f8      	ldr	r0, [r7, #12]
 8011c60:	f7ff fcd0 	bl	8011604 <lwip_selscan>
 8011c64:	66b8      	str	r0, [r7, #104]	@ 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d007      	beq.n	8011c7c <lwip_select+0x394>
    *readset = lreadset;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8011c74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c78:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d007      	beq.n	8011c92 <lwip_select+0x3aa>
    *writeset = lwriteset;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	461a      	mov	r2, r3
 8011c86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011c8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c8e:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d007      	beq.n	8011ca8 <lwip_select+0x3c0>
    *exceptset = lexceptset;
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ca0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ca4:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 8011ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3770      	adds	r7, #112	@ 0x70
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	0801f82c 	.word	0x0801f82c
 8011cb8:	0801fb68 	.word	0x0801fb68
 8011cbc:	0801f880 	.word	0x0801f880
 8011cc0:	240170b0 	.word	0x240170b0

08011cc4 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b087      	sub	sp, #28
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	60b9      	str	r1, [r7, #8]
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	617b      	str	r3, [r7, #20]
 8011cd6:	e02c      	b.n	8011d32 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	695a      	ldr	r2, [r3, #20]
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	4413      	add	r3, r2
 8011ce2:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	68ba      	ldr	r2, [r7, #8]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d11e      	bne.n	8011d2c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d009      	beq.n	8011d08 <lwip_poll_should_wake+0x44>
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	f003 0301 	and.w	r3, r3, #1
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d001      	beq.n	8011d08 <lwip_poll_should_wake+0x44>
        return 1;
 8011d04:	2301      	movs	r3, #1
 8011d06:	e01a      	b.n	8011d3e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d009      	beq.n	8011d22 <lwip_poll_should_wake+0x5e>
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	f003 0302 	and.w	r3, r3, #2
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <lwip_poll_should_wake+0x5e>
        return 1;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e00d      	b.n	8011d3e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8011d22:	6a3b      	ldr	r3, [r7, #32]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e008      	b.n	8011d3e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	3301      	adds	r3, #1
 8011d30:	617b      	str	r3, [r7, #20]
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	699b      	ldr	r3, [r3, #24]
 8011d36:	697a      	ldr	r2, [r7, #20]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d3cd      	bcc.n	8011cd8 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8011d3c:	2300      	movs	r3, #0
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	371c      	adds	r7, #28
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr
	...

08011d4c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b08a      	sub	sp, #40	@ 0x28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	460b      	mov	r3, r1
 8011d56:	70fb      	strb	r3, [r7, #3]
 8011d58:	4613      	mov	r3, r2
 8011d5a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f000 80a4 	beq.w	8011eac <event_callback+0x160>
    s = conn->socket;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	da18      	bge.n	8011da2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8011d70:	f00b fdf8 	bl	801d964 <sys_arch_protect>
 8011d74:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	699b      	ldr	r3, [r3, #24]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	da0b      	bge.n	8011d96 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8011d7e:	78fb      	ldrb	r3, [r7, #3]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d104      	bne.n	8011d8e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	699b      	ldr	r3, [r3, #24]
 8011d88:	1e5a      	subs	r2, r3, #1
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8011d8e:	69f8      	ldr	r0, [r7, #28]
 8011d90:	f00b fdf6 	bl	801d980 <sys_arch_unprotect>
        return;
 8011d94:	e08d      	b.n	8011eb2 <event_callback+0x166>
      }
      s = conn->socket;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	699b      	ldr	r3, [r3, #24]
 8011d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 8011d9c:	69f8      	ldr	r0, [r7, #28]
 8011d9e:	f00b fdef 	bl	801d980 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8011da2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011da4:	f7fe fc10 	bl	80105c8 <get_socket>
 8011da8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d07f      	beq.n	8011eb0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8011db0:	2301      	movs	r3, #1
 8011db2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8011db4:	f00b fdd6 	bl	801d964 <sys_arch_protect>
 8011db8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 8011dba:	78fb      	ldrb	r3, [r7, #3]
 8011dbc:	2b04      	cmp	r3, #4
 8011dbe:	d83e      	bhi.n	8011e3e <event_callback+0xf2>
 8011dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8011dc8 <event_callback+0x7c>)
 8011dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc6:	bf00      	nop
 8011dc8:	08011ddd 	.word	0x08011ddd
 8011dcc:	08011dff 	.word	0x08011dff
 8011dd0:	08011e17 	.word	0x08011e17
 8011dd4:	08011e2b 	.word	0x08011e2b
 8011dd8:	08011e37 	.word	0x08011e37
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	3301      	adds	r3, #1
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	b21a      	sxth	r2, r3
 8011dea:	69bb      	ldr	r3, [r7, #24]
 8011dec:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	dd2a      	ble.n	8011e4e <event_callback+0x102>
        check_waiters = 0;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	623b      	str	r3, [r7, #32]
      }
      break;
 8011dfc:	e027      	b.n	8011e4e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011e04:	b29b      	uxth	r3, r3
 8011e06:	3b01      	subs	r3, #1
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	b21a      	sxth	r2, r3
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	623b      	str	r3, [r7, #32]
      break;
 8011e14:	e01c      	b.n	8011e50 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8011e16:	69bb      	ldr	r3, [r7, #24]
 8011e18:	895b      	ldrh	r3, [r3, #10]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <event_callback+0xd6>
        check_waiters = 0;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	2201      	movs	r2, #1
 8011e26:	815a      	strh	r2, [r3, #10]
      break;
 8011e28:	e012      	b.n	8011e50 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8011e30:	2300      	movs	r3, #0
 8011e32:	623b      	str	r3, [r7, #32]
      break;
 8011e34:	e00c      	b.n	8011e50 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	819a      	strh	r2, [r3, #12]
      break;
 8011e3c:	e008      	b.n	8011e50 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 8011e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8011eb8 <event_callback+0x16c>)
 8011e40:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8011e44:	491d      	ldr	r1, [pc, #116]	@ (8011ebc <event_callback+0x170>)
 8011e46:	481e      	ldr	r0, [pc, #120]	@ (8011ec0 <event_callback+0x174>)
 8011e48:	f00b ffb4 	bl	801ddb4 <iprintf>
      break;
 8011e4c:	e000      	b.n	8011e50 <event_callback+0x104>
      break;
 8011e4e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	7b9b      	ldrb	r3, [r3, #14]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d025      	beq.n	8011ea4 <event_callback+0x158>
 8011e58:	6a3b      	ldr	r3, [r7, #32]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d022      	beq.n	8011ea4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bfcc      	ite	gt
 8011e68:	2301      	movgt	r3, #1
 8011e6a:	2300      	movle	r3, #0
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	895b      	ldrh	r3, [r3, #10]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	bf14      	ite	ne
 8011e78:	2301      	movne	r3, #1
 8011e7a:	2300      	moveq	r3, #0
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	899b      	ldrh	r3, [r3, #12]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	bf14      	ite	ne
 8011e88:	2301      	movne	r3, #1
 8011e8a:	2300      	moveq	r3, #0
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8011e90:	69f8      	ldr	r0, [r7, #28]
 8011e92:	f00b fd75 	bl	801d980 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	693a      	ldr	r2, [r7, #16]
 8011e9a:	6979      	ldr	r1, [r7, #20]
 8011e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e9e:	f000 f811 	bl	8011ec4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8011ea2:	e006      	b.n	8011eb2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8011ea4:	69f8      	ldr	r0, [r7, #28]
 8011ea6:	f00b fd6b 	bl	801d980 <sys_arch_unprotect>
 8011eaa:	e002      	b.n	8011eb2 <event_callback+0x166>
    return;
 8011eac:	bf00      	nop
 8011eae:	e000      	b.n	8011eb2 <event_callback+0x166>
      return;
 8011eb0:	bf00      	nop
  }
  done_socket(sock);
}
 8011eb2:	3728      	adds	r7, #40	@ 0x28
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	0801f82c 	.word	0x0801f82c
 8011ebc:	0801fba8 	.word	0x0801fba8
 8011ec0:	0801f880 	.word	0x0801f880

08011ec4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b088      	sub	sp, #32
 8011ec8:	af02      	add	r7, sp, #8
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
 8011ed0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8011ed2:	4b42      	ldr	r3, [pc, #264]	@ (8011fdc <select_check_waiters+0x118>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	617b      	str	r3, [r7, #20]
 8011ed8:	e078      	b.n	8011fcc <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	69db      	ldr	r3, [r3, #28]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d171      	bne.n	8011fc6 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	695b      	ldr	r3, [r3, #20]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d009      	beq.n	8011f02 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	68ba      	ldr	r2, [r7, #8]
 8011ef6:	68f9      	ldr	r1, [r7, #12]
 8011ef8:	6978      	ldr	r0, [r7, #20]
 8011efa:	f7ff fee3 	bl	8011cc4 <lwip_poll_should_wake>
 8011efe:	6138      	str	r0, [r7, #16]
 8011f00:	e056      	b.n	8011fb0 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d017      	beq.n	8011f38 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d013      	beq.n	8011f38 <select_check_waiters+0x74>
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	da00      	bge.n	8011f1c <select_check_waiters+0x58>
 8011f1a:	331f      	adds	r3, #31
 8011f1c:	115b      	asrs	r3, r3, #5
 8011f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	f003 031f 	and.w	r3, r3, #31
 8011f28:	fa22 f303 	lsr.w	r3, r2, r3
 8011f2c:	f003 0301 	and.w	r3, r3, #1
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <select_check_waiters+0x74>
            do_signal = 1;
 8011f34:	2301      	movs	r3, #1
 8011f36:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d01a      	beq.n	8011f74 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d117      	bne.n	8011f74 <select_check_waiters+0xb0>
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d013      	beq.n	8011f74 <select_check_waiters+0xb0>
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	68da      	ldr	r2, [r3, #12]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	da00      	bge.n	8011f58 <select_check_waiters+0x94>
 8011f56:	331f      	adds	r3, #31
 8011f58:	115b      	asrs	r3, r3, #5
 8011f5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f003 031f 	and.w	r3, r3, #31
 8011f64:	fa22 f303 	lsr.w	r3, r2, r3
 8011f68:	f003 0301 	and.w	r3, r3, #1
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d001      	beq.n	8011f74 <select_check_waiters+0xb0>
            do_signal = 1;
 8011f70:	2301      	movs	r3, #1
 8011f72:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d01a      	beq.n	8011fb0 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d117      	bne.n	8011fb0 <select_check_waiters+0xec>
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d013      	beq.n	8011fb0 <select_check_waiters+0xec>
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	691a      	ldr	r2, [r3, #16]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	da00      	bge.n	8011f94 <select_check_waiters+0xd0>
 8011f92:	331f      	adds	r3, #31
 8011f94:	115b      	asrs	r3, r3, #5
 8011f96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f003 031f 	and.w	r3, r3, #31
 8011fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8011fa4:	f003 0301 	and.w	r3, r3, #1
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d001      	beq.n	8011fb0 <select_check_waiters+0xec>
            do_signal = 1;
 8011fac:	2301      	movs	r3, #1
 8011fae:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d007      	beq.n	8011fc6 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	3320      	adds	r3, #32
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f00b fc39 	bl	801d838 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	617b      	str	r3, [r7, #20]
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d183      	bne.n	8011eda <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8011fd2:	bf00      	nop
 8011fd4:	bf00      	nop
 8011fd6:	3718      	adds	r7, #24
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	24010338 	.word	0x24010338

08011fe0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b084      	sub	sp, #16
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011fea:	f008 fb15 	bl	801a618 <sys_timeouts_sleeptime>
 8011fee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff6:	d10b      	bne.n	8012010 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011ff8:	4813      	ldr	r0, [pc, #76]	@ (8012048 <tcpip_timeouts_mbox_fetch+0x68>)
 8011ffa:	f00b fc86 	bl	801d90a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011ffe:	2200      	movs	r2, #0
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f00b fb5c 	bl	801d6c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012008:	480f      	ldr	r0, [pc, #60]	@ (8012048 <tcpip_timeouts_mbox_fetch+0x68>)
 801200a:	f00b fc6f 	bl	801d8ec <sys_mutex_lock>
    return;
 801200e:	e018      	b.n	8012042 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d102      	bne.n	801201c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012016:	f008 fac5 	bl	801a5a4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801201a:	e7e6      	b.n	8011fea <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801201c:	480a      	ldr	r0, [pc, #40]	@ (8012048 <tcpip_timeouts_mbox_fetch+0x68>)
 801201e:	f00b fc74 	bl	801d90a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f00b fb4a 	bl	801d6c0 <sys_arch_mbox_fetch>
 801202c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801202e:	4806      	ldr	r0, [pc, #24]	@ (8012048 <tcpip_timeouts_mbox_fetch+0x68>)
 8012030:	f00b fc5c 	bl	801d8ec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801203a:	d102      	bne.n	8012042 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801203c:	f008 fab2 	bl	801a5a4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012040:	e7d3      	b.n	8011fea <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012042:	3710      	adds	r7, #16
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	24010348 	.word	0x24010348

0801204c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012054:	4810      	ldr	r0, [pc, #64]	@ (8012098 <tcpip_thread+0x4c>)
 8012056:	f00b fc49 	bl	801d8ec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801205a:	4b10      	ldr	r3, [pc, #64]	@ (801209c <tcpip_thread+0x50>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d005      	beq.n	801206e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012062:	4b0e      	ldr	r3, [pc, #56]	@ (801209c <tcpip_thread+0x50>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a0e      	ldr	r2, [pc, #56]	@ (80120a0 <tcpip_thread+0x54>)
 8012068:	6812      	ldr	r2, [r2, #0]
 801206a:	4610      	mov	r0, r2
 801206c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801206e:	f107 030c 	add.w	r3, r7, #12
 8012072:	4619      	mov	r1, r3
 8012074:	480b      	ldr	r0, [pc, #44]	@ (80120a4 <tcpip_thread+0x58>)
 8012076:	f7ff ffb3 	bl	8011fe0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d106      	bne.n	801208e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012080:	4b09      	ldr	r3, [pc, #36]	@ (80120a8 <tcpip_thread+0x5c>)
 8012082:	2291      	movs	r2, #145	@ 0x91
 8012084:	4909      	ldr	r1, [pc, #36]	@ (80120ac <tcpip_thread+0x60>)
 8012086:	480a      	ldr	r0, [pc, #40]	@ (80120b0 <tcpip_thread+0x64>)
 8012088:	f00b fe94 	bl	801ddb4 <iprintf>
      continue;
 801208c:	e003      	b.n	8012096 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	4618      	mov	r0, r3
 8012092:	f000 f80f 	bl	80120b4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012096:	e7ea      	b.n	801206e <tcpip_thread+0x22>
 8012098:	24010348 	.word	0x24010348
 801209c:	2401033c 	.word	0x2401033c
 80120a0:	24010340 	.word	0x24010340
 80120a4:	24010344 	.word	0x24010344
 80120a8:	0801fbfc 	.word	0x0801fbfc
 80120ac:	0801fc2c 	.word	0x0801fc2c
 80120b0:	0801fc4c 	.word	0x0801fc4c

080120b4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	2b02      	cmp	r3, #2
 80120c2:	d026      	beq.n	8012112 <tcpip_thread_handle_msg+0x5e>
 80120c4:	2b02      	cmp	r3, #2
 80120c6:	dc2b      	bgt.n	8012120 <tcpip_thread_handle_msg+0x6c>
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <tcpip_thread_handle_msg+0x1e>
 80120cc:	2b01      	cmp	r3, #1
 80120ce:	d015      	beq.n	80120fc <tcpip_thread_handle_msg+0x48>
 80120d0:	e026      	b.n	8012120 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	6850      	ldr	r0, [r2, #4]
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	6892      	ldr	r2, [r2, #8]
 80120de:	4611      	mov	r1, r2
 80120e0:	4798      	blx	r3
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d004      	beq.n	80120f2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	f001 fe1f 	bl	8013d30 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80120f2:	6879      	ldr	r1, [r7, #4]
 80120f4:	2009      	movs	r0, #9
 80120f6:	f000 ff41 	bl	8012f7c <memp_free>
      break;
 80120fa:	e018      	b.n	801212e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	6892      	ldr	r2, [r2, #8]
 8012104:	4610      	mov	r0, r2
 8012106:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012108:	6879      	ldr	r1, [r7, #4]
 801210a:	2008      	movs	r0, #8
 801210c:	f000 ff36 	bl	8012f7c <memp_free>
      break;
 8012110:	e00d      	b.n	801212e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685b      	ldr	r3, [r3, #4]
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	6892      	ldr	r2, [r2, #8]
 801211a:	4610      	mov	r0, r2
 801211c:	4798      	blx	r3
      break;
 801211e:	e006      	b.n	801212e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012120:	4b05      	ldr	r3, [pc, #20]	@ (8012138 <tcpip_thread_handle_msg+0x84>)
 8012122:	22cf      	movs	r2, #207	@ 0xcf
 8012124:	4905      	ldr	r1, [pc, #20]	@ (801213c <tcpip_thread_handle_msg+0x88>)
 8012126:	4806      	ldr	r0, [pc, #24]	@ (8012140 <tcpip_thread_handle_msg+0x8c>)
 8012128:	f00b fe44 	bl	801ddb4 <iprintf>
      break;
 801212c:	bf00      	nop
  }
}
 801212e:	bf00      	nop
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	0801fbfc 	.word	0x0801fbfc
 801213c:	0801fc2c 	.word	0x0801fc2c
 8012140:	0801fc4c 	.word	0x0801fc4c

08012144 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b086      	sub	sp, #24
 8012148:	af00      	add	r7, sp, #0
 801214a:	60f8      	str	r0, [r7, #12]
 801214c:	60b9      	str	r1, [r7, #8]
 801214e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012150:	481a      	ldr	r0, [pc, #104]	@ (80121bc <tcpip_inpkt+0x78>)
 8012152:	f00b fafd 	bl	801d750 <sys_mbox_valid>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d105      	bne.n	8012168 <tcpip_inpkt+0x24>
 801215c:	4b18      	ldr	r3, [pc, #96]	@ (80121c0 <tcpip_inpkt+0x7c>)
 801215e:	22fc      	movs	r2, #252	@ 0xfc
 8012160:	4918      	ldr	r1, [pc, #96]	@ (80121c4 <tcpip_inpkt+0x80>)
 8012162:	4819      	ldr	r0, [pc, #100]	@ (80121c8 <tcpip_inpkt+0x84>)
 8012164:	f00b fe26 	bl	801ddb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012168:	2009      	movs	r0, #9
 801216a:	f000 fe91 	bl	8012e90 <memp_malloc>
 801216e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d102      	bne.n	801217c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012176:	f04f 33ff 	mov.w	r3, #4294967295
 801217a:	e01a      	b.n	80121b2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2200      	movs	r2, #0
 8012180:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	68fa      	ldr	r2, [r7, #12]
 8012186:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	68ba      	ldr	r2, [r7, #8]
 801218c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012194:	6979      	ldr	r1, [r7, #20]
 8012196:	4809      	ldr	r0, [pc, #36]	@ (80121bc <tcpip_inpkt+0x78>)
 8012198:	f00b fa78 	bl	801d68c <sys_mbox_trypost>
 801219c:	4603      	mov	r3, r0
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d006      	beq.n	80121b0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80121a2:	6979      	ldr	r1, [r7, #20]
 80121a4:	2009      	movs	r0, #9
 80121a6:	f000 fee9 	bl	8012f7c <memp_free>
    return ERR_MEM;
 80121aa:	f04f 33ff 	mov.w	r3, #4294967295
 80121ae:	e000      	b.n	80121b2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80121b0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3718      	adds	r7, #24
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	24010344 	.word	0x24010344
 80121c0:	0801fbfc 	.word	0x0801fbfc
 80121c4:	0801fc74 	.word	0x0801fc74
 80121c8:	0801fc4c 	.word	0x0801fc4c

080121cc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80121d6:	683b      	ldr	r3, [r7, #0]
 80121d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80121dc:	f003 0318 	and.w	r3, r3, #24
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d006      	beq.n	80121f2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80121e4:	4a08      	ldr	r2, [pc, #32]	@ (8012208 <tcpip_input+0x3c>)
 80121e6:	6839      	ldr	r1, [r7, #0]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7ff ffab 	bl	8012144 <tcpip_inpkt>
 80121ee:	4603      	mov	r3, r0
 80121f0:	e005      	b.n	80121fe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80121f2:	4a06      	ldr	r2, [pc, #24]	@ (801220c <tcpip_input+0x40>)
 80121f4:	6839      	ldr	r1, [r7, #0]
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f7ff ffa4 	bl	8012144 <tcpip_inpkt>
 80121fc:	4603      	mov	r3, r0
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3708      	adds	r7, #8
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
 8012206:	bf00      	nop
 8012208:	0801d489 	.word	0x0801d489
 801220c:	0801c391 	.word	0x0801c391

08012210 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
 8012218:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801221a:	4819      	ldr	r0, [pc, #100]	@ (8012280 <tcpip_try_callback+0x70>)
 801221c:	f00b fa98 	bl	801d750 <sys_mbox_valid>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d106      	bne.n	8012234 <tcpip_try_callback+0x24>
 8012226:	4b17      	ldr	r3, [pc, #92]	@ (8012284 <tcpip_try_callback+0x74>)
 8012228:	f240 125d 	movw	r2, #349	@ 0x15d
 801222c:	4916      	ldr	r1, [pc, #88]	@ (8012288 <tcpip_try_callback+0x78>)
 801222e:	4817      	ldr	r0, [pc, #92]	@ (801228c <tcpip_try_callback+0x7c>)
 8012230:	f00b fdc0 	bl	801ddb4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012234:	2008      	movs	r0, #8
 8012236:	f000 fe2b 	bl	8012e90 <memp_malloc>
 801223a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d102      	bne.n	8012248 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012242:	f04f 33ff 	mov.w	r3, #4294967295
 8012246:	e017      	b.n	8012278 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2201      	movs	r2, #1
 801224c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	687a      	ldr	r2, [r7, #4]
 8012252:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	683a      	ldr	r2, [r7, #0]
 8012258:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801225a:	68f9      	ldr	r1, [r7, #12]
 801225c:	4808      	ldr	r0, [pc, #32]	@ (8012280 <tcpip_try_callback+0x70>)
 801225e:	f00b fa15 	bl	801d68c <sys_mbox_trypost>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d006      	beq.n	8012276 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012268:	68f9      	ldr	r1, [r7, #12]
 801226a:	2008      	movs	r0, #8
 801226c:	f000 fe86 	bl	8012f7c <memp_free>
    return ERR_MEM;
 8012270:	f04f 33ff 	mov.w	r3, #4294967295
 8012274:	e000      	b.n	8012278 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012276:	2300      	movs	r3, #0
}
 8012278:	4618      	mov	r0, r3
 801227a:	3710      	adds	r7, #16
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	24010344 	.word	0x24010344
 8012284:	0801fbfc 	.word	0x0801fbfc
 8012288:	0801fc74 	.word	0x0801fc74
 801228c:	0801fc4c 	.word	0x0801fc4c

08012290 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801229c:	4806      	ldr	r0, [pc, #24]	@ (80122b8 <tcpip_send_msg_wait_sem+0x28>)
 801229e:	f00b fb25 	bl	801d8ec <sys_mutex_lock>
  fn(apimsg);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	68b8      	ldr	r0, [r7, #8]
 80122a6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80122a8:	4803      	ldr	r0, [pc, #12]	@ (80122b8 <tcpip_send_msg_wait_sem+0x28>)
 80122aa:	f00b fb2e 	bl	801d90a <sys_mutex_unlock>
  return ERR_OK;
 80122ae:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3710      	adds	r7, #16
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	24010348 	.word	0x24010348

080122bc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af02      	add	r7, sp, #8
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80122c6:	f000 f92d 	bl	8012524 <lwip_init>

  tcpip_init_done = initfunc;
 80122ca:	4a17      	ldr	r2, [pc, #92]	@ (8012328 <tcpip_init+0x6c>)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80122d0:	4a16      	ldr	r2, [pc, #88]	@ (801232c <tcpip_init+0x70>)
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80122d6:	2106      	movs	r1, #6
 80122d8:	4815      	ldr	r0, [pc, #84]	@ (8012330 <tcpip_init+0x74>)
 80122da:	f00b f9ab 	bl	801d634 <sys_mbox_new>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d006      	beq.n	80122f2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80122e4:	4b13      	ldr	r3, [pc, #76]	@ (8012334 <tcpip_init+0x78>)
 80122e6:	f240 2261 	movw	r2, #609	@ 0x261
 80122ea:	4913      	ldr	r1, [pc, #76]	@ (8012338 <tcpip_init+0x7c>)
 80122ec:	4813      	ldr	r0, [pc, #76]	@ (801233c <tcpip_init+0x80>)
 80122ee:	f00b fd61 	bl	801ddb4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80122f2:	4813      	ldr	r0, [pc, #76]	@ (8012340 <tcpip_init+0x84>)
 80122f4:	f00b fae4 	bl	801d8c0 <sys_mutex_new>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d006      	beq.n	801230c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80122fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012334 <tcpip_init+0x78>)
 8012300:	f240 2265 	movw	r2, #613	@ 0x265
 8012304:	490f      	ldr	r1, [pc, #60]	@ (8012344 <tcpip_init+0x88>)
 8012306:	480d      	ldr	r0, [pc, #52]	@ (801233c <tcpip_init+0x80>)
 8012308:	f00b fd54 	bl	801ddb4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801230c:	2318      	movs	r3, #24
 801230e:	9300      	str	r3, [sp, #0]
 8012310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012314:	2200      	movs	r2, #0
 8012316:	490c      	ldr	r1, [pc, #48]	@ (8012348 <tcpip_init+0x8c>)
 8012318:	480c      	ldr	r0, [pc, #48]	@ (801234c <tcpip_init+0x90>)
 801231a:	f00b fb03 	bl	801d924 <sys_thread_new>
}
 801231e:	bf00      	nop
 8012320:	3708      	adds	r7, #8
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	2401033c 	.word	0x2401033c
 801232c:	24010340 	.word	0x24010340
 8012330:	24010344 	.word	0x24010344
 8012334:	0801fbfc 	.word	0x0801fbfc
 8012338:	0801fc84 	.word	0x0801fc84
 801233c:	0801fc4c 	.word	0x0801fc4c
 8012340:	24010348 	.word	0x24010348
 8012344:	0801fca8 	.word	0x0801fca8
 8012348:	0801204d 	.word	0x0801204d
 801234c:	0801fccc 	.word	0x0801fccc

08012350 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801235a:	88fb      	ldrh	r3, [r7, #6]
 801235c:	021b      	lsls	r3, r3, #8
 801235e:	b21a      	sxth	r2, r3
 8012360:	88fb      	ldrh	r3, [r7, #6]
 8012362:	0a1b      	lsrs	r3, r3, #8
 8012364:	b29b      	uxth	r3, r3
 8012366:	b21b      	sxth	r3, r3
 8012368:	4313      	orrs	r3, r2
 801236a:	b21b      	sxth	r3, r3
 801236c:	b29b      	uxth	r3, r3
}
 801236e:	4618      	mov	r0, r3
 8012370:	370c      	adds	r7, #12
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801237a:	b480      	push	{r7}
 801237c:	b083      	sub	sp, #12
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	061a      	lsls	r2, r3, #24
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	021b      	lsls	r3, r3, #8
 801238a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801238e:	431a      	orrs	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	0a1b      	lsrs	r3, r3, #8
 8012394:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012398:	431a      	orrs	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	0e1b      	lsrs	r3, r3, #24
 801239e:	4313      	orrs	r3, r2
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr

080123ac <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80123ac:	b480      	push	{r7}
 80123ae:	b089      	sub	sp, #36	@ 0x24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80123ba:	2300      	movs	r3, #0
 80123bc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80123be:	2300      	movs	r3, #0
 80123c0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	f003 0301 	and.w	r3, r3, #1
 80123c8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80123ca:	693b      	ldr	r3, [r7, #16]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00d      	beq.n	80123ec <lwip_standard_chksum+0x40>
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	dd0a      	ble.n	80123ec <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80123d6:	69fa      	ldr	r2, [r7, #28]
 80123d8:	1c53      	adds	r3, r2, #1
 80123da:	61fb      	str	r3, [r7, #28]
 80123dc:	f107 030e 	add.w	r3, r7, #14
 80123e0:	3301      	adds	r3, #1
 80123e2:	7812      	ldrb	r2, [r2, #0]
 80123e4:	701a      	strb	r2, [r3, #0]
    len--;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80123f0:	e00a      	b.n	8012408 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80123f2:	69bb      	ldr	r3, [r7, #24]
 80123f4:	1c9a      	adds	r2, r3, #2
 80123f6:	61ba      	str	r2, [r7, #24]
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	461a      	mov	r2, r3
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	4413      	add	r3, r2
 8012400:	617b      	str	r3, [r7, #20]
    len -= 2;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	3b02      	subs	r3, #2
 8012406:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	2b01      	cmp	r3, #1
 801240c:	dcf1      	bgt.n	80123f2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	dd04      	ble.n	801241e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8012414:	f107 030e 	add.w	r3, r7, #14
 8012418:	69ba      	ldr	r2, [r7, #24]
 801241a:	7812      	ldrb	r2, [r2, #0]
 801241c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801241e:	89fb      	ldrh	r3, [r7, #14]
 8012420:	461a      	mov	r2, r3
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	4413      	add	r3, r2
 8012426:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	0c1a      	lsrs	r2, r3, #16
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	b29b      	uxth	r3, r3
 8012430:	4413      	add	r3, r2
 8012432:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	0c1a      	lsrs	r2, r3, #16
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	b29b      	uxth	r3, r3
 801243c:	4413      	add	r3, r2
 801243e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d007      	beq.n	8012456 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	021b      	lsls	r3, r3, #8
 801244a:	b29a      	uxth	r2, r3
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	0a1b      	lsrs	r3, r3, #8
 8012450:	b2db      	uxtb	r3, r3
 8012452:	4313      	orrs	r3, r2
 8012454:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	b29b      	uxth	r3, r3
}
 801245a:	4618      	mov	r0, r3
 801245c:	3724      	adds	r7, #36	@ 0x24
 801245e:	46bd      	mov	sp, r7
 8012460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012464:	4770      	bx	lr

08012466 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b082      	sub	sp, #8
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
 801246e:	460b      	mov	r3, r1
 8012470:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8012472:	887b      	ldrh	r3, [r7, #2]
 8012474:	4619      	mov	r1, r3
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7ff ff98 	bl	80123ac <lwip_standard_chksum>
 801247c:	4603      	mov	r3, r0
 801247e:	43db      	mvns	r3, r3
 8012480:	b29b      	uxth	r3, r3
}
 8012482:	4618      	mov	r0, r3
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b086      	sub	sp, #24
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8012492:	2300      	movs	r3, #0
 8012494:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8012496:	2300      	movs	r3, #0
 8012498:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	613b      	str	r3, [r7, #16]
 801249e:	e02b      	b.n	80124f8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	685a      	ldr	r2, [r3, #4]
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	895b      	ldrh	r3, [r3, #10]
 80124a8:	4619      	mov	r1, r3
 80124aa:	4610      	mov	r0, r2
 80124ac:	f7ff ff7e 	bl	80123ac <lwip_standard_chksum>
 80124b0:	4603      	mov	r3, r0
 80124b2:	461a      	mov	r2, r3
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	4413      	add	r3, r2
 80124b8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	0c1a      	lsrs	r2, r3, #16
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	4413      	add	r3, r2
 80124c4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	895b      	ldrh	r3, [r3, #10]
 80124ca:	f003 0301 	and.w	r3, r3, #1
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00e      	beq.n	80124f2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	bf0c      	ite	eq
 80124da:	2301      	moveq	r3, #1
 80124dc:	2300      	movne	r3, #0
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	021b      	lsls	r3, r3, #8
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	0a1b      	lsrs	r3, r3, #8
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	4313      	orrs	r3, r2
 80124f0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	613b      	str	r3, [r7, #16]
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1d0      	bne.n	80124a0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d007      	beq.n	8012514 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	021b      	lsls	r3, r3, #8
 8012508:	b29a      	uxth	r2, r3
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	0a1b      	lsrs	r3, r3, #8
 801250e:	b2db      	uxtb	r3, r3
 8012510:	4313      	orrs	r3, r2
 8012512:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	b29b      	uxth	r3, r3
 8012518:	43db      	mvns	r3, r3
 801251a:	b29b      	uxth	r3, r3
}
 801251c:	4618      	mov	r0, r3
 801251e:	3718      	adds	r7, #24
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}

08012524 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801252e:	f00b f9bb 	bl	801d8a8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012532:	f000 f8d9 	bl	80126e8 <mem_init>
  memp_init();
 8012536:	f000 fc3d 	bl	8012db4 <memp_init>
  pbuf_init();
  netif_init();
 801253a:	f000 fd49 	bl	8012fd0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801253e:	f008 f8a3 	bl	801a688 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012542:	f001 fe9f 	bl	8014284 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012546:	f007 ffe5 	bl	801a514 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801254a:	bf00      	nop
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
	...

08012554 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
 801255a:	4603      	mov	r3, r0
 801255c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801255e:	4b05      	ldr	r3, [pc, #20]	@ (8012574 <ptr_to_mem+0x20>)
 8012560:	681a      	ldr	r2, [r3, #0]
 8012562:	88fb      	ldrh	r3, [r7, #6]
 8012564:	4413      	add	r3, r2
}
 8012566:	4618      	mov	r0, r3
 8012568:	370c      	adds	r7, #12
 801256a:	46bd      	mov	sp, r7
 801256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	24010364 	.word	0x24010364

08012578 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012578:	b480      	push	{r7}
 801257a:	b083      	sub	sp, #12
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012580:	4b05      	ldr	r3, [pc, #20]	@ (8012598 <mem_to_ptr+0x20>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	1ad3      	subs	r3, r2, r3
 8012588:	b29b      	uxth	r3, r3
}
 801258a:	4618      	mov	r0, r3
 801258c:	370c      	adds	r7, #12
 801258e:	46bd      	mov	sp, r7
 8012590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012594:	4770      	bx	lr
 8012596:	bf00      	nop
 8012598:	24010364 	.word	0x24010364

0801259c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80125a4:	4b47      	ldr	r3, [pc, #284]	@ (80126c4 <plug_holes+0x128>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d206      	bcs.n	80125bc <plug_holes+0x20>
 80125ae:	4b46      	ldr	r3, [pc, #280]	@ (80126c8 <plug_holes+0x12c>)
 80125b0:	f240 12df 	movw	r2, #479	@ 0x1df
 80125b4:	4945      	ldr	r1, [pc, #276]	@ (80126cc <plug_holes+0x130>)
 80125b6:	4846      	ldr	r0, [pc, #280]	@ (80126d0 <plug_holes+0x134>)
 80125b8:	f00b fbfc 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80125bc:	4b45      	ldr	r3, [pc, #276]	@ (80126d4 <plug_holes+0x138>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d306      	bcc.n	80125d4 <plug_holes+0x38>
 80125c6:	4b40      	ldr	r3, [pc, #256]	@ (80126c8 <plug_holes+0x12c>)
 80125c8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80125cc:	4942      	ldr	r1, [pc, #264]	@ (80126d8 <plug_holes+0x13c>)
 80125ce:	4840      	ldr	r0, [pc, #256]	@ (80126d0 <plug_holes+0x134>)
 80125d0:	f00b fbf0 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	791b      	ldrb	r3, [r3, #4]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d006      	beq.n	80125ea <plug_holes+0x4e>
 80125dc:	4b3a      	ldr	r3, [pc, #232]	@ (80126c8 <plug_holes+0x12c>)
 80125de:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80125e2:	493e      	ldr	r1, [pc, #248]	@ (80126dc <plug_holes+0x140>)
 80125e4:	483a      	ldr	r0, [pc, #232]	@ (80126d0 <plug_holes+0x134>)
 80125e6:	f00b fbe5 	bl	801ddb4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	881b      	ldrh	r3, [r3, #0]
 80125ee:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d906      	bls.n	8012604 <plug_holes+0x68>
 80125f6:	4b34      	ldr	r3, [pc, #208]	@ (80126c8 <plug_holes+0x12c>)
 80125f8:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80125fc:	4938      	ldr	r1, [pc, #224]	@ (80126e0 <plug_holes+0x144>)
 80125fe:	4834      	ldr	r0, [pc, #208]	@ (80126d0 <plug_holes+0x134>)
 8012600:	f00b fbd8 	bl	801ddb4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	881b      	ldrh	r3, [r3, #0]
 8012608:	4618      	mov	r0, r3
 801260a:	f7ff ffa3 	bl	8012554 <ptr_to_mem>
 801260e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	429a      	cmp	r2, r3
 8012616:	d025      	beq.n	8012664 <plug_holes+0xc8>
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	791b      	ldrb	r3, [r3, #4]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d121      	bne.n	8012664 <plug_holes+0xc8>
 8012620:	4b2c      	ldr	r3, [pc, #176]	@ (80126d4 <plug_holes+0x138>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	68fa      	ldr	r2, [r7, #12]
 8012626:	429a      	cmp	r2, r3
 8012628:	d01c      	beq.n	8012664 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801262a:	4b2e      	ldr	r3, [pc, #184]	@ (80126e4 <plug_holes+0x148>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	68fa      	ldr	r2, [r7, #12]
 8012630:	429a      	cmp	r2, r3
 8012632:	d102      	bne.n	801263a <plug_holes+0x9e>
      lfree = mem;
 8012634:	4a2b      	ldr	r2, [pc, #172]	@ (80126e4 <plug_holes+0x148>)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	881a      	ldrh	r2, [r3, #0]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	881b      	ldrh	r3, [r3, #0]
 8012646:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 801264a:	4293      	cmp	r3, r2
 801264c:	d00a      	beq.n	8012664 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	881b      	ldrh	r3, [r3, #0]
 8012652:	4618      	mov	r0, r3
 8012654:	f7ff ff7e 	bl	8012554 <ptr_to_mem>
 8012658:	4604      	mov	r4, r0
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7ff ff8c 	bl	8012578 <mem_to_ptr>
 8012660:	4603      	mov	r3, r0
 8012662:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	885b      	ldrh	r3, [r3, #2]
 8012668:	4618      	mov	r0, r3
 801266a:	f7ff ff73 	bl	8012554 <ptr_to_mem>
 801266e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012670:	68ba      	ldr	r2, [r7, #8]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	429a      	cmp	r2, r3
 8012676:	d020      	beq.n	80126ba <plug_holes+0x11e>
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	791b      	ldrb	r3, [r3, #4]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d11c      	bne.n	80126ba <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012680:	4b18      	ldr	r3, [pc, #96]	@ (80126e4 <plug_holes+0x148>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	429a      	cmp	r2, r3
 8012688:	d102      	bne.n	8012690 <plug_holes+0xf4>
      lfree = pmem;
 801268a:	4a16      	ldr	r2, [pc, #88]	@ (80126e4 <plug_holes+0x148>)
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	881a      	ldrh	r2, [r3, #0]
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	881b      	ldrh	r3, [r3, #0]
 801269c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d00a      	beq.n	80126ba <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	881b      	ldrh	r3, [r3, #0]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7ff ff53 	bl	8012554 <ptr_to_mem>
 80126ae:	4604      	mov	r4, r0
 80126b0:	68b8      	ldr	r0, [r7, #8]
 80126b2:	f7ff ff61 	bl	8012578 <mem_to_ptr>
 80126b6:	4603      	mov	r3, r0
 80126b8:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80126ba:	bf00      	nop
 80126bc:	3714      	adds	r7, #20
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd90      	pop	{r4, r7, pc}
 80126c2:	bf00      	nop
 80126c4:	24010364 	.word	0x24010364
 80126c8:	0801fcdc 	.word	0x0801fcdc
 80126cc:	0801fd0c 	.word	0x0801fd0c
 80126d0:	0801fd24 	.word	0x0801fd24
 80126d4:	24010368 	.word	0x24010368
 80126d8:	0801fd4c 	.word	0x0801fd4c
 80126dc:	0801fd68 	.word	0x0801fd68
 80126e0:	0801fd84 	.word	0x0801fd84
 80126e4:	24010370 	.word	0x24010370

080126e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80126ee:	4b1d      	ldr	r3, [pc, #116]	@ (8012764 <mem_init+0x7c>)
 80126f0:	4a1d      	ldr	r2, [pc, #116]	@ (8012768 <mem_init+0x80>)
 80126f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80126f4:	4b1b      	ldr	r3, [pc, #108]	@ (8012764 <mem_init+0x7c>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012700:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2200      	movs	r2, #0
 8012706:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801270e:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 8012712:	f7ff ff1f 	bl	8012554 <ptr_to_mem>
 8012716:	4603      	mov	r3, r0
 8012718:	4a14      	ldr	r2, [pc, #80]	@ (801276c <mem_init+0x84>)
 801271a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801271c:	4b13      	ldr	r3, [pc, #76]	@ (801276c <mem_init+0x84>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2201      	movs	r2, #1
 8012722:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012724:	4b11      	ldr	r3, [pc, #68]	@ (801276c <mem_init+0x84>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 801272c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801272e:	4b0f      	ldr	r3, [pc, #60]	@ (801276c <mem_init+0x84>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012736:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012738:	4b0a      	ldr	r3, [pc, #40]	@ (8012764 <mem_init+0x7c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	4a0c      	ldr	r2, [pc, #48]	@ (8012770 <mem_init+0x88>)
 801273e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012740:	480c      	ldr	r0, [pc, #48]	@ (8012774 <mem_init+0x8c>)
 8012742:	f00b f8bd 	bl	801d8c0 <sys_mutex_new>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801274c:	4b0a      	ldr	r3, [pc, #40]	@ (8012778 <mem_init+0x90>)
 801274e:	f240 221f 	movw	r2, #543	@ 0x21f
 8012752:	490a      	ldr	r1, [pc, #40]	@ (801277c <mem_init+0x94>)
 8012754:	480a      	ldr	r0, [pc, #40]	@ (8012780 <mem_init+0x98>)
 8012756:	f00b fb2d 	bl	801ddb4 <iprintf>
  }
}
 801275a:	bf00      	nop
 801275c:	3708      	adds	r7, #8
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	24010364 	.word	0x24010364
 8012768:	30000200 	.word	0x30000200
 801276c:	24010368 	.word	0x24010368
 8012770:	24010370 	.word	0x24010370
 8012774:	2401036c 	.word	0x2401036c
 8012778:	0801fcdc 	.word	0x0801fcdc
 801277c:	0801fdb0 	.word	0x0801fdb0
 8012780:	0801fd24 	.word	0x0801fd24

08012784 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7ff fef3 	bl	8012578 <mem_to_ptr>
 8012792:	4603      	mov	r3, r0
 8012794:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	4618      	mov	r0, r3
 801279c:	f7ff feda 	bl	8012554 <ptr_to_mem>
 80127a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	885b      	ldrh	r3, [r3, #2]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7ff fed4 	bl	8012554 <ptr_to_mem>
 80127ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	881b      	ldrh	r3, [r3, #0]
 80127b2:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d819      	bhi.n	80127ee <mem_link_valid+0x6a>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	885b      	ldrh	r3, [r3, #2]
 80127be:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d813      	bhi.n	80127ee <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80127ca:	8afa      	ldrh	r2, [r7, #22]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d004      	beq.n	80127da <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	881b      	ldrh	r3, [r3, #0]
 80127d4:	8afa      	ldrh	r2, [r7, #22]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d109      	bne.n	80127ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80127da:	4b08      	ldr	r3, [pc, #32]	@ (80127fc <mem_link_valid+0x78>)
 80127dc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80127de:	693a      	ldr	r2, [r7, #16]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d006      	beq.n	80127f2 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	885b      	ldrh	r3, [r3, #2]
 80127e8:	8afa      	ldrh	r2, [r7, #22]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d001      	beq.n	80127f2 <mem_link_valid+0x6e>
    return 0;
 80127ee:	2300      	movs	r3, #0
 80127f0:	e000      	b.n	80127f4 <mem_link_valid+0x70>
  }
  return 1;
 80127f2:	2301      	movs	r3, #1
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3718      	adds	r7, #24
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	24010368 	.word	0x24010368

08012800 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b088      	sub	sp, #32
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d070      	beq.n	80128f0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f003 0303 	and.w	r3, r3, #3
 8012814:	2b00      	cmp	r3, #0
 8012816:	d00d      	beq.n	8012834 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012818:	4b37      	ldr	r3, [pc, #220]	@ (80128f8 <mem_free+0xf8>)
 801281a:	f240 2273 	movw	r2, #627	@ 0x273
 801281e:	4937      	ldr	r1, [pc, #220]	@ (80128fc <mem_free+0xfc>)
 8012820:	4837      	ldr	r0, [pc, #220]	@ (8012900 <mem_free+0x100>)
 8012822:	f00b fac7 	bl	801ddb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012826:	f00b f89d 	bl	801d964 <sys_arch_protect>
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f00b f8a7 	bl	801d980 <sys_arch_unprotect>
    return;
 8012832:	e05e      	b.n	80128f2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	3b08      	subs	r3, #8
 8012838:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801283a:	4b32      	ldr	r3, [pc, #200]	@ (8012904 <mem_free+0x104>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	69fa      	ldr	r2, [r7, #28]
 8012840:	429a      	cmp	r2, r3
 8012842:	d306      	bcc.n	8012852 <mem_free+0x52>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f103 020c 	add.w	r2, r3, #12
 801284a:	4b2f      	ldr	r3, [pc, #188]	@ (8012908 <mem_free+0x108>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	429a      	cmp	r2, r3
 8012850:	d90d      	bls.n	801286e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012852:	4b29      	ldr	r3, [pc, #164]	@ (80128f8 <mem_free+0xf8>)
 8012854:	f240 227f 	movw	r2, #639	@ 0x27f
 8012858:	492c      	ldr	r1, [pc, #176]	@ (801290c <mem_free+0x10c>)
 801285a:	4829      	ldr	r0, [pc, #164]	@ (8012900 <mem_free+0x100>)
 801285c:	f00b faaa 	bl	801ddb4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012860:	f00b f880 	bl	801d964 <sys_arch_protect>
 8012864:	6138      	str	r0, [r7, #16]
 8012866:	6938      	ldr	r0, [r7, #16]
 8012868:	f00b f88a 	bl	801d980 <sys_arch_unprotect>
    return;
 801286c:	e041      	b.n	80128f2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801286e:	4828      	ldr	r0, [pc, #160]	@ (8012910 <mem_free+0x110>)
 8012870:	f00b f83c 	bl	801d8ec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	791b      	ldrb	r3, [r3, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d110      	bne.n	801289e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801287c:	4b1e      	ldr	r3, [pc, #120]	@ (80128f8 <mem_free+0xf8>)
 801287e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012882:	4924      	ldr	r1, [pc, #144]	@ (8012914 <mem_free+0x114>)
 8012884:	481e      	ldr	r0, [pc, #120]	@ (8012900 <mem_free+0x100>)
 8012886:	f00b fa95 	bl	801ddb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801288a:	4821      	ldr	r0, [pc, #132]	@ (8012910 <mem_free+0x110>)
 801288c:	f00b f83d 	bl	801d90a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012890:	f00b f868 	bl	801d964 <sys_arch_protect>
 8012894:	6178      	str	r0, [r7, #20]
 8012896:	6978      	ldr	r0, [r7, #20]
 8012898:	f00b f872 	bl	801d980 <sys_arch_unprotect>
    return;
 801289c:	e029      	b.n	80128f2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801289e:	69f8      	ldr	r0, [r7, #28]
 80128a0:	f7ff ff70 	bl	8012784 <mem_link_valid>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d110      	bne.n	80128cc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80128aa:	4b13      	ldr	r3, [pc, #76]	@ (80128f8 <mem_free+0xf8>)
 80128ac:	f240 2295 	movw	r2, #661	@ 0x295
 80128b0:	4919      	ldr	r1, [pc, #100]	@ (8012918 <mem_free+0x118>)
 80128b2:	4813      	ldr	r0, [pc, #76]	@ (8012900 <mem_free+0x100>)
 80128b4:	f00b fa7e 	bl	801ddb4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80128b8:	4815      	ldr	r0, [pc, #84]	@ (8012910 <mem_free+0x110>)
 80128ba:	f00b f826 	bl	801d90a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80128be:	f00b f851 	bl	801d964 <sys_arch_protect>
 80128c2:	61b8      	str	r0, [r7, #24]
 80128c4:	69b8      	ldr	r0, [r7, #24]
 80128c6:	f00b f85b 	bl	801d980 <sys_arch_unprotect>
    return;
 80128ca:	e012      	b.n	80128f2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	2200      	movs	r2, #0
 80128d0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80128d2:	4b12      	ldr	r3, [pc, #72]	@ (801291c <mem_free+0x11c>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	69fa      	ldr	r2, [r7, #28]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d202      	bcs.n	80128e2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80128dc:	4a0f      	ldr	r2, [pc, #60]	@ (801291c <mem_free+0x11c>)
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80128e2:	69f8      	ldr	r0, [r7, #28]
 80128e4:	f7ff fe5a 	bl	801259c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80128e8:	4809      	ldr	r0, [pc, #36]	@ (8012910 <mem_free+0x110>)
 80128ea:	f00b f80e 	bl	801d90a <sys_mutex_unlock>
 80128ee:	e000      	b.n	80128f2 <mem_free+0xf2>
    return;
 80128f0:	bf00      	nop
}
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	0801fcdc 	.word	0x0801fcdc
 80128fc:	0801fdcc 	.word	0x0801fdcc
 8012900:	0801fd24 	.word	0x0801fd24
 8012904:	24010364 	.word	0x24010364
 8012908:	24010368 	.word	0x24010368
 801290c:	0801fdf0 	.word	0x0801fdf0
 8012910:	2401036c 	.word	0x2401036c
 8012914:	0801fe0c 	.word	0x0801fe0c
 8012918:	0801fe34 	.word	0x0801fe34
 801291c:	24010370 	.word	0x24010370

08012920 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b088      	sub	sp, #32
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	460b      	mov	r3, r1
 801292a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801292c:	887b      	ldrh	r3, [r7, #2]
 801292e:	3303      	adds	r3, #3
 8012930:	b29b      	uxth	r3, r3
 8012932:	f023 0303 	bic.w	r3, r3, #3
 8012936:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012938:	8bfb      	ldrh	r3, [r7, #30]
 801293a:	2b0b      	cmp	r3, #11
 801293c:	d801      	bhi.n	8012942 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801293e:	230c      	movs	r3, #12
 8012940:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012942:	8bfb      	ldrh	r3, [r7, #30]
 8012944:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012948:	4293      	cmp	r3, r2
 801294a:	d803      	bhi.n	8012954 <mem_trim+0x34>
 801294c:	8bfa      	ldrh	r2, [r7, #30]
 801294e:	887b      	ldrh	r3, [r7, #2]
 8012950:	429a      	cmp	r2, r3
 8012952:	d201      	bcs.n	8012958 <mem_trim+0x38>
    return NULL;
 8012954:	2300      	movs	r3, #0
 8012956:	e0dc      	b.n	8012b12 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012958:	4b70      	ldr	r3, [pc, #448]	@ (8012b1c <mem_trim+0x1fc>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	429a      	cmp	r2, r3
 8012960:	d304      	bcc.n	801296c <mem_trim+0x4c>
 8012962:	4b6f      	ldr	r3, [pc, #444]	@ (8012b20 <mem_trim+0x200>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	429a      	cmp	r2, r3
 801296a:	d306      	bcc.n	801297a <mem_trim+0x5a>
 801296c:	4b6d      	ldr	r3, [pc, #436]	@ (8012b24 <mem_trim+0x204>)
 801296e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012972:	496d      	ldr	r1, [pc, #436]	@ (8012b28 <mem_trim+0x208>)
 8012974:	486d      	ldr	r0, [pc, #436]	@ (8012b2c <mem_trim+0x20c>)
 8012976:	f00b fa1d 	bl	801ddb4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801297a:	4b68      	ldr	r3, [pc, #416]	@ (8012b1c <mem_trim+0x1fc>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	429a      	cmp	r2, r3
 8012982:	d304      	bcc.n	801298e <mem_trim+0x6e>
 8012984:	4b66      	ldr	r3, [pc, #408]	@ (8012b20 <mem_trim+0x200>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	429a      	cmp	r2, r3
 801298c:	d307      	bcc.n	801299e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801298e:	f00a ffe9 	bl	801d964 <sys_arch_protect>
 8012992:	60b8      	str	r0, [r7, #8]
 8012994:	68b8      	ldr	r0, [r7, #8]
 8012996:	f00a fff3 	bl	801d980 <sys_arch_unprotect>
    return rmem;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	e0b9      	b.n	8012b12 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	3b08      	subs	r3, #8
 80129a2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80129a4:	69b8      	ldr	r0, [r7, #24]
 80129a6:	f7ff fde7 	bl	8012578 <mem_to_ptr>
 80129aa:	4603      	mov	r3, r0
 80129ac:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	881a      	ldrh	r2, [r3, #0]
 80129b2:	8afb      	ldrh	r3, [r7, #22]
 80129b4:	1ad3      	subs	r3, r2, r3
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	3b08      	subs	r3, #8
 80129ba:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80129bc:	8bfa      	ldrh	r2, [r7, #30]
 80129be:	8abb      	ldrh	r3, [r7, #20]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d906      	bls.n	80129d2 <mem_trim+0xb2>
 80129c4:	4b57      	ldr	r3, [pc, #348]	@ (8012b24 <mem_trim+0x204>)
 80129c6:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80129ca:	4959      	ldr	r1, [pc, #356]	@ (8012b30 <mem_trim+0x210>)
 80129cc:	4857      	ldr	r0, [pc, #348]	@ (8012b2c <mem_trim+0x20c>)
 80129ce:	f00b f9f1 	bl	801ddb4 <iprintf>
  if (newsize > size) {
 80129d2:	8bfa      	ldrh	r2, [r7, #30]
 80129d4:	8abb      	ldrh	r3, [r7, #20]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d901      	bls.n	80129de <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80129da:	2300      	movs	r3, #0
 80129dc:	e099      	b.n	8012b12 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80129de:	8bfa      	ldrh	r2, [r7, #30]
 80129e0:	8abb      	ldrh	r3, [r7, #20]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d101      	bne.n	80129ea <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	e093      	b.n	8012b12 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80129ea:	4852      	ldr	r0, [pc, #328]	@ (8012b34 <mem_trim+0x214>)
 80129ec:	f00a ff7e 	bl	801d8ec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	881b      	ldrh	r3, [r3, #0]
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7ff fdad 	bl	8012554 <ptr_to_mem>
 80129fa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	791b      	ldrb	r3, [r3, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d141      	bne.n	8012a88 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	881b      	ldrh	r3, [r3, #0]
 8012a08:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d106      	bne.n	8012a1e <mem_trim+0xfe>
 8012a10:	4b44      	ldr	r3, [pc, #272]	@ (8012b24 <mem_trim+0x204>)
 8012a12:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012a16:	4948      	ldr	r1, [pc, #288]	@ (8012b38 <mem_trim+0x218>)
 8012a18:	4844      	ldr	r0, [pc, #272]	@ (8012b2c <mem_trim+0x20c>)
 8012a1a:	f00b f9cb 	bl	801ddb4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	881b      	ldrh	r3, [r3, #0]
 8012a22:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012a24:	8afa      	ldrh	r2, [r7, #22]
 8012a26:	8bfb      	ldrh	r3, [r7, #30]
 8012a28:	4413      	add	r3, r2
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012a30:	4b42      	ldr	r3, [pc, #264]	@ (8012b3c <mem_trim+0x21c>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	693a      	ldr	r2, [r7, #16]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d106      	bne.n	8012a48 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8012a3a:	89fb      	ldrh	r3, [r7, #14]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff fd89 	bl	8012554 <ptr_to_mem>
 8012a42:	4603      	mov	r3, r0
 8012a44:	4a3d      	ldr	r2, [pc, #244]	@ (8012b3c <mem_trim+0x21c>)
 8012a46:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012a48:	89fb      	ldrh	r3, [r7, #14]
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7ff fd82 	bl	8012554 <ptr_to_mem>
 8012a50:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	2200      	movs	r2, #0
 8012a56:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	89ba      	ldrh	r2, [r7, #12]
 8012a5c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	8afa      	ldrh	r2, [r7, #22]
 8012a62:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	89fa      	ldrh	r2, [r7, #14]
 8012a68:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	881b      	ldrh	r3, [r3, #0]
 8012a6e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d049      	beq.n	8012b0a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7ff fd6a 	bl	8012554 <ptr_to_mem>
 8012a80:	4602      	mov	r2, r0
 8012a82:	89fb      	ldrh	r3, [r7, #14]
 8012a84:	8053      	strh	r3, [r2, #2]
 8012a86:	e040      	b.n	8012b0a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012a88:	8bfb      	ldrh	r3, [r7, #30]
 8012a8a:	f103 0214 	add.w	r2, r3, #20
 8012a8e:	8abb      	ldrh	r3, [r7, #20]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d83a      	bhi.n	8012b0a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012a94:	8afa      	ldrh	r2, [r7, #22]
 8012a96:	8bfb      	ldrh	r3, [r7, #30]
 8012a98:	4413      	add	r3, r2
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	3308      	adds	r3, #8
 8012a9e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d106      	bne.n	8012aba <mem_trim+0x19a>
 8012aac:	4b1d      	ldr	r3, [pc, #116]	@ (8012b24 <mem_trim+0x204>)
 8012aae:	f240 3216 	movw	r2, #790	@ 0x316
 8012ab2:	4921      	ldr	r1, [pc, #132]	@ (8012b38 <mem_trim+0x218>)
 8012ab4:	481d      	ldr	r0, [pc, #116]	@ (8012b2c <mem_trim+0x20c>)
 8012ab6:	f00b f97d 	bl	801ddb4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012aba:	89fb      	ldrh	r3, [r7, #14]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7ff fd49 	bl	8012554 <ptr_to_mem>
 8012ac2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8012b3c <mem_trim+0x21c>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	693a      	ldr	r2, [r7, #16]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d202      	bcs.n	8012ad4 <mem_trim+0x1b4>
      lfree = mem2;
 8012ace:	4a1b      	ldr	r2, [pc, #108]	@ (8012b3c <mem_trim+0x21c>)
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	881a      	ldrh	r2, [r3, #0]
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	8afa      	ldrh	r2, [r7, #22]
 8012ae6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	89fa      	ldrh	r2, [r7, #14]
 8012aec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	881b      	ldrh	r3, [r3, #0]
 8012af2:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d007      	beq.n	8012b0a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	881b      	ldrh	r3, [r3, #0]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7ff fd28 	bl	8012554 <ptr_to_mem>
 8012b04:	4602      	mov	r2, r0
 8012b06:	89fb      	ldrh	r3, [r7, #14]
 8012b08:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012b0a:	480a      	ldr	r0, [pc, #40]	@ (8012b34 <mem_trim+0x214>)
 8012b0c:	f00a fefd 	bl	801d90a <sys_mutex_unlock>
  return rmem;
 8012b10:	687b      	ldr	r3, [r7, #4]
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3720      	adds	r7, #32
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	24010364 	.word	0x24010364
 8012b20:	24010368 	.word	0x24010368
 8012b24:	0801fcdc 	.word	0x0801fcdc
 8012b28:	0801fe68 	.word	0x0801fe68
 8012b2c:	0801fd24 	.word	0x0801fd24
 8012b30:	0801fe80 	.word	0x0801fe80
 8012b34:	2401036c 	.word	0x2401036c
 8012b38:	0801fea0 	.word	0x0801fea0
 8012b3c:	24010370 	.word	0x24010370

08012b40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b088      	sub	sp, #32
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	4603      	mov	r3, r0
 8012b48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012b4a:	88fb      	ldrh	r3, [r7, #6]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d101      	bne.n	8012b54 <mem_malloc+0x14>
    return NULL;
 8012b50:	2300      	movs	r3, #0
 8012b52:	e0e6      	b.n	8012d22 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	3303      	adds	r3, #3
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	f023 0303 	bic.w	r3, r3, #3
 8012b5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012b60:	8bbb      	ldrh	r3, [r7, #28]
 8012b62:	2b0b      	cmp	r3, #11
 8012b64:	d801      	bhi.n	8012b6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012b66:	230c      	movs	r3, #12
 8012b68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012b6a:	8bbb      	ldrh	r3, [r7, #28]
 8012b6c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d803      	bhi.n	8012b7c <mem_malloc+0x3c>
 8012b74:	8bba      	ldrh	r2, [r7, #28]
 8012b76:	88fb      	ldrh	r3, [r7, #6]
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d201      	bcs.n	8012b80 <mem_malloc+0x40>
    return NULL;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	e0d0      	b.n	8012d22 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012b80:	486a      	ldr	r0, [pc, #424]	@ (8012d2c <mem_malloc+0x1ec>)
 8012b82:	f00a feb3 	bl	801d8ec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012b86:	4b6a      	ldr	r3, [pc, #424]	@ (8012d30 <mem_malloc+0x1f0>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7ff fcf4 	bl	8012578 <mem_to_ptr>
 8012b90:	4603      	mov	r3, r0
 8012b92:	83fb      	strh	r3, [r7, #30]
 8012b94:	e0b9      	b.n	8012d0a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012b96:	8bfb      	ldrh	r3, [r7, #30]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7ff fcdb 	bl	8012554 <ptr_to_mem>
 8012b9e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	791b      	ldrb	r3, [r3, #4]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f040 80a9 	bne.w	8012cfc <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	881b      	ldrh	r3, [r3, #0]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	8bfb      	ldrh	r3, [r7, #30]
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	f1a3 0208 	sub.w	r2, r3, #8
 8012bb8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	f0c0 809e 	bcc.w	8012cfc <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	881b      	ldrh	r3, [r3, #0]
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	8bfb      	ldrh	r3, [r7, #30]
 8012bc8:	1ad3      	subs	r3, r2, r3
 8012bca:	f1a3 0208 	sub.w	r2, r3, #8
 8012bce:	8bbb      	ldrh	r3, [r7, #28]
 8012bd0:	3314      	adds	r3, #20
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d335      	bcc.n	8012c42 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012bd6:	8bfa      	ldrh	r2, [r7, #30]
 8012bd8:	8bbb      	ldrh	r3, [r7, #28]
 8012bda:	4413      	add	r3, r2
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	3308      	adds	r3, #8
 8012be0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012be2:	8a7b      	ldrh	r3, [r7, #18]
 8012be4:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012be8:	4293      	cmp	r3, r2
 8012bea:	d106      	bne.n	8012bfa <mem_malloc+0xba>
 8012bec:	4b51      	ldr	r3, [pc, #324]	@ (8012d34 <mem_malloc+0x1f4>)
 8012bee:	f240 3287 	movw	r2, #903	@ 0x387
 8012bf2:	4951      	ldr	r1, [pc, #324]	@ (8012d38 <mem_malloc+0x1f8>)
 8012bf4:	4851      	ldr	r0, [pc, #324]	@ (8012d3c <mem_malloc+0x1fc>)
 8012bf6:	f00b f8dd 	bl	801ddb4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012bfa:	8a7b      	ldrh	r3, [r7, #18]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7ff fca9 	bl	8012554 <ptr_to_mem>
 8012c02:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2200      	movs	r2, #0
 8012c08:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	881a      	ldrh	r2, [r3, #0]
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	8bfa      	ldrh	r2, [r7, #30]
 8012c16:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	8a7a      	ldrh	r2, [r7, #18]
 8012c1c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	2201      	movs	r2, #1
 8012c22:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d00b      	beq.n	8012c48 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	881b      	ldrh	r3, [r3, #0]
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7ff fc8d 	bl	8012554 <ptr_to_mem>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	8a7b      	ldrh	r3, [r7, #18]
 8012c3e:	8053      	strh	r3, [r2, #2]
 8012c40:	e002      	b.n	8012c48 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	2201      	movs	r2, #1
 8012c46:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012c48:	4b39      	ldr	r3, [pc, #228]	@ (8012d30 <mem_malloc+0x1f0>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	697a      	ldr	r2, [r7, #20]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d127      	bne.n	8012ca2 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012c52:	4b37      	ldr	r3, [pc, #220]	@ (8012d30 <mem_malloc+0x1f0>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012c58:	e005      	b.n	8012c66 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	881b      	ldrh	r3, [r3, #0]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7ff fc78 	bl	8012554 <ptr_to_mem>
 8012c64:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	791b      	ldrb	r3, [r3, #4]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d004      	beq.n	8012c78 <mem_malloc+0x138>
 8012c6e:	4b34      	ldr	r3, [pc, #208]	@ (8012d40 <mem_malloc+0x200>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	69ba      	ldr	r2, [r7, #24]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d1f0      	bne.n	8012c5a <mem_malloc+0x11a>
          }
          lfree = cur;
 8012c78:	4a2d      	ldr	r2, [pc, #180]	@ (8012d30 <mem_malloc+0x1f0>)
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8012d30 <mem_malloc+0x1f0>)
 8012c80:	681a      	ldr	r2, [r3, #0]
 8012c82:	4b2f      	ldr	r3, [pc, #188]	@ (8012d40 <mem_malloc+0x200>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d00b      	beq.n	8012ca2 <mem_malloc+0x162>
 8012c8a:	4b29      	ldr	r3, [pc, #164]	@ (8012d30 <mem_malloc+0x1f0>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	791b      	ldrb	r3, [r3, #4]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d006      	beq.n	8012ca2 <mem_malloc+0x162>
 8012c94:	4b27      	ldr	r3, [pc, #156]	@ (8012d34 <mem_malloc+0x1f4>)
 8012c96:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8012c9a:	492a      	ldr	r1, [pc, #168]	@ (8012d44 <mem_malloc+0x204>)
 8012c9c:	4827      	ldr	r0, [pc, #156]	@ (8012d3c <mem_malloc+0x1fc>)
 8012c9e:	f00b f889 	bl	801ddb4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012ca2:	4822      	ldr	r0, [pc, #136]	@ (8012d2c <mem_malloc+0x1ec>)
 8012ca4:	f00a fe31 	bl	801d90a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012ca8:	8bba      	ldrh	r2, [r7, #28]
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	4413      	add	r3, r2
 8012cae:	3308      	adds	r3, #8
 8012cb0:	4a23      	ldr	r2, [pc, #140]	@ (8012d40 <mem_malloc+0x200>)
 8012cb2:	6812      	ldr	r2, [r2, #0]
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d906      	bls.n	8012cc6 <mem_malloc+0x186>
 8012cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8012d34 <mem_malloc+0x1f4>)
 8012cba:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8012cbe:	4922      	ldr	r1, [pc, #136]	@ (8012d48 <mem_malloc+0x208>)
 8012cc0:	481e      	ldr	r0, [pc, #120]	@ (8012d3c <mem_malloc+0x1fc>)
 8012cc2:	f00b f877 	bl	801ddb4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	f003 0303 	and.w	r3, r3, #3
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d006      	beq.n	8012cde <mem_malloc+0x19e>
 8012cd0:	4b18      	ldr	r3, [pc, #96]	@ (8012d34 <mem_malloc+0x1f4>)
 8012cd2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012cd6:	491d      	ldr	r1, [pc, #116]	@ (8012d4c <mem_malloc+0x20c>)
 8012cd8:	4818      	ldr	r0, [pc, #96]	@ (8012d3c <mem_malloc+0x1fc>)
 8012cda:	f00b f86b 	bl	801ddb4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	f003 0303 	and.w	r3, r3, #3
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d006      	beq.n	8012cf6 <mem_malloc+0x1b6>
 8012ce8:	4b12      	ldr	r3, [pc, #72]	@ (8012d34 <mem_malloc+0x1f4>)
 8012cea:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8012cee:	4918      	ldr	r1, [pc, #96]	@ (8012d50 <mem_malloc+0x210>)
 8012cf0:	4812      	ldr	r0, [pc, #72]	@ (8012d3c <mem_malloc+0x1fc>)
 8012cf2:	f00b f85f 	bl	801ddb4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	3308      	adds	r3, #8
 8012cfa:	e012      	b.n	8012d22 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8012cfc:	8bfb      	ldrh	r3, [r7, #30]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7ff fc28 	bl	8012554 <ptr_to_mem>
 8012d04:	4603      	mov	r3, r0
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012d0a:	8bfa      	ldrh	r2, [r7, #30]
 8012d0c:	8bb9      	ldrh	r1, [r7, #28]
 8012d0e:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 8012d12:	1a5b      	subs	r3, r3, r1
 8012d14:	429a      	cmp	r2, r3
 8012d16:	f4ff af3e 	bcc.w	8012b96 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012d1a:	4804      	ldr	r0, [pc, #16]	@ (8012d2c <mem_malloc+0x1ec>)
 8012d1c:	f00a fdf5 	bl	801d90a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012d20:	2300      	movs	r3, #0
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3720      	adds	r7, #32
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	2401036c 	.word	0x2401036c
 8012d30:	24010370 	.word	0x24010370
 8012d34:	0801fcdc 	.word	0x0801fcdc
 8012d38:	0801fea0 	.word	0x0801fea0
 8012d3c:	0801fd24 	.word	0x0801fd24
 8012d40:	24010368 	.word	0x24010368
 8012d44:	0801feb4 	.word	0x0801feb4
 8012d48:	0801fed0 	.word	0x0801fed0
 8012d4c:	0801ff00 	.word	0x0801ff00
 8012d50:	0801ff30 	.word	0x0801ff30

08012d54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012d54:	b480      	push	{r7}
 8012d56:	b085      	sub	sp, #20
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	689b      	ldr	r3, [r3, #8]
 8012d60:	2200      	movs	r2, #0
 8012d62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	3303      	adds	r3, #3
 8012d6a:	f023 0303 	bic.w	r3, r3, #3
 8012d6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012d70:	2300      	movs	r3, #0
 8012d72:	60fb      	str	r3, [r7, #12]
 8012d74:	e011      	b.n	8012d9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	689b      	ldr	r3, [r3, #8]
 8012d7a:	681a      	ldr	r2, [r3, #0]
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	689b      	ldr	r3, [r3, #8]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	4413      	add	r3, r2
 8012d92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3301      	adds	r3, #1
 8012d98:	60fb      	str	r3, [r7, #12]
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	885b      	ldrh	r3, [r3, #2]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	4293      	cmp	r3, r2
 8012da4:	dbe7      	blt.n	8012d76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012da6:	bf00      	nop
 8012da8:	bf00      	nop
 8012daa:	3714      	adds	r7, #20
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr

08012db4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012dba:	2300      	movs	r3, #0
 8012dbc:	80fb      	strh	r3, [r7, #6]
 8012dbe:	e009      	b.n	8012dd4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012dc0:	88fb      	ldrh	r3, [r7, #6]
 8012dc2:	4a08      	ldr	r2, [pc, #32]	@ (8012de4 <memp_init+0x30>)
 8012dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7ff ffc3 	bl	8012d54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012dce:	88fb      	ldrh	r3, [r7, #6]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	80fb      	strh	r3, [r7, #6]
 8012dd4:	88fb      	ldrh	r3, [r7, #6]
 8012dd6:	2b0c      	cmp	r3, #12
 8012dd8:	d9f2      	bls.n	8012dc0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012dda:	bf00      	nop
 8012ddc:	bf00      	nop
 8012dde:	3708      	adds	r7, #8
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	080227f4 	.word	0x080227f4

08012de8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b084      	sub	sp, #16
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012df0:	f00a fdb8 	bl	801d964 <sys_arch_protect>
 8012df4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	689b      	ldr	r3, [r3, #8]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d015      	beq.n	8012e30 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	689b      	ldr	r3, [r3, #8]
 8012e08:	68ba      	ldr	r2, [r7, #8]
 8012e0a:	6812      	ldr	r2, [r2, #0]
 8012e0c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	f003 0303 	and.w	r3, r3, #3
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d006      	beq.n	8012e26 <do_memp_malloc_pool+0x3e>
 8012e18:	4b09      	ldr	r3, [pc, #36]	@ (8012e40 <do_memp_malloc_pool+0x58>)
 8012e1a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012e1e:	4909      	ldr	r1, [pc, #36]	@ (8012e44 <do_memp_malloc_pool+0x5c>)
 8012e20:	4809      	ldr	r0, [pc, #36]	@ (8012e48 <do_memp_malloc_pool+0x60>)
 8012e22:	f00a ffc7 	bl	801ddb4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012e26:	68f8      	ldr	r0, [r7, #12]
 8012e28:	f00a fdaa 	bl	801d980 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	e003      	b.n	8012e38 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012e30:	68f8      	ldr	r0, [r7, #12]
 8012e32:	f00a fda5 	bl	801d980 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012e36:	2300      	movs	r3, #0
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3710      	adds	r7, #16
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	0801ff54 	.word	0x0801ff54
 8012e44:	0801ff84 	.word	0x0801ff84
 8012e48:	0801ffa8 	.word	0x0801ffa8

08012e4c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d106      	bne.n	8012e68 <memp_malloc_pool+0x1c>
 8012e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8012e84 <memp_malloc_pool+0x38>)
 8012e5c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8012e60:	4909      	ldr	r1, [pc, #36]	@ (8012e88 <memp_malloc_pool+0x3c>)
 8012e62:	480a      	ldr	r0, [pc, #40]	@ (8012e8c <memp_malloc_pool+0x40>)
 8012e64:	f00a ffa6 	bl	801ddb4 <iprintf>
  if (desc == NULL) {
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d101      	bne.n	8012e72 <memp_malloc_pool+0x26>
    return NULL;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e003      	b.n	8012e7a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f7ff ffb8 	bl	8012de8 <do_memp_malloc_pool>
 8012e78:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3708      	adds	r7, #8
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	0801ff54 	.word	0x0801ff54
 8012e88:	0801ffd0 	.word	0x0801ffd0
 8012e8c:	0801ffa8 	.word	0x0801ffa8

08012e90 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	4603      	mov	r3, r0
 8012e98:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012e9a:	79fb      	ldrb	r3, [r7, #7]
 8012e9c:	2b0c      	cmp	r3, #12
 8012e9e:	d908      	bls.n	8012eb2 <memp_malloc+0x22>
 8012ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8012ecc <memp_malloc+0x3c>)
 8012ea2:	f240 1257 	movw	r2, #343	@ 0x157
 8012ea6:	490a      	ldr	r1, [pc, #40]	@ (8012ed0 <memp_malloc+0x40>)
 8012ea8:	480a      	ldr	r0, [pc, #40]	@ (8012ed4 <memp_malloc+0x44>)
 8012eaa:	f00a ff83 	bl	801ddb4 <iprintf>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	e008      	b.n	8012ec4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012eb2:	79fb      	ldrb	r3, [r7, #7]
 8012eb4:	4a08      	ldr	r2, [pc, #32]	@ (8012ed8 <memp_malloc+0x48>)
 8012eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff ff94 	bl	8012de8 <do_memp_malloc_pool>
 8012ec0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	0801ff54 	.word	0x0801ff54
 8012ed0:	0801ffe4 	.word	0x0801ffe4
 8012ed4:	0801ffa8 	.word	0x0801ffa8
 8012ed8:	080227f4 	.word	0x080227f4

08012edc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	f003 0303 	and.w	r3, r3, #3
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d006      	beq.n	8012efe <do_memp_free_pool+0x22>
 8012ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8012f28 <do_memp_free_pool+0x4c>)
 8012ef2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8012ef6:	490d      	ldr	r1, [pc, #52]	@ (8012f2c <do_memp_free_pool+0x50>)
 8012ef8:	480d      	ldr	r0, [pc, #52]	@ (8012f30 <do_memp_free_pool+0x54>)
 8012efa:	f00a ff5b 	bl	801ddb4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012f02:	f00a fd2f 	bl	801d964 <sys_arch_protect>
 8012f06:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	689b      	ldr	r3, [r3, #8]
 8012f16:	68fa      	ldr	r2, [r7, #12]
 8012f18:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012f1a:	68b8      	ldr	r0, [r7, #8]
 8012f1c:	f00a fd30 	bl	801d980 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012f20:	bf00      	nop
 8012f22:	3710      	adds	r7, #16
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	0801ff54 	.word	0x0801ff54
 8012f2c:	08020004 	.word	0x08020004
 8012f30:	0801ffa8 	.word	0x0801ffa8

08012f34 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d106      	bne.n	8012f52 <memp_free_pool+0x1e>
 8012f44:	4b0a      	ldr	r3, [pc, #40]	@ (8012f70 <memp_free_pool+0x3c>)
 8012f46:	f240 1295 	movw	r2, #405	@ 0x195
 8012f4a:	490a      	ldr	r1, [pc, #40]	@ (8012f74 <memp_free_pool+0x40>)
 8012f4c:	480a      	ldr	r0, [pc, #40]	@ (8012f78 <memp_free_pool+0x44>)
 8012f4e:	f00a ff31 	bl	801ddb4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d007      	beq.n	8012f68 <memp_free_pool+0x34>
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d004      	beq.n	8012f68 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff ffbb 	bl	8012edc <do_memp_free_pool>
 8012f66:	e000      	b.n	8012f6a <memp_free_pool+0x36>
    return;
 8012f68:	bf00      	nop
}
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	0801ff54 	.word	0x0801ff54
 8012f74:	0801ffd0 	.word	0x0801ffd0
 8012f78:	0801ffa8 	.word	0x0801ffa8

08012f7c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	4603      	mov	r3, r0
 8012f84:	6039      	str	r1, [r7, #0]
 8012f86:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012f88:	79fb      	ldrb	r3, [r7, #7]
 8012f8a:	2b0c      	cmp	r3, #12
 8012f8c:	d907      	bls.n	8012f9e <memp_free+0x22>
 8012f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8012fc0 <memp_free+0x44>)
 8012f90:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012f94:	490b      	ldr	r1, [pc, #44]	@ (8012fc4 <memp_free+0x48>)
 8012f96:	480c      	ldr	r0, [pc, #48]	@ (8012fc8 <memp_free+0x4c>)
 8012f98:	f00a ff0c 	bl	801ddb4 <iprintf>
 8012f9c:	e00c      	b.n	8012fb8 <memp_free+0x3c>

  if (mem == NULL) {
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d008      	beq.n	8012fb6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012fa4:	79fb      	ldrb	r3, [r7, #7]
 8012fa6:	4a09      	ldr	r2, [pc, #36]	@ (8012fcc <memp_free+0x50>)
 8012fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fac:	6839      	ldr	r1, [r7, #0]
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7ff ff94 	bl	8012edc <do_memp_free_pool>
 8012fb4:	e000      	b.n	8012fb8 <memp_free+0x3c>
    return;
 8012fb6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012fb8:	3708      	adds	r7, #8
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	0801ff54 	.word	0x0801ff54
 8012fc4:	08020024 	.word	0x08020024
 8012fc8:	0801ffa8 	.word	0x0801ffa8
 8012fcc:	080227f4 	.word	0x080227f4

08012fd0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012fd4:	bf00      	nop
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fdc:	4770      	bx	lr
	...

08012fe0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	607a      	str	r2, [r7, #4]
 8012fec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d108      	bne.n	8013006 <netif_add+0x26>
 8012ff4:	4b57      	ldr	r3, [pc, #348]	@ (8013154 <netif_add+0x174>)
 8012ff6:	f240 1227 	movw	r2, #295	@ 0x127
 8012ffa:	4957      	ldr	r1, [pc, #348]	@ (8013158 <netif_add+0x178>)
 8012ffc:	4857      	ldr	r0, [pc, #348]	@ (801315c <netif_add+0x17c>)
 8012ffe:	f00a fed9 	bl	801ddb4 <iprintf>
 8013002:	2300      	movs	r3, #0
 8013004:	e0a2      	b.n	801314c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013008:	2b00      	cmp	r3, #0
 801300a:	d108      	bne.n	801301e <netif_add+0x3e>
 801300c:	4b51      	ldr	r3, [pc, #324]	@ (8013154 <netif_add+0x174>)
 801300e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013012:	4953      	ldr	r1, [pc, #332]	@ (8013160 <netif_add+0x180>)
 8013014:	4851      	ldr	r0, [pc, #324]	@ (801315c <netif_add+0x17c>)
 8013016:	f00a fecd 	bl	801ddb4 <iprintf>
 801301a:	2300      	movs	r3, #0
 801301c:	e096      	b.n	801314c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d101      	bne.n	8013028 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013024:	4b4f      	ldr	r3, [pc, #316]	@ (8013164 <netif_add+0x184>)
 8013026:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d101      	bne.n	8013032 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801302e:	4b4d      	ldr	r3, [pc, #308]	@ (8013164 <netif_add+0x184>)
 8013030:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d101      	bne.n	801303c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013038:	4b4a      	ldr	r3, [pc, #296]	@ (8013164 <netif_add+0x184>)
 801303a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2200      	movs	r2, #0
 8013040:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2200      	movs	r2, #0
 8013046:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2200      	movs	r2, #0
 801304c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	4a45      	ldr	r2, [pc, #276]	@ (8013168 <netif_add+0x188>)
 8013052:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	2200      	movs	r2, #0
 8013058:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2200      	movs	r2, #0
 801305e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2200      	movs	r2, #0
 8013066:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	6a3a      	ldr	r2, [r7, #32]
 801306c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801306e:	4b3f      	ldr	r3, [pc, #252]	@ (801316c <netif_add+0x18c>)
 8013070:	781a      	ldrb	r2, [r3, #0]
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801307c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	68b9      	ldr	r1, [r7, #8]
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	f000 f913 	bl	80132b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	4798      	blx	r3
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d001      	beq.n	801309a <netif_add+0xba>
    return NULL;
 8013096:	2300      	movs	r3, #0
 8013098:	e058      	b.n	801314c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130a0:	2bff      	cmp	r3, #255	@ 0xff
 80130a2:	d103      	bne.n	80130ac <netif_add+0xcc>
        netif->num = 0;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2200      	movs	r2, #0
 80130a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80130ac:	2300      	movs	r3, #0
 80130ae:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80130b0:	4b2f      	ldr	r3, [pc, #188]	@ (8013170 <netif_add+0x190>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	617b      	str	r3, [r7, #20]
 80130b6:	e02b      	b.n	8013110 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80130b8:	697a      	ldr	r2, [r7, #20]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d106      	bne.n	80130ce <netif_add+0xee>
 80130c0:	4b24      	ldr	r3, [pc, #144]	@ (8013154 <netif_add+0x174>)
 80130c2:	f240 128b 	movw	r2, #395	@ 0x18b
 80130c6:	492b      	ldr	r1, [pc, #172]	@ (8013174 <netif_add+0x194>)
 80130c8:	4824      	ldr	r0, [pc, #144]	@ (801315c <netif_add+0x17c>)
 80130ca:	f00a fe73 	bl	801ddb4 <iprintf>
        num_netifs++;
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	3301      	adds	r3, #1
 80130d2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	2bff      	cmp	r3, #255	@ 0xff
 80130d8:	dd06      	ble.n	80130e8 <netif_add+0x108>
 80130da:	4b1e      	ldr	r3, [pc, #120]	@ (8013154 <netif_add+0x174>)
 80130dc:	f240 128d 	movw	r2, #397	@ 0x18d
 80130e0:	4925      	ldr	r1, [pc, #148]	@ (8013178 <netif_add+0x198>)
 80130e2:	481e      	ldr	r0, [pc, #120]	@ (801315c <netif_add+0x17c>)
 80130e4:	f00a fe66 	bl	801ddb4 <iprintf>
        if (netif2->num == netif->num) {
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130f4:	429a      	cmp	r2, r3
 80130f6:	d108      	bne.n	801310a <netif_add+0x12a>
          netif->num++;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130fe:	3301      	adds	r3, #1
 8013100:	b2da      	uxtb	r2, r3
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013108:	e005      	b.n	8013116 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	617b      	str	r3, [r7, #20]
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d1d0      	bne.n	80130b8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1be      	bne.n	801309a <netif_add+0xba>
  }
  if (netif->num == 254) {
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013122:	2bfe      	cmp	r3, #254	@ 0xfe
 8013124:	d103      	bne.n	801312e <netif_add+0x14e>
    netif_num = 0;
 8013126:	4b11      	ldr	r3, [pc, #68]	@ (801316c <netif_add+0x18c>)
 8013128:	2200      	movs	r2, #0
 801312a:	701a      	strb	r2, [r3, #0]
 801312c:	e006      	b.n	801313c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013134:	3301      	adds	r3, #1
 8013136:	b2da      	uxtb	r2, r3
 8013138:	4b0c      	ldr	r3, [pc, #48]	@ (801316c <netif_add+0x18c>)
 801313a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801313c:	4b0c      	ldr	r3, [pc, #48]	@ (8013170 <netif_add+0x190>)
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013144:	4a0a      	ldr	r2, [pc, #40]	@ (8013170 <netif_add+0x190>)
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801314a:	68fb      	ldr	r3, [r7, #12]
}
 801314c:	4618      	mov	r0, r3
 801314e:	3718      	adds	r7, #24
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	08020040 	.word	0x08020040
 8013158:	080200d4 	.word	0x080200d4
 801315c:	08020090 	.word	0x08020090
 8013160:	080200f0 	.word	0x080200f0
 8013164:	08022868 	.word	0x08022868
 8013168:	0801358b 	.word	0x0801358b
 801316c:	24016e08 	.word	0x24016e08
 8013170:	24016e00 	.word	0x24016e00
 8013174:	08020114 	.word	0x08020114
 8013178:	08020128 	.word	0x08020128

0801317c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013186:	6839      	ldr	r1, [r7, #0]
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f002 fe9b 	bl	8015ec4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801318e:	6839      	ldr	r1, [r7, #0]
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f007 ff33 	bl	801affc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013196:	bf00      	nop
 8013198:	3708      	adds	r7, #8
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
	...

080131a0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b086      	sub	sp, #24
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	60f8      	str	r0, [r7, #12]
 80131a8:	60b9      	str	r1, [r7, #8]
 80131aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <netif_do_set_ipaddr+0x20>
 80131b2:	4b1d      	ldr	r3, [pc, #116]	@ (8013228 <netif_do_set_ipaddr+0x88>)
 80131b4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80131b8:	491c      	ldr	r1, [pc, #112]	@ (801322c <netif_do_set_ipaddr+0x8c>)
 80131ba:	481d      	ldr	r0, [pc, #116]	@ (8013230 <netif_do_set_ipaddr+0x90>)
 80131bc:	f00a fdfa 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <netif_do_set_ipaddr+0x34>
 80131c6:	4b18      	ldr	r3, [pc, #96]	@ (8013228 <netif_do_set_ipaddr+0x88>)
 80131c8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80131cc:	4917      	ldr	r1, [pc, #92]	@ (801322c <netif_do_set_ipaddr+0x8c>)
 80131ce:	4818      	ldr	r0, [pc, #96]	@ (8013230 <netif_do_set_ipaddr+0x90>)
 80131d0:	f00a fdf0 	bl	801ddb4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	3304      	adds	r3, #4
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d01c      	beq.n	801321c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	3304      	adds	r3, #4
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80131f2:	f107 0314 	add.w	r3, r7, #20
 80131f6:	4619      	mov	r1, r3
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff ffbf 	bl	801317c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d002      	beq.n	801320a <netif_do_set_ipaddr+0x6a>
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	e000      	b.n	801320c <netif_do_set_ipaddr+0x6c>
 801320a:	2300      	movs	r3, #0
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013210:	2101      	movs	r1, #1
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f000 f8d2 	bl	80133bc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013218:	2301      	movs	r3, #1
 801321a:	e000      	b.n	801321e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801321c:	2300      	movs	r3, #0
}
 801321e:	4618      	mov	r0, r3
 8013220:	3718      	adds	r7, #24
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	08020040 	.word	0x08020040
 801322c:	08020158 	.word	0x08020158
 8013230:	08020090 	.word	0x08020090

08013234 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013234:	b480      	push	{r7}
 8013236:	b085      	sub	sp, #20
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	3308      	adds	r3, #8
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	429a      	cmp	r2, r3
 801324c:	d00a      	beq.n	8013264 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d002      	beq.n	801325a <netif_do_set_netmask+0x26>
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	e000      	b.n	801325c <netif_do_set_netmask+0x28>
 801325a:	2300      	movs	r3, #0
 801325c:	68fa      	ldr	r2, [r7, #12]
 801325e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013260:	2301      	movs	r3, #1
 8013262:	e000      	b.n	8013266 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	3714      	adds	r7, #20
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr

08013272 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013272:	b480      	push	{r7}
 8013274:	b085      	sub	sp, #20
 8013276:	af00      	add	r7, sp, #0
 8013278:	60f8      	str	r0, [r7, #12]
 801327a:	60b9      	str	r1, [r7, #8]
 801327c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	681a      	ldr	r2, [r3, #0]
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	330c      	adds	r3, #12
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	429a      	cmp	r2, r3
 801328a:	d00a      	beq.n	80132a2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d002      	beq.n	8013298 <netif_do_set_gw+0x26>
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	e000      	b.n	801329a <netif_do_set_gw+0x28>
 8013298:	2300      	movs	r3, #0
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801329e:	2301      	movs	r3, #1
 80132a0:	e000      	b.n	80132a4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3714      	adds	r7, #20
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr

080132b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b088      	sub	sp, #32
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
 80132bc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80132be:	2300      	movs	r3, #0
 80132c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d101      	bne.n	80132d0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80132cc:	4b1c      	ldr	r3, [pc, #112]	@ (8013340 <netif_set_addr+0x90>)
 80132ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80132d6:	4b1a      	ldr	r3, [pc, #104]	@ (8013340 <netif_set_addr+0x90>)
 80132d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d101      	bne.n	80132e4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80132e0:	4b17      	ldr	r3, [pc, #92]	@ (8013340 <netif_set_addr+0x90>)
 80132e2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d003      	beq.n	80132f2 <netif_set_addr+0x42>
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d101      	bne.n	80132f6 <netif_set_addr+0x46>
 80132f2:	2301      	movs	r3, #1
 80132f4:	e000      	b.n	80132f8 <netif_set_addr+0x48>
 80132f6:	2300      	movs	r3, #0
 80132f8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d006      	beq.n	801330e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013300:	f107 0310 	add.w	r3, r7, #16
 8013304:	461a      	mov	r2, r3
 8013306:	68b9      	ldr	r1, [r7, #8]
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	f7ff ff49 	bl	80131a0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801330e:	69fa      	ldr	r2, [r7, #28]
 8013310:	6879      	ldr	r1, [r7, #4]
 8013312:	68f8      	ldr	r0, [r7, #12]
 8013314:	f7ff ff8e 	bl	8013234 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013318:	69ba      	ldr	r2, [r7, #24]
 801331a:	6839      	ldr	r1, [r7, #0]
 801331c:	68f8      	ldr	r0, [r7, #12]
 801331e:	f7ff ffa8 	bl	8013272 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d106      	bne.n	8013336 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013328:	f107 0310 	add.w	r3, r7, #16
 801332c:	461a      	mov	r2, r3
 801332e:	68b9      	ldr	r1, [r7, #8]
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f7ff ff35 	bl	80131a0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013336:	bf00      	nop
 8013338:	3720      	adds	r7, #32
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
 801333e:	bf00      	nop
 8013340:	08022868 	.word	0x08022868

08013344 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013344:	b480      	push	{r7}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801334c:	4a04      	ldr	r2, [pc, #16]	@ (8013360 <netif_set_default+0x1c>)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013352:	bf00      	nop
 8013354:	370c      	adds	r7, #12
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	24016e04 	.word	0x24016e04

08013364 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d107      	bne.n	8013382 <netif_set_up+0x1e>
 8013372:	4b0f      	ldr	r3, [pc, #60]	@ (80133b0 <netif_set_up+0x4c>)
 8013374:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013378:	490e      	ldr	r1, [pc, #56]	@ (80133b4 <netif_set_up+0x50>)
 801337a:	480f      	ldr	r0, [pc, #60]	@ (80133b8 <netif_set_up+0x54>)
 801337c:	f00a fd1a 	bl	801ddb4 <iprintf>
 8013380:	e013      	b.n	80133aa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013388:	f003 0301 	and.w	r3, r3, #1
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10c      	bne.n	80133aa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013396:	f043 0301 	orr.w	r3, r3, #1
 801339a:	b2da      	uxtb	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80133a2:	2103      	movs	r1, #3
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f000 f809 	bl	80133bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	08020040 	.word	0x08020040
 80133b4:	080201c8 	.word	0x080201c8
 80133b8:	08020090 	.word	0x08020090

080133bc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	460b      	mov	r3, r1
 80133c6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d106      	bne.n	80133dc <netif_issue_reports+0x20>
 80133ce:	4b18      	ldr	r3, [pc, #96]	@ (8013430 <netif_issue_reports+0x74>)
 80133d0:	f240 326d 	movw	r2, #877	@ 0x36d
 80133d4:	4917      	ldr	r1, [pc, #92]	@ (8013434 <netif_issue_reports+0x78>)
 80133d6:	4818      	ldr	r0, [pc, #96]	@ (8013438 <netif_issue_reports+0x7c>)
 80133d8:	f00a fcec 	bl	801ddb4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80133e2:	f003 0304 	and.w	r3, r3, #4
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d01e      	beq.n	8013428 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80133f0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d017      	beq.n	8013428 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80133f8:	78fb      	ldrb	r3, [r7, #3]
 80133fa:	f003 0301 	and.w	r3, r3, #1
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d013      	beq.n	801342a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	3304      	adds	r3, #4
 8013406:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013408:	2b00      	cmp	r3, #0
 801340a:	d00e      	beq.n	801342a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013412:	f003 0308 	and.w	r3, r3, #8
 8013416:	2b00      	cmp	r3, #0
 8013418:	d007      	beq.n	801342a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	3304      	adds	r3, #4
 801341e:	4619      	mov	r1, r3
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f008 fd55 	bl	801bed0 <etharp_request>
 8013426:	e000      	b.n	801342a <netif_issue_reports+0x6e>
    return;
 8013428:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801342a:	3708      	adds	r7, #8
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	08020040 	.word	0x08020040
 8013434:	080201e4 	.word	0x080201e4
 8013438:	08020090 	.word	0x08020090

0801343c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d107      	bne.n	801345a <netif_set_down+0x1e>
 801344a:	4b12      	ldr	r3, [pc, #72]	@ (8013494 <netif_set_down+0x58>)
 801344c:	f240 329b 	movw	r2, #923	@ 0x39b
 8013450:	4911      	ldr	r1, [pc, #68]	@ (8013498 <netif_set_down+0x5c>)
 8013452:	4812      	ldr	r0, [pc, #72]	@ (801349c <netif_set_down+0x60>)
 8013454:	f00a fcae 	bl	801ddb4 <iprintf>
 8013458:	e019      	b.n	801348e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	2b00      	cmp	r3, #0
 8013466:	d012      	beq.n	801348e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801346e:	f023 0301 	bic.w	r3, r3, #1
 8013472:	b2da      	uxtb	r2, r3
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013480:	f003 0308 	and.w	r3, r3, #8
 8013484:	2b00      	cmp	r3, #0
 8013486:	d002      	beq.n	801348e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f008 f8df 	bl	801b64c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	08020040 	.word	0x08020040
 8013498:	08020208 	.word	0x08020208
 801349c:	08020090 	.word	0x08020090

080134a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d107      	bne.n	80134be <netif_set_link_up+0x1e>
 80134ae:	4b13      	ldr	r3, [pc, #76]	@ (80134fc <netif_set_link_up+0x5c>)
 80134b0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80134b4:	4912      	ldr	r1, [pc, #72]	@ (8013500 <netif_set_link_up+0x60>)
 80134b6:	4813      	ldr	r0, [pc, #76]	@ (8013504 <netif_set_link_up+0x64>)
 80134b8:	f00a fc7c 	bl	801ddb4 <iprintf>
 80134bc:	e01b      	b.n	80134f6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134c4:	f003 0304 	and.w	r3, r3, #4
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d114      	bne.n	80134f6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80134d2:	f043 0304 	orr.w	r3, r3, #4
 80134d6:	b2da      	uxtb	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80134de:	2103      	movs	r1, #3
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f7ff ff6b 	bl	80133bc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	69db      	ldr	r3, [r3, #28]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d003      	beq.n	80134f6 <netif_set_link_up+0x56>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	69db      	ldr	r3, [r3, #28]
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80134f6:	3708      	adds	r7, #8
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	08020040 	.word	0x08020040
 8013500:	08020228 	.word	0x08020228
 8013504:	08020090 	.word	0x08020090

08013508 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d107      	bne.n	8013526 <netif_set_link_down+0x1e>
 8013516:	4b11      	ldr	r3, [pc, #68]	@ (801355c <netif_set_link_down+0x54>)
 8013518:	f240 4206 	movw	r2, #1030	@ 0x406
 801351c:	4910      	ldr	r1, [pc, #64]	@ (8013560 <netif_set_link_down+0x58>)
 801351e:	4811      	ldr	r0, [pc, #68]	@ (8013564 <netif_set_link_down+0x5c>)
 8013520:	f00a fc48 	bl	801ddb4 <iprintf>
 8013524:	e017      	b.n	8013556 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801352c:	f003 0304 	and.w	r3, r3, #4
 8013530:	2b00      	cmp	r3, #0
 8013532:	d010      	beq.n	8013556 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801353a:	f023 0304 	bic.w	r3, r3, #4
 801353e:	b2da      	uxtb	r2, r3
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	69db      	ldr	r3, [r3, #28]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d003      	beq.n	8013556 <netif_set_link_down+0x4e>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	69db      	ldr	r3, [r3, #28]
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	08020040 	.word	0x08020040
 8013560:	0802024c 	.word	0x0802024c
 8013564:	08020090 	.word	0x08020090

08013568 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d002      	beq.n	801357e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	683a      	ldr	r2, [r7, #0]
 801357c:	61da      	str	r2, [r3, #28]
  }
}
 801357e:	bf00      	nop
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr

0801358a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801358a:	b480      	push	{r7}
 801358c:	b085      	sub	sp, #20
 801358e:	af00      	add	r7, sp, #0
 8013590:	60f8      	str	r0, [r7, #12]
 8013592:	60b9      	str	r1, [r7, #8]
 8013594:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013596:	f06f 030b 	mvn.w	r3, #11
}
 801359a:	4618      	mov	r0, r3
 801359c:	3714      	adds	r7, #20
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr
	...

080135a8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80135a8:	b480      	push	{r7}
 80135aa:	b085      	sub	sp, #20
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	4603      	mov	r3, r0
 80135b0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80135b2:	79fb      	ldrb	r3, [r7, #7]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d013      	beq.n	80135e0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80135b8:	4b0d      	ldr	r3, [pc, #52]	@ (80135f0 <netif_get_by_index+0x48>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	60fb      	str	r3, [r7, #12]
 80135be:	e00c      	b.n	80135da <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80135c6:	3301      	adds	r3, #1
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	79fa      	ldrb	r2, [r7, #7]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d101      	bne.n	80135d4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	e006      	b.n	80135e2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	60fb      	str	r3, [r7, #12]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1ef      	bne.n	80135c0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80135e0:	2300      	movs	r3, #0
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3714      	adds	r7, #20
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop
 80135f0:	24016e00 	.word	0x24016e00

080135f4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80135fa:	f00a f9b3 	bl	801d964 <sys_arch_protect>
 80135fe:	6038      	str	r0, [r7, #0]
 8013600:	4b0d      	ldr	r3, [pc, #52]	@ (8013638 <pbuf_free_ooseq+0x44>)
 8013602:	2200      	movs	r2, #0
 8013604:	701a      	strb	r2, [r3, #0]
 8013606:	6838      	ldr	r0, [r7, #0]
 8013608:	f00a f9ba 	bl	801d980 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801360c:	4b0b      	ldr	r3, [pc, #44]	@ (801363c <pbuf_free_ooseq+0x48>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	607b      	str	r3, [r7, #4]
 8013612:	e00a      	b.n	801362a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013618:	2b00      	cmp	r3, #0
 801361a:	d003      	beq.n	8013624 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801361c:	6878      	ldr	r0, [r7, #4]
 801361e:	f002 fc8f 	bl	8015f40 <tcp_free_ooseq>
      return;
 8013622:	e005      	b.n	8013630 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	68db      	ldr	r3, [r3, #12]
 8013628:	607b      	str	r3, [r7, #4]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d1f1      	bne.n	8013614 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013630:	3708      	adds	r7, #8
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	24016e09 	.word	0x24016e09
 801363c:	24016e18 	.word	0x24016e18

08013640 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013648:	f7ff ffd4 	bl	80135f4 <pbuf_free_ooseq>
}
 801364c:	bf00      	nop
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801365a:	f00a f983 	bl	801d964 <sys_arch_protect>
 801365e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013660:	4b0f      	ldr	r3, [pc, #60]	@ (80136a0 <pbuf_pool_is_empty+0x4c>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013666:	4b0e      	ldr	r3, [pc, #56]	@ (80136a0 <pbuf_pool_is_empty+0x4c>)
 8013668:	2201      	movs	r2, #1
 801366a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f00a f987 	bl	801d980 <sys_arch_unprotect>

  if (!queued) {
 8013672:	78fb      	ldrb	r3, [r7, #3]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10f      	bne.n	8013698 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013678:	2100      	movs	r1, #0
 801367a:	480a      	ldr	r0, [pc, #40]	@ (80136a4 <pbuf_pool_is_empty+0x50>)
 801367c:	f7fe fdc8 	bl	8012210 <tcpip_try_callback>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d008      	beq.n	8013698 <pbuf_pool_is_empty+0x44>
 8013686:	f00a f96d 	bl	801d964 <sys_arch_protect>
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	4b04      	ldr	r3, [pc, #16]	@ (80136a0 <pbuf_pool_is_empty+0x4c>)
 801368e:	2200      	movs	r2, #0
 8013690:	701a      	strb	r2, [r3, #0]
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f00a f974 	bl	801d980 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013698:	bf00      	nop
 801369a:	3708      	adds	r7, #8
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	24016e09 	.word	0x24016e09
 80136a4:	08013641 	.word	0x08013641

080136a8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b085      	sub	sp, #20
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	4611      	mov	r1, r2
 80136b4:	461a      	mov	r2, r3
 80136b6:	460b      	mov	r3, r1
 80136b8:	80fb      	strh	r3, [r7, #6]
 80136ba:	4613      	mov	r3, r2
 80136bc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2200      	movs	r2, #0
 80136c2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	68ba      	ldr	r2, [r7, #8]
 80136c8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	88fa      	ldrh	r2, [r7, #6]
 80136ce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	88ba      	ldrh	r2, [r7, #4]
 80136d4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80136d6:	8b3b      	ldrh	r3, [r7, #24]
 80136d8:	b2da      	uxtb	r2, r3
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	7f3a      	ldrb	r2, [r7, #28]
 80136e2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2201      	movs	r2, #1
 80136e8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2200      	movs	r2, #0
 80136ee:	73da      	strb	r2, [r3, #15]
}
 80136f0:	bf00      	nop
 80136f2:	3714      	adds	r7, #20
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr

080136fc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b08c      	sub	sp, #48	@ 0x30
 8013700:	af02      	add	r7, sp, #8
 8013702:	4603      	mov	r3, r0
 8013704:	71fb      	strb	r3, [r7, #7]
 8013706:	460b      	mov	r3, r1
 8013708:	80bb      	strh	r3, [r7, #4]
 801370a:	4613      	mov	r3, r2
 801370c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801370e:	79fb      	ldrb	r3, [r7, #7]
 8013710:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013712:	887b      	ldrh	r3, [r7, #2]
 8013714:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013718:	f000 8082 	beq.w	8013820 <pbuf_alloc+0x124>
 801371c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013720:	f300 80ca 	bgt.w	80138b8 <pbuf_alloc+0x1bc>
 8013724:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013728:	d010      	beq.n	801374c <pbuf_alloc+0x50>
 801372a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801372e:	f300 80c3 	bgt.w	80138b8 <pbuf_alloc+0x1bc>
 8013732:	2b01      	cmp	r3, #1
 8013734:	d002      	beq.n	801373c <pbuf_alloc+0x40>
 8013736:	2b41      	cmp	r3, #65	@ 0x41
 8013738:	f040 80be 	bne.w	80138b8 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801373c:	887a      	ldrh	r2, [r7, #2]
 801373e:	88bb      	ldrh	r3, [r7, #4]
 8013740:	4619      	mov	r1, r3
 8013742:	2000      	movs	r0, #0
 8013744:	f000 f8d4 	bl	80138f0 <pbuf_alloc_reference>
 8013748:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801374a:	e0bf      	b.n	80138cc <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801374c:	2300      	movs	r3, #0
 801374e:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013750:	2300      	movs	r3, #0
 8013752:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013754:	88bb      	ldrh	r3, [r7, #4]
 8013756:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013758:	200c      	movs	r0, #12
 801375a:	f7ff fb99 	bl	8012e90 <memp_malloc>
 801375e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d109      	bne.n	801377a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8013766:	f7ff ff75 	bl	8013654 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8013770:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013772:	f000 fadd 	bl	8013d30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013776:	2300      	movs	r3, #0
 8013778:	e0a9      	b.n	80138ce <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801377a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801377c:	3303      	adds	r3, #3
 801377e:	b29b      	uxth	r3, r3
 8013780:	f023 0303 	bic.w	r3, r3, #3
 8013784:	b29a      	uxth	r2, r3
 8013786:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 801378a:	1a9b      	subs	r3, r3, r2
 801378c:	b29b      	uxth	r3, r3
 801378e:	8b7a      	ldrh	r2, [r7, #26]
 8013790:	4293      	cmp	r3, r2
 8013792:	bf28      	it	cs
 8013794:	4613      	movcs	r3, r2
 8013796:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013798:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801379a:	3310      	adds	r3, #16
 801379c:	693a      	ldr	r2, [r7, #16]
 801379e:	4413      	add	r3, r2
 80137a0:	3303      	adds	r3, #3
 80137a2:	f023 0303 	bic.w	r3, r3, #3
 80137a6:	4618      	mov	r0, r3
 80137a8:	89f9      	ldrh	r1, [r7, #14]
 80137aa:	8b7a      	ldrh	r2, [r7, #26]
 80137ac:	2300      	movs	r3, #0
 80137ae:	9301      	str	r3, [sp, #4]
 80137b0:	887b      	ldrh	r3, [r7, #2]
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	460b      	mov	r3, r1
 80137b6:	4601      	mov	r1, r0
 80137b8:	6938      	ldr	r0, [r7, #16]
 80137ba:	f7ff ff75 	bl	80136a8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	f003 0303 	and.w	r3, r3, #3
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d006      	beq.n	80137d8 <pbuf_alloc+0xdc>
 80137ca:	4b43      	ldr	r3, [pc, #268]	@ (80138d8 <pbuf_alloc+0x1dc>)
 80137cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80137d0:	4942      	ldr	r1, [pc, #264]	@ (80138dc <pbuf_alloc+0x1e0>)
 80137d2:	4843      	ldr	r0, [pc, #268]	@ (80138e0 <pbuf_alloc+0x1e4>)
 80137d4:	f00a faee 	bl	801ddb4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80137d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80137da:	3303      	adds	r3, #3
 80137dc:	f023 0303 	bic.w	r3, r3, #3
 80137e0:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d106      	bne.n	80137f6 <pbuf_alloc+0xfa>
 80137e8:	4b3b      	ldr	r3, [pc, #236]	@ (80138d8 <pbuf_alloc+0x1dc>)
 80137ea:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80137ee:	493d      	ldr	r1, [pc, #244]	@ (80138e4 <pbuf_alloc+0x1e8>)
 80137f0:	483b      	ldr	r0, [pc, #236]	@ (80138e0 <pbuf_alloc+0x1e4>)
 80137f2:	f00a fadf 	bl	801ddb4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80137f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d102      	bne.n	8013802 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8013800:	e002      	b.n	8013808 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	693a      	ldr	r2, [r7, #16]
 8013806:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801380c:	8b7a      	ldrh	r2, [r7, #26]
 801380e:	89fb      	ldrh	r3, [r7, #14]
 8013810:	1ad3      	subs	r3, r2, r3
 8013812:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013814:	2300      	movs	r3, #0
 8013816:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013818:	8b7b      	ldrh	r3, [r7, #26]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d19c      	bne.n	8013758 <pbuf_alloc+0x5c>
      break;
 801381e:	e055      	b.n	80138cc <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013820:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013822:	3303      	adds	r3, #3
 8013824:	b29b      	uxth	r3, r3
 8013826:	f023 0303 	bic.w	r3, r3, #3
 801382a:	b29a      	uxth	r2, r3
 801382c:	88bb      	ldrh	r3, [r7, #4]
 801382e:	3303      	adds	r3, #3
 8013830:	b29b      	uxth	r3, r3
 8013832:	f023 0303 	bic.w	r3, r3, #3
 8013836:	b29b      	uxth	r3, r3
 8013838:	4413      	add	r3, r2
 801383a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801383c:	8b3b      	ldrh	r3, [r7, #24]
 801383e:	3310      	adds	r3, #16
 8013840:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013842:	8b3a      	ldrh	r2, [r7, #24]
 8013844:	88bb      	ldrh	r3, [r7, #4]
 8013846:	3303      	adds	r3, #3
 8013848:	f023 0303 	bic.w	r3, r3, #3
 801384c:	429a      	cmp	r2, r3
 801384e:	d306      	bcc.n	801385e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013850:	8afa      	ldrh	r2, [r7, #22]
 8013852:	88bb      	ldrh	r3, [r7, #4]
 8013854:	3303      	adds	r3, #3
 8013856:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801385a:	429a      	cmp	r2, r3
 801385c:	d201      	bcs.n	8013862 <pbuf_alloc+0x166>
        return NULL;
 801385e:	2300      	movs	r3, #0
 8013860:	e035      	b.n	80138ce <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013862:	8afb      	ldrh	r3, [r7, #22]
 8013864:	4618      	mov	r0, r3
 8013866:	f7ff f96b 	bl	8012b40 <mem_malloc>
 801386a:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386e:	2b00      	cmp	r3, #0
 8013870:	d101      	bne.n	8013876 <pbuf_alloc+0x17a>
        return NULL;
 8013872:	2300      	movs	r3, #0
 8013874:	e02b      	b.n	80138ce <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013876:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013878:	3310      	adds	r3, #16
 801387a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801387c:	4413      	add	r3, r2
 801387e:	3303      	adds	r3, #3
 8013880:	f023 0303 	bic.w	r3, r3, #3
 8013884:	4618      	mov	r0, r3
 8013886:	88b9      	ldrh	r1, [r7, #4]
 8013888:	88ba      	ldrh	r2, [r7, #4]
 801388a:	2300      	movs	r3, #0
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	887b      	ldrh	r3, [r7, #2]
 8013890:	9300      	str	r3, [sp, #0]
 8013892:	460b      	mov	r3, r1
 8013894:	4601      	mov	r1, r0
 8013896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013898:	f7ff ff06 	bl	80136a8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	f003 0303 	and.w	r3, r3, #3
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d010      	beq.n	80138ca <pbuf_alloc+0x1ce>
 80138a8:	4b0b      	ldr	r3, [pc, #44]	@ (80138d8 <pbuf_alloc+0x1dc>)
 80138aa:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80138ae:	490e      	ldr	r1, [pc, #56]	@ (80138e8 <pbuf_alloc+0x1ec>)
 80138b0:	480b      	ldr	r0, [pc, #44]	@ (80138e0 <pbuf_alloc+0x1e4>)
 80138b2:	f00a fa7f 	bl	801ddb4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80138b6:	e008      	b.n	80138ca <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80138b8:	4b07      	ldr	r3, [pc, #28]	@ (80138d8 <pbuf_alloc+0x1dc>)
 80138ba:	f240 1227 	movw	r2, #295	@ 0x127
 80138be:	490b      	ldr	r1, [pc, #44]	@ (80138ec <pbuf_alloc+0x1f0>)
 80138c0:	4807      	ldr	r0, [pc, #28]	@ (80138e0 <pbuf_alloc+0x1e4>)
 80138c2:	f00a fa77 	bl	801ddb4 <iprintf>
      return NULL;
 80138c6:	2300      	movs	r3, #0
 80138c8:	e001      	b.n	80138ce <pbuf_alloc+0x1d2>
      break;
 80138ca:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80138cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3728      	adds	r7, #40	@ 0x28
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	08020270 	.word	0x08020270
 80138dc:	080202a0 	.word	0x080202a0
 80138e0:	080202d0 	.word	0x080202d0
 80138e4:	080202f8 	.word	0x080202f8
 80138e8:	0802032c 	.word	0x0802032c
 80138ec:	08020358 	.word	0x08020358

080138f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af02      	add	r7, sp, #8
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	460b      	mov	r3, r1
 80138fa:	807b      	strh	r3, [r7, #2]
 80138fc:	4613      	mov	r3, r2
 80138fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013900:	883b      	ldrh	r3, [r7, #0]
 8013902:	2b41      	cmp	r3, #65	@ 0x41
 8013904:	d009      	beq.n	801391a <pbuf_alloc_reference+0x2a>
 8013906:	883b      	ldrh	r3, [r7, #0]
 8013908:	2b01      	cmp	r3, #1
 801390a:	d006      	beq.n	801391a <pbuf_alloc_reference+0x2a>
 801390c:	4b0f      	ldr	r3, [pc, #60]	@ (801394c <pbuf_alloc_reference+0x5c>)
 801390e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013912:	490f      	ldr	r1, [pc, #60]	@ (8013950 <pbuf_alloc_reference+0x60>)
 8013914:	480f      	ldr	r0, [pc, #60]	@ (8013954 <pbuf_alloc_reference+0x64>)
 8013916:	f00a fa4d 	bl	801ddb4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801391a:	200b      	movs	r0, #11
 801391c:	f7ff fab8 	bl	8012e90 <memp_malloc>
 8013920:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d101      	bne.n	801392c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013928:	2300      	movs	r3, #0
 801392a:	e00b      	b.n	8013944 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801392c:	8879      	ldrh	r1, [r7, #2]
 801392e:	887a      	ldrh	r2, [r7, #2]
 8013930:	2300      	movs	r3, #0
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	883b      	ldrh	r3, [r7, #0]
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	460b      	mov	r3, r1
 801393a:	6879      	ldr	r1, [r7, #4]
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	f7ff feb3 	bl	80136a8 <pbuf_init_alloced_pbuf>
  return p;
 8013942:	68fb      	ldr	r3, [r7, #12]
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	08020270 	.word	0x08020270
 8013950:	08020374 	.word	0x08020374
 8013954:	080202d0 	.word	0x080202d0

08013958 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af02      	add	r7, sp, #8
 801395e:	607b      	str	r3, [r7, #4]
 8013960:	4603      	mov	r3, r0
 8013962:	73fb      	strb	r3, [r7, #15]
 8013964:	460b      	mov	r3, r1
 8013966:	81bb      	strh	r3, [r7, #12]
 8013968:	4613      	mov	r3, r2
 801396a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801396c:	7bfb      	ldrb	r3, [r7, #15]
 801396e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013970:	8a7b      	ldrh	r3, [r7, #18]
 8013972:	3303      	adds	r3, #3
 8013974:	f023 0203 	bic.w	r2, r3, #3
 8013978:	89bb      	ldrh	r3, [r7, #12]
 801397a:	441a      	add	r2, r3
 801397c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801397e:	429a      	cmp	r2, r3
 8013980:	d901      	bls.n	8013986 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013982:	2300      	movs	r3, #0
 8013984:	e018      	b.n	80139b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013986:	6a3b      	ldr	r3, [r7, #32]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d007      	beq.n	801399c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801398c:	8a7b      	ldrh	r3, [r7, #18]
 801398e:	3303      	adds	r3, #3
 8013990:	f023 0303 	bic.w	r3, r3, #3
 8013994:	6a3a      	ldr	r2, [r7, #32]
 8013996:	4413      	add	r3, r2
 8013998:	617b      	str	r3, [r7, #20]
 801399a:	e001      	b.n	80139a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801399c:	2300      	movs	r3, #0
 801399e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	89b9      	ldrh	r1, [r7, #12]
 80139a4:	89ba      	ldrh	r2, [r7, #12]
 80139a6:	2302      	movs	r3, #2
 80139a8:	9301      	str	r3, [sp, #4]
 80139aa:	897b      	ldrh	r3, [r7, #10]
 80139ac:	9300      	str	r3, [sp, #0]
 80139ae:	460b      	mov	r3, r1
 80139b0:	6979      	ldr	r1, [r7, #20]
 80139b2:	f7ff fe79 	bl	80136a8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80139b6:	687b      	ldr	r3, [r7, #4]
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3718      	adds	r7, #24
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	460b      	mov	r3, r1
 80139ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <pbuf_realloc+0x20>
 80139d2:	4b3a      	ldr	r3, [pc, #232]	@ (8013abc <pbuf_realloc+0xfc>)
 80139d4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80139d8:	4939      	ldr	r1, [pc, #228]	@ (8013ac0 <pbuf_realloc+0x100>)
 80139da:	483a      	ldr	r0, [pc, #232]	@ (8013ac4 <pbuf_realloc+0x104>)
 80139dc:	f00a f9ea 	bl	801ddb4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	891b      	ldrh	r3, [r3, #8]
 80139e4:	887a      	ldrh	r2, [r7, #2]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d263      	bcs.n	8013ab2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	891a      	ldrh	r2, [r3, #8]
 80139ee:	887b      	ldrh	r3, [r7, #2]
 80139f0:	1ad3      	subs	r3, r2, r3
 80139f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80139f4:	887b      	ldrh	r3, [r7, #2]
 80139f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80139fc:	e018      	b.n	8013a30 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	895b      	ldrh	r3, [r3, #10]
 8013a02:	897a      	ldrh	r2, [r7, #10]
 8013a04:	1ad3      	subs	r3, r2, r3
 8013a06:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	891a      	ldrh	r2, [r3, #8]
 8013a0c:	893b      	ldrh	r3, [r7, #8]
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	b29a      	uxth	r2, r3
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d106      	bne.n	8013a30 <pbuf_realloc+0x70>
 8013a22:	4b26      	ldr	r3, [pc, #152]	@ (8013abc <pbuf_realloc+0xfc>)
 8013a24:	f240 12af 	movw	r2, #431	@ 0x1af
 8013a28:	4927      	ldr	r1, [pc, #156]	@ (8013ac8 <pbuf_realloc+0x108>)
 8013a2a:	4826      	ldr	r0, [pc, #152]	@ (8013ac4 <pbuf_realloc+0x104>)
 8013a2c:	f00a f9c2 	bl	801ddb4 <iprintf>
  while (rem_len > q->len) {
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	895b      	ldrh	r3, [r3, #10]
 8013a34:	897a      	ldrh	r2, [r7, #10]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d8e1      	bhi.n	80139fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	7b1b      	ldrb	r3, [r3, #12]
 8013a3e:	f003 030f 	and.w	r3, r3, #15
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d121      	bne.n	8013a8a <pbuf_realloc+0xca>
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	895b      	ldrh	r3, [r3, #10]
 8013a4a:	897a      	ldrh	r2, [r7, #10]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d01c      	beq.n	8013a8a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	7b5b      	ldrb	r3, [r3, #13]
 8013a54:	f003 0302 	and.w	r3, r3, #2
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d116      	bne.n	8013a8a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	685a      	ldr	r2, [r3, #4]
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	897b      	ldrh	r3, [r7, #10]
 8013a68:	4413      	add	r3, r2
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	4619      	mov	r1, r3
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	f7fe ff56 	bl	8012920 <mem_trim>
 8013a74:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d106      	bne.n	8013a8a <pbuf_realloc+0xca>
 8013a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8013abc <pbuf_realloc+0xfc>)
 8013a7e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013a82:	4912      	ldr	r1, [pc, #72]	@ (8013acc <pbuf_realloc+0x10c>)
 8013a84:	480f      	ldr	r0, [pc, #60]	@ (8013ac4 <pbuf_realloc+0x104>)
 8013a86:	f00a f995 	bl	801ddb4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	897a      	ldrh	r2, [r7, #10]
 8013a8e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	895a      	ldrh	r2, [r3, #10]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d004      	beq.n	8013aaa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f000 f943 	bl	8013d30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2200      	movs	r2, #0
 8013aae:	601a      	str	r2, [r3, #0]
 8013ab0:	e000      	b.n	8013ab4 <pbuf_realloc+0xf4>
    return;
 8013ab2:	bf00      	nop

}
 8013ab4:	3710      	adds	r7, #16
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	08020270 	.word	0x08020270
 8013ac0:	08020388 	.word	0x08020388
 8013ac4:	080202d0 	.word	0x080202d0
 8013ac8:	080203a0 	.word	0x080203a0
 8013acc:	080203b8 	.word	0x080203b8

08013ad0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	4613      	mov	r3, r2
 8013adc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d106      	bne.n	8013af2 <pbuf_add_header_impl+0x22>
 8013ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8013b94 <pbuf_add_header_impl+0xc4>)
 8013ae6:	f240 12df 	movw	r2, #479	@ 0x1df
 8013aea:	492b      	ldr	r1, [pc, #172]	@ (8013b98 <pbuf_add_header_impl+0xc8>)
 8013aec:	482b      	ldr	r0, [pc, #172]	@ (8013b9c <pbuf_add_header_impl+0xcc>)
 8013aee:	f00a f961 	bl	801ddb4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d003      	beq.n	8013b00 <pbuf_add_header_impl+0x30>
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013afe:	d301      	bcc.n	8013b04 <pbuf_add_header_impl+0x34>
    return 1;
 8013b00:	2301      	movs	r3, #1
 8013b02:	e043      	b.n	8013b8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d101      	bne.n	8013b0e <pbuf_add_header_impl+0x3e>
    return 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	e03e      	b.n	8013b8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	891a      	ldrh	r2, [r3, #8]
 8013b16:	8a7b      	ldrh	r3, [r7, #18]
 8013b18:	4413      	add	r3, r2
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	8a7a      	ldrh	r2, [r7, #18]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d901      	bls.n	8013b26 <pbuf_add_header_impl+0x56>
    return 1;
 8013b22:	2301      	movs	r3, #1
 8013b24:	e032      	b.n	8013b8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	7b1b      	ldrb	r3, [r3, #12]
 8013b2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013b2c:	8a3b      	ldrh	r3, [r7, #16]
 8013b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d00c      	beq.n	8013b50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	685a      	ldr	r2, [r3, #4]
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	425b      	negs	r3, r3
 8013b3e:	4413      	add	r3, r2
 8013b40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	3310      	adds	r3, #16
 8013b46:	697a      	ldr	r2, [r7, #20]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d20d      	bcs.n	8013b68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	e01d      	b.n	8013b8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013b50:	79fb      	ldrb	r3, [r7, #7]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d006      	beq.n	8013b64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	685a      	ldr	r2, [r3, #4]
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	425b      	negs	r3, r3
 8013b5e:	4413      	add	r3, r2
 8013b60:	617b      	str	r3, [r7, #20]
 8013b62:	e001      	b.n	8013b68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013b64:	2301      	movs	r3, #1
 8013b66:	e011      	b.n	8013b8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	697a      	ldr	r2, [r7, #20]
 8013b6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	895a      	ldrh	r2, [r3, #10]
 8013b72:	8a7b      	ldrh	r3, [r7, #18]
 8013b74:	4413      	add	r3, r2
 8013b76:	b29a      	uxth	r2, r3
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	891a      	ldrh	r2, [r3, #8]
 8013b80:	8a7b      	ldrh	r3, [r7, #18]
 8013b82:	4413      	add	r3, r2
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	811a      	strh	r2, [r3, #8]


  return 0;
 8013b8a:	2300      	movs	r3, #0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3718      	adds	r7, #24
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	08020270 	.word	0x08020270
 8013b98:	080203d4 	.word	0x080203d4
 8013b9c:	080202d0 	.word	0x080202d0

08013ba0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013baa:	2200      	movs	r2, #0
 8013bac:	6839      	ldr	r1, [r7, #0]
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7ff ff8e 	bl	8013ad0 <pbuf_add_header_impl>
 8013bb4:	4603      	mov	r3, r0
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3708      	adds	r7, #8
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
	...

08013bc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d106      	bne.n	8013bde <pbuf_remove_header+0x1e>
 8013bd0:	4b20      	ldr	r3, [pc, #128]	@ (8013c54 <pbuf_remove_header+0x94>)
 8013bd2:	f240 224b 	movw	r2, #587	@ 0x24b
 8013bd6:	4920      	ldr	r1, [pc, #128]	@ (8013c58 <pbuf_remove_header+0x98>)
 8013bd8:	4820      	ldr	r0, [pc, #128]	@ (8013c5c <pbuf_remove_header+0x9c>)
 8013bda:	f00a f8eb 	bl	801ddb4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d003      	beq.n	8013bec <pbuf_remove_header+0x2c>
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013bea:	d301      	bcc.n	8013bf0 <pbuf_remove_header+0x30>
    return 1;
 8013bec:	2301      	movs	r3, #1
 8013bee:	e02c      	b.n	8013c4a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d101      	bne.n	8013bfa <pbuf_remove_header+0x3a>
    return 0;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	e027      	b.n	8013c4a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	895b      	ldrh	r3, [r3, #10]
 8013c02:	89fa      	ldrh	r2, [r7, #14]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d908      	bls.n	8013c1a <pbuf_remove_header+0x5a>
 8013c08:	4b12      	ldr	r3, [pc, #72]	@ (8013c54 <pbuf_remove_header+0x94>)
 8013c0a:	f240 2255 	movw	r2, #597	@ 0x255
 8013c0e:	4914      	ldr	r1, [pc, #80]	@ (8013c60 <pbuf_remove_header+0xa0>)
 8013c10:	4812      	ldr	r0, [pc, #72]	@ (8013c5c <pbuf_remove_header+0x9c>)
 8013c12:	f00a f8cf 	bl	801ddb4 <iprintf>
 8013c16:	2301      	movs	r3, #1
 8013c18:	e017      	b.n	8013c4a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	685a      	ldr	r2, [r3, #4]
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	441a      	add	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	895a      	ldrh	r2, [r3, #10]
 8013c30:	89fb      	ldrh	r3, [r7, #14]
 8013c32:	1ad3      	subs	r3, r2, r3
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	891a      	ldrh	r2, [r3, #8]
 8013c3e:	89fb      	ldrh	r3, [r7, #14]
 8013c40:	1ad3      	subs	r3, r2, r3
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013c48:	2300      	movs	r3, #0
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3710      	adds	r7, #16
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	08020270 	.word	0x08020270
 8013c58:	080203d4 	.word	0x080203d4
 8013c5c:	080202d0 	.word	0x080202d0
 8013c60:	080203e0 	.word	0x080203e0

08013c64 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	807b      	strh	r3, [r7, #2]
 8013c70:	4613      	mov	r3, r2
 8013c72:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013c74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	da08      	bge.n	8013c8e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c80:	425b      	negs	r3, r3
 8013c82:	4619      	mov	r1, r3
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7ff ff9b 	bl	8013bc0 <pbuf_remove_header>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	e007      	b.n	8013c9e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013c8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c92:	787a      	ldrb	r2, [r7, #1]
 8013c94:	4619      	mov	r1, r3
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7ff ff1a 	bl	8013ad0 <pbuf_add_header_impl>
 8013c9c:	4603      	mov	r3, r0
  }
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3708      	adds	r7, #8
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b082      	sub	sp, #8
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
 8013cae:	460b      	mov	r3, r1
 8013cb0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	4619      	mov	r1, r3
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7ff ffd2 	bl	8013c64 <pbuf_header_impl>
 8013cc0:	4603      	mov	r3, r0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3708      	adds	r7, #8
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}

08013cca <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8013cca:	b580      	push	{r7, lr}
 8013ccc:	b086      	sub	sp, #24
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
 8013cd2:	460b      	mov	r3, r1
 8013cd4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8013cda:	887b      	ldrh	r3, [r7, #2]
 8013cdc:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8013cde:	e01c      	b.n	8013d1a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	895b      	ldrh	r3, [r3, #10]
 8013ce4:	8a7a      	ldrh	r2, [r7, #18]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d310      	bcc.n	8013d0c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8013cee:	697b      	ldr	r3, [r7, #20]
 8013cf0:	895b      	ldrh	r3, [r3, #10]
 8013cf2:	8a7a      	ldrh	r2, [r7, #18]
 8013cf4:	1ad3      	subs	r3, r2, r3
 8013cf6:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2200      	movs	r2, #0
 8013d02:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f000 f813 	bl	8013d30 <pbuf_free>
 8013d0a:	e006      	b.n	8013d1a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8013d0c:	8a7b      	ldrh	r3, [r7, #18]
 8013d0e:	4619      	mov	r1, r3
 8013d10:	6978      	ldr	r0, [r7, #20]
 8013d12:	f7ff ff55 	bl	8013bc0 <pbuf_remove_header>
      free_left = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8013d1a:	8a7b      	ldrh	r3, [r7, #18]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d002      	beq.n	8013d26 <pbuf_free_header+0x5c>
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d1dc      	bne.n	8013ce0 <pbuf_free_header+0x16>
    }
  }
  return p;
 8013d26:	697b      	ldr	r3, [r7, #20]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3718      	adds	r7, #24
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b088      	sub	sp, #32
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d10b      	bne.n	8013d56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d106      	bne.n	8013d52 <pbuf_free+0x22>
 8013d44:	4b3b      	ldr	r3, [pc, #236]	@ (8013e34 <pbuf_free+0x104>)
 8013d46:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8013d4a:	493b      	ldr	r1, [pc, #236]	@ (8013e38 <pbuf_free+0x108>)
 8013d4c:	483b      	ldr	r0, [pc, #236]	@ (8013e3c <pbuf_free+0x10c>)
 8013d4e:	f00a f831 	bl	801ddb4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013d52:	2300      	movs	r3, #0
 8013d54:	e069      	b.n	8013e2a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013d56:	2300      	movs	r3, #0
 8013d58:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013d5a:	e062      	b.n	8013e22 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013d5c:	f009 fe02 	bl	801d964 <sys_arch_protect>
 8013d60:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	7b9b      	ldrb	r3, [r3, #14]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d106      	bne.n	8013d78 <pbuf_free+0x48>
 8013d6a:	4b32      	ldr	r3, [pc, #200]	@ (8013e34 <pbuf_free+0x104>)
 8013d6c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8013d70:	4933      	ldr	r1, [pc, #204]	@ (8013e40 <pbuf_free+0x110>)
 8013d72:	4832      	ldr	r0, [pc, #200]	@ (8013e3c <pbuf_free+0x10c>)
 8013d74:	f00a f81e 	bl	801ddb4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	7b9b      	ldrb	r3, [r3, #14]
 8013d7c:	3b01      	subs	r3, #1
 8013d7e:	b2da      	uxtb	r2, r3
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	739a      	strb	r2, [r3, #14]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	7b9b      	ldrb	r3, [r3, #14]
 8013d88:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013d8a:	69b8      	ldr	r0, [r7, #24]
 8013d8c:	f009 fdf8 	bl	801d980 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013d90:	7dfb      	ldrb	r3, [r7, #23]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d143      	bne.n	8013e1e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	7b1b      	ldrb	r3, [r3, #12]
 8013da0:	f003 030f 	and.w	r3, r3, #15
 8013da4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	7b5b      	ldrb	r3, [r3, #13]
 8013daa:	f003 0302 	and.w	r3, r3, #2
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d011      	beq.n	8013dd6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	691b      	ldr	r3, [r3, #16]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d106      	bne.n	8013dcc <pbuf_free+0x9c>
 8013dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8013e34 <pbuf_free+0x104>)
 8013dc0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013dc4:	491f      	ldr	r1, [pc, #124]	@ (8013e44 <pbuf_free+0x114>)
 8013dc6:	481d      	ldr	r0, [pc, #116]	@ (8013e3c <pbuf_free+0x10c>)
 8013dc8:	f009 fff4 	bl	801ddb4 <iprintf>
        pc->custom_free_function(p);
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	691b      	ldr	r3, [r3, #16]
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	4798      	blx	r3
 8013dd4:	e01d      	b.n	8013e12 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013dd6:	7bfb      	ldrb	r3, [r7, #15]
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	d104      	bne.n	8013de6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	200c      	movs	r0, #12
 8013de0:	f7ff f8cc 	bl	8012f7c <memp_free>
 8013de4:	e015      	b.n	8013e12 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013de6:	7bfb      	ldrb	r3, [r7, #15]
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d104      	bne.n	8013df6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013dec:	6879      	ldr	r1, [r7, #4]
 8013dee:	200b      	movs	r0, #11
 8013df0:	f7ff f8c4 	bl	8012f7c <memp_free>
 8013df4:	e00d      	b.n	8013e12 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013df6:	7bfb      	ldrb	r3, [r7, #15]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d103      	bne.n	8013e04 <pbuf_free+0xd4>
          mem_free(p);
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7fe fcff 	bl	8012800 <mem_free>
 8013e02:	e006      	b.n	8013e12 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013e04:	4b0b      	ldr	r3, [pc, #44]	@ (8013e34 <pbuf_free+0x104>)
 8013e06:	f240 320f 	movw	r2, #783	@ 0x30f
 8013e0a:	490f      	ldr	r1, [pc, #60]	@ (8013e48 <pbuf_free+0x118>)
 8013e0c:	480b      	ldr	r0, [pc, #44]	@ (8013e3c <pbuf_free+0x10c>)
 8013e0e:	f009 ffd1 	bl	801ddb4 <iprintf>
        }
      }
      count++;
 8013e12:	7ffb      	ldrb	r3, [r7, #31]
 8013e14:	3301      	adds	r3, #1
 8013e16:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	607b      	str	r3, [r7, #4]
 8013e1c:	e001      	b.n	8013e22 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d199      	bne.n	8013d5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3720      	adds	r7, #32
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	08020270 	.word	0x08020270
 8013e38:	080203d4 	.word	0x080203d4
 8013e3c:	080202d0 	.word	0x080202d0
 8013e40:	08020400 	.word	0x08020400
 8013e44:	08020418 	.word	0x08020418
 8013e48:	0802043c 	.word	0x0802043c

08013e4c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013e54:	2300      	movs	r3, #0
 8013e56:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013e58:	e005      	b.n	8013e66 <pbuf_clen+0x1a>
    ++len;
 8013e5a:	89fb      	ldrh	r3, [r7, #14]
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d1f6      	bne.n	8013e5a <pbuf_clen+0xe>
  }
  return len;
 8013e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e78:	4770      	bx	lr
	...

08013e7c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d016      	beq.n	8013eb8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013e8a:	f009 fd6b 	bl	801d964 <sys_arch_protect>
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	7b9b      	ldrb	r3, [r3, #14]
 8013e94:	3301      	adds	r3, #1
 8013e96:	b2da      	uxtb	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	739a      	strb	r2, [r3, #14]
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f009 fd6f 	bl	801d980 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	7b9b      	ldrb	r3, [r3, #14]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d106      	bne.n	8013eb8 <pbuf_ref+0x3c>
 8013eaa:	4b05      	ldr	r3, [pc, #20]	@ (8013ec0 <pbuf_ref+0x44>)
 8013eac:	f240 3242 	movw	r2, #834	@ 0x342
 8013eb0:	4904      	ldr	r1, [pc, #16]	@ (8013ec4 <pbuf_ref+0x48>)
 8013eb2:	4805      	ldr	r0, [pc, #20]	@ (8013ec8 <pbuf_ref+0x4c>)
 8013eb4:	f009 ff7e 	bl	801ddb4 <iprintf>
  }
}
 8013eb8:	bf00      	nop
 8013eba:	3710      	adds	r7, #16
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	08020270 	.word	0x08020270
 8013ec4:	08020450 	.word	0x08020450
 8013ec8:	080202d0 	.word	0x080202d0

08013ecc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d002      	beq.n	8013ee2 <pbuf_cat+0x16>
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d107      	bne.n	8013ef2 <pbuf_cat+0x26>
 8013ee2:	4b20      	ldr	r3, [pc, #128]	@ (8013f64 <pbuf_cat+0x98>)
 8013ee4:	f240 3259 	movw	r2, #857	@ 0x359
 8013ee8:	491f      	ldr	r1, [pc, #124]	@ (8013f68 <pbuf_cat+0x9c>)
 8013eea:	4820      	ldr	r0, [pc, #128]	@ (8013f6c <pbuf_cat+0xa0>)
 8013eec:	f009 ff62 	bl	801ddb4 <iprintf>
 8013ef0:	e034      	b.n	8013f5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	60fb      	str	r3, [r7, #12]
 8013ef6:	e00a      	b.n	8013f0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	891a      	ldrh	r2, [r3, #8]
 8013efc:	683b      	ldr	r3, [r7, #0]
 8013efe:	891b      	ldrh	r3, [r3, #8]
 8013f00:	4413      	add	r3, r2
 8013f02:	b29a      	uxth	r2, r3
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	60fb      	str	r3, [r7, #12]
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1f0      	bne.n	8013ef8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	891a      	ldrh	r2, [r3, #8]
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	895b      	ldrh	r3, [r3, #10]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d006      	beq.n	8013f30 <pbuf_cat+0x64>
 8013f22:	4b10      	ldr	r3, [pc, #64]	@ (8013f64 <pbuf_cat+0x98>)
 8013f24:	f240 3262 	movw	r2, #866	@ 0x362
 8013f28:	4911      	ldr	r1, [pc, #68]	@ (8013f70 <pbuf_cat+0xa4>)
 8013f2a:	4810      	ldr	r0, [pc, #64]	@ (8013f6c <pbuf_cat+0xa0>)
 8013f2c:	f009 ff42 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d006      	beq.n	8013f46 <pbuf_cat+0x7a>
 8013f38:	4b0a      	ldr	r3, [pc, #40]	@ (8013f64 <pbuf_cat+0x98>)
 8013f3a:	f240 3263 	movw	r2, #867	@ 0x363
 8013f3e:	490d      	ldr	r1, [pc, #52]	@ (8013f74 <pbuf_cat+0xa8>)
 8013f40:	480a      	ldr	r0, [pc, #40]	@ (8013f6c <pbuf_cat+0xa0>)
 8013f42:	f009 ff37 	bl	801ddb4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	891a      	ldrh	r2, [r3, #8]
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	891b      	ldrh	r3, [r3, #8]
 8013f4e:	4413      	add	r3, r2
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	08020270 	.word	0x08020270
 8013f68:	08020464 	.word	0x08020464
 8013f6c:	080202d0 	.word	0x080202d0
 8013f70:	0802049c 	.word	0x0802049c
 8013f74:	080204cc 	.word	0x080204cc

08013f78 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7ff ffa1 	bl	8013ecc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013f8a:	6838      	ldr	r0, [r7, #0]
 8013f8c:	f7ff ff76 	bl	8013e7c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013f90:	bf00      	nop
 8013f92:	3708      	adds	r7, #8
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}

08013f98 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b086      	sub	sp, #24
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	617b      	str	r3, [r7, #20]
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d008      	beq.n	8013fc2 <pbuf_copy+0x2a>
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d005      	beq.n	8013fc2 <pbuf_copy+0x2a>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	891a      	ldrh	r2, [r3, #8]
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	891b      	ldrh	r3, [r3, #8]
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	d209      	bcs.n	8013fd6 <pbuf_copy+0x3e>
 8013fc2:	4b57      	ldr	r3, [pc, #348]	@ (8014120 <pbuf_copy+0x188>)
 8013fc4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013fc8:	4956      	ldr	r1, [pc, #344]	@ (8014124 <pbuf_copy+0x18c>)
 8013fca:	4857      	ldr	r0, [pc, #348]	@ (8014128 <pbuf_copy+0x190>)
 8013fcc:	f009 fef2 	bl	801ddb4 <iprintf>
 8013fd0:	f06f 030f 	mvn.w	r3, #15
 8013fd4:	e09f      	b.n	8014116 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	895b      	ldrh	r3, [r3, #10]
 8013fda:	461a      	mov	r2, r3
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	1ad2      	subs	r2, r2, r3
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	895b      	ldrh	r3, [r3, #10]
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	1acb      	subs	r3, r1, r3
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d306      	bcc.n	8013ffc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	895b      	ldrh	r3, [r3, #10]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	1ad3      	subs	r3, r2, r3
 8013ff8:	60fb      	str	r3, [r7, #12]
 8013ffa:	e005      	b.n	8014008 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	895b      	ldrh	r3, [r3, #10]
 8014000:	461a      	mov	r2, r3
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	1ad3      	subs	r3, r2, r3
 8014006:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	685a      	ldr	r2, [r3, #4]
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	18d0      	adds	r0, r2, r3
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	685a      	ldr	r2, [r3, #4]
 8014014:	693b      	ldr	r3, [r7, #16]
 8014016:	4413      	add	r3, r2
 8014018:	68fa      	ldr	r2, [r7, #12]
 801401a:	4619      	mov	r1, r3
 801401c:	f00a f8fd 	bl	801e21a <memcpy>
    offset_to += len;
 8014020:	697a      	ldr	r2, [r7, #20]
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	4413      	add	r3, r2
 8014026:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014028:	693a      	ldr	r2, [r7, #16]
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	4413      	add	r3, r2
 801402e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	895b      	ldrh	r3, [r3, #10]
 8014034:	461a      	mov	r2, r3
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	4293      	cmp	r3, r2
 801403a:	d906      	bls.n	801404a <pbuf_copy+0xb2>
 801403c:	4b38      	ldr	r3, [pc, #224]	@ (8014120 <pbuf_copy+0x188>)
 801403e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8014042:	493a      	ldr	r1, [pc, #232]	@ (801412c <pbuf_copy+0x194>)
 8014044:	4838      	ldr	r0, [pc, #224]	@ (8014128 <pbuf_copy+0x190>)
 8014046:	f009 feb5 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	895b      	ldrh	r3, [r3, #10]
 801404e:	461a      	mov	r2, r3
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	4293      	cmp	r3, r2
 8014054:	d906      	bls.n	8014064 <pbuf_copy+0xcc>
 8014056:	4b32      	ldr	r3, [pc, #200]	@ (8014120 <pbuf_copy+0x188>)
 8014058:	f240 32da 	movw	r2, #986	@ 0x3da
 801405c:	4934      	ldr	r1, [pc, #208]	@ (8014130 <pbuf_copy+0x198>)
 801405e:	4832      	ldr	r0, [pc, #200]	@ (8014128 <pbuf_copy+0x190>)
 8014060:	f009 fea8 	bl	801ddb4 <iprintf>
    if (offset_from >= p_from->len) {
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	895b      	ldrh	r3, [r3, #10]
 8014068:	461a      	mov	r2, r3
 801406a:	693b      	ldr	r3, [r7, #16]
 801406c:	4293      	cmp	r3, r2
 801406e:	d304      	bcc.n	801407a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014070:	2300      	movs	r3, #0
 8014072:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	895b      	ldrh	r3, [r3, #10]
 801407e:	461a      	mov	r2, r3
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	4293      	cmp	r3, r2
 8014084:	d114      	bne.n	80140b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014086:	2300      	movs	r3, #0
 8014088:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10c      	bne.n	80140b0 <pbuf_copy+0x118>
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d009      	beq.n	80140b0 <pbuf_copy+0x118>
 801409c:	4b20      	ldr	r3, [pc, #128]	@ (8014120 <pbuf_copy+0x188>)
 801409e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80140a2:	4924      	ldr	r1, [pc, #144]	@ (8014134 <pbuf_copy+0x19c>)
 80140a4:	4820      	ldr	r0, [pc, #128]	@ (8014128 <pbuf_copy+0x190>)
 80140a6:	f009 fe85 	bl	801ddb4 <iprintf>
 80140aa:	f06f 030f 	mvn.w	r3, #15
 80140ae:	e032      	b.n	8014116 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d013      	beq.n	80140de <pbuf_copy+0x146>
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	895a      	ldrh	r2, [r3, #10]
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	891b      	ldrh	r3, [r3, #8]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d10d      	bne.n	80140de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d009      	beq.n	80140de <pbuf_copy+0x146>
 80140ca:	4b15      	ldr	r3, [pc, #84]	@ (8014120 <pbuf_copy+0x188>)
 80140cc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80140d0:	4919      	ldr	r1, [pc, #100]	@ (8014138 <pbuf_copy+0x1a0>)
 80140d2:	4815      	ldr	r0, [pc, #84]	@ (8014128 <pbuf_copy+0x190>)
 80140d4:	f009 fe6e 	bl	801ddb4 <iprintf>
 80140d8:	f06f 0305 	mvn.w	r3, #5
 80140dc:	e01b      	b.n	8014116 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d013      	beq.n	801410c <pbuf_copy+0x174>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	895a      	ldrh	r2, [r3, #10]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	891b      	ldrh	r3, [r3, #8]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d10d      	bne.n	801410c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d009      	beq.n	801410c <pbuf_copy+0x174>
 80140f8:	4b09      	ldr	r3, [pc, #36]	@ (8014120 <pbuf_copy+0x188>)
 80140fa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80140fe:	490e      	ldr	r1, [pc, #56]	@ (8014138 <pbuf_copy+0x1a0>)
 8014100:	4809      	ldr	r0, [pc, #36]	@ (8014128 <pbuf_copy+0x190>)
 8014102:	f009 fe57 	bl	801ddb4 <iprintf>
 8014106:	f06f 0305 	mvn.w	r3, #5
 801410a:	e004      	b.n	8014116 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	f47f af61 	bne.w	8013fd6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	3718      	adds	r7, #24
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	08020270 	.word	0x08020270
 8014124:	08020518 	.word	0x08020518
 8014128:	080202d0 	.word	0x080202d0
 801412c:	08020548 	.word	0x08020548
 8014130:	08020560 	.word	0x08020560
 8014134:	0802057c 	.word	0x0802057c
 8014138:	0802058c 	.word	0x0802058c

0801413c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b088      	sub	sp, #32
 8014140:	af00      	add	r7, sp, #0
 8014142:	60f8      	str	r0, [r7, #12]
 8014144:	60b9      	str	r1, [r7, #8]
 8014146:	4611      	mov	r1, r2
 8014148:	461a      	mov	r2, r3
 801414a:	460b      	mov	r3, r1
 801414c:	80fb      	strh	r3, [r7, #6]
 801414e:	4613      	mov	r3, r2
 8014150:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014152:	2300      	movs	r3, #0
 8014154:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014156:	2300      	movs	r3, #0
 8014158:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d108      	bne.n	8014172 <pbuf_copy_partial+0x36>
 8014160:	4b2b      	ldr	r3, [pc, #172]	@ (8014210 <pbuf_copy_partial+0xd4>)
 8014162:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014166:	492b      	ldr	r1, [pc, #172]	@ (8014214 <pbuf_copy_partial+0xd8>)
 8014168:	482b      	ldr	r0, [pc, #172]	@ (8014218 <pbuf_copy_partial+0xdc>)
 801416a:	f009 fe23 	bl	801ddb4 <iprintf>
 801416e:	2300      	movs	r3, #0
 8014170:	e04a      	b.n	8014208 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d108      	bne.n	801418a <pbuf_copy_partial+0x4e>
 8014178:	4b25      	ldr	r3, [pc, #148]	@ (8014210 <pbuf_copy_partial+0xd4>)
 801417a:	f240 420b 	movw	r2, #1035	@ 0x40b
 801417e:	4927      	ldr	r1, [pc, #156]	@ (801421c <pbuf_copy_partial+0xe0>)
 8014180:	4825      	ldr	r0, [pc, #148]	@ (8014218 <pbuf_copy_partial+0xdc>)
 8014182:	f009 fe17 	bl	801ddb4 <iprintf>
 8014186:	2300      	movs	r3, #0
 8014188:	e03e      	b.n	8014208 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	61fb      	str	r3, [r7, #28]
 801418e:	e034      	b.n	80141fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014190:	88bb      	ldrh	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d00a      	beq.n	80141ac <pbuf_copy_partial+0x70>
 8014196:	69fb      	ldr	r3, [r7, #28]
 8014198:	895b      	ldrh	r3, [r3, #10]
 801419a:	88ba      	ldrh	r2, [r7, #4]
 801419c:	429a      	cmp	r2, r3
 801419e:	d305      	bcc.n	80141ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80141a0:	69fb      	ldr	r3, [r7, #28]
 80141a2:	895b      	ldrh	r3, [r3, #10]
 80141a4:	88ba      	ldrh	r2, [r7, #4]
 80141a6:	1ad3      	subs	r3, r2, r3
 80141a8:	80bb      	strh	r3, [r7, #4]
 80141aa:	e023      	b.n	80141f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80141ac:	69fb      	ldr	r3, [r7, #28]
 80141ae:	895a      	ldrh	r2, [r3, #10]
 80141b0:	88bb      	ldrh	r3, [r7, #4]
 80141b2:	1ad3      	subs	r3, r2, r3
 80141b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80141b6:	8b3a      	ldrh	r2, [r7, #24]
 80141b8:	88fb      	ldrh	r3, [r7, #6]
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d901      	bls.n	80141c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80141be:	88fb      	ldrh	r3, [r7, #6]
 80141c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80141c2:	8b7b      	ldrh	r3, [r7, #26]
 80141c4:	68ba      	ldr	r2, [r7, #8]
 80141c6:	18d0      	adds	r0, r2, r3
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	685a      	ldr	r2, [r3, #4]
 80141cc:	88bb      	ldrh	r3, [r7, #4]
 80141ce:	4413      	add	r3, r2
 80141d0:	8b3a      	ldrh	r2, [r7, #24]
 80141d2:	4619      	mov	r1, r3
 80141d4:	f00a f821 	bl	801e21a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80141d8:	8afa      	ldrh	r2, [r7, #22]
 80141da:	8b3b      	ldrh	r3, [r7, #24]
 80141dc:	4413      	add	r3, r2
 80141de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80141e0:	8b7a      	ldrh	r2, [r7, #26]
 80141e2:	8b3b      	ldrh	r3, [r7, #24]
 80141e4:	4413      	add	r3, r2
 80141e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80141e8:	88fa      	ldrh	r2, [r7, #6]
 80141ea:	8b3b      	ldrh	r3, [r7, #24]
 80141ec:	1ad3      	subs	r3, r2, r3
 80141ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80141f0:	2300      	movs	r3, #0
 80141f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	61fb      	str	r3, [r7, #28]
 80141fa:	88fb      	ldrh	r3, [r7, #6]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d002      	beq.n	8014206 <pbuf_copy_partial+0xca>
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d1c4      	bne.n	8014190 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014206:	8afb      	ldrh	r3, [r7, #22]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3720      	adds	r7, #32
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	08020270 	.word	0x08020270
 8014214:	080205b8 	.word	0x080205b8
 8014218:	080202d0 	.word	0x080202d0
 801421c:	080205d8 	.word	0x080205d8

08014220 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	4603      	mov	r3, r0
 8014228:	603a      	str	r2, [r7, #0]
 801422a:	71fb      	strb	r3, [r7, #7]
 801422c:	460b      	mov	r3, r1
 801422e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	8919      	ldrh	r1, [r3, #8]
 8014234:	88ba      	ldrh	r2, [r7, #4]
 8014236:	79fb      	ldrb	r3, [r7, #7]
 8014238:	4618      	mov	r0, r3
 801423a:	f7ff fa5f 	bl	80136fc <pbuf_alloc>
 801423e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d101      	bne.n	801424a <pbuf_clone+0x2a>
    return NULL;
 8014246:	2300      	movs	r3, #0
 8014248:	e011      	b.n	801426e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f7ff fea3 	bl	8013f98 <pbuf_copy>
 8014252:	4603      	mov	r3, r0
 8014254:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014256:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d006      	beq.n	801426c <pbuf_clone+0x4c>
 801425e:	4b06      	ldr	r3, [pc, #24]	@ (8014278 <pbuf_clone+0x58>)
 8014260:	f240 5224 	movw	r2, #1316	@ 0x524
 8014264:	4905      	ldr	r1, [pc, #20]	@ (801427c <pbuf_clone+0x5c>)
 8014266:	4806      	ldr	r0, [pc, #24]	@ (8014280 <pbuf_clone+0x60>)
 8014268:	f009 fda4 	bl	801ddb4 <iprintf>
  return q;
 801426c:	68fb      	ldr	r3, [r7, #12]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3710      	adds	r7, #16
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	08020270 	.word	0x08020270
 801427c:	080206e4 	.word	0x080206e4
 8014280:	080202d0 	.word	0x080202d0

08014284 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014288:	f009 fc82 	bl	801db90 <rand>
 801428c:	4603      	mov	r3, r0
 801428e:	b29b      	uxth	r3, r3
 8014290:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014294:	b29b      	uxth	r3, r3
 8014296:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801429a:	b29a      	uxth	r2, r3
 801429c:	4b01      	ldr	r3, [pc, #4]	@ (80142a4 <tcp_init+0x20>)
 801429e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80142a0:	bf00      	nop
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	24000028 	.word	0x24000028

080142a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	7d1b      	ldrb	r3, [r3, #20]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d105      	bne.n	80142c4 <tcp_free+0x1c>
 80142b8:	4b06      	ldr	r3, [pc, #24]	@ (80142d4 <tcp_free+0x2c>)
 80142ba:	22d4      	movs	r2, #212	@ 0xd4
 80142bc:	4906      	ldr	r1, [pc, #24]	@ (80142d8 <tcp_free+0x30>)
 80142be:	4807      	ldr	r0, [pc, #28]	@ (80142dc <tcp_free+0x34>)
 80142c0:	f009 fd78 	bl	801ddb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80142c4:	6879      	ldr	r1, [r7, #4]
 80142c6:	2001      	movs	r0, #1
 80142c8:	f7fe fe58 	bl	8012f7c <memp_free>
}
 80142cc:	bf00      	nop
 80142ce:	3708      	adds	r7, #8
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	08020770 	.word	0x08020770
 80142d8:	080207a0 	.word	0x080207a0
 80142dc:	080207b4 	.word	0x080207b4

080142e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	7d1b      	ldrb	r3, [r3, #20]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d105      	bne.n	80142fc <tcp_free_listen+0x1c>
 80142f0:	4b06      	ldr	r3, [pc, #24]	@ (801430c <tcp_free_listen+0x2c>)
 80142f2:	22df      	movs	r2, #223	@ 0xdf
 80142f4:	4906      	ldr	r1, [pc, #24]	@ (8014310 <tcp_free_listen+0x30>)
 80142f6:	4807      	ldr	r0, [pc, #28]	@ (8014314 <tcp_free_listen+0x34>)
 80142f8:	f009 fd5c 	bl	801ddb4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80142fc:	6879      	ldr	r1, [r7, #4]
 80142fe:	2002      	movs	r0, #2
 8014300:	f7fe fe3c 	bl	8012f7c <memp_free>
}
 8014304:	bf00      	nop
 8014306:	3708      	adds	r7, #8
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	08020770 	.word	0x08020770
 8014310:	080207dc 	.word	0x080207dc
 8014314:	080207b4 	.word	0x080207b4

08014318 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801431c:	f001 f8aa 	bl	8015474 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014320:	4b07      	ldr	r3, [pc, #28]	@ (8014340 <tcp_tmr+0x28>)
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	3301      	adds	r3, #1
 8014326:	b2da      	uxtb	r2, r3
 8014328:	4b05      	ldr	r3, [pc, #20]	@ (8014340 <tcp_tmr+0x28>)
 801432a:	701a      	strb	r2, [r3, #0]
 801432c:	4b04      	ldr	r3, [pc, #16]	@ (8014340 <tcp_tmr+0x28>)
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	f003 0301 	and.w	r3, r3, #1
 8014334:	2b00      	cmp	r3, #0
 8014336:	d001      	beq.n	801433c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014338:	f000 fd5a 	bl	8014df0 <tcp_slowtmr>
  }
}
 801433c:	bf00      	nop
 801433e:	bd80      	pop	{r7, pc}
 8014340:	24016e21 	.word	0x24016e21

08014344 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d105      	bne.n	8014360 <tcp_remove_listener+0x1c>
 8014354:	4b0d      	ldr	r3, [pc, #52]	@ (801438c <tcp_remove_listener+0x48>)
 8014356:	22ff      	movs	r2, #255	@ 0xff
 8014358:	490d      	ldr	r1, [pc, #52]	@ (8014390 <tcp_remove_listener+0x4c>)
 801435a:	480e      	ldr	r0, [pc, #56]	@ (8014394 <tcp_remove_listener+0x50>)
 801435c:	f009 fd2a 	bl	801ddb4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	60fb      	str	r3, [r7, #12]
 8014364:	e00a      	b.n	801437c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801436a:	683a      	ldr	r2, [r7, #0]
 801436c:	429a      	cmp	r2, r3
 801436e:	d102      	bne.n	8014376 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	2200      	movs	r2, #0
 8014374:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	60fb      	str	r3, [r7, #12]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d1f1      	bne.n	8014366 <tcp_remove_listener+0x22>
    }
  }
}
 8014382:	bf00      	nop
 8014384:	bf00      	nop
 8014386:	3710      	adds	r7, #16
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}
 801438c:	08020770 	.word	0x08020770
 8014390:	080207f8 	.word	0x080207f8
 8014394:	080207b4 	.word	0x080207b4

08014398 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <tcp_listen_closed+0x1c>
 80143a6:	4b14      	ldr	r3, [pc, #80]	@ (80143f8 <tcp_listen_closed+0x60>)
 80143a8:	f240 1211 	movw	r2, #273	@ 0x111
 80143ac:	4913      	ldr	r1, [pc, #76]	@ (80143fc <tcp_listen_closed+0x64>)
 80143ae:	4814      	ldr	r0, [pc, #80]	@ (8014400 <tcp_listen_closed+0x68>)
 80143b0:	f009 fd00 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	7d1b      	ldrb	r3, [r3, #20]
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d006      	beq.n	80143ca <tcp_listen_closed+0x32>
 80143bc:	4b0e      	ldr	r3, [pc, #56]	@ (80143f8 <tcp_listen_closed+0x60>)
 80143be:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80143c2:	4910      	ldr	r1, [pc, #64]	@ (8014404 <tcp_listen_closed+0x6c>)
 80143c4:	480e      	ldr	r0, [pc, #56]	@ (8014400 <tcp_listen_closed+0x68>)
 80143c6:	f009 fcf5 	bl	801ddb4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80143ca:	2301      	movs	r3, #1
 80143cc:	60fb      	str	r3, [r7, #12]
 80143ce:	e00b      	b.n	80143e8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80143d0:	4a0d      	ldr	r2, [pc, #52]	@ (8014408 <tcp_listen_closed+0x70>)
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	6879      	ldr	r1, [r7, #4]
 80143dc:	4618      	mov	r0, r3
 80143de:	f7ff ffb1 	bl	8014344 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	3301      	adds	r3, #1
 80143e6:	60fb      	str	r3, [r7, #12]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d9f0      	bls.n	80143d0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80143ee:	bf00      	nop
 80143f0:	bf00      	nop
 80143f2:	3710      	adds	r7, #16
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	08020770 	.word	0x08020770
 80143fc:	08020820 	.word	0x08020820
 8014400:	080207b4 	.word	0x080207b4
 8014404:	0802082c 	.word	0x0802082c
 8014408:	08022840 	.word	0x08022840

0801440c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801440c:	b5b0      	push	{r4, r5, r7, lr}
 801440e:	b088      	sub	sp, #32
 8014410:	af04      	add	r7, sp, #16
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	460b      	mov	r3, r1
 8014416:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d106      	bne.n	801442c <tcp_close_shutdown+0x20>
 801441e:	4b63      	ldr	r3, [pc, #396]	@ (80145ac <tcp_close_shutdown+0x1a0>)
 8014420:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014424:	4962      	ldr	r1, [pc, #392]	@ (80145b0 <tcp_close_shutdown+0x1a4>)
 8014426:	4863      	ldr	r0, [pc, #396]	@ (80145b4 <tcp_close_shutdown+0x1a8>)
 8014428:	f009 fcc4 	bl	801ddb4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801442c:	78fb      	ldrb	r3, [r7, #3]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d067      	beq.n	8014502 <tcp_close_shutdown+0xf6>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	7d1b      	ldrb	r3, [r3, #20]
 8014436:	2b04      	cmp	r3, #4
 8014438:	d003      	beq.n	8014442 <tcp_close_shutdown+0x36>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	7d1b      	ldrb	r3, [r3, #20]
 801443e:	2b07      	cmp	r3, #7
 8014440:	d15f      	bne.n	8014502 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014446:	2b00      	cmp	r3, #0
 8014448:	d105      	bne.n	8014456 <tcp_close_shutdown+0x4a>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801444e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8014452:	4293      	cmp	r3, r2
 8014454:	d055      	beq.n	8014502 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	8b5b      	ldrh	r3, [r3, #26]
 801445a:	f003 0310 	and.w	r3, r3, #16
 801445e:	2b00      	cmp	r3, #0
 8014460:	d106      	bne.n	8014470 <tcp_close_shutdown+0x64>
 8014462:	4b52      	ldr	r3, [pc, #328]	@ (80145ac <tcp_close_shutdown+0x1a0>)
 8014464:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014468:	4953      	ldr	r1, [pc, #332]	@ (80145b8 <tcp_close_shutdown+0x1ac>)
 801446a:	4852      	ldr	r0, [pc, #328]	@ (80145b4 <tcp_close_shutdown+0x1a8>)
 801446c:	f009 fca2 	bl	801ddb4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014478:	687d      	ldr	r5, [r7, #4]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	3304      	adds	r3, #4
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	8ad2      	ldrh	r2, [r2, #22]
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	8b09      	ldrh	r1, [r1, #24]
 8014486:	9102      	str	r1, [sp, #8]
 8014488:	9201      	str	r2, [sp, #4]
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	462b      	mov	r3, r5
 801448e:	4622      	mov	r2, r4
 8014490:	4601      	mov	r1, r0
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f005 fdbc 	bl	801a010 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f001 fb9d 	bl	8015bd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801449e:	4b47      	ldr	r3, [pc, #284]	@ (80145bc <tcp_close_shutdown+0x1b0>)
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d105      	bne.n	80144b4 <tcp_close_shutdown+0xa8>
 80144a8:	4b44      	ldr	r3, [pc, #272]	@ (80145bc <tcp_close_shutdown+0x1b0>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	4a43      	ldr	r2, [pc, #268]	@ (80145bc <tcp_close_shutdown+0x1b0>)
 80144b0:	6013      	str	r3, [r2, #0]
 80144b2:	e013      	b.n	80144dc <tcp_close_shutdown+0xd0>
 80144b4:	4b41      	ldr	r3, [pc, #260]	@ (80145bc <tcp_close_shutdown+0x1b0>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	60fb      	str	r3, [r7, #12]
 80144ba:	e00c      	b.n	80144d6 <tcp_close_shutdown+0xca>
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	68db      	ldr	r3, [r3, #12]
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d104      	bne.n	80144d0 <tcp_close_shutdown+0xc4>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	68da      	ldr	r2, [r3, #12]
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	60da      	str	r2, [r3, #12]
 80144ce:	e005      	b.n	80144dc <tcp_close_shutdown+0xd0>
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	68db      	ldr	r3, [r3, #12]
 80144d4:	60fb      	str	r3, [r7, #12]
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d1ef      	bne.n	80144bc <tcp_close_shutdown+0xb0>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	60da      	str	r2, [r3, #12]
 80144e2:	4b37      	ldr	r3, [pc, #220]	@ (80145c0 <tcp_close_shutdown+0x1b4>)
 80144e4:	2201      	movs	r2, #1
 80144e6:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80144e8:	4b36      	ldr	r3, [pc, #216]	@ (80145c4 <tcp_close_shutdown+0x1b8>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d102      	bne.n	80144f8 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80144f2:	f004 f833 	bl	801855c <tcp_trigger_input_pcb_close>
 80144f6:	e002      	b.n	80144fe <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7ff fed5 	bl	80142a8 <tcp_free>
      }
      return ERR_OK;
 80144fe:	2300      	movs	r3, #0
 8014500:	e050      	b.n	80145a4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	7d1b      	ldrb	r3, [r3, #20]
 8014506:	2b02      	cmp	r3, #2
 8014508:	d03b      	beq.n	8014582 <tcp_close_shutdown+0x176>
 801450a:	2b02      	cmp	r3, #2
 801450c:	dc44      	bgt.n	8014598 <tcp_close_shutdown+0x18c>
 801450e:	2b00      	cmp	r3, #0
 8014510:	d002      	beq.n	8014518 <tcp_close_shutdown+0x10c>
 8014512:	2b01      	cmp	r3, #1
 8014514:	d02a      	beq.n	801456c <tcp_close_shutdown+0x160>
 8014516:	e03f      	b.n	8014598 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	8adb      	ldrh	r3, [r3, #22]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d021      	beq.n	8014564 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014520:	4b29      	ldr	r3, [pc, #164]	@ (80145c8 <tcp_close_shutdown+0x1bc>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	429a      	cmp	r2, r3
 8014528:	d105      	bne.n	8014536 <tcp_close_shutdown+0x12a>
 801452a:	4b27      	ldr	r3, [pc, #156]	@ (80145c8 <tcp_close_shutdown+0x1bc>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	4a25      	ldr	r2, [pc, #148]	@ (80145c8 <tcp_close_shutdown+0x1bc>)
 8014532:	6013      	str	r3, [r2, #0]
 8014534:	e013      	b.n	801455e <tcp_close_shutdown+0x152>
 8014536:	4b24      	ldr	r3, [pc, #144]	@ (80145c8 <tcp_close_shutdown+0x1bc>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	60bb      	str	r3, [r7, #8]
 801453c:	e00c      	b.n	8014558 <tcp_close_shutdown+0x14c>
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	429a      	cmp	r2, r3
 8014546:	d104      	bne.n	8014552 <tcp_close_shutdown+0x146>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	68da      	ldr	r2, [r3, #12]
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	60da      	str	r2, [r3, #12]
 8014550:	e005      	b.n	801455e <tcp_close_shutdown+0x152>
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	68db      	ldr	r3, [r3, #12]
 8014556:	60bb      	str	r3, [r7, #8]
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d1ef      	bne.n	801453e <tcp_close_shutdown+0x132>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2200      	movs	r2, #0
 8014562:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7ff fe9f 	bl	80142a8 <tcp_free>
      break;
 801456a:	e01a      	b.n	80145a2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7ff ff13 	bl	8014398 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014572:	6879      	ldr	r1, [r7, #4]
 8014574:	4815      	ldr	r0, [pc, #84]	@ (80145cc <tcp_close_shutdown+0x1c0>)
 8014576:	f001 fb7f 	bl	8015c78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7ff feb0 	bl	80142e0 <tcp_free_listen>
      break;
 8014580:	e00f      	b.n	80145a2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014582:	6879      	ldr	r1, [r7, #4]
 8014584:	480d      	ldr	r0, [pc, #52]	@ (80145bc <tcp_close_shutdown+0x1b0>)
 8014586:	f001 fb77 	bl	8015c78 <tcp_pcb_remove>
 801458a:	4b0d      	ldr	r3, [pc, #52]	@ (80145c0 <tcp_close_shutdown+0x1b4>)
 801458c:	2201      	movs	r2, #1
 801458e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f7ff fe89 	bl	80142a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014596:	e004      	b.n	80145a2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f000 f819 	bl	80145d0 <tcp_close_shutdown_fin>
 801459e:	4603      	mov	r3, r0
 80145a0:	e000      	b.n	80145a4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80145a2:	2300      	movs	r3, #0
}
 80145a4:	4618      	mov	r0, r3
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bdb0      	pop	{r4, r5, r7, pc}
 80145ac:	08020770 	.word	0x08020770
 80145b0:	08020844 	.word	0x08020844
 80145b4:	080207b4 	.word	0x080207b4
 80145b8:	08020864 	.word	0x08020864
 80145bc:	24016e18 	.word	0x24016e18
 80145c0:	24016e20 	.word	0x24016e20
 80145c4:	24016e58 	.word	0x24016e58
 80145c8:	24016e10 	.word	0x24016e10
 80145cc:	24016e14 	.word	0x24016e14

080145d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <tcp_close_shutdown_fin+0x1c>
 80145de:	4b2e      	ldr	r3, [pc, #184]	@ (8014698 <tcp_close_shutdown_fin+0xc8>)
 80145e0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80145e4:	492d      	ldr	r1, [pc, #180]	@ (801469c <tcp_close_shutdown_fin+0xcc>)
 80145e6:	482e      	ldr	r0, [pc, #184]	@ (80146a0 <tcp_close_shutdown_fin+0xd0>)
 80145e8:	f009 fbe4 	bl	801ddb4 <iprintf>

  switch (pcb->state) {
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	7d1b      	ldrb	r3, [r3, #20]
 80145f0:	2b07      	cmp	r3, #7
 80145f2:	d020      	beq.n	8014636 <tcp_close_shutdown_fin+0x66>
 80145f4:	2b07      	cmp	r3, #7
 80145f6:	dc2b      	bgt.n	8014650 <tcp_close_shutdown_fin+0x80>
 80145f8:	2b03      	cmp	r3, #3
 80145fa:	d002      	beq.n	8014602 <tcp_close_shutdown_fin+0x32>
 80145fc:	2b04      	cmp	r3, #4
 80145fe:	d00d      	beq.n	801461c <tcp_close_shutdown_fin+0x4c>
 8014600:	e026      	b.n	8014650 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f004 fe12 	bl	801922c <tcp_send_fin>
 8014608:	4603      	mov	r3, r0
 801460a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801460c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d11f      	bne.n	8014654 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2205      	movs	r2, #5
 8014618:	751a      	strb	r2, [r3, #20]
      }
      break;
 801461a:	e01b      	b.n	8014654 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f004 fe05 	bl	801922c <tcp_send_fin>
 8014622:	4603      	mov	r3, r0
 8014624:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d114      	bne.n	8014658 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2205      	movs	r2, #5
 8014632:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014634:	e010      	b.n	8014658 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f004 fdf8 	bl	801922c <tcp_send_fin>
 801463c:	4603      	mov	r3, r0
 801463e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d109      	bne.n	801465c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2209      	movs	r2, #9
 801464c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801464e:	e005      	b.n	801465c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014650:	2300      	movs	r3, #0
 8014652:	e01c      	b.n	801468e <tcp_close_shutdown_fin+0xbe>
      break;
 8014654:	bf00      	nop
 8014656:	e002      	b.n	801465e <tcp_close_shutdown_fin+0x8e>
      break;
 8014658:	bf00      	nop
 801465a:	e000      	b.n	801465e <tcp_close_shutdown_fin+0x8e>
      break;
 801465c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801465e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d103      	bne.n	801466e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f004 ff1e 	bl	80194a8 <tcp_output>
 801466c:	e00d      	b.n	801468a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014676:	d108      	bne.n	801468a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	8b5b      	ldrh	r3, [r3, #26]
 801467c:	f043 0308 	orr.w	r3, r3, #8
 8014680:	b29a      	uxth	r2, r3
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014686:	2300      	movs	r3, #0
 8014688:	e001      	b.n	801468e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	08020770 	.word	0x08020770
 801469c:	08020820 	.word	0x08020820
 80146a0:	080207b4 	.word	0x080207b4

080146a4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d109      	bne.n	80146c6 <tcp_close+0x22>
 80146b2:	4b0f      	ldr	r3, [pc, #60]	@ (80146f0 <tcp_close+0x4c>)
 80146b4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80146b8:	490e      	ldr	r1, [pc, #56]	@ (80146f4 <tcp_close+0x50>)
 80146ba:	480f      	ldr	r0, [pc, #60]	@ (80146f8 <tcp_close+0x54>)
 80146bc:	f009 fb7a 	bl	801ddb4 <iprintf>
 80146c0:	f06f 030f 	mvn.w	r3, #15
 80146c4:	e00f      	b.n	80146e6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	7d1b      	ldrb	r3, [r3, #20]
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	d006      	beq.n	80146dc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	8b5b      	ldrh	r3, [r3, #26]
 80146d2:	f043 0310 	orr.w	r3, r3, #16
 80146d6:	b29a      	uxth	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80146dc:	2101      	movs	r1, #1
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f7ff fe94 	bl	801440c <tcp_close_shutdown>
 80146e4:	4603      	mov	r3, r0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3708      	adds	r7, #8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	08020770 	.word	0x08020770
 80146f4:	08020880 	.word	0x08020880
 80146f8:	080207b4 	.word	0x080207b4

080146fc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b084      	sub	sp, #16
 8014700:	af00      	add	r7, sp, #0
 8014702:	60f8      	str	r0, [r7, #12]
 8014704:	60b9      	str	r1, [r7, #8]
 8014706:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d109      	bne.n	8014722 <tcp_shutdown+0x26>
 801470e:	4b26      	ldr	r3, [pc, #152]	@ (80147a8 <tcp_shutdown+0xac>)
 8014710:	f240 2207 	movw	r2, #519	@ 0x207
 8014714:	4925      	ldr	r1, [pc, #148]	@ (80147ac <tcp_shutdown+0xb0>)
 8014716:	4826      	ldr	r0, [pc, #152]	@ (80147b0 <tcp_shutdown+0xb4>)
 8014718:	f009 fb4c 	bl	801ddb4 <iprintf>
 801471c:	f06f 030f 	mvn.w	r3, #15
 8014720:	e03d      	b.n	801479e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	7d1b      	ldrb	r3, [r3, #20]
 8014726:	2b01      	cmp	r3, #1
 8014728:	d102      	bne.n	8014730 <tcp_shutdown+0x34>
    return ERR_CONN;
 801472a:	f06f 030a 	mvn.w	r3, #10
 801472e:	e036      	b.n	801479e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d01b      	beq.n	801476e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	8b5b      	ldrh	r3, [r3, #26]
 801473a:	f043 0310 	orr.w	r3, r3, #16
 801473e:	b29a      	uxth	r2, r3
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d005      	beq.n	8014756 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801474a:	2101      	movs	r1, #1
 801474c:	68f8      	ldr	r0, [r7, #12]
 801474e:	f7ff fe5d 	bl	801440c <tcp_close_shutdown>
 8014752:	4603      	mov	r3, r0
 8014754:	e023      	b.n	801479e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801475a:	2b00      	cmp	r3, #0
 801475c:	d007      	beq.n	801476e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014762:	4618      	mov	r0, r3
 8014764:	f7ff fae4 	bl	8013d30 <pbuf_free>
      pcb->refused_data = NULL;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	2200      	movs	r2, #0
 801476c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d013      	beq.n	801479c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	7d1b      	ldrb	r3, [r3, #20]
 8014778:	2b04      	cmp	r3, #4
 801477a:	dc02      	bgt.n	8014782 <tcp_shutdown+0x86>
 801477c:	2b03      	cmp	r3, #3
 801477e:	da02      	bge.n	8014786 <tcp_shutdown+0x8a>
 8014780:	e009      	b.n	8014796 <tcp_shutdown+0x9a>
 8014782:	2b07      	cmp	r3, #7
 8014784:	d107      	bne.n	8014796 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	b2db      	uxtb	r3, r3
 801478a:	4619      	mov	r1, r3
 801478c:	68f8      	ldr	r0, [r7, #12]
 801478e:	f7ff fe3d 	bl	801440c <tcp_close_shutdown>
 8014792:	4603      	mov	r3, r0
 8014794:	e003      	b.n	801479e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014796:	f06f 030a 	mvn.w	r3, #10
 801479a:	e000      	b.n	801479e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	08020770 	.word	0x08020770
 80147ac:	08020898 	.word	0x08020898
 80147b0:	080207b4 	.word	0x080207b4

080147b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b08e      	sub	sp, #56	@ 0x38
 80147b8:	af04      	add	r7, sp, #16
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d107      	bne.n	80147d4 <tcp_abandon+0x20>
 80147c4:	4b52      	ldr	r3, [pc, #328]	@ (8014910 <tcp_abandon+0x15c>)
 80147c6:	f240 223d 	movw	r2, #573	@ 0x23d
 80147ca:	4952      	ldr	r1, [pc, #328]	@ (8014914 <tcp_abandon+0x160>)
 80147cc:	4852      	ldr	r0, [pc, #328]	@ (8014918 <tcp_abandon+0x164>)
 80147ce:	f009 faf1 	bl	801ddb4 <iprintf>
 80147d2:	e099      	b.n	8014908 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	7d1b      	ldrb	r3, [r3, #20]
 80147d8:	2b01      	cmp	r3, #1
 80147da:	d106      	bne.n	80147ea <tcp_abandon+0x36>
 80147dc:	4b4c      	ldr	r3, [pc, #304]	@ (8014910 <tcp_abandon+0x15c>)
 80147de:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80147e2:	494e      	ldr	r1, [pc, #312]	@ (801491c <tcp_abandon+0x168>)
 80147e4:	484c      	ldr	r0, [pc, #304]	@ (8014918 <tcp_abandon+0x164>)
 80147e6:	f009 fae5 	bl	801ddb4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	7d1b      	ldrb	r3, [r3, #20]
 80147ee:	2b0a      	cmp	r3, #10
 80147f0:	d107      	bne.n	8014802 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80147f2:	6879      	ldr	r1, [r7, #4]
 80147f4:	484a      	ldr	r0, [pc, #296]	@ (8014920 <tcp_abandon+0x16c>)
 80147f6:	f001 fa3f 	bl	8015c78 <tcp_pcb_remove>
    tcp_free(pcb);
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7ff fd54 	bl	80142a8 <tcp_free>
 8014800:	e082      	b.n	8014908 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014802:	2300      	movs	r3, #0
 8014804:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014806:	2300      	movs	r3, #0
 8014808:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801480e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014814:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801481c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	691b      	ldr	r3, [r3, #16]
 8014822:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	7d1b      	ldrb	r3, [r3, #20]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d126      	bne.n	801487a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	8adb      	ldrh	r3, [r3, #22]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d02e      	beq.n	8014892 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014834:	4b3b      	ldr	r3, [pc, #236]	@ (8014924 <tcp_abandon+0x170>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	429a      	cmp	r2, r3
 801483c:	d105      	bne.n	801484a <tcp_abandon+0x96>
 801483e:	4b39      	ldr	r3, [pc, #228]	@ (8014924 <tcp_abandon+0x170>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	4a37      	ldr	r2, [pc, #220]	@ (8014924 <tcp_abandon+0x170>)
 8014846:	6013      	str	r3, [r2, #0]
 8014848:	e013      	b.n	8014872 <tcp_abandon+0xbe>
 801484a:	4b36      	ldr	r3, [pc, #216]	@ (8014924 <tcp_abandon+0x170>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	61fb      	str	r3, [r7, #28]
 8014850:	e00c      	b.n	801486c <tcp_abandon+0xb8>
 8014852:	69fb      	ldr	r3, [r7, #28]
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	429a      	cmp	r2, r3
 801485a:	d104      	bne.n	8014866 <tcp_abandon+0xb2>
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	68da      	ldr	r2, [r3, #12]
 8014860:	69fb      	ldr	r3, [r7, #28]
 8014862:	60da      	str	r2, [r3, #12]
 8014864:	e005      	b.n	8014872 <tcp_abandon+0xbe>
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	68db      	ldr	r3, [r3, #12]
 801486a:	61fb      	str	r3, [r7, #28]
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d1ef      	bne.n	8014852 <tcp_abandon+0x9e>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	2200      	movs	r2, #0
 8014876:	60da      	str	r2, [r3, #12]
 8014878:	e00b      	b.n	8014892 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	8adb      	ldrh	r3, [r3, #22]
 8014882:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014884:	6879      	ldr	r1, [r7, #4]
 8014886:	4828      	ldr	r0, [pc, #160]	@ (8014928 <tcp_abandon+0x174>)
 8014888:	f001 f9f6 	bl	8015c78 <tcp_pcb_remove>
 801488c:	4b27      	ldr	r3, [pc, #156]	@ (801492c <tcp_abandon+0x178>)
 801488e:	2201      	movs	r2, #1
 8014890:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014896:	2b00      	cmp	r3, #0
 8014898:	d004      	beq.n	80148a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801489e:	4618      	mov	r0, r3
 80148a0:	f000 feca 	bl	8015638 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d004      	beq.n	80148b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148b0:	4618      	mov	r0, r3
 80148b2:	f000 fec1 	bl	8015638 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d004      	beq.n	80148c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80148c2:	4618      	mov	r0, r3
 80148c4:	f000 feb8 	bl	8015638 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80148c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d00e      	beq.n	80148ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80148ce:	6879      	ldr	r1, [r7, #4]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	3304      	adds	r3, #4
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	8b12      	ldrh	r2, [r2, #24]
 80148d8:	9202      	str	r2, [sp, #8]
 80148da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80148dc:	9201      	str	r2, [sp, #4]
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	460b      	mov	r3, r1
 80148e2:	697a      	ldr	r2, [r7, #20]
 80148e4:	69b9      	ldr	r1, [r7, #24]
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f005 fb92 	bl	801a010 <tcp_rst>
    }
    last_state = pcb->state;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	7d1b      	ldrb	r3, [r3, #20]
 80148f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f7ff fcd8 	bl	80142a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d004      	beq.n	8014908 <tcp_abandon+0x154>
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	f06f 010c 	mvn.w	r1, #12
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	4798      	blx	r3
  }
}
 8014908:	3728      	adds	r7, #40	@ 0x28
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	08020770 	.word	0x08020770
 8014914:	080208b4 	.word	0x080208b4
 8014918:	080207b4 	.word	0x080207b4
 801491c:	080208d0 	.word	0x080208d0
 8014920:	24016e1c 	.word	0x24016e1c
 8014924:	24016e10 	.word	0x24016e10
 8014928:	24016e18 	.word	0x24016e18
 801492c:	24016e20 	.word	0x24016e20

08014930 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014938:	2101      	movs	r1, #1
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f7ff ff3a 	bl	80147b4 <tcp_abandon>
}
 8014940:	bf00      	nop
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b088      	sub	sp, #32
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	4613      	mov	r3, r2
 8014954:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8014956:	2304      	movs	r3, #4
 8014958:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d101      	bne.n	8014964 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014960:	4b3e      	ldr	r3, [pc, #248]	@ (8014a5c <tcp_bind+0x114>)
 8014962:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d109      	bne.n	801497e <tcp_bind+0x36>
 801496a:	4b3d      	ldr	r3, [pc, #244]	@ (8014a60 <tcp_bind+0x118>)
 801496c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8014970:	493c      	ldr	r1, [pc, #240]	@ (8014a64 <tcp_bind+0x11c>)
 8014972:	483d      	ldr	r0, [pc, #244]	@ (8014a68 <tcp_bind+0x120>)
 8014974:	f009 fa1e 	bl	801ddb4 <iprintf>
 8014978:	f06f 030f 	mvn.w	r3, #15
 801497c:	e06a      	b.n	8014a54 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	7d1b      	ldrb	r3, [r3, #20]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d009      	beq.n	801499a <tcp_bind+0x52>
 8014986:	4b36      	ldr	r3, [pc, #216]	@ (8014a60 <tcp_bind+0x118>)
 8014988:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801498c:	4937      	ldr	r1, [pc, #220]	@ (8014a6c <tcp_bind+0x124>)
 801498e:	4836      	ldr	r0, [pc, #216]	@ (8014a68 <tcp_bind+0x120>)
 8014990:	f009 fa10 	bl	801ddb4 <iprintf>
 8014994:	f06f 0305 	mvn.w	r3, #5
 8014998:	e05c      	b.n	8014a54 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801499a:	88fb      	ldrh	r3, [r7, #6]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d109      	bne.n	80149b4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80149a0:	f000 f9e0 	bl	8014d64 <tcp_new_port>
 80149a4:	4603      	mov	r3, r0
 80149a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80149a8:	88fb      	ldrh	r3, [r7, #6]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d135      	bne.n	8014a1a <tcp_bind+0xd2>
      return ERR_BUF;
 80149ae:	f06f 0301 	mvn.w	r3, #1
 80149b2:	e04f      	b.n	8014a54 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80149b4:	2300      	movs	r3, #0
 80149b6:	61fb      	str	r3, [r7, #28]
 80149b8:	e02b      	b.n	8014a12 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80149ba:	4a2d      	ldr	r2, [pc, #180]	@ (8014a70 <tcp_bind+0x128>)
 80149bc:	69fb      	ldr	r3, [r7, #28]
 80149be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	61bb      	str	r3, [r7, #24]
 80149c6:	e01e      	b.n	8014a06 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80149c8:	69bb      	ldr	r3, [r7, #24]
 80149ca:	8adb      	ldrh	r3, [r3, #22]
 80149cc:	88fa      	ldrh	r2, [r7, #6]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d116      	bne.n	8014a00 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80149d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d010      	beq.n	80149fa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d00c      	beq.n	80149fa <tcp_bind+0xb2>
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d009      	beq.n	80149fa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d005      	beq.n	80149fa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80149ee:	69bb      	ldr	r3, [r7, #24]
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d102      	bne.n	8014a00 <tcp_bind+0xb8>
              return ERR_USE;
 80149fa:	f06f 0307 	mvn.w	r3, #7
 80149fe:	e029      	b.n	8014a54 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	61bb      	str	r3, [r7, #24]
 8014a06:	69bb      	ldr	r3, [r7, #24]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1dd      	bne.n	80149c8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	3301      	adds	r3, #1
 8014a10:	61fb      	str	r3, [r7, #28]
 8014a12:	69fa      	ldr	r2, [r7, #28]
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	429a      	cmp	r2, r3
 8014a18:	dbcf      	blt.n	80149ba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d00c      	beq.n	8014a3a <tcp_bind+0xf2>
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d008      	beq.n	8014a3a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d002      	beq.n	8014a34 <tcp_bind+0xec>
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	e000      	b.n	8014a36 <tcp_bind+0xee>
 8014a34:	2300      	movs	r3, #0
 8014a36:	68fa      	ldr	r2, [r7, #12]
 8014a38:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	88fa      	ldrh	r2, [r7, #6]
 8014a3e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014a40:	4b0c      	ldr	r3, [pc, #48]	@ (8014a74 <tcp_bind+0x12c>)
 8014a42:	681a      	ldr	r2, [r3, #0]
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	60da      	str	r2, [r3, #12]
 8014a48:	4a0a      	ldr	r2, [pc, #40]	@ (8014a74 <tcp_bind+0x12c>)
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	6013      	str	r3, [r2, #0]
 8014a4e:	f005 fca1 	bl	801a394 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8014a52:	2300      	movs	r3, #0
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3720      	adds	r7, #32
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	08022868 	.word	0x08022868
 8014a60:	08020770 	.word	0x08020770
 8014a64:	08020904 	.word	0x08020904
 8014a68:	080207b4 	.word	0x080207b4
 8014a6c:	0802091c 	.word	0x0802091c
 8014a70:	08022840 	.word	0x08022840
 8014a74:	24016e10 	.word	0x24016e10

08014a78 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	4613      	mov	r3, r2
 8014a84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d106      	bne.n	8014a9a <tcp_accept_null+0x22>
 8014a8c:	4b07      	ldr	r3, [pc, #28]	@ (8014aac <tcp_accept_null+0x34>)
 8014a8e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014a92:	4907      	ldr	r1, [pc, #28]	@ (8014ab0 <tcp_accept_null+0x38>)
 8014a94:	4807      	ldr	r0, [pc, #28]	@ (8014ab4 <tcp_accept_null+0x3c>)
 8014a96:	f009 f98d 	bl	801ddb4 <iprintf>

  tcp_abort(pcb);
 8014a9a:	68b8      	ldr	r0, [r7, #8]
 8014a9c:	f7ff ff48 	bl	8014930 <tcp_abort>

  return ERR_ABRT;
 8014aa0:	f06f 030c 	mvn.w	r3, #12
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3710      	adds	r7, #16
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	08020770 	.word	0x08020770
 8014ab0:	08020944 	.word	0x08020944
 8014ab4:	080207b4 	.word	0x080207b4

08014ab8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b088      	sub	sp, #32
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d109      	bne.n	8014ae4 <tcp_listen_with_backlog_and_err+0x2c>
 8014ad0:	4b47      	ldr	r3, [pc, #284]	@ (8014bf0 <tcp_listen_with_backlog_and_err+0x138>)
 8014ad2:	f240 3259 	movw	r2, #857	@ 0x359
 8014ad6:	4947      	ldr	r1, [pc, #284]	@ (8014bf4 <tcp_listen_with_backlog_and_err+0x13c>)
 8014ad8:	4847      	ldr	r0, [pc, #284]	@ (8014bf8 <tcp_listen_with_backlog_and_err+0x140>)
 8014ada:	f009 f96b 	bl	801ddb4 <iprintf>
 8014ade:	23f0      	movs	r3, #240	@ 0xf0
 8014ae0:	76fb      	strb	r3, [r7, #27]
 8014ae2:	e079      	b.n	8014bd8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	7d1b      	ldrb	r3, [r3, #20]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d009      	beq.n	8014b00 <tcp_listen_with_backlog_and_err+0x48>
 8014aec:	4b40      	ldr	r3, [pc, #256]	@ (8014bf0 <tcp_listen_with_backlog_and_err+0x138>)
 8014aee:	f240 325a 	movw	r2, #858	@ 0x35a
 8014af2:	4942      	ldr	r1, [pc, #264]	@ (8014bfc <tcp_listen_with_backlog_and_err+0x144>)
 8014af4:	4840      	ldr	r0, [pc, #256]	@ (8014bf8 <tcp_listen_with_backlog_and_err+0x140>)
 8014af6:	f009 f95d 	bl	801ddb4 <iprintf>
 8014afa:	23f1      	movs	r3, #241	@ 0xf1
 8014afc:	76fb      	strb	r3, [r7, #27]
 8014afe:	e06b      	b.n	8014bd8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	7d1b      	ldrb	r3, [r3, #20]
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d104      	bne.n	8014b12 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8014b0c:	23f7      	movs	r3, #247	@ 0xf7
 8014b0e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014b10:	e062      	b.n	8014bd8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8014b12:	2002      	movs	r0, #2
 8014b14:	f7fe f9bc 	bl	8012e90 <memp_malloc>
 8014b18:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d102      	bne.n	8014b26 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8014b20:	23ff      	movs	r3, #255	@ 0xff
 8014b22:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014b24:	e058      	b.n	8014bd8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	691a      	ldr	r2, [r3, #16]
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	8ada      	ldrh	r2, [r3, #22]
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	2201      	movs	r2, #1
 8014b3a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	7d5a      	ldrb	r2, [r3, #21]
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	7a5a      	ldrb	r2, [r3, #9]
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	7ada      	ldrb	r2, [r3, #11]
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	7a9a      	ldrb	r2, [r3, #10]
 8014b5e:	69fb      	ldr	r3, [r7, #28]
 8014b60:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	8adb      	ldrh	r3, [r3, #22]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d021      	beq.n	8014bb6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014b72:	4b23      	ldr	r3, [pc, #140]	@ (8014c00 <tcp_listen_with_backlog_and_err+0x148>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	68fa      	ldr	r2, [r7, #12]
 8014b78:	429a      	cmp	r2, r3
 8014b7a:	d105      	bne.n	8014b88 <tcp_listen_with_backlog_and_err+0xd0>
 8014b7c:	4b20      	ldr	r3, [pc, #128]	@ (8014c00 <tcp_listen_with_backlog_and_err+0x148>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	4a1f      	ldr	r2, [pc, #124]	@ (8014c00 <tcp_listen_with_backlog_and_err+0x148>)
 8014b84:	6013      	str	r3, [r2, #0]
 8014b86:	e013      	b.n	8014bb0 <tcp_listen_with_backlog_and_err+0xf8>
 8014b88:	4b1d      	ldr	r3, [pc, #116]	@ (8014c00 <tcp_listen_with_backlog_and_err+0x148>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	617b      	str	r3, [r7, #20]
 8014b8e:	e00c      	b.n	8014baa <tcp_listen_with_backlog_and_err+0xf2>
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	68db      	ldr	r3, [r3, #12]
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d104      	bne.n	8014ba4 <tcp_listen_with_backlog_and_err+0xec>
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	68da      	ldr	r2, [r3, #12]
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	60da      	str	r2, [r3, #12]
 8014ba2:	e005      	b.n	8014bb0 <tcp_listen_with_backlog_and_err+0xf8>
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	68db      	ldr	r3, [r3, #12]
 8014ba8:	617b      	str	r3, [r7, #20]
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d1ef      	bne.n	8014b90 <tcp_listen_with_backlog_and_err+0xd8>
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f7ff fb76 	bl	80142a8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8014bbc:	69fb      	ldr	r3, [r7, #28]
 8014bbe:	4a11      	ldr	r2, [pc, #68]	@ (8014c04 <tcp_listen_with_backlog_and_err+0x14c>)
 8014bc0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8014bc2:	4b11      	ldr	r3, [pc, #68]	@ (8014c08 <tcp_listen_with_backlog_and_err+0x150>)
 8014bc4:	681a      	ldr	r2, [r3, #0]
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	60da      	str	r2, [r3, #12]
 8014bca:	4a0f      	ldr	r2, [pc, #60]	@ (8014c08 <tcp_listen_with_backlog_and_err+0x150>)
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	6013      	str	r3, [r2, #0]
 8014bd0:	f005 fbe0 	bl	801a394 <tcp_timer_needed>
  res = ERR_OK;
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d002      	beq.n	8014be4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	7efa      	ldrb	r2, [r7, #27]
 8014be2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8014be4:	69fb      	ldr	r3, [r7, #28]
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3720      	adds	r7, #32
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	08020770 	.word	0x08020770
 8014bf4:	08020964 	.word	0x08020964
 8014bf8:	080207b4 	.word	0x080207b4
 8014bfc:	08020994 	.word	0x08020994
 8014c00:	24016e10 	.word	0x24016e10
 8014c04:	08014a79 	.word	0x08014a79
 8014c08:	24016e14 	.word	0x24016e14

08014c0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <tcp_update_rcv_ann_wnd+0x1c>
 8014c1a:	4b25      	ldr	r3, [pc, #148]	@ (8014cb0 <tcp_update_rcv_ann_wnd+0xa4>)
 8014c1c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014c20:	4924      	ldr	r1, [pc, #144]	@ (8014cb4 <tcp_update_rcv_ann_wnd+0xa8>)
 8014c22:	4825      	ldr	r0, [pc, #148]	@ (8014cb8 <tcp_update_rcv_ann_wnd+0xac>)
 8014c24:	f009 f8c6 	bl	801ddb4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014c30:	4413      	add	r3, r2
 8014c32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014c3c:	f640 3168 	movw	r1, #2920	@ 0xb68
 8014c40:	428a      	cmp	r2, r1
 8014c42:	bf28      	it	cs
 8014c44:	460a      	movcs	r2, r1
 8014c46:	b292      	uxth	r2, r2
 8014c48:	4413      	add	r3, r2
 8014c4a:	68fa      	ldr	r2, [r7, #12]
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	db08      	blt.n	8014c64 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c5e:	68fa      	ldr	r2, [r7, #12]
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	e020      	b.n	8014ca6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c6c:	1ad3      	subs	r3, r2, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	dd03      	ble.n	8014c7a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2200      	movs	r2, #0
 8014c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014c78:	e014      	b.n	8014ca4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c82:	1ad3      	subs	r3, r2, r3
 8014c84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c8c:	d306      	bcc.n	8014c9c <tcp_update_rcv_ann_wnd+0x90>
 8014c8e:	4b08      	ldr	r3, [pc, #32]	@ (8014cb0 <tcp_update_rcv_ann_wnd+0xa4>)
 8014c90:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8014c94:	4909      	ldr	r1, [pc, #36]	@ (8014cbc <tcp_update_rcv_ann_wnd+0xb0>)
 8014c96:	4808      	ldr	r0, [pc, #32]	@ (8014cb8 <tcp_update_rcv_ann_wnd+0xac>)
 8014c98:	f009 f88c 	bl	801ddb4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	b29a      	uxth	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8014ca4:	2300      	movs	r3, #0
  }
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3710      	adds	r7, #16
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	08020770 	.word	0x08020770
 8014cb4:	080209cc 	.word	0x080209cc
 8014cb8:	080207b4 	.word	0x080207b4
 8014cbc:	080209f0 	.word	0x080209f0

08014cc0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	460b      	mov	r3, r1
 8014cca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d107      	bne.n	8014ce2 <tcp_recved+0x22>
 8014cd2:	4b20      	ldr	r3, [pc, #128]	@ (8014d54 <tcp_recved+0x94>)
 8014cd4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8014cd8:	491f      	ldr	r1, [pc, #124]	@ (8014d58 <tcp_recved+0x98>)
 8014cda:	4820      	ldr	r0, [pc, #128]	@ (8014d5c <tcp_recved+0x9c>)
 8014cdc:	f009 f86a 	bl	801ddb4 <iprintf>
 8014ce0:	e034      	b.n	8014d4c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	7d1b      	ldrb	r3, [r3, #20]
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	d106      	bne.n	8014cf8 <tcp_recved+0x38>
 8014cea:	4b1a      	ldr	r3, [pc, #104]	@ (8014d54 <tcp_recved+0x94>)
 8014cec:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8014cf0:	491b      	ldr	r1, [pc, #108]	@ (8014d60 <tcp_recved+0xa0>)
 8014cf2:	481a      	ldr	r0, [pc, #104]	@ (8014d5c <tcp_recved+0x9c>)
 8014cf4:	f009 f85e 	bl	801ddb4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014cfc:	887b      	ldrh	r3, [r7, #2]
 8014cfe:	4413      	add	r3, r2
 8014d00:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014d02:	89fb      	ldrh	r3, [r7, #14]
 8014d04:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8014d08:	4293      	cmp	r3, r2
 8014d0a:	d804      	bhi.n	8014d16 <tcp_recved+0x56>
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d10:	89fa      	ldrh	r2, [r7, #14]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d204      	bcs.n	8014d20 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8014d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014d1e:	e002      	b.n	8014d26 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	89fa      	ldrh	r2, [r7, #14]
 8014d24:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7ff ff70 	bl	8014c0c <tcp_update_rcv_ann_wnd>
 8014d2c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8014d34:	4293      	cmp	r3, r2
 8014d36:	d909      	bls.n	8014d4c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	8b5b      	ldrh	r3, [r3, #26]
 8014d3c:	f043 0302 	orr.w	r3, r3, #2
 8014d40:	b29a      	uxth	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f004 fbae 	bl	80194a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014d4c:	3710      	adds	r7, #16
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	08020770 	.word	0x08020770
 8014d58:	08020a0c 	.word	0x08020a0c
 8014d5c:	080207b4 	.word	0x080207b4
 8014d60:	08020a24 	.word	0x08020a24

08014d64 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8014de8 <tcp_new_port+0x84>)
 8014d70:	881b      	ldrh	r3, [r3, #0]
 8014d72:	3301      	adds	r3, #1
 8014d74:	b29a      	uxth	r2, r3
 8014d76:	4b1c      	ldr	r3, [pc, #112]	@ (8014de8 <tcp_new_port+0x84>)
 8014d78:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8014de8 <tcp_new_port+0x84>)
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d82:	4293      	cmp	r3, r2
 8014d84:	d103      	bne.n	8014d8e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014d86:	4b18      	ldr	r3, [pc, #96]	@ (8014de8 <tcp_new_port+0x84>)
 8014d88:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014d8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014d8e:	2300      	movs	r3, #0
 8014d90:	71fb      	strb	r3, [r7, #7]
 8014d92:	e01e      	b.n	8014dd2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014d94:	79fb      	ldrb	r3, [r7, #7]
 8014d96:	4a15      	ldr	r2, [pc, #84]	@ (8014dec <tcp_new_port+0x88>)
 8014d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	603b      	str	r3, [r7, #0]
 8014da0:	e011      	b.n	8014dc6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	8ada      	ldrh	r2, [r3, #22]
 8014da6:	4b10      	ldr	r3, [pc, #64]	@ (8014de8 <tcp_new_port+0x84>)
 8014da8:	881b      	ldrh	r3, [r3, #0]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d108      	bne.n	8014dc0 <tcp_new_port+0x5c>
        n++;
 8014dae:	88bb      	ldrh	r3, [r7, #4]
 8014db0:	3301      	adds	r3, #1
 8014db2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014db4:	88bb      	ldrh	r3, [r7, #4]
 8014db6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014dba:	d3d8      	bcc.n	8014d6e <tcp_new_port+0xa>
          return 0;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	e00d      	b.n	8014ddc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	603b      	str	r3, [r7, #0]
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d1ea      	bne.n	8014da2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014dcc:	79fb      	ldrb	r3, [r7, #7]
 8014dce:	3301      	adds	r3, #1
 8014dd0:	71fb      	strb	r3, [r7, #7]
 8014dd2:	79fb      	ldrb	r3, [r7, #7]
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	d9dd      	bls.n	8014d94 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014dd8:	4b03      	ldr	r3, [pc, #12]	@ (8014de8 <tcp_new_port+0x84>)
 8014dda:	881b      	ldrh	r3, [r3, #0]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	370c      	adds	r7, #12
 8014de0:	46bd      	mov	sp, r7
 8014de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de6:	4770      	bx	lr
 8014de8:	24000028 	.word	0x24000028
 8014dec:	08022840 	.word	0x08022840

08014df0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014df0:	b5b0      	push	{r4, r5, r7, lr}
 8014df2:	b090      	sub	sp, #64	@ 0x40
 8014df4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014df6:	2300      	movs	r3, #0
 8014df8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8014dfc:	4b95      	ldr	r3, [pc, #596]	@ (8015054 <tcp_slowtmr+0x264>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	3301      	adds	r3, #1
 8014e02:	4a94      	ldr	r2, [pc, #592]	@ (8015054 <tcp_slowtmr+0x264>)
 8014e04:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014e06:	4b94      	ldr	r3, [pc, #592]	@ (8015058 <tcp_slowtmr+0x268>)
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	b2da      	uxtb	r2, r3
 8014e0e:	4b92      	ldr	r3, [pc, #584]	@ (8015058 <tcp_slowtmr+0x268>)
 8014e10:	701a      	strb	r2, [r3, #0]
 8014e12:	e000      	b.n	8014e16 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8014e14:	bf00      	nop
  prev = NULL;
 8014e16:	2300      	movs	r3, #0
 8014e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8014e1a:	4b90      	ldr	r3, [pc, #576]	@ (801505c <tcp_slowtmr+0x26c>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014e20:	e29d      	b.n	801535e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e24:	7d1b      	ldrb	r3, [r3, #20]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d106      	bne.n	8014e38 <tcp_slowtmr+0x48>
 8014e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8015060 <tcp_slowtmr+0x270>)
 8014e2c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014e30:	498c      	ldr	r1, [pc, #560]	@ (8015064 <tcp_slowtmr+0x274>)
 8014e32:	488d      	ldr	r0, [pc, #564]	@ (8015068 <tcp_slowtmr+0x278>)
 8014e34:	f008 ffbe 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e3a:	7d1b      	ldrb	r3, [r3, #20]
 8014e3c:	2b01      	cmp	r3, #1
 8014e3e:	d106      	bne.n	8014e4e <tcp_slowtmr+0x5e>
 8014e40:	4b87      	ldr	r3, [pc, #540]	@ (8015060 <tcp_slowtmr+0x270>)
 8014e42:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8014e46:	4989      	ldr	r1, [pc, #548]	@ (801506c <tcp_slowtmr+0x27c>)
 8014e48:	4887      	ldr	r0, [pc, #540]	@ (8015068 <tcp_slowtmr+0x278>)
 8014e4a:	f008 ffb3 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e50:	7d1b      	ldrb	r3, [r3, #20]
 8014e52:	2b0a      	cmp	r3, #10
 8014e54:	d106      	bne.n	8014e64 <tcp_slowtmr+0x74>
 8014e56:	4b82      	ldr	r3, [pc, #520]	@ (8015060 <tcp_slowtmr+0x270>)
 8014e58:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014e5c:	4984      	ldr	r1, [pc, #528]	@ (8015070 <tcp_slowtmr+0x280>)
 8014e5e:	4882      	ldr	r0, [pc, #520]	@ (8015068 <tcp_slowtmr+0x278>)
 8014e60:	f008 ffa8 	bl	801ddb4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e66:	7f9a      	ldrb	r2, [r3, #30]
 8014e68:	4b7b      	ldr	r3, [pc, #492]	@ (8015058 <tcp_slowtmr+0x268>)
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d105      	bne.n	8014e7c <tcp_slowtmr+0x8c>
      prev = pcb;
 8014e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e72:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8014e7a:	e270      	b.n	801535e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8014e7c:	4b76      	ldr	r3, [pc, #472]	@ (8015058 <tcp_slowtmr+0x268>)
 8014e7e:	781a      	ldrb	r2, [r3, #0]
 8014e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e82:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014e84:	2300      	movs	r3, #0
 8014e86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e92:	7d1b      	ldrb	r3, [r3, #20]
 8014e94:	2b02      	cmp	r3, #2
 8014e96:	d10a      	bne.n	8014eae <tcp_slowtmr+0xbe>
 8014e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014e9e:	2b05      	cmp	r3, #5
 8014ea0:	d905      	bls.n	8014eae <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014eac:	e11e      	b.n	80150ec <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014eb4:	2b0b      	cmp	r3, #11
 8014eb6:	d905      	bls.n	8014ec4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ec2:	e113      	b.n	80150ec <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8014ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ec6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d075      	beq.n	8014fba <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d006      	beq.n	8014ee4 <tcp_slowtmr+0xf4>
 8014ed6:	4b62      	ldr	r3, [pc, #392]	@ (8015060 <tcp_slowtmr+0x270>)
 8014ed8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014edc:	4965      	ldr	r1, [pc, #404]	@ (8015074 <tcp_slowtmr+0x284>)
 8014ede:	4862      	ldr	r0, [pc, #392]	@ (8015068 <tcp_slowtmr+0x278>)
 8014ee0:	f008 ff68 	bl	801ddb4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d106      	bne.n	8014efa <tcp_slowtmr+0x10a>
 8014eec:	4b5c      	ldr	r3, [pc, #368]	@ (8015060 <tcp_slowtmr+0x270>)
 8014eee:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8014ef2:	4961      	ldr	r1, [pc, #388]	@ (8015078 <tcp_slowtmr+0x288>)
 8014ef4:	485c      	ldr	r0, [pc, #368]	@ (8015068 <tcp_slowtmr+0x278>)
 8014ef6:	f008 ff5d 	bl	801ddb4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014efc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014f00:	2b0b      	cmp	r3, #11
 8014f02:	d905      	bls.n	8014f10 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8014f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f08:	3301      	adds	r3, #1
 8014f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014f0e:	e0ed      	b.n	80150ec <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014f16:	3b01      	subs	r3, #1
 8014f18:	4a58      	ldr	r2, [pc, #352]	@ (801507c <tcp_slowtmr+0x28c>)
 8014f1a:	5cd3      	ldrb	r3, [r2, r3]
 8014f1c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f20:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014f24:	7c7a      	ldrb	r2, [r7, #17]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d907      	bls.n	8014f3a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8014f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f2c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014f30:	3301      	adds	r3, #1
 8014f32:	b2da      	uxtb	r2, r3
 8014f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f36:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8014f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014f40:	7c7a      	ldrb	r2, [r7, #17]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	f200 80d2 	bhi.w	80150ec <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8014f48:	2301      	movs	r3, #1
 8014f4a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8014f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d108      	bne.n	8014f68 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014f56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f58:	f005 f94e 	bl	801a1f8 <tcp_zero_window_probe>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d014      	beq.n	8014f8c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8014f62:	2300      	movs	r3, #0
 8014f64:	623b      	str	r3, [r7, #32]
 8014f66:	e011      	b.n	8014f8c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014f6e:	4619      	mov	r1, r3
 8014f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f72:	f004 f813 	bl	8018f9c <tcp_split_unsent_seg>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d107      	bne.n	8014f8c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014f7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f7e:	f004 fa93 	bl	80194a8 <tcp_output>
 8014f82:	4603      	mov	r3, r0
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d101      	bne.n	8014f8c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014f8c:	6a3b      	ldr	r3, [r7, #32]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	f000 80ac 	beq.w	80150ec <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f96:	2200      	movs	r2, #0
 8014f98:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014fa2:	2b06      	cmp	r3, #6
 8014fa4:	f200 80a2 	bhi.w	80150ec <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014faa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014fae:	3301      	adds	r3, #1
 8014fb0:	b2da      	uxtb	r2, r3
 8014fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014fb8:	e098      	b.n	80150ec <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	db0f      	blt.n	8014fe4 <tcp_slowtmr+0x1f4>
 8014fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014fca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d008      	beq.n	8014fe4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8014fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014fd8:	b29b      	uxth	r3, r3
 8014fda:	3301      	adds	r3, #1
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	b21a      	sxth	r2, r3
 8014fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8014fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fe6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8014fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	db7b      	blt.n	80150ec <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ff6:	f004 fd4b 	bl	8019a90 <tcp_rexmit_rto_prepare>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d007      	beq.n	8015010 <tcp_slowtmr+0x220>
 8015000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015004:	2b00      	cmp	r3, #0
 8015006:	d171      	bne.n	80150ec <tcp_slowtmr+0x2fc>
 8015008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801500c:	2b00      	cmp	r3, #0
 801500e:	d06d      	beq.n	80150ec <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015012:	7d1b      	ldrb	r3, [r3, #20]
 8015014:	2b02      	cmp	r3, #2
 8015016:	d03a      	beq.n	801508e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801501a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801501e:	2b0c      	cmp	r3, #12
 8015020:	bf28      	it	cs
 8015022:	230c      	movcs	r3, #12
 8015024:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015028:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801502c:	10db      	asrs	r3, r3, #3
 801502e:	b21b      	sxth	r3, r3
 8015030:	461a      	mov	r2, r3
 8015032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015034:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015038:	4413      	add	r3, r2
 801503a:	7efa      	ldrb	r2, [r7, #27]
 801503c:	4910      	ldr	r1, [pc, #64]	@ (8015080 <tcp_slowtmr+0x290>)
 801503e:	5c8a      	ldrb	r2, [r1, r2]
 8015040:	4093      	lsls	r3, r2
 8015042:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801504a:	4293      	cmp	r3, r2
 801504c:	dc1a      	bgt.n	8015084 <tcp_slowtmr+0x294>
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	b21a      	sxth	r2, r3
 8015052:	e019      	b.n	8015088 <tcp_slowtmr+0x298>
 8015054:	24016e0c 	.word	0x24016e0c
 8015058:	24016e22 	.word	0x24016e22
 801505c:	24016e18 	.word	0x24016e18
 8015060:	08020770 	.word	0x08020770
 8015064:	08020ab4 	.word	0x08020ab4
 8015068:	080207b4 	.word	0x080207b4
 801506c:	08020ae0 	.word	0x08020ae0
 8015070:	08020b0c 	.word	0x08020b0c
 8015074:	08020b3c 	.word	0x08020b3c
 8015078:	08020b70 	.word	0x08020b70
 801507c:	08022838 	.word	0x08022838
 8015080:	08022828 	.word	0x08022828
 8015084:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801508a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015090:	2200      	movs	r2, #0
 8015092:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015096:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801509c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80150a0:	4293      	cmp	r3, r2
 80150a2:	bf28      	it	cs
 80150a4:	4613      	movcs	r3, r2
 80150a6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80150a8:	8a7b      	ldrh	r3, [r7, #18]
 80150aa:	085b      	lsrs	r3, r3, #1
 80150ac:	b29a      	uxth	r2, r3
 80150ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80150b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80150ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80150be:	005b      	lsls	r3, r3, #1
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d206      	bcs.n	80150d4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80150c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80150ca:	005b      	lsls	r3, r3, #1
 80150cc:	b29a      	uxth	r2, r3
 80150ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80150d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150d6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80150d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80150de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150e0:	2200      	movs	r2, #0
 80150e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80150e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80150e8:	f004 fd42 	bl	8019b70 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80150ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ee:	7d1b      	ldrb	r3, [r3, #20]
 80150f0:	2b06      	cmp	r3, #6
 80150f2:	d111      	bne.n	8015118 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80150f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150f6:	8b5b      	ldrh	r3, [r3, #26]
 80150f8:	f003 0310 	and.w	r3, r3, #16
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d00b      	beq.n	8015118 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015100:	4b9c      	ldr	r3, [pc, #624]	@ (8015374 <tcp_slowtmr+0x584>)
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015106:	6a1b      	ldr	r3, [r3, #32]
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	2b28      	cmp	r3, #40	@ 0x28
 801510c:	d904      	bls.n	8015118 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801510e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015112:	3301      	adds	r3, #1
 8015114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801511a:	7a5b      	ldrb	r3, [r3, #9]
 801511c:	f003 0308 	and.w	r3, r3, #8
 8015120:	2b00      	cmp	r3, #0
 8015122:	d04a      	beq.n	80151ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015126:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015128:	2b04      	cmp	r3, #4
 801512a:	d003      	beq.n	8015134 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801512e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015130:	2b07      	cmp	r3, #7
 8015132:	d142      	bne.n	80151ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015134:	4b8f      	ldr	r3, [pc, #572]	@ (8015374 <tcp_slowtmr+0x584>)
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801513a:	6a1b      	ldr	r3, [r3, #32]
 801513c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801513e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015140:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015144:	4b8c      	ldr	r3, [pc, #560]	@ (8015378 <tcp_slowtmr+0x588>)
 8015146:	440b      	add	r3, r1
 8015148:	498c      	ldr	r1, [pc, #560]	@ (801537c <tcp_slowtmr+0x58c>)
 801514a:	fba1 1303 	umull	r1, r3, r1, r3
 801514e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015150:	429a      	cmp	r2, r3
 8015152:	d90a      	bls.n	801516a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015158:	3301      	adds	r3, #1
 801515a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801515e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015162:	3301      	adds	r3, #1
 8015164:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015168:	e027      	b.n	80151ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801516a:	4b82      	ldr	r3, [pc, #520]	@ (8015374 <tcp_slowtmr+0x584>)
 801516c:	681a      	ldr	r2, [r3, #0]
 801516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015170:	6a1b      	ldr	r3, [r3, #32]
 8015172:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015176:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801517c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015180:	4618      	mov	r0, r3
 8015182:	4b7f      	ldr	r3, [pc, #508]	@ (8015380 <tcp_slowtmr+0x590>)
 8015184:	fb00 f303 	mul.w	r3, r0, r3
 8015188:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801518a:	497c      	ldr	r1, [pc, #496]	@ (801537c <tcp_slowtmr+0x58c>)
 801518c:	fba1 1303 	umull	r1, r3, r1, r3
 8015190:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015192:	429a      	cmp	r2, r3
 8015194:	d911      	bls.n	80151ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015196:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015198:	f004 ffee 	bl	801a178 <tcp_keepalive>
 801519c:	4603      	mov	r3, r0
 801519e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80151a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d107      	bne.n	80151ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80151aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80151b0:	3301      	adds	r3, #1
 80151b2:	b2da      	uxtb	r2, r3
 80151b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151b6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80151ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d011      	beq.n	80151e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80151c2:	4b6c      	ldr	r3, [pc, #432]	@ (8015374 <tcp_slowtmr+0x584>)
 80151c4:	681a      	ldr	r2, [r3, #0]
 80151c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c8:	6a1b      	ldr	r3, [r3, #32]
 80151ca:	1ad2      	subs	r2, r2, r3
 80151cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80151d2:	4619      	mov	r1, r3
 80151d4:	460b      	mov	r3, r1
 80151d6:	005b      	lsls	r3, r3, #1
 80151d8:	440b      	add	r3, r1
 80151da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80151dc:	429a      	cmp	r2, r3
 80151de:	d302      	bcc.n	80151e6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80151e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80151e2:	f000 fead 	bl	8015f40 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80151e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e8:	7d1b      	ldrb	r3, [r3, #20]
 80151ea:	2b03      	cmp	r3, #3
 80151ec:	d10b      	bne.n	8015206 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80151ee:	4b61      	ldr	r3, [pc, #388]	@ (8015374 <tcp_slowtmr+0x584>)
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f4:	6a1b      	ldr	r3, [r3, #32]
 80151f6:	1ad3      	subs	r3, r2, r3
 80151f8:	2b28      	cmp	r3, #40	@ 0x28
 80151fa:	d904      	bls.n	8015206 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80151fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015200:	3301      	adds	r3, #1
 8015202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015208:	7d1b      	ldrb	r3, [r3, #20]
 801520a:	2b09      	cmp	r3, #9
 801520c:	d10b      	bne.n	8015226 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801520e:	4b59      	ldr	r3, [pc, #356]	@ (8015374 <tcp_slowtmr+0x584>)
 8015210:	681a      	ldr	r2, [r3, #0]
 8015212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015214:	6a1b      	ldr	r3, [r3, #32]
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	2bf0      	cmp	r3, #240	@ 0xf0
 801521a:	d904      	bls.n	8015226 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801521c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015220:	3301      	adds	r3, #1
 8015222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801522a:	2b00      	cmp	r3, #0
 801522c:	d060      	beq.n	80152f0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015234:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015236:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015238:	f000 fcce 	bl	8015bd8 <tcp_pcb_purge>
      if (prev != NULL) {
 801523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801523e:	2b00      	cmp	r3, #0
 8015240:	d010      	beq.n	8015264 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015242:	4b50      	ldr	r3, [pc, #320]	@ (8015384 <tcp_slowtmr+0x594>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015248:	429a      	cmp	r2, r3
 801524a:	d106      	bne.n	801525a <tcp_slowtmr+0x46a>
 801524c:	4b4e      	ldr	r3, [pc, #312]	@ (8015388 <tcp_slowtmr+0x598>)
 801524e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8015252:	494e      	ldr	r1, [pc, #312]	@ (801538c <tcp_slowtmr+0x59c>)
 8015254:	484e      	ldr	r0, [pc, #312]	@ (8015390 <tcp_slowtmr+0x5a0>)
 8015256:	f008 fdad 	bl	801ddb4 <iprintf>
        prev->next = pcb->next;
 801525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801525c:	68da      	ldr	r2, [r3, #12]
 801525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015260:	60da      	str	r2, [r3, #12]
 8015262:	e00f      	b.n	8015284 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015264:	4b47      	ldr	r3, [pc, #284]	@ (8015384 <tcp_slowtmr+0x594>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801526a:	429a      	cmp	r2, r3
 801526c:	d006      	beq.n	801527c <tcp_slowtmr+0x48c>
 801526e:	4b46      	ldr	r3, [pc, #280]	@ (8015388 <tcp_slowtmr+0x598>)
 8015270:	f240 5271 	movw	r2, #1393	@ 0x571
 8015274:	4947      	ldr	r1, [pc, #284]	@ (8015394 <tcp_slowtmr+0x5a4>)
 8015276:	4846      	ldr	r0, [pc, #280]	@ (8015390 <tcp_slowtmr+0x5a0>)
 8015278:	f008 fd9c 	bl	801ddb4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801527c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	4a40      	ldr	r2, [pc, #256]	@ (8015384 <tcp_slowtmr+0x594>)
 8015282:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015284:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015288:	2b00      	cmp	r3, #0
 801528a:	d013      	beq.n	80152b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015292:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015294:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015298:	3304      	adds	r3, #4
 801529a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801529c:	8ad2      	ldrh	r2, [r2, #22]
 801529e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80152a0:	8b09      	ldrh	r1, [r1, #24]
 80152a2:	9102      	str	r1, [sp, #8]
 80152a4:	9201      	str	r2, [sp, #4]
 80152a6:	9300      	str	r3, [sp, #0]
 80152a8:	462b      	mov	r3, r5
 80152aa:	4622      	mov	r2, r4
 80152ac:	4601      	mov	r1, r0
 80152ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152b0:	f004 feae 	bl	801a010 <tcp_rst>
      err_arg = pcb->callback_arg;
 80152b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b6:	691b      	ldr	r3, [r3, #16]
 80152b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80152ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152bc:	7d1b      	ldrb	r3, [r3, #20]
 80152be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80152c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80152c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c6:	68db      	ldr	r3, [r3, #12]
 80152c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80152ca:	6838      	ldr	r0, [r7, #0]
 80152cc:	f7fe ffec 	bl	80142a8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80152d0:	4b31      	ldr	r3, [pc, #196]	@ (8015398 <tcp_slowtmr+0x5a8>)
 80152d2:	2200      	movs	r2, #0
 80152d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d004      	beq.n	80152e6 <tcp_slowtmr+0x4f6>
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f06f 010c 	mvn.w	r1, #12
 80152e2:	68b8      	ldr	r0, [r7, #8]
 80152e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80152e6:	4b2c      	ldr	r3, [pc, #176]	@ (8015398 <tcp_slowtmr+0x5a8>)
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d037      	beq.n	801535e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80152ee:	e592      	b.n	8014e16 <tcp_slowtmr+0x26>
      prev = pcb;
 80152f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80152f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80152fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152fc:	7f1b      	ldrb	r3, [r3, #28]
 80152fe:	3301      	adds	r3, #1
 8015300:	b2da      	uxtb	r2, r3
 8015302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015304:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015308:	7f1a      	ldrb	r2, [r3, #28]
 801530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801530c:	7f5b      	ldrb	r3, [r3, #29]
 801530e:	429a      	cmp	r2, r3
 8015310:	d325      	bcc.n	801535e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015314:	2200      	movs	r2, #0
 8015316:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015318:	4b1f      	ldr	r3, [pc, #124]	@ (8015398 <tcp_slowtmr+0x5a8>)
 801531a:	2200      	movs	r2, #0
 801531c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00b      	beq.n	8015340 <tcp_slowtmr+0x550>
 8015328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801532a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801532e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015330:	6912      	ldr	r2, [r2, #16]
 8015332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015334:	4610      	mov	r0, r2
 8015336:	4798      	blx	r3
 8015338:	4603      	mov	r3, r0
 801533a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801533e:	e002      	b.n	8015346 <tcp_slowtmr+0x556>
 8015340:	2300      	movs	r3, #0
 8015342:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015346:	4b14      	ldr	r3, [pc, #80]	@ (8015398 <tcp_slowtmr+0x5a8>)
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	f47f ad62 	bne.w	8014e14 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015350:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015354:	2b00      	cmp	r3, #0
 8015356:	d102      	bne.n	801535e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801535a:	f004 f8a5 	bl	80194a8 <tcp_output>
  while (pcb != NULL) {
 801535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015360:	2b00      	cmp	r3, #0
 8015362:	f47f ad5e 	bne.w	8014e22 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015366:	2300      	movs	r3, #0
 8015368:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801536a:	4b0c      	ldr	r3, [pc, #48]	@ (801539c <tcp_slowtmr+0x5ac>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015370:	e069      	b.n	8015446 <tcp_slowtmr+0x656>
 8015372:	bf00      	nop
 8015374:	24016e0c 	.word	0x24016e0c
 8015378:	000a4cb8 	.word	0x000a4cb8
 801537c:	10624dd3 	.word	0x10624dd3
 8015380:	000124f8 	.word	0x000124f8
 8015384:	24016e18 	.word	0x24016e18
 8015388:	08020770 	.word	0x08020770
 801538c:	08020ba8 	.word	0x08020ba8
 8015390:	080207b4 	.word	0x080207b4
 8015394:	08020bd4 	.word	0x08020bd4
 8015398:	24016e20 	.word	0x24016e20
 801539c:	24016e1c 	.word	0x24016e1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80153a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a2:	7d1b      	ldrb	r3, [r3, #20]
 80153a4:	2b0a      	cmp	r3, #10
 80153a6:	d006      	beq.n	80153b6 <tcp_slowtmr+0x5c6>
 80153a8:	4b2b      	ldr	r3, [pc, #172]	@ (8015458 <tcp_slowtmr+0x668>)
 80153aa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80153ae:	492b      	ldr	r1, [pc, #172]	@ (801545c <tcp_slowtmr+0x66c>)
 80153b0:	482b      	ldr	r0, [pc, #172]	@ (8015460 <tcp_slowtmr+0x670>)
 80153b2:	f008 fcff 	bl	801ddb4 <iprintf>
    pcb_remove = 0;
 80153b6:	2300      	movs	r3, #0
 80153b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80153bc:	4b29      	ldr	r3, [pc, #164]	@ (8015464 <tcp_slowtmr+0x674>)
 80153be:	681a      	ldr	r2, [r3, #0]
 80153c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c2:	6a1b      	ldr	r3, [r3, #32]
 80153c4:	1ad3      	subs	r3, r2, r3
 80153c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80153c8:	d904      	bls.n	80153d4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80153ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153ce:	3301      	adds	r3, #1
 80153d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80153d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d02f      	beq.n	801543c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80153dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80153de:	f000 fbfb 	bl	8015bd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80153e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d010      	beq.n	801540a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80153e8:	4b1f      	ldr	r3, [pc, #124]	@ (8015468 <tcp_slowtmr+0x678>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d106      	bne.n	8015400 <tcp_slowtmr+0x610>
 80153f2:	4b19      	ldr	r3, [pc, #100]	@ (8015458 <tcp_slowtmr+0x668>)
 80153f4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80153f8:	491c      	ldr	r1, [pc, #112]	@ (801546c <tcp_slowtmr+0x67c>)
 80153fa:	4819      	ldr	r0, [pc, #100]	@ (8015460 <tcp_slowtmr+0x670>)
 80153fc:	f008 fcda 	bl	801ddb4 <iprintf>
        prev->next = pcb->next;
 8015400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015402:	68da      	ldr	r2, [r3, #12]
 8015404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015406:	60da      	str	r2, [r3, #12]
 8015408:	e00f      	b.n	801542a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801540a:	4b17      	ldr	r3, [pc, #92]	@ (8015468 <tcp_slowtmr+0x678>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015410:	429a      	cmp	r2, r3
 8015412:	d006      	beq.n	8015422 <tcp_slowtmr+0x632>
 8015414:	4b10      	ldr	r3, [pc, #64]	@ (8015458 <tcp_slowtmr+0x668>)
 8015416:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801541a:	4915      	ldr	r1, [pc, #84]	@ (8015470 <tcp_slowtmr+0x680>)
 801541c:	4810      	ldr	r0, [pc, #64]	@ (8015460 <tcp_slowtmr+0x670>)
 801541e:	f008 fcc9 	bl	801ddb4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	4a10      	ldr	r2, [pc, #64]	@ (8015468 <tcp_slowtmr+0x678>)
 8015428:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015430:	68db      	ldr	r3, [r3, #12]
 8015432:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015434:	69f8      	ldr	r0, [r7, #28]
 8015436:	f7fe ff37 	bl	80142a8 <tcp_free>
 801543a:	e004      	b.n	8015446 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801543e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015448:	2b00      	cmp	r3, #0
 801544a:	d1a9      	bne.n	80153a0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801544c:	bf00      	nop
 801544e:	bf00      	nop
 8015450:	3730      	adds	r7, #48	@ 0x30
 8015452:	46bd      	mov	sp, r7
 8015454:	bdb0      	pop	{r4, r5, r7, pc}
 8015456:	bf00      	nop
 8015458:	08020770 	.word	0x08020770
 801545c:	08020c00 	.word	0x08020c00
 8015460:	080207b4 	.word	0x080207b4
 8015464:	24016e0c 	.word	0x24016e0c
 8015468:	24016e1c 	.word	0x24016e1c
 801546c:	08020c30 	.word	0x08020c30
 8015470:	08020c58 	.word	0x08020c58

08015474 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b082      	sub	sp, #8
 8015478:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801547a:	4b2d      	ldr	r3, [pc, #180]	@ (8015530 <tcp_fasttmr+0xbc>)
 801547c:	781b      	ldrb	r3, [r3, #0]
 801547e:	3301      	adds	r3, #1
 8015480:	b2da      	uxtb	r2, r3
 8015482:	4b2b      	ldr	r3, [pc, #172]	@ (8015530 <tcp_fasttmr+0xbc>)
 8015484:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015486:	4b2b      	ldr	r3, [pc, #172]	@ (8015534 <tcp_fasttmr+0xc0>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801548c:	e048      	b.n	8015520 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	7f9a      	ldrb	r2, [r3, #30]
 8015492:	4b27      	ldr	r3, [pc, #156]	@ (8015530 <tcp_fasttmr+0xbc>)
 8015494:	781b      	ldrb	r3, [r3, #0]
 8015496:	429a      	cmp	r2, r3
 8015498:	d03f      	beq.n	801551a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801549a:	4b25      	ldr	r3, [pc, #148]	@ (8015530 <tcp_fasttmr+0xbc>)
 801549c:	781a      	ldrb	r2, [r3, #0]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	8b5b      	ldrh	r3, [r3, #26]
 80154a6:	f003 0301 	and.w	r3, r3, #1
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d010      	beq.n	80154d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	8b5b      	ldrh	r3, [r3, #26]
 80154b2:	f043 0302 	orr.w	r3, r3, #2
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f003 fff3 	bl	80194a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	8b5b      	ldrh	r3, [r3, #26]
 80154c6:	f023 0303 	bic.w	r3, r3, #3
 80154ca:	b29a      	uxth	r2, r3
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	8b5b      	ldrh	r3, [r3, #26]
 80154d4:	f003 0308 	and.w	r3, r3, #8
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d009      	beq.n	80154f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	8b5b      	ldrh	r3, [r3, #26]
 80154e0:	f023 0308 	bic.w	r3, r3, #8
 80154e4:	b29a      	uxth	r2, r3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f7ff f870 	bl	80145d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00a      	beq.n	8015514 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80154fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015538 <tcp_fasttmr+0xc4>)
 8015500:	2200      	movs	r2, #0
 8015502:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f000 f819 	bl	801553c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801550a:	4b0b      	ldr	r3, [pc, #44]	@ (8015538 <tcp_fasttmr+0xc4>)
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d000      	beq.n	8015514 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015512:	e7b8      	b.n	8015486 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	607b      	str	r3, [r7, #4]
 8015518:	e002      	b.n	8015520 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	68db      	ldr	r3, [r3, #12]
 801551e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d1b3      	bne.n	801548e <tcp_fasttmr+0x1a>
    }
  }
}
 8015526:	bf00      	nop
 8015528:	bf00      	nop
 801552a:	3708      	adds	r7, #8
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}
 8015530:	24016e22 	.word	0x24016e22
 8015534:	24016e18 	.word	0x24016e18
 8015538:	24016e20 	.word	0x24016e20

0801553c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801553c:	b590      	push	{r4, r7, lr}
 801553e:	b085      	sub	sp, #20
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d109      	bne.n	801555e <tcp_process_refused_data+0x22>
 801554a:	4b38      	ldr	r3, [pc, #224]	@ (801562c <tcp_process_refused_data+0xf0>)
 801554c:	f240 6209 	movw	r2, #1545	@ 0x609
 8015550:	4937      	ldr	r1, [pc, #220]	@ (8015630 <tcp_process_refused_data+0xf4>)
 8015552:	4838      	ldr	r0, [pc, #224]	@ (8015634 <tcp_process_refused_data+0xf8>)
 8015554:	f008 fc2e 	bl	801ddb4 <iprintf>
 8015558:	f06f 030f 	mvn.w	r3, #15
 801555c:	e061      	b.n	8015622 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015562:	7b5b      	ldrb	r3, [r3, #13]
 8015564:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801556a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015578:	2b00      	cmp	r3, #0
 801557a:	d00b      	beq.n	8015594 <tcp_process_refused_data+0x58>
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6918      	ldr	r0, [r3, #16]
 8015586:	2300      	movs	r3, #0
 8015588:	68ba      	ldr	r2, [r7, #8]
 801558a:	6879      	ldr	r1, [r7, #4]
 801558c:	47a0      	blx	r4
 801558e:	4603      	mov	r3, r0
 8015590:	73fb      	strb	r3, [r7, #15]
 8015592:	e007      	b.n	80155a4 <tcp_process_refused_data+0x68>
 8015594:	2300      	movs	r3, #0
 8015596:	68ba      	ldr	r2, [r7, #8]
 8015598:	6879      	ldr	r1, [r7, #4]
 801559a:	2000      	movs	r0, #0
 801559c:	f000 f8a6 	bl	80156ec <tcp_recv_null>
 80155a0:	4603      	mov	r3, r0
 80155a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80155a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d12b      	bne.n	8015604 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80155ac:	7bbb      	ldrb	r3, [r7, #14]
 80155ae:	f003 0320 	and.w	r3, r3, #32
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d034      	beq.n	8015620 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155ba:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80155be:	4293      	cmp	r3, r2
 80155c0:	d005      	beq.n	80155ce <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155c6:	3301      	adds	r3, #1
 80155c8:	b29a      	uxth	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d00b      	beq.n	80155f0 <tcp_process_refused_data+0xb4>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6918      	ldr	r0, [r3, #16]
 80155e2:	2300      	movs	r3, #0
 80155e4:	2200      	movs	r2, #0
 80155e6:	6879      	ldr	r1, [r7, #4]
 80155e8:	47a0      	blx	r4
 80155ea:	4603      	mov	r3, r0
 80155ec:	73fb      	strb	r3, [r7, #15]
 80155ee:	e001      	b.n	80155f4 <tcp_process_refused_data+0xb8>
 80155f0:	2300      	movs	r3, #0
 80155f2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80155f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80155f8:	f113 0f0d 	cmn.w	r3, #13
 80155fc:	d110      	bne.n	8015620 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80155fe:	f06f 030c 	mvn.w	r3, #12
 8015602:	e00e      	b.n	8015622 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8015604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015608:	f113 0f0d 	cmn.w	r3, #13
 801560c:	d102      	bne.n	8015614 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801560e:	f06f 030c 	mvn.w	r3, #12
 8015612:	e006      	b.n	8015622 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	68ba      	ldr	r2, [r7, #8]
 8015618:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801561a:	f06f 0304 	mvn.w	r3, #4
 801561e:	e000      	b.n	8015622 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8015620:	2300      	movs	r3, #0
}
 8015622:	4618      	mov	r0, r3
 8015624:	3714      	adds	r7, #20
 8015626:	46bd      	mov	sp, r7
 8015628:	bd90      	pop	{r4, r7, pc}
 801562a:	bf00      	nop
 801562c:	08020770 	.word	0x08020770
 8015630:	08020c80 	.word	0x08020c80
 8015634:	080207b4 	.word	0x080207b4

08015638 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015640:	e007      	b.n	8015652 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f000 f80a 	bl	8015662 <tcp_seg_free>
    seg = next;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d1f4      	bne.n	8015642 <tcp_segs_free+0xa>
  }
}
 8015658:	bf00      	nop
 801565a:	bf00      	nop
 801565c:	3710      	adds	r7, #16
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b082      	sub	sp, #8
 8015666:	af00      	add	r7, sp, #0
 8015668:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d00c      	beq.n	801568a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	685b      	ldr	r3, [r3, #4]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d004      	beq.n	8015682 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	4618      	mov	r0, r3
 801567e:	f7fe fb57 	bl	8013d30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015682:	6879      	ldr	r1, [r7, #4]
 8015684:	2003      	movs	r0, #3
 8015686:	f7fd fc79 	bl	8012f7c <memp_free>
  }
}
 801568a:	bf00      	nop
 801568c:	3708      	adds	r7, #8
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
	...

08015694 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d106      	bne.n	80156b0 <tcp_seg_copy+0x1c>
 80156a2:	4b0f      	ldr	r3, [pc, #60]	@ (80156e0 <tcp_seg_copy+0x4c>)
 80156a4:	f240 6282 	movw	r2, #1666	@ 0x682
 80156a8:	490e      	ldr	r1, [pc, #56]	@ (80156e4 <tcp_seg_copy+0x50>)
 80156aa:	480f      	ldr	r0, [pc, #60]	@ (80156e8 <tcp_seg_copy+0x54>)
 80156ac:	f008 fb82 	bl	801ddb4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80156b0:	2003      	movs	r0, #3
 80156b2:	f7fd fbed 	bl	8012e90 <memp_malloc>
 80156b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d101      	bne.n	80156c2 <tcp_seg_copy+0x2e>
    return NULL;
 80156be:	2300      	movs	r3, #0
 80156c0:	e00a      	b.n	80156d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80156c2:	2210      	movs	r2, #16
 80156c4:	6879      	ldr	r1, [r7, #4]
 80156c6:	68f8      	ldr	r0, [r7, #12]
 80156c8:	f008 fda7 	bl	801e21a <memcpy>
  pbuf_ref(cseg->p);
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7fe fbd3 	bl	8013e7c <pbuf_ref>
  return cseg;
 80156d6:	68fb      	ldr	r3, [r7, #12]
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3710      	adds	r7, #16
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	08020770 	.word	0x08020770
 80156e4:	08020cc4 	.word	0x08020cc4
 80156e8:	080207b4 	.word	0x080207b4

080156ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	60f8      	str	r0, [r7, #12]
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	607a      	str	r2, [r7, #4]
 80156f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d109      	bne.n	8015714 <tcp_recv_null+0x28>
 8015700:	4b12      	ldr	r3, [pc, #72]	@ (801574c <tcp_recv_null+0x60>)
 8015702:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015706:	4912      	ldr	r1, [pc, #72]	@ (8015750 <tcp_recv_null+0x64>)
 8015708:	4812      	ldr	r0, [pc, #72]	@ (8015754 <tcp_recv_null+0x68>)
 801570a:	f008 fb53 	bl	801ddb4 <iprintf>
 801570e:	f06f 030f 	mvn.w	r3, #15
 8015712:	e016      	b.n	8015742 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d009      	beq.n	801572e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	891b      	ldrh	r3, [r3, #8]
 801571e:	4619      	mov	r1, r3
 8015720:	68b8      	ldr	r0, [r7, #8]
 8015722:	f7ff facd 	bl	8014cc0 <tcp_recved>
    pbuf_free(p);
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f7fe fb02 	bl	8013d30 <pbuf_free>
 801572c:	e008      	b.n	8015740 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801572e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d104      	bne.n	8015740 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015736:	68b8      	ldr	r0, [r7, #8]
 8015738:	f7fe ffb4 	bl	80146a4 <tcp_close>
 801573c:	4603      	mov	r3, r0
 801573e:	e000      	b.n	8015742 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3710      	adds	r7, #16
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	08020770 	.word	0x08020770
 8015750:	08020ce0 	.word	0x08020ce0
 8015754:	080207b4 	.word	0x080207b4

08015758 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af00      	add	r7, sp, #0
 801575e:	4603      	mov	r3, r0
 8015760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015766:	2b00      	cmp	r3, #0
 8015768:	db01      	blt.n	801576e <tcp_kill_prio+0x16>
 801576a:	79fb      	ldrb	r3, [r7, #7]
 801576c:	e000      	b.n	8015770 <tcp_kill_prio+0x18>
 801576e:	237f      	movs	r3, #127	@ 0x7f
 8015770:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015772:	7afb      	ldrb	r3, [r7, #11]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d034      	beq.n	80157e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015778:	7afb      	ldrb	r3, [r7, #11]
 801577a:	3b01      	subs	r3, #1
 801577c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801577e:	2300      	movs	r3, #0
 8015780:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015782:	2300      	movs	r3, #0
 8015784:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015786:	4b19      	ldr	r3, [pc, #100]	@ (80157ec <tcp_kill_prio+0x94>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	617b      	str	r3, [r7, #20]
 801578c:	e01f      	b.n	80157ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801578e:	697b      	ldr	r3, [r7, #20]
 8015790:	7d5b      	ldrb	r3, [r3, #21]
 8015792:	7afa      	ldrb	r2, [r7, #11]
 8015794:	429a      	cmp	r2, r3
 8015796:	d80c      	bhi.n	80157b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801579c:	7afa      	ldrb	r2, [r7, #11]
 801579e:	429a      	cmp	r2, r3
 80157a0:	d112      	bne.n	80157c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80157a2:	4b13      	ldr	r3, [pc, #76]	@ (80157f0 <tcp_kill_prio+0x98>)
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	6a1b      	ldr	r3, [r3, #32]
 80157aa:	1ad3      	subs	r3, r2, r3
 80157ac:	68fa      	ldr	r2, [r7, #12]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d80a      	bhi.n	80157c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80157b2:	4b0f      	ldr	r3, [pc, #60]	@ (80157f0 <tcp_kill_prio+0x98>)
 80157b4:	681a      	ldr	r2, [r3, #0]
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	6a1b      	ldr	r3, [r3, #32]
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	7d5b      	ldrb	r3, [r3, #21]
 80157c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	617b      	str	r3, [r7, #20]
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d1dc      	bne.n	801578e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d004      	beq.n	80157e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80157da:	6938      	ldr	r0, [r7, #16]
 80157dc:	f7ff f8a8 	bl	8014930 <tcp_abort>
 80157e0:	e000      	b.n	80157e4 <tcp_kill_prio+0x8c>
    return;
 80157e2:	bf00      	nop
  }
}
 80157e4:	3718      	adds	r7, #24
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}
 80157ea:	bf00      	nop
 80157ec:	24016e18 	.word	0x24016e18
 80157f0:	24016e0c 	.word	0x24016e0c

080157f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b086      	sub	sp, #24
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	4603      	mov	r3, r0
 80157fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80157fe:	79fb      	ldrb	r3, [r7, #7]
 8015800:	2b08      	cmp	r3, #8
 8015802:	d009      	beq.n	8015818 <tcp_kill_state+0x24>
 8015804:	79fb      	ldrb	r3, [r7, #7]
 8015806:	2b09      	cmp	r3, #9
 8015808:	d006      	beq.n	8015818 <tcp_kill_state+0x24>
 801580a:	4b1a      	ldr	r3, [pc, #104]	@ (8015874 <tcp_kill_state+0x80>)
 801580c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015810:	4919      	ldr	r1, [pc, #100]	@ (8015878 <tcp_kill_state+0x84>)
 8015812:	481a      	ldr	r0, [pc, #104]	@ (801587c <tcp_kill_state+0x88>)
 8015814:	f008 face 	bl	801ddb4 <iprintf>

  inactivity = 0;
 8015818:	2300      	movs	r3, #0
 801581a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801581c:	2300      	movs	r3, #0
 801581e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015820:	4b17      	ldr	r3, [pc, #92]	@ (8015880 <tcp_kill_state+0x8c>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	617b      	str	r3, [r7, #20]
 8015826:	e017      	b.n	8015858 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	7d1b      	ldrb	r3, [r3, #20]
 801582c:	79fa      	ldrb	r2, [r7, #7]
 801582e:	429a      	cmp	r2, r3
 8015830:	d10f      	bne.n	8015852 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015832:	4b14      	ldr	r3, [pc, #80]	@ (8015884 <tcp_kill_state+0x90>)
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	6a1b      	ldr	r3, [r3, #32]
 801583a:	1ad3      	subs	r3, r2, r3
 801583c:	68fa      	ldr	r2, [r7, #12]
 801583e:	429a      	cmp	r2, r3
 8015840:	d807      	bhi.n	8015852 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015842:	4b10      	ldr	r3, [pc, #64]	@ (8015884 <tcp_kill_state+0x90>)
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	697b      	ldr	r3, [r7, #20]
 8015848:	6a1b      	ldr	r3, [r3, #32]
 801584a:	1ad3      	subs	r3, r2, r3
 801584c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015852:	697b      	ldr	r3, [r7, #20]
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	617b      	str	r3, [r7, #20]
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d1e4      	bne.n	8015828 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d003      	beq.n	801586c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015864:	2100      	movs	r1, #0
 8015866:	6938      	ldr	r0, [r7, #16]
 8015868:	f7fe ffa4 	bl	80147b4 <tcp_abandon>
  }
}
 801586c:	bf00      	nop
 801586e:	3718      	adds	r7, #24
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}
 8015874:	08020770 	.word	0x08020770
 8015878:	08020cfc 	.word	0x08020cfc
 801587c:	080207b4 	.word	0x080207b4
 8015880:	24016e18 	.word	0x24016e18
 8015884:	24016e0c 	.word	0x24016e0c

08015888 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b084      	sub	sp, #16
 801588c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015892:	2300      	movs	r3, #0
 8015894:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015896:	4b12      	ldr	r3, [pc, #72]	@ (80158e0 <tcp_kill_timewait+0x58>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	60fb      	str	r3, [r7, #12]
 801589c:	e012      	b.n	80158c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801589e:	4b11      	ldr	r3, [pc, #68]	@ (80158e4 <tcp_kill_timewait+0x5c>)
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	6a1b      	ldr	r3, [r3, #32]
 80158a6:	1ad3      	subs	r3, r2, r3
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d807      	bhi.n	80158be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80158ae:	4b0d      	ldr	r3, [pc, #52]	@ (80158e4 <tcp_kill_timewait+0x5c>)
 80158b0:	681a      	ldr	r2, [r3, #0]
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	6a1b      	ldr	r3, [r3, #32]
 80158b6:	1ad3      	subs	r3, r2, r3
 80158b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	60fb      	str	r3, [r7, #12]
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d1e9      	bne.n	801589e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d002      	beq.n	80158d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80158d0:	68b8      	ldr	r0, [r7, #8]
 80158d2:	f7ff f82d 	bl	8014930 <tcp_abort>
  }
}
 80158d6:	bf00      	nop
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
 80158de:	bf00      	nop
 80158e0:	24016e1c 	.word	0x24016e1c
 80158e4:	24016e0c 	.word	0x24016e0c

080158e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80158ee:	4b10      	ldr	r3, [pc, #64]	@ (8015930 <tcp_handle_closepend+0x48>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80158f4:	e014      	b.n	8015920 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	68db      	ldr	r3, [r3, #12]
 80158fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	8b5b      	ldrh	r3, [r3, #26]
 8015900:	f003 0308 	and.w	r3, r3, #8
 8015904:	2b00      	cmp	r3, #0
 8015906:	d009      	beq.n	801591c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	8b5b      	ldrh	r3, [r3, #26]
 801590c:	f023 0308 	bic.w	r3, r3, #8
 8015910:	b29a      	uxth	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7fe fe5a 	bl	80145d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d1e7      	bne.n	80158f6 <tcp_handle_closepend+0xe>
  }
}
 8015926:	bf00      	nop
 8015928:	bf00      	nop
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	24016e18 	.word	0x24016e18

08015934 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b084      	sub	sp, #16
 8015938:	af00      	add	r7, sp, #0
 801593a:	4603      	mov	r3, r0
 801593c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801593e:	2001      	movs	r0, #1
 8015940:	f7fd faa6 	bl	8012e90 <memp_malloc>
 8015944:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d126      	bne.n	801599a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801594c:	f7ff ffcc 	bl	80158e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015950:	f7ff ff9a 	bl	8015888 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015954:	2001      	movs	r0, #1
 8015956:	f7fd fa9b 	bl	8012e90 <memp_malloc>
 801595a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d11b      	bne.n	801599a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015962:	2009      	movs	r0, #9
 8015964:	f7ff ff46 	bl	80157f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015968:	2001      	movs	r0, #1
 801596a:	f7fd fa91 	bl	8012e90 <memp_malloc>
 801596e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d111      	bne.n	801599a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015976:	2008      	movs	r0, #8
 8015978:	f7ff ff3c 	bl	80157f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801597c:	2001      	movs	r0, #1
 801597e:	f7fd fa87 	bl	8012e90 <memp_malloc>
 8015982:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d107      	bne.n	801599a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801598a:	79fb      	ldrb	r3, [r7, #7]
 801598c:	4618      	mov	r0, r3
 801598e:	f7ff fee3 	bl	8015758 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015992:	2001      	movs	r0, #1
 8015994:	f7fd fa7c 	bl	8012e90 <memp_malloc>
 8015998:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d03f      	beq.n	8015a20 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80159a0:	229c      	movs	r2, #156	@ 0x9c
 80159a2:	2100      	movs	r1, #0
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f008 fb5d 	bl	801e064 <memset>
    pcb->prio = prio;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	79fa      	ldrb	r2, [r7, #7]
 80159ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80159b6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80159c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	22ff      	movs	r2, #255	@ 0xff
 80159ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80159d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2206      	movs	r2, #6
 80159dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	2206      	movs	r2, #6
 80159e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80159ec:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2201      	movs	r2, #1
 80159f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80159f6:	4b0d      	ldr	r3, [pc, #52]	@ (8015a2c <tcp_alloc+0xf8>)
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80159fe:	4b0c      	ldr	r3, [pc, #48]	@ (8015a30 <tcp_alloc+0xfc>)
 8015a00:	781a      	ldrb	r2, [r3, #0]
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8015a0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	4a08      	ldr	r2, [pc, #32]	@ (8015a34 <tcp_alloc+0x100>)
 8015a14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	4a07      	ldr	r2, [pc, #28]	@ (8015a38 <tcp_alloc+0x104>)
 8015a1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015a20:	68fb      	ldr	r3, [r7, #12]
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3710      	adds	r7, #16
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}
 8015a2a:	bf00      	nop
 8015a2c:	24016e0c 	.word	0x24016e0c
 8015a30:	24016e22 	.word	0x24016e22
 8015a34:	080156ed 	.word	0x080156ed
 8015a38:	006ddd00 	.word	0x006ddd00

08015a3c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	4603      	mov	r3, r0
 8015a44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015a46:	2040      	movs	r0, #64	@ 0x40
 8015a48:	f7ff ff74 	bl	8015934 <tcp_alloc>
 8015a4c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3710      	adds	r7, #16
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015a58:	b480      	push	{r7}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d002      	beq.n	8015a6e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	683a      	ldr	r2, [r7, #0]
 8015a6c:	611a      	str	r2, [r3, #16]
  }
}
 8015a6e:	bf00      	nop
 8015a70:	370c      	adds	r7, #12
 8015a72:	46bd      	mov	sp, r7
 8015a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a78:	4770      	bx	lr
	...

08015a7c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d00e      	beq.n	8015aaa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	7d1b      	ldrb	r3, [r3, #20]
 8015a90:	2b01      	cmp	r3, #1
 8015a92:	d106      	bne.n	8015aa2 <tcp_recv+0x26>
 8015a94:	4b07      	ldr	r3, [pc, #28]	@ (8015ab4 <tcp_recv+0x38>)
 8015a96:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015a9a:	4907      	ldr	r1, [pc, #28]	@ (8015ab8 <tcp_recv+0x3c>)
 8015a9c:	4807      	ldr	r0, [pc, #28]	@ (8015abc <tcp_recv+0x40>)
 8015a9e:	f008 f989 	bl	801ddb4 <iprintf>
    pcb->recv = recv;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	683a      	ldr	r2, [r7, #0]
 8015aa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015aaa:	bf00      	nop
 8015aac:	3708      	adds	r7, #8
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	08020770 	.word	0x08020770
 8015ab8:	08020d0c 	.word	0x08020d0c
 8015abc:	080207b4 	.word	0x080207b4

08015ac0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d00e      	beq.n	8015aee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	7d1b      	ldrb	r3, [r3, #20]
 8015ad4:	2b01      	cmp	r3, #1
 8015ad6:	d106      	bne.n	8015ae6 <tcp_sent+0x26>
 8015ad8:	4b07      	ldr	r3, [pc, #28]	@ (8015af8 <tcp_sent+0x38>)
 8015ada:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8015ade:	4907      	ldr	r1, [pc, #28]	@ (8015afc <tcp_sent+0x3c>)
 8015ae0:	4807      	ldr	r0, [pc, #28]	@ (8015b00 <tcp_sent+0x40>)
 8015ae2:	f008 f967 	bl	801ddb4 <iprintf>
    pcb->sent = sent;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	683a      	ldr	r2, [r7, #0]
 8015aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8015aee:	bf00      	nop
 8015af0:	3708      	adds	r7, #8
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	08020770 	.word	0x08020770
 8015afc:	08020d34 	.word	0x08020d34
 8015b00:	080207b4 	.word	0x080207b4

08015b04 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
 8015b0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d00e      	beq.n	8015b32 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	7d1b      	ldrb	r3, [r3, #20]
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d106      	bne.n	8015b2a <tcp_err+0x26>
 8015b1c:	4b07      	ldr	r3, [pc, #28]	@ (8015b3c <tcp_err+0x38>)
 8015b1e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8015b22:	4907      	ldr	r1, [pc, #28]	@ (8015b40 <tcp_err+0x3c>)
 8015b24:	4807      	ldr	r0, [pc, #28]	@ (8015b44 <tcp_err+0x40>)
 8015b26:	f008 f945 	bl	801ddb4 <iprintf>
    pcb->errf = err;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	683a      	ldr	r2, [r7, #0]
 8015b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8015b32:	bf00      	nop
 8015b34:	3708      	adds	r7, #8
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}
 8015b3a:	bf00      	nop
 8015b3c:	08020770 	.word	0x08020770
 8015b40:	08020d5c 	.word	0x08020d5c
 8015b44:	080207b4 	.word	0x080207b4

08015b48 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015b48:	b480      	push	{r7}
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d008      	beq.n	8015b6a <tcp_accept+0x22>
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	7d1b      	ldrb	r3, [r3, #20]
 8015b5c:	2b01      	cmp	r3, #1
 8015b5e:	d104      	bne.n	8015b6a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	683a      	ldr	r2, [r7, #0]
 8015b68:	619a      	str	r2, [r3, #24]
  }
}
 8015b6a:	bf00      	nop
 8015b6c:	3714      	adds	r7, #20
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b74:	4770      	bx	lr
	...

08015b78 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	4613      	mov	r3, r2
 8015b84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d107      	bne.n	8015b9c <tcp_poll+0x24>
 8015b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8015bc8 <tcp_poll+0x50>)
 8015b8e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8015b92:	490e      	ldr	r1, [pc, #56]	@ (8015bcc <tcp_poll+0x54>)
 8015b94:	480e      	ldr	r0, [pc, #56]	@ (8015bd0 <tcp_poll+0x58>)
 8015b96:	f008 f90d 	bl	801ddb4 <iprintf>
 8015b9a:	e011      	b.n	8015bc0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	7d1b      	ldrb	r3, [r3, #20]
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	d106      	bne.n	8015bb2 <tcp_poll+0x3a>
 8015ba4:	4b08      	ldr	r3, [pc, #32]	@ (8015bc8 <tcp_poll+0x50>)
 8015ba6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8015baa:	490a      	ldr	r1, [pc, #40]	@ (8015bd4 <tcp_poll+0x5c>)
 8015bac:	4808      	ldr	r0, [pc, #32]	@ (8015bd0 <tcp_poll+0x58>)
 8015bae:	f008 f901 	bl	801ddb4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	68ba      	ldr	r2, [r7, #8]
 8015bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	79fa      	ldrb	r2, [r7, #7]
 8015bbe:	775a      	strb	r2, [r3, #29]
}
 8015bc0:	3710      	adds	r7, #16
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	08020770 	.word	0x08020770
 8015bcc:	08020d84 	.word	0x08020d84
 8015bd0:	080207b4 	.word	0x080207b4
 8015bd4:	08020d9c 	.word	0x08020d9c

08015bd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d107      	bne.n	8015bf6 <tcp_pcb_purge+0x1e>
 8015be6:	4b21      	ldr	r3, [pc, #132]	@ (8015c6c <tcp_pcb_purge+0x94>)
 8015be8:	f640 0251 	movw	r2, #2129	@ 0x851
 8015bec:	4920      	ldr	r1, [pc, #128]	@ (8015c70 <tcp_pcb_purge+0x98>)
 8015bee:	4821      	ldr	r0, [pc, #132]	@ (8015c74 <tcp_pcb_purge+0x9c>)
 8015bf0:	f008 f8e0 	bl	801ddb4 <iprintf>
 8015bf4:	e037      	b.n	8015c66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	7d1b      	ldrb	r3, [r3, #20]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d033      	beq.n	8015c66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015c02:	2b0a      	cmp	r3, #10
 8015c04:	d02f      	beq.n	8015c66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d02b      	beq.n	8015c66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d007      	beq.n	8015c26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f7fe f888 	bl	8013d30 <pbuf_free>
      pcb->refused_data = NULL;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2200      	movs	r2, #0
 8015c24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d002      	beq.n	8015c34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 f986 	bl	8015f40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c3a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7ff fcf9 	bl	8015638 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7ff fcf4 	bl	8015638 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2200      	movs	r2, #0
 8015c54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2200      	movs	r2, #0
 8015c62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015c66:	3708      	adds	r7, #8
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	08020770 	.word	0x08020770
 8015c70:	08020dbc 	.word	0x08020dbc
 8015c74:	080207b4 	.word	0x080207b4

08015c78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b084      	sub	sp, #16
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d106      	bne.n	8015c96 <tcp_pcb_remove+0x1e>
 8015c88:	4b3e      	ldr	r3, [pc, #248]	@ (8015d84 <tcp_pcb_remove+0x10c>)
 8015c8a:	f640 0283 	movw	r2, #2179	@ 0x883
 8015c8e:	493e      	ldr	r1, [pc, #248]	@ (8015d88 <tcp_pcb_remove+0x110>)
 8015c90:	483e      	ldr	r0, [pc, #248]	@ (8015d8c <tcp_pcb_remove+0x114>)
 8015c92:	f008 f88f 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d106      	bne.n	8015caa <tcp_pcb_remove+0x32>
 8015c9c:	4b39      	ldr	r3, [pc, #228]	@ (8015d84 <tcp_pcb_remove+0x10c>)
 8015c9e:	f640 0284 	movw	r2, #2180	@ 0x884
 8015ca2:	493b      	ldr	r1, [pc, #236]	@ (8015d90 <tcp_pcb_remove+0x118>)
 8015ca4:	4839      	ldr	r0, [pc, #228]	@ (8015d8c <tcp_pcb_remove+0x114>)
 8015ca6:	f008 f885 	bl	801ddb4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	683a      	ldr	r2, [r7, #0]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d105      	bne.n	8015cc0 <tcp_pcb_remove+0x48>
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	68da      	ldr	r2, [r3, #12]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	601a      	str	r2, [r3, #0]
 8015cbe:	e013      	b.n	8015ce8 <tcp_pcb_remove+0x70>
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	60fb      	str	r3, [r7, #12]
 8015cc6:	e00c      	b.n	8015ce2 <tcp_pcb_remove+0x6a>
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	683a      	ldr	r2, [r7, #0]
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d104      	bne.n	8015cdc <tcp_pcb_remove+0x64>
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	68da      	ldr	r2, [r3, #12]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	60da      	str	r2, [r3, #12]
 8015cda:	e005      	b.n	8015ce8 <tcp_pcb_remove+0x70>
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	68db      	ldr	r3, [r3, #12]
 8015ce0:	60fb      	str	r3, [r7, #12]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d1ef      	bne.n	8015cc8 <tcp_pcb_remove+0x50>
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	2200      	movs	r2, #0
 8015cec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015cee:	6838      	ldr	r0, [r7, #0]
 8015cf0:	f7ff ff72 	bl	8015bd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015cf4:	683b      	ldr	r3, [r7, #0]
 8015cf6:	7d1b      	ldrb	r3, [r3, #20]
 8015cf8:	2b0a      	cmp	r3, #10
 8015cfa:	d013      	beq.n	8015d24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015d00:	2b01      	cmp	r3, #1
 8015d02:	d00f      	beq.n	8015d24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	8b5b      	ldrh	r3, [r3, #26]
 8015d08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d009      	beq.n	8015d24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	8b5b      	ldrh	r3, [r3, #26]
 8015d14:	f043 0302 	orr.w	r3, r3, #2
 8015d18:	b29a      	uxth	r2, r3
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015d1e:	6838      	ldr	r0, [r7, #0]
 8015d20:	f003 fbc2 	bl	80194a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	7d1b      	ldrb	r3, [r3, #20]
 8015d28:	2b01      	cmp	r3, #1
 8015d2a:	d020      	beq.n	8015d6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d006      	beq.n	8015d42 <tcp_pcb_remove+0xca>
 8015d34:	4b13      	ldr	r3, [pc, #76]	@ (8015d84 <tcp_pcb_remove+0x10c>)
 8015d36:	f640 0293 	movw	r2, #2195	@ 0x893
 8015d3a:	4916      	ldr	r1, [pc, #88]	@ (8015d94 <tcp_pcb_remove+0x11c>)
 8015d3c:	4813      	ldr	r0, [pc, #76]	@ (8015d8c <tcp_pcb_remove+0x114>)
 8015d3e:	f008 f839 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d006      	beq.n	8015d58 <tcp_pcb_remove+0xe0>
 8015d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8015d84 <tcp_pcb_remove+0x10c>)
 8015d4c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015d50:	4911      	ldr	r1, [pc, #68]	@ (8015d98 <tcp_pcb_remove+0x120>)
 8015d52:	480e      	ldr	r0, [pc, #56]	@ (8015d8c <tcp_pcb_remove+0x114>)
 8015d54:	f008 f82e 	bl	801ddb4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d006      	beq.n	8015d6e <tcp_pcb_remove+0xf6>
 8015d60:	4b08      	ldr	r3, [pc, #32]	@ (8015d84 <tcp_pcb_remove+0x10c>)
 8015d62:	f640 0296 	movw	r2, #2198	@ 0x896
 8015d66:	490d      	ldr	r1, [pc, #52]	@ (8015d9c <tcp_pcb_remove+0x124>)
 8015d68:	4808      	ldr	r0, [pc, #32]	@ (8015d8c <tcp_pcb_remove+0x114>)
 8015d6a:	f008 f823 	bl	801ddb4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	2200      	movs	r2, #0
 8015d72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	2200      	movs	r2, #0
 8015d78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015d7a:	bf00      	nop
 8015d7c:	3710      	adds	r7, #16
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	bf00      	nop
 8015d84:	08020770 	.word	0x08020770
 8015d88:	08020dd8 	.word	0x08020dd8
 8015d8c:	080207b4 	.word	0x080207b4
 8015d90:	08020df4 	.word	0x08020df4
 8015d94:	08020e14 	.word	0x08020e14
 8015d98:	08020e2c 	.word	0x08020e2c
 8015d9c:	08020e48 	.word	0x08020e48

08015da0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b082      	sub	sp, #8
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d106      	bne.n	8015dbc <tcp_next_iss+0x1c>
 8015dae:	4b0a      	ldr	r3, [pc, #40]	@ (8015dd8 <tcp_next_iss+0x38>)
 8015db0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015db4:	4909      	ldr	r1, [pc, #36]	@ (8015ddc <tcp_next_iss+0x3c>)
 8015db6:	480a      	ldr	r0, [pc, #40]	@ (8015de0 <tcp_next_iss+0x40>)
 8015db8:	f007 fffc 	bl	801ddb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015dbc:	4b09      	ldr	r3, [pc, #36]	@ (8015de4 <tcp_next_iss+0x44>)
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	4b09      	ldr	r3, [pc, #36]	@ (8015de8 <tcp_next_iss+0x48>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4413      	add	r3, r2
 8015dc6:	4a07      	ldr	r2, [pc, #28]	@ (8015de4 <tcp_next_iss+0x44>)
 8015dc8:	6013      	str	r3, [r2, #0]
  return iss;
 8015dca:	4b06      	ldr	r3, [pc, #24]	@ (8015de4 <tcp_next_iss+0x44>)
 8015dcc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3708      	adds	r7, #8
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	bf00      	nop
 8015dd8:	08020770 	.word	0x08020770
 8015ddc:	08020e60 	.word	0x08020e60
 8015de0:	080207b4 	.word	0x080207b4
 8015de4:	2400002c 	.word	0x2400002c
 8015de8:	24016e0c 	.word	0x24016e0c

08015dec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b086      	sub	sp, #24
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	4603      	mov	r3, r0
 8015df4:	60b9      	str	r1, [r7, #8]
 8015df6:	607a      	str	r2, [r7, #4]
 8015df8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d106      	bne.n	8015e0e <tcp_eff_send_mss_netif+0x22>
 8015e00:	4b14      	ldr	r3, [pc, #80]	@ (8015e54 <tcp_eff_send_mss_netif+0x68>)
 8015e02:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015e06:	4914      	ldr	r1, [pc, #80]	@ (8015e58 <tcp_eff_send_mss_netif+0x6c>)
 8015e08:	4814      	ldr	r0, [pc, #80]	@ (8015e5c <tcp_eff_send_mss_netif+0x70>)
 8015e0a:	f007 ffd3 	bl	801ddb4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015e0e:	68bb      	ldr	r3, [r7, #8]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d101      	bne.n	8015e18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015e14:	89fb      	ldrh	r3, [r7, #14]
 8015e16:	e019      	b.n	8015e4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015e1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015e1e:	8afb      	ldrh	r3, [r7, #22]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d012      	beq.n	8015e4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015e24:	2328      	movs	r3, #40	@ 0x28
 8015e26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015e28:	8afa      	ldrh	r2, [r7, #22]
 8015e2a:	8abb      	ldrh	r3, [r7, #20]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d904      	bls.n	8015e3a <tcp_eff_send_mss_netif+0x4e>
 8015e30:	8afa      	ldrh	r2, [r7, #22]
 8015e32:	8abb      	ldrh	r3, [r7, #20]
 8015e34:	1ad3      	subs	r3, r2, r3
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	e000      	b.n	8015e3c <tcp_eff_send_mss_netif+0x50>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015e3e:	8a7a      	ldrh	r2, [r7, #18]
 8015e40:	89fb      	ldrh	r3, [r7, #14]
 8015e42:	4293      	cmp	r3, r2
 8015e44:	bf28      	it	cs
 8015e46:	4613      	movcs	r3, r2
 8015e48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015e4a:	89fb      	ldrh	r3, [r7, #14]
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3718      	adds	r7, #24
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	08020770 	.word	0x08020770
 8015e58:	08020e7c 	.word	0x08020e7c
 8015e5c:	080207b4 	.word	0x080207b4

08015e60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b084      	sub	sp, #16
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
 8015e68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d119      	bne.n	8015ea8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015e74:	4b10      	ldr	r3, [pc, #64]	@ (8015eb8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015e76:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015e7a:	4910      	ldr	r1, [pc, #64]	@ (8015ebc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015e7c:	4810      	ldr	r0, [pc, #64]	@ (8015ec0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015e7e:	f007 ff99 	bl	801ddb4 <iprintf>

  while (pcb != NULL) {
 8015e82:	e011      	b.n	8015ea8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	681a      	ldr	r2, [r3, #0]
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d108      	bne.n	8015ea2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	68db      	ldr	r3, [r3, #12]
 8015e94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f7fe fd4a 	bl	8014930 <tcp_abort>
      pcb = next;
 8015e9c:	68bb      	ldr	r3, [r7, #8]
 8015e9e:	60fb      	str	r3, [r7, #12]
 8015ea0:	e002      	b.n	8015ea8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	68db      	ldr	r3, [r3, #12]
 8015ea6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d1ea      	bne.n	8015e84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015eae:	bf00      	nop
 8015eb0:	bf00      	nop
 8015eb2:	3710      	adds	r7, #16
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}
 8015eb8:	08020770 	.word	0x08020770
 8015ebc:	08020ea4 	.word	0x08020ea4
 8015ec0:	080207b4 	.word	0x080207b4

08015ec4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d02a      	beq.n	8015f2a <tcp_netif_ip_addr_changed+0x66>
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d026      	beq.n	8015f2a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015edc:	4b15      	ldr	r3, [pc, #84]	@ (8015f34 <tcp_netif_ip_addr_changed+0x70>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f7ff ffbc 	bl	8015e60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015ee8:	4b13      	ldr	r3, [pc, #76]	@ (8015f38 <tcp_netif_ip_addr_changed+0x74>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	4619      	mov	r1, r3
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7ff ffb6 	bl	8015e60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d017      	beq.n	8015f2a <tcp_netif_ip_addr_changed+0x66>
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d013      	beq.n	8015f2a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015f02:	4b0e      	ldr	r3, [pc, #56]	@ (8015f3c <tcp_netif_ip_addr_changed+0x78>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	60fb      	str	r3, [r7, #12]
 8015f08:	e00c      	b.n	8015f24 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d103      	bne.n	8015f1e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	68db      	ldr	r3, [r3, #12]
 8015f22:	60fb      	str	r3, [r7, #12]
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d1ef      	bne.n	8015f0a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015f2a:	bf00      	nop
 8015f2c:	3710      	adds	r7, #16
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}
 8015f32:	bf00      	nop
 8015f34:	24016e18 	.word	0x24016e18
 8015f38:	24016e10 	.word	0x24016e10
 8015f3c:	24016e14 	.word	0x24016e14

08015f40 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d007      	beq.n	8015f60 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7ff fb6f 	bl	8015638 <tcp_segs_free>
    pcb->ooseq = NULL;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015f68:	b590      	push	{r4, r7, lr}
 8015f6a:	b08d      	sub	sp, #52	@ 0x34
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d105      	bne.n	8015f84 <tcp_input+0x1c>
 8015f78:	4b9b      	ldr	r3, [pc, #620]	@ (80161e8 <tcp_input+0x280>)
 8015f7a:	2283      	movs	r2, #131	@ 0x83
 8015f7c:	499b      	ldr	r1, [pc, #620]	@ (80161ec <tcp_input+0x284>)
 8015f7e:	489c      	ldr	r0, [pc, #624]	@ (80161f0 <tcp_input+0x288>)
 8015f80:	f007 ff18 	bl	801ddb4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	4a9a      	ldr	r2, [pc, #616]	@ (80161f4 <tcp_input+0x28c>)
 8015f8a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	895b      	ldrh	r3, [r3, #10]
 8015f90:	2b13      	cmp	r3, #19
 8015f92:	f240 83d1 	bls.w	8016738 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015f96:	4b98      	ldr	r3, [pc, #608]	@ (80161f8 <tcp_input+0x290>)
 8015f98:	695b      	ldr	r3, [r3, #20]
 8015f9a:	4a97      	ldr	r2, [pc, #604]	@ (80161f8 <tcp_input+0x290>)
 8015f9c:	6812      	ldr	r2, [r2, #0]
 8015f9e:	4611      	mov	r1, r2
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f006 fbf1 	bl	801c788 <ip4_addr_isbroadcast_u32>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	f040 83c7 	bne.w	801673c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015fae:	4b92      	ldr	r3, [pc, #584]	@ (80161f8 <tcp_input+0x290>)
 8015fb0:	695b      	ldr	r3, [r3, #20]
 8015fb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015fb6:	2be0      	cmp	r3, #224	@ 0xe0
 8015fb8:	f000 83c0 	beq.w	801673c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015fbc:	4b8d      	ldr	r3, [pc, #564]	@ (80161f4 <tcp_input+0x28c>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	899b      	ldrh	r3, [r3, #12]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7fc f9c3 	bl	8012350 <lwip_htons>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	0b1b      	lsrs	r3, r3, #12
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	b2db      	uxtb	r3, r3
 8015fd2:	009b      	lsls	r3, r3, #2
 8015fd4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015fd6:	7cbb      	ldrb	r3, [r7, #18]
 8015fd8:	2b13      	cmp	r3, #19
 8015fda:	f240 83b1 	bls.w	8016740 <tcp_input+0x7d8>
 8015fde:	7cbb      	ldrb	r3, [r7, #18]
 8015fe0:	b29a      	uxth	r2, r3
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	891b      	ldrh	r3, [r3, #8]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	f200 83aa 	bhi.w	8016740 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015fec:	7cbb      	ldrb	r3, [r7, #18]
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	3b14      	subs	r3, #20
 8015ff2:	b29a      	uxth	r2, r3
 8015ff4:	4b81      	ldr	r3, [pc, #516]	@ (80161fc <tcp_input+0x294>)
 8015ff6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015ff8:	4b81      	ldr	r3, [pc, #516]	@ (8016200 <tcp_input+0x298>)
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	895a      	ldrh	r2, [r3, #10]
 8016002:	7cbb      	ldrb	r3, [r7, #18]
 8016004:	b29b      	uxth	r3, r3
 8016006:	429a      	cmp	r2, r3
 8016008:	d309      	bcc.n	801601e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801600a:	4b7c      	ldr	r3, [pc, #496]	@ (80161fc <tcp_input+0x294>)
 801600c:	881a      	ldrh	r2, [r3, #0]
 801600e:	4b7d      	ldr	r3, [pc, #500]	@ (8016204 <tcp_input+0x29c>)
 8016010:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016012:	7cbb      	ldrb	r3, [r7, #18]
 8016014:	4619      	mov	r1, r3
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f7fd fdd2 	bl	8013bc0 <pbuf_remove_header>
 801601c:	e04e      	b.n	80160bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d105      	bne.n	8016032 <tcp_input+0xca>
 8016026:	4b70      	ldr	r3, [pc, #448]	@ (80161e8 <tcp_input+0x280>)
 8016028:	22c2      	movs	r2, #194	@ 0xc2
 801602a:	4977      	ldr	r1, [pc, #476]	@ (8016208 <tcp_input+0x2a0>)
 801602c:	4870      	ldr	r0, [pc, #448]	@ (80161f0 <tcp_input+0x288>)
 801602e:	f007 fec1 	bl	801ddb4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016032:	2114      	movs	r1, #20
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7fd fdc3 	bl	8013bc0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	895a      	ldrh	r2, [r3, #10]
 801603e:	4b71      	ldr	r3, [pc, #452]	@ (8016204 <tcp_input+0x29c>)
 8016040:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016042:	4b6e      	ldr	r3, [pc, #440]	@ (80161fc <tcp_input+0x294>)
 8016044:	881a      	ldrh	r2, [r3, #0]
 8016046:	4b6f      	ldr	r3, [pc, #444]	@ (8016204 <tcp_input+0x29c>)
 8016048:	881b      	ldrh	r3, [r3, #0]
 801604a:	1ad3      	subs	r3, r2, r3
 801604c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801604e:	4b6d      	ldr	r3, [pc, #436]	@ (8016204 <tcp_input+0x29c>)
 8016050:	881b      	ldrh	r3, [r3, #0]
 8016052:	4619      	mov	r1, r3
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7fd fdb3 	bl	8013bc0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	895b      	ldrh	r3, [r3, #10]
 8016060:	8a3a      	ldrh	r2, [r7, #16]
 8016062:	429a      	cmp	r2, r3
 8016064:	f200 836e 	bhi.w	8016744 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	4a64      	ldr	r2, [pc, #400]	@ (8016200 <tcp_input+0x298>)
 8016070:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	8a3a      	ldrh	r2, [r7, #16]
 8016078:	4611      	mov	r1, r2
 801607a:	4618      	mov	r0, r3
 801607c:	f7fd fda0 	bl	8013bc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	891a      	ldrh	r2, [r3, #8]
 8016084:	8a3b      	ldrh	r3, [r7, #16]
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	b29a      	uxth	r2, r3
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	895b      	ldrh	r3, [r3, #10]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d005      	beq.n	80160a2 <tcp_input+0x13a>
 8016096:	4b54      	ldr	r3, [pc, #336]	@ (80161e8 <tcp_input+0x280>)
 8016098:	22df      	movs	r2, #223	@ 0xdf
 801609a:	495c      	ldr	r1, [pc, #368]	@ (801620c <tcp_input+0x2a4>)
 801609c:	4854      	ldr	r0, [pc, #336]	@ (80161f0 <tcp_input+0x288>)
 801609e:	f007 fe89 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	891a      	ldrh	r2, [r3, #8]
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	891b      	ldrh	r3, [r3, #8]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d005      	beq.n	80160bc <tcp_input+0x154>
 80160b0:	4b4d      	ldr	r3, [pc, #308]	@ (80161e8 <tcp_input+0x280>)
 80160b2:	22e0      	movs	r2, #224	@ 0xe0
 80160b4:	4956      	ldr	r1, [pc, #344]	@ (8016210 <tcp_input+0x2a8>)
 80160b6:	484e      	ldr	r0, [pc, #312]	@ (80161f0 <tcp_input+0x288>)
 80160b8:	f007 fe7c 	bl	801ddb4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80160bc:	4b4d      	ldr	r3, [pc, #308]	@ (80161f4 <tcp_input+0x28c>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	881b      	ldrh	r3, [r3, #0]
 80160c2:	b29b      	uxth	r3, r3
 80160c4:	4a4b      	ldr	r2, [pc, #300]	@ (80161f4 <tcp_input+0x28c>)
 80160c6:	6814      	ldr	r4, [r2, #0]
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7fc f941 	bl	8012350 <lwip_htons>
 80160ce:	4603      	mov	r3, r0
 80160d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80160d2:	4b48      	ldr	r3, [pc, #288]	@ (80161f4 <tcp_input+0x28c>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	885b      	ldrh	r3, [r3, #2]
 80160d8:	b29b      	uxth	r3, r3
 80160da:	4a46      	ldr	r2, [pc, #280]	@ (80161f4 <tcp_input+0x28c>)
 80160dc:	6814      	ldr	r4, [r2, #0]
 80160de:	4618      	mov	r0, r3
 80160e0:	f7fc f936 	bl	8012350 <lwip_htons>
 80160e4:	4603      	mov	r3, r0
 80160e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80160e8:	4b42      	ldr	r3, [pc, #264]	@ (80161f4 <tcp_input+0x28c>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	4a41      	ldr	r2, [pc, #260]	@ (80161f4 <tcp_input+0x28c>)
 80160f0:	6814      	ldr	r4, [r2, #0]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7fc f941 	bl	801237a <lwip_htonl>
 80160f8:	4603      	mov	r3, r0
 80160fa:	6063      	str	r3, [r4, #4]
 80160fc:	6863      	ldr	r3, [r4, #4]
 80160fe:	4a45      	ldr	r2, [pc, #276]	@ (8016214 <tcp_input+0x2ac>)
 8016100:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016102:	4b3c      	ldr	r3, [pc, #240]	@ (80161f4 <tcp_input+0x28c>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	689b      	ldr	r3, [r3, #8]
 8016108:	4a3a      	ldr	r2, [pc, #232]	@ (80161f4 <tcp_input+0x28c>)
 801610a:	6814      	ldr	r4, [r2, #0]
 801610c:	4618      	mov	r0, r3
 801610e:	f7fc f934 	bl	801237a <lwip_htonl>
 8016112:	4603      	mov	r3, r0
 8016114:	60a3      	str	r3, [r4, #8]
 8016116:	68a3      	ldr	r3, [r4, #8]
 8016118:	4a3f      	ldr	r2, [pc, #252]	@ (8016218 <tcp_input+0x2b0>)
 801611a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801611c:	4b35      	ldr	r3, [pc, #212]	@ (80161f4 <tcp_input+0x28c>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	89db      	ldrh	r3, [r3, #14]
 8016122:	b29b      	uxth	r3, r3
 8016124:	4a33      	ldr	r2, [pc, #204]	@ (80161f4 <tcp_input+0x28c>)
 8016126:	6814      	ldr	r4, [r2, #0]
 8016128:	4618      	mov	r0, r3
 801612a:	f7fc f911 	bl	8012350 <lwip_htons>
 801612e:	4603      	mov	r3, r0
 8016130:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016132:	4b30      	ldr	r3, [pc, #192]	@ (80161f4 <tcp_input+0x28c>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	899b      	ldrh	r3, [r3, #12]
 8016138:	b29b      	uxth	r3, r3
 801613a:	4618      	mov	r0, r3
 801613c:	f7fc f908 	bl	8012350 <lwip_htons>
 8016140:	4603      	mov	r3, r0
 8016142:	b2db      	uxtb	r3, r3
 8016144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016148:	b2da      	uxtb	r2, r3
 801614a:	4b34      	ldr	r3, [pc, #208]	@ (801621c <tcp_input+0x2b4>)
 801614c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	891a      	ldrh	r2, [r3, #8]
 8016152:	4b33      	ldr	r3, [pc, #204]	@ (8016220 <tcp_input+0x2b8>)
 8016154:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016156:	4b31      	ldr	r3, [pc, #196]	@ (801621c <tcp_input+0x2b4>)
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	f003 0303 	and.w	r3, r3, #3
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00c      	beq.n	801617c <tcp_input+0x214>
    tcplen++;
 8016162:	4b2f      	ldr	r3, [pc, #188]	@ (8016220 <tcp_input+0x2b8>)
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	3301      	adds	r3, #1
 8016168:	b29a      	uxth	r2, r3
 801616a:	4b2d      	ldr	r3, [pc, #180]	@ (8016220 <tcp_input+0x2b8>)
 801616c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	891a      	ldrh	r2, [r3, #8]
 8016172:	4b2b      	ldr	r3, [pc, #172]	@ (8016220 <tcp_input+0x2b8>)
 8016174:	881b      	ldrh	r3, [r3, #0]
 8016176:	429a      	cmp	r2, r3
 8016178:	f200 82e6 	bhi.w	8016748 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801617c:	2300      	movs	r3, #0
 801617e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016180:	4b28      	ldr	r3, [pc, #160]	@ (8016224 <tcp_input+0x2bc>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	61fb      	str	r3, [r7, #28]
 8016186:	e09d      	b.n	80162c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	7d1b      	ldrb	r3, [r3, #20]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d105      	bne.n	801619c <tcp_input+0x234>
 8016190:	4b15      	ldr	r3, [pc, #84]	@ (80161e8 <tcp_input+0x280>)
 8016192:	22fb      	movs	r2, #251	@ 0xfb
 8016194:	4924      	ldr	r1, [pc, #144]	@ (8016228 <tcp_input+0x2c0>)
 8016196:	4816      	ldr	r0, [pc, #88]	@ (80161f0 <tcp_input+0x288>)
 8016198:	f007 fe0c 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801619c:	69fb      	ldr	r3, [r7, #28]
 801619e:	7d1b      	ldrb	r3, [r3, #20]
 80161a0:	2b0a      	cmp	r3, #10
 80161a2:	d105      	bne.n	80161b0 <tcp_input+0x248>
 80161a4:	4b10      	ldr	r3, [pc, #64]	@ (80161e8 <tcp_input+0x280>)
 80161a6:	22fc      	movs	r2, #252	@ 0xfc
 80161a8:	4920      	ldr	r1, [pc, #128]	@ (801622c <tcp_input+0x2c4>)
 80161aa:	4811      	ldr	r0, [pc, #68]	@ (80161f0 <tcp_input+0x288>)
 80161ac:	f007 fe02 	bl	801ddb4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	7d1b      	ldrb	r3, [r3, #20]
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d105      	bne.n	80161c4 <tcp_input+0x25c>
 80161b8:	4b0b      	ldr	r3, [pc, #44]	@ (80161e8 <tcp_input+0x280>)
 80161ba:	22fd      	movs	r2, #253	@ 0xfd
 80161bc:	491c      	ldr	r1, [pc, #112]	@ (8016230 <tcp_input+0x2c8>)
 80161be:	480c      	ldr	r0, [pc, #48]	@ (80161f0 <tcp_input+0x288>)
 80161c0:	f007 fdf8 	bl	801ddb4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161c4:	69fb      	ldr	r3, [r7, #28]
 80161c6:	7a1b      	ldrb	r3, [r3, #8]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d033      	beq.n	8016234 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80161cc:	69fb      	ldr	r3, [r7, #28]
 80161ce:	7a1a      	ldrb	r2, [r3, #8]
 80161d0:	4b09      	ldr	r3, [pc, #36]	@ (80161f8 <tcp_input+0x290>)
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80161d8:	3301      	adds	r3, #1
 80161da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161dc:	429a      	cmp	r2, r3
 80161de:	d029      	beq.n	8016234 <tcp_input+0x2cc>
      prev = pcb;
 80161e0:	69fb      	ldr	r3, [r7, #28]
 80161e2:	61bb      	str	r3, [r7, #24]
      continue;
 80161e4:	e06b      	b.n	80162be <tcp_input+0x356>
 80161e6:	bf00      	nop
 80161e8:	08020ed8 	.word	0x08020ed8
 80161ec:	08020f0c 	.word	0x08020f0c
 80161f0:	08020f24 	.word	0x08020f24
 80161f4:	24016e34 	.word	0x24016e34
 80161f8:	2401034c 	.word	0x2401034c
 80161fc:	24016e38 	.word	0x24016e38
 8016200:	24016e3c 	.word	0x24016e3c
 8016204:	24016e3a 	.word	0x24016e3a
 8016208:	08020f4c 	.word	0x08020f4c
 801620c:	08020f5c 	.word	0x08020f5c
 8016210:	08020f68 	.word	0x08020f68
 8016214:	24016e44 	.word	0x24016e44
 8016218:	24016e48 	.word	0x24016e48
 801621c:	24016e50 	.word	0x24016e50
 8016220:	24016e4e 	.word	0x24016e4e
 8016224:	24016e18 	.word	0x24016e18
 8016228:	08020f88 	.word	0x08020f88
 801622c:	08020fb0 	.word	0x08020fb0
 8016230:	08020fdc 	.word	0x08020fdc
    }

    if (pcb->remote_port == tcphdr->src &&
 8016234:	69fb      	ldr	r3, [r7, #28]
 8016236:	8b1a      	ldrh	r2, [r3, #24]
 8016238:	4b72      	ldr	r3, [pc, #456]	@ (8016404 <tcp_input+0x49c>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	881b      	ldrh	r3, [r3, #0]
 801623e:	b29b      	uxth	r3, r3
 8016240:	429a      	cmp	r2, r3
 8016242:	d13a      	bne.n	80162ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016244:	69fb      	ldr	r3, [r7, #28]
 8016246:	8ada      	ldrh	r2, [r3, #22]
 8016248:	4b6e      	ldr	r3, [pc, #440]	@ (8016404 <tcp_input+0x49c>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	885b      	ldrh	r3, [r3, #2]
 801624e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016250:	429a      	cmp	r2, r3
 8016252:	d132      	bne.n	80162ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016254:	69fb      	ldr	r3, [r7, #28]
 8016256:	685a      	ldr	r2, [r3, #4]
 8016258:	4b6b      	ldr	r3, [pc, #428]	@ (8016408 <tcp_input+0x4a0>)
 801625a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801625c:	429a      	cmp	r2, r3
 801625e:	d12c      	bne.n	80162ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016260:	69fb      	ldr	r3, [r7, #28]
 8016262:	681a      	ldr	r2, [r3, #0]
 8016264:	4b68      	ldr	r3, [pc, #416]	@ (8016408 <tcp_input+0x4a0>)
 8016266:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016268:	429a      	cmp	r2, r3
 801626a:	d126      	bne.n	80162ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	68db      	ldr	r3, [r3, #12]
 8016270:	69fa      	ldr	r2, [r7, #28]
 8016272:	429a      	cmp	r2, r3
 8016274:	d106      	bne.n	8016284 <tcp_input+0x31c>
 8016276:	4b65      	ldr	r3, [pc, #404]	@ (801640c <tcp_input+0x4a4>)
 8016278:	f240 120d 	movw	r2, #269	@ 0x10d
 801627c:	4964      	ldr	r1, [pc, #400]	@ (8016410 <tcp_input+0x4a8>)
 801627e:	4865      	ldr	r0, [pc, #404]	@ (8016414 <tcp_input+0x4ac>)
 8016280:	f007 fd98 	bl	801ddb4 <iprintf>
      if (prev != NULL) {
 8016284:	69bb      	ldr	r3, [r7, #24]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d00a      	beq.n	80162a0 <tcp_input+0x338>
        prev->next = pcb->next;
 801628a:	69fb      	ldr	r3, [r7, #28]
 801628c:	68da      	ldr	r2, [r3, #12]
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016292:	4b61      	ldr	r3, [pc, #388]	@ (8016418 <tcp_input+0x4b0>)
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801629a:	4a5f      	ldr	r2, [pc, #380]	@ (8016418 <tcp_input+0x4b0>)
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80162a0:	69fb      	ldr	r3, [r7, #28]
 80162a2:	68db      	ldr	r3, [r3, #12]
 80162a4:	69fa      	ldr	r2, [r7, #28]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d111      	bne.n	80162ce <tcp_input+0x366>
 80162aa:	4b58      	ldr	r3, [pc, #352]	@ (801640c <tcp_input+0x4a4>)
 80162ac:	f240 1215 	movw	r2, #277	@ 0x115
 80162b0:	495a      	ldr	r1, [pc, #360]	@ (801641c <tcp_input+0x4b4>)
 80162b2:	4858      	ldr	r0, [pc, #352]	@ (8016414 <tcp_input+0x4ac>)
 80162b4:	f007 fd7e 	bl	801ddb4 <iprintf>
      break;
 80162b8:	e009      	b.n	80162ce <tcp_input+0x366>
    }
    prev = pcb;
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	61fb      	str	r3, [r7, #28]
 80162c4:	69fb      	ldr	r3, [r7, #28]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	f47f af5e 	bne.w	8016188 <tcp_input+0x220>
 80162cc:	e000      	b.n	80162d0 <tcp_input+0x368>
      break;
 80162ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	f040 80aa 	bne.w	801642c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80162d8:	4b51      	ldr	r3, [pc, #324]	@ (8016420 <tcp_input+0x4b8>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	61fb      	str	r3, [r7, #28]
 80162de:	e03f      	b.n	8016360 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	7d1b      	ldrb	r3, [r3, #20]
 80162e4:	2b0a      	cmp	r3, #10
 80162e6:	d006      	beq.n	80162f6 <tcp_input+0x38e>
 80162e8:	4b48      	ldr	r3, [pc, #288]	@ (801640c <tcp_input+0x4a4>)
 80162ea:	f240 121f 	movw	r2, #287	@ 0x11f
 80162ee:	494d      	ldr	r1, [pc, #308]	@ (8016424 <tcp_input+0x4bc>)
 80162f0:	4848      	ldr	r0, [pc, #288]	@ (8016414 <tcp_input+0x4ac>)
 80162f2:	f007 fd5f 	bl	801ddb4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162f6:	69fb      	ldr	r3, [r7, #28]
 80162f8:	7a1b      	ldrb	r3, [r3, #8]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d009      	beq.n	8016312 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	7a1a      	ldrb	r2, [r3, #8]
 8016302:	4b41      	ldr	r3, [pc, #260]	@ (8016408 <tcp_input+0x4a0>)
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801630a:	3301      	adds	r3, #1
 801630c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801630e:	429a      	cmp	r2, r3
 8016310:	d122      	bne.n	8016358 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	8b1a      	ldrh	r2, [r3, #24]
 8016316:	4b3b      	ldr	r3, [pc, #236]	@ (8016404 <tcp_input+0x49c>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	881b      	ldrh	r3, [r3, #0]
 801631c:	b29b      	uxth	r3, r3
 801631e:	429a      	cmp	r2, r3
 8016320:	d11b      	bne.n	801635a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016322:	69fb      	ldr	r3, [r7, #28]
 8016324:	8ada      	ldrh	r2, [r3, #22]
 8016326:	4b37      	ldr	r3, [pc, #220]	@ (8016404 <tcp_input+0x49c>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	885b      	ldrh	r3, [r3, #2]
 801632c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801632e:	429a      	cmp	r2, r3
 8016330:	d113      	bne.n	801635a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	685a      	ldr	r2, [r3, #4]
 8016336:	4b34      	ldr	r3, [pc, #208]	@ (8016408 <tcp_input+0x4a0>)
 8016338:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801633a:	429a      	cmp	r2, r3
 801633c:	d10d      	bne.n	801635a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	4b31      	ldr	r3, [pc, #196]	@ (8016408 <tcp_input+0x4a0>)
 8016344:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016346:	429a      	cmp	r2, r3
 8016348:	d107      	bne.n	801635a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801634a:	69f8      	ldr	r0, [r7, #28]
 801634c:	f000 fb56 	bl	80169fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f7fd fced 	bl	8013d30 <pbuf_free>
        return;
 8016356:	e1fd      	b.n	8016754 <tcp_input+0x7ec>
        continue;
 8016358:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	61fb      	str	r3, [r7, #28]
 8016360:	69fb      	ldr	r3, [r7, #28]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d1bc      	bne.n	80162e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016366:	2300      	movs	r3, #0
 8016368:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801636a:	4b2f      	ldr	r3, [pc, #188]	@ (8016428 <tcp_input+0x4c0>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	617b      	str	r3, [r7, #20]
 8016370:	e02a      	b.n	80163c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	7a1b      	ldrb	r3, [r3, #8]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00c      	beq.n	8016394 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801637a:	697b      	ldr	r3, [r7, #20]
 801637c:	7a1a      	ldrb	r2, [r3, #8]
 801637e:	4b22      	ldr	r3, [pc, #136]	@ (8016408 <tcp_input+0x4a0>)
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016386:	3301      	adds	r3, #1
 8016388:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801638a:	429a      	cmp	r2, r3
 801638c:	d002      	beq.n	8016394 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	61bb      	str	r3, [r7, #24]
        continue;
 8016392:	e016      	b.n	80163c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016394:	697b      	ldr	r3, [r7, #20]
 8016396:	8ada      	ldrh	r2, [r3, #22]
 8016398:	4b1a      	ldr	r3, [pc, #104]	@ (8016404 <tcp_input+0x49c>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	885b      	ldrh	r3, [r3, #2]
 801639e:	b29b      	uxth	r3, r3
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d10c      	bne.n	80163be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	681a      	ldr	r2, [r3, #0]
 80163a8:	4b17      	ldr	r3, [pc, #92]	@ (8016408 <tcp_input+0x4a0>)
 80163aa:	695b      	ldr	r3, [r3, #20]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d00f      	beq.n	80163d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d00d      	beq.n	80163d2 <tcp_input+0x46a>
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d009      	beq.n	80163d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80163be:	697b      	ldr	r3, [r7, #20]
 80163c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	68db      	ldr	r3, [r3, #12]
 80163c6:	617b      	str	r3, [r7, #20]
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1d1      	bne.n	8016372 <tcp_input+0x40a>
 80163ce:	e000      	b.n	80163d2 <tcp_input+0x46a>
            break;
 80163d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d029      	beq.n	801642c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80163d8:	69bb      	ldr	r3, [r7, #24]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00a      	beq.n	80163f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	68da      	ldr	r2, [r3, #12]
 80163e2:	69bb      	ldr	r3, [r7, #24]
 80163e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80163e6:	4b10      	ldr	r3, [pc, #64]	@ (8016428 <tcp_input+0x4c0>)
 80163e8:	681a      	ldr	r2, [r3, #0]
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80163ee:	4a0e      	ldr	r2, [pc, #56]	@ (8016428 <tcp_input+0x4c0>)
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80163f4:	6978      	ldr	r0, [r7, #20]
 80163f6:	f000 fa03 	bl	8016800 <tcp_listen_input>
      }
      pbuf_free(p);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7fd fc98 	bl	8013d30 <pbuf_free>
      return;
 8016400:	e1a8      	b.n	8016754 <tcp_input+0x7ec>
 8016402:	bf00      	nop
 8016404:	24016e34 	.word	0x24016e34
 8016408:	2401034c 	.word	0x2401034c
 801640c:	08020ed8 	.word	0x08020ed8
 8016410:	08021004 	.word	0x08021004
 8016414:	08020f24 	.word	0x08020f24
 8016418:	24016e18 	.word	0x24016e18
 801641c:	08021030 	.word	0x08021030
 8016420:	24016e1c 	.word	0x24016e1c
 8016424:	0802105c 	.word	0x0802105c
 8016428:	24016e14 	.word	0x24016e14
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801642c:	69fb      	ldr	r3, [r7, #28]
 801642e:	2b00      	cmp	r3, #0
 8016430:	f000 8158 	beq.w	80166e4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016434:	4b95      	ldr	r3, [pc, #596]	@ (801668c <tcp_input+0x724>)
 8016436:	2200      	movs	r2, #0
 8016438:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	891a      	ldrh	r2, [r3, #8]
 801643e:	4b93      	ldr	r3, [pc, #588]	@ (801668c <tcp_input+0x724>)
 8016440:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016442:	4a92      	ldr	r2, [pc, #584]	@ (801668c <tcp_input+0x724>)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016448:	4b91      	ldr	r3, [pc, #580]	@ (8016690 <tcp_input+0x728>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	4a8f      	ldr	r2, [pc, #572]	@ (801668c <tcp_input+0x724>)
 801644e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016450:	4b90      	ldr	r3, [pc, #576]	@ (8016694 <tcp_input+0x72c>)
 8016452:	2200      	movs	r2, #0
 8016454:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016456:	4b90      	ldr	r3, [pc, #576]	@ (8016698 <tcp_input+0x730>)
 8016458:	2200      	movs	r2, #0
 801645a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801645c:	4b8f      	ldr	r3, [pc, #572]	@ (801669c <tcp_input+0x734>)
 801645e:	2200      	movs	r2, #0
 8016460:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016462:	4b8f      	ldr	r3, [pc, #572]	@ (80166a0 <tcp_input+0x738>)
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	f003 0308 	and.w	r3, r3, #8
 801646a:	2b00      	cmp	r3, #0
 801646c:	d006      	beq.n	801647c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	7b5b      	ldrb	r3, [r3, #13]
 8016472:	f043 0301 	orr.w	r3, r3, #1
 8016476:	b2da      	uxtb	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016480:	2b00      	cmp	r3, #0
 8016482:	d017      	beq.n	80164b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016484:	69f8      	ldr	r0, [r7, #28]
 8016486:	f7ff f859 	bl	801553c <tcp_process_refused_data>
 801648a:	4603      	mov	r3, r0
 801648c:	f113 0f0d 	cmn.w	r3, #13
 8016490:	d007      	beq.n	80164a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016496:	2b00      	cmp	r3, #0
 8016498:	d00c      	beq.n	80164b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801649a:	4b82      	ldr	r3, [pc, #520]	@ (80166a4 <tcp_input+0x73c>)
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d008      	beq.n	80164b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80164a2:	69fb      	ldr	r3, [r7, #28]
 80164a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	f040 80e4 	bne.w	8016674 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80164ac:	69f8      	ldr	r0, [r7, #28]
 80164ae:	f003 fe01 	bl	801a0b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80164b2:	e0df      	b.n	8016674 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 80164b4:	4a7c      	ldr	r2, [pc, #496]	@ (80166a8 <tcp_input+0x740>)
 80164b6:	69fb      	ldr	r3, [r7, #28]
 80164b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80164ba:	69f8      	ldr	r0, [r7, #28]
 80164bc:	f000 fb18 	bl	8016af0 <tcp_process>
 80164c0:	4603      	mov	r3, r0
 80164c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80164c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80164c8:	f113 0f0d 	cmn.w	r3, #13
 80164cc:	f000 80d4 	beq.w	8016678 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 80164d0:	4b71      	ldr	r3, [pc, #452]	@ (8016698 <tcp_input+0x730>)
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	f003 0308 	and.w	r3, r3, #8
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d015      	beq.n	8016508 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d008      	beq.n	80164f8 <tcp_input+0x590>
 80164e6:	69fb      	ldr	r3, [r7, #28]
 80164e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80164ec:	69fa      	ldr	r2, [r7, #28]
 80164ee:	6912      	ldr	r2, [r2, #16]
 80164f0:	f06f 010d 	mvn.w	r1, #13
 80164f4:	4610      	mov	r0, r2
 80164f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80164f8:	69f9      	ldr	r1, [r7, #28]
 80164fa:	486c      	ldr	r0, [pc, #432]	@ (80166ac <tcp_input+0x744>)
 80164fc:	f7ff fbbc 	bl	8015c78 <tcp_pcb_remove>
        tcp_free(pcb);
 8016500:	69f8      	ldr	r0, [r7, #28]
 8016502:	f7fd fed1 	bl	80142a8 <tcp_free>
 8016506:	e0da      	b.n	80166be <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016508:	2300      	movs	r3, #0
 801650a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801650c:	4b63      	ldr	r3, [pc, #396]	@ (801669c <tcp_input+0x734>)
 801650e:	881b      	ldrh	r3, [r3, #0]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d01d      	beq.n	8016550 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016514:	4b61      	ldr	r3, [pc, #388]	@ (801669c <tcp_input+0x734>)
 8016516:	881b      	ldrh	r3, [r3, #0]
 8016518:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801651a:	69fb      	ldr	r3, [r7, #28]
 801651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016520:	2b00      	cmp	r3, #0
 8016522:	d00a      	beq.n	801653a <tcp_input+0x5d2>
 8016524:	69fb      	ldr	r3, [r7, #28]
 8016526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801652a:	69fa      	ldr	r2, [r7, #28]
 801652c:	6910      	ldr	r0, [r2, #16]
 801652e:	89fa      	ldrh	r2, [r7, #14]
 8016530:	69f9      	ldr	r1, [r7, #28]
 8016532:	4798      	blx	r3
 8016534:	4603      	mov	r3, r0
 8016536:	74fb      	strb	r3, [r7, #19]
 8016538:	e001      	b.n	801653e <tcp_input+0x5d6>
 801653a:	2300      	movs	r3, #0
 801653c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801653e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016542:	f113 0f0d 	cmn.w	r3, #13
 8016546:	f000 8099 	beq.w	801667c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 801654a:	4b54      	ldr	r3, [pc, #336]	@ (801669c <tcp_input+0x734>)
 801654c:	2200      	movs	r2, #0
 801654e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016550:	69f8      	ldr	r0, [r7, #28]
 8016552:	f000 f915 	bl	8016780 <tcp_input_delayed_close>
 8016556:	4603      	mov	r3, r0
 8016558:	2b00      	cmp	r3, #0
 801655a:	f040 8091 	bne.w	8016680 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801655e:	4b4d      	ldr	r3, [pc, #308]	@ (8016694 <tcp_input+0x72c>)
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d041      	beq.n	80165ea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016566:	69fb      	ldr	r3, [r7, #28]
 8016568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801656a:	2b00      	cmp	r3, #0
 801656c:	d006      	beq.n	801657c <tcp_input+0x614>
 801656e:	4b50      	ldr	r3, [pc, #320]	@ (80166b0 <tcp_input+0x748>)
 8016570:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016574:	494f      	ldr	r1, [pc, #316]	@ (80166b4 <tcp_input+0x74c>)
 8016576:	4850      	ldr	r0, [pc, #320]	@ (80166b8 <tcp_input+0x750>)
 8016578:	f007 fc1c 	bl	801ddb4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	8b5b      	ldrh	r3, [r3, #26]
 8016580:	f003 0310 	and.w	r3, r3, #16
 8016584:	2b00      	cmp	r3, #0
 8016586:	d008      	beq.n	801659a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016588:	4b42      	ldr	r3, [pc, #264]	@ (8016694 <tcp_input+0x72c>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	4618      	mov	r0, r3
 801658e:	f7fd fbcf 	bl	8013d30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016592:	69f8      	ldr	r0, [r7, #28]
 8016594:	f7fe f9cc 	bl	8014930 <tcp_abort>
            goto aborted;
 8016598:	e091      	b.n	80166be <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801659a:	69fb      	ldr	r3, [r7, #28]
 801659c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d00c      	beq.n	80165be <tcp_input+0x656>
 80165a4:	69fb      	ldr	r3, [r7, #28]
 80165a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	6918      	ldr	r0, [r3, #16]
 80165ae:	4b39      	ldr	r3, [pc, #228]	@ (8016694 <tcp_input+0x72c>)
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	2300      	movs	r3, #0
 80165b4:	69f9      	ldr	r1, [r7, #28]
 80165b6:	47a0      	blx	r4
 80165b8:	4603      	mov	r3, r0
 80165ba:	74fb      	strb	r3, [r7, #19]
 80165bc:	e008      	b.n	80165d0 <tcp_input+0x668>
 80165be:	4b35      	ldr	r3, [pc, #212]	@ (8016694 <tcp_input+0x72c>)
 80165c0:	681a      	ldr	r2, [r3, #0]
 80165c2:	2300      	movs	r3, #0
 80165c4:	69f9      	ldr	r1, [r7, #28]
 80165c6:	2000      	movs	r0, #0
 80165c8:	f7ff f890 	bl	80156ec <tcp_recv_null>
 80165cc:	4603      	mov	r3, r0
 80165ce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80165d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80165d4:	f113 0f0d 	cmn.w	r3, #13
 80165d8:	d054      	beq.n	8016684 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80165da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d003      	beq.n	80165ea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80165e2:	4b2c      	ldr	r3, [pc, #176]	@ (8016694 <tcp_input+0x72c>)
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80165ea:	4b2b      	ldr	r3, [pc, #172]	@ (8016698 <tcp_input+0x730>)
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	f003 0320 	and.w	r3, r3, #32
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d031      	beq.n	801665a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 80165f6:	69fb      	ldr	r3, [r7, #28]
 80165f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d009      	beq.n	8016612 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80165fe:	69fb      	ldr	r3, [r7, #28]
 8016600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016602:	7b5a      	ldrb	r2, [r3, #13]
 8016604:	69fb      	ldr	r3, [r7, #28]
 8016606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016608:	f042 0220 	orr.w	r2, r2, #32
 801660c:	b2d2      	uxtb	r2, r2
 801660e:	735a      	strb	r2, [r3, #13]
 8016610:	e023      	b.n	801665a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016616:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801661a:	4293      	cmp	r3, r2
 801661c:	d005      	beq.n	801662a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801661e:	69fb      	ldr	r3, [r7, #28]
 8016620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016622:	3301      	adds	r3, #1
 8016624:	b29a      	uxth	r2, r3
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016630:	2b00      	cmp	r3, #0
 8016632:	d00b      	beq.n	801664c <tcp_input+0x6e4>
 8016634:	69fb      	ldr	r3, [r7, #28]
 8016636:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	6918      	ldr	r0, [r3, #16]
 801663e:	2300      	movs	r3, #0
 8016640:	2200      	movs	r2, #0
 8016642:	69f9      	ldr	r1, [r7, #28]
 8016644:	47a0      	blx	r4
 8016646:	4603      	mov	r3, r0
 8016648:	74fb      	strb	r3, [r7, #19]
 801664a:	e001      	b.n	8016650 <tcp_input+0x6e8>
 801664c:	2300      	movs	r3, #0
 801664e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016654:	f113 0f0d 	cmn.w	r3, #13
 8016658:	d016      	beq.n	8016688 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801665a:	4b13      	ldr	r3, [pc, #76]	@ (80166a8 <tcp_input+0x740>)
 801665c:	2200      	movs	r2, #0
 801665e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016660:	69f8      	ldr	r0, [r7, #28]
 8016662:	f000 f88d 	bl	8016780 <tcp_input_delayed_close>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d127      	bne.n	80166bc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801666c:	69f8      	ldr	r0, [r7, #28]
 801666e:	f002 ff1b 	bl	80194a8 <tcp_output>
 8016672:	e024      	b.n	80166be <tcp_input+0x756>
        goto aborted;
 8016674:	bf00      	nop
 8016676:	e022      	b.n	80166be <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016678:	bf00      	nop
 801667a:	e020      	b.n	80166be <tcp_input+0x756>
              goto aborted;
 801667c:	bf00      	nop
 801667e:	e01e      	b.n	80166be <tcp_input+0x756>
          goto aborted;
 8016680:	bf00      	nop
 8016682:	e01c      	b.n	80166be <tcp_input+0x756>
            goto aborted;
 8016684:	bf00      	nop
 8016686:	e01a      	b.n	80166be <tcp_input+0x756>
              goto aborted;
 8016688:	bf00      	nop
 801668a:	e018      	b.n	80166be <tcp_input+0x756>
 801668c:	24016e24 	.word	0x24016e24
 8016690:	24016e34 	.word	0x24016e34
 8016694:	24016e54 	.word	0x24016e54
 8016698:	24016e51 	.word	0x24016e51
 801669c:	24016e4c 	.word	0x24016e4c
 80166a0:	24016e50 	.word	0x24016e50
 80166a4:	24016e4e 	.word	0x24016e4e
 80166a8:	24016e58 	.word	0x24016e58
 80166ac:	24016e18 	.word	0x24016e18
 80166b0:	08020ed8 	.word	0x08020ed8
 80166b4:	0802108c 	.word	0x0802108c
 80166b8:	08020f24 	.word	0x08020f24
          goto aborted;
 80166bc:	bf00      	nop
    tcp_input_pcb = NULL;
 80166be:	4b27      	ldr	r3, [pc, #156]	@ (801675c <tcp_input+0x7f4>)
 80166c0:	2200      	movs	r2, #0
 80166c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80166c4:	4b26      	ldr	r3, [pc, #152]	@ (8016760 <tcp_input+0x7f8>)
 80166c6:	2200      	movs	r2, #0
 80166c8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80166ca:	4b26      	ldr	r3, [pc, #152]	@ (8016764 <tcp_input+0x7fc>)
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d03f      	beq.n	8016752 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80166d2:	4b24      	ldr	r3, [pc, #144]	@ (8016764 <tcp_input+0x7fc>)
 80166d4:	685b      	ldr	r3, [r3, #4]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7fd fb2a 	bl	8013d30 <pbuf_free>
      inseg.p = NULL;
 80166dc:	4b21      	ldr	r3, [pc, #132]	@ (8016764 <tcp_input+0x7fc>)
 80166de:	2200      	movs	r2, #0
 80166e0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80166e2:	e036      	b.n	8016752 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80166e4:	4b20      	ldr	r3, [pc, #128]	@ (8016768 <tcp_input+0x800>)
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	899b      	ldrh	r3, [r3, #12]
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7fb fe2f 	bl	8012350 <lwip_htons>
 80166f2:	4603      	mov	r3, r0
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	f003 0304 	and.w	r3, r3, #4
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d118      	bne.n	8016730 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80166fe:	4b1b      	ldr	r3, [pc, #108]	@ (801676c <tcp_input+0x804>)
 8016700:	6819      	ldr	r1, [r3, #0]
 8016702:	4b1b      	ldr	r3, [pc, #108]	@ (8016770 <tcp_input+0x808>)
 8016704:	881b      	ldrh	r3, [r3, #0]
 8016706:	461a      	mov	r2, r3
 8016708:	4b1a      	ldr	r3, [pc, #104]	@ (8016774 <tcp_input+0x80c>)
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801670e:	4b16      	ldr	r3, [pc, #88]	@ (8016768 <tcp_input+0x800>)
 8016710:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016712:	885b      	ldrh	r3, [r3, #2]
 8016714:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016716:	4a14      	ldr	r2, [pc, #80]	@ (8016768 <tcp_input+0x800>)
 8016718:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801671a:	8812      	ldrh	r2, [r2, #0]
 801671c:	b292      	uxth	r2, r2
 801671e:	9202      	str	r2, [sp, #8]
 8016720:	9301      	str	r3, [sp, #4]
 8016722:	4b15      	ldr	r3, [pc, #84]	@ (8016778 <tcp_input+0x810>)
 8016724:	9300      	str	r3, [sp, #0]
 8016726:	4b15      	ldr	r3, [pc, #84]	@ (801677c <tcp_input+0x814>)
 8016728:	4602      	mov	r2, r0
 801672a:	2000      	movs	r0, #0
 801672c:	f003 fc70 	bl	801a010 <tcp_rst>
    pbuf_free(p);
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f7fd fafd 	bl	8013d30 <pbuf_free>
  return;
 8016736:	e00c      	b.n	8016752 <tcp_input+0x7ea>
    goto dropped;
 8016738:	bf00      	nop
 801673a:	e006      	b.n	801674a <tcp_input+0x7e2>
    goto dropped;
 801673c:	bf00      	nop
 801673e:	e004      	b.n	801674a <tcp_input+0x7e2>
    goto dropped;
 8016740:	bf00      	nop
 8016742:	e002      	b.n	801674a <tcp_input+0x7e2>
      goto dropped;
 8016744:	bf00      	nop
 8016746:	e000      	b.n	801674a <tcp_input+0x7e2>
      goto dropped;
 8016748:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7fd faf0 	bl	8013d30 <pbuf_free>
 8016750:	e000      	b.n	8016754 <tcp_input+0x7ec>
  return;
 8016752:	bf00      	nop
}
 8016754:	3724      	adds	r7, #36	@ 0x24
 8016756:	46bd      	mov	sp, r7
 8016758:	bd90      	pop	{r4, r7, pc}
 801675a:	bf00      	nop
 801675c:	24016e58 	.word	0x24016e58
 8016760:	24016e54 	.word	0x24016e54
 8016764:	24016e24 	.word	0x24016e24
 8016768:	24016e34 	.word	0x24016e34
 801676c:	24016e48 	.word	0x24016e48
 8016770:	24016e4e 	.word	0x24016e4e
 8016774:	24016e44 	.word	0x24016e44
 8016778:	2401035c 	.word	0x2401035c
 801677c:	24010360 	.word	0x24010360

08016780 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d106      	bne.n	801679c <tcp_input_delayed_close+0x1c>
 801678e:	4b17      	ldr	r3, [pc, #92]	@ (80167ec <tcp_input_delayed_close+0x6c>)
 8016790:	f240 225a 	movw	r2, #602	@ 0x25a
 8016794:	4916      	ldr	r1, [pc, #88]	@ (80167f0 <tcp_input_delayed_close+0x70>)
 8016796:	4817      	ldr	r0, [pc, #92]	@ (80167f4 <tcp_input_delayed_close+0x74>)
 8016798:	f007 fb0c 	bl	801ddb4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801679c:	4b16      	ldr	r3, [pc, #88]	@ (80167f8 <tcp_input_delayed_close+0x78>)
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	f003 0310 	and.w	r3, r3, #16
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d01c      	beq.n	80167e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	8b5b      	ldrh	r3, [r3, #26]
 80167ac:	f003 0310 	and.w	r3, r3, #16
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d10d      	bne.n	80167d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d008      	beq.n	80167d0 <tcp_input_delayed_close+0x50>
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	6912      	ldr	r2, [r2, #16]
 80167c8:	f06f 010e 	mvn.w	r1, #14
 80167cc:	4610      	mov	r0, r2
 80167ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80167d0:	6879      	ldr	r1, [r7, #4]
 80167d2:	480a      	ldr	r0, [pc, #40]	@ (80167fc <tcp_input_delayed_close+0x7c>)
 80167d4:	f7ff fa50 	bl	8015c78 <tcp_pcb_remove>
    tcp_free(pcb);
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f7fd fd65 	bl	80142a8 <tcp_free>
    return 1;
 80167de:	2301      	movs	r3, #1
 80167e0:	e000      	b.n	80167e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80167e2:	2300      	movs	r3, #0
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3708      	adds	r7, #8
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}
 80167ec:	08020ed8 	.word	0x08020ed8
 80167f0:	080210a8 	.word	0x080210a8
 80167f4:	08020f24 	.word	0x08020f24
 80167f8:	24016e51 	.word	0x24016e51
 80167fc:	24016e18 	.word	0x24016e18

08016800 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016800:	b590      	push	{r4, r7, lr}
 8016802:	b08b      	sub	sp, #44	@ 0x2c
 8016804:	af04      	add	r7, sp, #16
 8016806:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016808:	4b6f      	ldr	r3, [pc, #444]	@ (80169c8 <tcp_listen_input+0x1c8>)
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	f003 0304 	and.w	r3, r3, #4
 8016810:	2b00      	cmp	r3, #0
 8016812:	f040 80d2 	bne.w	80169ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d106      	bne.n	801682a <tcp_listen_input+0x2a>
 801681c:	4b6b      	ldr	r3, [pc, #428]	@ (80169cc <tcp_listen_input+0x1cc>)
 801681e:	f240 2281 	movw	r2, #641	@ 0x281
 8016822:	496b      	ldr	r1, [pc, #428]	@ (80169d0 <tcp_listen_input+0x1d0>)
 8016824:	486b      	ldr	r0, [pc, #428]	@ (80169d4 <tcp_listen_input+0x1d4>)
 8016826:	f007 fac5 	bl	801ddb4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801682a:	4b67      	ldr	r3, [pc, #412]	@ (80169c8 <tcp_listen_input+0x1c8>)
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	f003 0310 	and.w	r3, r3, #16
 8016832:	2b00      	cmp	r3, #0
 8016834:	d019      	beq.n	801686a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016836:	4b68      	ldr	r3, [pc, #416]	@ (80169d8 <tcp_listen_input+0x1d8>)
 8016838:	6819      	ldr	r1, [r3, #0]
 801683a:	4b68      	ldr	r3, [pc, #416]	@ (80169dc <tcp_listen_input+0x1dc>)
 801683c:	881b      	ldrh	r3, [r3, #0]
 801683e:	461a      	mov	r2, r3
 8016840:	4b67      	ldr	r3, [pc, #412]	@ (80169e0 <tcp_listen_input+0x1e0>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016846:	4b67      	ldr	r3, [pc, #412]	@ (80169e4 <tcp_listen_input+0x1e4>)
 8016848:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801684a:	885b      	ldrh	r3, [r3, #2]
 801684c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801684e:	4a65      	ldr	r2, [pc, #404]	@ (80169e4 <tcp_listen_input+0x1e4>)
 8016850:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016852:	8812      	ldrh	r2, [r2, #0]
 8016854:	b292      	uxth	r2, r2
 8016856:	9202      	str	r2, [sp, #8]
 8016858:	9301      	str	r3, [sp, #4]
 801685a:	4b63      	ldr	r3, [pc, #396]	@ (80169e8 <tcp_listen_input+0x1e8>)
 801685c:	9300      	str	r3, [sp, #0]
 801685e:	4b63      	ldr	r3, [pc, #396]	@ (80169ec <tcp_listen_input+0x1ec>)
 8016860:	4602      	mov	r2, r0
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f003 fbd4 	bl	801a010 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016868:	e0a9      	b.n	80169be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801686a:	4b57      	ldr	r3, [pc, #348]	@ (80169c8 <tcp_listen_input+0x1c8>)
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	f003 0302 	and.w	r3, r3, #2
 8016872:	2b00      	cmp	r3, #0
 8016874:	f000 80a3 	beq.w	80169be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	7d5b      	ldrb	r3, [r3, #21]
 801687c:	4618      	mov	r0, r3
 801687e:	f7ff f859 	bl	8015934 <tcp_alloc>
 8016882:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016884:	697b      	ldr	r3, [r7, #20]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d111      	bne.n	80168ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	699b      	ldr	r3, [r3, #24]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d00a      	beq.n	80168a8 <tcp_listen_input+0xa8>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	699b      	ldr	r3, [r3, #24]
 8016896:	687a      	ldr	r2, [r7, #4]
 8016898:	6910      	ldr	r0, [r2, #16]
 801689a:	f04f 32ff 	mov.w	r2, #4294967295
 801689e:	2100      	movs	r1, #0
 80168a0:	4798      	blx	r3
 80168a2:	4603      	mov	r3, r0
 80168a4:	73bb      	strb	r3, [r7, #14]
      return;
 80168a6:	e08b      	b.n	80169c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80168a8:	23f0      	movs	r3, #240	@ 0xf0
 80168aa:	73bb      	strb	r3, [r7, #14]
      return;
 80168ac:	e088      	b.n	80169c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80168ae:	4b50      	ldr	r3, [pc, #320]	@ (80169f0 <tcp_listen_input+0x1f0>)
 80168b0:	695a      	ldr	r2, [r3, #20]
 80168b2:	697b      	ldr	r3, [r7, #20]
 80168b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80168b6:	4b4e      	ldr	r3, [pc, #312]	@ (80169f0 <tcp_listen_input+0x1f0>)
 80168b8:	691a      	ldr	r2, [r3, #16]
 80168ba:	697b      	ldr	r3, [r7, #20]
 80168bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	8ada      	ldrh	r2, [r3, #22]
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80168c6:	4b47      	ldr	r3, [pc, #284]	@ (80169e4 <tcp_listen_input+0x1e4>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	2203      	movs	r2, #3
 80168d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80168d8:	4b41      	ldr	r3, [pc, #260]	@ (80169e0 <tcp_listen_input+0x1e0>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	1c5a      	adds	r2, r3, #1
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80168e2:	697b      	ldr	r3, [r7, #20]
 80168e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80168ea:	6978      	ldr	r0, [r7, #20]
 80168ec:	f7ff fa58 	bl	8015da0 <tcp_next_iss>
 80168f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	693a      	ldr	r2, [r7, #16]
 80168f6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	693a      	ldr	r2, [r7, #16]
 80168fc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80168fe:	697b      	ldr	r3, [r7, #20]
 8016900:	693a      	ldr	r2, [r7, #16]
 8016902:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	693a      	ldr	r2, [r7, #16]
 8016908:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801690a:	4b35      	ldr	r3, [pc, #212]	@ (80169e0 <tcp_listen_input+0x1e0>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	1e5a      	subs	r2, r3, #1
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	691a      	ldr	r2, [r3, #16]
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	687a      	ldr	r2, [r7, #4]
 8016920:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	7a5b      	ldrb	r3, [r3, #9]
 8016926:	f003 030c 	and.w	r3, r3, #12
 801692a:	b2da      	uxtb	r2, r3
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	7a1a      	ldrb	r2, [r3, #8]
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016938:	4b2e      	ldr	r3, [pc, #184]	@ (80169f4 <tcp_listen_input+0x1f4>)
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	60da      	str	r2, [r3, #12]
 8016940:	4a2c      	ldr	r2, [pc, #176]	@ (80169f4 <tcp_listen_input+0x1f4>)
 8016942:	697b      	ldr	r3, [r7, #20]
 8016944:	6013      	str	r3, [r2, #0]
 8016946:	f003 fd25 	bl	801a394 <tcp_timer_needed>
 801694a:	4b2b      	ldr	r3, [pc, #172]	@ (80169f8 <tcp_listen_input+0x1f8>)
 801694c:	2201      	movs	r2, #1
 801694e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016950:	6978      	ldr	r0, [r7, #20]
 8016952:	f001 fd8b 	bl	801846c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016956:	4b23      	ldr	r3, [pc, #140]	@ (80169e4 <tcp_listen_input+0x1e4>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	89db      	ldrh	r3, [r3, #14]
 801695c:	b29a      	uxth	r2, r3
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016974:	697b      	ldr	r3, [r7, #20]
 8016976:	3304      	adds	r3, #4
 8016978:	4618      	mov	r0, r3
 801697a:	f005 fc6f 	bl	801c25c <ip4_route>
 801697e:	4601      	mov	r1, r0
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	3304      	adds	r3, #4
 8016984:	461a      	mov	r2, r3
 8016986:	4620      	mov	r0, r4
 8016988:	f7ff fa30 	bl	8015dec <tcp_eff_send_mss_netif>
 801698c:	4603      	mov	r3, r0
 801698e:	461a      	mov	r2, r3
 8016990:	697b      	ldr	r3, [r7, #20]
 8016992:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016994:	2112      	movs	r1, #18
 8016996:	6978      	ldr	r0, [r7, #20]
 8016998:	f002 fc98 	bl	80192cc <tcp_enqueue_flags>
 801699c:	4603      	mov	r3, r0
 801699e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80169a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d004      	beq.n	80169b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80169a8:	2100      	movs	r1, #0
 80169aa:	6978      	ldr	r0, [r7, #20]
 80169ac:	f7fd ff02 	bl	80147b4 <tcp_abandon>
      return;
 80169b0:	e006      	b.n	80169c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80169b2:	6978      	ldr	r0, [r7, #20]
 80169b4:	f002 fd78 	bl	80194a8 <tcp_output>
  return;
 80169b8:	e001      	b.n	80169be <tcp_listen_input+0x1be>
    return;
 80169ba:	bf00      	nop
 80169bc:	e000      	b.n	80169c0 <tcp_listen_input+0x1c0>
  return;
 80169be:	bf00      	nop
}
 80169c0:	371c      	adds	r7, #28
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd90      	pop	{r4, r7, pc}
 80169c6:	bf00      	nop
 80169c8:	24016e50 	.word	0x24016e50
 80169cc:	08020ed8 	.word	0x08020ed8
 80169d0:	080210d0 	.word	0x080210d0
 80169d4:	08020f24 	.word	0x08020f24
 80169d8:	24016e48 	.word	0x24016e48
 80169dc:	24016e4e 	.word	0x24016e4e
 80169e0:	24016e44 	.word	0x24016e44
 80169e4:	24016e34 	.word	0x24016e34
 80169e8:	2401035c 	.word	0x2401035c
 80169ec:	24010360 	.word	0x24010360
 80169f0:	2401034c 	.word	0x2401034c
 80169f4:	24016e18 	.word	0x24016e18
 80169f8:	24016e20 	.word	0x24016e20

080169fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b086      	sub	sp, #24
 8016a00:	af04      	add	r7, sp, #16
 8016a02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016a04:	4b2f      	ldr	r3, [pc, #188]	@ (8016ac4 <tcp_timewait_input+0xc8>)
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	f003 0304 	and.w	r3, r3, #4
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d153      	bne.n	8016ab8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d106      	bne.n	8016a24 <tcp_timewait_input+0x28>
 8016a16:	4b2c      	ldr	r3, [pc, #176]	@ (8016ac8 <tcp_timewait_input+0xcc>)
 8016a18:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016a1c:	492b      	ldr	r1, [pc, #172]	@ (8016acc <tcp_timewait_input+0xd0>)
 8016a1e:	482c      	ldr	r0, [pc, #176]	@ (8016ad0 <tcp_timewait_input+0xd4>)
 8016a20:	f007 f9c8 	bl	801ddb4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016a24:	4b27      	ldr	r3, [pc, #156]	@ (8016ac4 <tcp_timewait_input+0xc8>)
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	f003 0302 	and.w	r3, r3, #2
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d02a      	beq.n	8016a86 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016a30:	4b28      	ldr	r3, [pc, #160]	@ (8016ad4 <tcp_timewait_input+0xd8>)
 8016a32:	681a      	ldr	r2, [r3, #0]
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a38:	1ad3      	subs	r3, r2, r3
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	db2d      	blt.n	8016a9a <tcp_timewait_input+0x9e>
 8016a3e:	4b25      	ldr	r3, [pc, #148]	@ (8016ad4 <tcp_timewait_input+0xd8>)
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a46:	6879      	ldr	r1, [r7, #4]
 8016a48:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a4a:	440b      	add	r3, r1
 8016a4c:	1ad3      	subs	r3, r2, r3
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	dc23      	bgt.n	8016a9a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a52:	4b21      	ldr	r3, [pc, #132]	@ (8016ad8 <tcp_timewait_input+0xdc>)
 8016a54:	6819      	ldr	r1, [r3, #0]
 8016a56:	4b21      	ldr	r3, [pc, #132]	@ (8016adc <tcp_timewait_input+0xe0>)
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	461a      	mov	r2, r3
 8016a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8016ad4 <tcp_timewait_input+0xd8>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a62:	4b1f      	ldr	r3, [pc, #124]	@ (8016ae0 <tcp_timewait_input+0xe4>)
 8016a64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a66:	885b      	ldrh	r3, [r3, #2]
 8016a68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8016ae0 <tcp_timewait_input+0xe4>)
 8016a6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a6e:	8812      	ldrh	r2, [r2, #0]
 8016a70:	b292      	uxth	r2, r2
 8016a72:	9202      	str	r2, [sp, #8]
 8016a74:	9301      	str	r3, [sp, #4]
 8016a76:	4b1b      	ldr	r3, [pc, #108]	@ (8016ae4 <tcp_timewait_input+0xe8>)
 8016a78:	9300      	str	r3, [sp, #0]
 8016a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8016ae8 <tcp_timewait_input+0xec>)
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f003 fac6 	bl	801a010 <tcp_rst>
      return;
 8016a84:	e01b      	b.n	8016abe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016a86:	4b0f      	ldr	r3, [pc, #60]	@ (8016ac4 <tcp_timewait_input+0xc8>)
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	f003 0301 	and.w	r3, r3, #1
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d003      	beq.n	8016a9a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016a92:	4b16      	ldr	r3, [pc, #88]	@ (8016aec <tcp_timewait_input+0xf0>)
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016a9a:	4b10      	ldr	r3, [pc, #64]	@ (8016adc <tcp_timewait_input+0xe0>)
 8016a9c:	881b      	ldrh	r3, [r3, #0]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d00c      	beq.n	8016abc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	8b5b      	ldrh	r3, [r3, #26]
 8016aa6:	f043 0302 	orr.w	r3, r3, #2
 8016aaa:	b29a      	uxth	r2, r3
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f002 fcf9 	bl	80194a8 <tcp_output>
  }
  return;
 8016ab6:	e001      	b.n	8016abc <tcp_timewait_input+0xc0>
    return;
 8016ab8:	bf00      	nop
 8016aba:	e000      	b.n	8016abe <tcp_timewait_input+0xc2>
  return;
 8016abc:	bf00      	nop
}
 8016abe:	3708      	adds	r7, #8
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd80      	pop	{r7, pc}
 8016ac4:	24016e50 	.word	0x24016e50
 8016ac8:	08020ed8 	.word	0x08020ed8
 8016acc:	080210f0 	.word	0x080210f0
 8016ad0:	08020f24 	.word	0x08020f24
 8016ad4:	24016e44 	.word	0x24016e44
 8016ad8:	24016e48 	.word	0x24016e48
 8016adc:	24016e4e 	.word	0x24016e4e
 8016ae0:	24016e34 	.word	0x24016e34
 8016ae4:	2401035c 	.word	0x2401035c
 8016ae8:	24010360 	.word	0x24010360
 8016aec:	24016e0c 	.word	0x24016e0c

08016af0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016af0:	b590      	push	{r4, r7, lr}
 8016af2:	b08d      	sub	sp, #52	@ 0x34
 8016af4:	af04      	add	r7, sp, #16
 8016af6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016af8:	2300      	movs	r3, #0
 8016afa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016afc:	2300      	movs	r3, #0
 8016afe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d106      	bne.n	8016b14 <tcp_process+0x24>
 8016b06:	4b9d      	ldr	r3, [pc, #628]	@ (8016d7c <tcp_process+0x28c>)
 8016b08:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016b0c:	499c      	ldr	r1, [pc, #624]	@ (8016d80 <tcp_process+0x290>)
 8016b0e:	489d      	ldr	r0, [pc, #628]	@ (8016d84 <tcp_process+0x294>)
 8016b10:	f007 f950 	bl	801ddb4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016b14:	4b9c      	ldr	r3, [pc, #624]	@ (8016d88 <tcp_process+0x298>)
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	f003 0304 	and.w	r3, r3, #4
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d04e      	beq.n	8016bbe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	7d1b      	ldrb	r3, [r3, #20]
 8016b24:	2b02      	cmp	r3, #2
 8016b26:	d108      	bne.n	8016b3a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016b2c:	4b97      	ldr	r3, [pc, #604]	@ (8016d8c <tcp_process+0x29c>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d123      	bne.n	8016b7c <tcp_process+0x8c>
        acceptable = 1;
 8016b34:	2301      	movs	r3, #1
 8016b36:	76fb      	strb	r3, [r7, #27]
 8016b38:	e020      	b.n	8016b7c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b3e:	4b94      	ldr	r3, [pc, #592]	@ (8016d90 <tcp_process+0x2a0>)
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d102      	bne.n	8016b4c <tcp_process+0x5c>
        acceptable = 1;
 8016b46:	2301      	movs	r3, #1
 8016b48:	76fb      	strb	r3, [r7, #27]
 8016b4a:	e017      	b.n	8016b7c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016b4c:	4b90      	ldr	r3, [pc, #576]	@ (8016d90 <tcp_process+0x2a0>)
 8016b4e:	681a      	ldr	r2, [r3, #0]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b54:	1ad3      	subs	r3, r2, r3
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	db10      	blt.n	8016b7c <tcp_process+0x8c>
 8016b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8016d90 <tcp_process+0x2a0>)
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b62:	6879      	ldr	r1, [r7, #4]
 8016b64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016b66:	440b      	add	r3, r1
 8016b68:	1ad3      	subs	r3, r2, r3
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	dc06      	bgt.n	8016b7c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	8b5b      	ldrh	r3, [r3, #26]
 8016b72:	f043 0302 	orr.w	r3, r3, #2
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016b7c:	7efb      	ldrb	r3, [r7, #27]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d01b      	beq.n	8016bba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	7d1b      	ldrb	r3, [r3, #20]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d106      	bne.n	8016b98 <tcp_process+0xa8>
 8016b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8016d7c <tcp_process+0x28c>)
 8016b8c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016b90:	4980      	ldr	r1, [pc, #512]	@ (8016d94 <tcp_process+0x2a4>)
 8016b92:	487c      	ldr	r0, [pc, #496]	@ (8016d84 <tcp_process+0x294>)
 8016b94:	f007 f90e 	bl	801ddb4 <iprintf>
      recv_flags |= TF_RESET;
 8016b98:	4b7f      	ldr	r3, [pc, #508]	@ (8016d98 <tcp_process+0x2a8>)
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	f043 0308 	orr.w	r3, r3, #8
 8016ba0:	b2da      	uxtb	r2, r3
 8016ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8016d98 <tcp_process+0x2a8>)
 8016ba4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	8b5b      	ldrh	r3, [r3, #26]
 8016baa:	f023 0301 	bic.w	r3, r3, #1
 8016bae:	b29a      	uxth	r2, r3
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016bb4:	f06f 030d 	mvn.w	r3, #13
 8016bb8:	e37a      	b.n	80172b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	e378      	b.n	80172b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016bbe:	4b72      	ldr	r3, [pc, #456]	@ (8016d88 <tcp_process+0x298>)
 8016bc0:	781b      	ldrb	r3, [r3, #0]
 8016bc2:	f003 0302 	and.w	r3, r3, #2
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d010      	beq.n	8016bec <tcp_process+0xfc>
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	7d1b      	ldrb	r3, [r3, #20]
 8016bce:	2b02      	cmp	r3, #2
 8016bd0:	d00c      	beq.n	8016bec <tcp_process+0xfc>
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	7d1b      	ldrb	r3, [r3, #20]
 8016bd6:	2b03      	cmp	r3, #3
 8016bd8:	d008      	beq.n	8016bec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	8b5b      	ldrh	r3, [r3, #26]
 8016bde:	f043 0302 	orr.w	r3, r3, #2
 8016be2:	b29a      	uxth	r2, r3
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	e361      	b.n	80172b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	8b5b      	ldrh	r3, [r3, #26]
 8016bf0:	f003 0310 	and.w	r3, r3, #16
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d103      	bne.n	8016c00 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016bf8:	4b68      	ldr	r3, [pc, #416]	@ (8016d9c <tcp_process+0x2ac>)
 8016bfa:	681a      	ldr	r2, [r3, #0]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2200      	movs	r2, #0
 8016c04:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	f001 fc2b 	bl	801846c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	7d1b      	ldrb	r3, [r3, #20]
 8016c1a:	3b02      	subs	r3, #2
 8016c1c:	2b07      	cmp	r3, #7
 8016c1e:	f200 8337 	bhi.w	8017290 <tcp_process+0x7a0>
 8016c22:	a201      	add	r2, pc, #4	@ (adr r2, 8016c28 <tcp_process+0x138>)
 8016c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c28:	08016c49 	.word	0x08016c49
 8016c2c:	08016e79 	.word	0x08016e79
 8016c30:	08016ff1 	.word	0x08016ff1
 8016c34:	0801701b 	.word	0x0801701b
 8016c38:	0801713f 	.word	0x0801713f
 8016c3c:	08016ff1 	.word	0x08016ff1
 8016c40:	080171cb 	.word	0x080171cb
 8016c44:	0801725b 	.word	0x0801725b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016c48:	4b4f      	ldr	r3, [pc, #316]	@ (8016d88 <tcp_process+0x298>)
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	f003 0310 	and.w	r3, r3, #16
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	f000 80e4 	beq.w	8016e1e <tcp_process+0x32e>
 8016c56:	4b4c      	ldr	r3, [pc, #304]	@ (8016d88 <tcp_process+0x298>)
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	f003 0302 	and.w	r3, r3, #2
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	f000 80dd 	beq.w	8016e1e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c68:	1c5a      	adds	r2, r3, #1
 8016c6a:	4b48      	ldr	r3, [pc, #288]	@ (8016d8c <tcp_process+0x29c>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	f040 80d5 	bne.w	8016e1e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016c74:	4b46      	ldr	r3, [pc, #280]	@ (8016d90 <tcp_process+0x2a0>)
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	1c5a      	adds	r2, r3, #1
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016c86:	4b41      	ldr	r3, [pc, #260]	@ (8016d8c <tcp_process+0x29c>)
 8016c88:	681a      	ldr	r2, [r3, #0]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016c8e:	4b44      	ldr	r3, [pc, #272]	@ (8016da0 <tcp_process+0x2b0>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	89db      	ldrh	r3, [r3, #14]
 8016c94:	b29a      	uxth	r2, r3
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016ca8:	4b39      	ldr	r3, [pc, #228]	@ (8016d90 <tcp_process+0x2a0>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	1e5a      	subs	r2, r3, #1
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2204      	movs	r2, #4
 8016cb6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	3304      	adds	r3, #4
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f005 facb 	bl	801c25c <ip4_route>
 8016cc6:	4601      	mov	r1, r0
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	3304      	adds	r3, #4
 8016ccc:	461a      	mov	r2, r3
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f7ff f88c 	bl	8015dec <tcp_eff_send_mss_netif>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	461a      	mov	r2, r3
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ce0:	009a      	lsls	r2, r3, #2
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ce6:	005b      	lsls	r3, r3, #1
 8016ce8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016cec:	428b      	cmp	r3, r1
 8016cee:	bf38      	it	cc
 8016cf0:	460b      	movcc	r3, r1
 8016cf2:	429a      	cmp	r2, r3
 8016cf4:	d204      	bcs.n	8016d00 <tcp_process+0x210>
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	b29b      	uxth	r3, r3
 8016cfe:	e00d      	b.n	8016d1c <tcp_process+0x22c>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d04:	005b      	lsls	r3, r3, #1
 8016d06:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	d904      	bls.n	8016d18 <tcp_process+0x228>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d12:	005b      	lsls	r3, r3, #1
 8016d14:	b29b      	uxth	r3, r3
 8016d16:	e001      	b.n	8016d1c <tcp_process+0x22c>
 8016d18:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d106      	bne.n	8016d3a <tcp_process+0x24a>
 8016d2c:	4b13      	ldr	r3, [pc, #76]	@ (8016d7c <tcp_process+0x28c>)
 8016d2e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016d32:	491c      	ldr	r1, [pc, #112]	@ (8016da4 <tcp_process+0x2b4>)
 8016d34:	4813      	ldr	r0, [pc, #76]	@ (8016d84 <tcp_process+0x294>)
 8016d36:	f007 f83d 	bl	801ddb4 <iprintf>
        --pcb->snd_queuelen;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d40:	3b01      	subs	r3, #1
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d4e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d12a      	bne.n	8016dac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d5a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d106      	bne.n	8016d70 <tcp_process+0x280>
 8016d62:	4b06      	ldr	r3, [pc, #24]	@ (8016d7c <tcp_process+0x28c>)
 8016d64:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016d68:	490f      	ldr	r1, [pc, #60]	@ (8016da8 <tcp_process+0x2b8>)
 8016d6a:	4806      	ldr	r0, [pc, #24]	@ (8016d84 <tcp_process+0x294>)
 8016d6c:	f007 f822 	bl	801ddb4 <iprintf>
          pcb->unsent = rseg->next;
 8016d70:	69fb      	ldr	r3, [r7, #28]
 8016d72:	681a      	ldr	r2, [r3, #0]
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016d78:	e01c      	b.n	8016db4 <tcp_process+0x2c4>
 8016d7a:	bf00      	nop
 8016d7c:	08020ed8 	.word	0x08020ed8
 8016d80:	08021110 	.word	0x08021110
 8016d84:	08020f24 	.word	0x08020f24
 8016d88:	24016e50 	.word	0x24016e50
 8016d8c:	24016e48 	.word	0x24016e48
 8016d90:	24016e44 	.word	0x24016e44
 8016d94:	0802112c 	.word	0x0802112c
 8016d98:	24016e51 	.word	0x24016e51
 8016d9c:	24016e0c 	.word	0x24016e0c
 8016da0:	24016e34 	.word	0x24016e34
 8016da4:	0802114c 	.word	0x0802114c
 8016da8:	08021164 	.word	0x08021164
        } else {
          pcb->unacked = rseg->next;
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	681a      	ldr	r2, [r3, #0]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016db4:	69f8      	ldr	r0, [r7, #28]
 8016db6:	f7fe fc54 	bl	8015662 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d104      	bne.n	8016dcc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016dc8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016dca:	e006      	b.n	8016dda <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d00a      	beq.n	8016dfa <tcp_process+0x30a>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	6910      	ldr	r0, [r2, #16]
 8016dee:	2200      	movs	r2, #0
 8016df0:	6879      	ldr	r1, [r7, #4]
 8016df2:	4798      	blx	r3
 8016df4:	4603      	mov	r3, r0
 8016df6:	76bb      	strb	r3, [r7, #26]
 8016df8:	e001      	b.n	8016dfe <tcp_process+0x30e>
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016dfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016e02:	f113 0f0d 	cmn.w	r3, #13
 8016e06:	d102      	bne.n	8016e0e <tcp_process+0x31e>
          return ERR_ABRT;
 8016e08:	f06f 030c 	mvn.w	r3, #12
 8016e0c:	e250      	b.n	80172b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	8b5b      	ldrh	r3, [r3, #26]
 8016e12:	f043 0302 	orr.w	r3, r3, #2
 8016e16:	b29a      	uxth	r2, r3
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016e1c:	e23a      	b.n	8017294 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016e1e:	4b98      	ldr	r3, [pc, #608]	@ (8017080 <tcp_process+0x590>)
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	f003 0310 	and.w	r3, r3, #16
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	f000 8234 	beq.w	8017294 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e2c:	4b95      	ldr	r3, [pc, #596]	@ (8017084 <tcp_process+0x594>)
 8016e2e:	6819      	ldr	r1, [r3, #0]
 8016e30:	4b95      	ldr	r3, [pc, #596]	@ (8017088 <tcp_process+0x598>)
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	461a      	mov	r2, r3
 8016e36:	4b95      	ldr	r3, [pc, #596]	@ (801708c <tcp_process+0x59c>)
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e3c:	4b94      	ldr	r3, [pc, #592]	@ (8017090 <tcp_process+0x5a0>)
 8016e3e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e40:	885b      	ldrh	r3, [r3, #2]
 8016e42:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e44:	4a92      	ldr	r2, [pc, #584]	@ (8017090 <tcp_process+0x5a0>)
 8016e46:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e48:	8812      	ldrh	r2, [r2, #0]
 8016e4a:	b292      	uxth	r2, r2
 8016e4c:	9202      	str	r2, [sp, #8]
 8016e4e:	9301      	str	r3, [sp, #4]
 8016e50:	4b90      	ldr	r3, [pc, #576]	@ (8017094 <tcp_process+0x5a4>)
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	4b90      	ldr	r3, [pc, #576]	@ (8017098 <tcp_process+0x5a8>)
 8016e56:	4602      	mov	r2, r0
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f003 f8d9 	bl	801a010 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e64:	2b05      	cmp	r3, #5
 8016e66:	f200 8215 	bhi.w	8017294 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f002 fea5 	bl	8019bc0 <tcp_rexmit_rto>
      break;
 8016e76:	e20d      	b.n	8017294 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016e78:	4b81      	ldr	r3, [pc, #516]	@ (8017080 <tcp_process+0x590>)
 8016e7a:	781b      	ldrb	r3, [r3, #0]
 8016e7c:	f003 0310 	and.w	r3, r3, #16
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	f000 80a1 	beq.w	8016fc8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016e86:	4b7f      	ldr	r3, [pc, #508]	@ (8017084 <tcp_process+0x594>)
 8016e88:	681a      	ldr	r2, [r3, #0]
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e8e:	1ad3      	subs	r3, r2, r3
 8016e90:	3b01      	subs	r3, #1
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	db7e      	blt.n	8016f94 <tcp_process+0x4a4>
 8016e96:	4b7b      	ldr	r3, [pc, #492]	@ (8017084 <tcp_process+0x594>)
 8016e98:	681a      	ldr	r2, [r3, #0]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	dc77      	bgt.n	8016f94 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2204      	movs	r2, #4
 8016ea8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d102      	bne.n	8016eb8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8016eb2:	23fa      	movs	r3, #250	@ 0xfa
 8016eb4:	76bb      	strb	r3, [r7, #26]
 8016eb6:	e01d      	b.n	8016ef4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ebc:	699b      	ldr	r3, [r3, #24]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d106      	bne.n	8016ed0 <tcp_process+0x3e0>
 8016ec2:	4b76      	ldr	r3, [pc, #472]	@ (801709c <tcp_process+0x5ac>)
 8016ec4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016ec8:	4975      	ldr	r1, [pc, #468]	@ (80170a0 <tcp_process+0x5b0>)
 8016eca:	4876      	ldr	r0, [pc, #472]	@ (80170a4 <tcp_process+0x5b4>)
 8016ecc:	f006 ff72 	bl	801ddb4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ed4:	699b      	ldr	r3, [r3, #24]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d00a      	beq.n	8016ef0 <tcp_process+0x400>
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ede:	699b      	ldr	r3, [r3, #24]
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	6910      	ldr	r0, [r2, #16]
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	6879      	ldr	r1, [r7, #4]
 8016ee8:	4798      	blx	r3
 8016eea:	4603      	mov	r3, r0
 8016eec:	76bb      	strb	r3, [r7, #26]
 8016eee:	e001      	b.n	8016ef4 <tcp_process+0x404>
 8016ef0:	23f0      	movs	r3, #240	@ 0xf0
 8016ef2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016ef4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d00a      	beq.n	8016f12 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016efc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016f00:	f113 0f0d 	cmn.w	r3, #13
 8016f04:	d002      	beq.n	8016f0c <tcp_process+0x41c>
              tcp_abort(pcb);
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f7fd fd12 	bl	8014930 <tcp_abort>
            }
            return ERR_ABRT;
 8016f0c:	f06f 030c 	mvn.w	r3, #12
 8016f10:	e1ce      	b.n	80172b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f000 fae0 	bl	80174d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016f18:	4b63      	ldr	r3, [pc, #396]	@ (80170a8 <tcp_process+0x5b8>)
 8016f1a:	881b      	ldrh	r3, [r3, #0]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d005      	beq.n	8016f2c <tcp_process+0x43c>
            recv_acked--;
 8016f20:	4b61      	ldr	r3, [pc, #388]	@ (80170a8 <tcp_process+0x5b8>)
 8016f22:	881b      	ldrh	r3, [r3, #0]
 8016f24:	3b01      	subs	r3, #1
 8016f26:	b29a      	uxth	r2, r3
 8016f28:	4b5f      	ldr	r3, [pc, #380]	@ (80170a8 <tcp_process+0x5b8>)
 8016f2a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f30:	009a      	lsls	r2, r3, #2
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f36:	005b      	lsls	r3, r3, #1
 8016f38:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016f3c:	428b      	cmp	r3, r1
 8016f3e:	bf38      	it	cc
 8016f40:	460b      	movcc	r3, r1
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d204      	bcs.n	8016f50 <tcp_process+0x460>
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f4a:	009b      	lsls	r3, r3, #2
 8016f4c:	b29b      	uxth	r3, r3
 8016f4e:	e00d      	b.n	8016f6c <tcp_process+0x47c>
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f54:	005b      	lsls	r3, r3, #1
 8016f56:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	d904      	bls.n	8016f68 <tcp_process+0x478>
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f62:	005b      	lsls	r3, r3, #1
 8016f64:	b29b      	uxth	r3, r3
 8016f66:	e001      	b.n	8016f6c <tcp_process+0x47c>
 8016f68:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016f72:	4b4e      	ldr	r3, [pc, #312]	@ (80170ac <tcp_process+0x5bc>)
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	f003 0320 	and.w	r3, r3, #32
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d037      	beq.n	8016fee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	8b5b      	ldrh	r3, [r3, #26]
 8016f82:	f043 0302 	orr.w	r3, r3, #2
 8016f86:	b29a      	uxth	r2, r3
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2207      	movs	r2, #7
 8016f90:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016f92:	e02c      	b.n	8016fee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f94:	4b3b      	ldr	r3, [pc, #236]	@ (8017084 <tcp_process+0x594>)
 8016f96:	6819      	ldr	r1, [r3, #0]
 8016f98:	4b3b      	ldr	r3, [pc, #236]	@ (8017088 <tcp_process+0x598>)
 8016f9a:	881b      	ldrh	r3, [r3, #0]
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	4b3b      	ldr	r3, [pc, #236]	@ (801708c <tcp_process+0x59c>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8017090 <tcp_process+0x5a0>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fa8:	885b      	ldrh	r3, [r3, #2]
 8016faa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fac:	4a38      	ldr	r2, [pc, #224]	@ (8017090 <tcp_process+0x5a0>)
 8016fae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fb0:	8812      	ldrh	r2, [r2, #0]
 8016fb2:	b292      	uxth	r2, r2
 8016fb4:	9202      	str	r2, [sp, #8]
 8016fb6:	9301      	str	r3, [sp, #4]
 8016fb8:	4b36      	ldr	r3, [pc, #216]	@ (8017094 <tcp_process+0x5a4>)
 8016fba:	9300      	str	r3, [sp, #0]
 8016fbc:	4b36      	ldr	r3, [pc, #216]	@ (8017098 <tcp_process+0x5a8>)
 8016fbe:	4602      	mov	r2, r0
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f003 f825 	bl	801a010 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016fc6:	e167      	b.n	8017298 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8017080 <tcp_process+0x590>)
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	f003 0302 	and.w	r3, r3, #2
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f000 8161 	beq.w	8017298 <tcp_process+0x7a8>
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fda:	1e5a      	subs	r2, r3, #1
 8016fdc:	4b2b      	ldr	r3, [pc, #172]	@ (801708c <tcp_process+0x59c>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	429a      	cmp	r2, r3
 8016fe2:	f040 8159 	bne.w	8017298 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f002 fe0c 	bl	8019c04 <tcp_rexmit>
      break;
 8016fec:	e154      	b.n	8017298 <tcp_process+0x7a8>
 8016fee:	e153      	b.n	8017298 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016ff0:	6878      	ldr	r0, [r7, #4]
 8016ff2:	f000 fa71 	bl	80174d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80170ac <tcp_process+0x5bc>)
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	f003 0320 	and.w	r3, r3, #32
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f000 814c 	beq.w	801729c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	8b5b      	ldrh	r3, [r3, #26]
 8017008:	f043 0302 	orr.w	r3, r3, #2
 801700c:	b29a      	uxth	r2, r3
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2207      	movs	r2, #7
 8017016:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017018:	e140      	b.n	801729c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f000 fa5c 	bl	80174d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017020:	4b22      	ldr	r3, [pc, #136]	@ (80170ac <tcp_process+0x5bc>)
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	f003 0320 	and.w	r3, r3, #32
 8017028:	2b00      	cmp	r3, #0
 801702a:	d071      	beq.n	8017110 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801702c:	4b14      	ldr	r3, [pc, #80]	@ (8017080 <tcp_process+0x590>)
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	f003 0310 	and.w	r3, r3, #16
 8017034:	2b00      	cmp	r3, #0
 8017036:	d060      	beq.n	80170fa <tcp_process+0x60a>
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801703c:	4b11      	ldr	r3, [pc, #68]	@ (8017084 <tcp_process+0x594>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	429a      	cmp	r2, r3
 8017042:	d15a      	bne.n	80170fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017048:	2b00      	cmp	r3, #0
 801704a:	d156      	bne.n	80170fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	8b5b      	ldrh	r3, [r3, #26]
 8017050:	f043 0302 	orr.w	r3, r3, #2
 8017054:	b29a      	uxth	r2, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f7fe fdbc 	bl	8015bd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017060:	4b13      	ldr	r3, [pc, #76]	@ (80170b0 <tcp_process+0x5c0>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	687a      	ldr	r2, [r7, #4]
 8017066:	429a      	cmp	r2, r3
 8017068:	d105      	bne.n	8017076 <tcp_process+0x586>
 801706a:	4b11      	ldr	r3, [pc, #68]	@ (80170b0 <tcp_process+0x5c0>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	68db      	ldr	r3, [r3, #12]
 8017070:	4a0f      	ldr	r2, [pc, #60]	@ (80170b0 <tcp_process+0x5c0>)
 8017072:	6013      	str	r3, [r2, #0]
 8017074:	e02e      	b.n	80170d4 <tcp_process+0x5e4>
 8017076:	4b0e      	ldr	r3, [pc, #56]	@ (80170b0 <tcp_process+0x5c0>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	617b      	str	r3, [r7, #20]
 801707c:	e027      	b.n	80170ce <tcp_process+0x5de>
 801707e:	bf00      	nop
 8017080:	24016e50 	.word	0x24016e50
 8017084:	24016e48 	.word	0x24016e48
 8017088:	24016e4e 	.word	0x24016e4e
 801708c:	24016e44 	.word	0x24016e44
 8017090:	24016e34 	.word	0x24016e34
 8017094:	2401035c 	.word	0x2401035c
 8017098:	24010360 	.word	0x24010360
 801709c:	08020ed8 	.word	0x08020ed8
 80170a0:	08021178 	.word	0x08021178
 80170a4:	08020f24 	.word	0x08020f24
 80170a8:	24016e4c 	.word	0x24016e4c
 80170ac:	24016e51 	.word	0x24016e51
 80170b0:	24016e18 	.word	0x24016e18
 80170b4:	697b      	ldr	r3, [r7, #20]
 80170b6:	68db      	ldr	r3, [r3, #12]
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d104      	bne.n	80170c8 <tcp_process+0x5d8>
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	68da      	ldr	r2, [r3, #12]
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	60da      	str	r2, [r3, #12]
 80170c6:	e005      	b.n	80170d4 <tcp_process+0x5e4>
 80170c8:	697b      	ldr	r3, [r7, #20]
 80170ca:	68db      	ldr	r3, [r3, #12]
 80170cc:	617b      	str	r3, [r7, #20]
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d1ef      	bne.n	80170b4 <tcp_process+0x5c4>
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2200      	movs	r2, #0
 80170d8:	60da      	str	r2, [r3, #12]
 80170da:	4b77      	ldr	r3, [pc, #476]	@ (80172b8 <tcp_process+0x7c8>)
 80170dc:	2201      	movs	r2, #1
 80170de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	220a      	movs	r2, #10
 80170e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80170e6:	4b75      	ldr	r3, [pc, #468]	@ (80172bc <tcp_process+0x7cc>)
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	60da      	str	r2, [r3, #12]
 80170ee:	4a73      	ldr	r2, [pc, #460]	@ (80172bc <tcp_process+0x7cc>)
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	6013      	str	r3, [r2, #0]
 80170f4:	f003 f94e 	bl	801a394 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80170f8:	e0d2      	b.n	80172a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	8b5b      	ldrh	r3, [r3, #26]
 80170fe:	f043 0302 	orr.w	r3, r3, #2
 8017102:	b29a      	uxth	r2, r3
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	2208      	movs	r2, #8
 801710c:	751a      	strb	r2, [r3, #20]
      break;
 801710e:	e0c7      	b.n	80172a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017110:	4b6b      	ldr	r3, [pc, #428]	@ (80172c0 <tcp_process+0x7d0>)
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	f003 0310 	and.w	r3, r3, #16
 8017118:	2b00      	cmp	r3, #0
 801711a:	f000 80c1 	beq.w	80172a0 <tcp_process+0x7b0>
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017122:	4b68      	ldr	r3, [pc, #416]	@ (80172c4 <tcp_process+0x7d4>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	429a      	cmp	r2, r3
 8017128:	f040 80ba 	bne.w	80172a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017130:	2b00      	cmp	r3, #0
 8017132:	f040 80b5 	bne.w	80172a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	2206      	movs	r2, #6
 801713a:	751a      	strb	r2, [r3, #20]
      break;
 801713c:	e0b0      	b.n	80172a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 f9ca 	bl	80174d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017144:	4b60      	ldr	r3, [pc, #384]	@ (80172c8 <tcp_process+0x7d8>)
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	f003 0320 	and.w	r3, r3, #32
 801714c:	2b00      	cmp	r3, #0
 801714e:	f000 80a9 	beq.w	80172a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	8b5b      	ldrh	r3, [r3, #26]
 8017156:	f043 0302 	orr.w	r3, r3, #2
 801715a:	b29a      	uxth	r2, r3
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f7fe fd39 	bl	8015bd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017166:	4b59      	ldr	r3, [pc, #356]	@ (80172cc <tcp_process+0x7dc>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	687a      	ldr	r2, [r7, #4]
 801716c:	429a      	cmp	r2, r3
 801716e:	d105      	bne.n	801717c <tcp_process+0x68c>
 8017170:	4b56      	ldr	r3, [pc, #344]	@ (80172cc <tcp_process+0x7dc>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	68db      	ldr	r3, [r3, #12]
 8017176:	4a55      	ldr	r2, [pc, #340]	@ (80172cc <tcp_process+0x7dc>)
 8017178:	6013      	str	r3, [r2, #0]
 801717a:	e013      	b.n	80171a4 <tcp_process+0x6b4>
 801717c:	4b53      	ldr	r3, [pc, #332]	@ (80172cc <tcp_process+0x7dc>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	613b      	str	r3, [r7, #16]
 8017182:	e00c      	b.n	801719e <tcp_process+0x6ae>
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	687a      	ldr	r2, [r7, #4]
 801718a:	429a      	cmp	r2, r3
 801718c:	d104      	bne.n	8017198 <tcp_process+0x6a8>
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	68da      	ldr	r2, [r3, #12]
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	60da      	str	r2, [r3, #12]
 8017196:	e005      	b.n	80171a4 <tcp_process+0x6b4>
 8017198:	693b      	ldr	r3, [r7, #16]
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	613b      	str	r3, [r7, #16]
 801719e:	693b      	ldr	r3, [r7, #16]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d1ef      	bne.n	8017184 <tcp_process+0x694>
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2200      	movs	r2, #0
 80171a8:	60da      	str	r2, [r3, #12]
 80171aa:	4b43      	ldr	r3, [pc, #268]	@ (80172b8 <tcp_process+0x7c8>)
 80171ac:	2201      	movs	r2, #1
 80171ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	220a      	movs	r2, #10
 80171b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80171b6:	4b41      	ldr	r3, [pc, #260]	@ (80172bc <tcp_process+0x7cc>)
 80171b8:	681a      	ldr	r2, [r3, #0]
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	60da      	str	r2, [r3, #12]
 80171be:	4a3f      	ldr	r2, [pc, #252]	@ (80172bc <tcp_process+0x7cc>)
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6013      	str	r3, [r2, #0]
 80171c4:	f003 f8e6 	bl	801a394 <tcp_timer_needed>
      }
      break;
 80171c8:	e06c      	b.n	80172a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f000 f984 	bl	80174d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80171d0:	4b3b      	ldr	r3, [pc, #236]	@ (80172c0 <tcp_process+0x7d0>)
 80171d2:	781b      	ldrb	r3, [r3, #0]
 80171d4:	f003 0310 	and.w	r3, r3, #16
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d065      	beq.n	80172a8 <tcp_process+0x7b8>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80171e0:	4b38      	ldr	r3, [pc, #224]	@ (80172c4 <tcp_process+0x7d4>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d15f      	bne.n	80172a8 <tcp_process+0x7b8>
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d15b      	bne.n	80172a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f7fe fcf1 	bl	8015bd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80171f6:	4b35      	ldr	r3, [pc, #212]	@ (80172cc <tcp_process+0x7dc>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	687a      	ldr	r2, [r7, #4]
 80171fc:	429a      	cmp	r2, r3
 80171fe:	d105      	bne.n	801720c <tcp_process+0x71c>
 8017200:	4b32      	ldr	r3, [pc, #200]	@ (80172cc <tcp_process+0x7dc>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	4a31      	ldr	r2, [pc, #196]	@ (80172cc <tcp_process+0x7dc>)
 8017208:	6013      	str	r3, [r2, #0]
 801720a:	e013      	b.n	8017234 <tcp_process+0x744>
 801720c:	4b2f      	ldr	r3, [pc, #188]	@ (80172cc <tcp_process+0x7dc>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	60fb      	str	r3, [r7, #12]
 8017212:	e00c      	b.n	801722e <tcp_process+0x73e>
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	68db      	ldr	r3, [r3, #12]
 8017218:	687a      	ldr	r2, [r7, #4]
 801721a:	429a      	cmp	r2, r3
 801721c:	d104      	bne.n	8017228 <tcp_process+0x738>
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	68da      	ldr	r2, [r3, #12]
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	60da      	str	r2, [r3, #12]
 8017226:	e005      	b.n	8017234 <tcp_process+0x744>
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	68db      	ldr	r3, [r3, #12]
 801722c:	60fb      	str	r3, [r7, #12]
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d1ef      	bne.n	8017214 <tcp_process+0x724>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2200      	movs	r2, #0
 8017238:	60da      	str	r2, [r3, #12]
 801723a:	4b1f      	ldr	r3, [pc, #124]	@ (80172b8 <tcp_process+0x7c8>)
 801723c:	2201      	movs	r2, #1
 801723e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	220a      	movs	r2, #10
 8017244:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017246:	4b1d      	ldr	r3, [pc, #116]	@ (80172bc <tcp_process+0x7cc>)
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	60da      	str	r2, [r3, #12]
 801724e:	4a1b      	ldr	r2, [pc, #108]	@ (80172bc <tcp_process+0x7cc>)
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6013      	str	r3, [r2, #0]
 8017254:	f003 f89e 	bl	801a394 <tcp_timer_needed>
      }
      break;
 8017258:	e026      	b.n	80172a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f000 f93c 	bl	80174d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017260:	4b17      	ldr	r3, [pc, #92]	@ (80172c0 <tcp_process+0x7d0>)
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	f003 0310 	and.w	r3, r3, #16
 8017268:	2b00      	cmp	r3, #0
 801726a:	d01f      	beq.n	80172ac <tcp_process+0x7bc>
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017270:	4b14      	ldr	r3, [pc, #80]	@ (80172c4 <tcp_process+0x7d4>)
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	429a      	cmp	r2, r3
 8017276:	d119      	bne.n	80172ac <tcp_process+0x7bc>
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801727c:	2b00      	cmp	r3, #0
 801727e:	d115      	bne.n	80172ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017280:	4b11      	ldr	r3, [pc, #68]	@ (80172c8 <tcp_process+0x7d8>)
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	f043 0310 	orr.w	r3, r3, #16
 8017288:	b2da      	uxtb	r2, r3
 801728a:	4b0f      	ldr	r3, [pc, #60]	@ (80172c8 <tcp_process+0x7d8>)
 801728c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801728e:	e00d      	b.n	80172ac <tcp_process+0x7bc>
    default:
      break;
 8017290:	bf00      	nop
 8017292:	e00c      	b.n	80172ae <tcp_process+0x7be>
      break;
 8017294:	bf00      	nop
 8017296:	e00a      	b.n	80172ae <tcp_process+0x7be>
      break;
 8017298:	bf00      	nop
 801729a:	e008      	b.n	80172ae <tcp_process+0x7be>
      break;
 801729c:	bf00      	nop
 801729e:	e006      	b.n	80172ae <tcp_process+0x7be>
      break;
 80172a0:	bf00      	nop
 80172a2:	e004      	b.n	80172ae <tcp_process+0x7be>
      break;
 80172a4:	bf00      	nop
 80172a6:	e002      	b.n	80172ae <tcp_process+0x7be>
      break;
 80172a8:	bf00      	nop
 80172aa:	e000      	b.n	80172ae <tcp_process+0x7be>
      break;
 80172ac:	bf00      	nop
  }
  return ERR_OK;
 80172ae:	2300      	movs	r3, #0
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3724      	adds	r7, #36	@ 0x24
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd90      	pop	{r4, r7, pc}
 80172b8:	24016e20 	.word	0x24016e20
 80172bc:	24016e1c 	.word	0x24016e1c
 80172c0:	24016e50 	.word	0x24016e50
 80172c4:	24016e48 	.word	0x24016e48
 80172c8:	24016e51 	.word	0x24016e51
 80172cc:	24016e18 	.word	0x24016e18

080172d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80172d0:	b590      	push	{r4, r7, lr}
 80172d2:	b085      	sub	sp, #20
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d106      	bne.n	80172ee <tcp_oos_insert_segment+0x1e>
 80172e0:	4b3b      	ldr	r3, [pc, #236]	@ (80173d0 <tcp_oos_insert_segment+0x100>)
 80172e2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80172e6:	493b      	ldr	r1, [pc, #236]	@ (80173d4 <tcp_oos_insert_segment+0x104>)
 80172e8:	483b      	ldr	r0, [pc, #236]	@ (80173d8 <tcp_oos_insert_segment+0x108>)
 80172ea:	f006 fd63 	bl	801ddb4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	899b      	ldrh	r3, [r3, #12]
 80172f4:	b29b      	uxth	r3, r3
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7fb f82a 	bl	8012350 <lwip_htons>
 80172fc:	4603      	mov	r3, r0
 80172fe:	b2db      	uxtb	r3, r3
 8017300:	f003 0301 	and.w	r3, r3, #1
 8017304:	2b00      	cmp	r3, #0
 8017306:	d028      	beq.n	801735a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017308:	6838      	ldr	r0, [r7, #0]
 801730a:	f7fe f995 	bl	8015638 <tcp_segs_free>
    next = NULL;
 801730e:	2300      	movs	r3, #0
 8017310:	603b      	str	r3, [r7, #0]
 8017312:	e056      	b.n	80173c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	68db      	ldr	r3, [r3, #12]
 8017318:	899b      	ldrh	r3, [r3, #12]
 801731a:	b29b      	uxth	r3, r3
 801731c:	4618      	mov	r0, r3
 801731e:	f7fb f817 	bl	8012350 <lwip_htons>
 8017322:	4603      	mov	r3, r0
 8017324:	b2db      	uxtb	r3, r3
 8017326:	f003 0301 	and.w	r3, r3, #1
 801732a:	2b00      	cmp	r3, #0
 801732c:	d00d      	beq.n	801734a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	68db      	ldr	r3, [r3, #12]
 8017332:	899b      	ldrh	r3, [r3, #12]
 8017334:	b29c      	uxth	r4, r3
 8017336:	2001      	movs	r0, #1
 8017338:	f7fb f80a 	bl	8012350 <lwip_htons>
 801733c:	4603      	mov	r3, r0
 801733e:	461a      	mov	r2, r3
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	4322      	orrs	r2, r4
 8017346:	b292      	uxth	r2, r2
 8017348:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017354:	68f8      	ldr	r0, [r7, #12]
 8017356:	f7fe f984 	bl	8015662 <tcp_seg_free>
    while (next &&
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d00e      	beq.n	801737e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	891b      	ldrh	r3, [r3, #8]
 8017364:	461a      	mov	r2, r3
 8017366:	4b1d      	ldr	r3, [pc, #116]	@ (80173dc <tcp_oos_insert_segment+0x10c>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	441a      	add	r2, r3
 801736c:	683b      	ldr	r3, [r7, #0]
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	685b      	ldr	r3, [r3, #4]
 8017372:	6839      	ldr	r1, [r7, #0]
 8017374:	8909      	ldrh	r1, [r1, #8]
 8017376:	440b      	add	r3, r1
 8017378:	1ad3      	subs	r3, r2, r3
    while (next &&
 801737a:	2b00      	cmp	r3, #0
 801737c:	daca      	bge.n	8017314 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d01e      	beq.n	80173c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	891b      	ldrh	r3, [r3, #8]
 8017388:	461a      	mov	r2, r3
 801738a:	4b14      	ldr	r3, [pc, #80]	@ (80173dc <tcp_oos_insert_segment+0x10c>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	441a      	add	r2, r3
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017398:	2b00      	cmp	r3, #0
 801739a:	dd12      	ble.n	80173c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	68db      	ldr	r3, [r3, #12]
 80173a0:	685b      	ldr	r3, [r3, #4]
 80173a2:	b29a      	uxth	r2, r3
 80173a4:	4b0d      	ldr	r3, [pc, #52]	@ (80173dc <tcp_oos_insert_segment+0x10c>)
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	b29b      	uxth	r3, r3
 80173aa:	1ad3      	subs	r3, r2, r3
 80173ac:	b29a      	uxth	r2, r3
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	685a      	ldr	r2, [r3, #4]
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	891b      	ldrh	r3, [r3, #8]
 80173ba:	4619      	mov	r1, r3
 80173bc:	4610      	mov	r0, r2
 80173be:	f7fc faff 	bl	80139c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	683a      	ldr	r2, [r7, #0]
 80173c6:	601a      	str	r2, [r3, #0]
}
 80173c8:	bf00      	nop
 80173ca:	3714      	adds	r7, #20
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd90      	pop	{r4, r7, pc}
 80173d0:	08020ed8 	.word	0x08020ed8
 80173d4:	08021198 	.word	0x08021198
 80173d8:	08020f24 	.word	0x08020f24
 80173dc:	24016e44 	.word	0x24016e44

080173e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80173e0:	b5b0      	push	{r4, r5, r7, lr}
 80173e2:	b086      	sub	sp, #24
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	60f8      	str	r0, [r7, #12]
 80173e8:	60b9      	str	r1, [r7, #8]
 80173ea:	607a      	str	r2, [r7, #4]
 80173ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80173ee:	e03e      	b.n	801746e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	685b      	ldr	r3, [r3, #4]
 80173fe:	4618      	mov	r0, r3
 8017400:	f7fc fd24 	bl	8013e4c <pbuf_clen>
 8017404:	4603      	mov	r3, r0
 8017406:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801740e:	8a7a      	ldrh	r2, [r7, #18]
 8017410:	429a      	cmp	r2, r3
 8017412:	d906      	bls.n	8017422 <tcp_free_acked_segments+0x42>
 8017414:	4b2a      	ldr	r3, [pc, #168]	@ (80174c0 <tcp_free_acked_segments+0xe0>)
 8017416:	f240 4257 	movw	r2, #1111	@ 0x457
 801741a:	492a      	ldr	r1, [pc, #168]	@ (80174c4 <tcp_free_acked_segments+0xe4>)
 801741c:	482a      	ldr	r0, [pc, #168]	@ (80174c8 <tcp_free_acked_segments+0xe8>)
 801741e:	f006 fcc9 	bl	801ddb4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017428:	8a7b      	ldrh	r3, [r7, #18]
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	b29a      	uxth	r2, r3
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	891a      	ldrh	r2, [r3, #8]
 8017438:	4b24      	ldr	r3, [pc, #144]	@ (80174cc <tcp_free_acked_segments+0xec>)
 801743a:	881b      	ldrh	r3, [r3, #0]
 801743c:	4413      	add	r3, r2
 801743e:	b29a      	uxth	r2, r3
 8017440:	4b22      	ldr	r3, [pc, #136]	@ (80174cc <tcp_free_acked_segments+0xec>)
 8017442:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017444:	6978      	ldr	r0, [r7, #20]
 8017446:	f7fe f90c 	bl	8015662 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017450:	2b00      	cmp	r3, #0
 8017452:	d00c      	beq.n	801746e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d109      	bne.n	801746e <tcp_free_acked_segments+0x8e>
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d106      	bne.n	801746e <tcp_free_acked_segments+0x8e>
 8017460:	4b17      	ldr	r3, [pc, #92]	@ (80174c0 <tcp_free_acked_segments+0xe0>)
 8017462:	f240 4261 	movw	r2, #1121	@ 0x461
 8017466:	491a      	ldr	r1, [pc, #104]	@ (80174d0 <tcp_free_acked_segments+0xf0>)
 8017468:	4817      	ldr	r0, [pc, #92]	@ (80174c8 <tcp_free_acked_segments+0xe8>)
 801746a:	f006 fca3 	bl	801ddb4 <iprintf>
  while (seg_list != NULL &&
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d020      	beq.n	80174b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	68db      	ldr	r3, [r3, #12]
 8017478:	685b      	ldr	r3, [r3, #4]
 801747a:	4618      	mov	r0, r3
 801747c:	f7fa ff7d 	bl	801237a <lwip_htonl>
 8017480:	4604      	mov	r4, r0
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	891b      	ldrh	r3, [r3, #8]
 8017486:	461d      	mov	r5, r3
 8017488:	68bb      	ldr	r3, [r7, #8]
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	899b      	ldrh	r3, [r3, #12]
 801748e:	b29b      	uxth	r3, r3
 8017490:	4618      	mov	r0, r3
 8017492:	f7fa ff5d 	bl	8012350 <lwip_htons>
 8017496:	4603      	mov	r3, r0
 8017498:	b2db      	uxtb	r3, r3
 801749a:	f003 0303 	and.w	r3, r3, #3
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d001      	beq.n	80174a6 <tcp_free_acked_segments+0xc6>
 80174a2:	2301      	movs	r3, #1
 80174a4:	e000      	b.n	80174a8 <tcp_free_acked_segments+0xc8>
 80174a6:	2300      	movs	r3, #0
 80174a8:	442b      	add	r3, r5
 80174aa:	18e2      	adds	r2, r4, r3
 80174ac:	4b09      	ldr	r3, [pc, #36]	@ (80174d4 <tcp_free_acked_segments+0xf4>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	dd9c      	ble.n	80173f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80174b6:	68bb      	ldr	r3, [r7, #8]
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	3718      	adds	r7, #24
 80174bc:	46bd      	mov	sp, r7
 80174be:	bdb0      	pop	{r4, r5, r7, pc}
 80174c0:	08020ed8 	.word	0x08020ed8
 80174c4:	080211c0 	.word	0x080211c0
 80174c8:	08020f24 	.word	0x08020f24
 80174cc:	24016e4c 	.word	0x24016e4c
 80174d0:	080211e8 	.word	0x080211e8
 80174d4:	24016e48 	.word	0x24016e48

080174d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80174d8:	b5b0      	push	{r4, r5, r7, lr}
 80174da:	b094      	sub	sp, #80	@ 0x50
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80174e0:	2300      	movs	r3, #0
 80174e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d106      	bne.n	80174f8 <tcp_receive+0x20>
 80174ea:	4b91      	ldr	r3, [pc, #580]	@ (8017730 <tcp_receive+0x258>)
 80174ec:	f240 427b 	movw	r2, #1147	@ 0x47b
 80174f0:	4990      	ldr	r1, [pc, #576]	@ (8017734 <tcp_receive+0x25c>)
 80174f2:	4891      	ldr	r0, [pc, #580]	@ (8017738 <tcp_receive+0x260>)
 80174f4:	f006 fc5e 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	7d1b      	ldrb	r3, [r3, #20]
 80174fc:	2b03      	cmp	r3, #3
 80174fe:	d806      	bhi.n	801750e <tcp_receive+0x36>
 8017500:	4b8b      	ldr	r3, [pc, #556]	@ (8017730 <tcp_receive+0x258>)
 8017502:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017506:	498d      	ldr	r1, [pc, #564]	@ (801773c <tcp_receive+0x264>)
 8017508:	488b      	ldr	r0, [pc, #556]	@ (8017738 <tcp_receive+0x260>)
 801750a:	f006 fc53 	bl	801ddb4 <iprintf>

  if (flags & TCP_ACK) {
 801750e:	4b8c      	ldr	r3, [pc, #560]	@ (8017740 <tcp_receive+0x268>)
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	f003 0310 	and.w	r3, r3, #16
 8017516:	2b00      	cmp	r3, #0
 8017518:	f000 8264 	beq.w	80179e4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017522:	461a      	mov	r2, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017528:	4413      	add	r3, r2
 801752a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017530:	4b84      	ldr	r3, [pc, #528]	@ (8017744 <tcp_receive+0x26c>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	1ad3      	subs	r3, r2, r3
 8017536:	2b00      	cmp	r3, #0
 8017538:	db1b      	blt.n	8017572 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801753e:	4b81      	ldr	r3, [pc, #516]	@ (8017744 <tcp_receive+0x26c>)
 8017540:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017542:	429a      	cmp	r2, r3
 8017544:	d106      	bne.n	8017554 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801754a:	4b7f      	ldr	r3, [pc, #508]	@ (8017748 <tcp_receive+0x270>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	1ad3      	subs	r3, r2, r3
 8017550:	2b00      	cmp	r3, #0
 8017552:	db0e      	blt.n	8017572 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017558:	4b7b      	ldr	r3, [pc, #492]	@ (8017748 <tcp_receive+0x270>)
 801755a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801755c:	429a      	cmp	r2, r3
 801755e:	d125      	bne.n	80175ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017560:	4b7a      	ldr	r3, [pc, #488]	@ (801774c <tcp_receive+0x274>)
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	89db      	ldrh	r3, [r3, #14]
 8017566:	b29a      	uxth	r2, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801756e:	429a      	cmp	r2, r3
 8017570:	d91c      	bls.n	80175ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017572:	4b76      	ldr	r3, [pc, #472]	@ (801774c <tcp_receive+0x274>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	89db      	ldrh	r3, [r3, #14]
 8017578:	b29a      	uxth	r2, r3
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801758c:	429a      	cmp	r2, r3
 801758e:	d205      	bcs.n	801759c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801759c:	4b69      	ldr	r3, [pc, #420]	@ (8017744 <tcp_receive+0x26c>)
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80175a4:	4b68      	ldr	r3, [pc, #416]	@ (8017748 <tcp_receive+0x270>)
 80175a6:	681a      	ldr	r2, [r3, #0]
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80175ac:	4b66      	ldr	r3, [pc, #408]	@ (8017748 <tcp_receive+0x270>)
 80175ae:	681a      	ldr	r2, [r3, #0]
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175b4:	1ad3      	subs	r3, r2, r3
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	dc58      	bgt.n	801766c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80175ba:	4b65      	ldr	r3, [pc, #404]	@ (8017750 <tcp_receive+0x278>)
 80175bc:	881b      	ldrh	r3, [r3, #0]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d14b      	bne.n	801765a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80175c6:	687a      	ldr	r2, [r7, #4]
 80175c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80175cc:	4413      	add	r3, r2
 80175ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d142      	bne.n	801765a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80175da:	2b00      	cmp	r3, #0
 80175dc:	db3d      	blt.n	801765a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80175e2:	4b59      	ldr	r3, [pc, #356]	@ (8017748 <tcp_receive+0x270>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d137      	bne.n	801765a <tcp_receive+0x182>
              found_dupack = 1;
 80175ea:	2301      	movs	r3, #1
 80175ec:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80175f4:	2bff      	cmp	r3, #255	@ 0xff
 80175f6:	d007      	beq.n	8017608 <tcp_receive+0x130>
                ++pcb->dupacks;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80175fe:	3301      	adds	r3, #1
 8017600:	b2da      	uxtb	r2, r3
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801760e:	2b03      	cmp	r3, #3
 8017610:	d91b      	bls.n	801764a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801761c:	4413      	add	r3, r2
 801761e:	b29a      	uxth	r2, r3
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017626:	429a      	cmp	r2, r3
 8017628:	d30a      	bcc.n	8017640 <tcp_receive+0x168>
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017634:	4413      	add	r3, r2
 8017636:	b29a      	uxth	r2, r3
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801763e:	e004      	b.n	801764a <tcp_receive+0x172>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017646:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017650:	2b02      	cmp	r3, #2
 8017652:	d902      	bls.n	801765a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	f002 fb41 	bl	8019cdc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801765a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801765c:	2b00      	cmp	r3, #0
 801765e:	f040 8161 	bne.w	8017924 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	2200      	movs	r2, #0
 8017666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801766a:	e15b      	b.n	8017924 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801766c:	4b36      	ldr	r3, [pc, #216]	@ (8017748 <tcp_receive+0x270>)
 801766e:	681a      	ldr	r2, [r3, #0]
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017674:	1ad3      	subs	r3, r2, r3
 8017676:	3b01      	subs	r3, #1
 8017678:	2b00      	cmp	r3, #0
 801767a:	f2c0 814e 	blt.w	801791a <tcp_receive+0x442>
 801767e:	4b32      	ldr	r3, [pc, #200]	@ (8017748 <tcp_receive+0x270>)
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017686:	1ad3      	subs	r3, r2, r3
 8017688:	2b00      	cmp	r3, #0
 801768a:	f300 8146 	bgt.w	801791a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	8b5b      	ldrh	r3, [r3, #26]
 8017692:	f003 0304 	and.w	r3, r3, #4
 8017696:	2b00      	cmp	r3, #0
 8017698:	d010      	beq.n	80176bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	8b5b      	ldrh	r3, [r3, #26]
 801769e:	f023 0304 	bic.w	r3, r3, #4
 80176a2:	b29a      	uxth	r2, r3
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2200      	movs	r2, #0
 80176b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	2200      	movs	r2, #0
 80176c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80176ca:	10db      	asrs	r3, r3, #3
 80176cc:	b21b      	sxth	r3, r3
 80176ce:	b29a      	uxth	r2, r3
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	4413      	add	r3, r2
 80176da:	b29b      	uxth	r3, r3
 80176dc:	b21a      	sxth	r2, r3
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80176e4:	4b18      	ldr	r3, [pc, #96]	@ (8017748 <tcp_receive+0x270>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	1ad3      	subs	r3, r2, r3
 80176f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2200      	movs	r2, #0
 80176f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80176fc:	4b12      	ldr	r3, [pc, #72]	@ (8017748 <tcp_receive+0x270>)
 80176fe:	681a      	ldr	r2, [r3, #0]
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	7d1b      	ldrb	r3, [r3, #20]
 8017708:	2b03      	cmp	r3, #3
 801770a:	f240 8097 	bls.w	801783c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801771a:	429a      	cmp	r2, r3
 801771c:	d245      	bcs.n	80177aa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	8b5b      	ldrh	r3, [r3, #26]
 8017722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017726:	2b00      	cmp	r3, #0
 8017728:	d014      	beq.n	8017754 <tcp_receive+0x27c>
 801772a:	2301      	movs	r3, #1
 801772c:	e013      	b.n	8017756 <tcp_receive+0x27e>
 801772e:	bf00      	nop
 8017730:	08020ed8 	.word	0x08020ed8
 8017734:	08021208 	.word	0x08021208
 8017738:	08020f24 	.word	0x08020f24
 801773c:	08021224 	.word	0x08021224
 8017740:	24016e50 	.word	0x24016e50
 8017744:	24016e44 	.word	0x24016e44
 8017748:	24016e48 	.word	0x24016e48
 801774c:	24016e34 	.word	0x24016e34
 8017750:	24016e4e 	.word	0x24016e4e
 8017754:	2302      	movs	r3, #2
 8017756:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801775a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801775e:	b29a      	uxth	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017764:	fb12 f303 	smulbb	r3, r2, r3
 8017768:	b29b      	uxth	r3, r3
 801776a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801776c:	4293      	cmp	r3, r2
 801776e:	bf28      	it	cs
 8017770:	4613      	movcs	r3, r2
 8017772:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801777a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801777c:	4413      	add	r3, r2
 801777e:	b29a      	uxth	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017786:	429a      	cmp	r2, r3
 8017788:	d309      	bcc.n	801779e <tcp_receive+0x2c6>
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017790:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017792:	4413      	add	r3, r2
 8017794:	b29a      	uxth	r2, r3
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801779c:	e04e      	b.n	801783c <tcp_receive+0x364>
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80177a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80177a8:	e048      	b.n	801783c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80177b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80177b2:	4413      	add	r3, r2
 80177b4:	b29a      	uxth	r2, r3
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80177bc:	429a      	cmp	r2, r3
 80177be:	d309      	bcc.n	80177d4 <tcp_receive+0x2fc>
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80177c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80177c8:	4413      	add	r3, r2
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80177d2:	e004      	b.n	80177de <tcp_receive+0x306>
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80177da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d326      	bcc.n	801783c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80177fa:	1ad3      	subs	r3, r2, r3
 80177fc:	b29a      	uxth	r2, r3
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801780e:	4413      	add	r3, r2
 8017810:	b29a      	uxth	r2, r3
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017818:	429a      	cmp	r2, r3
 801781a:	d30a      	bcc.n	8017832 <tcp_receive+0x35a>
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017826:	4413      	add	r3, r2
 8017828:	b29a      	uxth	r2, r3
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017830:	e004      	b.n	801783c <tcp_receive+0x364>
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017838:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017844:	4a98      	ldr	r2, [pc, #608]	@ (8017aa8 <tcp_receive+0x5d0>)
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f7ff fdca 	bl	80173e0 <tcp_free_acked_segments>
 801784c:	4602      	mov	r2, r0
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801785a:	4a94      	ldr	r2, [pc, #592]	@ (8017aac <tcp_receive+0x5d4>)
 801785c:	6878      	ldr	r0, [r7, #4]
 801785e:	f7ff fdbf 	bl	80173e0 <tcp_free_acked_segments>
 8017862:	4602      	mov	r2, r0
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801786c:	2b00      	cmp	r3, #0
 801786e:	d104      	bne.n	801787a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017876:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017878:	e002      	b.n	8017880 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2200      	movs	r2, #0
 801787e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2200      	movs	r2, #0
 8017884:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801788a:	2b00      	cmp	r3, #0
 801788c:	d103      	bne.n	8017896 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2200      	movs	r2, #0
 8017892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801789c:	4b84      	ldr	r3, [pc, #528]	@ (8017ab0 <tcp_receive+0x5d8>)
 801789e:	881b      	ldrh	r3, [r3, #0]
 80178a0:	4413      	add	r3, r2
 80178a2:	b29a      	uxth	r2, r3
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	8b5b      	ldrh	r3, [r3, #26]
 80178ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d035      	beq.n	8017922 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d118      	bne.n	80178f0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d00c      	beq.n	80178e0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178ce:	68db      	ldr	r3, [r3, #12]
 80178d0:	685b      	ldr	r3, [r3, #4]
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7fa fd51 	bl	801237a <lwip_htonl>
 80178d8:	4603      	mov	r3, r0
 80178da:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80178dc:	2b00      	cmp	r3, #0
 80178de:	dc20      	bgt.n	8017922 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	8b5b      	ldrh	r3, [r3, #26]
 80178e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80178e8:	b29a      	uxth	r2, r3
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80178ee:	e018      	b.n	8017922 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	685b      	ldr	r3, [r3, #4]
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7fa fd3c 	bl	801237a <lwip_htonl>
 8017902:	4603      	mov	r3, r0
 8017904:	1ae3      	subs	r3, r4, r3
 8017906:	2b00      	cmp	r3, #0
 8017908:	dc0b      	bgt.n	8017922 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	8b5b      	ldrh	r3, [r3, #26]
 801790e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017912:	b29a      	uxth	r2, r3
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017918:	e003      	b.n	8017922 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f002 fbca 	bl	801a0b4 <tcp_send_empty_ack>
 8017920:	e000      	b.n	8017924 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017922:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017928:	2b00      	cmp	r3, #0
 801792a:	d05b      	beq.n	80179e4 <tcp_receive+0x50c>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017930:	4b60      	ldr	r3, [pc, #384]	@ (8017ab4 <tcp_receive+0x5dc>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	1ad3      	subs	r3, r2, r3
 8017936:	2b00      	cmp	r3, #0
 8017938:	da54      	bge.n	80179e4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801793a:	4b5f      	ldr	r3, [pc, #380]	@ (8017ab8 <tcp_receive+0x5e0>)
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	b29a      	uxth	r2, r3
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017944:	b29b      	uxth	r3, r3
 8017946:	1ad3      	subs	r3, r2, r3
 8017948:	b29b      	uxth	r3, r3
 801794a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801794e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017958:	10db      	asrs	r3, r3, #3
 801795a:	b21b      	sxth	r3, r3
 801795c:	b29b      	uxth	r3, r3
 801795e:	1ad3      	subs	r3, r2, r3
 8017960:	b29b      	uxth	r3, r3
 8017962:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801796c:	b29a      	uxth	r2, r3
 801796e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017972:	4413      	add	r3, r2
 8017974:	b29b      	uxth	r3, r3
 8017976:	b21a      	sxth	r2, r3
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801797c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017980:	2b00      	cmp	r3, #0
 8017982:	da05      	bge.n	8017990 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017984:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017988:	425b      	negs	r3, r3
 801798a:	b29b      	uxth	r3, r3
 801798c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017990:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801799a:	109b      	asrs	r3, r3, #2
 801799c:	b21b      	sxth	r3, r3
 801799e:	b29b      	uxth	r3, r3
 80179a0:	1ad3      	subs	r3, r2, r3
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80179ae:	b29a      	uxth	r2, r3
 80179b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80179b4:	4413      	add	r3, r2
 80179b6:	b29b      	uxth	r3, r3
 80179b8:	b21a      	sxth	r2, r3
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80179c4:	10db      	asrs	r3, r3, #3
 80179c6:	b21b      	sxth	r3, r3
 80179c8:	b29a      	uxth	r2, r3
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80179d0:	b29b      	uxth	r3, r3
 80179d2:	4413      	add	r3, r2
 80179d4:	b29b      	uxth	r3, r3
 80179d6:	b21a      	sxth	r2, r3
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2200      	movs	r2, #0
 80179e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80179e4:	4b35      	ldr	r3, [pc, #212]	@ (8017abc <tcp_receive+0x5e4>)
 80179e6:	881b      	ldrh	r3, [r3, #0]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	f000 84df 	beq.w	80183ac <tcp_receive+0xed4>
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	7d1b      	ldrb	r3, [r3, #20]
 80179f2:	2b06      	cmp	r3, #6
 80179f4:	f200 84da 	bhi.w	80183ac <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80179fc:	4b30      	ldr	r3, [pc, #192]	@ (8017ac0 <tcp_receive+0x5e8>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	1ad3      	subs	r3, r2, r3
 8017a02:	3b01      	subs	r3, #1
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	f2c0 808f 	blt.w	8017b28 <tcp_receive+0x650>
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8017abc <tcp_receive+0x5e4>)
 8017a10:	881b      	ldrh	r3, [r3, #0]
 8017a12:	4619      	mov	r1, r3
 8017a14:	4b2a      	ldr	r3, [pc, #168]	@ (8017ac0 <tcp_receive+0x5e8>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	440b      	add	r3, r1
 8017a1a:	1ad3      	subs	r3, r2, r3
 8017a1c:	3301      	adds	r3, #1
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	f300 8082 	bgt.w	8017b28 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017a24:	4b27      	ldr	r3, [pc, #156]	@ (8017ac4 <tcp_receive+0x5ec>)
 8017a26:	685b      	ldr	r3, [r3, #4]
 8017a28:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a2e:	4b24      	ldr	r3, [pc, #144]	@ (8017ac0 <tcp_receive+0x5e8>)
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	1ad3      	subs	r3, r2, r3
 8017a34:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017a36:	4b23      	ldr	r3, [pc, #140]	@ (8017ac4 <tcp_receive+0x5ec>)
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d106      	bne.n	8017a4c <tcp_receive+0x574>
 8017a3e:	4b22      	ldr	r3, [pc, #136]	@ (8017ac8 <tcp_receive+0x5f0>)
 8017a40:	f240 5294 	movw	r2, #1428	@ 0x594
 8017a44:	4921      	ldr	r1, [pc, #132]	@ (8017acc <tcp_receive+0x5f4>)
 8017a46:	4822      	ldr	r0, [pc, #136]	@ (8017ad0 <tcp_receive+0x5f8>)
 8017a48:	f006 f9b4 	bl	801ddb4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017a52:	4293      	cmp	r3, r2
 8017a54:	d906      	bls.n	8017a64 <tcp_receive+0x58c>
 8017a56:	4b1c      	ldr	r3, [pc, #112]	@ (8017ac8 <tcp_receive+0x5f0>)
 8017a58:	f240 5295 	movw	r2, #1429	@ 0x595
 8017a5c:	491d      	ldr	r1, [pc, #116]	@ (8017ad4 <tcp_receive+0x5fc>)
 8017a5e:	481c      	ldr	r0, [pc, #112]	@ (8017ad0 <tcp_receive+0x5f8>)
 8017a60:	f006 f9a8 	bl	801ddb4 <iprintf>
      off = (u16_t)off32;
 8017a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017a6a:	4b16      	ldr	r3, [pc, #88]	@ (8017ac4 <tcp_receive+0x5ec>)
 8017a6c:	685b      	ldr	r3, [r3, #4]
 8017a6e:	891b      	ldrh	r3, [r3, #8]
 8017a70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d906      	bls.n	8017a86 <tcp_receive+0x5ae>
 8017a78:	4b13      	ldr	r3, [pc, #76]	@ (8017ac8 <tcp_receive+0x5f0>)
 8017a7a:	f240 5297 	movw	r2, #1431	@ 0x597
 8017a7e:	4916      	ldr	r1, [pc, #88]	@ (8017ad8 <tcp_receive+0x600>)
 8017a80:	4813      	ldr	r0, [pc, #76]	@ (8017ad0 <tcp_receive+0x5f8>)
 8017a82:	f006 f997 	bl	801ddb4 <iprintf>
      inseg.len -= off;
 8017a86:	4b0f      	ldr	r3, [pc, #60]	@ (8017ac4 <tcp_receive+0x5ec>)
 8017a88:	891a      	ldrh	r2, [r3, #8]
 8017a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017a8e:	1ad3      	subs	r3, r2, r3
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	4b0c      	ldr	r3, [pc, #48]	@ (8017ac4 <tcp_receive+0x5ec>)
 8017a94:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017a96:	4b0b      	ldr	r3, [pc, #44]	@ (8017ac4 <tcp_receive+0x5ec>)
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	891a      	ldrh	r2, [r3, #8]
 8017a9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017aa0:	1ad3      	subs	r3, r2, r3
 8017aa2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017aa4:	e02a      	b.n	8017afc <tcp_receive+0x624>
 8017aa6:	bf00      	nop
 8017aa8:	08021240 	.word	0x08021240
 8017aac:	08021248 	.word	0x08021248
 8017ab0:	24016e4c 	.word	0x24016e4c
 8017ab4:	24016e48 	.word	0x24016e48
 8017ab8:	24016e0c 	.word	0x24016e0c
 8017abc:	24016e4e 	.word	0x24016e4e
 8017ac0:	24016e44 	.word	0x24016e44
 8017ac4:	24016e24 	.word	0x24016e24
 8017ac8:	08020ed8 	.word	0x08020ed8
 8017acc:	08021250 	.word	0x08021250
 8017ad0:	08020f24 	.word	0x08020f24
 8017ad4:	08021260 	.word	0x08021260
 8017ad8:	08021270 	.word	0x08021270
        off -= p->len;
 8017adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017ade:	895b      	ldrh	r3, [r3, #10]
 8017ae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017aec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017aee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017af2:	2200      	movs	r2, #0
 8017af4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017afe:	895b      	ldrh	r3, [r3, #10]
 8017b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b04:	429a      	cmp	r2, r3
 8017b06:	d8e9      	bhi.n	8017adc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b0c:	4619      	mov	r1, r3
 8017b0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017b10:	f7fc f856 	bl	8013bc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b18:	4a90      	ldr	r2, [pc, #576]	@ (8017d5c <tcp_receive+0x884>)
 8017b1a:	6013      	str	r3, [r2, #0]
 8017b1c:	4b90      	ldr	r3, [pc, #576]	@ (8017d60 <tcp_receive+0x888>)
 8017b1e:	68db      	ldr	r3, [r3, #12]
 8017b20:	4a8e      	ldr	r2, [pc, #568]	@ (8017d5c <tcp_receive+0x884>)
 8017b22:	6812      	ldr	r2, [r2, #0]
 8017b24:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017b26:	e00d      	b.n	8017b44 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017b28:	4b8c      	ldr	r3, [pc, #560]	@ (8017d5c <tcp_receive+0x884>)
 8017b2a:	681a      	ldr	r2, [r3, #0]
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b30:	1ad3      	subs	r3, r2, r3
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	da06      	bge.n	8017b44 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	8b5b      	ldrh	r3, [r3, #26]
 8017b3a:	f043 0302 	orr.w	r3, r3, #2
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017b44:	4b85      	ldr	r3, [pc, #532]	@ (8017d5c <tcp_receive+0x884>)
 8017b46:	681a      	ldr	r2, [r3, #0]
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b4c:	1ad3      	subs	r3, r2, r3
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	f2c0 8427 	blt.w	80183a2 <tcp_receive+0xeca>
 8017b54:	4b81      	ldr	r3, [pc, #516]	@ (8017d5c <tcp_receive+0x884>)
 8017b56:	681a      	ldr	r2, [r3, #0]
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b5c:	6879      	ldr	r1, [r7, #4]
 8017b5e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017b60:	440b      	add	r3, r1
 8017b62:	1ad3      	subs	r3, r2, r3
 8017b64:	3301      	adds	r3, #1
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	f300 841b 	bgt.w	80183a2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b70:	4b7a      	ldr	r3, [pc, #488]	@ (8017d5c <tcp_receive+0x884>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	f040 8298 	bne.w	80180aa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017b7a:	4b79      	ldr	r3, [pc, #484]	@ (8017d60 <tcp_receive+0x888>)
 8017b7c:	891c      	ldrh	r4, [r3, #8]
 8017b7e:	4b78      	ldr	r3, [pc, #480]	@ (8017d60 <tcp_receive+0x888>)
 8017b80:	68db      	ldr	r3, [r3, #12]
 8017b82:	899b      	ldrh	r3, [r3, #12]
 8017b84:	b29b      	uxth	r3, r3
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7fa fbe2 	bl	8012350 <lwip_htons>
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	b2db      	uxtb	r3, r3
 8017b90:	f003 0303 	and.w	r3, r3, #3
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d001      	beq.n	8017b9c <tcp_receive+0x6c4>
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e000      	b.n	8017b9e <tcp_receive+0x6c6>
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	4423      	add	r3, r4
 8017ba0:	b29a      	uxth	r2, r3
 8017ba2:	4b70      	ldr	r3, [pc, #448]	@ (8017d64 <tcp_receive+0x88c>)
 8017ba4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017baa:	4b6e      	ldr	r3, [pc, #440]	@ (8017d64 <tcp_receive+0x88c>)
 8017bac:	881b      	ldrh	r3, [r3, #0]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	d274      	bcs.n	8017c9c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8017d60 <tcp_receive+0x888>)
 8017bb4:	68db      	ldr	r3, [r3, #12]
 8017bb6:	899b      	ldrh	r3, [r3, #12]
 8017bb8:	b29b      	uxth	r3, r3
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7fa fbc8 	bl	8012350 <lwip_htons>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	f003 0301 	and.w	r3, r3, #1
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d01e      	beq.n	8017c0a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017bcc:	4b64      	ldr	r3, [pc, #400]	@ (8017d60 <tcp_receive+0x888>)
 8017bce:	68db      	ldr	r3, [r3, #12]
 8017bd0:	899b      	ldrh	r3, [r3, #12]
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	b21b      	sxth	r3, r3
 8017bd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017bda:	b21c      	sxth	r4, r3
 8017bdc:	4b60      	ldr	r3, [pc, #384]	@ (8017d60 <tcp_receive+0x888>)
 8017bde:	68db      	ldr	r3, [r3, #12]
 8017be0:	899b      	ldrh	r3, [r3, #12]
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7fa fbb3 	bl	8012350 <lwip_htons>
 8017bea:	4603      	mov	r3, r0
 8017bec:	b2db      	uxtb	r3, r3
 8017bee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fa fbab 	bl	8012350 <lwip_htons>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	b21b      	sxth	r3, r3
 8017bfe:	4323      	orrs	r3, r4
 8017c00:	b21a      	sxth	r2, r3
 8017c02:	4b57      	ldr	r3, [pc, #348]	@ (8017d60 <tcp_receive+0x888>)
 8017c04:	68db      	ldr	r3, [r3, #12]
 8017c06:	b292      	uxth	r2, r2
 8017c08:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017c0e:	4b54      	ldr	r3, [pc, #336]	@ (8017d60 <tcp_receive+0x888>)
 8017c10:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017c12:	4b53      	ldr	r3, [pc, #332]	@ (8017d60 <tcp_receive+0x888>)
 8017c14:	68db      	ldr	r3, [r3, #12]
 8017c16:	899b      	ldrh	r3, [r3, #12]
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f7fa fb98 	bl	8012350 <lwip_htons>
 8017c20:	4603      	mov	r3, r0
 8017c22:	b2db      	uxtb	r3, r3
 8017c24:	f003 0302 	and.w	r3, r3, #2
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d005      	beq.n	8017c38 <tcp_receive+0x760>
            inseg.len -= 1;
 8017c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8017d60 <tcp_receive+0x888>)
 8017c2e:	891b      	ldrh	r3, [r3, #8]
 8017c30:	3b01      	subs	r3, #1
 8017c32:	b29a      	uxth	r2, r3
 8017c34:	4b4a      	ldr	r3, [pc, #296]	@ (8017d60 <tcp_receive+0x888>)
 8017c36:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017c38:	4b49      	ldr	r3, [pc, #292]	@ (8017d60 <tcp_receive+0x888>)
 8017c3a:	685b      	ldr	r3, [r3, #4]
 8017c3c:	4a48      	ldr	r2, [pc, #288]	@ (8017d60 <tcp_receive+0x888>)
 8017c3e:	8912      	ldrh	r2, [r2, #8]
 8017c40:	4611      	mov	r1, r2
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7fb febc 	bl	80139c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017c48:	4b45      	ldr	r3, [pc, #276]	@ (8017d60 <tcp_receive+0x888>)
 8017c4a:	891c      	ldrh	r4, [r3, #8]
 8017c4c:	4b44      	ldr	r3, [pc, #272]	@ (8017d60 <tcp_receive+0x888>)
 8017c4e:	68db      	ldr	r3, [r3, #12]
 8017c50:	899b      	ldrh	r3, [r3, #12]
 8017c52:	b29b      	uxth	r3, r3
 8017c54:	4618      	mov	r0, r3
 8017c56:	f7fa fb7b 	bl	8012350 <lwip_htons>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	b2db      	uxtb	r3, r3
 8017c5e:	f003 0303 	and.w	r3, r3, #3
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d001      	beq.n	8017c6a <tcp_receive+0x792>
 8017c66:	2301      	movs	r3, #1
 8017c68:	e000      	b.n	8017c6c <tcp_receive+0x794>
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	4423      	add	r3, r4
 8017c6e:	b29a      	uxth	r2, r3
 8017c70:	4b3c      	ldr	r3, [pc, #240]	@ (8017d64 <tcp_receive+0x88c>)
 8017c72:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017c74:	4b3b      	ldr	r3, [pc, #236]	@ (8017d64 <tcp_receive+0x88c>)
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	461a      	mov	r2, r3
 8017c7a:	4b38      	ldr	r3, [pc, #224]	@ (8017d5c <tcp_receive+0x884>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	441a      	add	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c84:	6879      	ldr	r1, [r7, #4]
 8017c86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017c88:	440b      	add	r3, r1
 8017c8a:	429a      	cmp	r2, r3
 8017c8c:	d006      	beq.n	8017c9c <tcp_receive+0x7c4>
 8017c8e:	4b36      	ldr	r3, [pc, #216]	@ (8017d68 <tcp_receive+0x890>)
 8017c90:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017c94:	4935      	ldr	r1, [pc, #212]	@ (8017d6c <tcp_receive+0x894>)
 8017c96:	4836      	ldr	r0, [pc, #216]	@ (8017d70 <tcp_receive+0x898>)
 8017c98:	f006 f88c 	bl	801ddb4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	f000 80e6 	beq.w	8017e72 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8017d60 <tcp_receive+0x888>)
 8017ca8:	68db      	ldr	r3, [r3, #12]
 8017caa:	899b      	ldrh	r3, [r3, #12]
 8017cac:	b29b      	uxth	r3, r3
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7fa fb4e 	bl	8012350 <lwip_htons>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	b2db      	uxtb	r3, r3
 8017cb8:	f003 0301 	and.w	r3, r3, #1
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d010      	beq.n	8017ce2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017cc0:	e00a      	b.n	8017cd8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cc6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ccc:	681a      	ldr	r2, [r3, #0]
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017cd2:	68f8      	ldr	r0, [r7, #12]
 8017cd4:	f7fd fcc5 	bl	8015662 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d1f0      	bne.n	8017cc2 <tcp_receive+0x7ea>
 8017ce0:	e0c7      	b.n	8017e72 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017ce8:	e051      	b.n	8017d8e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017cec:	68db      	ldr	r3, [r3, #12]
 8017cee:	899b      	ldrh	r3, [r3, #12]
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7fa fb2c 	bl	8012350 <lwip_htons>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	b2db      	uxtb	r3, r3
 8017cfc:	f003 0301 	and.w	r3, r3, #1
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d03c      	beq.n	8017d7e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017d04:	4b16      	ldr	r3, [pc, #88]	@ (8017d60 <tcp_receive+0x888>)
 8017d06:	68db      	ldr	r3, [r3, #12]
 8017d08:	899b      	ldrh	r3, [r3, #12]
 8017d0a:	b29b      	uxth	r3, r3
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f7fa fb1f 	bl	8012350 <lwip_htons>
 8017d12:	4603      	mov	r3, r0
 8017d14:	b2db      	uxtb	r3, r3
 8017d16:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d12f      	bne.n	8017d7e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017d1e:	4b10      	ldr	r3, [pc, #64]	@ (8017d60 <tcp_receive+0x888>)
 8017d20:	68db      	ldr	r3, [r3, #12]
 8017d22:	899b      	ldrh	r3, [r3, #12]
 8017d24:	b29c      	uxth	r4, r3
 8017d26:	2001      	movs	r0, #1
 8017d28:	f7fa fb12 	bl	8012350 <lwip_htons>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	461a      	mov	r2, r3
 8017d30:	4b0b      	ldr	r3, [pc, #44]	@ (8017d60 <tcp_receive+0x888>)
 8017d32:	68db      	ldr	r3, [r3, #12]
 8017d34:	4322      	orrs	r2, r4
 8017d36:	b292      	uxth	r2, r2
 8017d38:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017d3a:	4b09      	ldr	r3, [pc, #36]	@ (8017d60 <tcp_receive+0x888>)
 8017d3c:	891c      	ldrh	r4, [r3, #8]
 8017d3e:	4b08      	ldr	r3, [pc, #32]	@ (8017d60 <tcp_receive+0x888>)
 8017d40:	68db      	ldr	r3, [r3, #12]
 8017d42:	899b      	ldrh	r3, [r3, #12]
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7fa fb02 	bl	8012350 <lwip_htons>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	b2db      	uxtb	r3, r3
 8017d50:	f003 0303 	and.w	r3, r3, #3
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d00d      	beq.n	8017d74 <tcp_receive+0x89c>
 8017d58:	2301      	movs	r3, #1
 8017d5a:	e00c      	b.n	8017d76 <tcp_receive+0x89e>
 8017d5c:	24016e44 	.word	0x24016e44
 8017d60:	24016e24 	.word	0x24016e24
 8017d64:	24016e4e 	.word	0x24016e4e
 8017d68:	08020ed8 	.word	0x08020ed8
 8017d6c:	08021280 	.word	0x08021280
 8017d70:	08020f24 	.word	0x08020f24
 8017d74:	2300      	movs	r3, #0
 8017d76:	4423      	add	r3, r4
 8017d78:	b29a      	uxth	r2, r3
 8017d7a:	4b98      	ldr	r3, [pc, #608]	@ (8017fdc <tcp_receive+0xb04>)
 8017d7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d80:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017d88:	6938      	ldr	r0, [r7, #16]
 8017d8a:	f7fd fc6a 	bl	8015662 <tcp_seg_free>
            while (next &&
 8017d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d00e      	beq.n	8017db2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017d94:	4b91      	ldr	r3, [pc, #580]	@ (8017fdc <tcp_receive+0xb04>)
 8017d96:	881b      	ldrh	r3, [r3, #0]
 8017d98:	461a      	mov	r2, r3
 8017d9a:	4b91      	ldr	r3, [pc, #580]	@ (8017fe0 <tcp_receive+0xb08>)
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	441a      	add	r2, r3
 8017da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017da2:	68db      	ldr	r3, [r3, #12]
 8017da4:	685b      	ldr	r3, [r3, #4]
 8017da6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017da8:	8909      	ldrh	r1, [r1, #8]
 8017daa:	440b      	add	r3, r1
 8017dac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	da9b      	bge.n	8017cea <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d059      	beq.n	8017e6c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017db8:	4b88      	ldr	r3, [pc, #544]	@ (8017fdc <tcp_receive+0xb04>)
 8017dba:	881b      	ldrh	r3, [r3, #0]
 8017dbc:	461a      	mov	r2, r3
 8017dbe:	4b88      	ldr	r3, [pc, #544]	@ (8017fe0 <tcp_receive+0xb08>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	441a      	add	r2, r3
 8017dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dc6:	68db      	ldr	r3, [r3, #12]
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	dd4d      	ble.n	8017e6c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017dd2:	68db      	ldr	r3, [r3, #12]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	b29a      	uxth	r2, r3
 8017dd8:	4b81      	ldr	r3, [pc, #516]	@ (8017fe0 <tcp_receive+0xb08>)
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	b29b      	uxth	r3, r3
 8017dde:	1ad3      	subs	r3, r2, r3
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	4b80      	ldr	r3, [pc, #512]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017de4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017de6:	4b7f      	ldr	r3, [pc, #508]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017de8:	68db      	ldr	r3, [r3, #12]
 8017dea:	899b      	ldrh	r3, [r3, #12]
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7fa faae 	bl	8012350 <lwip_htons>
 8017df4:	4603      	mov	r3, r0
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	f003 0302 	and.w	r3, r3, #2
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d005      	beq.n	8017e0c <tcp_receive+0x934>
                inseg.len -= 1;
 8017e00:	4b78      	ldr	r3, [pc, #480]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017e02:	891b      	ldrh	r3, [r3, #8]
 8017e04:	3b01      	subs	r3, #1
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	4b76      	ldr	r3, [pc, #472]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017e0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017e0c:	4b75      	ldr	r3, [pc, #468]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017e0e:	685b      	ldr	r3, [r3, #4]
 8017e10:	4a74      	ldr	r2, [pc, #464]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017e12:	8912      	ldrh	r2, [r2, #8]
 8017e14:	4611      	mov	r1, r2
 8017e16:	4618      	mov	r0, r3
 8017e18:	f7fb fdd2 	bl	80139c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017e1c:	4b71      	ldr	r3, [pc, #452]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017e1e:	891c      	ldrh	r4, [r3, #8]
 8017e20:	4b70      	ldr	r3, [pc, #448]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017e22:	68db      	ldr	r3, [r3, #12]
 8017e24:	899b      	ldrh	r3, [r3, #12]
 8017e26:	b29b      	uxth	r3, r3
 8017e28:	4618      	mov	r0, r3
 8017e2a:	f7fa fa91 	bl	8012350 <lwip_htons>
 8017e2e:	4603      	mov	r3, r0
 8017e30:	b2db      	uxtb	r3, r3
 8017e32:	f003 0303 	and.w	r3, r3, #3
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d001      	beq.n	8017e3e <tcp_receive+0x966>
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	e000      	b.n	8017e40 <tcp_receive+0x968>
 8017e3e:	2300      	movs	r3, #0
 8017e40:	4423      	add	r3, r4
 8017e42:	b29a      	uxth	r2, r3
 8017e44:	4b65      	ldr	r3, [pc, #404]	@ (8017fdc <tcp_receive+0xb04>)
 8017e46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017e48:	4b64      	ldr	r3, [pc, #400]	@ (8017fdc <tcp_receive+0xb04>)
 8017e4a:	881b      	ldrh	r3, [r3, #0]
 8017e4c:	461a      	mov	r2, r3
 8017e4e:	4b64      	ldr	r3, [pc, #400]	@ (8017fe0 <tcp_receive+0xb08>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	441a      	add	r2, r3
 8017e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e56:	68db      	ldr	r3, [r3, #12]
 8017e58:	685b      	ldr	r3, [r3, #4]
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	d006      	beq.n	8017e6c <tcp_receive+0x994>
 8017e5e:	4b62      	ldr	r3, [pc, #392]	@ (8017fe8 <tcp_receive+0xb10>)
 8017e60:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017e64:	4961      	ldr	r1, [pc, #388]	@ (8017fec <tcp_receive+0xb14>)
 8017e66:	4862      	ldr	r0, [pc, #392]	@ (8017ff0 <tcp_receive+0xb18>)
 8017e68:	f005 ffa4 	bl	801ddb4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017e70:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017e72:	4b5a      	ldr	r3, [pc, #360]	@ (8017fdc <tcp_receive+0xb04>)
 8017e74:	881b      	ldrh	r3, [r3, #0]
 8017e76:	461a      	mov	r2, r3
 8017e78:	4b59      	ldr	r3, [pc, #356]	@ (8017fe0 <tcp_receive+0xb08>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	441a      	add	r2, r3
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017e86:	4b55      	ldr	r3, [pc, #340]	@ (8017fdc <tcp_receive+0xb04>)
 8017e88:	881b      	ldrh	r3, [r3, #0]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d206      	bcs.n	8017e9c <tcp_receive+0x9c4>
 8017e8e:	4b56      	ldr	r3, [pc, #344]	@ (8017fe8 <tcp_receive+0xb10>)
 8017e90:	f240 6207 	movw	r2, #1543	@ 0x607
 8017e94:	4957      	ldr	r1, [pc, #348]	@ (8017ff4 <tcp_receive+0xb1c>)
 8017e96:	4856      	ldr	r0, [pc, #344]	@ (8017ff0 <tcp_receive+0xb18>)
 8017e98:	f005 ff8c 	bl	801ddb4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017ea0:	4b4e      	ldr	r3, [pc, #312]	@ (8017fdc <tcp_receive+0xb04>)
 8017ea2:	881b      	ldrh	r3, [r3, #0]
 8017ea4:	1ad3      	subs	r3, r2, r3
 8017ea6:	b29a      	uxth	r2, r3
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	f7fc fead 	bl	8014c0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017eb4:	685b      	ldr	r3, [r3, #4]
 8017eb6:	891b      	ldrh	r3, [r3, #8]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d006      	beq.n	8017eca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017ebc:	4b49      	ldr	r3, [pc, #292]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8017ff8 <tcp_receive+0xb20>)
 8017ec2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017ec4:	4b47      	ldr	r3, [pc, #284]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017eca:	4b46      	ldr	r3, [pc, #280]	@ (8017fe4 <tcp_receive+0xb0c>)
 8017ecc:	68db      	ldr	r3, [r3, #12]
 8017ece:	899b      	ldrh	r3, [r3, #12]
 8017ed0:	b29b      	uxth	r3, r3
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7fa fa3c 	bl	8012350 <lwip_htons>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	b2db      	uxtb	r3, r3
 8017edc:	f003 0301 	and.w	r3, r3, #1
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f000 80b8 	beq.w	8018056 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017ee6:	4b45      	ldr	r3, [pc, #276]	@ (8017ffc <tcp_receive+0xb24>)
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	f043 0320 	orr.w	r3, r3, #32
 8017eee:	b2da      	uxtb	r2, r3
 8017ef0:	4b42      	ldr	r3, [pc, #264]	@ (8017ffc <tcp_receive+0xb24>)
 8017ef2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017ef4:	e0af      	b.n	8018056 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017efa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	4a36      	ldr	r2, [pc, #216]	@ (8017fe0 <tcp_receive+0xb08>)
 8017f06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	891b      	ldrh	r3, [r3, #8]
 8017f0c:	461c      	mov	r4, r3
 8017f0e:	68bb      	ldr	r3, [r7, #8]
 8017f10:	68db      	ldr	r3, [r3, #12]
 8017f12:	899b      	ldrh	r3, [r3, #12]
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	4618      	mov	r0, r3
 8017f18:	f7fa fa1a 	bl	8012350 <lwip_htons>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	b2db      	uxtb	r3, r3
 8017f20:	f003 0303 	and.w	r3, r3, #3
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d001      	beq.n	8017f2c <tcp_receive+0xa54>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	e000      	b.n	8017f2e <tcp_receive+0xa56>
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	191a      	adds	r2, r3, r4
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f34:	441a      	add	r2, r3
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017f3e:	461c      	mov	r4, r3
 8017f40:	68bb      	ldr	r3, [r7, #8]
 8017f42:	891b      	ldrh	r3, [r3, #8]
 8017f44:	461d      	mov	r5, r3
 8017f46:	68bb      	ldr	r3, [r7, #8]
 8017f48:	68db      	ldr	r3, [r3, #12]
 8017f4a:	899b      	ldrh	r3, [r3, #12]
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f7fa f9fe 	bl	8012350 <lwip_htons>
 8017f54:	4603      	mov	r3, r0
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	f003 0303 	and.w	r3, r3, #3
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d001      	beq.n	8017f64 <tcp_receive+0xa8c>
 8017f60:	2301      	movs	r3, #1
 8017f62:	e000      	b.n	8017f66 <tcp_receive+0xa8e>
 8017f64:	2300      	movs	r3, #0
 8017f66:	442b      	add	r3, r5
 8017f68:	429c      	cmp	r4, r3
 8017f6a:	d206      	bcs.n	8017f7a <tcp_receive+0xaa2>
 8017f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8017fe8 <tcp_receive+0xb10>)
 8017f6e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017f72:	4923      	ldr	r1, [pc, #140]	@ (8018000 <tcp_receive+0xb28>)
 8017f74:	481e      	ldr	r0, [pc, #120]	@ (8017ff0 <tcp_receive+0xb18>)
 8017f76:	f005 ff1d 	bl	801ddb4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	891b      	ldrh	r3, [r3, #8]
 8017f7e:	461c      	mov	r4, r3
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	899b      	ldrh	r3, [r3, #12]
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7fa f9e1 	bl	8012350 <lwip_htons>
 8017f8e:	4603      	mov	r3, r0
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	f003 0303 	and.w	r3, r3, #3
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d001      	beq.n	8017f9e <tcp_receive+0xac6>
 8017f9a:	2301      	movs	r3, #1
 8017f9c:	e000      	b.n	8017fa0 <tcp_receive+0xac8>
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	1919      	adds	r1, r3, r4
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017fa6:	b28b      	uxth	r3, r1
 8017fa8:	1ad3      	subs	r3, r2, r3
 8017faa:	b29a      	uxth	r2, r3
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	f7fc fe2b 	bl	8014c0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	685b      	ldr	r3, [r3, #4]
 8017fba:	891b      	ldrh	r3, [r3, #8]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d028      	beq.n	8018012 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8017ff8 <tcp_receive+0xb20>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d01d      	beq.n	8018004 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8017ff8 <tcp_receive+0xb20>)
 8017fca:	681a      	ldr	r2, [r3, #0]
 8017fcc:	68bb      	ldr	r3, [r7, #8]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	4610      	mov	r0, r2
 8017fd4:	f7fb ff7a 	bl	8013ecc <pbuf_cat>
 8017fd8:	e018      	b.n	801800c <tcp_receive+0xb34>
 8017fda:	bf00      	nop
 8017fdc:	24016e4e 	.word	0x24016e4e
 8017fe0:	24016e44 	.word	0x24016e44
 8017fe4:	24016e24 	.word	0x24016e24
 8017fe8:	08020ed8 	.word	0x08020ed8
 8017fec:	080212b8 	.word	0x080212b8
 8017ff0:	08020f24 	.word	0x08020f24
 8017ff4:	080212f4 	.word	0x080212f4
 8017ff8:	24016e54 	.word	0x24016e54
 8017ffc:	24016e51 	.word	0x24016e51
 8018000:	08021314 	.word	0x08021314
            } else {
              recv_data = cseg->p;
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	685b      	ldr	r3, [r3, #4]
 8018008:	4a70      	ldr	r2, [pc, #448]	@ (80181cc <tcp_receive+0xcf4>)
 801800a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	2200      	movs	r2, #0
 8018010:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	68db      	ldr	r3, [r3, #12]
 8018016:	899b      	ldrh	r3, [r3, #12]
 8018018:	b29b      	uxth	r3, r3
 801801a:	4618      	mov	r0, r3
 801801c:	f7fa f998 	bl	8012350 <lwip_htons>
 8018020:	4603      	mov	r3, r0
 8018022:	b2db      	uxtb	r3, r3
 8018024:	f003 0301 	and.w	r3, r3, #1
 8018028:	2b00      	cmp	r3, #0
 801802a:	d00d      	beq.n	8018048 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801802c:	4b68      	ldr	r3, [pc, #416]	@ (80181d0 <tcp_receive+0xcf8>)
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	f043 0320 	orr.w	r3, r3, #32
 8018034:	b2da      	uxtb	r2, r3
 8018036:	4b66      	ldr	r3, [pc, #408]	@ (80181d0 <tcp_receive+0xcf8>)
 8018038:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	7d1b      	ldrb	r3, [r3, #20]
 801803e:	2b04      	cmp	r3, #4
 8018040:	d102      	bne.n	8018048 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	2207      	movs	r2, #7
 8018046:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	681a      	ldr	r2, [r3, #0]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018050:	68b8      	ldr	r0, [r7, #8]
 8018052:	f7fd fb06 	bl	8015662 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801805a:	2b00      	cmp	r3, #0
 801805c:	d008      	beq.n	8018070 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018062:	68db      	ldr	r3, [r3, #12]
 8018064:	685a      	ldr	r2, [r3, #4]
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801806a:	429a      	cmp	r2, r3
 801806c:	f43f af43 	beq.w	8017ef6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	8b5b      	ldrh	r3, [r3, #26]
 8018074:	f003 0301 	and.w	r3, r3, #1
 8018078:	2b00      	cmp	r3, #0
 801807a:	d00e      	beq.n	801809a <tcp_receive+0xbc2>
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	8b5b      	ldrh	r3, [r3, #26]
 8018080:	f023 0301 	bic.w	r3, r3, #1
 8018084:	b29a      	uxth	r2, r3
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	835a      	strh	r2, [r3, #26]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	8b5b      	ldrh	r3, [r3, #26]
 801808e:	f043 0302 	orr.w	r3, r3, #2
 8018092:	b29a      	uxth	r2, r3
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018098:	e187      	b.n	80183aa <tcp_receive+0xed2>
        tcp_ack(pcb);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	8b5b      	ldrh	r3, [r3, #26]
 801809e:	f043 0301 	orr.w	r3, r3, #1
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80180a8:	e17f      	b.n	80183aa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d106      	bne.n	80180c0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80180b2:	4848      	ldr	r0, [pc, #288]	@ (80181d4 <tcp_receive+0xcfc>)
 80180b4:	f7fd faee 	bl	8015694 <tcp_seg_copy>
 80180b8:	4602      	mov	r2, r0
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80180be:	e16c      	b.n	801839a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80180c0:	2300      	movs	r3, #0
 80180c2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80180ca:	e156      	b.n	801837a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80180cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180ce:	68db      	ldr	r3, [r3, #12]
 80180d0:	685a      	ldr	r2, [r3, #4]
 80180d2:	4b41      	ldr	r3, [pc, #260]	@ (80181d8 <tcp_receive+0xd00>)
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	429a      	cmp	r2, r3
 80180d8:	d11d      	bne.n	8018116 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80180da:	4b3e      	ldr	r3, [pc, #248]	@ (80181d4 <tcp_receive+0xcfc>)
 80180dc:	891a      	ldrh	r2, [r3, #8]
 80180de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180e0:	891b      	ldrh	r3, [r3, #8]
 80180e2:	429a      	cmp	r2, r3
 80180e4:	f240 814e 	bls.w	8018384 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80180e8:	483a      	ldr	r0, [pc, #232]	@ (80181d4 <tcp_receive+0xcfc>)
 80180ea:	f7fd fad3 	bl	8015694 <tcp_seg_copy>
 80180ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f000 8148 	beq.w	8018388 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80180f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d003      	beq.n	8018106 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80180fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018100:	697a      	ldr	r2, [r7, #20]
 8018102:	601a      	str	r2, [r3, #0]
 8018104:	e002      	b.n	801810c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	697a      	ldr	r2, [r7, #20]
 801810a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801810c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801810e:	6978      	ldr	r0, [r7, #20]
 8018110:	f7ff f8de 	bl	80172d0 <tcp_oos_insert_segment>
                }
                break;
 8018114:	e138      	b.n	8018388 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018118:	2b00      	cmp	r3, #0
 801811a:	d117      	bne.n	801814c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801811c:	4b2e      	ldr	r3, [pc, #184]	@ (80181d8 <tcp_receive+0xd00>)
 801811e:	681a      	ldr	r2, [r3, #0]
 8018120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018122:	68db      	ldr	r3, [r3, #12]
 8018124:	685b      	ldr	r3, [r3, #4]
 8018126:	1ad3      	subs	r3, r2, r3
 8018128:	2b00      	cmp	r3, #0
 801812a:	da57      	bge.n	80181dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801812c:	4829      	ldr	r0, [pc, #164]	@ (80181d4 <tcp_receive+0xcfc>)
 801812e:	f7fd fab1 	bl	8015694 <tcp_seg_copy>
 8018132:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018134:	69bb      	ldr	r3, [r7, #24]
 8018136:	2b00      	cmp	r3, #0
 8018138:	f000 8128 	beq.w	801838c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	69ba      	ldr	r2, [r7, #24]
 8018140:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018142:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018144:	69b8      	ldr	r0, [r7, #24]
 8018146:	f7ff f8c3 	bl	80172d0 <tcp_oos_insert_segment>
                  }
                  break;
 801814a:	e11f      	b.n	801838c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801814c:	4b22      	ldr	r3, [pc, #136]	@ (80181d8 <tcp_receive+0xd00>)
 801814e:	681a      	ldr	r2, [r3, #0]
 8018150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018152:	68db      	ldr	r3, [r3, #12]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	3b01      	subs	r3, #1
 801815a:	2b00      	cmp	r3, #0
 801815c:	db3e      	blt.n	80181dc <tcp_receive+0xd04>
 801815e:	4b1e      	ldr	r3, [pc, #120]	@ (80181d8 <tcp_receive+0xd00>)
 8018160:	681a      	ldr	r2, [r3, #0]
 8018162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018164:	68db      	ldr	r3, [r3, #12]
 8018166:	685b      	ldr	r3, [r3, #4]
 8018168:	1ad3      	subs	r3, r2, r3
 801816a:	3301      	adds	r3, #1
 801816c:	2b00      	cmp	r3, #0
 801816e:	dc35      	bgt.n	80181dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018170:	4818      	ldr	r0, [pc, #96]	@ (80181d4 <tcp_receive+0xcfc>)
 8018172:	f7fd fa8f 	bl	8015694 <tcp_seg_copy>
 8018176:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018178:	69fb      	ldr	r3, [r7, #28]
 801817a:	2b00      	cmp	r3, #0
 801817c:	f000 8108 	beq.w	8018390 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018182:	68db      	ldr	r3, [r3, #12]
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018188:	8912      	ldrh	r2, [r2, #8]
 801818a:	441a      	add	r2, r3
 801818c:	4b12      	ldr	r3, [pc, #72]	@ (80181d8 <tcp_receive+0xd00>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	1ad3      	subs	r3, r2, r3
 8018192:	2b00      	cmp	r3, #0
 8018194:	dd12      	ble.n	80181bc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018196:	4b10      	ldr	r3, [pc, #64]	@ (80181d8 <tcp_receive+0xd00>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	b29a      	uxth	r2, r3
 801819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801819e:	68db      	ldr	r3, [r3, #12]
 80181a0:	685b      	ldr	r3, [r3, #4]
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	1ad3      	subs	r3, r2, r3
 80181a6:	b29a      	uxth	r2, r3
 80181a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80181ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181ae:	685a      	ldr	r2, [r3, #4]
 80181b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181b2:	891b      	ldrh	r3, [r3, #8]
 80181b4:	4619      	mov	r1, r3
 80181b6:	4610      	mov	r0, r2
 80181b8:	f7fb fc02 	bl	80139c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80181bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181be:	69fa      	ldr	r2, [r7, #28]
 80181c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80181c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80181c4:	69f8      	ldr	r0, [r7, #28]
 80181c6:	f7ff f883 	bl	80172d0 <tcp_oos_insert_segment>
                  }
                  break;
 80181ca:	e0e1      	b.n	8018390 <tcp_receive+0xeb8>
 80181cc:	24016e54 	.word	0x24016e54
 80181d0:	24016e51 	.word	0x24016e51
 80181d4:	24016e24 	.word	0x24016e24
 80181d8:	24016e44 	.word	0x24016e44
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80181dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181de:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80181e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	f040 80c5 	bne.w	8018374 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80181ea:	4b7f      	ldr	r3, [pc, #508]	@ (80183e8 <tcp_receive+0xf10>)
 80181ec:	681a      	ldr	r2, [r3, #0]
 80181ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181f0:	68db      	ldr	r3, [r3, #12]
 80181f2:	685b      	ldr	r3, [r3, #4]
 80181f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	f340 80bc 	ble.w	8018374 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80181fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181fe:	68db      	ldr	r3, [r3, #12]
 8018200:	899b      	ldrh	r3, [r3, #12]
 8018202:	b29b      	uxth	r3, r3
 8018204:	4618      	mov	r0, r3
 8018206:	f7fa f8a3 	bl	8012350 <lwip_htons>
 801820a:	4603      	mov	r3, r0
 801820c:	b2db      	uxtb	r3, r3
 801820e:	f003 0301 	and.w	r3, r3, #1
 8018212:	2b00      	cmp	r3, #0
 8018214:	f040 80be 	bne.w	8018394 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018218:	4874      	ldr	r0, [pc, #464]	@ (80183ec <tcp_receive+0xf14>)
 801821a:	f7fd fa3b 	bl	8015694 <tcp_seg_copy>
 801821e:	4602      	mov	r2, r0
 8018220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018222:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	2b00      	cmp	r3, #0
 801822a:	f000 80b5 	beq.w	8018398 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801822e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018230:	68db      	ldr	r3, [r3, #12]
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018236:	8912      	ldrh	r2, [r2, #8]
 8018238:	441a      	add	r2, r3
 801823a:	4b6b      	ldr	r3, [pc, #428]	@ (80183e8 <tcp_receive+0xf10>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	1ad3      	subs	r3, r2, r3
 8018240:	2b00      	cmp	r3, #0
 8018242:	dd12      	ble.n	801826a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018244:	4b68      	ldr	r3, [pc, #416]	@ (80183e8 <tcp_receive+0xf10>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	b29a      	uxth	r2, r3
 801824a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801824c:	68db      	ldr	r3, [r3, #12]
 801824e:	685b      	ldr	r3, [r3, #4]
 8018250:	b29b      	uxth	r3, r3
 8018252:	1ad3      	subs	r3, r2, r3
 8018254:	b29a      	uxth	r2, r3
 8018256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018258:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801825c:	685a      	ldr	r2, [r3, #4]
 801825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018260:	891b      	ldrh	r3, [r3, #8]
 8018262:	4619      	mov	r1, r3
 8018264:	4610      	mov	r0, r2
 8018266:	f7fb fbab 	bl	80139c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801826a:	4b61      	ldr	r3, [pc, #388]	@ (80183f0 <tcp_receive+0xf18>)
 801826c:	881b      	ldrh	r3, [r3, #0]
 801826e:	461a      	mov	r2, r3
 8018270:	4b5d      	ldr	r3, [pc, #372]	@ (80183e8 <tcp_receive+0xf10>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	441a      	add	r2, r3
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801827a:	6879      	ldr	r1, [r7, #4]
 801827c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801827e:	440b      	add	r3, r1
 8018280:	1ad3      	subs	r3, r2, r3
 8018282:	2b00      	cmp	r3, #0
 8018284:	f340 8088 	ble.w	8018398 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	68db      	ldr	r3, [r3, #12]
 801828e:	899b      	ldrh	r3, [r3, #12]
 8018290:	b29b      	uxth	r3, r3
 8018292:	4618      	mov	r0, r3
 8018294:	f7fa f85c 	bl	8012350 <lwip_htons>
 8018298:	4603      	mov	r3, r0
 801829a:	b2db      	uxtb	r3, r3
 801829c:	f003 0301 	and.w	r3, r3, #1
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d021      	beq.n	80182e8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80182a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	68db      	ldr	r3, [r3, #12]
 80182aa:	899b      	ldrh	r3, [r3, #12]
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	b21b      	sxth	r3, r3
 80182b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80182b4:	b21c      	sxth	r4, r3
 80182b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	68db      	ldr	r3, [r3, #12]
 80182bc:	899b      	ldrh	r3, [r3, #12]
 80182be:	b29b      	uxth	r3, r3
 80182c0:	4618      	mov	r0, r3
 80182c2:	f7fa f845 	bl	8012350 <lwip_htons>
 80182c6:	4603      	mov	r3, r0
 80182c8:	b2db      	uxtb	r3, r3
 80182ca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7fa f83d 	bl	8012350 <lwip_htons>
 80182d6:	4603      	mov	r3, r0
 80182d8:	b21b      	sxth	r3, r3
 80182da:	4323      	orrs	r3, r4
 80182dc:	b21a      	sxth	r2, r3
 80182de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	b292      	uxth	r2, r2
 80182e6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182ec:	b29a      	uxth	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80182f2:	4413      	add	r3, r2
 80182f4:	b299      	uxth	r1, r3
 80182f6:	4b3c      	ldr	r3, [pc, #240]	@ (80183e8 <tcp_receive+0xf10>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	b29a      	uxth	r2, r3
 80182fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	1a8a      	subs	r2, r1, r2
 8018302:	b292      	uxth	r2, r2
 8018304:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	685a      	ldr	r2, [r3, #4]
 801830c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	891b      	ldrh	r3, [r3, #8]
 8018312:	4619      	mov	r1, r3
 8018314:	4610      	mov	r0, r2
 8018316:	f7fb fb53 	bl	80139c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	891c      	ldrh	r4, [r3, #8]
 8018320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	68db      	ldr	r3, [r3, #12]
 8018326:	899b      	ldrh	r3, [r3, #12]
 8018328:	b29b      	uxth	r3, r3
 801832a:	4618      	mov	r0, r3
 801832c:	f7fa f810 	bl	8012350 <lwip_htons>
 8018330:	4603      	mov	r3, r0
 8018332:	b2db      	uxtb	r3, r3
 8018334:	f003 0303 	and.w	r3, r3, #3
 8018338:	2b00      	cmp	r3, #0
 801833a:	d001      	beq.n	8018340 <tcp_receive+0xe68>
 801833c:	2301      	movs	r3, #1
 801833e:	e000      	b.n	8018342 <tcp_receive+0xe6a>
 8018340:	2300      	movs	r3, #0
 8018342:	4423      	add	r3, r4
 8018344:	b29a      	uxth	r2, r3
 8018346:	4b2a      	ldr	r3, [pc, #168]	@ (80183f0 <tcp_receive+0xf18>)
 8018348:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801834a:	4b29      	ldr	r3, [pc, #164]	@ (80183f0 <tcp_receive+0xf18>)
 801834c:	881b      	ldrh	r3, [r3, #0]
 801834e:	461a      	mov	r2, r3
 8018350:	4b25      	ldr	r3, [pc, #148]	@ (80183e8 <tcp_receive+0xf10>)
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	441a      	add	r2, r3
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801835a:	6879      	ldr	r1, [r7, #4]
 801835c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801835e:	440b      	add	r3, r1
 8018360:	429a      	cmp	r2, r3
 8018362:	d019      	beq.n	8018398 <tcp_receive+0xec0>
 8018364:	4b23      	ldr	r3, [pc, #140]	@ (80183f4 <tcp_receive+0xf1c>)
 8018366:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801836a:	4923      	ldr	r1, [pc, #140]	@ (80183f8 <tcp_receive+0xf20>)
 801836c:	4823      	ldr	r0, [pc, #140]	@ (80183fc <tcp_receive+0xf24>)
 801836e:	f005 fd21 	bl	801ddb4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018372:	e011      	b.n	8018398 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	63bb      	str	r3, [r7, #56]	@ 0x38
 801837a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801837c:	2b00      	cmp	r3, #0
 801837e:	f47f aea5 	bne.w	80180cc <tcp_receive+0xbf4>
 8018382:	e00a      	b.n	801839a <tcp_receive+0xec2>
                break;
 8018384:	bf00      	nop
 8018386:	e008      	b.n	801839a <tcp_receive+0xec2>
                break;
 8018388:	bf00      	nop
 801838a:	e006      	b.n	801839a <tcp_receive+0xec2>
                  break;
 801838c:	bf00      	nop
 801838e:	e004      	b.n	801839a <tcp_receive+0xec2>
                  break;
 8018390:	bf00      	nop
 8018392:	e002      	b.n	801839a <tcp_receive+0xec2>
                  break;
 8018394:	bf00      	nop
 8018396:	e000      	b.n	801839a <tcp_receive+0xec2>
                break;
 8018398:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f001 fe8a 	bl	801a0b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80183a0:	e003      	b.n	80183aa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80183a2:	6878      	ldr	r0, [r7, #4]
 80183a4:	f001 fe86 	bl	801a0b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80183a8:	e01a      	b.n	80183e0 <tcp_receive+0xf08>
 80183aa:	e019      	b.n	80183e0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80183ac:	4b0e      	ldr	r3, [pc, #56]	@ (80183e8 <tcp_receive+0xf10>)
 80183ae:	681a      	ldr	r2, [r3, #0]
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183b4:	1ad3      	subs	r3, r2, r3
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	db0a      	blt.n	80183d0 <tcp_receive+0xef8>
 80183ba:	4b0b      	ldr	r3, [pc, #44]	@ (80183e8 <tcp_receive+0xf10>)
 80183bc:	681a      	ldr	r2, [r3, #0]
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183c2:	6879      	ldr	r1, [r7, #4]
 80183c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80183c6:	440b      	add	r3, r1
 80183c8:	1ad3      	subs	r3, r2, r3
 80183ca:	3301      	adds	r3, #1
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	dd07      	ble.n	80183e0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	8b5b      	ldrh	r3, [r3, #26]
 80183d4:	f043 0302 	orr.w	r3, r3, #2
 80183d8:	b29a      	uxth	r2, r3
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80183de:	e7ff      	b.n	80183e0 <tcp_receive+0xf08>
 80183e0:	bf00      	nop
 80183e2:	3750      	adds	r7, #80	@ 0x50
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bdb0      	pop	{r4, r5, r7, pc}
 80183e8:	24016e44 	.word	0x24016e44
 80183ec:	24016e24 	.word	0x24016e24
 80183f0:	24016e4e 	.word	0x24016e4e
 80183f4:	08020ed8 	.word	0x08020ed8
 80183f8:	08021280 	.word	0x08021280
 80183fc:	08020f24 	.word	0x08020f24

08018400 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018400:	b480      	push	{r7}
 8018402:	b083      	sub	sp, #12
 8018404:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018406:	4b15      	ldr	r3, [pc, #84]	@ (801845c <tcp_get_next_optbyte+0x5c>)
 8018408:	881b      	ldrh	r3, [r3, #0]
 801840a:	1c5a      	adds	r2, r3, #1
 801840c:	b291      	uxth	r1, r2
 801840e:	4a13      	ldr	r2, [pc, #76]	@ (801845c <tcp_get_next_optbyte+0x5c>)
 8018410:	8011      	strh	r1, [r2, #0]
 8018412:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018414:	4b12      	ldr	r3, [pc, #72]	@ (8018460 <tcp_get_next_optbyte+0x60>)
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d004      	beq.n	8018426 <tcp_get_next_optbyte+0x26>
 801841c:	4b11      	ldr	r3, [pc, #68]	@ (8018464 <tcp_get_next_optbyte+0x64>)
 801841e:	881b      	ldrh	r3, [r3, #0]
 8018420:	88fa      	ldrh	r2, [r7, #6]
 8018422:	429a      	cmp	r2, r3
 8018424:	d208      	bcs.n	8018438 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018426:	4b10      	ldr	r3, [pc, #64]	@ (8018468 <tcp_get_next_optbyte+0x68>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	3314      	adds	r3, #20
 801842c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801842e:	88fb      	ldrh	r3, [r7, #6]
 8018430:	683a      	ldr	r2, [r7, #0]
 8018432:	4413      	add	r3, r2
 8018434:	781b      	ldrb	r3, [r3, #0]
 8018436:	e00b      	b.n	8018450 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018438:	88fb      	ldrh	r3, [r7, #6]
 801843a:	b2da      	uxtb	r2, r3
 801843c:	4b09      	ldr	r3, [pc, #36]	@ (8018464 <tcp_get_next_optbyte+0x64>)
 801843e:	881b      	ldrh	r3, [r3, #0]
 8018440:	b2db      	uxtb	r3, r3
 8018442:	1ad3      	subs	r3, r2, r3
 8018444:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018446:	4b06      	ldr	r3, [pc, #24]	@ (8018460 <tcp_get_next_optbyte+0x60>)
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	797b      	ldrb	r3, [r7, #5]
 801844c:	4413      	add	r3, r2
 801844e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018450:	4618      	mov	r0, r3
 8018452:	370c      	adds	r7, #12
 8018454:	46bd      	mov	sp, r7
 8018456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801845a:	4770      	bx	lr
 801845c:	24016e40 	.word	0x24016e40
 8018460:	24016e3c 	.word	0x24016e3c
 8018464:	24016e3a 	.word	0x24016e3a
 8018468:	24016e34 	.word	0x24016e34

0801846c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b084      	sub	sp, #16
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d106      	bne.n	8018488 <tcp_parseopt+0x1c>
 801847a:	4b33      	ldr	r3, [pc, #204]	@ (8018548 <tcp_parseopt+0xdc>)
 801847c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018480:	4932      	ldr	r1, [pc, #200]	@ (801854c <tcp_parseopt+0xe0>)
 8018482:	4833      	ldr	r0, [pc, #204]	@ (8018550 <tcp_parseopt+0xe4>)
 8018484:	f005 fc96 	bl	801ddb4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018488:	4b32      	ldr	r3, [pc, #200]	@ (8018554 <tcp_parseopt+0xe8>)
 801848a:	881b      	ldrh	r3, [r3, #0]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d057      	beq.n	8018540 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018490:	4b31      	ldr	r3, [pc, #196]	@ (8018558 <tcp_parseopt+0xec>)
 8018492:	2200      	movs	r2, #0
 8018494:	801a      	strh	r2, [r3, #0]
 8018496:	e047      	b.n	8018528 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8018498:	f7ff ffb2 	bl	8018400 <tcp_get_next_optbyte>
 801849c:	4603      	mov	r3, r0
 801849e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80184a0:	7bfb      	ldrb	r3, [r7, #15]
 80184a2:	2b02      	cmp	r3, #2
 80184a4:	d006      	beq.n	80184b4 <tcp_parseopt+0x48>
 80184a6:	2b02      	cmp	r3, #2
 80184a8:	dc2b      	bgt.n	8018502 <tcp_parseopt+0x96>
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d043      	beq.n	8018536 <tcp_parseopt+0xca>
 80184ae:	2b01      	cmp	r3, #1
 80184b0:	d039      	beq.n	8018526 <tcp_parseopt+0xba>
 80184b2:	e026      	b.n	8018502 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80184b4:	f7ff ffa4 	bl	8018400 <tcp_get_next_optbyte>
 80184b8:	4603      	mov	r3, r0
 80184ba:	2b04      	cmp	r3, #4
 80184bc:	d13d      	bne.n	801853a <tcp_parseopt+0xce>
 80184be:	4b26      	ldr	r3, [pc, #152]	@ (8018558 <tcp_parseopt+0xec>)
 80184c0:	881b      	ldrh	r3, [r3, #0]
 80184c2:	3301      	adds	r3, #1
 80184c4:	4a23      	ldr	r2, [pc, #140]	@ (8018554 <tcp_parseopt+0xe8>)
 80184c6:	8812      	ldrh	r2, [r2, #0]
 80184c8:	4293      	cmp	r3, r2
 80184ca:	da36      	bge.n	801853a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80184cc:	f7ff ff98 	bl	8018400 <tcp_get_next_optbyte>
 80184d0:	4603      	mov	r3, r0
 80184d2:	021b      	lsls	r3, r3, #8
 80184d4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80184d6:	f7ff ff93 	bl	8018400 <tcp_get_next_optbyte>
 80184da:	4603      	mov	r3, r0
 80184dc:	461a      	mov	r2, r3
 80184de:	89bb      	ldrh	r3, [r7, #12]
 80184e0:	4313      	orrs	r3, r2
 80184e2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80184e4:	89bb      	ldrh	r3, [r7, #12]
 80184e6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80184ea:	4293      	cmp	r3, r2
 80184ec:	d804      	bhi.n	80184f8 <tcp_parseopt+0x8c>
 80184ee:	89bb      	ldrh	r3, [r7, #12]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d001      	beq.n	80184f8 <tcp_parseopt+0x8c>
 80184f4:	89ba      	ldrh	r2, [r7, #12]
 80184f6:	e001      	b.n	80184fc <tcp_parseopt+0x90>
 80184f8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8018500:	e012      	b.n	8018528 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018502:	f7ff ff7d 	bl	8018400 <tcp_get_next_optbyte>
 8018506:	4603      	mov	r3, r0
 8018508:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801850a:	7afb      	ldrb	r3, [r7, #11]
 801850c:	2b01      	cmp	r3, #1
 801850e:	d916      	bls.n	801853e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018510:	7afb      	ldrb	r3, [r7, #11]
 8018512:	b29a      	uxth	r2, r3
 8018514:	4b10      	ldr	r3, [pc, #64]	@ (8018558 <tcp_parseopt+0xec>)
 8018516:	881b      	ldrh	r3, [r3, #0]
 8018518:	4413      	add	r3, r2
 801851a:	b29b      	uxth	r3, r3
 801851c:	3b02      	subs	r3, #2
 801851e:	b29a      	uxth	r2, r3
 8018520:	4b0d      	ldr	r3, [pc, #52]	@ (8018558 <tcp_parseopt+0xec>)
 8018522:	801a      	strh	r2, [r3, #0]
 8018524:	e000      	b.n	8018528 <tcp_parseopt+0xbc>
          break;
 8018526:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018528:	4b0b      	ldr	r3, [pc, #44]	@ (8018558 <tcp_parseopt+0xec>)
 801852a:	881a      	ldrh	r2, [r3, #0]
 801852c:	4b09      	ldr	r3, [pc, #36]	@ (8018554 <tcp_parseopt+0xe8>)
 801852e:	881b      	ldrh	r3, [r3, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	d3b1      	bcc.n	8018498 <tcp_parseopt+0x2c>
 8018534:	e004      	b.n	8018540 <tcp_parseopt+0xd4>
          return;
 8018536:	bf00      	nop
 8018538:	e002      	b.n	8018540 <tcp_parseopt+0xd4>
            return;
 801853a:	bf00      	nop
 801853c:	e000      	b.n	8018540 <tcp_parseopt+0xd4>
            return;
 801853e:	bf00      	nop
      }
    }
  }
}
 8018540:	3710      	adds	r7, #16
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
 8018546:	bf00      	nop
 8018548:	08020ed8 	.word	0x08020ed8
 801854c:	0802133c 	.word	0x0802133c
 8018550:	08020f24 	.word	0x08020f24
 8018554:	24016e38 	.word	0x24016e38
 8018558:	24016e40 	.word	0x24016e40

0801855c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801855c:	b480      	push	{r7}
 801855e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018560:	4b05      	ldr	r3, [pc, #20]	@ (8018578 <tcp_trigger_input_pcb_close+0x1c>)
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	f043 0310 	orr.w	r3, r3, #16
 8018568:	b2da      	uxtb	r2, r3
 801856a:	4b03      	ldr	r3, [pc, #12]	@ (8018578 <tcp_trigger_input_pcb_close+0x1c>)
 801856c:	701a      	strb	r2, [r3, #0]
}
 801856e:	bf00      	nop
 8018570:	46bd      	mov	sp, r7
 8018572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018576:	4770      	bx	lr
 8018578:	24016e51 	.word	0x24016e51

0801857c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b084      	sub	sp, #16
 8018580:	af00      	add	r7, sp, #0
 8018582:	60f8      	str	r0, [r7, #12]
 8018584:	60b9      	str	r1, [r7, #8]
 8018586:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d00a      	beq.n	80185a4 <tcp_route+0x28>
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	7a1b      	ldrb	r3, [r3, #8]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d006      	beq.n	80185a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	7a1b      	ldrb	r3, [r3, #8]
 801859a:	4618      	mov	r0, r3
 801859c:	f7fb f804 	bl	80135a8 <netif_get_by_index>
 80185a0:	4603      	mov	r3, r0
 80185a2:	e003      	b.n	80185ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80185a4:	6878      	ldr	r0, [r7, #4]
 80185a6:	f003 fe59 	bl	801c25c <ip4_route>
 80185aa:	4603      	mov	r3, r0
  }
}
 80185ac:	4618      	mov	r0, r3
 80185ae:	3710      	adds	r7, #16
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}

080185b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80185b4:	b590      	push	{r4, r7, lr}
 80185b6:	b087      	sub	sp, #28
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	60f8      	str	r0, [r7, #12]
 80185bc:	60b9      	str	r1, [r7, #8]
 80185be:	603b      	str	r3, [r7, #0]
 80185c0:	4613      	mov	r3, r2
 80185c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d105      	bne.n	80185d6 <tcp_create_segment+0x22>
 80185ca:	4b43      	ldr	r3, [pc, #268]	@ (80186d8 <tcp_create_segment+0x124>)
 80185cc:	22a3      	movs	r2, #163	@ 0xa3
 80185ce:	4943      	ldr	r1, [pc, #268]	@ (80186dc <tcp_create_segment+0x128>)
 80185d0:	4843      	ldr	r0, [pc, #268]	@ (80186e0 <tcp_create_segment+0x12c>)
 80185d2:	f005 fbef 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d105      	bne.n	80185e8 <tcp_create_segment+0x34>
 80185dc:	4b3e      	ldr	r3, [pc, #248]	@ (80186d8 <tcp_create_segment+0x124>)
 80185de:	22a4      	movs	r2, #164	@ 0xa4
 80185e0:	4940      	ldr	r1, [pc, #256]	@ (80186e4 <tcp_create_segment+0x130>)
 80185e2:	483f      	ldr	r0, [pc, #252]	@ (80186e0 <tcp_create_segment+0x12c>)
 80185e4:	f005 fbe6 	bl	801ddb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80185e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80185ec:	009b      	lsls	r3, r3, #2
 80185ee:	b2db      	uxtb	r3, r3
 80185f0:	f003 0304 	and.w	r3, r3, #4
 80185f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80185f6:	2003      	movs	r0, #3
 80185f8:	f7fa fc4a 	bl	8012e90 <memp_malloc>
 80185fc:	6138      	str	r0, [r7, #16]
 80185fe:	693b      	ldr	r3, [r7, #16]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d104      	bne.n	801860e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018604:	68b8      	ldr	r0, [r7, #8]
 8018606:	f7fb fb93 	bl	8013d30 <pbuf_free>
    return NULL;
 801860a:	2300      	movs	r3, #0
 801860c:	e060      	b.n	80186d0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801860e:	693b      	ldr	r3, [r7, #16]
 8018610:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018614:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018616:	693b      	ldr	r3, [r7, #16]
 8018618:	2200      	movs	r2, #0
 801861a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801861c:	693b      	ldr	r3, [r7, #16]
 801861e:	68ba      	ldr	r2, [r7, #8]
 8018620:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018622:	68bb      	ldr	r3, [r7, #8]
 8018624:	891a      	ldrh	r2, [r3, #8]
 8018626:	7dfb      	ldrb	r3, [r7, #23]
 8018628:	b29b      	uxth	r3, r3
 801862a:	429a      	cmp	r2, r3
 801862c:	d205      	bcs.n	801863a <tcp_create_segment+0x86>
 801862e:	4b2a      	ldr	r3, [pc, #168]	@ (80186d8 <tcp_create_segment+0x124>)
 8018630:	22b0      	movs	r2, #176	@ 0xb0
 8018632:	492d      	ldr	r1, [pc, #180]	@ (80186e8 <tcp_create_segment+0x134>)
 8018634:	482a      	ldr	r0, [pc, #168]	@ (80186e0 <tcp_create_segment+0x12c>)
 8018636:	f005 fbbd 	bl	801ddb4 <iprintf>
  seg->len = p->tot_len - optlen;
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	891a      	ldrh	r2, [r3, #8]
 801863e:	7dfb      	ldrb	r3, [r7, #23]
 8018640:	b29b      	uxth	r3, r3
 8018642:	1ad3      	subs	r3, r2, r3
 8018644:	b29a      	uxth	r2, r3
 8018646:	693b      	ldr	r3, [r7, #16]
 8018648:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801864a:	2114      	movs	r1, #20
 801864c:	68b8      	ldr	r0, [r7, #8]
 801864e:	f7fb faa7 	bl	8013ba0 <pbuf_add_header>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d004      	beq.n	8018662 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018658:	6938      	ldr	r0, [r7, #16]
 801865a:	f7fd f802 	bl	8015662 <tcp_seg_free>
    return NULL;
 801865e:	2300      	movs	r3, #0
 8018660:	e036      	b.n	80186d0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018662:	693b      	ldr	r3, [r7, #16]
 8018664:	685b      	ldr	r3, [r3, #4]
 8018666:	685a      	ldr	r2, [r3, #4]
 8018668:	693b      	ldr	r3, [r7, #16]
 801866a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	8ada      	ldrh	r2, [r3, #22]
 8018670:	693b      	ldr	r3, [r7, #16]
 8018672:	68dc      	ldr	r4, [r3, #12]
 8018674:	4610      	mov	r0, r2
 8018676:	f7f9 fe6b 	bl	8012350 <lwip_htons>
 801867a:	4603      	mov	r3, r0
 801867c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	8b1a      	ldrh	r2, [r3, #24]
 8018682:	693b      	ldr	r3, [r7, #16]
 8018684:	68dc      	ldr	r4, [r3, #12]
 8018686:	4610      	mov	r0, r2
 8018688:	f7f9 fe62 	bl	8012350 <lwip_htons>
 801868c:	4603      	mov	r3, r0
 801868e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018690:	693b      	ldr	r3, [r7, #16]
 8018692:	68dc      	ldr	r4, [r3, #12]
 8018694:	6838      	ldr	r0, [r7, #0]
 8018696:	f7f9 fe70 	bl	801237a <lwip_htonl>
 801869a:	4603      	mov	r3, r0
 801869c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801869e:	7dfb      	ldrb	r3, [r7, #23]
 80186a0:	089b      	lsrs	r3, r3, #2
 80186a2:	b2db      	uxtb	r3, r3
 80186a4:	3305      	adds	r3, #5
 80186a6:	b29b      	uxth	r3, r3
 80186a8:	031b      	lsls	r3, r3, #12
 80186aa:	b29a      	uxth	r2, r3
 80186ac:	79fb      	ldrb	r3, [r7, #7]
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	4313      	orrs	r3, r2
 80186b2:	b29a      	uxth	r2, r3
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	68dc      	ldr	r4, [r3, #12]
 80186b8:	4610      	mov	r0, r2
 80186ba:	f7f9 fe49 	bl	8012350 <lwip_htons>
 80186be:	4603      	mov	r3, r0
 80186c0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80186c2:	693b      	ldr	r3, [r7, #16]
 80186c4:	68db      	ldr	r3, [r3, #12]
 80186c6:	2200      	movs	r2, #0
 80186c8:	749a      	strb	r2, [r3, #18]
 80186ca:	2200      	movs	r2, #0
 80186cc:	74da      	strb	r2, [r3, #19]
  return seg;
 80186ce:	693b      	ldr	r3, [r7, #16]
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	371c      	adds	r7, #28
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd90      	pop	{r4, r7, pc}
 80186d8:	08021358 	.word	0x08021358
 80186dc:	0802138c 	.word	0x0802138c
 80186e0:	080213ac 	.word	0x080213ac
 80186e4:	080213d4 	.word	0x080213d4
 80186e8:	080213f8 	.word	0x080213f8

080186ec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b086      	sub	sp, #24
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	607b      	str	r3, [r7, #4]
 80186f4:	4603      	mov	r3, r0
 80186f6:	73fb      	strb	r3, [r7, #15]
 80186f8:	460b      	mov	r3, r1
 80186fa:	81bb      	strh	r3, [r7, #12]
 80186fc:	4613      	mov	r3, r2
 80186fe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018700:	89bb      	ldrh	r3, [r7, #12]
 8018702:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d105      	bne.n	8018716 <tcp_pbuf_prealloc+0x2a>
 801870a:	4b30      	ldr	r3, [pc, #192]	@ (80187cc <tcp_pbuf_prealloc+0xe0>)
 801870c:	22e8      	movs	r2, #232	@ 0xe8
 801870e:	4930      	ldr	r1, [pc, #192]	@ (80187d0 <tcp_pbuf_prealloc+0xe4>)
 8018710:	4830      	ldr	r0, [pc, #192]	@ (80187d4 <tcp_pbuf_prealloc+0xe8>)
 8018712:	f005 fb4f 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018716:	6a3b      	ldr	r3, [r7, #32]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d105      	bne.n	8018728 <tcp_pbuf_prealloc+0x3c>
 801871c:	4b2b      	ldr	r3, [pc, #172]	@ (80187cc <tcp_pbuf_prealloc+0xe0>)
 801871e:	22e9      	movs	r2, #233	@ 0xe9
 8018720:	492d      	ldr	r1, [pc, #180]	@ (80187d8 <tcp_pbuf_prealloc+0xec>)
 8018722:	482c      	ldr	r0, [pc, #176]	@ (80187d4 <tcp_pbuf_prealloc+0xe8>)
 8018724:	f005 fb46 	bl	801ddb4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018728:	89ba      	ldrh	r2, [r7, #12]
 801872a:	897b      	ldrh	r3, [r7, #10]
 801872c:	429a      	cmp	r2, r3
 801872e:	d221      	bcs.n	8018774 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018730:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018734:	f003 0302 	and.w	r3, r3, #2
 8018738:	2b00      	cmp	r3, #0
 801873a:	d111      	bne.n	8018760 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801873c:	6a3b      	ldr	r3, [r7, #32]
 801873e:	8b5b      	ldrh	r3, [r3, #26]
 8018740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018744:	2b00      	cmp	r3, #0
 8018746:	d115      	bne.n	8018774 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018748:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801874c:	2b00      	cmp	r3, #0
 801874e:	d007      	beq.n	8018760 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018750:	6a3b      	ldr	r3, [r7, #32]
 8018752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018754:	2b00      	cmp	r3, #0
 8018756:	d103      	bne.n	8018760 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018758:	6a3b      	ldr	r3, [r7, #32]
 801875a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801875c:	2b00      	cmp	r3, #0
 801875e:	d009      	beq.n	8018774 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018760:	89bb      	ldrh	r3, [r7, #12]
 8018762:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8018766:	f023 0203 	bic.w	r2, r3, #3
 801876a:	897b      	ldrh	r3, [r7, #10]
 801876c:	4293      	cmp	r3, r2
 801876e:	bf28      	it	cs
 8018770:	4613      	movcs	r3, r2
 8018772:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018774:	8af9      	ldrh	r1, [r7, #22]
 8018776:	7bfb      	ldrb	r3, [r7, #15]
 8018778:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801877c:	4618      	mov	r0, r3
 801877e:	f7fa ffbd 	bl	80136fc <pbuf_alloc>
 8018782:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018784:	693b      	ldr	r3, [r7, #16]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d101      	bne.n	801878e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801878a:	2300      	movs	r3, #0
 801878c:	e019      	b.n	80187c2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801878e:	693b      	ldr	r3, [r7, #16]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	2b00      	cmp	r3, #0
 8018794:	d006      	beq.n	80187a4 <tcp_pbuf_prealloc+0xb8>
 8018796:	4b0d      	ldr	r3, [pc, #52]	@ (80187cc <tcp_pbuf_prealloc+0xe0>)
 8018798:	f240 120b 	movw	r2, #267	@ 0x10b
 801879c:	490f      	ldr	r1, [pc, #60]	@ (80187dc <tcp_pbuf_prealloc+0xf0>)
 801879e:	480d      	ldr	r0, [pc, #52]	@ (80187d4 <tcp_pbuf_prealloc+0xe8>)
 80187a0:	f005 fb08 	bl	801ddb4 <iprintf>
  *oversize = p->len - length;
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	895a      	ldrh	r2, [r3, #10]
 80187a8:	89bb      	ldrh	r3, [r7, #12]
 80187aa:	1ad3      	subs	r3, r2, r3
 80187ac:	b29a      	uxth	r2, r3
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	89ba      	ldrh	r2, [r7, #12]
 80187b6:	811a      	strh	r2, [r3, #8]
 80187b8:	693b      	ldr	r3, [r7, #16]
 80187ba:	891a      	ldrh	r2, [r3, #8]
 80187bc:	693b      	ldr	r3, [r7, #16]
 80187be:	815a      	strh	r2, [r3, #10]
  return p;
 80187c0:	693b      	ldr	r3, [r7, #16]
}
 80187c2:	4618      	mov	r0, r3
 80187c4:	3718      	adds	r7, #24
 80187c6:	46bd      	mov	sp, r7
 80187c8:	bd80      	pop	{r7, pc}
 80187ca:	bf00      	nop
 80187cc:	08021358 	.word	0x08021358
 80187d0:	08021410 	.word	0x08021410
 80187d4:	080213ac 	.word	0x080213ac
 80187d8:	08021434 	.word	0x08021434
 80187dc:	08021454 	.word	0x08021454

080187e0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	460b      	mov	r3, r1
 80187ea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d106      	bne.n	8018800 <tcp_write_checks+0x20>
 80187f2:	4b33      	ldr	r3, [pc, #204]	@ (80188c0 <tcp_write_checks+0xe0>)
 80187f4:	f240 1233 	movw	r2, #307	@ 0x133
 80187f8:	4932      	ldr	r1, [pc, #200]	@ (80188c4 <tcp_write_checks+0xe4>)
 80187fa:	4833      	ldr	r0, [pc, #204]	@ (80188c8 <tcp_write_checks+0xe8>)
 80187fc:	f005 fada 	bl	801ddb4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	7d1b      	ldrb	r3, [r3, #20]
 8018804:	2b04      	cmp	r3, #4
 8018806:	d00e      	beq.n	8018826 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801880c:	2b07      	cmp	r3, #7
 801880e:	d00a      	beq.n	8018826 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018814:	2b02      	cmp	r3, #2
 8018816:	d006      	beq.n	8018826 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801881c:	2b03      	cmp	r3, #3
 801881e:	d002      	beq.n	8018826 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018820:	f06f 030a 	mvn.w	r3, #10
 8018824:	e048      	b.n	80188b8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018826:	887b      	ldrh	r3, [r7, #2]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d101      	bne.n	8018830 <tcp_write_checks+0x50>
    return ERR_OK;
 801882c:	2300      	movs	r3, #0
 801882e:	e043      	b.n	80188b8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018836:	887a      	ldrh	r2, [r7, #2]
 8018838:	429a      	cmp	r2, r3
 801883a:	d909      	bls.n	8018850 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	8b5b      	ldrh	r3, [r3, #26]
 8018840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018844:	b29a      	uxth	r2, r3
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801884a:	f04f 33ff 	mov.w	r3, #4294967295
 801884e:	e033      	b.n	80188b8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018856:	2b0f      	cmp	r3, #15
 8018858:	d909      	bls.n	801886e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	8b5b      	ldrh	r3, [r3, #26]
 801885e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018862:	b29a      	uxth	r2, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018868:	f04f 33ff 	mov.w	r3, #4294967295
 801886c:	e024      	b.n	80188b8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018874:	2b00      	cmp	r3, #0
 8018876:	d00f      	beq.n	8018898 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801887c:	2b00      	cmp	r3, #0
 801887e:	d11a      	bne.n	80188b6 <tcp_write_checks+0xd6>
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018884:	2b00      	cmp	r3, #0
 8018886:	d116      	bne.n	80188b6 <tcp_write_checks+0xd6>
 8018888:	4b0d      	ldr	r3, [pc, #52]	@ (80188c0 <tcp_write_checks+0xe0>)
 801888a:	f240 1255 	movw	r2, #341	@ 0x155
 801888e:	490f      	ldr	r1, [pc, #60]	@ (80188cc <tcp_write_checks+0xec>)
 8018890:	480d      	ldr	r0, [pc, #52]	@ (80188c8 <tcp_write_checks+0xe8>)
 8018892:	f005 fa8f 	bl	801ddb4 <iprintf>
 8018896:	e00e      	b.n	80188b6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801889c:	2b00      	cmp	r3, #0
 801889e:	d103      	bne.n	80188a8 <tcp_write_checks+0xc8>
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d006      	beq.n	80188b6 <tcp_write_checks+0xd6>
 80188a8:	4b05      	ldr	r3, [pc, #20]	@ (80188c0 <tcp_write_checks+0xe0>)
 80188aa:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80188ae:	4908      	ldr	r1, [pc, #32]	@ (80188d0 <tcp_write_checks+0xf0>)
 80188b0:	4805      	ldr	r0, [pc, #20]	@ (80188c8 <tcp_write_checks+0xe8>)
 80188b2:	f005 fa7f 	bl	801ddb4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80188b6:	2300      	movs	r3, #0
}
 80188b8:	4618      	mov	r0, r3
 80188ba:	3708      	adds	r7, #8
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}
 80188c0:	08021358 	.word	0x08021358
 80188c4:	08021468 	.word	0x08021468
 80188c8:	080213ac 	.word	0x080213ac
 80188cc:	08021488 	.word	0x08021488
 80188d0:	080214c4 	.word	0x080214c4

080188d4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80188d4:	b590      	push	{r4, r7, lr}
 80188d6:	b09b      	sub	sp, #108	@ 0x6c
 80188d8:	af04      	add	r7, sp, #16
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	4611      	mov	r1, r2
 80188e0:	461a      	mov	r2, r3
 80188e2:	460b      	mov	r3, r1
 80188e4:	80fb      	strh	r3, [r7, #6]
 80188e6:	4613      	mov	r3, r2
 80188e8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80188ea:	2300      	movs	r3, #0
 80188ec:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80188ee:	2300      	movs	r3, #0
 80188f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80188f2:	2300      	movs	r3, #0
 80188f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80188f6:	2300      	movs	r3, #0
 80188f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80188fa:	2300      	movs	r3, #0
 80188fc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80188fe:	2300      	movs	r3, #0
 8018900:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018904:	2300      	movs	r3, #0
 8018906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801890a:	2300      	movs	r3, #0
 801890c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801890e:	2300      	movs	r3, #0
 8018910:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018912:	2300      	movs	r3, #0
 8018914:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d109      	bne.n	8018930 <tcp_write+0x5c>
 801891c:	4ba4      	ldr	r3, [pc, #656]	@ (8018bb0 <tcp_write+0x2dc>)
 801891e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8018922:	49a4      	ldr	r1, [pc, #656]	@ (8018bb4 <tcp_write+0x2e0>)
 8018924:	48a4      	ldr	r0, [pc, #656]	@ (8018bb8 <tcp_write+0x2e4>)
 8018926:	f005 fa45 	bl	801ddb4 <iprintf>
 801892a:	f06f 030f 	mvn.w	r3, #15
 801892e:	e32a      	b.n	8018f86 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018936:	085b      	lsrs	r3, r3, #1
 8018938:	b29a      	uxth	r2, r3
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801893e:	4293      	cmp	r3, r2
 8018940:	bf28      	it	cs
 8018942:	4613      	movcs	r3, r2
 8018944:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018948:	2b00      	cmp	r3, #0
 801894a:	d102      	bne.n	8018952 <tcp_write+0x7e>
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018950:	e000      	b.n	8018954 <tcp_write+0x80>
 8018952:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018954:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d109      	bne.n	8018970 <tcp_write+0x9c>
 801895c:	4b94      	ldr	r3, [pc, #592]	@ (8018bb0 <tcp_write+0x2dc>)
 801895e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8018962:	4996      	ldr	r1, [pc, #600]	@ (8018bbc <tcp_write+0x2e8>)
 8018964:	4894      	ldr	r0, [pc, #592]	@ (8018bb8 <tcp_write+0x2e4>)
 8018966:	f005 fa25 	bl	801ddb4 <iprintf>
 801896a:	f06f 030f 	mvn.w	r3, #15
 801896e:	e30a      	b.n	8018f86 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018970:	88fb      	ldrh	r3, [r7, #6]
 8018972:	4619      	mov	r1, r3
 8018974:	68f8      	ldr	r0, [r7, #12]
 8018976:	f7ff ff33 	bl	80187e0 <tcp_write_checks>
 801897a:	4603      	mov	r3, r0
 801897c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018980:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018984:	2b00      	cmp	r3, #0
 8018986:	d002      	beq.n	801898e <tcp_write+0xba>
    return err;
 8018988:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801898c:	e2fb      	b.n	8018f86 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018994:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018998:	2300      	movs	r3, #0
 801899a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f000 80f6 	beq.w	8018b94 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80189ae:	e002      	b.n	80189b6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80189b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80189b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d1f8      	bne.n	80189b0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80189be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80189c0:	7a9b      	ldrb	r3, [r3, #10]
 80189c2:	009b      	lsls	r3, r3, #2
 80189c4:	b29b      	uxth	r3, r3
 80189c6:	f003 0304 	and.w	r3, r3, #4
 80189ca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80189cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80189ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80189d0:	891b      	ldrh	r3, [r3, #8]
 80189d2:	4619      	mov	r1, r3
 80189d4:	8c3b      	ldrh	r3, [r7, #32]
 80189d6:	440b      	add	r3, r1
 80189d8:	429a      	cmp	r2, r3
 80189da:	da06      	bge.n	80189ea <tcp_write+0x116>
 80189dc:	4b74      	ldr	r3, [pc, #464]	@ (8018bb0 <tcp_write+0x2dc>)
 80189de:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80189e2:	4977      	ldr	r1, [pc, #476]	@ (8018bc0 <tcp_write+0x2ec>)
 80189e4:	4874      	ldr	r0, [pc, #464]	@ (8018bb8 <tcp_write+0x2e4>)
 80189e6:	f005 f9e5 	bl	801ddb4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80189ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80189ec:	891a      	ldrh	r2, [r3, #8]
 80189ee:	8c3b      	ldrh	r3, [r7, #32]
 80189f0:	4413      	add	r3, r2
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80189f6:	1ad3      	subs	r3, r2, r3
 80189f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018a00:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018a02:	8a7b      	ldrh	r3, [r7, #18]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d026      	beq.n	8018a56 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018a08:	8a7b      	ldrh	r3, [r7, #18]
 8018a0a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d206      	bcs.n	8018a1e <tcp_write+0x14a>
 8018a10:	4b67      	ldr	r3, [pc, #412]	@ (8018bb0 <tcp_write+0x2dc>)
 8018a12:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8018a16:	496b      	ldr	r1, [pc, #428]	@ (8018bc4 <tcp_write+0x2f0>)
 8018a18:	4867      	ldr	r0, [pc, #412]	@ (8018bb8 <tcp_write+0x2e4>)
 8018a1a:	f005 f9cb 	bl	801ddb4 <iprintf>
      seg = last_unsent;
 8018a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018a22:	8a7b      	ldrh	r3, [r7, #18]
 8018a24:	88fa      	ldrh	r2, [r7, #6]
 8018a26:	4293      	cmp	r3, r2
 8018a28:	bf28      	it	cs
 8018a2a:	4613      	movcs	r3, r2
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018a30:	4293      	cmp	r3, r2
 8018a32:	bf28      	it	cs
 8018a34:	4613      	movcs	r3, r2
 8018a36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8018a38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a3e:	4413      	add	r3, r2
 8018a40:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018a44:	8a7a      	ldrh	r2, [r7, #18]
 8018a46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a48:	1ad3      	subs	r3, r2, r3
 8018a4a:	b29b      	uxth	r3, r3
 8018a4c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018a4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018a50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018a52:	1ad3      	subs	r3, r2, r3
 8018a54:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018a56:	8a7b      	ldrh	r3, [r7, #18]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d00b      	beq.n	8018a74 <tcp_write+0x1a0>
 8018a5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a60:	88fb      	ldrh	r3, [r7, #6]
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d006      	beq.n	8018a74 <tcp_write+0x1a0>
 8018a66:	4b52      	ldr	r3, [pc, #328]	@ (8018bb0 <tcp_write+0x2dc>)
 8018a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018a6c:	4956      	ldr	r1, [pc, #344]	@ (8018bc8 <tcp_write+0x2f4>)
 8018a6e:	4852      	ldr	r0, [pc, #328]	@ (8018bb8 <tcp_write+0x2e4>)
 8018a70:	f005 f9a0 	bl	801ddb4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018a74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a78:	88fb      	ldrh	r3, [r7, #6]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	f080 8167 	bcs.w	8018d4e <tcp_write+0x47a>
 8018a80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	f000 8163 	beq.w	8018d4e <tcp_write+0x47a>
 8018a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a8a:	891b      	ldrh	r3, [r3, #8]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	f000 815e 	beq.w	8018d4e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018a92:	88fa      	ldrh	r2, [r7, #6]
 8018a94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018a98:	1ad2      	subs	r2, r2, r3
 8018a9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018a9c:	4293      	cmp	r3, r2
 8018a9e:	bfa8      	it	ge
 8018aa0:	4613      	movge	r3, r2
 8018aa2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018aa8:	797b      	ldrb	r3, [r7, #5]
 8018aaa:	f003 0301 	and.w	r3, r3, #1
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d027      	beq.n	8018b02 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018ab2:	f107 0012 	add.w	r0, r7, #18
 8018ab6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018ab8:	8bf9      	ldrh	r1, [r7, #30]
 8018aba:	2301      	movs	r3, #1
 8018abc:	9302      	str	r3, [sp, #8]
 8018abe:	797b      	ldrb	r3, [r7, #5]
 8018ac0:	9301      	str	r3, [sp, #4]
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	9300      	str	r3, [sp, #0]
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	2000      	movs	r0, #0
 8018aca:	f7ff fe0f 	bl	80186ec <tcp_pbuf_prealloc>
 8018ace:	6578      	str	r0, [r7, #84]	@ 0x54
 8018ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	f000 8225 	beq.w	8018f22 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ada:	6858      	ldr	r0, [r3, #4]
 8018adc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018ae0:	68ba      	ldr	r2, [r7, #8]
 8018ae2:	4413      	add	r3, r2
 8018ae4:	8bfa      	ldrh	r2, [r7, #30]
 8018ae6:	4619      	mov	r1, r3
 8018ae8:	f005 fb97 	bl	801e21a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018aec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018aee:	f7fb f9ad 	bl	8013e4c <pbuf_clen>
 8018af2:	4603      	mov	r3, r0
 8018af4:	461a      	mov	r2, r3
 8018af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018afa:	4413      	add	r3, r2
 8018afc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018b00:	e041      	b.n	8018b86 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8018b08:	e002      	b.n	8018b10 <tcp_write+0x23c>
 8018b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d1f8      	bne.n	8018b0a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b1a:	7b1b      	ldrb	r3, [r3, #12]
 8018b1c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d115      	bne.n	8018b50 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b26:	685b      	ldr	r3, [r3, #4]
 8018b28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018b2a:	8952      	ldrh	r2, [r2, #10]
 8018b2c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018b2e:	68ba      	ldr	r2, [r7, #8]
 8018b30:	429a      	cmp	r2, r3
 8018b32:	d10d      	bne.n	8018b50 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018b34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d006      	beq.n	8018b4a <tcp_write+0x276>
 8018b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8018bb0 <tcp_write+0x2dc>)
 8018b3e:	f240 2231 	movw	r2, #561	@ 0x231
 8018b42:	4922      	ldr	r1, [pc, #136]	@ (8018bcc <tcp_write+0x2f8>)
 8018b44:	481c      	ldr	r0, [pc, #112]	@ (8018bb8 <tcp_write+0x2e4>)
 8018b46:	f005 f935 	bl	801ddb4 <iprintf>
          extendlen = seglen;
 8018b4a:	8bfb      	ldrh	r3, [r7, #30]
 8018b4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8018b4e:	e01a      	b.n	8018b86 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018b50:	8bfb      	ldrh	r3, [r7, #30]
 8018b52:	2201      	movs	r2, #1
 8018b54:	4619      	mov	r1, r3
 8018b56:	2000      	movs	r0, #0
 8018b58:	f7fa fdd0 	bl	80136fc <pbuf_alloc>
 8018b5c:	6578      	str	r0, [r7, #84]	@ 0x54
 8018b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	f000 81e0 	beq.w	8018f26 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018b66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018b6a:	68ba      	ldr	r2, [r7, #8]
 8018b6c:	441a      	add	r2, r3
 8018b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018b70:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8018b72:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018b74:	f7fb f96a 	bl	8013e4c <pbuf_clen>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	461a      	mov	r2, r3
 8018b7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018b80:	4413      	add	r3, r2
 8018b82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8018b86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018b8a:	8bfb      	ldrh	r3, [r7, #30]
 8018b8c:	4413      	add	r3, r2
 8018b8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8018b92:	e0dc      	b.n	8018d4e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	f000 80d7 	beq.w	8018d4e <tcp_write+0x47a>
 8018ba0:	4b03      	ldr	r3, [pc, #12]	@ (8018bb0 <tcp_write+0x2dc>)
 8018ba2:	f240 224a 	movw	r2, #586	@ 0x24a
 8018ba6:	490a      	ldr	r1, [pc, #40]	@ (8018bd0 <tcp_write+0x2fc>)
 8018ba8:	4803      	ldr	r0, [pc, #12]	@ (8018bb8 <tcp_write+0x2e4>)
 8018baa:	f005 f903 	bl	801ddb4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018bae:	e0ce      	b.n	8018d4e <tcp_write+0x47a>
 8018bb0:	08021358 	.word	0x08021358
 8018bb4:	080214f8 	.word	0x080214f8
 8018bb8:	080213ac 	.word	0x080213ac
 8018bbc:	08021510 	.word	0x08021510
 8018bc0:	08021544 	.word	0x08021544
 8018bc4:	0802155c 	.word	0x0802155c
 8018bc8:	0802157c 	.word	0x0802157c
 8018bcc:	0802159c 	.word	0x0802159c
 8018bd0:	080215c8 	.word	0x080215c8
    struct pbuf *p;
    u16_t left = len - pos;
 8018bd4:	88fa      	ldrh	r2, [r7, #6]
 8018bd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018bda:	1ad3      	subs	r3, r2, r3
 8018bdc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8018bde:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018be2:	b29b      	uxth	r3, r3
 8018be4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018be6:	1ad3      	subs	r3, r2, r3
 8018be8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018bea:	8b7a      	ldrh	r2, [r7, #26]
 8018bec:	8bbb      	ldrh	r3, [r7, #28]
 8018bee:	4293      	cmp	r3, r2
 8018bf0:	bf28      	it	cs
 8018bf2:	4613      	movcs	r3, r2
 8018bf4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018bf6:	797b      	ldrb	r3, [r7, #5]
 8018bf8:	f003 0301 	and.w	r3, r3, #1
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d036      	beq.n	8018c6e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018c00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018c04:	b29a      	uxth	r2, r3
 8018c06:	8b3b      	ldrh	r3, [r7, #24]
 8018c08:	4413      	add	r3, r2
 8018c0a:	b299      	uxth	r1, r3
 8018c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	bf0c      	ite	eq
 8018c12:	2301      	moveq	r3, #1
 8018c14:	2300      	movne	r3, #0
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	f107 0012 	add.w	r0, r7, #18
 8018c1c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018c1e:	9302      	str	r3, [sp, #8]
 8018c20:	797b      	ldrb	r3, [r7, #5]
 8018c22:	9301      	str	r3, [sp, #4]
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	9300      	str	r3, [sp, #0]
 8018c28:	4603      	mov	r3, r0
 8018c2a:	2036      	movs	r0, #54	@ 0x36
 8018c2c:	f7ff fd5e 	bl	80186ec <tcp_pbuf_prealloc>
 8018c30:	6338      	str	r0, [r7, #48]	@ 0x30
 8018c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	f000 8178 	beq.w	8018f2a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8018c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c3c:	895b      	ldrh	r3, [r3, #10]
 8018c3e:	8b3a      	ldrh	r2, [r7, #24]
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d906      	bls.n	8018c52 <tcp_write+0x37e>
 8018c44:	4b8c      	ldr	r3, [pc, #560]	@ (8018e78 <tcp_write+0x5a4>)
 8018c46:	f240 2266 	movw	r2, #614	@ 0x266
 8018c4a:	498c      	ldr	r1, [pc, #560]	@ (8018e7c <tcp_write+0x5a8>)
 8018c4c:	488c      	ldr	r0, [pc, #560]	@ (8018e80 <tcp_write+0x5ac>)
 8018c4e:	f005 f8b1 	bl	801ddb4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c54:	685a      	ldr	r2, [r3, #4]
 8018c56:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018c5a:	18d0      	adds	r0, r2, r3
 8018c5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018c60:	68ba      	ldr	r2, [r7, #8]
 8018c62:	4413      	add	r3, r2
 8018c64:	8b3a      	ldrh	r2, [r7, #24]
 8018c66:	4619      	mov	r1, r3
 8018c68:	f005 fad7 	bl	801e21a <memcpy>
 8018c6c:	e02f      	b.n	8018cce <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8018c6e:	8a7b      	ldrh	r3, [r7, #18]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d006      	beq.n	8018c82 <tcp_write+0x3ae>
 8018c74:	4b80      	ldr	r3, [pc, #512]	@ (8018e78 <tcp_write+0x5a4>)
 8018c76:	f240 2271 	movw	r2, #625	@ 0x271
 8018c7a:	4982      	ldr	r1, [pc, #520]	@ (8018e84 <tcp_write+0x5b0>)
 8018c7c:	4880      	ldr	r0, [pc, #512]	@ (8018e80 <tcp_write+0x5ac>)
 8018c7e:	f005 f899 	bl	801ddb4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018c82:	8b3b      	ldrh	r3, [r7, #24]
 8018c84:	2201      	movs	r2, #1
 8018c86:	4619      	mov	r1, r3
 8018c88:	2036      	movs	r0, #54	@ 0x36
 8018c8a:	f7fa fd37 	bl	80136fc <pbuf_alloc>
 8018c8e:	6178      	str	r0, [r7, #20]
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	f000 814b 	beq.w	8018f2e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018c98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018c9c:	68ba      	ldr	r2, [r7, #8]
 8018c9e:	441a      	add	r2, r3
 8018ca0:	697b      	ldr	r3, [r7, #20]
 8018ca2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018ca4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018cae:	4619      	mov	r1, r3
 8018cb0:	2036      	movs	r0, #54	@ 0x36
 8018cb2:	f7fa fd23 	bl	80136fc <pbuf_alloc>
 8018cb6:	6338      	str	r0, [r7, #48]	@ 0x30
 8018cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d103      	bne.n	8018cc6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018cbe:	6978      	ldr	r0, [r7, #20]
 8018cc0:	f7fb f836 	bl	8013d30 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8018cc4:	e136      	b.n	8018f34 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8018cc6:	6979      	ldr	r1, [r7, #20]
 8018cc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018cca:	f7fb f8ff 	bl	8013ecc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018cce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018cd0:	f7fb f8bc 	bl	8013e4c <pbuf_clen>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018cdc:	4413      	add	r3, r2
 8018cde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8018ce2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018ce6:	2b10      	cmp	r3, #16
 8018ce8:	d903      	bls.n	8018cf2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018cea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018cec:	f7fb f820 	bl	8013d30 <pbuf_free>
      goto memerr;
 8018cf0:	e120      	b.n	8018f34 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018cf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018cfa:	441a      	add	r2, r3
 8018cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018d00:	9300      	str	r3, [sp, #0]
 8018d02:	4613      	mov	r3, r2
 8018d04:	2200      	movs	r2, #0
 8018d06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018d08:	68f8      	ldr	r0, [r7, #12]
 8018d0a:	f7ff fc53 	bl	80185b4 <tcp_create_segment>
 8018d0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8018d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	f000 810d 	beq.w	8018f32 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d102      	bne.n	8018d24 <tcp_write+0x450>
      queue = seg;
 8018d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8018d22:	e00c      	b.n	8018d3e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d106      	bne.n	8018d38 <tcp_write+0x464>
 8018d2a:	4b53      	ldr	r3, [pc, #332]	@ (8018e78 <tcp_write+0x5a4>)
 8018d2c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018d30:	4955      	ldr	r1, [pc, #340]	@ (8018e88 <tcp_write+0x5b4>)
 8018d32:	4853      	ldr	r0, [pc, #332]	@ (8018e80 <tcp_write+0x5ac>)
 8018d34:	f005 f83e 	bl	801ddb4 <iprintf>
      prev_seg->next = seg;
 8018d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018d3c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8018d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018d40:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018d42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d46:	8b3b      	ldrh	r3, [r7, #24]
 8018d48:	4413      	add	r3, r2
 8018d4a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8018d4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018d52:	88fb      	ldrh	r3, [r7, #6]
 8018d54:	429a      	cmp	r2, r3
 8018d56:	f4ff af3d 	bcc.w	8018bd4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8018d5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d02c      	beq.n	8018dba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d62:	685b      	ldr	r3, [r3, #4]
 8018d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018d66:	e01e      	b.n	8018da6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8018d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d6a:	891a      	ldrh	r2, [r3, #8]
 8018d6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d6e:	4413      	add	r3, r2
 8018d70:	b29a      	uxth	r2, r3
 8018d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d74:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d110      	bne.n	8018da0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018d84:	8952      	ldrh	r2, [r2, #10]
 8018d86:	4413      	add	r3, r2
 8018d88:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018d8a:	68b9      	ldr	r1, [r7, #8]
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f005 fa44 	bl	801e21a <memcpy>
        p->len += oversize_used;
 8018d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d94:	895a      	ldrh	r2, [r3, #10]
 8018d96:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018d98:	4413      	add	r3, r2
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d9e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d1dd      	bne.n	8018d68 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dae:	891a      	ldrh	r2, [r3, #8]
 8018db0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018db2:	4413      	add	r3, r2
 8018db4:	b29a      	uxth	r2, r3
 8018db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018db8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018dba:	8a7a      	ldrh	r2, [r7, #18]
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d018      	beq.n	8018dfa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d106      	bne.n	8018ddc <tcp_write+0x508>
 8018dce:	4b2a      	ldr	r3, [pc, #168]	@ (8018e78 <tcp_write+0x5a4>)
 8018dd0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8018dd4:	492d      	ldr	r1, [pc, #180]	@ (8018e8c <tcp_write+0x5b8>)
 8018dd6:	482a      	ldr	r0, [pc, #168]	@ (8018e80 <tcp_write+0x5ac>)
 8018dd8:	f004 ffec 	bl	801ddb4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7fb f872 	bl	8013ecc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dea:	891a      	ldrh	r2, [r3, #8]
 8018dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018dee:	891b      	ldrh	r3, [r3, #8]
 8018df0:	4413      	add	r3, r2
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018df6:	811a      	strh	r2, [r3, #8]
 8018df8:	e037      	b.n	8018e6a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018dfa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d034      	beq.n	8018e6a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d003      	beq.n	8018e0e <tcp_write+0x53a>
 8018e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e08:	685b      	ldr	r3, [r3, #4]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d106      	bne.n	8018e1c <tcp_write+0x548>
 8018e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8018e78 <tcp_write+0x5a4>)
 8018e10:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018e14:	491e      	ldr	r1, [pc, #120]	@ (8018e90 <tcp_write+0x5bc>)
 8018e16:	481a      	ldr	r0, [pc, #104]	@ (8018e80 <tcp_write+0x5ac>)
 8018e18:	f004 ffcc 	bl	801ddb4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e1e:	685b      	ldr	r3, [r3, #4]
 8018e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e22:	e009      	b.n	8018e38 <tcp_write+0x564>
      p->tot_len += extendlen;
 8018e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e26:	891a      	ldrh	r2, [r3, #8]
 8018e28:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e2a:	4413      	add	r3, r2
 8018e2c:	b29a      	uxth	r2, r3
 8018e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e30:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d1f1      	bne.n	8018e24 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8018e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e42:	891a      	ldrh	r2, [r3, #8]
 8018e44:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e46:	4413      	add	r3, r2
 8018e48:	b29a      	uxth	r2, r3
 8018e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e4c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8018e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e50:	895a      	ldrh	r2, [r3, #10]
 8018e52:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e54:	4413      	add	r3, r2
 8018e56:	b29a      	uxth	r2, r3
 8018e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e5a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e5e:	891a      	ldrh	r2, [r3, #8]
 8018e60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e62:	4413      	add	r3, r2
 8018e64:	b29a      	uxth	r2, r3
 8018e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e68:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8018e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d111      	bne.n	8018e94 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018e74:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018e76:	e010      	b.n	8018e9a <tcp_write+0x5c6>
 8018e78:	08021358 	.word	0x08021358
 8018e7c:	080215f8 	.word	0x080215f8
 8018e80:	080213ac 	.word	0x080213ac
 8018e84:	08021638 	.word	0x08021638
 8018e88:	08021648 	.word	0x08021648
 8018e8c:	0802165c 	.word	0x0802165c
 8018e90:	08021694 	.word	0x08021694
  } else {
    last_unsent->next = queue;
 8018e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018e98:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018e9e:	88fb      	ldrh	r3, [r7, #6]
 8018ea0:	441a      	add	r2, r3
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018eac:	88fb      	ldrh	r3, [r7, #6]
 8018eae:	1ad3      	subs	r3, r2, r3
 8018eb0:	b29a      	uxth	r2, r3
 8018eb2:	68fb      	ldr	r3, [r7, #12]
 8018eb4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018ebe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d00e      	beq.n	8018eea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d10a      	bne.n	8018eea <tcp_write+0x616>
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d106      	bne.n	8018eea <tcp_write+0x616>
 8018edc:	4b2c      	ldr	r3, [pc, #176]	@ (8018f90 <tcp_write+0x6bc>)
 8018ede:	f240 3212 	movw	r2, #786	@ 0x312
 8018ee2:	492c      	ldr	r1, [pc, #176]	@ (8018f94 <tcp_write+0x6c0>)
 8018ee4:	482c      	ldr	r0, [pc, #176]	@ (8018f98 <tcp_write+0x6c4>)
 8018ee6:	f004 ff65 	bl	801ddb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d016      	beq.n	8018f1e <tcp_write+0x64a>
 8018ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ef2:	68db      	ldr	r3, [r3, #12]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d012      	beq.n	8018f1e <tcp_write+0x64a>
 8018ef8:	797b      	ldrb	r3, [r7, #5]
 8018efa:	f003 0302 	and.w	r3, r3, #2
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d10d      	bne.n	8018f1e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f04:	68db      	ldr	r3, [r3, #12]
 8018f06:	899b      	ldrh	r3, [r3, #12]
 8018f08:	b29c      	uxth	r4, r3
 8018f0a:	2008      	movs	r0, #8
 8018f0c:	f7f9 fa20 	bl	8012350 <lwip_htons>
 8018f10:	4603      	mov	r3, r0
 8018f12:	461a      	mov	r2, r3
 8018f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f16:	68db      	ldr	r3, [r3, #12]
 8018f18:	4322      	orrs	r2, r4
 8018f1a:	b292      	uxth	r2, r2
 8018f1c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	e031      	b.n	8018f86 <tcp_write+0x6b2>
          goto memerr;
 8018f22:	bf00      	nop
 8018f24:	e006      	b.n	8018f34 <tcp_write+0x660>
            goto memerr;
 8018f26:	bf00      	nop
 8018f28:	e004      	b.n	8018f34 <tcp_write+0x660>
        goto memerr;
 8018f2a:	bf00      	nop
 8018f2c:	e002      	b.n	8018f34 <tcp_write+0x660>
        goto memerr;
 8018f2e:	bf00      	nop
 8018f30:	e000      	b.n	8018f34 <tcp_write+0x660>
      goto memerr;
 8018f32:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	8b5b      	ldrh	r3, [r3, #26]
 8018f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018f3c:	b29a      	uxth	r2, r3
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d002      	beq.n	8018f4e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018f48:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018f4a:	f7fa fef1 	bl	8013d30 <pbuf_free>
  }
  if (queue != NULL) {
 8018f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d002      	beq.n	8018f5a <tcp_write+0x686>
    tcp_segs_free(queue);
 8018f54:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018f56:	f7fc fb6f 	bl	8015638 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d00e      	beq.n	8018f82 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d10a      	bne.n	8018f82 <tcp_write+0x6ae>
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d106      	bne.n	8018f82 <tcp_write+0x6ae>
 8018f74:	4b06      	ldr	r3, [pc, #24]	@ (8018f90 <tcp_write+0x6bc>)
 8018f76:	f240 3227 	movw	r2, #807	@ 0x327
 8018f7a:	4906      	ldr	r1, [pc, #24]	@ (8018f94 <tcp_write+0x6c0>)
 8018f7c:	4806      	ldr	r0, [pc, #24]	@ (8018f98 <tcp_write+0x6c4>)
 8018f7e:	f004 ff19 	bl	801ddb4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	375c      	adds	r7, #92	@ 0x5c
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd90      	pop	{r4, r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	08021358 	.word	0x08021358
 8018f94:	080216cc 	.word	0x080216cc
 8018f98:	080213ac 	.word	0x080213ac

08018f9c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018f9c:	b590      	push	{r4, r7, lr}
 8018f9e:	b08b      	sub	sp, #44	@ 0x2c
 8018fa0:	af02      	add	r7, sp, #8
 8018fa2:	6078      	str	r0, [r7, #4]
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	61fb      	str	r3, [r7, #28]
 8018fac:	2300      	movs	r3, #0
 8018fae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d106      	bne.n	8018fc8 <tcp_split_unsent_seg+0x2c>
 8018fba:	4b95      	ldr	r3, [pc, #596]	@ (8019210 <tcp_split_unsent_seg+0x274>)
 8018fbc:	f240 324b 	movw	r2, #843	@ 0x34b
 8018fc0:	4994      	ldr	r1, [pc, #592]	@ (8019214 <tcp_split_unsent_seg+0x278>)
 8018fc2:	4895      	ldr	r0, [pc, #596]	@ (8019218 <tcp_split_unsent_seg+0x27c>)
 8018fc4:	f004 fef6 	bl	801ddb4 <iprintf>

  useg = pcb->unsent;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fcc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d102      	bne.n	8018fda <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd8:	e116      	b.n	8019208 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018fda:	887b      	ldrh	r3, [r7, #2]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d109      	bne.n	8018ff4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8019210 <tcp_split_unsent_seg+0x274>)
 8018fe2:	f240 3253 	movw	r2, #851	@ 0x353
 8018fe6:	498d      	ldr	r1, [pc, #564]	@ (801921c <tcp_split_unsent_seg+0x280>)
 8018fe8:	488b      	ldr	r0, [pc, #556]	@ (8019218 <tcp_split_unsent_seg+0x27c>)
 8018fea:	f004 fee3 	bl	801ddb4 <iprintf>
    return ERR_VAL;
 8018fee:	f06f 0305 	mvn.w	r3, #5
 8018ff2:	e109      	b.n	8019208 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018ff4:	697b      	ldr	r3, [r7, #20]
 8018ff6:	891b      	ldrh	r3, [r3, #8]
 8018ff8:	887a      	ldrh	r2, [r7, #2]
 8018ffa:	429a      	cmp	r2, r3
 8018ffc:	d301      	bcc.n	8019002 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018ffe:	2300      	movs	r3, #0
 8019000:	e102      	b.n	8019208 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019006:	887a      	ldrh	r2, [r7, #2]
 8019008:	429a      	cmp	r2, r3
 801900a:	d906      	bls.n	801901a <tcp_split_unsent_seg+0x7e>
 801900c:	4b80      	ldr	r3, [pc, #512]	@ (8019210 <tcp_split_unsent_seg+0x274>)
 801900e:	f240 325b 	movw	r2, #859	@ 0x35b
 8019012:	4983      	ldr	r1, [pc, #524]	@ (8019220 <tcp_split_unsent_seg+0x284>)
 8019014:	4880      	ldr	r0, [pc, #512]	@ (8019218 <tcp_split_unsent_seg+0x27c>)
 8019016:	f004 fecd 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801901a:	697b      	ldr	r3, [r7, #20]
 801901c:	891b      	ldrh	r3, [r3, #8]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d106      	bne.n	8019030 <tcp_split_unsent_seg+0x94>
 8019022:	4b7b      	ldr	r3, [pc, #492]	@ (8019210 <tcp_split_unsent_seg+0x274>)
 8019024:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019028:	497e      	ldr	r1, [pc, #504]	@ (8019224 <tcp_split_unsent_seg+0x288>)
 801902a:	487b      	ldr	r0, [pc, #492]	@ (8019218 <tcp_split_unsent_seg+0x27c>)
 801902c:	f004 fec2 	bl	801ddb4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	7a9b      	ldrb	r3, [r3, #10]
 8019034:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019036:	7bfb      	ldrb	r3, [r7, #15]
 8019038:	009b      	lsls	r3, r3, #2
 801903a:	b2db      	uxtb	r3, r3
 801903c:	f003 0304 	and.w	r3, r3, #4
 8019040:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	891a      	ldrh	r2, [r3, #8]
 8019046:	887b      	ldrh	r3, [r7, #2]
 8019048:	1ad3      	subs	r3, r2, r3
 801904a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801904c:	7bbb      	ldrb	r3, [r7, #14]
 801904e:	b29a      	uxth	r2, r3
 8019050:	89bb      	ldrh	r3, [r7, #12]
 8019052:	4413      	add	r3, r2
 8019054:	b29b      	uxth	r3, r3
 8019056:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801905a:	4619      	mov	r1, r3
 801905c:	2036      	movs	r0, #54	@ 0x36
 801905e:	f7fa fb4d 	bl	80136fc <pbuf_alloc>
 8019062:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	2b00      	cmp	r3, #0
 8019068:	f000 80b7 	beq.w	80191da <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801906c:	697b      	ldr	r3, [r7, #20]
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	891a      	ldrh	r2, [r3, #8]
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	891b      	ldrh	r3, [r3, #8]
 8019076:	1ad3      	subs	r3, r2, r3
 8019078:	b29a      	uxth	r2, r3
 801907a:	887b      	ldrh	r3, [r7, #2]
 801907c:	4413      	add	r3, r2
 801907e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	6858      	ldr	r0, [r3, #4]
 8019084:	693b      	ldr	r3, [r7, #16]
 8019086:	685a      	ldr	r2, [r3, #4]
 8019088:	7bbb      	ldrb	r3, [r7, #14]
 801908a:	18d1      	adds	r1, r2, r3
 801908c:	897b      	ldrh	r3, [r7, #10]
 801908e:	89ba      	ldrh	r2, [r7, #12]
 8019090:	f7fb f854 	bl	801413c <pbuf_copy_partial>
 8019094:	4603      	mov	r3, r0
 8019096:	461a      	mov	r2, r3
 8019098:	89bb      	ldrh	r3, [r7, #12]
 801909a:	4293      	cmp	r3, r2
 801909c:	f040 809f 	bne.w	80191de <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80190a0:	697b      	ldr	r3, [r7, #20]
 80190a2:	68db      	ldr	r3, [r3, #12]
 80190a4:	899b      	ldrh	r3, [r3, #12]
 80190a6:	b29b      	uxth	r3, r3
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7f9 f951 	bl	8012350 <lwip_htons>
 80190ae:	4603      	mov	r3, r0
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80190b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80190b8:	2300      	movs	r3, #0
 80190ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80190bc:	7efb      	ldrb	r3, [r7, #27]
 80190be:	f003 0308 	and.w	r3, r3, #8
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d007      	beq.n	80190d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80190c6:	7efb      	ldrb	r3, [r7, #27]
 80190c8:	f023 0308 	bic.w	r3, r3, #8
 80190cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80190ce:	7ebb      	ldrb	r3, [r7, #26]
 80190d0:	f043 0308 	orr.w	r3, r3, #8
 80190d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80190d6:	7efb      	ldrb	r3, [r7, #27]
 80190d8:	f003 0301 	and.w	r3, r3, #1
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d007      	beq.n	80190f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80190e0:	7efb      	ldrb	r3, [r7, #27]
 80190e2:	f023 0301 	bic.w	r3, r3, #1
 80190e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80190e8:	7ebb      	ldrb	r3, [r7, #26]
 80190ea:	f043 0301 	orr.w	r3, r3, #1
 80190ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80190f0:	697b      	ldr	r3, [r7, #20]
 80190f2:	68db      	ldr	r3, [r3, #12]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7f9 f93f 	bl	801237a <lwip_htonl>
 80190fc:	4602      	mov	r2, r0
 80190fe:	887b      	ldrh	r3, [r7, #2]
 8019100:	18d1      	adds	r1, r2, r3
 8019102:	7eba      	ldrb	r2, [r7, #26]
 8019104:	7bfb      	ldrb	r3, [r7, #15]
 8019106:	9300      	str	r3, [sp, #0]
 8019108:	460b      	mov	r3, r1
 801910a:	6939      	ldr	r1, [r7, #16]
 801910c:	6878      	ldr	r0, [r7, #4]
 801910e:	f7ff fa51 	bl	80185b4 <tcp_create_segment>
 8019112:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019114:	69fb      	ldr	r3, [r7, #28]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d063      	beq.n	80191e2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801911a:	697b      	ldr	r3, [r7, #20]
 801911c:	685b      	ldr	r3, [r3, #4]
 801911e:	4618      	mov	r0, r3
 8019120:	f7fa fe94 	bl	8013e4c <pbuf_clen>
 8019124:	4603      	mov	r3, r0
 8019126:	461a      	mov	r2, r3
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801912e:	1a9b      	subs	r3, r3, r2
 8019130:	b29a      	uxth	r2, r3
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	6858      	ldr	r0, [r3, #4]
 801913c:	697b      	ldr	r3, [r7, #20]
 801913e:	685b      	ldr	r3, [r3, #4]
 8019140:	891a      	ldrh	r2, [r3, #8]
 8019142:	89bb      	ldrh	r3, [r7, #12]
 8019144:	1ad3      	subs	r3, r2, r3
 8019146:	b29b      	uxth	r3, r3
 8019148:	4619      	mov	r1, r3
 801914a:	f7fa fc39 	bl	80139c0 <pbuf_realloc>
  useg->len -= remainder;
 801914e:	697b      	ldr	r3, [r7, #20]
 8019150:	891a      	ldrh	r2, [r3, #8]
 8019152:	89bb      	ldrh	r3, [r7, #12]
 8019154:	1ad3      	subs	r3, r2, r3
 8019156:	b29a      	uxth	r2, r3
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	68db      	ldr	r3, [r3, #12]
 8019160:	899b      	ldrh	r3, [r3, #12]
 8019162:	b29c      	uxth	r4, r3
 8019164:	7efb      	ldrb	r3, [r7, #27]
 8019166:	b29b      	uxth	r3, r3
 8019168:	4618      	mov	r0, r3
 801916a:	f7f9 f8f1 	bl	8012350 <lwip_htons>
 801916e:	4603      	mov	r3, r0
 8019170:	461a      	mov	r2, r3
 8019172:	697b      	ldr	r3, [r7, #20]
 8019174:	68db      	ldr	r3, [r3, #12]
 8019176:	4322      	orrs	r2, r4
 8019178:	b292      	uxth	r2, r2
 801917a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801917c:	697b      	ldr	r3, [r7, #20]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	4618      	mov	r0, r3
 8019182:	f7fa fe63 	bl	8013e4c <pbuf_clen>
 8019186:	4603      	mov	r3, r0
 8019188:	461a      	mov	r2, r3
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019190:	4413      	add	r3, r2
 8019192:	b29a      	uxth	r2, r3
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801919a:	69fb      	ldr	r3, [r7, #28]
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	4618      	mov	r0, r3
 80191a0:	f7fa fe54 	bl	8013e4c <pbuf_clen>
 80191a4:	4603      	mov	r3, r0
 80191a6:	461a      	mov	r2, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80191ae:	4413      	add	r3, r2
 80191b0:	b29a      	uxth	r2, r3
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	681a      	ldr	r2, [r3, #0]
 80191bc:	69fb      	ldr	r3, [r7, #28]
 80191be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80191c0:	697b      	ldr	r3, [r7, #20]
 80191c2:	69fa      	ldr	r2, [r7, #28]
 80191c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80191c6:	69fb      	ldr	r3, [r7, #28]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d103      	bne.n	80191d6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	2200      	movs	r2, #0
 80191d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80191d6:	2300      	movs	r3, #0
 80191d8:	e016      	b.n	8019208 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80191da:	bf00      	nop
 80191dc:	e002      	b.n	80191e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80191de:	bf00      	nop
 80191e0:	e000      	b.n	80191e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80191e2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80191e4:	69fb      	ldr	r3, [r7, #28]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d006      	beq.n	80191f8 <tcp_split_unsent_seg+0x25c>
 80191ea:	4b09      	ldr	r3, [pc, #36]	@ (8019210 <tcp_split_unsent_seg+0x274>)
 80191ec:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80191f0:	490d      	ldr	r1, [pc, #52]	@ (8019228 <tcp_split_unsent_seg+0x28c>)
 80191f2:	4809      	ldr	r0, [pc, #36]	@ (8019218 <tcp_split_unsent_seg+0x27c>)
 80191f4:	f004 fdde 	bl	801ddb4 <iprintf>
  if (p != NULL) {
 80191f8:	693b      	ldr	r3, [r7, #16]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d002      	beq.n	8019204 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80191fe:	6938      	ldr	r0, [r7, #16]
 8019200:	f7fa fd96 	bl	8013d30 <pbuf_free>
  }

  return ERR_MEM;
 8019204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019208:	4618      	mov	r0, r3
 801920a:	3724      	adds	r7, #36	@ 0x24
 801920c:	46bd      	mov	sp, r7
 801920e:	bd90      	pop	{r4, r7, pc}
 8019210:	08021358 	.word	0x08021358
 8019214:	080216ec 	.word	0x080216ec
 8019218:	080213ac 	.word	0x080213ac
 801921c:	08021710 	.word	0x08021710
 8019220:	08021734 	.word	0x08021734
 8019224:	08021744 	.word	0x08021744
 8019228:	08021754 	.word	0x08021754

0801922c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801922c:	b590      	push	{r4, r7, lr}
 801922e:	b085      	sub	sp, #20
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d106      	bne.n	8019248 <tcp_send_fin+0x1c>
 801923a:	4b21      	ldr	r3, [pc, #132]	@ (80192c0 <tcp_send_fin+0x94>)
 801923c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8019240:	4920      	ldr	r1, [pc, #128]	@ (80192c4 <tcp_send_fin+0x98>)
 8019242:	4821      	ldr	r0, [pc, #132]	@ (80192c8 <tcp_send_fin+0x9c>)
 8019244:	f004 fdb6 	bl	801ddb4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801924c:	2b00      	cmp	r3, #0
 801924e:	d02e      	beq.n	80192ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019254:	60fb      	str	r3, [r7, #12]
 8019256:	e002      	b.n	801925e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	681b      	ldr	r3, [r3, #0]
 801925c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d1f8      	bne.n	8019258 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	68db      	ldr	r3, [r3, #12]
 801926a:	899b      	ldrh	r3, [r3, #12]
 801926c:	b29b      	uxth	r3, r3
 801926e:	4618      	mov	r0, r3
 8019270:	f7f9 f86e 	bl	8012350 <lwip_htons>
 8019274:	4603      	mov	r3, r0
 8019276:	b2db      	uxtb	r3, r3
 8019278:	f003 0307 	and.w	r3, r3, #7
 801927c:	2b00      	cmp	r3, #0
 801927e:	d116      	bne.n	80192ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	68db      	ldr	r3, [r3, #12]
 8019284:	899b      	ldrh	r3, [r3, #12]
 8019286:	b29c      	uxth	r4, r3
 8019288:	2001      	movs	r0, #1
 801928a:	f7f9 f861 	bl	8012350 <lwip_htons>
 801928e:	4603      	mov	r3, r0
 8019290:	461a      	mov	r2, r3
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	68db      	ldr	r3, [r3, #12]
 8019296:	4322      	orrs	r2, r4
 8019298:	b292      	uxth	r2, r2
 801929a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	8b5b      	ldrh	r3, [r3, #26]
 80192a0:	f043 0320 	orr.w	r3, r3, #32
 80192a4:	b29a      	uxth	r2, r3
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80192aa:	2300      	movs	r3, #0
 80192ac:	e004      	b.n	80192b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80192ae:	2101      	movs	r1, #1
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f000 f80b 	bl	80192cc <tcp_enqueue_flags>
 80192b6:	4603      	mov	r3, r0
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	3714      	adds	r7, #20
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd90      	pop	{r4, r7, pc}
 80192c0:	08021358 	.word	0x08021358
 80192c4:	08021760 	.word	0x08021760
 80192c8:	080213ac 	.word	0x080213ac

080192cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b08a      	sub	sp, #40	@ 0x28
 80192d0:	af02      	add	r7, sp, #8
 80192d2:	6078      	str	r0, [r7, #4]
 80192d4:	460b      	mov	r3, r1
 80192d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80192d8:	2300      	movs	r3, #0
 80192da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80192dc:	2300      	movs	r3, #0
 80192de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80192e0:	78fb      	ldrb	r3, [r7, #3]
 80192e2:	f003 0303 	and.w	r3, r3, #3
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d106      	bne.n	80192f8 <tcp_enqueue_flags+0x2c>
 80192ea:	4b67      	ldr	r3, [pc, #412]	@ (8019488 <tcp_enqueue_flags+0x1bc>)
 80192ec:	f240 4211 	movw	r2, #1041	@ 0x411
 80192f0:	4966      	ldr	r1, [pc, #408]	@ (801948c <tcp_enqueue_flags+0x1c0>)
 80192f2:	4867      	ldr	r0, [pc, #412]	@ (8019490 <tcp_enqueue_flags+0x1c4>)
 80192f4:	f004 fd5e 	bl	801ddb4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d106      	bne.n	801930c <tcp_enqueue_flags+0x40>
 80192fe:	4b62      	ldr	r3, [pc, #392]	@ (8019488 <tcp_enqueue_flags+0x1bc>)
 8019300:	f240 4213 	movw	r2, #1043	@ 0x413
 8019304:	4963      	ldr	r1, [pc, #396]	@ (8019494 <tcp_enqueue_flags+0x1c8>)
 8019306:	4862      	ldr	r0, [pc, #392]	@ (8019490 <tcp_enqueue_flags+0x1c4>)
 8019308:	f004 fd54 	bl	801ddb4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801930c:	78fb      	ldrb	r3, [r7, #3]
 801930e:	f003 0302 	and.w	r3, r3, #2
 8019312:	2b00      	cmp	r3, #0
 8019314:	d001      	beq.n	801931a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019316:	2301      	movs	r3, #1
 8019318:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801931a:	7ffb      	ldrb	r3, [r7, #31]
 801931c:	009b      	lsls	r3, r3, #2
 801931e:	b2db      	uxtb	r3, r3
 8019320:	f003 0304 	and.w	r3, r3, #4
 8019324:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019326:	7dfb      	ldrb	r3, [r7, #23]
 8019328:	b29b      	uxth	r3, r3
 801932a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801932e:	4619      	mov	r1, r3
 8019330:	2036      	movs	r0, #54	@ 0x36
 8019332:	f7fa f9e3 	bl	80136fc <pbuf_alloc>
 8019336:	6138      	str	r0, [r7, #16]
 8019338:	693b      	ldr	r3, [r7, #16]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d109      	bne.n	8019352 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	8b5b      	ldrh	r3, [r3, #26]
 8019342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019346:	b29a      	uxth	r2, r3
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801934c:	f04f 33ff 	mov.w	r3, #4294967295
 8019350:	e095      	b.n	801947e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019352:	693b      	ldr	r3, [r7, #16]
 8019354:	895a      	ldrh	r2, [r3, #10]
 8019356:	7dfb      	ldrb	r3, [r7, #23]
 8019358:	b29b      	uxth	r3, r3
 801935a:	429a      	cmp	r2, r3
 801935c:	d206      	bcs.n	801936c <tcp_enqueue_flags+0xa0>
 801935e:	4b4a      	ldr	r3, [pc, #296]	@ (8019488 <tcp_enqueue_flags+0x1bc>)
 8019360:	f240 4239 	movw	r2, #1081	@ 0x439
 8019364:	494c      	ldr	r1, [pc, #304]	@ (8019498 <tcp_enqueue_flags+0x1cc>)
 8019366:	484a      	ldr	r0, [pc, #296]	@ (8019490 <tcp_enqueue_flags+0x1c4>)
 8019368:	f004 fd24 	bl	801ddb4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019370:	78fa      	ldrb	r2, [r7, #3]
 8019372:	7ffb      	ldrb	r3, [r7, #31]
 8019374:	9300      	str	r3, [sp, #0]
 8019376:	460b      	mov	r3, r1
 8019378:	6939      	ldr	r1, [r7, #16]
 801937a:	6878      	ldr	r0, [r7, #4]
 801937c:	f7ff f91a 	bl	80185b4 <tcp_create_segment>
 8019380:	60f8      	str	r0, [r7, #12]
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d109      	bne.n	801939c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	8b5b      	ldrh	r3, [r3, #26]
 801938c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019390:	b29a      	uxth	r2, r3
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019396:	f04f 33ff 	mov.w	r3, #4294967295
 801939a:	e070      	b.n	801947e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	68db      	ldr	r3, [r3, #12]
 80193a0:	f003 0303 	and.w	r3, r3, #3
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d006      	beq.n	80193b6 <tcp_enqueue_flags+0xea>
 80193a8:	4b37      	ldr	r3, [pc, #220]	@ (8019488 <tcp_enqueue_flags+0x1bc>)
 80193aa:	f240 4242 	movw	r2, #1090	@ 0x442
 80193ae:	493b      	ldr	r1, [pc, #236]	@ (801949c <tcp_enqueue_flags+0x1d0>)
 80193b0:	4837      	ldr	r0, [pc, #220]	@ (8019490 <tcp_enqueue_flags+0x1c4>)
 80193b2:	f004 fcff 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	891b      	ldrh	r3, [r3, #8]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d006      	beq.n	80193cc <tcp_enqueue_flags+0x100>
 80193be:	4b32      	ldr	r3, [pc, #200]	@ (8019488 <tcp_enqueue_flags+0x1bc>)
 80193c0:	f240 4243 	movw	r2, #1091	@ 0x443
 80193c4:	4936      	ldr	r1, [pc, #216]	@ (80194a0 <tcp_enqueue_flags+0x1d4>)
 80193c6:	4832      	ldr	r0, [pc, #200]	@ (8019490 <tcp_enqueue_flags+0x1c4>)
 80193c8:	f004 fcf4 	bl	801ddb4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d103      	bne.n	80193dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	68fa      	ldr	r2, [r7, #12]
 80193d8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80193da:	e00d      	b.n	80193f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193e0:	61bb      	str	r3, [r7, #24]
 80193e2:	e002      	b.n	80193ea <tcp_enqueue_flags+0x11e>
 80193e4:	69bb      	ldr	r3, [r7, #24]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	61bb      	str	r3, [r7, #24]
 80193ea:	69bb      	ldr	r3, [r7, #24]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d1f8      	bne.n	80193e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80193f2:	69bb      	ldr	r3, [r7, #24]
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	2200      	movs	r2, #0
 80193fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019400:	78fb      	ldrb	r3, [r7, #3]
 8019402:	f003 0302 	and.w	r3, r3, #2
 8019406:	2b00      	cmp	r3, #0
 8019408:	d104      	bne.n	8019414 <tcp_enqueue_flags+0x148>
 801940a:	78fb      	ldrb	r3, [r7, #3]
 801940c:	f003 0301 	and.w	r3, r3, #1
 8019410:	2b00      	cmp	r3, #0
 8019412:	d004      	beq.n	801941e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019418:	1c5a      	adds	r2, r3, #1
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801941e:	78fb      	ldrb	r3, [r7, #3]
 8019420:	f003 0301 	and.w	r3, r3, #1
 8019424:	2b00      	cmp	r3, #0
 8019426:	d006      	beq.n	8019436 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	8b5b      	ldrh	r3, [r3, #26]
 801942c:	f043 0320 	orr.w	r3, r3, #32
 8019430:	b29a      	uxth	r2, r3
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	685b      	ldr	r3, [r3, #4]
 801943a:	4618      	mov	r0, r3
 801943c:	f7fa fd06 	bl	8013e4c <pbuf_clen>
 8019440:	4603      	mov	r3, r0
 8019442:	461a      	mov	r2, r3
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801944a:	4413      	add	r3, r2
 801944c:	b29a      	uxth	r2, r3
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801945a:	2b00      	cmp	r3, #0
 801945c:	d00e      	beq.n	801947c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019462:	2b00      	cmp	r3, #0
 8019464:	d10a      	bne.n	801947c <tcp_enqueue_flags+0x1b0>
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801946a:	2b00      	cmp	r3, #0
 801946c:	d106      	bne.n	801947c <tcp_enqueue_flags+0x1b0>
 801946e:	4b06      	ldr	r3, [pc, #24]	@ (8019488 <tcp_enqueue_flags+0x1bc>)
 8019470:	f240 4265 	movw	r2, #1125	@ 0x465
 8019474:	490b      	ldr	r1, [pc, #44]	@ (80194a4 <tcp_enqueue_flags+0x1d8>)
 8019476:	4806      	ldr	r0, [pc, #24]	@ (8019490 <tcp_enqueue_flags+0x1c4>)
 8019478:	f004 fc9c 	bl	801ddb4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801947c:	2300      	movs	r3, #0
}
 801947e:	4618      	mov	r0, r3
 8019480:	3720      	adds	r7, #32
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
 8019486:	bf00      	nop
 8019488:	08021358 	.word	0x08021358
 801948c:	0802177c 	.word	0x0802177c
 8019490:	080213ac 	.word	0x080213ac
 8019494:	080217d4 	.word	0x080217d4
 8019498:	080217f4 	.word	0x080217f4
 801949c:	08021830 	.word	0x08021830
 80194a0:	08021848 	.word	0x08021848
 80194a4:	08021874 	.word	0x08021874

080194a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80194a8:	b5b0      	push	{r4, r5, r7, lr}
 80194aa:	b08a      	sub	sp, #40	@ 0x28
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d106      	bne.n	80194c4 <tcp_output+0x1c>
 80194b6:	4b8a      	ldr	r3, [pc, #552]	@ (80196e0 <tcp_output+0x238>)
 80194b8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80194bc:	4989      	ldr	r1, [pc, #548]	@ (80196e4 <tcp_output+0x23c>)
 80194be:	488a      	ldr	r0, [pc, #552]	@ (80196e8 <tcp_output+0x240>)
 80194c0:	f004 fc78 	bl	801ddb4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	7d1b      	ldrb	r3, [r3, #20]
 80194c8:	2b01      	cmp	r3, #1
 80194ca:	d106      	bne.n	80194da <tcp_output+0x32>
 80194cc:	4b84      	ldr	r3, [pc, #528]	@ (80196e0 <tcp_output+0x238>)
 80194ce:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80194d2:	4986      	ldr	r1, [pc, #536]	@ (80196ec <tcp_output+0x244>)
 80194d4:	4884      	ldr	r0, [pc, #528]	@ (80196e8 <tcp_output+0x240>)
 80194d6:	f004 fc6d 	bl	801ddb4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80194da:	4b85      	ldr	r3, [pc, #532]	@ (80196f0 <tcp_output+0x248>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	687a      	ldr	r2, [r7, #4]
 80194e0:	429a      	cmp	r2, r3
 80194e2:	d101      	bne.n	80194e8 <tcp_output+0x40>
    return ERR_OK;
 80194e4:	2300      	movs	r3, #0
 80194e6:	e1ce      	b.n	8019886 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80194f4:	4293      	cmp	r3, r2
 80194f6:	bf28      	it	cs
 80194f8:	4613      	movcs	r3, r2
 80194fa:	b29b      	uxth	r3, r3
 80194fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019502:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8019504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019506:	2b00      	cmp	r3, #0
 8019508:	d10b      	bne.n	8019522 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	8b5b      	ldrh	r3, [r3, #26]
 801950e:	f003 0302 	and.w	r3, r3, #2
 8019512:	2b00      	cmp	r3, #0
 8019514:	f000 81aa 	beq.w	801986c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f000 fdcb 	bl	801a0b4 <tcp_send_empty_ack>
 801951e:	4603      	mov	r3, r0
 8019520:	e1b1      	b.n	8019886 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019522:	6879      	ldr	r1, [r7, #4]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	3304      	adds	r3, #4
 8019528:	461a      	mov	r2, r3
 801952a:	6878      	ldr	r0, [r7, #4]
 801952c:	f7ff f826 	bl	801857c <tcp_route>
 8019530:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019532:	697b      	ldr	r3, [r7, #20]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d102      	bne.n	801953e <tcp_output+0x96>
    return ERR_RTE;
 8019538:	f06f 0303 	mvn.w	r3, #3
 801953c:	e1a3      	b.n	8019886 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d003      	beq.n	801954c <tcp_output+0xa4>
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d111      	bne.n	8019570 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d002      	beq.n	8019558 <tcp_output+0xb0>
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	3304      	adds	r3, #4
 8019556:	e000      	b.n	801955a <tcp_output+0xb2>
 8019558:	2300      	movs	r3, #0
 801955a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801955c:	693b      	ldr	r3, [r7, #16]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d102      	bne.n	8019568 <tcp_output+0xc0>
      return ERR_RTE;
 8019562:	f06f 0303 	mvn.w	r3, #3
 8019566:	e18e      	b.n	8019886 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019568:	693b      	ldr	r3, [r7, #16]
 801956a:	681a      	ldr	r2, [r3, #0]
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019572:	68db      	ldr	r3, [r3, #12]
 8019574:	685b      	ldr	r3, [r3, #4]
 8019576:	4618      	mov	r0, r3
 8019578:	f7f8 feff 	bl	801237a <lwip_htonl>
 801957c:	4602      	mov	r2, r0
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019582:	1ad3      	subs	r3, r2, r3
 8019584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019586:	8912      	ldrh	r2, [r2, #8]
 8019588:	4413      	add	r3, r2
 801958a:	69ba      	ldr	r2, [r7, #24]
 801958c:	429a      	cmp	r2, r3
 801958e:	d227      	bcs.n	80195e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019596:	461a      	mov	r2, r3
 8019598:	69bb      	ldr	r3, [r7, #24]
 801959a:	4293      	cmp	r3, r2
 801959c:	d114      	bne.n	80195c8 <tcp_output+0x120>
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d110      	bne.n	80195c8 <tcp_output+0x120>
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d10b      	bne.n	80195c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	2200      	movs	r2, #0
 80195b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2201      	movs	r2, #1
 80195bc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	2200      	movs	r2, #0
 80195c4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	8b5b      	ldrh	r3, [r3, #26]
 80195cc:	f003 0302 	and.w	r3, r3, #2
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	f000 814d 	beq.w	8019870 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f000 fd6c 	bl	801a0b4 <tcp_send_empty_ack>
 80195dc:	4603      	mov	r3, r0
 80195de:	e152      	b.n	8019886 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	2200      	movs	r2, #0
 80195e4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80195ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80195ee:	6a3b      	ldr	r3, [r7, #32]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	f000 811c 	beq.w	801982e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80195f6:	e002      	b.n	80195fe <tcp_output+0x156>
 80195f8:	6a3b      	ldr	r3, [r7, #32]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	623b      	str	r3, [r7, #32]
 80195fe:	6a3b      	ldr	r3, [r7, #32]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d1f8      	bne.n	80195f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019606:	e112      	b.n	801982e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801960a:	68db      	ldr	r3, [r3, #12]
 801960c:	899b      	ldrh	r3, [r3, #12]
 801960e:	b29b      	uxth	r3, r3
 8019610:	4618      	mov	r0, r3
 8019612:	f7f8 fe9d 	bl	8012350 <lwip_htons>
 8019616:	4603      	mov	r3, r0
 8019618:	b2db      	uxtb	r3, r3
 801961a:	f003 0304 	and.w	r3, r3, #4
 801961e:	2b00      	cmp	r3, #0
 8019620:	d006      	beq.n	8019630 <tcp_output+0x188>
 8019622:	4b2f      	ldr	r3, [pc, #188]	@ (80196e0 <tcp_output+0x238>)
 8019624:	f240 5236 	movw	r2, #1334	@ 0x536
 8019628:	4932      	ldr	r1, [pc, #200]	@ (80196f4 <tcp_output+0x24c>)
 801962a:	482f      	ldr	r0, [pc, #188]	@ (80196e8 <tcp_output+0x240>)
 801962c:	f004 fbc2 	bl	801ddb4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019634:	2b00      	cmp	r3, #0
 8019636:	d01f      	beq.n	8019678 <tcp_output+0x1d0>
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	8b5b      	ldrh	r3, [r3, #26]
 801963c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8019640:	2b00      	cmp	r3, #0
 8019642:	d119      	bne.n	8019678 <tcp_output+0x1d0>
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019648:	2b00      	cmp	r3, #0
 801964a:	d00b      	beq.n	8019664 <tcp_output+0x1bc>
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d110      	bne.n	8019678 <tcp_output+0x1d0>
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801965a:	891a      	ldrh	r2, [r3, #8]
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019660:	429a      	cmp	r2, r3
 8019662:	d209      	bcs.n	8019678 <tcp_output+0x1d0>
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801966a:	2b00      	cmp	r3, #0
 801966c:	d004      	beq.n	8019678 <tcp_output+0x1d0>
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019674:	2b0f      	cmp	r3, #15
 8019676:	d901      	bls.n	801967c <tcp_output+0x1d4>
 8019678:	2301      	movs	r3, #1
 801967a:	e000      	b.n	801967e <tcp_output+0x1d6>
 801967c:	2300      	movs	r3, #0
 801967e:	2b00      	cmp	r3, #0
 8019680:	d106      	bne.n	8019690 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	8b5b      	ldrh	r3, [r3, #26]
 8019686:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801968a:	2b00      	cmp	r3, #0
 801968c:	f000 80e4 	beq.w	8019858 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	7d1b      	ldrb	r3, [r3, #20]
 8019694:	2b02      	cmp	r3, #2
 8019696:	d00d      	beq.n	80196b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801969a:	68db      	ldr	r3, [r3, #12]
 801969c:	899b      	ldrh	r3, [r3, #12]
 801969e:	b29c      	uxth	r4, r3
 80196a0:	2010      	movs	r0, #16
 80196a2:	f7f8 fe55 	bl	8012350 <lwip_htons>
 80196a6:	4603      	mov	r3, r0
 80196a8:	461a      	mov	r2, r3
 80196aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196ac:	68db      	ldr	r3, [r3, #12]
 80196ae:	4322      	orrs	r2, r4
 80196b0:	b292      	uxth	r2, r2
 80196b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80196b4:	697a      	ldr	r2, [r7, #20]
 80196b6:	6879      	ldr	r1, [r7, #4]
 80196b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80196ba:	f000 f909 	bl	80198d0 <tcp_output_segment>
 80196be:	4603      	mov	r3, r0
 80196c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80196c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d016      	beq.n	80196f8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	8b5b      	ldrh	r3, [r3, #26]
 80196ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	835a      	strh	r2, [r3, #26]
      return err;
 80196d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196dc:	e0d3      	b.n	8019886 <tcp_output+0x3de>
 80196de:	bf00      	nop
 80196e0:	08021358 	.word	0x08021358
 80196e4:	0802189c 	.word	0x0802189c
 80196e8:	080213ac 	.word	0x080213ac
 80196ec:	080218b4 	.word	0x080218b4
 80196f0:	24016e58 	.word	0x24016e58
 80196f4:	080218dc 	.word	0x080218dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80196f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196fa:	681a      	ldr	r2, [r3, #0]
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	7d1b      	ldrb	r3, [r3, #20]
 8019704:	2b02      	cmp	r3, #2
 8019706:	d006      	beq.n	8019716 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	8b5b      	ldrh	r3, [r3, #26]
 801970c:	f023 0303 	bic.w	r3, r3, #3
 8019710:	b29a      	uxth	r2, r3
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019718:	68db      	ldr	r3, [r3, #12]
 801971a:	685b      	ldr	r3, [r3, #4]
 801971c:	4618      	mov	r0, r3
 801971e:	f7f8 fe2c 	bl	801237a <lwip_htonl>
 8019722:	4604      	mov	r4, r0
 8019724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019726:	891b      	ldrh	r3, [r3, #8]
 8019728:	461d      	mov	r5, r3
 801972a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801972c:	68db      	ldr	r3, [r3, #12]
 801972e:	899b      	ldrh	r3, [r3, #12]
 8019730:	b29b      	uxth	r3, r3
 8019732:	4618      	mov	r0, r3
 8019734:	f7f8 fe0c 	bl	8012350 <lwip_htons>
 8019738:	4603      	mov	r3, r0
 801973a:	b2db      	uxtb	r3, r3
 801973c:	f003 0303 	and.w	r3, r3, #3
 8019740:	2b00      	cmp	r3, #0
 8019742:	d001      	beq.n	8019748 <tcp_output+0x2a0>
 8019744:	2301      	movs	r3, #1
 8019746:	e000      	b.n	801974a <tcp_output+0x2a2>
 8019748:	2300      	movs	r3, #0
 801974a:	442b      	add	r3, r5
 801974c:	4423      	add	r3, r4
 801974e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019754:	68bb      	ldr	r3, [r7, #8]
 8019756:	1ad3      	subs	r3, r2, r3
 8019758:	2b00      	cmp	r3, #0
 801975a:	da02      	bge.n	8019762 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	68ba      	ldr	r2, [r7, #8]
 8019760:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019764:	891b      	ldrh	r3, [r3, #8]
 8019766:	461c      	mov	r4, r3
 8019768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801976a:	68db      	ldr	r3, [r3, #12]
 801976c:	899b      	ldrh	r3, [r3, #12]
 801976e:	b29b      	uxth	r3, r3
 8019770:	4618      	mov	r0, r3
 8019772:	f7f8 fded 	bl	8012350 <lwip_htons>
 8019776:	4603      	mov	r3, r0
 8019778:	b2db      	uxtb	r3, r3
 801977a:	f003 0303 	and.w	r3, r3, #3
 801977e:	2b00      	cmp	r3, #0
 8019780:	d001      	beq.n	8019786 <tcp_output+0x2de>
 8019782:	2301      	movs	r3, #1
 8019784:	e000      	b.n	8019788 <tcp_output+0x2e0>
 8019786:	2300      	movs	r3, #0
 8019788:	4423      	add	r3, r4
 801978a:	2b00      	cmp	r3, #0
 801978c:	d049      	beq.n	8019822 <tcp_output+0x37a>
      seg->next = NULL;
 801978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019790:	2200      	movs	r2, #0
 8019792:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019798:	2b00      	cmp	r3, #0
 801979a:	d105      	bne.n	80197a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80197a0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80197a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197a4:	623b      	str	r3, [r7, #32]
 80197a6:	e03f      	b.n	8019828 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80197a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197aa:	68db      	ldr	r3, [r3, #12]
 80197ac:	685b      	ldr	r3, [r3, #4]
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7f8 fde3 	bl	801237a <lwip_htonl>
 80197b4:	4604      	mov	r4, r0
 80197b6:	6a3b      	ldr	r3, [r7, #32]
 80197b8:	68db      	ldr	r3, [r3, #12]
 80197ba:	685b      	ldr	r3, [r3, #4]
 80197bc:	4618      	mov	r0, r3
 80197be:	f7f8 fddc 	bl	801237a <lwip_htonl>
 80197c2:	4603      	mov	r3, r0
 80197c4:	1ae3      	subs	r3, r4, r3
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	da24      	bge.n	8019814 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	3370      	adds	r3, #112	@ 0x70
 80197ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80197d0:	e002      	b.n	80197d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80197d2:	69fb      	ldr	r3, [r7, #28]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80197d8:	69fb      	ldr	r3, [r7, #28]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d011      	beq.n	8019804 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	68db      	ldr	r3, [r3, #12]
 80197e6:	685b      	ldr	r3, [r3, #4]
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7f8 fdc6 	bl	801237a <lwip_htonl>
 80197ee:	4604      	mov	r4, r0
 80197f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197f2:	68db      	ldr	r3, [r3, #12]
 80197f4:	685b      	ldr	r3, [r3, #4]
 80197f6:	4618      	mov	r0, r3
 80197f8:	f7f8 fdbf 	bl	801237a <lwip_htonl>
 80197fc:	4603      	mov	r3, r0
 80197fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019800:	2b00      	cmp	r3, #0
 8019802:	dbe6      	blt.n	80197d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019804:	69fb      	ldr	r3, [r7, #28]
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801980a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801980c:	69fb      	ldr	r3, [r7, #28]
 801980e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019810:	601a      	str	r2, [r3, #0]
 8019812:	e009      	b.n	8019828 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019814:	6a3b      	ldr	r3, [r7, #32]
 8019816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019818:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801981a:	6a3b      	ldr	r3, [r7, #32]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	623b      	str	r3, [r7, #32]
 8019820:	e002      	b.n	8019828 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019822:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019824:	f7fb ff1d 	bl	8015662 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801982c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019830:	2b00      	cmp	r3, #0
 8019832:	d012      	beq.n	801985a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	4618      	mov	r0, r3
 801983c:	f7f8 fd9d 	bl	801237a <lwip_htonl>
 8019840:	4602      	mov	r2, r0
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019846:	1ad3      	subs	r3, r2, r3
 8019848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801984a:	8912      	ldrh	r2, [r2, #8]
 801984c:	4413      	add	r3, r2
  while (seg != NULL &&
 801984e:	69ba      	ldr	r2, [r7, #24]
 8019850:	429a      	cmp	r2, r3
 8019852:	f4bf aed9 	bcs.w	8019608 <tcp_output+0x160>
 8019856:	e000      	b.n	801985a <tcp_output+0x3b2>
      break;
 8019858:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801985e:	2b00      	cmp	r3, #0
 8019860:	d108      	bne.n	8019874 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	2200      	movs	r2, #0
 8019866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801986a:	e004      	b.n	8019876 <tcp_output+0x3ce>
    goto output_done;
 801986c:	bf00      	nop
 801986e:	e002      	b.n	8019876 <tcp_output+0x3ce>
    goto output_done;
 8019870:	bf00      	nop
 8019872:	e000      	b.n	8019876 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019874:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	8b5b      	ldrh	r3, [r3, #26]
 801987a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801987e:	b29a      	uxth	r2, r3
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019884:	2300      	movs	r3, #0
}
 8019886:	4618      	mov	r0, r3
 8019888:	3728      	adds	r7, #40	@ 0x28
 801988a:	46bd      	mov	sp, r7
 801988c:	bdb0      	pop	{r4, r5, r7, pc}
 801988e:	bf00      	nop

08019890 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b082      	sub	sp, #8
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d106      	bne.n	80198ac <tcp_output_segment_busy+0x1c>
 801989e:	4b09      	ldr	r3, [pc, #36]	@ (80198c4 <tcp_output_segment_busy+0x34>)
 80198a0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80198a4:	4908      	ldr	r1, [pc, #32]	@ (80198c8 <tcp_output_segment_busy+0x38>)
 80198a6:	4809      	ldr	r0, [pc, #36]	@ (80198cc <tcp_output_segment_busy+0x3c>)
 80198a8:	f004 fa84 	bl	801ddb4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	685b      	ldr	r3, [r3, #4]
 80198b0:	7b9b      	ldrb	r3, [r3, #14]
 80198b2:	2b01      	cmp	r3, #1
 80198b4:	d001      	beq.n	80198ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80198b6:	2301      	movs	r3, #1
 80198b8:	e000      	b.n	80198bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80198ba:	2300      	movs	r3, #0
}
 80198bc:	4618      	mov	r0, r3
 80198be:	3708      	adds	r7, #8
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	08021358 	.word	0x08021358
 80198c8:	080218f4 	.word	0x080218f4
 80198cc:	080213ac 	.word	0x080213ac

080198d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80198d0:	b5b0      	push	{r4, r5, r7, lr}
 80198d2:	b08c      	sub	sp, #48	@ 0x30
 80198d4:	af04      	add	r7, sp, #16
 80198d6:	60f8      	str	r0, [r7, #12]
 80198d8:	60b9      	str	r1, [r7, #8]
 80198da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d106      	bne.n	80198f0 <tcp_output_segment+0x20>
 80198e2:	4b64      	ldr	r3, [pc, #400]	@ (8019a74 <tcp_output_segment+0x1a4>)
 80198e4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80198e8:	4963      	ldr	r1, [pc, #396]	@ (8019a78 <tcp_output_segment+0x1a8>)
 80198ea:	4864      	ldr	r0, [pc, #400]	@ (8019a7c <tcp_output_segment+0x1ac>)
 80198ec:	f004 fa62 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d106      	bne.n	8019904 <tcp_output_segment+0x34>
 80198f6:	4b5f      	ldr	r3, [pc, #380]	@ (8019a74 <tcp_output_segment+0x1a4>)
 80198f8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80198fc:	4960      	ldr	r1, [pc, #384]	@ (8019a80 <tcp_output_segment+0x1b0>)
 80198fe:	485f      	ldr	r0, [pc, #380]	@ (8019a7c <tcp_output_segment+0x1ac>)
 8019900:	f004 fa58 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d106      	bne.n	8019918 <tcp_output_segment+0x48>
 801990a:	4b5a      	ldr	r3, [pc, #360]	@ (8019a74 <tcp_output_segment+0x1a4>)
 801990c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8019910:	495c      	ldr	r1, [pc, #368]	@ (8019a84 <tcp_output_segment+0x1b4>)
 8019912:	485a      	ldr	r0, [pc, #360]	@ (8019a7c <tcp_output_segment+0x1ac>)
 8019914:	f004 fa4e 	bl	801ddb4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019918:	68f8      	ldr	r0, [r7, #12]
 801991a:	f7ff ffb9 	bl	8019890 <tcp_output_segment_busy>
 801991e:	4603      	mov	r3, r0
 8019920:	2b00      	cmp	r3, #0
 8019922:	d001      	beq.n	8019928 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019924:	2300      	movs	r3, #0
 8019926:	e0a1      	b.n	8019a6c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	68dc      	ldr	r4, [r3, #12]
 8019930:	4610      	mov	r0, r2
 8019932:	f7f8 fd22 	bl	801237a <lwip_htonl>
 8019936:	4603      	mov	r3, r0
 8019938:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801993a:	68bb      	ldr	r3, [r7, #8]
 801993c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	68dc      	ldr	r4, [r3, #12]
 8019942:	4610      	mov	r0, r2
 8019944:	f7f8 fd04 	bl	8012350 <lwip_htons>
 8019948:	4603      	mov	r3, r0
 801994a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801994c:	68bb      	ldr	r3, [r7, #8]
 801994e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019950:	68ba      	ldr	r2, [r7, #8]
 8019952:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019954:	441a      	add	r2, r3
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	68db      	ldr	r3, [r3, #12]
 801995e:	3314      	adds	r3, #20
 8019960:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	7a9b      	ldrb	r3, [r3, #10]
 8019966:	f003 0301 	and.w	r3, r3, #1
 801996a:	2b00      	cmp	r3, #0
 801996c:	d015      	beq.n	801999a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801996e:	68bb      	ldr	r3, [r7, #8]
 8019970:	3304      	adds	r3, #4
 8019972:	461a      	mov	r2, r3
 8019974:	6879      	ldr	r1, [r7, #4]
 8019976:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801997a:	f7fc fa37 	bl	8015dec <tcp_eff_send_mss_netif>
 801997e:	4603      	mov	r3, r0
 8019980:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019982:	8b7b      	ldrh	r3, [r7, #26]
 8019984:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019988:	4618      	mov	r0, r3
 801998a:	f7f8 fcf6 	bl	801237a <lwip_htonl>
 801998e:	4602      	mov	r2, r0
 8019990:	69fb      	ldr	r3, [r7, #28]
 8019992:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019994:	69fb      	ldr	r3, [r7, #28]
 8019996:	3304      	adds	r3, #4
 8019998:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801999a:	68bb      	ldr	r3, [r7, #8]
 801999c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	da02      	bge.n	80199aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	2200      	movs	r2, #0
 80199a8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d10c      	bne.n	80199cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80199b2:	4b35      	ldr	r3, [pc, #212]	@ (8019a88 <tcp_output_segment+0x1b8>)
 80199b4:	681a      	ldr	r2, [r3, #0]
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	68db      	ldr	r3, [r3, #12]
 80199be:	685b      	ldr	r3, [r3, #4]
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f8 fcda 	bl	801237a <lwip_htonl>
 80199c6:	4602      	mov	r2, r0
 80199c8:	68bb      	ldr	r3, [r7, #8]
 80199ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	68da      	ldr	r2, [r3, #12]
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	685b      	ldr	r3, [r3, #4]
 80199d4:	685b      	ldr	r3, [r3, #4]
 80199d6:	1ad3      	subs	r3, r2, r3
 80199d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	685b      	ldr	r3, [r3, #4]
 80199de:	8959      	ldrh	r1, [r3, #10]
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	685b      	ldr	r3, [r3, #4]
 80199e4:	8b3a      	ldrh	r2, [r7, #24]
 80199e6:	1a8a      	subs	r2, r1, r2
 80199e8:	b292      	uxth	r2, r2
 80199ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	685b      	ldr	r3, [r3, #4]
 80199f0:	8919      	ldrh	r1, [r3, #8]
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	685b      	ldr	r3, [r3, #4]
 80199f6:	8b3a      	ldrh	r2, [r7, #24]
 80199f8:	1a8a      	subs	r2, r1, r2
 80199fa:	b292      	uxth	r2, r2
 80199fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	685b      	ldr	r3, [r3, #4]
 8019a02:	68fa      	ldr	r2, [r7, #12]
 8019a04:	68d2      	ldr	r2, [r2, #12]
 8019a06:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	741a      	strb	r2, [r3, #16]
 8019a10:	2200      	movs	r2, #0
 8019a12:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	68da      	ldr	r2, [r3, #12]
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	7a9b      	ldrb	r3, [r3, #10]
 8019a1c:	f003 0301 	and.w	r3, r3, #1
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d001      	beq.n	8019a28 <tcp_output_segment+0x158>
 8019a24:	2318      	movs	r3, #24
 8019a26:	e000      	b.n	8019a2a <tcp_output_segment+0x15a>
 8019a28:	2314      	movs	r3, #20
 8019a2a:	4413      	add	r3, r2
 8019a2c:	69fa      	ldr	r2, [r7, #28]
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d006      	beq.n	8019a40 <tcp_output_segment+0x170>
 8019a32:	4b10      	ldr	r3, [pc, #64]	@ (8019a74 <tcp_output_segment+0x1a4>)
 8019a34:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019a38:	4914      	ldr	r1, [pc, #80]	@ (8019a8c <tcp_output_segment+0x1bc>)
 8019a3a:	4810      	ldr	r0, [pc, #64]	@ (8019a7c <tcp_output_segment+0x1ac>)
 8019a3c:	f004 f9ba 	bl	801ddb4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	6858      	ldr	r0, [r3, #4]
 8019a44:	68b9      	ldr	r1, [r7, #8]
 8019a46:	68bb      	ldr	r3, [r7, #8]
 8019a48:	1d1c      	adds	r4, r3, #4
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	7add      	ldrb	r5, [r3, #11]
 8019a4e:	68bb      	ldr	r3, [r7, #8]
 8019a50:	7a9b      	ldrb	r3, [r3, #10]
 8019a52:	687a      	ldr	r2, [r7, #4]
 8019a54:	9202      	str	r2, [sp, #8]
 8019a56:	2206      	movs	r2, #6
 8019a58:	9201      	str	r2, [sp, #4]
 8019a5a:	9300      	str	r3, [sp, #0]
 8019a5c:	462b      	mov	r3, r5
 8019a5e:	4622      	mov	r2, r4
 8019a60:	f002 fdba 	bl	801c5d8 <ip4_output_if>
 8019a64:	4603      	mov	r3, r0
 8019a66:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	3720      	adds	r7, #32
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bdb0      	pop	{r4, r5, r7, pc}
 8019a74:	08021358 	.word	0x08021358
 8019a78:	0802191c 	.word	0x0802191c
 8019a7c:	080213ac 	.word	0x080213ac
 8019a80:	0802193c 	.word	0x0802193c
 8019a84:	0802195c 	.word	0x0802195c
 8019a88:	24016e0c 	.word	0x24016e0c
 8019a8c:	08021980 	.word	0x08021980

08019a90 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019a90:	b5b0      	push	{r4, r5, r7, lr}
 8019a92:	b084      	sub	sp, #16
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d106      	bne.n	8019aac <tcp_rexmit_rto_prepare+0x1c>
 8019a9e:	4b31      	ldr	r3, [pc, #196]	@ (8019b64 <tcp_rexmit_rto_prepare+0xd4>)
 8019aa0:	f240 6263 	movw	r2, #1635	@ 0x663
 8019aa4:	4930      	ldr	r1, [pc, #192]	@ (8019b68 <tcp_rexmit_rto_prepare+0xd8>)
 8019aa6:	4831      	ldr	r0, [pc, #196]	@ (8019b6c <tcp_rexmit_rto_prepare+0xdc>)
 8019aa8:	f004 f984 	bl	801ddb4 <iprintf>

  if (pcb->unacked == NULL) {
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d102      	bne.n	8019aba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019ab4:	f06f 0305 	mvn.w	r3, #5
 8019ab8:	e050      	b.n	8019b5c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019abe:	60fb      	str	r3, [r7, #12]
 8019ac0:	e00b      	b.n	8019ada <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019ac2:	68f8      	ldr	r0, [r7, #12]
 8019ac4:	f7ff fee4 	bl	8019890 <tcp_output_segment_busy>
 8019ac8:	4603      	mov	r3, r0
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d002      	beq.n	8019ad4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019ace:	f06f 0305 	mvn.w	r3, #5
 8019ad2:	e043      	b.n	8019b5c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	60fb      	str	r3, [r7, #12]
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d1ef      	bne.n	8019ac2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019ae2:	68f8      	ldr	r0, [r7, #12]
 8019ae4:	f7ff fed4 	bl	8019890 <tcp_output_segment_busy>
 8019ae8:	4603      	mov	r3, r0
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d002      	beq.n	8019af4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019aee:	f06f 0305 	mvn.w	r3, #5
 8019af2:	e033      	b.n	8019b5c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2200      	movs	r2, #0
 8019b08:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	8b5b      	ldrh	r3, [r3, #26]
 8019b0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8019b12:	b29a      	uxth	r2, r3
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	68db      	ldr	r3, [r3, #12]
 8019b1c:	685b      	ldr	r3, [r3, #4]
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f7f8 fc2b 	bl	801237a <lwip_htonl>
 8019b24:	4604      	mov	r4, r0
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	891b      	ldrh	r3, [r3, #8]
 8019b2a:	461d      	mov	r5, r3
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	68db      	ldr	r3, [r3, #12]
 8019b30:	899b      	ldrh	r3, [r3, #12]
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	4618      	mov	r0, r3
 8019b36:	f7f8 fc0b 	bl	8012350 <lwip_htons>
 8019b3a:	4603      	mov	r3, r0
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	f003 0303 	and.w	r3, r3, #3
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d001      	beq.n	8019b4a <tcp_rexmit_rto_prepare+0xba>
 8019b46:	2301      	movs	r3, #1
 8019b48:	e000      	b.n	8019b4c <tcp_rexmit_rto_prepare+0xbc>
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	442b      	add	r3, r5
 8019b4e:	18e2      	adds	r2, r4, r3
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2200      	movs	r2, #0
 8019b58:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019b5a:	2300      	movs	r3, #0
}
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	3710      	adds	r7, #16
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bdb0      	pop	{r4, r5, r7, pc}
 8019b64:	08021358 	.word	0x08021358
 8019b68:	08021994 	.word	0x08021994
 8019b6c:	080213ac 	.word	0x080213ac

08019b70 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d106      	bne.n	8019b8c <tcp_rexmit_rto_commit+0x1c>
 8019b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8019bb4 <tcp_rexmit_rto_commit+0x44>)
 8019b80:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8019b84:	490c      	ldr	r1, [pc, #48]	@ (8019bb8 <tcp_rexmit_rto_commit+0x48>)
 8019b86:	480d      	ldr	r0, [pc, #52]	@ (8019bbc <tcp_rexmit_rto_commit+0x4c>)
 8019b88:	f004 f914 	bl	801ddb4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019b92:	2bff      	cmp	r3, #255	@ 0xff
 8019b94:	d007      	beq.n	8019ba6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019b9c:	3301      	adds	r3, #1
 8019b9e:	b2da      	uxtb	r2, r3
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f7ff fc7e 	bl	80194a8 <tcp_output>
}
 8019bac:	bf00      	nop
 8019bae:	3708      	adds	r7, #8
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	bd80      	pop	{r7, pc}
 8019bb4:	08021358 	.word	0x08021358
 8019bb8:	080219b8 	.word	0x080219b8
 8019bbc:	080213ac 	.word	0x080213ac

08019bc0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b082      	sub	sp, #8
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d106      	bne.n	8019bdc <tcp_rexmit_rto+0x1c>
 8019bce:	4b0a      	ldr	r3, [pc, #40]	@ (8019bf8 <tcp_rexmit_rto+0x38>)
 8019bd0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019bd4:	4909      	ldr	r1, [pc, #36]	@ (8019bfc <tcp_rexmit_rto+0x3c>)
 8019bd6:	480a      	ldr	r0, [pc, #40]	@ (8019c00 <tcp_rexmit_rto+0x40>)
 8019bd8:	f004 f8ec 	bl	801ddb4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019bdc:	6878      	ldr	r0, [r7, #4]
 8019bde:	f7ff ff57 	bl	8019a90 <tcp_rexmit_rto_prepare>
 8019be2:	4603      	mov	r3, r0
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d102      	bne.n	8019bee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019be8:	6878      	ldr	r0, [r7, #4]
 8019bea:	f7ff ffc1 	bl	8019b70 <tcp_rexmit_rto_commit>
  }
}
 8019bee:	bf00      	nop
 8019bf0:	3708      	adds	r7, #8
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}
 8019bf6:	bf00      	nop
 8019bf8:	08021358 	.word	0x08021358
 8019bfc:	080219dc 	.word	0x080219dc
 8019c00:	080213ac 	.word	0x080213ac

08019c04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019c04:	b590      	push	{r4, r7, lr}
 8019c06:	b085      	sub	sp, #20
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d106      	bne.n	8019c20 <tcp_rexmit+0x1c>
 8019c12:	4b2f      	ldr	r3, [pc, #188]	@ (8019cd0 <tcp_rexmit+0xcc>)
 8019c14:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019c18:	492e      	ldr	r1, [pc, #184]	@ (8019cd4 <tcp_rexmit+0xd0>)
 8019c1a:	482f      	ldr	r0, [pc, #188]	@ (8019cd8 <tcp_rexmit+0xd4>)
 8019c1c:	f004 f8ca 	bl	801ddb4 <iprintf>

  if (pcb->unacked == NULL) {
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d102      	bne.n	8019c2e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019c28:	f06f 0305 	mvn.w	r3, #5
 8019c2c:	e04c      	b.n	8019cc8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019c32:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019c34:	68b8      	ldr	r0, [r7, #8]
 8019c36:	f7ff fe2b 	bl	8019890 <tcp_output_segment_busy>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d002      	beq.n	8019c46 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8019c40:	f06f 0305 	mvn.w	r3, #5
 8019c44:	e040      	b.n	8019cc8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019c46:	68bb      	ldr	r3, [r7, #8]
 8019c48:	681a      	ldr	r2, [r3, #0]
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	336c      	adds	r3, #108	@ 0x6c
 8019c52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019c54:	e002      	b.n	8019c5c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d011      	beq.n	8019c88 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	68db      	ldr	r3, [r3, #12]
 8019c6a:	685b      	ldr	r3, [r3, #4]
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f7f8 fb84 	bl	801237a <lwip_htonl>
 8019c72:	4604      	mov	r4, r0
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	68db      	ldr	r3, [r3, #12]
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7f8 fb7d 	bl	801237a <lwip_htonl>
 8019c80:	4603      	mov	r3, r0
 8019c82:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	dbe6      	blt.n	8019c56 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	681a      	ldr	r2, [r3, #0]
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	68ba      	ldr	r2, [r7, #8]
 8019c94:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019c96:	68bb      	ldr	r3, [r7, #8]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d103      	bne.n	8019ca6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019cac:	2bff      	cmp	r3, #255	@ 0xff
 8019cae:	d007      	beq.n	8019cc0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	b2da      	uxtb	r2, r3
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019cc6:	2300      	movs	r3, #0
}
 8019cc8:	4618      	mov	r0, r3
 8019cca:	3714      	adds	r7, #20
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd90      	pop	{r4, r7, pc}
 8019cd0:	08021358 	.word	0x08021358
 8019cd4:	080219f8 	.word	0x080219f8
 8019cd8:	080213ac 	.word	0x080213ac

08019cdc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b082      	sub	sp, #8
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d106      	bne.n	8019cf8 <tcp_rexmit_fast+0x1c>
 8019cea:	4b2a      	ldr	r3, [pc, #168]	@ (8019d94 <tcp_rexmit_fast+0xb8>)
 8019cec:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8019cf0:	4929      	ldr	r1, [pc, #164]	@ (8019d98 <tcp_rexmit_fast+0xbc>)
 8019cf2:	482a      	ldr	r0, [pc, #168]	@ (8019d9c <tcp_rexmit_fast+0xc0>)
 8019cf4:	f004 f85e 	bl	801ddb4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d045      	beq.n	8019d8c <tcp_rexmit_fast+0xb0>
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	8b5b      	ldrh	r3, [r3, #26]
 8019d04:	f003 0304 	and.w	r3, r3, #4
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d13f      	bne.n	8019d8c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019d0c:	6878      	ldr	r0, [r7, #4]
 8019d0e:	f7ff ff79 	bl	8019c04 <tcp_rexmit>
 8019d12:	4603      	mov	r3, r0
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d139      	bne.n	8019d8c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019d24:	4293      	cmp	r3, r2
 8019d26:	bf28      	it	cs
 8019d28:	4613      	movcs	r3, r2
 8019d2a:	b29b      	uxth	r3, r3
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	da00      	bge.n	8019d32 <tcp_rexmit_fast+0x56>
 8019d30:	3301      	adds	r3, #1
 8019d32:	105b      	asrs	r3, r3, #1
 8019d34:	b29a      	uxth	r2, r3
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019d42:	461a      	mov	r2, r3
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019d48:	005b      	lsls	r3, r3, #1
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	d206      	bcs.n	8019d5c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019d52:	005b      	lsls	r3, r3, #1
 8019d54:	b29a      	uxth	r2, r3
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019d66:	4619      	mov	r1, r3
 8019d68:	0049      	lsls	r1, r1, #1
 8019d6a:	440b      	add	r3, r1
 8019d6c:	b29b      	uxth	r3, r3
 8019d6e:	4413      	add	r3, r2
 8019d70:	b29a      	uxth	r2, r3
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	8b5b      	ldrh	r3, [r3, #26]
 8019d7c:	f043 0304 	orr.w	r3, r3, #4
 8019d80:	b29a      	uxth	r2, r3
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019d8c:	bf00      	nop
 8019d8e:	3708      	adds	r7, #8
 8019d90:	46bd      	mov	sp, r7
 8019d92:	bd80      	pop	{r7, pc}
 8019d94:	08021358 	.word	0x08021358
 8019d98:	08021a10 	.word	0x08021a10
 8019d9c:	080213ac 	.word	0x080213ac

08019da0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b086      	sub	sp, #24
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	60f8      	str	r0, [r7, #12]
 8019da8:	607b      	str	r3, [r7, #4]
 8019daa:	460b      	mov	r3, r1
 8019dac:	817b      	strh	r3, [r7, #10]
 8019dae:	4613      	mov	r3, r2
 8019db0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019db2:	897a      	ldrh	r2, [r7, #10]
 8019db4:	893b      	ldrh	r3, [r7, #8]
 8019db6:	4413      	add	r3, r2
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	3314      	adds	r3, #20
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019dc2:	4619      	mov	r1, r3
 8019dc4:	2022      	movs	r0, #34	@ 0x22
 8019dc6:	f7f9 fc99 	bl	80136fc <pbuf_alloc>
 8019dca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d04d      	beq.n	8019e6e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019dd2:	897b      	ldrh	r3, [r7, #10]
 8019dd4:	3313      	adds	r3, #19
 8019dd6:	697a      	ldr	r2, [r7, #20]
 8019dd8:	8952      	ldrh	r2, [r2, #10]
 8019dda:	4293      	cmp	r3, r2
 8019ddc:	db06      	blt.n	8019dec <tcp_output_alloc_header_common+0x4c>
 8019dde:	4b26      	ldr	r3, [pc, #152]	@ (8019e78 <tcp_output_alloc_header_common+0xd8>)
 8019de0:	f240 7223 	movw	r2, #1827	@ 0x723
 8019de4:	4925      	ldr	r1, [pc, #148]	@ (8019e7c <tcp_output_alloc_header_common+0xdc>)
 8019de6:	4826      	ldr	r0, [pc, #152]	@ (8019e80 <tcp_output_alloc_header_common+0xe0>)
 8019de8:	f003 ffe4 	bl	801ddb4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019dec:	697b      	ldr	r3, [r7, #20]
 8019dee:	685b      	ldr	r3, [r3, #4]
 8019df0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019df2:	8c3b      	ldrh	r3, [r7, #32]
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7f8 faab 	bl	8012350 <lwip_htons>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	693b      	ldr	r3, [r7, #16]
 8019e00:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019e04:	4618      	mov	r0, r3
 8019e06:	f7f8 faa3 	bl	8012350 <lwip_htons>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	461a      	mov	r2, r3
 8019e0e:	693b      	ldr	r3, [r7, #16]
 8019e10:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	687a      	ldr	r2, [r7, #4]
 8019e16:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019e18:	68f8      	ldr	r0, [r7, #12]
 8019e1a:	f7f8 faae 	bl	801237a <lwip_htonl>
 8019e1e:	4602      	mov	r2, r0
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019e24:	897b      	ldrh	r3, [r7, #10]
 8019e26:	089b      	lsrs	r3, r3, #2
 8019e28:	b29b      	uxth	r3, r3
 8019e2a:	3305      	adds	r3, #5
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	031b      	lsls	r3, r3, #12
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	4313      	orrs	r3, r2
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f8 fa87 	bl	8012350 <lwip_htons>
 8019e42:	4603      	mov	r3, r0
 8019e44:	461a      	mov	r2, r3
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019e4a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f7f8 fa7f 	bl	8012350 <lwip_htons>
 8019e52:	4603      	mov	r3, r0
 8019e54:	461a      	mov	r2, r3
 8019e56:	693b      	ldr	r3, [r7, #16]
 8019e58:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019e5a:	693b      	ldr	r3, [r7, #16]
 8019e5c:	2200      	movs	r2, #0
 8019e5e:	741a      	strb	r2, [r3, #16]
 8019e60:	2200      	movs	r2, #0
 8019e62:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019e64:	693b      	ldr	r3, [r7, #16]
 8019e66:	2200      	movs	r2, #0
 8019e68:	749a      	strb	r2, [r3, #18]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8019e6e:	697b      	ldr	r3, [r7, #20]
}
 8019e70:	4618      	mov	r0, r3
 8019e72:	3718      	adds	r7, #24
 8019e74:	46bd      	mov	sp, r7
 8019e76:	bd80      	pop	{r7, pc}
 8019e78:	08021358 	.word	0x08021358
 8019e7c:	08021a30 	.word	0x08021a30
 8019e80:	080213ac 	.word	0x080213ac

08019e84 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019e84:	b5b0      	push	{r4, r5, r7, lr}
 8019e86:	b08a      	sub	sp, #40	@ 0x28
 8019e88:	af04      	add	r7, sp, #16
 8019e8a:	60f8      	str	r0, [r7, #12]
 8019e8c:	607b      	str	r3, [r7, #4]
 8019e8e:	460b      	mov	r3, r1
 8019e90:	817b      	strh	r3, [r7, #10]
 8019e92:	4613      	mov	r3, r2
 8019e94:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d106      	bne.n	8019eaa <tcp_output_alloc_header+0x26>
 8019e9c:	4b15      	ldr	r3, [pc, #84]	@ (8019ef4 <tcp_output_alloc_header+0x70>)
 8019e9e:	f240 7242 	movw	r2, #1858	@ 0x742
 8019ea2:	4915      	ldr	r1, [pc, #84]	@ (8019ef8 <tcp_output_alloc_header+0x74>)
 8019ea4:	4815      	ldr	r0, [pc, #84]	@ (8019efc <tcp_output_alloc_header+0x78>)
 8019ea6:	f003 ff85 	bl	801ddb4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	8adb      	ldrh	r3, [r3, #22]
 8019eb2:	68fa      	ldr	r2, [r7, #12]
 8019eb4:	8b12      	ldrh	r2, [r2, #24]
 8019eb6:	68f9      	ldr	r1, [r7, #12]
 8019eb8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019eba:	893d      	ldrh	r5, [r7, #8]
 8019ebc:	897c      	ldrh	r4, [r7, #10]
 8019ebe:	9103      	str	r1, [sp, #12]
 8019ec0:	2110      	movs	r1, #16
 8019ec2:	9102      	str	r1, [sp, #8]
 8019ec4:	9201      	str	r2, [sp, #4]
 8019ec6:	9300      	str	r3, [sp, #0]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	462a      	mov	r2, r5
 8019ecc:	4621      	mov	r1, r4
 8019ece:	f7ff ff67 	bl	8019da0 <tcp_output_alloc_header_common>
 8019ed2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019ed4:	697b      	ldr	r3, [r7, #20]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d006      	beq.n	8019ee8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ede:	68fa      	ldr	r2, [r7, #12]
 8019ee0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019ee2:	441a      	add	r2, r3
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019ee8:	697b      	ldr	r3, [r7, #20]
}
 8019eea:	4618      	mov	r0, r3
 8019eec:	3718      	adds	r7, #24
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8019ef2:	bf00      	nop
 8019ef4:	08021358 	.word	0x08021358
 8019ef8:	08021a60 	.word	0x08021a60
 8019efc:	080213ac 	.word	0x080213ac

08019f00 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b088      	sub	sp, #32
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	60f8      	str	r0, [r7, #12]
 8019f08:	60b9      	str	r1, [r7, #8]
 8019f0a:	4611      	mov	r1, r2
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	460b      	mov	r3, r1
 8019f10:	71fb      	strb	r3, [r7, #7]
 8019f12:	4613      	mov	r3, r2
 8019f14:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019f16:	2300      	movs	r3, #0
 8019f18:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d106      	bne.n	8019f2e <tcp_output_fill_options+0x2e>
 8019f20:	4b12      	ldr	r3, [pc, #72]	@ (8019f6c <tcp_output_fill_options+0x6c>)
 8019f22:	f240 7256 	movw	r2, #1878	@ 0x756
 8019f26:	4912      	ldr	r1, [pc, #72]	@ (8019f70 <tcp_output_fill_options+0x70>)
 8019f28:	4812      	ldr	r0, [pc, #72]	@ (8019f74 <tcp_output_fill_options+0x74>)
 8019f2a:	f003 ff43 	bl	801ddb4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	685b      	ldr	r3, [r3, #4]
 8019f32:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019f34:	69bb      	ldr	r3, [r7, #24]
 8019f36:	3314      	adds	r3, #20
 8019f38:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019f3a:	8bfb      	ldrh	r3, [r7, #30]
 8019f3c:	009b      	lsls	r3, r3, #2
 8019f3e:	461a      	mov	r2, r3
 8019f40:	79fb      	ldrb	r3, [r7, #7]
 8019f42:	009b      	lsls	r3, r3, #2
 8019f44:	f003 0304 	and.w	r3, r3, #4
 8019f48:	4413      	add	r3, r2
 8019f4a:	3314      	adds	r3, #20
 8019f4c:	69ba      	ldr	r2, [r7, #24]
 8019f4e:	4413      	add	r3, r2
 8019f50:	697a      	ldr	r2, [r7, #20]
 8019f52:	429a      	cmp	r2, r3
 8019f54:	d006      	beq.n	8019f64 <tcp_output_fill_options+0x64>
 8019f56:	4b05      	ldr	r3, [pc, #20]	@ (8019f6c <tcp_output_fill_options+0x6c>)
 8019f58:	f240 7275 	movw	r2, #1909	@ 0x775
 8019f5c:	4906      	ldr	r1, [pc, #24]	@ (8019f78 <tcp_output_fill_options+0x78>)
 8019f5e:	4805      	ldr	r0, [pc, #20]	@ (8019f74 <tcp_output_fill_options+0x74>)
 8019f60:	f003 ff28 	bl	801ddb4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019f64:	bf00      	nop
 8019f66:	3720      	adds	r7, #32
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bd80      	pop	{r7, pc}
 8019f6c:	08021358 	.word	0x08021358
 8019f70:	08021a88 	.word	0x08021a88
 8019f74:	080213ac 	.word	0x080213ac
 8019f78:	08021980 	.word	0x08021980

08019f7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b08a      	sub	sp, #40	@ 0x28
 8019f80:	af04      	add	r7, sp, #16
 8019f82:	60f8      	str	r0, [r7, #12]
 8019f84:	60b9      	str	r1, [r7, #8]
 8019f86:	607a      	str	r2, [r7, #4]
 8019f88:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d106      	bne.n	8019f9e <tcp_output_control_segment+0x22>
 8019f90:	4b1c      	ldr	r3, [pc, #112]	@ (801a004 <tcp_output_control_segment+0x88>)
 8019f92:	f240 7287 	movw	r2, #1927	@ 0x787
 8019f96:	491c      	ldr	r1, [pc, #112]	@ (801a008 <tcp_output_control_segment+0x8c>)
 8019f98:	481c      	ldr	r0, [pc, #112]	@ (801a00c <tcp_output_control_segment+0x90>)
 8019f9a:	f003 ff0b 	bl	801ddb4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019f9e:	683a      	ldr	r2, [r7, #0]
 8019fa0:	6879      	ldr	r1, [r7, #4]
 8019fa2:	68f8      	ldr	r0, [r7, #12]
 8019fa4:	f7fe faea 	bl	801857c <tcp_route>
 8019fa8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019faa:	693b      	ldr	r3, [r7, #16]
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d102      	bne.n	8019fb6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019fb0:	23fc      	movs	r3, #252	@ 0xfc
 8019fb2:	75fb      	strb	r3, [r7, #23]
 8019fb4:	e01c      	b.n	8019ff0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d006      	beq.n	8019fca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	7adb      	ldrb	r3, [r3, #11]
 8019fc0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	7a9b      	ldrb	r3, [r3, #10]
 8019fc6:	757b      	strb	r3, [r7, #21]
 8019fc8:	e003      	b.n	8019fd2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019fca:	23ff      	movs	r3, #255	@ 0xff
 8019fcc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019fd2:	7dba      	ldrb	r2, [r7, #22]
 8019fd4:	693b      	ldr	r3, [r7, #16]
 8019fd6:	9302      	str	r3, [sp, #8]
 8019fd8:	2306      	movs	r3, #6
 8019fda:	9301      	str	r3, [sp, #4]
 8019fdc:	7d7b      	ldrb	r3, [r7, #21]
 8019fde:	9300      	str	r3, [sp, #0]
 8019fe0:	4613      	mov	r3, r2
 8019fe2:	683a      	ldr	r2, [r7, #0]
 8019fe4:	6879      	ldr	r1, [r7, #4]
 8019fe6:	68b8      	ldr	r0, [r7, #8]
 8019fe8:	f002 faf6 	bl	801c5d8 <ip4_output_if>
 8019fec:	4603      	mov	r3, r0
 8019fee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019ff0:	68b8      	ldr	r0, [r7, #8]
 8019ff2:	f7f9 fe9d 	bl	8013d30 <pbuf_free>
  return err;
 8019ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3718      	adds	r7, #24
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	08021358 	.word	0x08021358
 801a008:	08021ab0 	.word	0x08021ab0
 801a00c:	080213ac 	.word	0x080213ac

0801a010 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a010:	b590      	push	{r4, r7, lr}
 801a012:	b08b      	sub	sp, #44	@ 0x2c
 801a014:	af04      	add	r7, sp, #16
 801a016:	60f8      	str	r0, [r7, #12]
 801a018:	60b9      	str	r1, [r7, #8]
 801a01a:	607a      	str	r2, [r7, #4]
 801a01c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a01e:	683b      	ldr	r3, [r7, #0]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d106      	bne.n	801a032 <tcp_rst+0x22>
 801a024:	4b1f      	ldr	r3, [pc, #124]	@ (801a0a4 <tcp_rst+0x94>)
 801a026:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801a02a:	491f      	ldr	r1, [pc, #124]	@ (801a0a8 <tcp_rst+0x98>)
 801a02c:	481f      	ldr	r0, [pc, #124]	@ (801a0ac <tcp_rst+0x9c>)
 801a02e:	f003 fec1 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a034:	2b00      	cmp	r3, #0
 801a036:	d106      	bne.n	801a046 <tcp_rst+0x36>
 801a038:	4b1a      	ldr	r3, [pc, #104]	@ (801a0a4 <tcp_rst+0x94>)
 801a03a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801a03e:	491c      	ldr	r1, [pc, #112]	@ (801a0b0 <tcp_rst+0xa0>)
 801a040:	481a      	ldr	r0, [pc, #104]	@ (801a0ac <tcp_rst+0x9c>)
 801a042:	f003 feb7 	bl	801ddb4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a046:	2300      	movs	r3, #0
 801a048:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a04a:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801a04e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a050:	7dfb      	ldrb	r3, [r7, #23]
 801a052:	b29c      	uxth	r4, r3
 801a054:	68b8      	ldr	r0, [r7, #8]
 801a056:	f7f8 f990 	bl	801237a <lwip_htonl>
 801a05a:	4602      	mov	r2, r0
 801a05c:	8abb      	ldrh	r3, [r7, #20]
 801a05e:	9303      	str	r3, [sp, #12]
 801a060:	2314      	movs	r3, #20
 801a062:	9302      	str	r3, [sp, #8]
 801a064:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a066:	9301      	str	r3, [sp, #4]
 801a068:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a06a:	9300      	str	r3, [sp, #0]
 801a06c:	4613      	mov	r3, r2
 801a06e:	2200      	movs	r2, #0
 801a070:	4621      	mov	r1, r4
 801a072:	6878      	ldr	r0, [r7, #4]
 801a074:	f7ff fe94 	bl	8019da0 <tcp_output_alloc_header_common>
 801a078:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a07a:	693b      	ldr	r3, [r7, #16]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d00c      	beq.n	801a09a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a080:	7dfb      	ldrb	r3, [r7, #23]
 801a082:	2200      	movs	r2, #0
 801a084:	6939      	ldr	r1, [r7, #16]
 801a086:	68f8      	ldr	r0, [r7, #12]
 801a088:	f7ff ff3a 	bl	8019f00 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a08e:	683a      	ldr	r2, [r7, #0]
 801a090:	6939      	ldr	r1, [r7, #16]
 801a092:	68f8      	ldr	r0, [r7, #12]
 801a094:	f7ff ff72 	bl	8019f7c <tcp_output_control_segment>
 801a098:	e000      	b.n	801a09c <tcp_rst+0x8c>
    return;
 801a09a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a09c:	371c      	adds	r7, #28
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd90      	pop	{r4, r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	08021358 	.word	0x08021358
 801a0a8:	08021adc 	.word	0x08021adc
 801a0ac:	080213ac 	.word	0x080213ac
 801a0b0:	08021af8 	.word	0x08021af8

0801a0b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a0b4:	b590      	push	{r4, r7, lr}
 801a0b6:	b087      	sub	sp, #28
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a0bc:	2300      	movs	r3, #0
 801a0be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d106      	bne.n	801a0d8 <tcp_send_empty_ack+0x24>
 801a0ca:	4b28      	ldr	r3, [pc, #160]	@ (801a16c <tcp_send_empty_ack+0xb8>)
 801a0cc:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801a0d0:	4927      	ldr	r1, [pc, #156]	@ (801a170 <tcp_send_empty_ack+0xbc>)
 801a0d2:	4828      	ldr	r0, [pc, #160]	@ (801a174 <tcp_send_empty_ack+0xc0>)
 801a0d4:	f003 fe6e 	bl	801ddb4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a0d8:	7dfb      	ldrb	r3, [r7, #23]
 801a0da:	009b      	lsls	r3, r3, #2
 801a0dc:	b2db      	uxtb	r3, r3
 801a0de:	f003 0304 	and.w	r3, r3, #4
 801a0e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a0e4:	7d7b      	ldrb	r3, [r7, #21]
 801a0e6:	b29c      	uxth	r4, r3
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7f8 f944 	bl	801237a <lwip_htonl>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	4621      	mov	r1, r4
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7ff fec3 	bl	8019e84 <tcp_output_alloc_header>
 801a0fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a100:	693b      	ldr	r3, [r7, #16]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d109      	bne.n	801a11a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	8b5b      	ldrh	r3, [r3, #26]
 801a10a:	f043 0303 	orr.w	r3, r3, #3
 801a10e:	b29a      	uxth	r2, r3
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a114:	f06f 0301 	mvn.w	r3, #1
 801a118:	e023      	b.n	801a162 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a11a:	7dbb      	ldrb	r3, [r7, #22]
 801a11c:	7dfa      	ldrb	r2, [r7, #23]
 801a11e:	6939      	ldr	r1, [r7, #16]
 801a120:	6878      	ldr	r0, [r7, #4]
 801a122:	f7ff feed 	bl	8019f00 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a126:	687a      	ldr	r2, [r7, #4]
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	3304      	adds	r3, #4
 801a12c:	6939      	ldr	r1, [r7, #16]
 801a12e:	6878      	ldr	r0, [r7, #4]
 801a130:	f7ff ff24 	bl	8019f7c <tcp_output_control_segment>
 801a134:	4603      	mov	r3, r0
 801a136:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d007      	beq.n	801a150 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	8b5b      	ldrh	r3, [r3, #26]
 801a144:	f043 0303 	orr.w	r3, r3, #3
 801a148:	b29a      	uxth	r2, r3
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	835a      	strh	r2, [r3, #26]
 801a14e:	e006      	b.n	801a15e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	8b5b      	ldrh	r3, [r3, #26]
 801a154:	f023 0303 	bic.w	r3, r3, #3
 801a158:	b29a      	uxth	r2, r3
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a15e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a162:	4618      	mov	r0, r3
 801a164:	371c      	adds	r7, #28
 801a166:	46bd      	mov	sp, r7
 801a168:	bd90      	pop	{r4, r7, pc}
 801a16a:	bf00      	nop
 801a16c:	08021358 	.word	0x08021358
 801a170:	08021b14 	.word	0x08021b14
 801a174:	080213ac 	.word	0x080213ac

0801a178 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a178:	b590      	push	{r4, r7, lr}
 801a17a:	b087      	sub	sp, #28
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a180:	2300      	movs	r3, #0
 801a182:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	2b00      	cmp	r3, #0
 801a188:	d106      	bne.n	801a198 <tcp_keepalive+0x20>
 801a18a:	4b18      	ldr	r3, [pc, #96]	@ (801a1ec <tcp_keepalive+0x74>)
 801a18c:	f640 0224 	movw	r2, #2084	@ 0x824
 801a190:	4917      	ldr	r1, [pc, #92]	@ (801a1f0 <tcp_keepalive+0x78>)
 801a192:	4818      	ldr	r0, [pc, #96]	@ (801a1f4 <tcp_keepalive+0x7c>)
 801a194:	f003 fe0e 	bl	801ddb4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a198:	7dfb      	ldrb	r3, [r7, #23]
 801a19a:	b29c      	uxth	r4, r3
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a1a0:	3b01      	subs	r3, #1
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f7f8 f8e9 	bl	801237a <lwip_htonl>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	4621      	mov	r1, r4
 801a1ae:	6878      	ldr	r0, [r7, #4]
 801a1b0:	f7ff fe68 	bl	8019e84 <tcp_output_alloc_header>
 801a1b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a1b6:	693b      	ldr	r3, [r7, #16]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d102      	bne.n	801a1c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a1bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a1c0:	e010      	b.n	801a1e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a1c2:	7dfb      	ldrb	r3, [r7, #23]
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	6939      	ldr	r1, [r7, #16]
 801a1c8:	6878      	ldr	r0, [r7, #4]
 801a1ca:	f7ff fe99 	bl	8019f00 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	3304      	adds	r3, #4
 801a1d4:	6939      	ldr	r1, [r7, #16]
 801a1d6:	6878      	ldr	r0, [r7, #4]
 801a1d8:	f7ff fed0 	bl	8019f7c <tcp_output_control_segment>
 801a1dc:	4603      	mov	r3, r0
 801a1de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	371c      	adds	r7, #28
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	bd90      	pop	{r4, r7, pc}
 801a1ec:	08021358 	.word	0x08021358
 801a1f0:	08021b34 	.word	0x08021b34
 801a1f4:	080213ac 	.word	0x080213ac

0801a1f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a1f8:	b590      	push	{r4, r7, lr}
 801a1fa:	b08b      	sub	sp, #44	@ 0x2c
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a200:	2300      	movs	r3, #0
 801a202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d106      	bne.n	801a21a <tcp_zero_window_probe+0x22>
 801a20c:	4b4c      	ldr	r3, [pc, #304]	@ (801a340 <tcp_zero_window_probe+0x148>)
 801a20e:	f640 024f 	movw	r2, #2127	@ 0x84f
 801a212:	494c      	ldr	r1, [pc, #304]	@ (801a344 <tcp_zero_window_probe+0x14c>)
 801a214:	484c      	ldr	r0, [pc, #304]	@ (801a348 <tcp_zero_window_probe+0x150>)
 801a216:	f003 fdcd 	bl	801ddb4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a21e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a220:	6a3b      	ldr	r3, [r7, #32]
 801a222:	2b00      	cmp	r3, #0
 801a224:	d101      	bne.n	801a22a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a226:	2300      	movs	r3, #0
 801a228:	e086      	b.n	801a338 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a230:	2bff      	cmp	r3, #255	@ 0xff
 801a232:	d007      	beq.n	801a244 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a23a:	3301      	adds	r3, #1
 801a23c:	b2da      	uxtb	r2, r3
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a244:	6a3b      	ldr	r3, [r7, #32]
 801a246:	68db      	ldr	r3, [r3, #12]
 801a248:	899b      	ldrh	r3, [r3, #12]
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	4618      	mov	r0, r3
 801a24e:	f7f8 f87f 	bl	8012350 <lwip_htons>
 801a252:	4603      	mov	r3, r0
 801a254:	b2db      	uxtb	r3, r3
 801a256:	f003 0301 	and.w	r3, r3, #1
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d005      	beq.n	801a26a <tcp_zero_window_probe+0x72>
 801a25e:	6a3b      	ldr	r3, [r7, #32]
 801a260:	891b      	ldrh	r3, [r3, #8]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d101      	bne.n	801a26a <tcp_zero_window_probe+0x72>
 801a266:	2301      	movs	r3, #1
 801a268:	e000      	b.n	801a26c <tcp_zero_window_probe+0x74>
 801a26a:	2300      	movs	r3, #0
 801a26c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a26e:	7ffb      	ldrb	r3, [r7, #31]
 801a270:	2b00      	cmp	r3, #0
 801a272:	bf0c      	ite	eq
 801a274:	2301      	moveq	r3, #1
 801a276:	2300      	movne	r3, #0
 801a278:	b2db      	uxtb	r3, r3
 801a27a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a27c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a280:	b299      	uxth	r1, r3
 801a282:	6a3b      	ldr	r3, [r7, #32]
 801a284:	68db      	ldr	r3, [r3, #12]
 801a286:	685b      	ldr	r3, [r3, #4]
 801a288:	8bba      	ldrh	r2, [r7, #28]
 801a28a:	6878      	ldr	r0, [r7, #4]
 801a28c:	f7ff fdfa 	bl	8019e84 <tcp_output_alloc_header>
 801a290:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a292:	69bb      	ldr	r3, [r7, #24]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d102      	bne.n	801a29e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a298:	f04f 33ff 	mov.w	r3, #4294967295
 801a29c:	e04c      	b.n	801a338 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a29e:	69bb      	ldr	r3, [r7, #24]
 801a2a0:	685b      	ldr	r3, [r3, #4]
 801a2a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a2a4:	7ffb      	ldrb	r3, [r7, #31]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d011      	beq.n	801a2ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a2aa:	697b      	ldr	r3, [r7, #20]
 801a2ac:	899b      	ldrh	r3, [r3, #12]
 801a2ae:	b29b      	uxth	r3, r3
 801a2b0:	b21b      	sxth	r3, r3
 801a2b2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a2b6:	b21c      	sxth	r4, r3
 801a2b8:	2011      	movs	r0, #17
 801a2ba:	f7f8 f849 	bl	8012350 <lwip_htons>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	b21b      	sxth	r3, r3
 801a2c2:	4323      	orrs	r3, r4
 801a2c4:	b21b      	sxth	r3, r3
 801a2c6:	b29a      	uxth	r2, r3
 801a2c8:	697b      	ldr	r3, [r7, #20]
 801a2ca:	819a      	strh	r2, [r3, #12]
 801a2cc:	e010      	b.n	801a2f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a2ce:	69bb      	ldr	r3, [r7, #24]
 801a2d0:	685b      	ldr	r3, [r3, #4]
 801a2d2:	3314      	adds	r3, #20
 801a2d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a2d6:	6a3b      	ldr	r3, [r7, #32]
 801a2d8:	6858      	ldr	r0, [r3, #4]
 801a2da:	6a3b      	ldr	r3, [r7, #32]
 801a2dc:	685b      	ldr	r3, [r3, #4]
 801a2de:	891a      	ldrh	r2, [r3, #8]
 801a2e0:	6a3b      	ldr	r3, [r7, #32]
 801a2e2:	891b      	ldrh	r3, [r3, #8]
 801a2e4:	1ad3      	subs	r3, r2, r3
 801a2e6:	b29b      	uxth	r3, r3
 801a2e8:	2201      	movs	r2, #1
 801a2ea:	6939      	ldr	r1, [r7, #16]
 801a2ec:	f7f9 ff26 	bl	801413c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a2f0:	6a3b      	ldr	r3, [r7, #32]
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	685b      	ldr	r3, [r3, #4]
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f7f8 f83f 	bl	801237a <lwip_htonl>
 801a2fc:	4603      	mov	r3, r0
 801a2fe:	3301      	adds	r3, #1
 801a300:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	1ad3      	subs	r3, r2, r3
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	da02      	bge.n	801a314 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	68fa      	ldr	r2, [r7, #12]
 801a312:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a318:	2200      	movs	r2, #0
 801a31a:	69b9      	ldr	r1, [r7, #24]
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f7ff fdef 	bl	8019f00 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a322:	687a      	ldr	r2, [r7, #4]
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	3304      	adds	r3, #4
 801a328:	69b9      	ldr	r1, [r7, #24]
 801a32a:	6878      	ldr	r0, [r7, #4]
 801a32c:	f7ff fe26 	bl	8019f7c <tcp_output_control_segment>
 801a330:	4603      	mov	r3, r0
 801a332:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a334:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a338:	4618      	mov	r0, r3
 801a33a:	372c      	adds	r7, #44	@ 0x2c
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd90      	pop	{r4, r7, pc}
 801a340:	08021358 	.word	0x08021358
 801a344:	08021b50 	.word	0x08021b50
 801a348:	080213ac 	.word	0x080213ac

0801a34c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a354:	f7f9 ffe0 	bl	8014318 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a358:	4b0a      	ldr	r3, [pc, #40]	@ (801a384 <tcpip_tcp_timer+0x38>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d103      	bne.n	801a368 <tcpip_tcp_timer+0x1c>
 801a360:	4b09      	ldr	r3, [pc, #36]	@ (801a388 <tcpip_tcp_timer+0x3c>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d005      	beq.n	801a374 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a368:	2200      	movs	r2, #0
 801a36a:	4908      	ldr	r1, [pc, #32]	@ (801a38c <tcpip_tcp_timer+0x40>)
 801a36c:	20fa      	movs	r0, #250	@ 0xfa
 801a36e:	f000 f8f3 	bl	801a558 <sys_timeout>
 801a372:	e003      	b.n	801a37c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a374:	4b06      	ldr	r3, [pc, #24]	@ (801a390 <tcpip_tcp_timer+0x44>)
 801a376:	2200      	movs	r2, #0
 801a378:	601a      	str	r2, [r3, #0]
  }
}
 801a37a:	bf00      	nop
 801a37c:	bf00      	nop
 801a37e:	3708      	adds	r7, #8
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}
 801a384:	24016e18 	.word	0x24016e18
 801a388:	24016e1c 	.word	0x24016e1c
 801a38c:	0801a34d 	.word	0x0801a34d
 801a390:	24016e64 	.word	0x24016e64

0801a394 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a398:	4b0a      	ldr	r3, [pc, #40]	@ (801a3c4 <tcp_timer_needed+0x30>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d10f      	bne.n	801a3c0 <tcp_timer_needed+0x2c>
 801a3a0:	4b09      	ldr	r3, [pc, #36]	@ (801a3c8 <tcp_timer_needed+0x34>)
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d103      	bne.n	801a3b0 <tcp_timer_needed+0x1c>
 801a3a8:	4b08      	ldr	r3, [pc, #32]	@ (801a3cc <tcp_timer_needed+0x38>)
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d007      	beq.n	801a3c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a3b0:	4b04      	ldr	r3, [pc, #16]	@ (801a3c4 <tcp_timer_needed+0x30>)
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	4905      	ldr	r1, [pc, #20]	@ (801a3d0 <tcp_timer_needed+0x3c>)
 801a3ba:	20fa      	movs	r0, #250	@ 0xfa
 801a3bc:	f000 f8cc 	bl	801a558 <sys_timeout>
  }
}
 801a3c0:	bf00      	nop
 801a3c2:	bd80      	pop	{r7, pc}
 801a3c4:	24016e64 	.word	0x24016e64
 801a3c8:	24016e18 	.word	0x24016e18
 801a3cc:	24016e1c 	.word	0x24016e1c
 801a3d0:	0801a34d 	.word	0x0801a34d

0801a3d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b086      	sub	sp, #24
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	60f8      	str	r0, [r7, #12]
 801a3dc:	60b9      	str	r1, [r7, #8]
 801a3de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a3e0:	200a      	movs	r0, #10
 801a3e2:	f7f8 fd55 	bl	8012e90 <memp_malloc>
 801a3e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a3e8:	693b      	ldr	r3, [r7, #16]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d109      	bne.n	801a402 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a3ee:	693b      	ldr	r3, [r7, #16]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d151      	bne.n	801a498 <sys_timeout_abs+0xc4>
 801a3f4:	4b2a      	ldr	r3, [pc, #168]	@ (801a4a0 <sys_timeout_abs+0xcc>)
 801a3f6:	22be      	movs	r2, #190	@ 0xbe
 801a3f8:	492a      	ldr	r1, [pc, #168]	@ (801a4a4 <sys_timeout_abs+0xd0>)
 801a3fa:	482b      	ldr	r0, [pc, #172]	@ (801a4a8 <sys_timeout_abs+0xd4>)
 801a3fc:	f003 fcda 	bl	801ddb4 <iprintf>
    return;
 801a400:	e04a      	b.n	801a498 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	2200      	movs	r2, #0
 801a406:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	68ba      	ldr	r2, [r7, #8]
 801a40c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a40e:	693b      	ldr	r3, [r7, #16]
 801a410:	687a      	ldr	r2, [r7, #4]
 801a412:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a414:	693b      	ldr	r3, [r7, #16]
 801a416:	68fa      	ldr	r2, [r7, #12]
 801a418:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a41a:	4b24      	ldr	r3, [pc, #144]	@ (801a4ac <sys_timeout_abs+0xd8>)
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d103      	bne.n	801a42a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a422:	4a22      	ldr	r2, [pc, #136]	@ (801a4ac <sys_timeout_abs+0xd8>)
 801a424:	693b      	ldr	r3, [r7, #16]
 801a426:	6013      	str	r3, [r2, #0]
    return;
 801a428:	e037      	b.n	801a49a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a42a:	693b      	ldr	r3, [r7, #16]
 801a42c:	685a      	ldr	r2, [r3, #4]
 801a42e:	4b1f      	ldr	r3, [pc, #124]	@ (801a4ac <sys_timeout_abs+0xd8>)
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	685b      	ldr	r3, [r3, #4]
 801a434:	1ad3      	subs	r3, r2, r3
 801a436:	0fdb      	lsrs	r3, r3, #31
 801a438:	f003 0301 	and.w	r3, r3, #1
 801a43c:	b2db      	uxtb	r3, r3
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d007      	beq.n	801a452 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a442:	4b1a      	ldr	r3, [pc, #104]	@ (801a4ac <sys_timeout_abs+0xd8>)
 801a444:	681a      	ldr	r2, [r3, #0]
 801a446:	693b      	ldr	r3, [r7, #16]
 801a448:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a44a:	4a18      	ldr	r2, [pc, #96]	@ (801a4ac <sys_timeout_abs+0xd8>)
 801a44c:	693b      	ldr	r3, [r7, #16]
 801a44e:	6013      	str	r3, [r2, #0]
 801a450:	e023      	b.n	801a49a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a452:	4b16      	ldr	r3, [pc, #88]	@ (801a4ac <sys_timeout_abs+0xd8>)
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	617b      	str	r3, [r7, #20]
 801a458:	e01a      	b.n	801a490 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a45a:	697b      	ldr	r3, [r7, #20]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d00b      	beq.n	801a47a <sys_timeout_abs+0xa6>
 801a462:	693b      	ldr	r3, [r7, #16]
 801a464:	685a      	ldr	r2, [r3, #4]
 801a466:	697b      	ldr	r3, [r7, #20]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	685b      	ldr	r3, [r3, #4]
 801a46c:	1ad3      	subs	r3, r2, r3
 801a46e:	0fdb      	lsrs	r3, r3, #31
 801a470:	f003 0301 	and.w	r3, r3, #1
 801a474:	b2db      	uxtb	r3, r3
 801a476:	2b00      	cmp	r3, #0
 801a478:	d007      	beq.n	801a48a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a47a:	697b      	ldr	r3, [r7, #20]
 801a47c:	681a      	ldr	r2, [r3, #0]
 801a47e:	693b      	ldr	r3, [r7, #16]
 801a480:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a482:	697b      	ldr	r3, [r7, #20]
 801a484:	693a      	ldr	r2, [r7, #16]
 801a486:	601a      	str	r2, [r3, #0]
        break;
 801a488:	e007      	b.n	801a49a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a48a:	697b      	ldr	r3, [r7, #20]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	617b      	str	r3, [r7, #20]
 801a490:	697b      	ldr	r3, [r7, #20]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d1e1      	bne.n	801a45a <sys_timeout_abs+0x86>
 801a496:	e000      	b.n	801a49a <sys_timeout_abs+0xc6>
    return;
 801a498:	bf00      	nop
      }
    }
  }
}
 801a49a:	3718      	adds	r7, #24
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}
 801a4a0:	08021b74 	.word	0x08021b74
 801a4a4:	08021ba8 	.word	0x08021ba8
 801a4a8:	08021be8 	.word	0x08021be8
 801a4ac:	24016e5c 	.word	0x24016e5c

0801a4b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a4b0:	b580      	push	{r7, lr}
 801a4b2:	b086      	sub	sp, #24
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	685b      	ldr	r3, [r3, #4]
 801a4c0:	4798      	blx	r3

  now = sys_now();
 801a4c2:	f7ef fc01 	bl	8009cc8 <sys_now>
 801a4c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a4c8:	697b      	ldr	r3, [r7, #20]
 801a4ca:	681a      	ldr	r2, [r3, #0]
 801a4cc:	4b0f      	ldr	r3, [pc, #60]	@ (801a50c <lwip_cyclic_timer+0x5c>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	4413      	add	r3, r2
 801a4d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a4d4:	68fa      	ldr	r2, [r7, #12]
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	0fdb      	lsrs	r3, r3, #31
 801a4dc:	f003 0301 	and.w	r3, r3, #1
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d009      	beq.n	801a4fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a4e6:	697b      	ldr	r3, [r7, #20]
 801a4e8:	681a      	ldr	r2, [r3, #0]
 801a4ea:	693b      	ldr	r3, [r7, #16]
 801a4ec:	4413      	add	r3, r2
 801a4ee:	687a      	ldr	r2, [r7, #4]
 801a4f0:	4907      	ldr	r1, [pc, #28]	@ (801a510 <lwip_cyclic_timer+0x60>)
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	f7ff ff6e 	bl	801a3d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a4f8:	e004      	b.n	801a504 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	4904      	ldr	r1, [pc, #16]	@ (801a510 <lwip_cyclic_timer+0x60>)
 801a4fe:	68f8      	ldr	r0, [r7, #12]
 801a500:	f7ff ff68 	bl	801a3d4 <sys_timeout_abs>
}
 801a504:	bf00      	nop
 801a506:	3718      	adds	r7, #24
 801a508:	46bd      	mov	sp, r7
 801a50a:	bd80      	pop	{r7, pc}
 801a50c:	24016e60 	.word	0x24016e60
 801a510:	0801a4b1 	.word	0x0801a4b1

0801a514 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b082      	sub	sp, #8
 801a518:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a51a:	2301      	movs	r3, #1
 801a51c:	607b      	str	r3, [r7, #4]
 801a51e:	e00e      	b.n	801a53e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a520:	4a0b      	ldr	r2, [pc, #44]	@ (801a550 <sys_timeouts_init+0x3c>)
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	00db      	lsls	r3, r3, #3
 801a52c:	4a08      	ldr	r2, [pc, #32]	@ (801a550 <sys_timeouts_init+0x3c>)
 801a52e:	4413      	add	r3, r2
 801a530:	461a      	mov	r2, r3
 801a532:	4908      	ldr	r1, [pc, #32]	@ (801a554 <sys_timeouts_init+0x40>)
 801a534:	f000 f810 	bl	801a558 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	3301      	adds	r3, #1
 801a53c:	607b      	str	r3, [r7, #4]
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	2b02      	cmp	r3, #2
 801a542:	d9ed      	bls.n	801a520 <sys_timeouts_init+0xc>
  }
}
 801a544:	bf00      	nop
 801a546:	bf00      	nop
 801a548:	3708      	adds	r7, #8
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
 801a54e:	bf00      	nop
 801a550:	08022850 	.word	0x08022850
 801a554:	0801a4b1 	.word	0x0801a4b1

0801a558 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a558:	b580      	push	{r7, lr}
 801a55a:	b086      	sub	sp, #24
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	60f8      	str	r0, [r7, #12]
 801a560:	60b9      	str	r1, [r7, #8]
 801a562:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801a56a:	d306      	bcc.n	801a57a <sys_timeout+0x22>
 801a56c:	4b0a      	ldr	r3, [pc, #40]	@ (801a598 <sys_timeout+0x40>)
 801a56e:	f240 1229 	movw	r2, #297	@ 0x129
 801a572:	490a      	ldr	r1, [pc, #40]	@ (801a59c <sys_timeout+0x44>)
 801a574:	480a      	ldr	r0, [pc, #40]	@ (801a5a0 <sys_timeout+0x48>)
 801a576:	f003 fc1d 	bl	801ddb4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801a57a:	f7ef fba5 	bl	8009cc8 <sys_now>
 801a57e:	4602      	mov	r2, r0
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	4413      	add	r3, r2
 801a584:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801a586:	687a      	ldr	r2, [r7, #4]
 801a588:	68b9      	ldr	r1, [r7, #8]
 801a58a:	6978      	ldr	r0, [r7, #20]
 801a58c:	f7ff ff22 	bl	801a3d4 <sys_timeout_abs>
#endif
}
 801a590:	bf00      	nop
 801a592:	3718      	adds	r7, #24
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	08021b74 	.word	0x08021b74
 801a59c:	08021c10 	.word	0x08021c10
 801a5a0:	08021be8 	.word	0x08021be8

0801a5a4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b084      	sub	sp, #16
 801a5a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801a5aa:	f7ef fb8d 	bl	8009cc8 <sys_now>
 801a5ae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801a5b0:	4b17      	ldr	r3, [pc, #92]	@ (801a610 <sys_check_timeouts+0x6c>)
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d022      	beq.n	801a602 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801a5bc:	68bb      	ldr	r3, [r7, #8]
 801a5be:	685b      	ldr	r3, [r3, #4]
 801a5c0:	68fa      	ldr	r2, [r7, #12]
 801a5c2:	1ad3      	subs	r3, r2, r3
 801a5c4:	0fdb      	lsrs	r3, r3, #31
 801a5c6:	f003 0301 	and.w	r3, r3, #1
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d11a      	bne.n	801a606 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	4a0e      	ldr	r2, [pc, #56]	@ (801a610 <sys_check_timeouts+0x6c>)
 801a5d6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	689b      	ldr	r3, [r3, #8]
 801a5dc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801a5de:	68bb      	ldr	r3, [r7, #8]
 801a5e0:	68db      	ldr	r3, [r3, #12]
 801a5e2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	685b      	ldr	r3, [r3, #4]
 801a5e8:	4a0a      	ldr	r2, [pc, #40]	@ (801a614 <sys_check_timeouts+0x70>)
 801a5ea:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a5ec:	68b9      	ldr	r1, [r7, #8]
 801a5ee:	200a      	movs	r0, #10
 801a5f0:	f7f8 fcc4 	bl	8012f7c <memp_free>
    if (handler != NULL) {
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d0da      	beq.n	801a5b0 <sys_check_timeouts+0xc>
      handler(arg);
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	6838      	ldr	r0, [r7, #0]
 801a5fe:	4798      	blx	r3
  do {
 801a600:	e7d6      	b.n	801a5b0 <sys_check_timeouts+0xc>
      return;
 801a602:	bf00      	nop
 801a604:	e000      	b.n	801a608 <sys_check_timeouts+0x64>
      return;
 801a606:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801a608:	3710      	adds	r7, #16
 801a60a:	46bd      	mov	sp, r7
 801a60c:	bd80      	pop	{r7, pc}
 801a60e:	bf00      	nop
 801a610:	24016e5c 	.word	0x24016e5c
 801a614:	24016e60 	.word	0x24016e60

0801a618 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b082      	sub	sp, #8
 801a61c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801a61e:	4b16      	ldr	r3, [pc, #88]	@ (801a678 <sys_timeouts_sleeptime+0x60>)
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d102      	bne.n	801a62c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801a626:	f04f 33ff 	mov.w	r3, #4294967295
 801a62a:	e020      	b.n	801a66e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801a62c:	f7ef fb4c 	bl	8009cc8 <sys_now>
 801a630:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801a632:	4b11      	ldr	r3, [pc, #68]	@ (801a678 <sys_timeouts_sleeptime+0x60>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	685a      	ldr	r2, [r3, #4]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	1ad3      	subs	r3, r2, r3
 801a63c:	0fdb      	lsrs	r3, r3, #31
 801a63e:	f003 0301 	and.w	r3, r3, #1
 801a642:	b2db      	uxtb	r3, r3
 801a644:	2b00      	cmp	r3, #0
 801a646:	d001      	beq.n	801a64c <sys_timeouts_sleeptime+0x34>
    return 0;
 801a648:	2300      	movs	r3, #0
 801a64a:	e010      	b.n	801a66e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801a64c:	4b0a      	ldr	r3, [pc, #40]	@ (801a678 <sys_timeouts_sleeptime+0x60>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	685a      	ldr	r2, [r3, #4]
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	1ad3      	subs	r3, r2, r3
 801a656:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801a658:	683b      	ldr	r3, [r7, #0]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	da06      	bge.n	801a66c <sys_timeouts_sleeptime+0x54>
 801a65e:	4b07      	ldr	r3, [pc, #28]	@ (801a67c <sys_timeouts_sleeptime+0x64>)
 801a660:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801a664:	4906      	ldr	r1, [pc, #24]	@ (801a680 <sys_timeouts_sleeptime+0x68>)
 801a666:	4807      	ldr	r0, [pc, #28]	@ (801a684 <sys_timeouts_sleeptime+0x6c>)
 801a668:	f003 fba4 	bl	801ddb4 <iprintf>
    return ret;
 801a66c:	683b      	ldr	r3, [r7, #0]
  }
}
 801a66e:	4618      	mov	r0, r3
 801a670:	3708      	adds	r7, #8
 801a672:	46bd      	mov	sp, r7
 801a674:	bd80      	pop	{r7, pc}
 801a676:	bf00      	nop
 801a678:	24016e5c 	.word	0x24016e5c
 801a67c:	08021b74 	.word	0x08021b74
 801a680:	08021c48 	.word	0x08021c48
 801a684:	08021be8 	.word	0x08021be8

0801a688 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a68c:	f003 fa80 	bl	801db90 <rand>
 801a690:	4603      	mov	r3, r0
 801a692:	b29b      	uxth	r3, r3
 801a694:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a698:	b29b      	uxth	r3, r3
 801a69a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801a69e:	b29a      	uxth	r2, r3
 801a6a0:	4b01      	ldr	r3, [pc, #4]	@ (801a6a8 <udp_init+0x20>)
 801a6a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a6a4:	bf00      	nop
 801a6a6:	bd80      	pop	{r7, pc}
 801a6a8:	24000030 	.word	0x24000030

0801a6ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a6ac:	b480      	push	{r7}
 801a6ae:	b083      	sub	sp, #12
 801a6b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a6b6:	4b17      	ldr	r3, [pc, #92]	@ (801a714 <udp_new_port+0x68>)
 801a6b8:	881b      	ldrh	r3, [r3, #0]
 801a6ba:	1c5a      	adds	r2, r3, #1
 801a6bc:	b291      	uxth	r1, r2
 801a6be:	4a15      	ldr	r2, [pc, #84]	@ (801a714 <udp_new_port+0x68>)
 801a6c0:	8011      	strh	r1, [r2, #0]
 801a6c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a6c6:	4293      	cmp	r3, r2
 801a6c8:	d103      	bne.n	801a6d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a6ca:	4b12      	ldr	r3, [pc, #72]	@ (801a714 <udp_new_port+0x68>)
 801a6cc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a6d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6d2:	4b11      	ldr	r3, [pc, #68]	@ (801a718 <udp_new_port+0x6c>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	603b      	str	r3, [r7, #0]
 801a6d8:	e011      	b.n	801a6fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	8a5a      	ldrh	r2, [r3, #18]
 801a6de:	4b0d      	ldr	r3, [pc, #52]	@ (801a714 <udp_new_port+0x68>)
 801a6e0:	881b      	ldrh	r3, [r3, #0]
 801a6e2:	429a      	cmp	r2, r3
 801a6e4:	d108      	bne.n	801a6f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a6e6:	88fb      	ldrh	r3, [r7, #6]
 801a6e8:	3301      	adds	r3, #1
 801a6ea:	80fb      	strh	r3, [r7, #6]
 801a6ec:	88fb      	ldrh	r3, [r7, #6]
 801a6ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a6f2:	d3e0      	bcc.n	801a6b6 <udp_new_port+0xa>
        return 0;
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	e007      	b.n	801a708 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6f8:	683b      	ldr	r3, [r7, #0]
 801a6fa:	68db      	ldr	r3, [r3, #12]
 801a6fc:	603b      	str	r3, [r7, #0]
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d1ea      	bne.n	801a6da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a704:	4b03      	ldr	r3, [pc, #12]	@ (801a714 <udp_new_port+0x68>)
 801a706:	881b      	ldrh	r3, [r3, #0]
}
 801a708:	4618      	mov	r0, r3
 801a70a:	370c      	adds	r7, #12
 801a70c:	46bd      	mov	sp, r7
 801a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a712:	4770      	bx	lr
 801a714:	24000030 	.word	0x24000030
 801a718:	24016e68 	.word	0x24016e68

0801a71c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b084      	sub	sp, #16
 801a720:	af00      	add	r7, sp, #0
 801a722:	60f8      	str	r0, [r7, #12]
 801a724:	60b9      	str	r1, [r7, #8]
 801a726:	4613      	mov	r3, r2
 801a728:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d105      	bne.n	801a73c <udp_input_local_match+0x20>
 801a730:	4b27      	ldr	r3, [pc, #156]	@ (801a7d0 <udp_input_local_match+0xb4>)
 801a732:	2287      	movs	r2, #135	@ 0x87
 801a734:	4927      	ldr	r1, [pc, #156]	@ (801a7d4 <udp_input_local_match+0xb8>)
 801a736:	4828      	ldr	r0, [pc, #160]	@ (801a7d8 <udp_input_local_match+0xbc>)
 801a738:	f003 fb3c 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d105      	bne.n	801a74e <udp_input_local_match+0x32>
 801a742:	4b23      	ldr	r3, [pc, #140]	@ (801a7d0 <udp_input_local_match+0xb4>)
 801a744:	2288      	movs	r2, #136	@ 0x88
 801a746:	4925      	ldr	r1, [pc, #148]	@ (801a7dc <udp_input_local_match+0xc0>)
 801a748:	4823      	ldr	r0, [pc, #140]	@ (801a7d8 <udp_input_local_match+0xbc>)
 801a74a:	f003 fb33 	bl	801ddb4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	7a1b      	ldrb	r3, [r3, #8]
 801a752:	2b00      	cmp	r3, #0
 801a754:	d00b      	beq.n	801a76e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	7a1a      	ldrb	r2, [r3, #8]
 801a75a:	4b21      	ldr	r3, [pc, #132]	@ (801a7e0 <udp_input_local_match+0xc4>)
 801a75c:	685b      	ldr	r3, [r3, #4]
 801a75e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a762:	3301      	adds	r3, #1
 801a764:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a766:	429a      	cmp	r2, r3
 801a768:	d001      	beq.n	801a76e <udp_input_local_match+0x52>
    return 0;
 801a76a:	2300      	movs	r3, #0
 801a76c:	e02b      	b.n	801a7c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a76e:	79fb      	ldrb	r3, [r7, #7]
 801a770:	2b00      	cmp	r3, #0
 801a772:	d018      	beq.n	801a7a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d013      	beq.n	801a7a2 <udp_input_local_match+0x86>
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d00f      	beq.n	801a7a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a782:	4b17      	ldr	r3, [pc, #92]	@ (801a7e0 <udp_input_local_match+0xc4>)
 801a784:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a78a:	d00a      	beq.n	801a7a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	681a      	ldr	r2, [r3, #0]
 801a790:	4b13      	ldr	r3, [pc, #76]	@ (801a7e0 <udp_input_local_match+0xc4>)
 801a792:	695b      	ldr	r3, [r3, #20]
 801a794:	405a      	eors	r2, r3
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	3308      	adds	r3, #8
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d110      	bne.n	801a7c4 <udp_input_local_match+0xa8>
          return 1;
 801a7a2:	2301      	movs	r3, #1
 801a7a4:	e00f      	b.n	801a7c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d009      	beq.n	801a7c0 <udp_input_local_match+0xa4>
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d005      	beq.n	801a7c0 <udp_input_local_match+0xa4>
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	681a      	ldr	r2, [r3, #0]
 801a7b8:	4b09      	ldr	r3, [pc, #36]	@ (801a7e0 <udp_input_local_match+0xc4>)
 801a7ba:	695b      	ldr	r3, [r3, #20]
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	d101      	bne.n	801a7c4 <udp_input_local_match+0xa8>
        return 1;
 801a7c0:	2301      	movs	r3, #1
 801a7c2:	e000      	b.n	801a7c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a7c4:	2300      	movs	r3, #0
}
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	3710      	adds	r7, #16
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd80      	pop	{r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	08021c5c 	.word	0x08021c5c
 801a7d4:	08021c8c 	.word	0x08021c8c
 801a7d8:	08021cb0 	.word	0x08021cb0
 801a7dc:	08021cd8 	.word	0x08021cd8
 801a7e0:	2401034c 	.word	0x2401034c

0801a7e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a7e4:	b590      	push	{r4, r7, lr}
 801a7e6:	b08d      	sub	sp, #52	@ 0x34
 801a7e8:	af02      	add	r7, sp, #8
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d105      	bne.n	801a804 <udp_input+0x20>
 801a7f8:	4b7c      	ldr	r3, [pc, #496]	@ (801a9ec <udp_input+0x208>)
 801a7fa:	22cf      	movs	r2, #207	@ 0xcf
 801a7fc:	497c      	ldr	r1, [pc, #496]	@ (801a9f0 <udp_input+0x20c>)
 801a7fe:	487d      	ldr	r0, [pc, #500]	@ (801a9f4 <udp_input+0x210>)
 801a800:	f003 fad8 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a804:	683b      	ldr	r3, [r7, #0]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d105      	bne.n	801a816 <udp_input+0x32>
 801a80a:	4b78      	ldr	r3, [pc, #480]	@ (801a9ec <udp_input+0x208>)
 801a80c:	22d0      	movs	r2, #208	@ 0xd0
 801a80e:	497a      	ldr	r1, [pc, #488]	@ (801a9f8 <udp_input+0x214>)
 801a810:	4878      	ldr	r0, [pc, #480]	@ (801a9f4 <udp_input+0x210>)
 801a812:	f003 facf 	bl	801ddb4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	895b      	ldrh	r3, [r3, #10]
 801a81a:	2b07      	cmp	r3, #7
 801a81c:	d803      	bhi.n	801a826 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a81e:	6878      	ldr	r0, [r7, #4]
 801a820:	f7f9 fa86 	bl	8013d30 <pbuf_free>
    goto end;
 801a824:	e0de      	b.n	801a9e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	685b      	ldr	r3, [r3, #4]
 801a82a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a82c:	4b73      	ldr	r3, [pc, #460]	@ (801a9fc <udp_input+0x218>)
 801a82e:	695b      	ldr	r3, [r3, #20]
 801a830:	4a72      	ldr	r2, [pc, #456]	@ (801a9fc <udp_input+0x218>)
 801a832:	6812      	ldr	r2, [r2, #0]
 801a834:	4611      	mov	r1, r2
 801a836:	4618      	mov	r0, r3
 801a838:	f001 ffa6 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801a83c:	4603      	mov	r3, r0
 801a83e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a840:	697b      	ldr	r3, [r7, #20]
 801a842:	881b      	ldrh	r3, [r3, #0]
 801a844:	b29b      	uxth	r3, r3
 801a846:	4618      	mov	r0, r3
 801a848:	f7f7 fd82 	bl	8012350 <lwip_htons>
 801a84c:	4603      	mov	r3, r0
 801a84e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a850:	697b      	ldr	r3, [r7, #20]
 801a852:	885b      	ldrh	r3, [r3, #2]
 801a854:	b29b      	uxth	r3, r3
 801a856:	4618      	mov	r0, r3
 801a858:	f7f7 fd7a 	bl	8012350 <lwip_htons>
 801a85c:	4603      	mov	r3, r0
 801a85e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a860:	2300      	movs	r3, #0
 801a862:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a864:	2300      	movs	r3, #0
 801a866:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a868:	2300      	movs	r3, #0
 801a86a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a86c:	4b64      	ldr	r3, [pc, #400]	@ (801aa00 <udp_input+0x21c>)
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	627b      	str	r3, [r7, #36]	@ 0x24
 801a872:	e054      	b.n	801a91e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a876:	8a5b      	ldrh	r3, [r3, #18]
 801a878:	89fa      	ldrh	r2, [r7, #14]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d14a      	bne.n	801a914 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a87e:	7cfb      	ldrb	r3, [r7, #19]
 801a880:	461a      	mov	r2, r3
 801a882:	6839      	ldr	r1, [r7, #0]
 801a884:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a886:	f7ff ff49 	bl	801a71c <udp_input_local_match>
 801a88a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d041      	beq.n	801a914 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a892:	7c1b      	ldrb	r3, [r3, #16]
 801a894:	f003 0304 	and.w	r3, r3, #4
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d11d      	bne.n	801a8d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a89c:	69fb      	ldr	r3, [r7, #28]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d102      	bne.n	801a8a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8a4:	61fb      	str	r3, [r7, #28]
 801a8a6:	e017      	b.n	801a8d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a8a8:	7cfb      	ldrb	r3, [r7, #19]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d014      	beq.n	801a8d8 <udp_input+0xf4>
 801a8ae:	4b53      	ldr	r3, [pc, #332]	@ (801a9fc <udp_input+0x218>)
 801a8b0:	695b      	ldr	r3, [r3, #20]
 801a8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8b6:	d10f      	bne.n	801a8d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a8b8:	69fb      	ldr	r3, [r7, #28]
 801a8ba:	681a      	ldr	r2, [r3, #0]
 801a8bc:	683b      	ldr	r3, [r7, #0]
 801a8be:	3304      	adds	r3, #4
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	429a      	cmp	r2, r3
 801a8c4:	d008      	beq.n	801a8d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8c8:	681a      	ldr	r2, [r3, #0]
 801a8ca:	683b      	ldr	r3, [r7, #0]
 801a8cc:	3304      	adds	r3, #4
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	429a      	cmp	r2, r3
 801a8d2:	d101      	bne.n	801a8d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8da:	8a9b      	ldrh	r3, [r3, #20]
 801a8dc:	8a3a      	ldrh	r2, [r7, #16]
 801a8de:	429a      	cmp	r2, r3
 801a8e0:	d118      	bne.n	801a914 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d005      	beq.n	801a8f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8ec:	685a      	ldr	r2, [r3, #4]
 801a8ee:	4b43      	ldr	r3, [pc, #268]	@ (801a9fc <udp_input+0x218>)
 801a8f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a8f2:	429a      	cmp	r2, r3
 801a8f4:	d10e      	bne.n	801a914 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a8f6:	6a3b      	ldr	r3, [r7, #32]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d014      	beq.n	801a926 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8fe:	68da      	ldr	r2, [r3, #12]
 801a900:	6a3b      	ldr	r3, [r7, #32]
 801a902:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a904:	4b3e      	ldr	r3, [pc, #248]	@ (801aa00 <udp_input+0x21c>)
 801a906:	681a      	ldr	r2, [r3, #0]
 801a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a90a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a90c:	4a3c      	ldr	r2, [pc, #240]	@ (801aa00 <udp_input+0x21c>)
 801a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a910:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a912:	e008      	b.n	801a926 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a916:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a91a:	68db      	ldr	r3, [r3, #12]
 801a91c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a920:	2b00      	cmp	r3, #0
 801a922:	d1a7      	bne.n	801a874 <udp_input+0x90>
 801a924:	e000      	b.n	801a928 <udp_input+0x144>
        break;
 801a926:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d101      	bne.n	801a932 <udp_input+0x14e>
    pcb = uncon_pcb;
 801a92e:	69fb      	ldr	r3, [r7, #28]
 801a930:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a934:	2b00      	cmp	r3, #0
 801a936:	d002      	beq.n	801a93e <udp_input+0x15a>
    for_us = 1;
 801a938:	2301      	movs	r3, #1
 801a93a:	76fb      	strb	r3, [r7, #27]
 801a93c:	e00a      	b.n	801a954 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a93e:	683b      	ldr	r3, [r7, #0]
 801a940:	3304      	adds	r3, #4
 801a942:	681a      	ldr	r2, [r3, #0]
 801a944:	4b2d      	ldr	r3, [pc, #180]	@ (801a9fc <udp_input+0x218>)
 801a946:	695b      	ldr	r3, [r3, #20]
 801a948:	429a      	cmp	r2, r3
 801a94a:	bf0c      	ite	eq
 801a94c:	2301      	moveq	r3, #1
 801a94e:	2300      	movne	r3, #0
 801a950:	b2db      	uxtb	r3, r3
 801a952:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a954:	7efb      	ldrb	r3, [r7, #27]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d041      	beq.n	801a9de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a95a:	2108      	movs	r1, #8
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f7f9 f92f 	bl	8013bc0 <pbuf_remove_header>
 801a962:	4603      	mov	r3, r0
 801a964:	2b00      	cmp	r3, #0
 801a966:	d00a      	beq.n	801a97e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a968:	4b20      	ldr	r3, [pc, #128]	@ (801a9ec <udp_input+0x208>)
 801a96a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a96e:	4925      	ldr	r1, [pc, #148]	@ (801aa04 <udp_input+0x220>)
 801a970:	4820      	ldr	r0, [pc, #128]	@ (801a9f4 <udp_input+0x210>)
 801a972:	f003 fa1f 	bl	801ddb4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a976:	6878      	ldr	r0, [r7, #4]
 801a978:	f7f9 f9da 	bl	8013d30 <pbuf_free>
      goto end;
 801a97c:	e032      	b.n	801a9e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a980:	2b00      	cmp	r3, #0
 801a982:	d012      	beq.n	801a9aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a986:	699b      	ldr	r3, [r3, #24]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d00a      	beq.n	801a9a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a98e:	699c      	ldr	r4, [r3, #24]
 801a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a992:	69d8      	ldr	r0, [r3, #28]
 801a994:	8a3b      	ldrh	r3, [r7, #16]
 801a996:	9300      	str	r3, [sp, #0]
 801a998:	4b1b      	ldr	r3, [pc, #108]	@ (801aa08 <udp_input+0x224>)
 801a99a:	687a      	ldr	r2, [r7, #4]
 801a99c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a99e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a9a0:	e021      	b.n	801a9e6 <udp_input+0x202>
        pbuf_free(p);
 801a9a2:	6878      	ldr	r0, [r7, #4]
 801a9a4:	f7f9 f9c4 	bl	8013d30 <pbuf_free>
        goto end;
 801a9a8:	e01c      	b.n	801a9e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a9aa:	7cfb      	ldrb	r3, [r7, #19]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d112      	bne.n	801a9d6 <udp_input+0x1f2>
 801a9b0:	4b12      	ldr	r3, [pc, #72]	@ (801a9fc <udp_input+0x218>)
 801a9b2:	695b      	ldr	r3, [r3, #20]
 801a9b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a9b8:	2be0      	cmp	r3, #224	@ 0xe0
 801a9ba:	d00c      	beq.n	801a9d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a9bc:	4b0f      	ldr	r3, [pc, #60]	@ (801a9fc <udp_input+0x218>)
 801a9be:	899b      	ldrh	r3, [r3, #12]
 801a9c0:	3308      	adds	r3, #8
 801a9c2:	b29b      	uxth	r3, r3
 801a9c4:	b21b      	sxth	r3, r3
 801a9c6:	4619      	mov	r1, r3
 801a9c8:	6878      	ldr	r0, [r7, #4]
 801a9ca:	f7f9 f96c 	bl	8013ca6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a9ce:	2103      	movs	r1, #3
 801a9d0:	6878      	ldr	r0, [r7, #4]
 801a9d2:	f001 fbaf 	bl	801c134 <icmp_dest_unreach>
      pbuf_free(p);
 801a9d6:	6878      	ldr	r0, [r7, #4]
 801a9d8:	f7f9 f9aa 	bl	8013d30 <pbuf_free>
  return;
 801a9dc:	e003      	b.n	801a9e6 <udp_input+0x202>
    pbuf_free(p);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f7f9 f9a6 	bl	8013d30 <pbuf_free>
  return;
 801a9e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a9e6:	372c      	adds	r7, #44	@ 0x2c
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd90      	pop	{r4, r7, pc}
 801a9ec:	08021c5c 	.word	0x08021c5c
 801a9f0:	08021d00 	.word	0x08021d00
 801a9f4:	08021cb0 	.word	0x08021cb0
 801a9f8:	08021d18 	.word	0x08021d18
 801a9fc:	2401034c 	.word	0x2401034c
 801aa00:	24016e68 	.word	0x24016e68
 801aa04:	08021d34 	.word	0x08021d34
 801aa08:	2401035c 	.word	0x2401035c

0801aa0c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b082      	sub	sp, #8
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	6078      	str	r0, [r7, #4]
 801aa14:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d109      	bne.n	801aa30 <udp_send+0x24>
 801aa1c:	4b11      	ldr	r3, [pc, #68]	@ (801aa64 <udp_send+0x58>)
 801aa1e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801aa22:	4911      	ldr	r1, [pc, #68]	@ (801aa68 <udp_send+0x5c>)
 801aa24:	4811      	ldr	r0, [pc, #68]	@ (801aa6c <udp_send+0x60>)
 801aa26:	f003 f9c5 	bl	801ddb4 <iprintf>
 801aa2a:	f06f 030f 	mvn.w	r3, #15
 801aa2e:	e015      	b.n	801aa5c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d109      	bne.n	801aa4a <udp_send+0x3e>
 801aa36:	4b0b      	ldr	r3, [pc, #44]	@ (801aa64 <udp_send+0x58>)
 801aa38:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801aa3c:	490c      	ldr	r1, [pc, #48]	@ (801aa70 <udp_send+0x64>)
 801aa3e:	480b      	ldr	r0, [pc, #44]	@ (801aa6c <udp_send+0x60>)
 801aa40:	f003 f9b8 	bl	801ddb4 <iprintf>
 801aa44:	f06f 030f 	mvn.w	r3, #15
 801aa48:	e008      	b.n	801aa5c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	1d1a      	adds	r2, r3, #4
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	8a9b      	ldrh	r3, [r3, #20]
 801aa52:	6839      	ldr	r1, [r7, #0]
 801aa54:	6878      	ldr	r0, [r7, #4]
 801aa56:	f000 f80d 	bl	801aa74 <udp_sendto>
 801aa5a:	4603      	mov	r3, r0
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	3708      	adds	r7, #8
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}
 801aa64:	08021c5c 	.word	0x08021c5c
 801aa68:	08021d50 	.word	0x08021d50
 801aa6c:	08021cb0 	.word	0x08021cb0
 801aa70:	08021d68 	.word	0x08021d68

0801aa74 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b088      	sub	sp, #32
 801aa78:	af02      	add	r7, sp, #8
 801aa7a:	60f8      	str	r0, [r7, #12]
 801aa7c:	60b9      	str	r1, [r7, #8]
 801aa7e:	607a      	str	r2, [r7, #4]
 801aa80:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d109      	bne.n	801aa9c <udp_sendto+0x28>
 801aa88:	4b23      	ldr	r3, [pc, #140]	@ (801ab18 <udp_sendto+0xa4>)
 801aa8a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801aa8e:	4923      	ldr	r1, [pc, #140]	@ (801ab1c <udp_sendto+0xa8>)
 801aa90:	4823      	ldr	r0, [pc, #140]	@ (801ab20 <udp_sendto+0xac>)
 801aa92:	f003 f98f 	bl	801ddb4 <iprintf>
 801aa96:	f06f 030f 	mvn.w	r3, #15
 801aa9a:	e038      	b.n	801ab0e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	2b00      	cmp	r3, #0
 801aaa0:	d109      	bne.n	801aab6 <udp_sendto+0x42>
 801aaa2:	4b1d      	ldr	r3, [pc, #116]	@ (801ab18 <udp_sendto+0xa4>)
 801aaa4:	f240 2219 	movw	r2, #537	@ 0x219
 801aaa8:	491e      	ldr	r1, [pc, #120]	@ (801ab24 <udp_sendto+0xb0>)
 801aaaa:	481d      	ldr	r0, [pc, #116]	@ (801ab20 <udp_sendto+0xac>)
 801aaac:	f003 f982 	bl	801ddb4 <iprintf>
 801aab0:	f06f 030f 	mvn.w	r3, #15
 801aab4:	e02b      	b.n	801ab0e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d109      	bne.n	801aad0 <udp_sendto+0x5c>
 801aabc:	4b16      	ldr	r3, [pc, #88]	@ (801ab18 <udp_sendto+0xa4>)
 801aabe:	f240 221a 	movw	r2, #538	@ 0x21a
 801aac2:	4919      	ldr	r1, [pc, #100]	@ (801ab28 <udp_sendto+0xb4>)
 801aac4:	4816      	ldr	r0, [pc, #88]	@ (801ab20 <udp_sendto+0xac>)
 801aac6:	f003 f975 	bl	801ddb4 <iprintf>
 801aaca:	f06f 030f 	mvn.w	r3, #15
 801aace:	e01e      	b.n	801ab0e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	7a1b      	ldrb	r3, [r3, #8]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d006      	beq.n	801aae6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	7a1b      	ldrb	r3, [r3, #8]
 801aadc:	4618      	mov	r0, r3
 801aade:	f7f8 fd63 	bl	80135a8 <netif_get_by_index>
 801aae2:	6178      	str	r0, [r7, #20]
 801aae4:	e003      	b.n	801aaee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801aae6:	6878      	ldr	r0, [r7, #4]
 801aae8:	f001 fbb8 	bl	801c25c <ip4_route>
 801aaec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801aaee:	697b      	ldr	r3, [r7, #20]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d102      	bne.n	801aafa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801aaf4:	f06f 0303 	mvn.w	r3, #3
 801aaf8:	e009      	b.n	801ab0e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801aafa:	887a      	ldrh	r2, [r7, #2]
 801aafc:	697b      	ldr	r3, [r7, #20]
 801aafe:	9300      	str	r3, [sp, #0]
 801ab00:	4613      	mov	r3, r2
 801ab02:	687a      	ldr	r2, [r7, #4]
 801ab04:	68b9      	ldr	r1, [r7, #8]
 801ab06:	68f8      	ldr	r0, [r7, #12]
 801ab08:	f000 f810 	bl	801ab2c <udp_sendto_if>
 801ab0c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ab0e:	4618      	mov	r0, r3
 801ab10:	3718      	adds	r7, #24
 801ab12:	46bd      	mov	sp, r7
 801ab14:	bd80      	pop	{r7, pc}
 801ab16:	bf00      	nop
 801ab18:	08021c5c 	.word	0x08021c5c
 801ab1c:	08021d80 	.word	0x08021d80
 801ab20:	08021cb0 	.word	0x08021cb0
 801ab24:	08021d98 	.word	0x08021d98
 801ab28:	08021db4 	.word	0x08021db4

0801ab2c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801ab2c:	b580      	push	{r7, lr}
 801ab2e:	b088      	sub	sp, #32
 801ab30:	af02      	add	r7, sp, #8
 801ab32:	60f8      	str	r0, [r7, #12]
 801ab34:	60b9      	str	r1, [r7, #8]
 801ab36:	607a      	str	r2, [r7, #4]
 801ab38:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d109      	bne.n	801ab54 <udp_sendto_if+0x28>
 801ab40:	4b2e      	ldr	r3, [pc, #184]	@ (801abfc <udp_sendto_if+0xd0>)
 801ab42:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ab46:	492e      	ldr	r1, [pc, #184]	@ (801ac00 <udp_sendto_if+0xd4>)
 801ab48:	482e      	ldr	r0, [pc, #184]	@ (801ac04 <udp_sendto_if+0xd8>)
 801ab4a:	f003 f933 	bl	801ddb4 <iprintf>
 801ab4e:	f06f 030f 	mvn.w	r3, #15
 801ab52:	e04f      	b.n	801abf4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d109      	bne.n	801ab6e <udp_sendto_if+0x42>
 801ab5a:	4b28      	ldr	r3, [pc, #160]	@ (801abfc <udp_sendto_if+0xd0>)
 801ab5c:	f240 2281 	movw	r2, #641	@ 0x281
 801ab60:	4929      	ldr	r1, [pc, #164]	@ (801ac08 <udp_sendto_if+0xdc>)
 801ab62:	4828      	ldr	r0, [pc, #160]	@ (801ac04 <udp_sendto_if+0xd8>)
 801ab64:	f003 f926 	bl	801ddb4 <iprintf>
 801ab68:	f06f 030f 	mvn.w	r3, #15
 801ab6c:	e042      	b.n	801abf4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d109      	bne.n	801ab88 <udp_sendto_if+0x5c>
 801ab74:	4b21      	ldr	r3, [pc, #132]	@ (801abfc <udp_sendto_if+0xd0>)
 801ab76:	f240 2282 	movw	r2, #642	@ 0x282
 801ab7a:	4924      	ldr	r1, [pc, #144]	@ (801ac0c <udp_sendto_if+0xe0>)
 801ab7c:	4821      	ldr	r0, [pc, #132]	@ (801ac04 <udp_sendto_if+0xd8>)
 801ab7e:	f003 f919 	bl	801ddb4 <iprintf>
 801ab82:	f06f 030f 	mvn.w	r3, #15
 801ab86:	e035      	b.n	801abf4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ab88:	6a3b      	ldr	r3, [r7, #32]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d109      	bne.n	801aba2 <udp_sendto_if+0x76>
 801ab8e:	4b1b      	ldr	r3, [pc, #108]	@ (801abfc <udp_sendto_if+0xd0>)
 801ab90:	f240 2283 	movw	r2, #643	@ 0x283
 801ab94:	491e      	ldr	r1, [pc, #120]	@ (801ac10 <udp_sendto_if+0xe4>)
 801ab96:	481b      	ldr	r0, [pc, #108]	@ (801ac04 <udp_sendto_if+0xd8>)
 801ab98:	f003 f90c 	bl	801ddb4 <iprintf>
 801ab9c:	f06f 030f 	mvn.w	r3, #15
 801aba0:	e028      	b.n	801abf4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d009      	beq.n	801abbc <udp_sendto_if+0x90>
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	2b00      	cmp	r3, #0
 801abae:	d005      	beq.n	801abbc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801abb8:	2be0      	cmp	r3, #224	@ 0xe0
 801abba:	d103      	bne.n	801abc4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801abbc:	6a3b      	ldr	r3, [r7, #32]
 801abbe:	3304      	adds	r3, #4
 801abc0:	617b      	str	r3, [r7, #20]
 801abc2:	e00b      	b.n	801abdc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	681a      	ldr	r2, [r3, #0]
 801abc8:	6a3b      	ldr	r3, [r7, #32]
 801abca:	3304      	adds	r3, #4
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	429a      	cmp	r2, r3
 801abd0:	d002      	beq.n	801abd8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801abd2:	f06f 0303 	mvn.w	r3, #3
 801abd6:	e00d      	b.n	801abf4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801abdc:	887a      	ldrh	r2, [r7, #2]
 801abde:	697b      	ldr	r3, [r7, #20]
 801abe0:	9301      	str	r3, [sp, #4]
 801abe2:	6a3b      	ldr	r3, [r7, #32]
 801abe4:	9300      	str	r3, [sp, #0]
 801abe6:	4613      	mov	r3, r2
 801abe8:	687a      	ldr	r2, [r7, #4]
 801abea:	68b9      	ldr	r1, [r7, #8]
 801abec:	68f8      	ldr	r0, [r7, #12]
 801abee:	f000 f811 	bl	801ac14 <udp_sendto_if_src>
 801abf2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801abf4:	4618      	mov	r0, r3
 801abf6:	3718      	adds	r7, #24
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}
 801abfc:	08021c5c 	.word	0x08021c5c
 801ac00:	08021dd0 	.word	0x08021dd0
 801ac04:	08021cb0 	.word	0x08021cb0
 801ac08:	08021dec 	.word	0x08021dec
 801ac0c:	08021e08 	.word	0x08021e08
 801ac10:	08021e28 	.word	0x08021e28

0801ac14 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b08c      	sub	sp, #48	@ 0x30
 801ac18:	af04      	add	r7, sp, #16
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	60b9      	str	r1, [r7, #8]
 801ac1e:	607a      	str	r2, [r7, #4]
 801ac20:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d109      	bne.n	801ac3c <udp_sendto_if_src+0x28>
 801ac28:	4b65      	ldr	r3, [pc, #404]	@ (801adc0 <udp_sendto_if_src+0x1ac>)
 801ac2a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801ac2e:	4965      	ldr	r1, [pc, #404]	@ (801adc4 <udp_sendto_if_src+0x1b0>)
 801ac30:	4865      	ldr	r0, [pc, #404]	@ (801adc8 <udp_sendto_if_src+0x1b4>)
 801ac32:	f003 f8bf 	bl	801ddb4 <iprintf>
 801ac36:	f06f 030f 	mvn.w	r3, #15
 801ac3a:	e0bc      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d109      	bne.n	801ac56 <udp_sendto_if_src+0x42>
 801ac42:	4b5f      	ldr	r3, [pc, #380]	@ (801adc0 <udp_sendto_if_src+0x1ac>)
 801ac44:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801ac48:	4960      	ldr	r1, [pc, #384]	@ (801adcc <udp_sendto_if_src+0x1b8>)
 801ac4a:	485f      	ldr	r0, [pc, #380]	@ (801adc8 <udp_sendto_if_src+0x1b4>)
 801ac4c:	f003 f8b2 	bl	801ddb4 <iprintf>
 801ac50:	f06f 030f 	mvn.w	r3, #15
 801ac54:	e0af      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d109      	bne.n	801ac70 <udp_sendto_if_src+0x5c>
 801ac5c:	4b58      	ldr	r3, [pc, #352]	@ (801adc0 <udp_sendto_if_src+0x1ac>)
 801ac5e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801ac62:	495b      	ldr	r1, [pc, #364]	@ (801add0 <udp_sendto_if_src+0x1bc>)
 801ac64:	4858      	ldr	r0, [pc, #352]	@ (801adc8 <udp_sendto_if_src+0x1b4>)
 801ac66:	f003 f8a5 	bl	801ddb4 <iprintf>
 801ac6a:	f06f 030f 	mvn.w	r3, #15
 801ac6e:	e0a2      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801ac70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d109      	bne.n	801ac8a <udp_sendto_if_src+0x76>
 801ac76:	4b52      	ldr	r3, [pc, #328]	@ (801adc0 <udp_sendto_if_src+0x1ac>)
 801ac78:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801ac7c:	4955      	ldr	r1, [pc, #340]	@ (801add4 <udp_sendto_if_src+0x1c0>)
 801ac7e:	4852      	ldr	r0, [pc, #328]	@ (801adc8 <udp_sendto_if_src+0x1b4>)
 801ac80:	f003 f898 	bl	801ddb4 <iprintf>
 801ac84:	f06f 030f 	mvn.w	r3, #15
 801ac88:	e095      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d109      	bne.n	801aca4 <udp_sendto_if_src+0x90>
 801ac90:	4b4b      	ldr	r3, [pc, #300]	@ (801adc0 <udp_sendto_if_src+0x1ac>)
 801ac92:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801ac96:	4950      	ldr	r1, [pc, #320]	@ (801add8 <udp_sendto_if_src+0x1c4>)
 801ac98:	484b      	ldr	r0, [pc, #300]	@ (801adc8 <udp_sendto_if_src+0x1b4>)
 801ac9a:	f003 f88b 	bl	801ddb4 <iprintf>
 801ac9e:	f06f 030f 	mvn.w	r3, #15
 801aca2:	e088      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	8a5b      	ldrh	r3, [r3, #18]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d10f      	bne.n	801accc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801acac:	68f9      	ldr	r1, [r7, #12]
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	8a5b      	ldrh	r3, [r3, #18]
 801acb2:	461a      	mov	r2, r3
 801acb4:	68f8      	ldr	r0, [r7, #12]
 801acb6:	f000 f893 	bl	801ade0 <udp_bind>
 801acba:	4603      	mov	r3, r0
 801acbc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801acbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d002      	beq.n	801accc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801acc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801acca:	e074      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	891b      	ldrh	r3, [r3, #8]
 801acd0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801acd4:	4293      	cmp	r3, r2
 801acd6:	d902      	bls.n	801acde <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801acd8:	f04f 33ff 	mov.w	r3, #4294967295
 801acdc:	e06b      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801acde:	2108      	movs	r1, #8
 801ace0:	68b8      	ldr	r0, [r7, #8]
 801ace2:	f7f8 ff5d 	bl	8013ba0 <pbuf_add_header>
 801ace6:	4603      	mov	r3, r0
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d015      	beq.n	801ad18 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801acec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801acf0:	2108      	movs	r1, #8
 801acf2:	2022      	movs	r0, #34	@ 0x22
 801acf4:	f7f8 fd02 	bl	80136fc <pbuf_alloc>
 801acf8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801acfa:	69fb      	ldr	r3, [r7, #28]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d102      	bne.n	801ad06 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801ad00:	f04f 33ff 	mov.w	r3, #4294967295
 801ad04:	e057      	b.n	801adb6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801ad06:	68bb      	ldr	r3, [r7, #8]
 801ad08:	891b      	ldrh	r3, [r3, #8]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d006      	beq.n	801ad1c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801ad0e:	68b9      	ldr	r1, [r7, #8]
 801ad10:	69f8      	ldr	r0, [r7, #28]
 801ad12:	f7f9 f931 	bl	8013f78 <pbuf_chain>
 801ad16:	e001      	b.n	801ad1c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801ad18:	68bb      	ldr	r3, [r7, #8]
 801ad1a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801ad1c:	69fb      	ldr	r3, [r7, #28]
 801ad1e:	895b      	ldrh	r3, [r3, #10]
 801ad20:	2b07      	cmp	r3, #7
 801ad22:	d806      	bhi.n	801ad32 <udp_sendto_if_src+0x11e>
 801ad24:	4b26      	ldr	r3, [pc, #152]	@ (801adc0 <udp_sendto_if_src+0x1ac>)
 801ad26:	f240 320d 	movw	r2, #781	@ 0x30d
 801ad2a:	492c      	ldr	r1, [pc, #176]	@ (801addc <udp_sendto_if_src+0x1c8>)
 801ad2c:	4826      	ldr	r0, [pc, #152]	@ (801adc8 <udp_sendto_if_src+0x1b4>)
 801ad2e:	f003 f841 	bl	801ddb4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801ad32:	69fb      	ldr	r3, [r7, #28]
 801ad34:	685b      	ldr	r3, [r3, #4]
 801ad36:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	8a5b      	ldrh	r3, [r3, #18]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	f7f7 fb07 	bl	8012350 <lwip_htons>
 801ad42:	4603      	mov	r3, r0
 801ad44:	461a      	mov	r2, r3
 801ad46:	697b      	ldr	r3, [r7, #20]
 801ad48:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801ad4a:	887b      	ldrh	r3, [r7, #2]
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f7 faff 	bl	8012350 <lwip_htons>
 801ad52:	4603      	mov	r3, r0
 801ad54:	461a      	mov	r2, r3
 801ad56:	697b      	ldr	r3, [r7, #20]
 801ad58:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801ad5a:	697b      	ldr	r3, [r7, #20]
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	719a      	strb	r2, [r3, #6]
 801ad60:	2200      	movs	r2, #0
 801ad62:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801ad64:	69fb      	ldr	r3, [r7, #28]
 801ad66:	891b      	ldrh	r3, [r3, #8]
 801ad68:	4618      	mov	r0, r3
 801ad6a:	f7f7 faf1 	bl	8012350 <lwip_htons>
 801ad6e:	4603      	mov	r3, r0
 801ad70:	461a      	mov	r2, r3
 801ad72:	697b      	ldr	r3, [r7, #20]
 801ad74:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801ad76:	2311      	movs	r3, #17
 801ad78:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	7adb      	ldrb	r3, [r3, #11]
 801ad7e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	7a9b      	ldrb	r3, [r3, #10]
 801ad84:	7cb9      	ldrb	r1, [r7, #18]
 801ad86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ad88:	9202      	str	r2, [sp, #8]
 801ad8a:	7cfa      	ldrb	r2, [r7, #19]
 801ad8c:	9201      	str	r2, [sp, #4]
 801ad8e:	9300      	str	r3, [sp, #0]
 801ad90:	460b      	mov	r3, r1
 801ad92:	687a      	ldr	r2, [r7, #4]
 801ad94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ad96:	69f8      	ldr	r0, [r7, #28]
 801ad98:	f001 fc48 	bl	801c62c <ip4_output_if_src>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801ada0:	69fa      	ldr	r2, [r7, #28]
 801ada2:	68bb      	ldr	r3, [r7, #8]
 801ada4:	429a      	cmp	r2, r3
 801ada6:	d004      	beq.n	801adb2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801ada8:	69f8      	ldr	r0, [r7, #28]
 801adaa:	f7f8 ffc1 	bl	8013d30 <pbuf_free>
    q = NULL;
 801adae:	2300      	movs	r3, #0
 801adb0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801adb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801adb6:	4618      	mov	r0, r3
 801adb8:	3720      	adds	r7, #32
 801adba:	46bd      	mov	sp, r7
 801adbc:	bd80      	pop	{r7, pc}
 801adbe:	bf00      	nop
 801adc0:	08021c5c 	.word	0x08021c5c
 801adc4:	08021e48 	.word	0x08021e48
 801adc8:	08021cb0 	.word	0x08021cb0
 801adcc:	08021e68 	.word	0x08021e68
 801add0:	08021e88 	.word	0x08021e88
 801add4:	08021eac 	.word	0x08021eac
 801add8:	08021ed0 	.word	0x08021ed0
 801addc:	08021ef4 	.word	0x08021ef4

0801ade0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b086      	sub	sp, #24
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	60f8      	str	r0, [r7, #12]
 801ade8:	60b9      	str	r1, [r7, #8]
 801adea:	4613      	mov	r3, r2
 801adec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801adee:	68bb      	ldr	r3, [r7, #8]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d101      	bne.n	801adf8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801adf4:	4b39      	ldr	r3, [pc, #228]	@ (801aedc <udp_bind+0xfc>)
 801adf6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d109      	bne.n	801ae12 <udp_bind+0x32>
 801adfe:	4b38      	ldr	r3, [pc, #224]	@ (801aee0 <udp_bind+0x100>)
 801ae00:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801ae04:	4937      	ldr	r1, [pc, #220]	@ (801aee4 <udp_bind+0x104>)
 801ae06:	4838      	ldr	r0, [pc, #224]	@ (801aee8 <udp_bind+0x108>)
 801ae08:	f002 ffd4 	bl	801ddb4 <iprintf>
 801ae0c:	f06f 030f 	mvn.w	r3, #15
 801ae10:	e060      	b.n	801aed4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801ae12:	2300      	movs	r3, #0
 801ae14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ae16:	4b35      	ldr	r3, [pc, #212]	@ (801aeec <udp_bind+0x10c>)
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	617b      	str	r3, [r7, #20]
 801ae1c:	e009      	b.n	801ae32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ae1e:	68fa      	ldr	r2, [r7, #12]
 801ae20:	697b      	ldr	r3, [r7, #20]
 801ae22:	429a      	cmp	r2, r3
 801ae24:	d102      	bne.n	801ae2c <udp_bind+0x4c>
      rebind = 1;
 801ae26:	2301      	movs	r3, #1
 801ae28:	74fb      	strb	r3, [r7, #19]
      break;
 801ae2a:	e005      	b.n	801ae38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	68db      	ldr	r3, [r3, #12]
 801ae30:	617b      	str	r3, [r7, #20]
 801ae32:	697b      	ldr	r3, [r7, #20]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d1f2      	bne.n	801ae1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ae38:	88fb      	ldrh	r3, [r7, #6]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d109      	bne.n	801ae52 <udp_bind+0x72>
    port = udp_new_port();
 801ae3e:	f7ff fc35 	bl	801a6ac <udp_new_port>
 801ae42:	4603      	mov	r3, r0
 801ae44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ae46:	88fb      	ldrh	r3, [r7, #6]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d12c      	bne.n	801aea6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ae4c:	f06f 0307 	mvn.w	r3, #7
 801ae50:	e040      	b.n	801aed4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ae52:	4b26      	ldr	r3, [pc, #152]	@ (801aeec <udp_bind+0x10c>)
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	617b      	str	r3, [r7, #20]
 801ae58:	e022      	b.n	801aea0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	429a      	cmp	r2, r3
 801ae60:	d01b      	beq.n	801ae9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ae62:	697b      	ldr	r3, [r7, #20]
 801ae64:	8a5b      	ldrh	r3, [r3, #18]
 801ae66:	88fa      	ldrh	r2, [r7, #6]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d116      	bne.n	801ae9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ae6c:	697b      	ldr	r3, [r7, #20]
 801ae6e:	681a      	ldr	r2, [r3, #0]
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ae74:	429a      	cmp	r2, r3
 801ae76:	d00d      	beq.n	801ae94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d00a      	beq.n	801ae94 <udp_bind+0xb4>
 801ae7e:	68bb      	ldr	r3, [r7, #8]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d006      	beq.n	801ae94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ae86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d003      	beq.n	801ae94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ae8c:	697b      	ldr	r3, [r7, #20]
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d102      	bne.n	801ae9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ae94:	f06f 0307 	mvn.w	r3, #7
 801ae98:	e01c      	b.n	801aed4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ae9a:	697b      	ldr	r3, [r7, #20]
 801ae9c:	68db      	ldr	r3, [r3, #12]
 801ae9e:	617b      	str	r3, [r7, #20]
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d1d9      	bne.n	801ae5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801aea6:	68bb      	ldr	r3, [r7, #8]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d002      	beq.n	801aeb2 <udp_bind+0xd2>
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	e000      	b.n	801aeb4 <udp_bind+0xd4>
 801aeb2:	2300      	movs	r3, #0
 801aeb4:	68fa      	ldr	r2, [r7, #12]
 801aeb6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	88fa      	ldrh	r2, [r7, #6]
 801aebc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801aebe:	7cfb      	ldrb	r3, [r7, #19]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d106      	bne.n	801aed2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801aec4:	4b09      	ldr	r3, [pc, #36]	@ (801aeec <udp_bind+0x10c>)
 801aec6:	681a      	ldr	r2, [r3, #0]
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801aecc:	4a07      	ldr	r2, [pc, #28]	@ (801aeec <udp_bind+0x10c>)
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801aed2:	2300      	movs	r3, #0
}
 801aed4:	4618      	mov	r0, r3
 801aed6:	3718      	adds	r7, #24
 801aed8:	46bd      	mov	sp, r7
 801aeda:	bd80      	pop	{r7, pc}
 801aedc:	08022868 	.word	0x08022868
 801aee0:	08021c5c 	.word	0x08021c5c
 801aee4:	08021f24 	.word	0x08021f24
 801aee8:	08021cb0 	.word	0x08021cb0
 801aeec:	24016e68 	.word	0x24016e68

0801aef0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b084      	sub	sp, #16
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	60f8      	str	r0, [r7, #12]
 801aef8:	60b9      	str	r1, [r7, #8]
 801aefa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d107      	bne.n	801af12 <udp_recv+0x22>
 801af02:	4b08      	ldr	r3, [pc, #32]	@ (801af24 <udp_recv+0x34>)
 801af04:	f240 428a 	movw	r2, #1162	@ 0x48a
 801af08:	4907      	ldr	r1, [pc, #28]	@ (801af28 <udp_recv+0x38>)
 801af0a:	4808      	ldr	r0, [pc, #32]	@ (801af2c <udp_recv+0x3c>)
 801af0c:	f002 ff52 	bl	801ddb4 <iprintf>
 801af10:	e005      	b.n	801af1e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	68ba      	ldr	r2, [r7, #8]
 801af16:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801af18:	68fb      	ldr	r3, [r7, #12]
 801af1a:	687a      	ldr	r2, [r7, #4]
 801af1c:	61da      	str	r2, [r3, #28]
}
 801af1e:	3710      	adds	r7, #16
 801af20:	46bd      	mov	sp, r7
 801af22:	bd80      	pop	{r7, pc}
 801af24:	08021c5c 	.word	0x08021c5c
 801af28:	08021f90 	.word	0x08021f90
 801af2c:	08021cb0 	.word	0x08021cb0

0801af30 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b084      	sub	sp, #16
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d107      	bne.n	801af4e <udp_remove+0x1e>
 801af3e:	4b19      	ldr	r3, [pc, #100]	@ (801afa4 <udp_remove+0x74>)
 801af40:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801af44:	4918      	ldr	r1, [pc, #96]	@ (801afa8 <udp_remove+0x78>)
 801af46:	4819      	ldr	r0, [pc, #100]	@ (801afac <udp_remove+0x7c>)
 801af48:	f002 ff34 	bl	801ddb4 <iprintf>
 801af4c:	e026      	b.n	801af9c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801af4e:	4b18      	ldr	r3, [pc, #96]	@ (801afb0 <udp_remove+0x80>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	687a      	ldr	r2, [r7, #4]
 801af54:	429a      	cmp	r2, r3
 801af56:	d105      	bne.n	801af64 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801af58:	4b15      	ldr	r3, [pc, #84]	@ (801afb0 <udp_remove+0x80>)
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	68db      	ldr	r3, [r3, #12]
 801af5e:	4a14      	ldr	r2, [pc, #80]	@ (801afb0 <udp_remove+0x80>)
 801af60:	6013      	str	r3, [r2, #0]
 801af62:	e017      	b.n	801af94 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801af64:	4b12      	ldr	r3, [pc, #72]	@ (801afb0 <udp_remove+0x80>)
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	60fb      	str	r3, [r7, #12]
 801af6a:	e010      	b.n	801af8e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	68db      	ldr	r3, [r3, #12]
 801af70:	2b00      	cmp	r3, #0
 801af72:	d009      	beq.n	801af88 <udp_remove+0x58>
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	68db      	ldr	r3, [r3, #12]
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d104      	bne.n	801af88 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	68da      	ldr	r2, [r3, #12]
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	60da      	str	r2, [r3, #12]
        break;
 801af86:	e005      	b.n	801af94 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	68db      	ldr	r3, [r3, #12]
 801af8c:	60fb      	str	r3, [r7, #12]
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d1eb      	bne.n	801af6c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801af94:	6879      	ldr	r1, [r7, #4]
 801af96:	2000      	movs	r0, #0
 801af98:	f7f7 fff0 	bl	8012f7c <memp_free>
}
 801af9c:	3710      	adds	r7, #16
 801af9e:	46bd      	mov	sp, r7
 801afa0:	bd80      	pop	{r7, pc}
 801afa2:	bf00      	nop
 801afa4:	08021c5c 	.word	0x08021c5c
 801afa8:	08021fa8 	.word	0x08021fa8
 801afac:	08021cb0 	.word	0x08021cb0
 801afb0:	24016e68 	.word	0x24016e68

0801afb4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b082      	sub	sp, #8
 801afb8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801afba:	2000      	movs	r0, #0
 801afbc:	f7f7 ff68 	bl	8012e90 <memp_malloc>
 801afc0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d007      	beq.n	801afd8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801afc8:	2220      	movs	r2, #32
 801afca:	2100      	movs	r1, #0
 801afcc:	6878      	ldr	r0, [r7, #4]
 801afce:	f003 f849 	bl	801e064 <memset>
    pcb->ttl = UDP_TTL;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	22ff      	movs	r2, #255	@ 0xff
 801afd6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801afd8:	687b      	ldr	r3, [r7, #4]
}
 801afda:	4618      	mov	r0, r3
 801afdc:	3708      	adds	r7, #8
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}

0801afe2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801afe2:	b580      	push	{r7, lr}
 801afe4:	b084      	sub	sp, #16
 801afe6:	af00      	add	r7, sp, #0
 801afe8:	4603      	mov	r3, r0
 801afea:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801afec:	f7ff ffe2 	bl	801afb4 <udp_new>
 801aff0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801aff2:	68fb      	ldr	r3, [r7, #12]
}
 801aff4:	4618      	mov	r0, r3
 801aff6:	3710      	adds	r7, #16
 801aff8:	46bd      	mov	sp, r7
 801affa:	bd80      	pop	{r7, pc}

0801affc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801affc:	b480      	push	{r7}
 801affe:	b085      	sub	sp, #20
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
 801b004:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	d01e      	beq.n	801b04a <udp_netif_ip_addr_changed+0x4e>
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d01a      	beq.n	801b04a <udp_netif_ip_addr_changed+0x4e>
 801b014:	683b      	ldr	r3, [r7, #0]
 801b016:	2b00      	cmp	r3, #0
 801b018:	d017      	beq.n	801b04a <udp_netif_ip_addr_changed+0x4e>
 801b01a:	683b      	ldr	r3, [r7, #0]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d013      	beq.n	801b04a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b022:	4b0d      	ldr	r3, [pc, #52]	@ (801b058 <udp_netif_ip_addr_changed+0x5c>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	60fb      	str	r3, [r7, #12]
 801b028:	e00c      	b.n	801b044 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	681a      	ldr	r2, [r3, #0]
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	429a      	cmp	r2, r3
 801b034:	d103      	bne.n	801b03e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b036:	683b      	ldr	r3, [r7, #0]
 801b038:	681a      	ldr	r2, [r3, #0]
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	68db      	ldr	r3, [r3, #12]
 801b042:	60fb      	str	r3, [r7, #12]
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d1ef      	bne.n	801b02a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b04a:	bf00      	nop
 801b04c:	3714      	adds	r7, #20
 801b04e:	46bd      	mov	sp, r7
 801b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b054:	4770      	bx	lr
 801b056:	bf00      	nop
 801b058:	24016e68 	.word	0x24016e68

0801b05c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b082      	sub	sp, #8
 801b060:	af00      	add	r7, sp, #0
 801b062:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b064:	4915      	ldr	r1, [pc, #84]	@ (801b0bc <etharp_free_entry+0x60>)
 801b066:	687a      	ldr	r2, [r7, #4]
 801b068:	4613      	mov	r3, r2
 801b06a:	005b      	lsls	r3, r3, #1
 801b06c:	4413      	add	r3, r2
 801b06e:	00db      	lsls	r3, r3, #3
 801b070:	440b      	add	r3, r1
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d013      	beq.n	801b0a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b078:	4910      	ldr	r1, [pc, #64]	@ (801b0bc <etharp_free_entry+0x60>)
 801b07a:	687a      	ldr	r2, [r7, #4]
 801b07c:	4613      	mov	r3, r2
 801b07e:	005b      	lsls	r3, r3, #1
 801b080:	4413      	add	r3, r2
 801b082:	00db      	lsls	r3, r3, #3
 801b084:	440b      	add	r3, r1
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	4618      	mov	r0, r3
 801b08a:	f7f8 fe51 	bl	8013d30 <pbuf_free>
    arp_table[i].q = NULL;
 801b08e:	490b      	ldr	r1, [pc, #44]	@ (801b0bc <etharp_free_entry+0x60>)
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	4613      	mov	r3, r2
 801b094:	005b      	lsls	r3, r3, #1
 801b096:	4413      	add	r3, r2
 801b098:	00db      	lsls	r3, r3, #3
 801b09a:	440b      	add	r3, r1
 801b09c:	2200      	movs	r2, #0
 801b09e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b0a0:	4906      	ldr	r1, [pc, #24]	@ (801b0bc <etharp_free_entry+0x60>)
 801b0a2:	687a      	ldr	r2, [r7, #4]
 801b0a4:	4613      	mov	r3, r2
 801b0a6:	005b      	lsls	r3, r3, #1
 801b0a8:	4413      	add	r3, r2
 801b0aa:	00db      	lsls	r3, r3, #3
 801b0ac:	440b      	add	r3, r1
 801b0ae:	3314      	adds	r3, #20
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b0b4:	bf00      	nop
 801b0b6:	3708      	adds	r7, #8
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	bd80      	pop	{r7, pc}
 801b0bc:	24016e6c 	.word	0x24016e6c

0801b0c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	607b      	str	r3, [r7, #4]
 801b0ca:	e096      	b.n	801b1fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b0cc:	494f      	ldr	r1, [pc, #316]	@ (801b20c <etharp_tmr+0x14c>)
 801b0ce:	687a      	ldr	r2, [r7, #4]
 801b0d0:	4613      	mov	r3, r2
 801b0d2:	005b      	lsls	r3, r3, #1
 801b0d4:	4413      	add	r3, r2
 801b0d6:	00db      	lsls	r3, r3, #3
 801b0d8:	440b      	add	r3, r1
 801b0da:	3314      	adds	r3, #20
 801b0dc:	781b      	ldrb	r3, [r3, #0]
 801b0de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b0e0:	78fb      	ldrb	r3, [r7, #3]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	f000 8086 	beq.w	801b1f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b0e8:	4948      	ldr	r1, [pc, #288]	@ (801b20c <etharp_tmr+0x14c>)
 801b0ea:	687a      	ldr	r2, [r7, #4]
 801b0ec:	4613      	mov	r3, r2
 801b0ee:	005b      	lsls	r3, r3, #1
 801b0f0:	4413      	add	r3, r2
 801b0f2:	00db      	lsls	r3, r3, #3
 801b0f4:	440b      	add	r3, r1
 801b0f6:	3312      	adds	r3, #18
 801b0f8:	881b      	ldrh	r3, [r3, #0]
 801b0fa:	3301      	adds	r3, #1
 801b0fc:	b298      	uxth	r0, r3
 801b0fe:	4943      	ldr	r1, [pc, #268]	@ (801b20c <etharp_tmr+0x14c>)
 801b100:	687a      	ldr	r2, [r7, #4]
 801b102:	4613      	mov	r3, r2
 801b104:	005b      	lsls	r3, r3, #1
 801b106:	4413      	add	r3, r2
 801b108:	00db      	lsls	r3, r3, #3
 801b10a:	440b      	add	r3, r1
 801b10c:	3312      	adds	r3, #18
 801b10e:	4602      	mov	r2, r0
 801b110:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b112:	493e      	ldr	r1, [pc, #248]	@ (801b20c <etharp_tmr+0x14c>)
 801b114:	687a      	ldr	r2, [r7, #4]
 801b116:	4613      	mov	r3, r2
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	4413      	add	r3, r2
 801b11c:	00db      	lsls	r3, r3, #3
 801b11e:	440b      	add	r3, r1
 801b120:	3312      	adds	r3, #18
 801b122:	881b      	ldrh	r3, [r3, #0]
 801b124:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801b128:	d215      	bcs.n	801b156 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b12a:	4938      	ldr	r1, [pc, #224]	@ (801b20c <etharp_tmr+0x14c>)
 801b12c:	687a      	ldr	r2, [r7, #4]
 801b12e:	4613      	mov	r3, r2
 801b130:	005b      	lsls	r3, r3, #1
 801b132:	4413      	add	r3, r2
 801b134:	00db      	lsls	r3, r3, #3
 801b136:	440b      	add	r3, r1
 801b138:	3314      	adds	r3, #20
 801b13a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b13c:	2b01      	cmp	r3, #1
 801b13e:	d10e      	bne.n	801b15e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b140:	4932      	ldr	r1, [pc, #200]	@ (801b20c <etharp_tmr+0x14c>)
 801b142:	687a      	ldr	r2, [r7, #4]
 801b144:	4613      	mov	r3, r2
 801b146:	005b      	lsls	r3, r3, #1
 801b148:	4413      	add	r3, r2
 801b14a:	00db      	lsls	r3, r3, #3
 801b14c:	440b      	add	r3, r1
 801b14e:	3312      	adds	r3, #18
 801b150:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b152:	2b04      	cmp	r3, #4
 801b154:	d903      	bls.n	801b15e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b156:	6878      	ldr	r0, [r7, #4]
 801b158:	f7ff ff80 	bl	801b05c <etharp_free_entry>
 801b15c:	e04a      	b.n	801b1f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b15e:	492b      	ldr	r1, [pc, #172]	@ (801b20c <etharp_tmr+0x14c>)
 801b160:	687a      	ldr	r2, [r7, #4]
 801b162:	4613      	mov	r3, r2
 801b164:	005b      	lsls	r3, r3, #1
 801b166:	4413      	add	r3, r2
 801b168:	00db      	lsls	r3, r3, #3
 801b16a:	440b      	add	r3, r1
 801b16c:	3314      	adds	r3, #20
 801b16e:	781b      	ldrb	r3, [r3, #0]
 801b170:	2b03      	cmp	r3, #3
 801b172:	d10a      	bne.n	801b18a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b174:	4925      	ldr	r1, [pc, #148]	@ (801b20c <etharp_tmr+0x14c>)
 801b176:	687a      	ldr	r2, [r7, #4]
 801b178:	4613      	mov	r3, r2
 801b17a:	005b      	lsls	r3, r3, #1
 801b17c:	4413      	add	r3, r2
 801b17e:	00db      	lsls	r3, r3, #3
 801b180:	440b      	add	r3, r1
 801b182:	3314      	adds	r3, #20
 801b184:	2204      	movs	r2, #4
 801b186:	701a      	strb	r2, [r3, #0]
 801b188:	e034      	b.n	801b1f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b18a:	4920      	ldr	r1, [pc, #128]	@ (801b20c <etharp_tmr+0x14c>)
 801b18c:	687a      	ldr	r2, [r7, #4]
 801b18e:	4613      	mov	r3, r2
 801b190:	005b      	lsls	r3, r3, #1
 801b192:	4413      	add	r3, r2
 801b194:	00db      	lsls	r3, r3, #3
 801b196:	440b      	add	r3, r1
 801b198:	3314      	adds	r3, #20
 801b19a:	781b      	ldrb	r3, [r3, #0]
 801b19c:	2b04      	cmp	r3, #4
 801b19e:	d10a      	bne.n	801b1b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b1a0:	491a      	ldr	r1, [pc, #104]	@ (801b20c <etharp_tmr+0x14c>)
 801b1a2:	687a      	ldr	r2, [r7, #4]
 801b1a4:	4613      	mov	r3, r2
 801b1a6:	005b      	lsls	r3, r3, #1
 801b1a8:	4413      	add	r3, r2
 801b1aa:	00db      	lsls	r3, r3, #3
 801b1ac:	440b      	add	r3, r1
 801b1ae:	3314      	adds	r3, #20
 801b1b0:	2202      	movs	r2, #2
 801b1b2:	701a      	strb	r2, [r3, #0]
 801b1b4:	e01e      	b.n	801b1f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b1b6:	4915      	ldr	r1, [pc, #84]	@ (801b20c <etharp_tmr+0x14c>)
 801b1b8:	687a      	ldr	r2, [r7, #4]
 801b1ba:	4613      	mov	r3, r2
 801b1bc:	005b      	lsls	r3, r3, #1
 801b1be:	4413      	add	r3, r2
 801b1c0:	00db      	lsls	r3, r3, #3
 801b1c2:	440b      	add	r3, r1
 801b1c4:	3314      	adds	r3, #20
 801b1c6:	781b      	ldrb	r3, [r3, #0]
 801b1c8:	2b01      	cmp	r3, #1
 801b1ca:	d113      	bne.n	801b1f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b1cc:	490f      	ldr	r1, [pc, #60]	@ (801b20c <etharp_tmr+0x14c>)
 801b1ce:	687a      	ldr	r2, [r7, #4]
 801b1d0:	4613      	mov	r3, r2
 801b1d2:	005b      	lsls	r3, r3, #1
 801b1d4:	4413      	add	r3, r2
 801b1d6:	00db      	lsls	r3, r3, #3
 801b1d8:	440b      	add	r3, r1
 801b1da:	3308      	adds	r3, #8
 801b1dc:	6818      	ldr	r0, [r3, #0]
 801b1de:	687a      	ldr	r2, [r7, #4]
 801b1e0:	4613      	mov	r3, r2
 801b1e2:	005b      	lsls	r3, r3, #1
 801b1e4:	4413      	add	r3, r2
 801b1e6:	00db      	lsls	r3, r3, #3
 801b1e8:	4a08      	ldr	r2, [pc, #32]	@ (801b20c <etharp_tmr+0x14c>)
 801b1ea:	4413      	add	r3, r2
 801b1ec:	3304      	adds	r3, #4
 801b1ee:	4619      	mov	r1, r3
 801b1f0:	f000 fe6e 	bl	801bed0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	3301      	adds	r3, #1
 801b1f8:	607b      	str	r3, [r7, #4]
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	2b09      	cmp	r3, #9
 801b1fe:	f77f af65 	ble.w	801b0cc <etharp_tmr+0xc>
      }
    }
  }
}
 801b202:	bf00      	nop
 801b204:	bf00      	nop
 801b206:	3708      	adds	r7, #8
 801b208:	46bd      	mov	sp, r7
 801b20a:	bd80      	pop	{r7, pc}
 801b20c:	24016e6c 	.word	0x24016e6c

0801b210 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b210:	b580      	push	{r7, lr}
 801b212:	b08a      	sub	sp, #40	@ 0x28
 801b214:	af00      	add	r7, sp, #0
 801b216:	60f8      	str	r0, [r7, #12]
 801b218:	460b      	mov	r3, r1
 801b21a:	607a      	str	r2, [r7, #4]
 801b21c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b21e:	230a      	movs	r3, #10
 801b220:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801b222:	230a      	movs	r3, #10
 801b224:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b226:	230a      	movs	r3, #10
 801b228:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801b22a:	2300      	movs	r3, #0
 801b22c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b22e:	230a      	movs	r3, #10
 801b230:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b232:	2300      	movs	r3, #0
 801b234:	83bb      	strh	r3, [r7, #28]
 801b236:	2300      	movs	r3, #0
 801b238:	837b      	strh	r3, [r7, #26]
 801b23a:	2300      	movs	r3, #0
 801b23c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b23e:	2300      	movs	r3, #0
 801b240:	843b      	strh	r3, [r7, #32]
 801b242:	e0ae      	b.n	801b3a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b248:	49a6      	ldr	r1, [pc, #664]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b24a:	4613      	mov	r3, r2
 801b24c:	005b      	lsls	r3, r3, #1
 801b24e:	4413      	add	r3, r2
 801b250:	00db      	lsls	r3, r3, #3
 801b252:	440b      	add	r3, r1
 801b254:	3314      	adds	r3, #20
 801b256:	781b      	ldrb	r3, [r3, #0]
 801b258:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b25a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b25e:	2b0a      	cmp	r3, #10
 801b260:	d105      	bne.n	801b26e <etharp_find_entry+0x5e>
 801b262:	7dfb      	ldrb	r3, [r7, #23]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d102      	bne.n	801b26e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b268:	8c3b      	ldrh	r3, [r7, #32]
 801b26a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801b26c:	e095      	b.n	801b39a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b26e:	7dfb      	ldrb	r3, [r7, #23]
 801b270:	2b00      	cmp	r3, #0
 801b272:	f000 8092 	beq.w	801b39a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b276:	7dfb      	ldrb	r3, [r7, #23]
 801b278:	2b01      	cmp	r3, #1
 801b27a:	d009      	beq.n	801b290 <etharp_find_entry+0x80>
 801b27c:	7dfb      	ldrb	r3, [r7, #23]
 801b27e:	2b01      	cmp	r3, #1
 801b280:	d806      	bhi.n	801b290 <etharp_find_entry+0x80>
 801b282:	4b99      	ldr	r3, [pc, #612]	@ (801b4e8 <etharp_find_entry+0x2d8>)
 801b284:	f240 1223 	movw	r2, #291	@ 0x123
 801b288:	4998      	ldr	r1, [pc, #608]	@ (801b4ec <etharp_find_entry+0x2dc>)
 801b28a:	4899      	ldr	r0, [pc, #612]	@ (801b4f0 <etharp_find_entry+0x2e0>)
 801b28c:	f002 fd92 	bl	801ddb4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d020      	beq.n	801b2d8 <etharp_find_entry+0xc8>
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	6819      	ldr	r1, [r3, #0]
 801b29a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b29e:	4891      	ldr	r0, [pc, #580]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b2a0:	4613      	mov	r3, r2
 801b2a2:	005b      	lsls	r3, r3, #1
 801b2a4:	4413      	add	r3, r2
 801b2a6:	00db      	lsls	r3, r3, #3
 801b2a8:	4403      	add	r3, r0
 801b2aa:	3304      	adds	r3, #4
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	4299      	cmp	r1, r3
 801b2b0:	d112      	bne.n	801b2d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d00c      	beq.n	801b2d2 <etharp_find_entry+0xc2>
 801b2b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b2bc:	4989      	ldr	r1, [pc, #548]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b2be:	4613      	mov	r3, r2
 801b2c0:	005b      	lsls	r3, r3, #1
 801b2c2:	4413      	add	r3, r2
 801b2c4:	00db      	lsls	r3, r3, #3
 801b2c6:	440b      	add	r3, r1
 801b2c8:	3308      	adds	r3, #8
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	687a      	ldr	r2, [r7, #4]
 801b2ce:	429a      	cmp	r2, r3
 801b2d0:	d102      	bne.n	801b2d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b2d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b2d6:	e100      	b.n	801b4da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b2d8:	7dfb      	ldrb	r3, [r7, #23]
 801b2da:	2b01      	cmp	r3, #1
 801b2dc:	d140      	bne.n	801b360 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b2de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b2e2:	4980      	ldr	r1, [pc, #512]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b2e4:	4613      	mov	r3, r2
 801b2e6:	005b      	lsls	r3, r3, #1
 801b2e8:	4413      	add	r3, r2
 801b2ea:	00db      	lsls	r3, r3, #3
 801b2ec:	440b      	add	r3, r1
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d01a      	beq.n	801b32a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b2f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b2f8:	497a      	ldr	r1, [pc, #488]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b2fa:	4613      	mov	r3, r2
 801b2fc:	005b      	lsls	r3, r3, #1
 801b2fe:	4413      	add	r3, r2
 801b300:	00db      	lsls	r3, r3, #3
 801b302:	440b      	add	r3, r1
 801b304:	3312      	adds	r3, #18
 801b306:	881b      	ldrh	r3, [r3, #0]
 801b308:	8bba      	ldrh	r2, [r7, #28]
 801b30a:	429a      	cmp	r2, r3
 801b30c:	d845      	bhi.n	801b39a <etharp_find_entry+0x18a>
            old_queue = i;
 801b30e:	8c3b      	ldrh	r3, [r7, #32]
 801b310:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b312:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b316:	4973      	ldr	r1, [pc, #460]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b318:	4613      	mov	r3, r2
 801b31a:	005b      	lsls	r3, r3, #1
 801b31c:	4413      	add	r3, r2
 801b31e:	00db      	lsls	r3, r3, #3
 801b320:	440b      	add	r3, r1
 801b322:	3312      	adds	r3, #18
 801b324:	881b      	ldrh	r3, [r3, #0]
 801b326:	83bb      	strh	r3, [r7, #28]
 801b328:	e037      	b.n	801b39a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b32a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b32e:	496d      	ldr	r1, [pc, #436]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b330:	4613      	mov	r3, r2
 801b332:	005b      	lsls	r3, r3, #1
 801b334:	4413      	add	r3, r2
 801b336:	00db      	lsls	r3, r3, #3
 801b338:	440b      	add	r3, r1
 801b33a:	3312      	adds	r3, #18
 801b33c:	881b      	ldrh	r3, [r3, #0]
 801b33e:	8b7a      	ldrh	r2, [r7, #26]
 801b340:	429a      	cmp	r2, r3
 801b342:	d82a      	bhi.n	801b39a <etharp_find_entry+0x18a>
            old_pending = i;
 801b344:	8c3b      	ldrh	r3, [r7, #32]
 801b346:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801b348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b34c:	4965      	ldr	r1, [pc, #404]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b34e:	4613      	mov	r3, r2
 801b350:	005b      	lsls	r3, r3, #1
 801b352:	4413      	add	r3, r2
 801b354:	00db      	lsls	r3, r3, #3
 801b356:	440b      	add	r3, r1
 801b358:	3312      	adds	r3, #18
 801b35a:	881b      	ldrh	r3, [r3, #0]
 801b35c:	837b      	strh	r3, [r7, #26]
 801b35e:	e01c      	b.n	801b39a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b360:	7dfb      	ldrb	r3, [r7, #23]
 801b362:	2b01      	cmp	r3, #1
 801b364:	d919      	bls.n	801b39a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b36a:	495e      	ldr	r1, [pc, #376]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b36c:	4613      	mov	r3, r2
 801b36e:	005b      	lsls	r3, r3, #1
 801b370:	4413      	add	r3, r2
 801b372:	00db      	lsls	r3, r3, #3
 801b374:	440b      	add	r3, r1
 801b376:	3312      	adds	r3, #18
 801b378:	881b      	ldrh	r3, [r3, #0]
 801b37a:	8b3a      	ldrh	r2, [r7, #24]
 801b37c:	429a      	cmp	r2, r3
 801b37e:	d80c      	bhi.n	801b39a <etharp_find_entry+0x18a>
            old_stable = i;
 801b380:	8c3b      	ldrh	r3, [r7, #32]
 801b382:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801b384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b388:	4956      	ldr	r1, [pc, #344]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b38a:	4613      	mov	r3, r2
 801b38c:	005b      	lsls	r3, r3, #1
 801b38e:	4413      	add	r3, r2
 801b390:	00db      	lsls	r3, r3, #3
 801b392:	440b      	add	r3, r1
 801b394:	3312      	adds	r3, #18
 801b396:	881b      	ldrh	r3, [r3, #0]
 801b398:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b39a:	8c3b      	ldrh	r3, [r7, #32]
 801b39c:	3301      	adds	r3, #1
 801b39e:	b29b      	uxth	r3, r3
 801b3a0:	843b      	strh	r3, [r7, #32]
 801b3a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b3a6:	2b09      	cmp	r3, #9
 801b3a8:	f77f af4c 	ble.w	801b244 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b3ac:	7afb      	ldrb	r3, [r7, #11]
 801b3ae:	f003 0302 	and.w	r3, r3, #2
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d108      	bne.n	801b3c8 <etharp_find_entry+0x1b8>
 801b3b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b3ba:	2b0a      	cmp	r3, #10
 801b3bc:	d107      	bne.n	801b3ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b3be:	7afb      	ldrb	r3, [r7, #11]
 801b3c0:	f003 0301 	and.w	r3, r3, #1
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d102      	bne.n	801b3ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 801b3cc:	e085      	b.n	801b4da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b3ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801b3d2:	2b09      	cmp	r3, #9
 801b3d4:	dc02      	bgt.n	801b3dc <etharp_find_entry+0x1cc>
    i = empty;
 801b3d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b3d8:	843b      	strh	r3, [r7, #32]
 801b3da:	e039      	b.n	801b450 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b3dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801b3e0:	2b09      	cmp	r3, #9
 801b3e2:	dc14      	bgt.n	801b40e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b3e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b3e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b3e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b3ec:	493d      	ldr	r1, [pc, #244]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b3ee:	4613      	mov	r3, r2
 801b3f0:	005b      	lsls	r3, r3, #1
 801b3f2:	4413      	add	r3, r2
 801b3f4:	00db      	lsls	r3, r3, #3
 801b3f6:	440b      	add	r3, r1
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d018      	beq.n	801b430 <etharp_find_entry+0x220>
 801b3fe:	4b3a      	ldr	r3, [pc, #232]	@ (801b4e8 <etharp_find_entry+0x2d8>)
 801b400:	f240 126d 	movw	r2, #365	@ 0x16d
 801b404:	493b      	ldr	r1, [pc, #236]	@ (801b4f4 <etharp_find_entry+0x2e4>)
 801b406:	483a      	ldr	r0, [pc, #232]	@ (801b4f0 <etharp_find_entry+0x2e0>)
 801b408:	f002 fcd4 	bl	801ddb4 <iprintf>
 801b40c:	e010      	b.n	801b430 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b40e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801b412:	2b09      	cmp	r3, #9
 801b414:	dc02      	bgt.n	801b41c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801b418:	843b      	strh	r3, [r7, #32]
 801b41a:	e009      	b.n	801b430 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b41c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b420:	2b09      	cmp	r3, #9
 801b422:	dc02      	bgt.n	801b42a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b424:	8bfb      	ldrh	r3, [r7, #30]
 801b426:	843b      	strh	r3, [r7, #32]
 801b428:	e002      	b.n	801b430 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b42a:	f04f 33ff 	mov.w	r3, #4294967295
 801b42e:	e054      	b.n	801b4da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b430:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b434:	2b09      	cmp	r3, #9
 801b436:	dd06      	ble.n	801b446 <etharp_find_entry+0x236>
 801b438:	4b2b      	ldr	r3, [pc, #172]	@ (801b4e8 <etharp_find_entry+0x2d8>)
 801b43a:	f240 127f 	movw	r2, #383	@ 0x17f
 801b43e:	492e      	ldr	r1, [pc, #184]	@ (801b4f8 <etharp_find_entry+0x2e8>)
 801b440:	482b      	ldr	r0, [pc, #172]	@ (801b4f0 <etharp_find_entry+0x2e0>)
 801b442:	f002 fcb7 	bl	801ddb4 <iprintf>
    etharp_free_entry(i);
 801b446:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7ff fe06 	bl	801b05c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b450:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b454:	2b09      	cmp	r3, #9
 801b456:	dd06      	ble.n	801b466 <etharp_find_entry+0x256>
 801b458:	4b23      	ldr	r3, [pc, #140]	@ (801b4e8 <etharp_find_entry+0x2d8>)
 801b45a:	f240 1283 	movw	r2, #387	@ 0x183
 801b45e:	4926      	ldr	r1, [pc, #152]	@ (801b4f8 <etharp_find_entry+0x2e8>)
 801b460:	4823      	ldr	r0, [pc, #140]	@ (801b4f0 <etharp_find_entry+0x2e0>)
 801b462:	f002 fca7 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b466:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b46a:	491e      	ldr	r1, [pc, #120]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b46c:	4613      	mov	r3, r2
 801b46e:	005b      	lsls	r3, r3, #1
 801b470:	4413      	add	r3, r2
 801b472:	00db      	lsls	r3, r3, #3
 801b474:	440b      	add	r3, r1
 801b476:	3314      	adds	r3, #20
 801b478:	781b      	ldrb	r3, [r3, #0]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d006      	beq.n	801b48c <etharp_find_entry+0x27c>
 801b47e:	4b1a      	ldr	r3, [pc, #104]	@ (801b4e8 <etharp_find_entry+0x2d8>)
 801b480:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801b484:	491d      	ldr	r1, [pc, #116]	@ (801b4fc <etharp_find_entry+0x2ec>)
 801b486:	481a      	ldr	r0, [pc, #104]	@ (801b4f0 <etharp_find_entry+0x2e0>)
 801b488:	f002 fc94 	bl	801ddb4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d00b      	beq.n	801b4aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	6819      	ldr	r1, [r3, #0]
 801b49a:	4812      	ldr	r0, [pc, #72]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b49c:	4613      	mov	r3, r2
 801b49e:	005b      	lsls	r3, r3, #1
 801b4a0:	4413      	add	r3, r2
 801b4a2:	00db      	lsls	r3, r3, #3
 801b4a4:	4403      	add	r3, r0
 801b4a6:	3304      	adds	r3, #4
 801b4a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b4aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b4ae:	490d      	ldr	r1, [pc, #52]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b4b0:	4613      	mov	r3, r2
 801b4b2:	005b      	lsls	r3, r3, #1
 801b4b4:	4413      	add	r3, r2
 801b4b6:	00db      	lsls	r3, r3, #3
 801b4b8:	440b      	add	r3, r1
 801b4ba:	3312      	adds	r3, #18
 801b4bc:	2200      	movs	r2, #0
 801b4be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b4c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b4c4:	4907      	ldr	r1, [pc, #28]	@ (801b4e4 <etharp_find_entry+0x2d4>)
 801b4c6:	4613      	mov	r3, r2
 801b4c8:	005b      	lsls	r3, r3, #1
 801b4ca:	4413      	add	r3, r2
 801b4cc:	00db      	lsls	r3, r3, #3
 801b4ce:	440b      	add	r3, r1
 801b4d0:	3308      	adds	r3, #8
 801b4d2:	687a      	ldr	r2, [r7, #4]
 801b4d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b4d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	3728      	adds	r7, #40	@ 0x28
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bd80      	pop	{r7, pc}
 801b4e2:	bf00      	nop
 801b4e4:	24016e6c 	.word	0x24016e6c
 801b4e8:	08021fc0 	.word	0x08021fc0
 801b4ec:	08021ff8 	.word	0x08021ff8
 801b4f0:	08022038 	.word	0x08022038
 801b4f4:	08022060 	.word	0x08022060
 801b4f8:	08022078 	.word	0x08022078
 801b4fc:	0802208c 	.word	0x0802208c

0801b500 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b500:	b580      	push	{r7, lr}
 801b502:	b088      	sub	sp, #32
 801b504:	af02      	add	r7, sp, #8
 801b506:	60f8      	str	r0, [r7, #12]
 801b508:	60b9      	str	r1, [r7, #8]
 801b50a:	607a      	str	r2, [r7, #4]
 801b50c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b514:	2b06      	cmp	r3, #6
 801b516:	d006      	beq.n	801b526 <etharp_update_arp_entry+0x26>
 801b518:	4b48      	ldr	r3, [pc, #288]	@ (801b63c <etharp_update_arp_entry+0x13c>)
 801b51a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b51e:	4948      	ldr	r1, [pc, #288]	@ (801b640 <etharp_update_arp_entry+0x140>)
 801b520:	4848      	ldr	r0, [pc, #288]	@ (801b644 <etharp_update_arp_entry+0x144>)
 801b522:	f002 fc47 	bl	801ddb4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d012      	beq.n	801b552 <etharp_update_arp_entry+0x52>
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d00e      	beq.n	801b552 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	68f9      	ldr	r1, [r7, #12]
 801b53a:	4618      	mov	r0, r3
 801b53c:	f001 f924 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801b540:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b542:	2b00      	cmp	r3, #0
 801b544:	d105      	bne.n	801b552 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b54e:	2be0      	cmp	r3, #224	@ 0xe0
 801b550:	d102      	bne.n	801b558 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b552:	f06f 030f 	mvn.w	r3, #15
 801b556:	e06c      	b.n	801b632 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b558:	78fb      	ldrb	r3, [r7, #3]
 801b55a:	68fa      	ldr	r2, [r7, #12]
 801b55c:	4619      	mov	r1, r3
 801b55e:	68b8      	ldr	r0, [r7, #8]
 801b560:	f7ff fe56 	bl	801b210 <etharp_find_entry>
 801b564:	4603      	mov	r3, r0
 801b566:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	da02      	bge.n	801b576 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b570:	8afb      	ldrh	r3, [r7, #22]
 801b572:	b25b      	sxtb	r3, r3
 801b574:	e05d      	b.n	801b632 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b576:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b57a:	4933      	ldr	r1, [pc, #204]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b57c:	4613      	mov	r3, r2
 801b57e:	005b      	lsls	r3, r3, #1
 801b580:	4413      	add	r3, r2
 801b582:	00db      	lsls	r3, r3, #3
 801b584:	440b      	add	r3, r1
 801b586:	3314      	adds	r3, #20
 801b588:	2202      	movs	r2, #2
 801b58a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b58c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b590:	492d      	ldr	r1, [pc, #180]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b592:	4613      	mov	r3, r2
 801b594:	005b      	lsls	r3, r3, #1
 801b596:	4413      	add	r3, r2
 801b598:	00db      	lsls	r3, r3, #3
 801b59a:	440b      	add	r3, r1
 801b59c:	3308      	adds	r3, #8
 801b59e:	68fa      	ldr	r2, [r7, #12]
 801b5a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b5a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	005b      	lsls	r3, r3, #1
 801b5aa:	4413      	add	r3, r2
 801b5ac:	00db      	lsls	r3, r3, #3
 801b5ae:	3308      	adds	r3, #8
 801b5b0:	4a25      	ldr	r2, [pc, #148]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b5b2:	4413      	add	r3, r2
 801b5b4:	3304      	adds	r3, #4
 801b5b6:	2206      	movs	r2, #6
 801b5b8:	6879      	ldr	r1, [r7, #4]
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f002 fe2d 	bl	801e21a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b5c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b5c4:	4920      	ldr	r1, [pc, #128]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b5c6:	4613      	mov	r3, r2
 801b5c8:	005b      	lsls	r3, r3, #1
 801b5ca:	4413      	add	r3, r2
 801b5cc:	00db      	lsls	r3, r3, #3
 801b5ce:	440b      	add	r3, r1
 801b5d0:	3312      	adds	r3, #18
 801b5d2:	2200      	movs	r2, #0
 801b5d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b5d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b5da:	491b      	ldr	r1, [pc, #108]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b5dc:	4613      	mov	r3, r2
 801b5de:	005b      	lsls	r3, r3, #1
 801b5e0:	4413      	add	r3, r2
 801b5e2:	00db      	lsls	r3, r3, #3
 801b5e4:	440b      	add	r3, r1
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d021      	beq.n	801b630 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b5ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b5f0:	4915      	ldr	r1, [pc, #84]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b5f2:	4613      	mov	r3, r2
 801b5f4:	005b      	lsls	r3, r3, #1
 801b5f6:	4413      	add	r3, r2
 801b5f8:	00db      	lsls	r3, r3, #3
 801b5fa:	440b      	add	r3, r1
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b600:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b604:	4910      	ldr	r1, [pc, #64]	@ (801b648 <etharp_update_arp_entry+0x148>)
 801b606:	4613      	mov	r3, r2
 801b608:	005b      	lsls	r3, r3, #1
 801b60a:	4413      	add	r3, r2
 801b60c:	00db      	lsls	r3, r3, #3
 801b60e:	440b      	add	r3, r1
 801b610:	2200      	movs	r2, #0
 801b612:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b614:	68fb      	ldr	r3, [r7, #12]
 801b616:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b61a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b61e:	9300      	str	r3, [sp, #0]
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	6939      	ldr	r1, [r7, #16]
 801b624:	68f8      	ldr	r0, [r7, #12]
 801b626:	f001 ffbd 	bl	801d5a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b62a:	6938      	ldr	r0, [r7, #16]
 801b62c:	f7f8 fb80 	bl	8013d30 <pbuf_free>
  }
  return ERR_OK;
 801b630:	2300      	movs	r3, #0
}
 801b632:	4618      	mov	r0, r3
 801b634:	3718      	adds	r7, #24
 801b636:	46bd      	mov	sp, r7
 801b638:	bd80      	pop	{r7, pc}
 801b63a:	bf00      	nop
 801b63c:	08021fc0 	.word	0x08021fc0
 801b640:	080220b8 	.word	0x080220b8
 801b644:	08022038 	.word	0x08022038
 801b648:	24016e6c 	.word	0x24016e6c

0801b64c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b64c:	b580      	push	{r7, lr}
 801b64e:	b084      	sub	sp, #16
 801b650:	af00      	add	r7, sp, #0
 801b652:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b654:	2300      	movs	r3, #0
 801b656:	60fb      	str	r3, [r7, #12]
 801b658:	e01e      	b.n	801b698 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b65a:	4913      	ldr	r1, [pc, #76]	@ (801b6a8 <etharp_cleanup_netif+0x5c>)
 801b65c:	68fa      	ldr	r2, [r7, #12]
 801b65e:	4613      	mov	r3, r2
 801b660:	005b      	lsls	r3, r3, #1
 801b662:	4413      	add	r3, r2
 801b664:	00db      	lsls	r3, r3, #3
 801b666:	440b      	add	r3, r1
 801b668:	3314      	adds	r3, #20
 801b66a:	781b      	ldrb	r3, [r3, #0]
 801b66c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b66e:	7afb      	ldrb	r3, [r7, #11]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d00e      	beq.n	801b692 <etharp_cleanup_netif+0x46>
 801b674:	490c      	ldr	r1, [pc, #48]	@ (801b6a8 <etharp_cleanup_netif+0x5c>)
 801b676:	68fa      	ldr	r2, [r7, #12]
 801b678:	4613      	mov	r3, r2
 801b67a:	005b      	lsls	r3, r3, #1
 801b67c:	4413      	add	r3, r2
 801b67e:	00db      	lsls	r3, r3, #3
 801b680:	440b      	add	r3, r1
 801b682:	3308      	adds	r3, #8
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	687a      	ldr	r2, [r7, #4]
 801b688:	429a      	cmp	r2, r3
 801b68a:	d102      	bne.n	801b692 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b68c:	68f8      	ldr	r0, [r7, #12]
 801b68e:	f7ff fce5 	bl	801b05c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	3301      	adds	r3, #1
 801b696:	60fb      	str	r3, [r7, #12]
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	2b09      	cmp	r3, #9
 801b69c:	dddd      	ble.n	801b65a <etharp_cleanup_netif+0xe>
    }
  }
}
 801b69e:	bf00      	nop
 801b6a0:	bf00      	nop
 801b6a2:	3710      	adds	r7, #16
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}
 801b6a8:	24016e6c 	.word	0x24016e6c

0801b6ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b6ac:	b5b0      	push	{r4, r5, r7, lr}
 801b6ae:	b08a      	sub	sp, #40	@ 0x28
 801b6b0:	af04      	add	r7, sp, #16
 801b6b2:	6078      	str	r0, [r7, #4]
 801b6b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b6b6:	683b      	ldr	r3, [r7, #0]
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d107      	bne.n	801b6cc <etharp_input+0x20>
 801b6bc:	4b3d      	ldr	r3, [pc, #244]	@ (801b7b4 <etharp_input+0x108>)
 801b6be:	f240 228a 	movw	r2, #650	@ 0x28a
 801b6c2:	493d      	ldr	r1, [pc, #244]	@ (801b7b8 <etharp_input+0x10c>)
 801b6c4:	483d      	ldr	r0, [pc, #244]	@ (801b7bc <etharp_input+0x110>)
 801b6c6:	f002 fb75 	bl	801ddb4 <iprintf>
 801b6ca:	e06f      	b.n	801b7ac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	685b      	ldr	r3, [r3, #4]
 801b6d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b6d2:	693b      	ldr	r3, [r7, #16]
 801b6d4:	881b      	ldrh	r3, [r3, #0]
 801b6d6:	b29b      	uxth	r3, r3
 801b6d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b6dc:	d10c      	bne.n	801b6f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b6de:	693b      	ldr	r3, [r7, #16]
 801b6e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b6e2:	2b06      	cmp	r3, #6
 801b6e4:	d108      	bne.n	801b6f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b6e6:	693b      	ldr	r3, [r7, #16]
 801b6e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b6ea:	2b04      	cmp	r3, #4
 801b6ec:	d104      	bne.n	801b6f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b6ee:	693b      	ldr	r3, [r7, #16]
 801b6f0:	885b      	ldrh	r3, [r3, #2]
 801b6f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b6f4:	2b08      	cmp	r3, #8
 801b6f6:	d003      	beq.n	801b700 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b6f8:	6878      	ldr	r0, [r7, #4]
 801b6fa:	f7f8 fb19 	bl	8013d30 <pbuf_free>
    return;
 801b6fe:	e055      	b.n	801b7ac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	330e      	adds	r3, #14
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b708:	693b      	ldr	r3, [r7, #16]
 801b70a:	3318      	adds	r3, #24
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b710:	683b      	ldr	r3, [r7, #0]
 801b712:	3304      	adds	r3, #4
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d102      	bne.n	801b720 <etharp_input+0x74>
    for_us = 0;
 801b71a:	2300      	movs	r3, #0
 801b71c:	75fb      	strb	r3, [r7, #23]
 801b71e:	e009      	b.n	801b734 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b720:	68ba      	ldr	r2, [r7, #8]
 801b722:	683b      	ldr	r3, [r7, #0]
 801b724:	3304      	adds	r3, #4
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	429a      	cmp	r2, r3
 801b72a:	bf0c      	ite	eq
 801b72c:	2301      	moveq	r3, #1
 801b72e:	2300      	movne	r3, #0
 801b730:	b2db      	uxtb	r3, r3
 801b732:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b734:	693b      	ldr	r3, [r7, #16]
 801b736:	f103 0208 	add.w	r2, r3, #8
 801b73a:	7dfb      	ldrb	r3, [r7, #23]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d001      	beq.n	801b744 <etharp_input+0x98>
 801b740:	2301      	movs	r3, #1
 801b742:	e000      	b.n	801b746 <etharp_input+0x9a>
 801b744:	2302      	movs	r3, #2
 801b746:	f107 010c 	add.w	r1, r7, #12
 801b74a:	6838      	ldr	r0, [r7, #0]
 801b74c:	f7ff fed8 	bl	801b500 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b750:	693b      	ldr	r3, [r7, #16]
 801b752:	88db      	ldrh	r3, [r3, #6]
 801b754:	b29b      	uxth	r3, r3
 801b756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b75a:	d003      	beq.n	801b764 <etharp_input+0xb8>
 801b75c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b760:	d01e      	beq.n	801b7a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b762:	e020      	b.n	801b7a6 <etharp_input+0xfa>
      if (for_us) {
 801b764:	7dfb      	ldrb	r3, [r7, #23]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d01c      	beq.n	801b7a4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b770:	693b      	ldr	r3, [r7, #16]
 801b772:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b776:	683b      	ldr	r3, [r7, #0]
 801b778:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b780:	693a      	ldr	r2, [r7, #16]
 801b782:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b784:	2102      	movs	r1, #2
 801b786:	9103      	str	r1, [sp, #12]
 801b788:	f107 010c 	add.w	r1, r7, #12
 801b78c:	9102      	str	r1, [sp, #8]
 801b78e:	9201      	str	r2, [sp, #4]
 801b790:	9300      	str	r3, [sp, #0]
 801b792:	462b      	mov	r3, r5
 801b794:	4622      	mov	r2, r4
 801b796:	4601      	mov	r1, r0
 801b798:	6838      	ldr	r0, [r7, #0]
 801b79a:	f000 faeb 	bl	801bd74 <etharp_raw>
      break;
 801b79e:	e001      	b.n	801b7a4 <etharp_input+0xf8>
      break;
 801b7a0:	bf00      	nop
 801b7a2:	e000      	b.n	801b7a6 <etharp_input+0xfa>
      break;
 801b7a4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b7a6:	6878      	ldr	r0, [r7, #4]
 801b7a8:	f7f8 fac2 	bl	8013d30 <pbuf_free>
}
 801b7ac:	3718      	adds	r7, #24
 801b7ae:	46bd      	mov	sp, r7
 801b7b0:	bdb0      	pop	{r4, r5, r7, pc}
 801b7b2:	bf00      	nop
 801b7b4:	08021fc0 	.word	0x08021fc0
 801b7b8:	08022110 	.word	0x08022110
 801b7bc:	08022038 	.word	0x08022038

0801b7c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b086      	sub	sp, #24
 801b7c4:	af02      	add	r7, sp, #8
 801b7c6:	60f8      	str	r0, [r7, #12]
 801b7c8:	60b9      	str	r1, [r7, #8]
 801b7ca:	4613      	mov	r3, r2
 801b7cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b7ce:	79fa      	ldrb	r2, [r7, #7]
 801b7d0:	4944      	ldr	r1, [pc, #272]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b7d2:	4613      	mov	r3, r2
 801b7d4:	005b      	lsls	r3, r3, #1
 801b7d6:	4413      	add	r3, r2
 801b7d8:	00db      	lsls	r3, r3, #3
 801b7da:	440b      	add	r3, r1
 801b7dc:	3314      	adds	r3, #20
 801b7de:	781b      	ldrb	r3, [r3, #0]
 801b7e0:	2b01      	cmp	r3, #1
 801b7e2:	d806      	bhi.n	801b7f2 <etharp_output_to_arp_index+0x32>
 801b7e4:	4b40      	ldr	r3, [pc, #256]	@ (801b8e8 <etharp_output_to_arp_index+0x128>)
 801b7e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b7ea:	4940      	ldr	r1, [pc, #256]	@ (801b8ec <etharp_output_to_arp_index+0x12c>)
 801b7ec:	4840      	ldr	r0, [pc, #256]	@ (801b8f0 <etharp_output_to_arp_index+0x130>)
 801b7ee:	f002 fae1 	bl	801ddb4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b7f2:	79fa      	ldrb	r2, [r7, #7]
 801b7f4:	493b      	ldr	r1, [pc, #236]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b7f6:	4613      	mov	r3, r2
 801b7f8:	005b      	lsls	r3, r3, #1
 801b7fa:	4413      	add	r3, r2
 801b7fc:	00db      	lsls	r3, r3, #3
 801b7fe:	440b      	add	r3, r1
 801b800:	3314      	adds	r3, #20
 801b802:	781b      	ldrb	r3, [r3, #0]
 801b804:	2b02      	cmp	r3, #2
 801b806:	d153      	bne.n	801b8b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b808:	79fa      	ldrb	r2, [r7, #7]
 801b80a:	4936      	ldr	r1, [pc, #216]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b80c:	4613      	mov	r3, r2
 801b80e:	005b      	lsls	r3, r3, #1
 801b810:	4413      	add	r3, r2
 801b812:	00db      	lsls	r3, r3, #3
 801b814:	440b      	add	r3, r1
 801b816:	3312      	adds	r3, #18
 801b818:	881b      	ldrh	r3, [r3, #0]
 801b81a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b81e:	d919      	bls.n	801b854 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b820:	79fa      	ldrb	r2, [r7, #7]
 801b822:	4613      	mov	r3, r2
 801b824:	005b      	lsls	r3, r3, #1
 801b826:	4413      	add	r3, r2
 801b828:	00db      	lsls	r3, r3, #3
 801b82a:	4a2e      	ldr	r2, [pc, #184]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b82c:	4413      	add	r3, r2
 801b82e:	3304      	adds	r3, #4
 801b830:	4619      	mov	r1, r3
 801b832:	68f8      	ldr	r0, [r7, #12]
 801b834:	f000 fb4c 	bl	801bed0 <etharp_request>
 801b838:	4603      	mov	r3, r0
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d138      	bne.n	801b8b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b83e:	79fa      	ldrb	r2, [r7, #7]
 801b840:	4928      	ldr	r1, [pc, #160]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b842:	4613      	mov	r3, r2
 801b844:	005b      	lsls	r3, r3, #1
 801b846:	4413      	add	r3, r2
 801b848:	00db      	lsls	r3, r3, #3
 801b84a:	440b      	add	r3, r1
 801b84c:	3314      	adds	r3, #20
 801b84e:	2203      	movs	r2, #3
 801b850:	701a      	strb	r2, [r3, #0]
 801b852:	e02d      	b.n	801b8b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b854:	79fa      	ldrb	r2, [r7, #7]
 801b856:	4923      	ldr	r1, [pc, #140]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b858:	4613      	mov	r3, r2
 801b85a:	005b      	lsls	r3, r3, #1
 801b85c:	4413      	add	r3, r2
 801b85e:	00db      	lsls	r3, r3, #3
 801b860:	440b      	add	r3, r1
 801b862:	3312      	adds	r3, #18
 801b864:	881b      	ldrh	r3, [r3, #0]
 801b866:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b86a:	d321      	bcc.n	801b8b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b86c:	79fa      	ldrb	r2, [r7, #7]
 801b86e:	4613      	mov	r3, r2
 801b870:	005b      	lsls	r3, r3, #1
 801b872:	4413      	add	r3, r2
 801b874:	00db      	lsls	r3, r3, #3
 801b876:	4a1b      	ldr	r2, [pc, #108]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b878:	4413      	add	r3, r2
 801b87a:	1d19      	adds	r1, r3, #4
 801b87c:	79fa      	ldrb	r2, [r7, #7]
 801b87e:	4613      	mov	r3, r2
 801b880:	005b      	lsls	r3, r3, #1
 801b882:	4413      	add	r3, r2
 801b884:	00db      	lsls	r3, r3, #3
 801b886:	3308      	adds	r3, #8
 801b888:	4a16      	ldr	r2, [pc, #88]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b88a:	4413      	add	r3, r2
 801b88c:	3304      	adds	r3, #4
 801b88e:	461a      	mov	r2, r3
 801b890:	68f8      	ldr	r0, [r7, #12]
 801b892:	f000 fafb 	bl	801be8c <etharp_request_dst>
 801b896:	4603      	mov	r3, r0
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d109      	bne.n	801b8b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b89c:	79fa      	ldrb	r2, [r7, #7]
 801b89e:	4911      	ldr	r1, [pc, #68]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b8a0:	4613      	mov	r3, r2
 801b8a2:	005b      	lsls	r3, r3, #1
 801b8a4:	4413      	add	r3, r2
 801b8a6:	00db      	lsls	r3, r3, #3
 801b8a8:	440b      	add	r3, r1
 801b8aa:	3314      	adds	r3, #20
 801b8ac:	2203      	movs	r2, #3
 801b8ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b8b0:	68fb      	ldr	r3, [r7, #12]
 801b8b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b8b6:	79fa      	ldrb	r2, [r7, #7]
 801b8b8:	4613      	mov	r3, r2
 801b8ba:	005b      	lsls	r3, r3, #1
 801b8bc:	4413      	add	r3, r2
 801b8be:	00db      	lsls	r3, r3, #3
 801b8c0:	3308      	adds	r3, #8
 801b8c2:	4a08      	ldr	r2, [pc, #32]	@ (801b8e4 <etharp_output_to_arp_index+0x124>)
 801b8c4:	4413      	add	r3, r2
 801b8c6:	3304      	adds	r3, #4
 801b8c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b8cc:	9200      	str	r2, [sp, #0]
 801b8ce:	460a      	mov	r2, r1
 801b8d0:	68b9      	ldr	r1, [r7, #8]
 801b8d2:	68f8      	ldr	r0, [r7, #12]
 801b8d4:	f001 fe66 	bl	801d5a4 <ethernet_output>
 801b8d8:	4603      	mov	r3, r0
}
 801b8da:	4618      	mov	r0, r3
 801b8dc:	3710      	adds	r7, #16
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}
 801b8e2:	bf00      	nop
 801b8e4:	24016e6c 	.word	0x24016e6c
 801b8e8:	08021fc0 	.word	0x08021fc0
 801b8ec:	08022130 	.word	0x08022130
 801b8f0:	08022038 	.word	0x08022038

0801b8f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	b08a      	sub	sp, #40	@ 0x28
 801b8f8:	af02      	add	r7, sp, #8
 801b8fa:	60f8      	str	r0, [r7, #12]
 801b8fc:	60b9      	str	r1, [r7, #8]
 801b8fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d106      	bne.n	801b918 <etharp_output+0x24>
 801b90a:	4b73      	ldr	r3, [pc, #460]	@ (801bad8 <etharp_output+0x1e4>)
 801b90c:	f240 321e 	movw	r2, #798	@ 0x31e
 801b910:	4972      	ldr	r1, [pc, #456]	@ (801badc <etharp_output+0x1e8>)
 801b912:	4873      	ldr	r0, [pc, #460]	@ (801bae0 <etharp_output+0x1ec>)
 801b914:	f002 fa4e 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d106      	bne.n	801b92c <etharp_output+0x38>
 801b91e:	4b6e      	ldr	r3, [pc, #440]	@ (801bad8 <etharp_output+0x1e4>)
 801b920:	f240 321f 	movw	r2, #799	@ 0x31f
 801b924:	496f      	ldr	r1, [pc, #444]	@ (801bae4 <etharp_output+0x1f0>)
 801b926:	486e      	ldr	r0, [pc, #440]	@ (801bae0 <etharp_output+0x1ec>)
 801b928:	f002 fa44 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d106      	bne.n	801b940 <etharp_output+0x4c>
 801b932:	4b69      	ldr	r3, [pc, #420]	@ (801bad8 <etharp_output+0x1e4>)
 801b934:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b938:	496b      	ldr	r1, [pc, #428]	@ (801bae8 <etharp_output+0x1f4>)
 801b93a:	4869      	ldr	r0, [pc, #420]	@ (801bae0 <etharp_output+0x1ec>)
 801b93c:	f002 fa3a 	bl	801ddb4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	68f9      	ldr	r1, [r7, #12]
 801b946:	4618      	mov	r0, r3
 801b948:	f000 ff1e 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801b94c:	4603      	mov	r3, r0
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d002      	beq.n	801b958 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b952:	4b66      	ldr	r3, [pc, #408]	@ (801baec <etharp_output+0x1f8>)
 801b954:	61fb      	str	r3, [r7, #28]
 801b956:	e0af      	b.n	801bab8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b960:	2be0      	cmp	r3, #224	@ 0xe0
 801b962:	d118      	bne.n	801b996 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b964:	2301      	movs	r3, #1
 801b966:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b968:	2300      	movs	r3, #0
 801b96a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b96c:	235e      	movs	r3, #94	@ 0x5e
 801b96e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	3301      	adds	r3, #1
 801b974:	781b      	ldrb	r3, [r3, #0]
 801b976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b97a:	b2db      	uxtb	r3, r3
 801b97c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	3302      	adds	r3, #2
 801b982:	781b      	ldrb	r3, [r3, #0]
 801b984:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	3303      	adds	r3, #3
 801b98a:	781b      	ldrb	r3, [r3, #0]
 801b98c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b98e:	f107 0310 	add.w	r3, r7, #16
 801b992:	61fb      	str	r3, [r7, #28]
 801b994:	e090      	b.n	801bab8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681a      	ldr	r2, [r3, #0]
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	3304      	adds	r3, #4
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	405a      	eors	r2, r3
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	3308      	adds	r3, #8
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	4013      	ands	r3, r2
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d012      	beq.n	801b9d4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b9b4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b9b8:	4293      	cmp	r3, r2
 801b9ba:	d00b      	beq.n	801b9d4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	330c      	adds	r3, #12
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d003      	beq.n	801b9ce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	330c      	adds	r3, #12
 801b9ca:	61bb      	str	r3, [r7, #24]
 801b9cc:	e002      	b.n	801b9d4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b9ce:	f06f 0303 	mvn.w	r3, #3
 801b9d2:	e07d      	b.n	801bad0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b9d4:	4b46      	ldr	r3, [pc, #280]	@ (801baf0 <etharp_output+0x1fc>)
 801b9d6:	781b      	ldrb	r3, [r3, #0]
 801b9d8:	4619      	mov	r1, r3
 801b9da:	4a46      	ldr	r2, [pc, #280]	@ (801baf4 <etharp_output+0x200>)
 801b9dc:	460b      	mov	r3, r1
 801b9de:	005b      	lsls	r3, r3, #1
 801b9e0:	440b      	add	r3, r1
 801b9e2:	00db      	lsls	r3, r3, #3
 801b9e4:	4413      	add	r3, r2
 801b9e6:	3314      	adds	r3, #20
 801b9e8:	781b      	ldrb	r3, [r3, #0]
 801b9ea:	2b01      	cmp	r3, #1
 801b9ec:	d925      	bls.n	801ba3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b9ee:	4b40      	ldr	r3, [pc, #256]	@ (801baf0 <etharp_output+0x1fc>)
 801b9f0:	781b      	ldrb	r3, [r3, #0]
 801b9f2:	4619      	mov	r1, r3
 801b9f4:	4a3f      	ldr	r2, [pc, #252]	@ (801baf4 <etharp_output+0x200>)
 801b9f6:	460b      	mov	r3, r1
 801b9f8:	005b      	lsls	r3, r3, #1
 801b9fa:	440b      	add	r3, r1
 801b9fc:	00db      	lsls	r3, r3, #3
 801b9fe:	4413      	add	r3, r2
 801ba00:	3308      	adds	r3, #8
 801ba02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ba04:	68fa      	ldr	r2, [r7, #12]
 801ba06:	429a      	cmp	r2, r3
 801ba08:	d117      	bne.n	801ba3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ba0a:	69bb      	ldr	r3, [r7, #24]
 801ba0c:	681a      	ldr	r2, [r3, #0]
 801ba0e:	4b38      	ldr	r3, [pc, #224]	@ (801baf0 <etharp_output+0x1fc>)
 801ba10:	781b      	ldrb	r3, [r3, #0]
 801ba12:	4618      	mov	r0, r3
 801ba14:	4937      	ldr	r1, [pc, #220]	@ (801baf4 <etharp_output+0x200>)
 801ba16:	4603      	mov	r3, r0
 801ba18:	005b      	lsls	r3, r3, #1
 801ba1a:	4403      	add	r3, r0
 801ba1c:	00db      	lsls	r3, r3, #3
 801ba1e:	440b      	add	r3, r1
 801ba20:	3304      	adds	r3, #4
 801ba22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ba24:	429a      	cmp	r2, r3
 801ba26:	d108      	bne.n	801ba3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ba28:	4b31      	ldr	r3, [pc, #196]	@ (801baf0 <etharp_output+0x1fc>)
 801ba2a:	781b      	ldrb	r3, [r3, #0]
 801ba2c:	461a      	mov	r2, r3
 801ba2e:	68b9      	ldr	r1, [r7, #8]
 801ba30:	68f8      	ldr	r0, [r7, #12]
 801ba32:	f7ff fec5 	bl	801b7c0 <etharp_output_to_arp_index>
 801ba36:	4603      	mov	r3, r0
 801ba38:	e04a      	b.n	801bad0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	75fb      	strb	r3, [r7, #23]
 801ba3e:	e031      	b.n	801baa4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ba40:	7dfa      	ldrb	r2, [r7, #23]
 801ba42:	492c      	ldr	r1, [pc, #176]	@ (801baf4 <etharp_output+0x200>)
 801ba44:	4613      	mov	r3, r2
 801ba46:	005b      	lsls	r3, r3, #1
 801ba48:	4413      	add	r3, r2
 801ba4a:	00db      	lsls	r3, r3, #3
 801ba4c:	440b      	add	r3, r1
 801ba4e:	3314      	adds	r3, #20
 801ba50:	781b      	ldrb	r3, [r3, #0]
 801ba52:	2b01      	cmp	r3, #1
 801ba54:	d923      	bls.n	801ba9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ba56:	7dfa      	ldrb	r2, [r7, #23]
 801ba58:	4926      	ldr	r1, [pc, #152]	@ (801baf4 <etharp_output+0x200>)
 801ba5a:	4613      	mov	r3, r2
 801ba5c:	005b      	lsls	r3, r3, #1
 801ba5e:	4413      	add	r3, r2
 801ba60:	00db      	lsls	r3, r3, #3
 801ba62:	440b      	add	r3, r1
 801ba64:	3308      	adds	r3, #8
 801ba66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ba68:	68fa      	ldr	r2, [r7, #12]
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	d117      	bne.n	801ba9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ba6e:	69bb      	ldr	r3, [r7, #24]
 801ba70:	6819      	ldr	r1, [r3, #0]
 801ba72:	7dfa      	ldrb	r2, [r7, #23]
 801ba74:	481f      	ldr	r0, [pc, #124]	@ (801baf4 <etharp_output+0x200>)
 801ba76:	4613      	mov	r3, r2
 801ba78:	005b      	lsls	r3, r3, #1
 801ba7a:	4413      	add	r3, r2
 801ba7c:	00db      	lsls	r3, r3, #3
 801ba7e:	4403      	add	r3, r0
 801ba80:	3304      	adds	r3, #4
 801ba82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ba84:	4299      	cmp	r1, r3
 801ba86:	d10a      	bne.n	801ba9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ba88:	4a19      	ldr	r2, [pc, #100]	@ (801baf0 <etharp_output+0x1fc>)
 801ba8a:	7dfb      	ldrb	r3, [r7, #23]
 801ba8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ba8e:	7dfb      	ldrb	r3, [r7, #23]
 801ba90:	461a      	mov	r2, r3
 801ba92:	68b9      	ldr	r1, [r7, #8]
 801ba94:	68f8      	ldr	r0, [r7, #12]
 801ba96:	f7ff fe93 	bl	801b7c0 <etharp_output_to_arp_index>
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	e018      	b.n	801bad0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ba9e:	7dfb      	ldrb	r3, [r7, #23]
 801baa0:	3301      	adds	r3, #1
 801baa2:	75fb      	strb	r3, [r7, #23]
 801baa4:	7dfb      	ldrb	r3, [r7, #23]
 801baa6:	2b09      	cmp	r3, #9
 801baa8:	d9ca      	bls.n	801ba40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801baaa:	68ba      	ldr	r2, [r7, #8]
 801baac:	69b9      	ldr	r1, [r7, #24]
 801baae:	68f8      	ldr	r0, [r7, #12]
 801bab0:	f000 f822 	bl	801baf8 <etharp_query>
 801bab4:	4603      	mov	r3, r0
 801bab6:	e00b      	b.n	801bad0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801babe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bac2:	9300      	str	r3, [sp, #0]
 801bac4:	69fb      	ldr	r3, [r7, #28]
 801bac6:	68b9      	ldr	r1, [r7, #8]
 801bac8:	68f8      	ldr	r0, [r7, #12]
 801baca:	f001 fd6b 	bl	801d5a4 <ethernet_output>
 801bace:	4603      	mov	r3, r0
}
 801bad0:	4618      	mov	r0, r3
 801bad2:	3720      	adds	r7, #32
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bd80      	pop	{r7, pc}
 801bad8:	08021fc0 	.word	0x08021fc0
 801badc:	08022110 	.word	0x08022110
 801bae0:	08022038 	.word	0x08022038
 801bae4:	08022160 	.word	0x08022160
 801bae8:	08022100 	.word	0x08022100
 801baec:	0802286c 	.word	0x0802286c
 801baf0:	24016f5c 	.word	0x24016f5c
 801baf4:	24016e6c 	.word	0x24016e6c

0801baf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b08c      	sub	sp, #48	@ 0x30
 801bafc:	af02      	add	r7, sp, #8
 801bafe:	60f8      	str	r0, [r7, #12]
 801bb00:	60b9      	str	r1, [r7, #8]
 801bb02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bb04:	68fb      	ldr	r3, [r7, #12]
 801bb06:	3326      	adds	r3, #38	@ 0x26
 801bb08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801bb0a:	23ff      	movs	r3, #255	@ 0xff
 801bb0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801bb10:	2300      	movs	r3, #0
 801bb12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bb14:	68bb      	ldr	r3, [r7, #8]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	68f9      	ldr	r1, [r7, #12]
 801bb1a:	4618      	mov	r0, r3
 801bb1c:	f000 fe34 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801bb20:	4603      	mov	r3, r0
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d10c      	bne.n	801bb40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bb26:	68bb      	ldr	r3, [r7, #8]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801bb2e:	2be0      	cmp	r3, #224	@ 0xe0
 801bb30:	d006      	beq.n	801bb40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d003      	beq.n	801bb40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801bb38:	68bb      	ldr	r3, [r7, #8]
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d102      	bne.n	801bb46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bb40:	f06f 030f 	mvn.w	r3, #15
 801bb44:	e101      	b.n	801bd4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801bb46:	68fa      	ldr	r2, [r7, #12]
 801bb48:	2101      	movs	r1, #1
 801bb4a:	68b8      	ldr	r0, [r7, #8]
 801bb4c:	f7ff fb60 	bl	801b210 <etharp_find_entry>
 801bb50:	4603      	mov	r3, r0
 801bb52:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801bb54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	da02      	bge.n	801bb62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801bb5c:	8a7b      	ldrh	r3, [r7, #18]
 801bb5e:	b25b      	sxtb	r3, r3
 801bb60:	e0f3      	b.n	801bd4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801bb62:	8a7b      	ldrh	r3, [r7, #18]
 801bb64:	2b7e      	cmp	r3, #126	@ 0x7e
 801bb66:	d906      	bls.n	801bb76 <etharp_query+0x7e>
 801bb68:	4b7a      	ldr	r3, [pc, #488]	@ (801bd54 <etharp_query+0x25c>)
 801bb6a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801bb6e:	497a      	ldr	r1, [pc, #488]	@ (801bd58 <etharp_query+0x260>)
 801bb70:	487a      	ldr	r0, [pc, #488]	@ (801bd5c <etharp_query+0x264>)
 801bb72:	f002 f91f 	bl	801ddb4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801bb76:	8a7b      	ldrh	r3, [r7, #18]
 801bb78:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801bb7a:	7c7a      	ldrb	r2, [r7, #17]
 801bb7c:	4978      	ldr	r1, [pc, #480]	@ (801bd60 <etharp_query+0x268>)
 801bb7e:	4613      	mov	r3, r2
 801bb80:	005b      	lsls	r3, r3, #1
 801bb82:	4413      	add	r3, r2
 801bb84:	00db      	lsls	r3, r3, #3
 801bb86:	440b      	add	r3, r1
 801bb88:	3314      	adds	r3, #20
 801bb8a:	781b      	ldrb	r3, [r3, #0]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d115      	bne.n	801bbbc <etharp_query+0xc4>
    is_new_entry = 1;
 801bb90:	2301      	movs	r3, #1
 801bb92:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801bb94:	7c7a      	ldrb	r2, [r7, #17]
 801bb96:	4972      	ldr	r1, [pc, #456]	@ (801bd60 <etharp_query+0x268>)
 801bb98:	4613      	mov	r3, r2
 801bb9a:	005b      	lsls	r3, r3, #1
 801bb9c:	4413      	add	r3, r2
 801bb9e:	00db      	lsls	r3, r3, #3
 801bba0:	440b      	add	r3, r1
 801bba2:	3314      	adds	r3, #20
 801bba4:	2201      	movs	r2, #1
 801bba6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801bba8:	7c7a      	ldrb	r2, [r7, #17]
 801bbaa:	496d      	ldr	r1, [pc, #436]	@ (801bd60 <etharp_query+0x268>)
 801bbac:	4613      	mov	r3, r2
 801bbae:	005b      	lsls	r3, r3, #1
 801bbb0:	4413      	add	r3, r2
 801bbb2:	00db      	lsls	r3, r3, #3
 801bbb4:	440b      	add	r3, r1
 801bbb6:	3308      	adds	r3, #8
 801bbb8:	68fa      	ldr	r2, [r7, #12]
 801bbba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801bbbc:	7c7a      	ldrb	r2, [r7, #17]
 801bbbe:	4968      	ldr	r1, [pc, #416]	@ (801bd60 <etharp_query+0x268>)
 801bbc0:	4613      	mov	r3, r2
 801bbc2:	005b      	lsls	r3, r3, #1
 801bbc4:	4413      	add	r3, r2
 801bbc6:	00db      	lsls	r3, r3, #3
 801bbc8:	440b      	add	r3, r1
 801bbca:	3314      	adds	r3, #20
 801bbcc:	781b      	ldrb	r3, [r3, #0]
 801bbce:	2b01      	cmp	r3, #1
 801bbd0:	d011      	beq.n	801bbf6 <etharp_query+0xfe>
 801bbd2:	7c7a      	ldrb	r2, [r7, #17]
 801bbd4:	4962      	ldr	r1, [pc, #392]	@ (801bd60 <etharp_query+0x268>)
 801bbd6:	4613      	mov	r3, r2
 801bbd8:	005b      	lsls	r3, r3, #1
 801bbda:	4413      	add	r3, r2
 801bbdc:	00db      	lsls	r3, r3, #3
 801bbde:	440b      	add	r3, r1
 801bbe0:	3314      	adds	r3, #20
 801bbe2:	781b      	ldrb	r3, [r3, #0]
 801bbe4:	2b01      	cmp	r3, #1
 801bbe6:	d806      	bhi.n	801bbf6 <etharp_query+0xfe>
 801bbe8:	4b5a      	ldr	r3, [pc, #360]	@ (801bd54 <etharp_query+0x25c>)
 801bbea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801bbee:	495d      	ldr	r1, [pc, #372]	@ (801bd64 <etharp_query+0x26c>)
 801bbf0:	485a      	ldr	r0, [pc, #360]	@ (801bd5c <etharp_query+0x264>)
 801bbf2:	f002 f8df 	bl	801ddb4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801bbf6:	6a3b      	ldr	r3, [r7, #32]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d102      	bne.n	801bc02 <etharp_query+0x10a>
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d10c      	bne.n	801bc1c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801bc02:	68b9      	ldr	r1, [r7, #8]
 801bc04:	68f8      	ldr	r0, [r7, #12]
 801bc06:	f000 f963 	bl	801bed0 <etharp_request>
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d102      	bne.n	801bc1c <etharp_query+0x124>
      return result;
 801bc16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801bc1a:	e096      	b.n	801bd4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	d106      	bne.n	801bc30 <etharp_query+0x138>
 801bc22:	4b4c      	ldr	r3, [pc, #304]	@ (801bd54 <etharp_query+0x25c>)
 801bc24:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801bc28:	494f      	ldr	r1, [pc, #316]	@ (801bd68 <etharp_query+0x270>)
 801bc2a:	484c      	ldr	r0, [pc, #304]	@ (801bd5c <etharp_query+0x264>)
 801bc2c:	f002 f8c2 	bl	801ddb4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801bc30:	7c7a      	ldrb	r2, [r7, #17]
 801bc32:	494b      	ldr	r1, [pc, #300]	@ (801bd60 <etharp_query+0x268>)
 801bc34:	4613      	mov	r3, r2
 801bc36:	005b      	lsls	r3, r3, #1
 801bc38:	4413      	add	r3, r2
 801bc3a:	00db      	lsls	r3, r3, #3
 801bc3c:	440b      	add	r3, r1
 801bc3e:	3314      	adds	r3, #20
 801bc40:	781b      	ldrb	r3, [r3, #0]
 801bc42:	2b01      	cmp	r3, #1
 801bc44:	d917      	bls.n	801bc76 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801bc46:	4a49      	ldr	r2, [pc, #292]	@ (801bd6c <etharp_query+0x274>)
 801bc48:	7c7b      	ldrb	r3, [r7, #17]
 801bc4a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801bc4c:	7c7a      	ldrb	r2, [r7, #17]
 801bc4e:	4613      	mov	r3, r2
 801bc50:	005b      	lsls	r3, r3, #1
 801bc52:	4413      	add	r3, r2
 801bc54:	00db      	lsls	r3, r3, #3
 801bc56:	3308      	adds	r3, #8
 801bc58:	4a41      	ldr	r2, [pc, #260]	@ (801bd60 <etharp_query+0x268>)
 801bc5a:	4413      	add	r3, r2
 801bc5c:	3304      	adds	r3, #4
 801bc5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801bc62:	9200      	str	r2, [sp, #0]
 801bc64:	697a      	ldr	r2, [r7, #20]
 801bc66:	6879      	ldr	r1, [r7, #4]
 801bc68:	68f8      	ldr	r0, [r7, #12]
 801bc6a:	f001 fc9b 	bl	801d5a4 <ethernet_output>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801bc74:	e067      	b.n	801bd46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bc76:	7c7a      	ldrb	r2, [r7, #17]
 801bc78:	4939      	ldr	r1, [pc, #228]	@ (801bd60 <etharp_query+0x268>)
 801bc7a:	4613      	mov	r3, r2
 801bc7c:	005b      	lsls	r3, r3, #1
 801bc7e:	4413      	add	r3, r2
 801bc80:	00db      	lsls	r3, r3, #3
 801bc82:	440b      	add	r3, r1
 801bc84:	3314      	adds	r3, #20
 801bc86:	781b      	ldrb	r3, [r3, #0]
 801bc88:	2b01      	cmp	r3, #1
 801bc8a:	d15c      	bne.n	801bd46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801bc8c:	2300      	movs	r3, #0
 801bc8e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bc94:	e01c      	b.n	801bcd0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801bc96:	69fb      	ldr	r3, [r7, #28]
 801bc98:	895a      	ldrh	r2, [r3, #10]
 801bc9a:	69fb      	ldr	r3, [r7, #28]
 801bc9c:	891b      	ldrh	r3, [r3, #8]
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d10a      	bne.n	801bcb8 <etharp_query+0x1c0>
 801bca2:	69fb      	ldr	r3, [r7, #28]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d006      	beq.n	801bcb8 <etharp_query+0x1c0>
 801bcaa:	4b2a      	ldr	r3, [pc, #168]	@ (801bd54 <etharp_query+0x25c>)
 801bcac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801bcb0:	492f      	ldr	r1, [pc, #188]	@ (801bd70 <etharp_query+0x278>)
 801bcb2:	482a      	ldr	r0, [pc, #168]	@ (801bd5c <etharp_query+0x264>)
 801bcb4:	f002 f87e 	bl	801ddb4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801bcb8:	69fb      	ldr	r3, [r7, #28]
 801bcba:	7b1b      	ldrb	r3, [r3, #12]
 801bcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d002      	beq.n	801bcca <etharp_query+0x1d2>
        copy_needed = 1;
 801bcc4:	2301      	movs	r3, #1
 801bcc6:	61bb      	str	r3, [r7, #24]
        break;
 801bcc8:	e005      	b.n	801bcd6 <etharp_query+0x1de>
      }
      p = p->next;
 801bcca:	69fb      	ldr	r3, [r7, #28]
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bcd0:	69fb      	ldr	r3, [r7, #28]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d1df      	bne.n	801bc96 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801bcd6:	69bb      	ldr	r3, [r7, #24]
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d007      	beq.n	801bcec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801bcdc:	687a      	ldr	r2, [r7, #4]
 801bcde:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801bce2:	200e      	movs	r0, #14
 801bce4:	f7f8 fa9c 	bl	8014220 <pbuf_clone>
 801bce8:	61f8      	str	r0, [r7, #28]
 801bcea:	e004      	b.n	801bcf6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801bcf0:	69f8      	ldr	r0, [r7, #28]
 801bcf2:	f7f8 f8c3 	bl	8013e7c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801bcf6:	69fb      	ldr	r3, [r7, #28]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	d021      	beq.n	801bd40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801bcfc:	7c7a      	ldrb	r2, [r7, #17]
 801bcfe:	4918      	ldr	r1, [pc, #96]	@ (801bd60 <etharp_query+0x268>)
 801bd00:	4613      	mov	r3, r2
 801bd02:	005b      	lsls	r3, r3, #1
 801bd04:	4413      	add	r3, r2
 801bd06:	00db      	lsls	r3, r3, #3
 801bd08:	440b      	add	r3, r1
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d00a      	beq.n	801bd26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801bd10:	7c7a      	ldrb	r2, [r7, #17]
 801bd12:	4913      	ldr	r1, [pc, #76]	@ (801bd60 <etharp_query+0x268>)
 801bd14:	4613      	mov	r3, r2
 801bd16:	005b      	lsls	r3, r3, #1
 801bd18:	4413      	add	r3, r2
 801bd1a:	00db      	lsls	r3, r3, #3
 801bd1c:	440b      	add	r3, r1
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	4618      	mov	r0, r3
 801bd22:	f7f8 f805 	bl	8013d30 <pbuf_free>
      }
      arp_table[i].q = p;
 801bd26:	7c7a      	ldrb	r2, [r7, #17]
 801bd28:	490d      	ldr	r1, [pc, #52]	@ (801bd60 <etharp_query+0x268>)
 801bd2a:	4613      	mov	r3, r2
 801bd2c:	005b      	lsls	r3, r3, #1
 801bd2e:	4413      	add	r3, r2
 801bd30:	00db      	lsls	r3, r3, #3
 801bd32:	440b      	add	r3, r1
 801bd34:	69fa      	ldr	r2, [r7, #28]
 801bd36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801bd38:	2300      	movs	r3, #0
 801bd3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801bd3e:	e002      	b.n	801bd46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801bd40:	23ff      	movs	r3, #255	@ 0xff
 801bd42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801bd46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	3728      	adds	r7, #40	@ 0x28
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd80      	pop	{r7, pc}
 801bd52:	bf00      	nop
 801bd54:	08021fc0 	.word	0x08021fc0
 801bd58:	0802216c 	.word	0x0802216c
 801bd5c:	08022038 	.word	0x08022038
 801bd60:	24016e6c 	.word	0x24016e6c
 801bd64:	0802217c 	.word	0x0802217c
 801bd68:	08022160 	.word	0x08022160
 801bd6c:	24016f5c 	.word	0x24016f5c
 801bd70:	080221a4 	.word	0x080221a4

0801bd74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b08a      	sub	sp, #40	@ 0x28
 801bd78:	af02      	add	r7, sp, #8
 801bd7a:	60f8      	str	r0, [r7, #12]
 801bd7c:	60b9      	str	r1, [r7, #8]
 801bd7e:	607a      	str	r2, [r7, #4]
 801bd80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801bd82:	2300      	movs	r3, #0
 801bd84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d106      	bne.n	801bd9a <etharp_raw+0x26>
 801bd8c:	4b3a      	ldr	r3, [pc, #232]	@ (801be78 <etharp_raw+0x104>)
 801bd8e:	f240 4257 	movw	r2, #1111	@ 0x457
 801bd92:	493a      	ldr	r1, [pc, #232]	@ (801be7c <etharp_raw+0x108>)
 801bd94:	483a      	ldr	r0, [pc, #232]	@ (801be80 <etharp_raw+0x10c>)
 801bd96:	f002 f80d 	bl	801ddb4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801bd9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bd9e:	211c      	movs	r1, #28
 801bda0:	200e      	movs	r0, #14
 801bda2:	f7f7 fcab 	bl	80136fc <pbuf_alloc>
 801bda6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801bda8:	69bb      	ldr	r3, [r7, #24]
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d102      	bne.n	801bdb4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801bdae:	f04f 33ff 	mov.w	r3, #4294967295
 801bdb2:	e05d      	b.n	801be70 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801bdb4:	69bb      	ldr	r3, [r7, #24]
 801bdb6:	895b      	ldrh	r3, [r3, #10]
 801bdb8:	2b1b      	cmp	r3, #27
 801bdba:	d806      	bhi.n	801bdca <etharp_raw+0x56>
 801bdbc:	4b2e      	ldr	r3, [pc, #184]	@ (801be78 <etharp_raw+0x104>)
 801bdbe:	f240 4262 	movw	r2, #1122	@ 0x462
 801bdc2:	4930      	ldr	r1, [pc, #192]	@ (801be84 <etharp_raw+0x110>)
 801bdc4:	482e      	ldr	r0, [pc, #184]	@ (801be80 <etharp_raw+0x10c>)
 801bdc6:	f001 fff5 	bl	801ddb4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801bdca:	69bb      	ldr	r3, [r7, #24]
 801bdcc:	685b      	ldr	r3, [r3, #4]
 801bdce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801bdd0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	f7f6 fabc 	bl	8012350 <lwip_htons>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	461a      	mov	r2, r3
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801bde6:	2b06      	cmp	r3, #6
 801bde8:	d006      	beq.n	801bdf8 <etharp_raw+0x84>
 801bdea:	4b23      	ldr	r3, [pc, #140]	@ (801be78 <etharp_raw+0x104>)
 801bdec:	f240 4269 	movw	r2, #1129	@ 0x469
 801bdf0:	4925      	ldr	r1, [pc, #148]	@ (801be88 <etharp_raw+0x114>)
 801bdf2:	4823      	ldr	r0, [pc, #140]	@ (801be80 <etharp_raw+0x10c>)
 801bdf4:	f001 ffde 	bl	801ddb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801bdf8:	697b      	ldr	r3, [r7, #20]
 801bdfa:	3308      	adds	r3, #8
 801bdfc:	2206      	movs	r2, #6
 801bdfe:	6839      	ldr	r1, [r7, #0]
 801be00:	4618      	mov	r0, r3
 801be02:	f002 fa0a 	bl	801e21a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801be06:	697b      	ldr	r3, [r7, #20]
 801be08:	3312      	adds	r3, #18
 801be0a:	2206      	movs	r2, #6
 801be0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801be0e:	4618      	mov	r0, r3
 801be10:	f002 fa03 	bl	801e21a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801be14:	697b      	ldr	r3, [r7, #20]
 801be16:	330e      	adds	r3, #14
 801be18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801be1a:	6812      	ldr	r2, [r2, #0]
 801be1c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801be1e:	697b      	ldr	r3, [r7, #20]
 801be20:	3318      	adds	r3, #24
 801be22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801be24:	6812      	ldr	r2, [r2, #0]
 801be26:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801be28:	697b      	ldr	r3, [r7, #20]
 801be2a:	2200      	movs	r2, #0
 801be2c:	701a      	strb	r2, [r3, #0]
 801be2e:	2200      	movs	r2, #0
 801be30:	f042 0201 	orr.w	r2, r2, #1
 801be34:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	2200      	movs	r2, #0
 801be3a:	f042 0208 	orr.w	r2, r2, #8
 801be3e:	709a      	strb	r2, [r3, #2]
 801be40:	2200      	movs	r2, #0
 801be42:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801be44:	697b      	ldr	r3, [r7, #20]
 801be46:	2206      	movs	r2, #6
 801be48:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801be4a:	697b      	ldr	r3, [r7, #20]
 801be4c:	2204      	movs	r2, #4
 801be4e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801be50:	f640 0306 	movw	r3, #2054	@ 0x806
 801be54:	9300      	str	r3, [sp, #0]
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	68ba      	ldr	r2, [r7, #8]
 801be5a:	69b9      	ldr	r1, [r7, #24]
 801be5c:	68f8      	ldr	r0, [r7, #12]
 801be5e:	f001 fba1 	bl	801d5a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801be62:	69b8      	ldr	r0, [r7, #24]
 801be64:	f7f7 ff64 	bl	8013d30 <pbuf_free>
  p = NULL;
 801be68:	2300      	movs	r3, #0
 801be6a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801be6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801be70:	4618      	mov	r0, r3
 801be72:	3720      	adds	r7, #32
 801be74:	46bd      	mov	sp, r7
 801be76:	bd80      	pop	{r7, pc}
 801be78:	08021fc0 	.word	0x08021fc0
 801be7c:	08022110 	.word	0x08022110
 801be80:	08022038 	.word	0x08022038
 801be84:	080221c0 	.word	0x080221c0
 801be88:	080221f4 	.word	0x080221f4

0801be8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b088      	sub	sp, #32
 801be90:	af04      	add	r7, sp, #16
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801be98:	68fb      	ldr	r3, [r7, #12]
 801be9a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801bea8:	2201      	movs	r2, #1
 801beaa:	9203      	str	r2, [sp, #12]
 801beac:	68ba      	ldr	r2, [r7, #8]
 801beae:	9202      	str	r2, [sp, #8]
 801beb0:	4a06      	ldr	r2, [pc, #24]	@ (801becc <etharp_request_dst+0x40>)
 801beb2:	9201      	str	r2, [sp, #4]
 801beb4:	9300      	str	r3, [sp, #0]
 801beb6:	4603      	mov	r3, r0
 801beb8:	687a      	ldr	r2, [r7, #4]
 801beba:	68f8      	ldr	r0, [r7, #12]
 801bebc:	f7ff ff5a 	bl	801bd74 <etharp_raw>
 801bec0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801bec2:	4618      	mov	r0, r3
 801bec4:	3710      	adds	r7, #16
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bd80      	pop	{r7, pc}
 801beca:	bf00      	nop
 801becc:	08022874 	.word	0x08022874

0801bed0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	b082      	sub	sp, #8
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	6078      	str	r0, [r7, #4]
 801bed8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801beda:	4a05      	ldr	r2, [pc, #20]	@ (801bef0 <etharp_request+0x20>)
 801bedc:	6839      	ldr	r1, [r7, #0]
 801bede:	6878      	ldr	r0, [r7, #4]
 801bee0:	f7ff ffd4 	bl	801be8c <etharp_request_dst>
 801bee4:	4603      	mov	r3, r0
}
 801bee6:	4618      	mov	r0, r3
 801bee8:	3708      	adds	r7, #8
 801beea:	46bd      	mov	sp, r7
 801beec:	bd80      	pop	{r7, pc}
 801beee:	bf00      	nop
 801bef0:	0802286c 	.word	0x0802286c

0801bef4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801bef4:	b580      	push	{r7, lr}
 801bef6:	b08e      	sub	sp, #56	@ 0x38
 801bef8:	af04      	add	r7, sp, #16
 801befa:	6078      	str	r0, [r7, #4]
 801befc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801befe:	4b87      	ldr	r3, [pc, #540]	@ (801c11c <icmp_input+0x228>)
 801bf00:	689b      	ldr	r3, [r3, #8]
 801bf02:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf06:	781b      	ldrb	r3, [r3, #0]
 801bf08:	f003 030f 	and.w	r3, r3, #15
 801bf0c:	b2db      	uxtb	r3, r3
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	b2db      	uxtb	r3, r3
 801bf12:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801bf14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bf16:	2b13      	cmp	r3, #19
 801bf18:	f240 80e8 	bls.w	801c0ec <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	895b      	ldrh	r3, [r3, #10]
 801bf20:	2b03      	cmp	r3, #3
 801bf22:	f240 80e5 	bls.w	801c0f0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	685b      	ldr	r3, [r3, #4]
 801bf2a:	781b      	ldrb	r3, [r3, #0]
 801bf2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801bf30:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	f000 80d2 	beq.w	801c0de <icmp_input+0x1ea>
 801bf3a:	2b08      	cmp	r3, #8
 801bf3c:	f040 80d2 	bne.w	801c0e4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801bf40:	4b77      	ldr	r3, [pc, #476]	@ (801c120 <icmp_input+0x22c>)
 801bf42:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bf44:	4b75      	ldr	r3, [pc, #468]	@ (801c11c <icmp_input+0x228>)
 801bf46:	695b      	ldr	r3, [r3, #20]
 801bf48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bf4c:	2be0      	cmp	r3, #224	@ 0xe0
 801bf4e:	f000 80d6 	beq.w	801c0fe <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801bf52:	4b72      	ldr	r3, [pc, #456]	@ (801c11c <icmp_input+0x228>)
 801bf54:	695b      	ldr	r3, [r3, #20]
 801bf56:	4a71      	ldr	r2, [pc, #452]	@ (801c11c <icmp_input+0x228>)
 801bf58:	6812      	ldr	r2, [r2, #0]
 801bf5a:	4611      	mov	r1, r2
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	f000 fc13 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801bf62:	4603      	mov	r3, r0
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	f040 80cc 	bne.w	801c102 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	891b      	ldrh	r3, [r3, #8]
 801bf6e:	2b07      	cmp	r3, #7
 801bf70:	f240 80c0 	bls.w	801c0f4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f7f6 fa88 	bl	801248a <inet_chksum_pbuf>
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d003      	beq.n	801bf88 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801bf80:	6878      	ldr	r0, [r7, #4]
 801bf82:	f7f7 fed5 	bl	8013d30 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801bf86:	e0c5      	b.n	801c114 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bf88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bf8a:	330e      	adds	r3, #14
 801bf8c:	4619      	mov	r1, r3
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f7f7 fe06 	bl	8013ba0 <pbuf_add_header>
 801bf94:	4603      	mov	r3, r0
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d04b      	beq.n	801c032 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	891a      	ldrh	r2, [r3, #8]
 801bf9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bfa0:	4413      	add	r3, r2
 801bfa2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	891b      	ldrh	r3, [r3, #8]
 801bfa8:	8b7a      	ldrh	r2, [r7, #26]
 801bfaa:	429a      	cmp	r2, r3
 801bfac:	f0c0 80ab 	bcc.w	801c106 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bfb0:	8b7b      	ldrh	r3, [r7, #26]
 801bfb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bfb6:	4619      	mov	r1, r3
 801bfb8:	200e      	movs	r0, #14
 801bfba:	f7f7 fb9f 	bl	80136fc <pbuf_alloc>
 801bfbe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801bfc0:	697b      	ldr	r3, [r7, #20]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	f000 80a1 	beq.w	801c10a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bfc8:	697b      	ldr	r3, [r7, #20]
 801bfca:	895b      	ldrh	r3, [r3, #10]
 801bfcc:	461a      	mov	r2, r3
 801bfce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bfd0:	3308      	adds	r3, #8
 801bfd2:	429a      	cmp	r2, r3
 801bfd4:	d203      	bcs.n	801bfde <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801bfd6:	6978      	ldr	r0, [r7, #20]
 801bfd8:	f7f7 feaa 	bl	8013d30 <pbuf_free>
          goto icmperr;
 801bfdc:	e096      	b.n	801c10c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	685b      	ldr	r3, [r3, #4]
 801bfe2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801bfe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	f002 f917 	bl	801e21a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801bfec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bfee:	4619      	mov	r1, r3
 801bff0:	6978      	ldr	r0, [r7, #20]
 801bff2:	f7f7 fde5 	bl	8013bc0 <pbuf_remove_header>
 801bff6:	4603      	mov	r3, r0
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d009      	beq.n	801c010 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bffc:	4b49      	ldr	r3, [pc, #292]	@ (801c124 <icmp_input+0x230>)
 801bffe:	22b6      	movs	r2, #182	@ 0xb6
 801c000:	4949      	ldr	r1, [pc, #292]	@ (801c128 <icmp_input+0x234>)
 801c002:	484a      	ldr	r0, [pc, #296]	@ (801c12c <icmp_input+0x238>)
 801c004:	f001 fed6 	bl	801ddb4 <iprintf>
          pbuf_free(r);
 801c008:	6978      	ldr	r0, [r7, #20]
 801c00a:	f7f7 fe91 	bl	8013d30 <pbuf_free>
          goto icmperr;
 801c00e:	e07d      	b.n	801c10c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c010:	6879      	ldr	r1, [r7, #4]
 801c012:	6978      	ldr	r0, [r7, #20]
 801c014:	f7f7 ffc0 	bl	8013f98 <pbuf_copy>
 801c018:	4603      	mov	r3, r0
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d003      	beq.n	801c026 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c01e:	6978      	ldr	r0, [r7, #20]
 801c020:	f7f7 fe86 	bl	8013d30 <pbuf_free>
          goto icmperr;
 801c024:	e072      	b.n	801c10c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	f7f7 fe82 	bl	8013d30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c02c:	697b      	ldr	r3, [r7, #20]
 801c02e:	607b      	str	r3, [r7, #4]
 801c030:	e00f      	b.n	801c052 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c034:	330e      	adds	r3, #14
 801c036:	4619      	mov	r1, r3
 801c038:	6878      	ldr	r0, [r7, #4]
 801c03a:	f7f7 fdc1 	bl	8013bc0 <pbuf_remove_header>
 801c03e:	4603      	mov	r3, r0
 801c040:	2b00      	cmp	r3, #0
 801c042:	d006      	beq.n	801c052 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c044:	4b37      	ldr	r3, [pc, #220]	@ (801c124 <icmp_input+0x230>)
 801c046:	22c7      	movs	r2, #199	@ 0xc7
 801c048:	4939      	ldr	r1, [pc, #228]	@ (801c130 <icmp_input+0x23c>)
 801c04a:	4838      	ldr	r0, [pc, #224]	@ (801c12c <icmp_input+0x238>)
 801c04c:	f001 feb2 	bl	801ddb4 <iprintf>
          goto icmperr;
 801c050:	e05c      	b.n	801c10c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	685b      	ldr	r3, [r3, #4]
 801c056:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c058:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c05a:	4619      	mov	r1, r3
 801c05c:	6878      	ldr	r0, [r7, #4]
 801c05e:	f7f7 fd9f 	bl	8013ba0 <pbuf_add_header>
 801c062:	4603      	mov	r3, r0
 801c064:	2b00      	cmp	r3, #0
 801c066:	d13c      	bne.n	801c0e2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	685b      	ldr	r3, [r3, #4]
 801c06c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c06e:	69fb      	ldr	r3, [r7, #28]
 801c070:	681a      	ldr	r2, [r3, #0]
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c076:	4b29      	ldr	r3, [pc, #164]	@ (801c11c <icmp_input+0x228>)
 801c078:	691a      	ldr	r2, [r3, #16]
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c07e:	693b      	ldr	r3, [r7, #16]
 801c080:	2200      	movs	r2, #0
 801c082:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801c084:	693b      	ldr	r3, [r7, #16]
 801c086:	885b      	ldrh	r3, [r3, #2]
 801c088:	b29b      	uxth	r3, r3
 801c08a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801c08e:	4293      	cmp	r3, r2
 801c090:	d907      	bls.n	801c0a2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801c092:	693b      	ldr	r3, [r7, #16]
 801c094:	885b      	ldrh	r3, [r3, #2]
 801c096:	b29b      	uxth	r3, r3
 801c098:	3309      	adds	r3, #9
 801c09a:	b29a      	uxth	r2, r3
 801c09c:	693b      	ldr	r3, [r7, #16]
 801c09e:	805a      	strh	r2, [r3, #2]
 801c0a0:	e006      	b.n	801c0b0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801c0a2:	693b      	ldr	r3, [r7, #16]
 801c0a4:	885b      	ldrh	r3, [r3, #2]
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	3308      	adds	r3, #8
 801c0aa:	b29a      	uxth	r2, r3
 801c0ac:	693b      	ldr	r3, [r7, #16]
 801c0ae:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	22ff      	movs	r2, #255	@ 0xff
 801c0b4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	2200      	movs	r2, #0
 801c0ba:	729a      	strb	r2, [r3, #10]
 801c0bc:	2200      	movs	r2, #0
 801c0be:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c0c0:	683b      	ldr	r3, [r7, #0]
 801c0c2:	9302      	str	r3, [sp, #8]
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	9301      	str	r3, [sp, #4]
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	9300      	str	r3, [sp, #0]
 801c0cc:	23ff      	movs	r3, #255	@ 0xff
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	69f9      	ldr	r1, [r7, #28]
 801c0d2:	6878      	ldr	r0, [r7, #4]
 801c0d4:	f000 fa80 	bl	801c5d8 <ip4_output_if>
 801c0d8:	4603      	mov	r3, r0
 801c0da:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c0dc:	e001      	b.n	801c0e2 <icmp_input+0x1ee>
      break;
 801c0de:	bf00      	nop
 801c0e0:	e000      	b.n	801c0e4 <icmp_input+0x1f0>
      break;
 801c0e2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c0e4:	6878      	ldr	r0, [r7, #4]
 801c0e6:	f7f7 fe23 	bl	8013d30 <pbuf_free>
  return;
 801c0ea:	e013      	b.n	801c114 <icmp_input+0x220>
    goto lenerr;
 801c0ec:	bf00      	nop
 801c0ee:	e002      	b.n	801c0f6 <icmp_input+0x202>
    goto lenerr;
 801c0f0:	bf00      	nop
 801c0f2:	e000      	b.n	801c0f6 <icmp_input+0x202>
        goto lenerr;
 801c0f4:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c0f6:	6878      	ldr	r0, [r7, #4]
 801c0f8:	f7f7 fe1a 	bl	8013d30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c0fc:	e00a      	b.n	801c114 <icmp_input+0x220>
        goto icmperr;
 801c0fe:	bf00      	nop
 801c100:	e004      	b.n	801c10c <icmp_input+0x218>
        goto icmperr;
 801c102:	bf00      	nop
 801c104:	e002      	b.n	801c10c <icmp_input+0x218>
          goto icmperr;
 801c106:	bf00      	nop
 801c108:	e000      	b.n	801c10c <icmp_input+0x218>
          goto icmperr;
 801c10a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f7f7 fe0f 	bl	8013d30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c112:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c114:	3728      	adds	r7, #40	@ 0x28
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}
 801c11a:	bf00      	nop
 801c11c:	2401034c 	.word	0x2401034c
 801c120:	24010360 	.word	0x24010360
 801c124:	08022238 	.word	0x08022238
 801c128:	08022270 	.word	0x08022270
 801c12c:	080222a8 	.word	0x080222a8
 801c130:	080222d0 	.word	0x080222d0

0801c134 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
 801c13c:	460b      	mov	r3, r1
 801c13e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c140:	78fb      	ldrb	r3, [r7, #3]
 801c142:	461a      	mov	r2, r3
 801c144:	2103      	movs	r1, #3
 801c146:	6878      	ldr	r0, [r7, #4]
 801c148:	f000 f814 	bl	801c174 <icmp_send_response>
}
 801c14c:	bf00      	nop
 801c14e:	3708      	adds	r7, #8
 801c150:	46bd      	mov	sp, r7
 801c152:	bd80      	pop	{r7, pc}

0801c154 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c154:	b580      	push	{r7, lr}
 801c156:	b082      	sub	sp, #8
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
 801c15c:	460b      	mov	r3, r1
 801c15e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c160:	78fb      	ldrb	r3, [r7, #3]
 801c162:	461a      	mov	r2, r3
 801c164:	210b      	movs	r1, #11
 801c166:	6878      	ldr	r0, [r7, #4]
 801c168:	f000 f804 	bl	801c174 <icmp_send_response>
}
 801c16c:	bf00      	nop
 801c16e:	3708      	adds	r7, #8
 801c170:	46bd      	mov	sp, r7
 801c172:	bd80      	pop	{r7, pc}

0801c174 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c174:	b580      	push	{r7, lr}
 801c176:	b08c      	sub	sp, #48	@ 0x30
 801c178:	af04      	add	r7, sp, #16
 801c17a:	6078      	str	r0, [r7, #4]
 801c17c:	460b      	mov	r3, r1
 801c17e:	70fb      	strb	r3, [r7, #3]
 801c180:	4613      	mov	r3, r2
 801c182:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c184:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c188:	2124      	movs	r1, #36	@ 0x24
 801c18a:	2022      	movs	r0, #34	@ 0x22
 801c18c:	f7f7 fab6 	bl	80136fc <pbuf_alloc>
 801c190:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c192:	69fb      	ldr	r3, [r7, #28]
 801c194:	2b00      	cmp	r3, #0
 801c196:	d056      	beq.n	801c246 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c198:	69fb      	ldr	r3, [r7, #28]
 801c19a:	895b      	ldrh	r3, [r3, #10]
 801c19c:	2b23      	cmp	r3, #35	@ 0x23
 801c19e:	d806      	bhi.n	801c1ae <icmp_send_response+0x3a>
 801c1a0:	4b2b      	ldr	r3, [pc, #172]	@ (801c250 <icmp_send_response+0xdc>)
 801c1a2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801c1a6:	492b      	ldr	r1, [pc, #172]	@ (801c254 <icmp_send_response+0xe0>)
 801c1a8:	482b      	ldr	r0, [pc, #172]	@ (801c258 <icmp_send_response+0xe4>)
 801c1aa:	f001 fe03 	bl	801ddb4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	685b      	ldr	r3, [r3, #4]
 801c1b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c1b4:	69fb      	ldr	r3, [r7, #28]
 801c1b6:	685b      	ldr	r3, [r3, #4]
 801c1b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c1ba:	697b      	ldr	r3, [r7, #20]
 801c1bc:	78fa      	ldrb	r2, [r7, #3]
 801c1be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c1c0:	697b      	ldr	r3, [r7, #20]
 801c1c2:	78ba      	ldrb	r2, [r7, #2]
 801c1c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c1c6:	697b      	ldr	r3, [r7, #20]
 801c1c8:	2200      	movs	r2, #0
 801c1ca:	711a      	strb	r2, [r3, #4]
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	719a      	strb	r2, [r3, #6]
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c1da:	69fb      	ldr	r3, [r7, #28]
 801c1dc:	685b      	ldr	r3, [r3, #4]
 801c1de:	f103 0008 	add.w	r0, r3, #8
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	685b      	ldr	r3, [r3, #4]
 801c1e6:	221c      	movs	r2, #28
 801c1e8:	4619      	mov	r1, r3
 801c1ea:	f002 f816 	bl	801e21a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c1ee:	69bb      	ldr	r3, [r7, #24]
 801c1f0:	68db      	ldr	r3, [r3, #12]
 801c1f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c1f4:	f107 030c 	add.w	r3, r7, #12
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f000 f82f 	bl	801c25c <ip4_route>
 801c1fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c200:	693b      	ldr	r3, [r7, #16]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d01b      	beq.n	801c23e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c206:	697b      	ldr	r3, [r7, #20]
 801c208:	2200      	movs	r2, #0
 801c20a:	709a      	strb	r2, [r3, #2]
 801c20c:	2200      	movs	r2, #0
 801c20e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801c210:	69fb      	ldr	r3, [r7, #28]
 801c212:	895b      	ldrh	r3, [r3, #10]
 801c214:	4619      	mov	r1, r3
 801c216:	6978      	ldr	r0, [r7, #20]
 801c218:	f7f6 f925 	bl	8012466 <inet_chksum>
 801c21c:	4603      	mov	r3, r0
 801c21e:	461a      	mov	r2, r3
 801c220:	697b      	ldr	r3, [r7, #20]
 801c222:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c224:	f107 020c 	add.w	r2, r7, #12
 801c228:	693b      	ldr	r3, [r7, #16]
 801c22a:	9302      	str	r3, [sp, #8]
 801c22c:	2301      	movs	r3, #1
 801c22e:	9301      	str	r3, [sp, #4]
 801c230:	2300      	movs	r3, #0
 801c232:	9300      	str	r3, [sp, #0]
 801c234:	23ff      	movs	r3, #255	@ 0xff
 801c236:	2100      	movs	r1, #0
 801c238:	69f8      	ldr	r0, [r7, #28]
 801c23a:	f000 f9cd 	bl	801c5d8 <ip4_output_if>
  }
  pbuf_free(q);
 801c23e:	69f8      	ldr	r0, [r7, #28]
 801c240:	f7f7 fd76 	bl	8013d30 <pbuf_free>
 801c244:	e000      	b.n	801c248 <icmp_send_response+0xd4>
    return;
 801c246:	bf00      	nop
}
 801c248:	3720      	adds	r7, #32
 801c24a:	46bd      	mov	sp, r7
 801c24c:	bd80      	pop	{r7, pc}
 801c24e:	bf00      	nop
 801c250:	08022238 	.word	0x08022238
 801c254:	08022304 	.word	0x08022304
 801c258:	080222a8 	.word	0x080222a8

0801c25c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c25c:	b480      	push	{r7}
 801c25e:	b085      	sub	sp, #20
 801c260:	af00      	add	r7, sp, #0
 801c262:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c264:	4b33      	ldr	r3, [pc, #204]	@ (801c334 <ip4_route+0xd8>)
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	60fb      	str	r3, [r7, #12]
 801c26a:	e036      	b.n	801c2da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c272:	f003 0301 	and.w	r3, r3, #1
 801c276:	b2db      	uxtb	r3, r3
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d02b      	beq.n	801c2d4 <ip4_route+0x78>
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c282:	089b      	lsrs	r3, r3, #2
 801c284:	f003 0301 	and.w	r3, r3, #1
 801c288:	b2db      	uxtb	r3, r3
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d022      	beq.n	801c2d4 <ip4_route+0x78>
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	3304      	adds	r3, #4
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d01d      	beq.n	801c2d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	681a      	ldr	r2, [r3, #0]
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	3304      	adds	r3, #4
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	405a      	eors	r2, r3
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	3308      	adds	r3, #8
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	4013      	ands	r3, r2
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d101      	bne.n	801c2b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	e038      	b.n	801c326 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c2ba:	f003 0302 	and.w	r3, r3, #2
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d108      	bne.n	801c2d4 <ip4_route+0x78>
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	681a      	ldr	r2, [r3, #0]
 801c2c6:	68fb      	ldr	r3, [r7, #12]
 801c2c8:	330c      	adds	r3, #12
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	429a      	cmp	r2, r3
 801c2ce:	d101      	bne.n	801c2d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c2d0:	68fb      	ldr	r3, [r7, #12]
 801c2d2:	e028      	b.n	801c326 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c2d4:	68fb      	ldr	r3, [r7, #12]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	60fb      	str	r3, [r7, #12]
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d1c5      	bne.n	801c26c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c2e0:	4b15      	ldr	r3, [pc, #84]	@ (801c338 <ip4_route+0xdc>)
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d01a      	beq.n	801c31e <ip4_route+0xc2>
 801c2e8:	4b13      	ldr	r3, [pc, #76]	@ (801c338 <ip4_route+0xdc>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c2f0:	f003 0301 	and.w	r3, r3, #1
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	d012      	beq.n	801c31e <ip4_route+0xc2>
 801c2f8:	4b0f      	ldr	r3, [pc, #60]	@ (801c338 <ip4_route+0xdc>)
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c300:	f003 0304 	and.w	r3, r3, #4
 801c304:	2b00      	cmp	r3, #0
 801c306:	d00a      	beq.n	801c31e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c308:	4b0b      	ldr	r3, [pc, #44]	@ (801c338 <ip4_route+0xdc>)
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	3304      	adds	r3, #4
 801c30e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c310:	2b00      	cmp	r3, #0
 801c312:	d004      	beq.n	801c31e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	b2db      	uxtb	r3, r3
 801c31a:	2b7f      	cmp	r3, #127	@ 0x7f
 801c31c:	d101      	bne.n	801c322 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c31e:	2300      	movs	r3, #0
 801c320:	e001      	b.n	801c326 <ip4_route+0xca>
  }

  return netif_default;
 801c322:	4b05      	ldr	r3, [pc, #20]	@ (801c338 <ip4_route+0xdc>)
 801c324:	681b      	ldr	r3, [r3, #0]
}
 801c326:	4618      	mov	r0, r3
 801c328:	3714      	adds	r7, #20
 801c32a:	46bd      	mov	sp, r7
 801c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c330:	4770      	bx	lr
 801c332:	bf00      	nop
 801c334:	24016e00 	.word	0x24016e00
 801c338:	24016e04 	.word	0x24016e04

0801c33c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b082      	sub	sp, #8
 801c340:	af00      	add	r7, sp, #0
 801c342:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c34a:	f003 0301 	and.w	r3, r3, #1
 801c34e:	b2db      	uxtb	r3, r3
 801c350:	2b00      	cmp	r3, #0
 801c352:	d016      	beq.n	801c382 <ip4_input_accept+0x46>
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	3304      	adds	r3, #4
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d011      	beq.n	801c382 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c35e:	4b0b      	ldr	r3, [pc, #44]	@ (801c38c <ip4_input_accept+0x50>)
 801c360:	695a      	ldr	r2, [r3, #20]
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	3304      	adds	r3, #4
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	429a      	cmp	r2, r3
 801c36a:	d008      	beq.n	801c37e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c36c:	4b07      	ldr	r3, [pc, #28]	@ (801c38c <ip4_input_accept+0x50>)
 801c36e:	695b      	ldr	r3, [r3, #20]
 801c370:	6879      	ldr	r1, [r7, #4]
 801c372:	4618      	mov	r0, r3
 801c374:	f000 fa08 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801c378:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d001      	beq.n	801c382 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c37e:	2301      	movs	r3, #1
 801c380:	e000      	b.n	801c384 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c382:	2300      	movs	r3, #0
}
 801c384:	4618      	mov	r0, r3
 801c386:	3708      	adds	r7, #8
 801c388:	46bd      	mov	sp, r7
 801c38a:	bd80      	pop	{r7, pc}
 801c38c:	2401034c 	.word	0x2401034c

0801c390 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b086      	sub	sp, #24
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]
 801c398:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	685b      	ldr	r3, [r3, #4]
 801c39e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	781b      	ldrb	r3, [r3, #0]
 801c3a4:	091b      	lsrs	r3, r3, #4
 801c3a6:	b2db      	uxtb	r3, r3
 801c3a8:	2b04      	cmp	r3, #4
 801c3aa:	d004      	beq.n	801c3b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c3ac:	6878      	ldr	r0, [r7, #4]
 801c3ae:	f7f7 fcbf 	bl	8013d30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	e107      	b.n	801c5c6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c3b6:	697b      	ldr	r3, [r7, #20]
 801c3b8:	781b      	ldrb	r3, [r3, #0]
 801c3ba:	f003 030f 	and.w	r3, r3, #15
 801c3be:	b2db      	uxtb	r3, r3
 801c3c0:	009b      	lsls	r3, r3, #2
 801c3c2:	b2db      	uxtb	r3, r3
 801c3c4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c3c6:	697b      	ldr	r3, [r7, #20]
 801c3c8:	885b      	ldrh	r3, [r3, #2]
 801c3ca:	b29b      	uxth	r3, r3
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f7f5 ffbf 	bl	8012350 <lwip_htons>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	891b      	ldrh	r3, [r3, #8]
 801c3da:	89ba      	ldrh	r2, [r7, #12]
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	d204      	bcs.n	801c3ea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801c3e0:	89bb      	ldrh	r3, [r7, #12]
 801c3e2:	4619      	mov	r1, r3
 801c3e4:	6878      	ldr	r0, [r7, #4]
 801c3e6:	f7f7 faeb 	bl	80139c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	895b      	ldrh	r3, [r3, #10]
 801c3ee:	89fa      	ldrh	r2, [r7, #14]
 801c3f0:	429a      	cmp	r2, r3
 801c3f2:	d807      	bhi.n	801c404 <ip4_input+0x74>
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	891b      	ldrh	r3, [r3, #8]
 801c3f8:	89ba      	ldrh	r2, [r7, #12]
 801c3fa:	429a      	cmp	r2, r3
 801c3fc:	d802      	bhi.n	801c404 <ip4_input+0x74>
 801c3fe:	89fb      	ldrh	r3, [r7, #14]
 801c400:	2b13      	cmp	r3, #19
 801c402:	d804      	bhi.n	801c40e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c404:	6878      	ldr	r0, [r7, #4]
 801c406:	f7f7 fc93 	bl	8013d30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c40a:	2300      	movs	r3, #0
 801c40c:	e0db      	b.n	801c5c6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c40e:	697b      	ldr	r3, [r7, #20]
 801c410:	691b      	ldr	r3, [r3, #16]
 801c412:	4a6f      	ldr	r2, [pc, #444]	@ (801c5d0 <ip4_input+0x240>)
 801c414:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c416:	697b      	ldr	r3, [r7, #20]
 801c418:	68db      	ldr	r3, [r3, #12]
 801c41a:	4a6d      	ldr	r2, [pc, #436]	@ (801c5d0 <ip4_input+0x240>)
 801c41c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c41e:	4b6c      	ldr	r3, [pc, #432]	@ (801c5d0 <ip4_input+0x240>)
 801c420:	695b      	ldr	r3, [r3, #20]
 801c422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c426:	2be0      	cmp	r3, #224	@ 0xe0
 801c428:	d112      	bne.n	801c450 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c42a:	683b      	ldr	r3, [r7, #0]
 801c42c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c430:	f003 0301 	and.w	r3, r3, #1
 801c434:	b2db      	uxtb	r3, r3
 801c436:	2b00      	cmp	r3, #0
 801c438:	d007      	beq.n	801c44a <ip4_input+0xba>
 801c43a:	683b      	ldr	r3, [r7, #0]
 801c43c:	3304      	adds	r3, #4
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d002      	beq.n	801c44a <ip4_input+0xba>
      netif = inp;
 801c444:	683b      	ldr	r3, [r7, #0]
 801c446:	613b      	str	r3, [r7, #16]
 801c448:	e02a      	b.n	801c4a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c44a:	2300      	movs	r3, #0
 801c44c:	613b      	str	r3, [r7, #16]
 801c44e:	e027      	b.n	801c4a0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c450:	6838      	ldr	r0, [r7, #0]
 801c452:	f7ff ff73 	bl	801c33c <ip4_input_accept>
 801c456:	4603      	mov	r3, r0
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d002      	beq.n	801c462 <ip4_input+0xd2>
      netif = inp;
 801c45c:	683b      	ldr	r3, [r7, #0]
 801c45e:	613b      	str	r3, [r7, #16]
 801c460:	e01e      	b.n	801c4a0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801c462:	2300      	movs	r3, #0
 801c464:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c466:	4b5a      	ldr	r3, [pc, #360]	@ (801c5d0 <ip4_input+0x240>)
 801c468:	695b      	ldr	r3, [r3, #20]
 801c46a:	b2db      	uxtb	r3, r3
 801c46c:	2b7f      	cmp	r3, #127	@ 0x7f
 801c46e:	d017      	beq.n	801c4a0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c470:	4b58      	ldr	r3, [pc, #352]	@ (801c5d4 <ip4_input+0x244>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	613b      	str	r3, [r7, #16]
 801c476:	e00e      	b.n	801c496 <ip4_input+0x106>
          if (netif == inp) {
 801c478:	693a      	ldr	r2, [r7, #16]
 801c47a:	683b      	ldr	r3, [r7, #0]
 801c47c:	429a      	cmp	r2, r3
 801c47e:	d006      	beq.n	801c48e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c480:	6938      	ldr	r0, [r7, #16]
 801c482:	f7ff ff5b 	bl	801c33c <ip4_input_accept>
 801c486:	4603      	mov	r3, r0
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d108      	bne.n	801c49e <ip4_input+0x10e>
 801c48c:	e000      	b.n	801c490 <ip4_input+0x100>
            continue;
 801c48e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c490:	693b      	ldr	r3, [r7, #16]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	613b      	str	r3, [r7, #16]
 801c496:	693b      	ldr	r3, [r7, #16]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d1ed      	bne.n	801c478 <ip4_input+0xe8>
 801c49c:	e000      	b.n	801c4a0 <ip4_input+0x110>
            break;
 801c49e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c4a0:	4b4b      	ldr	r3, [pc, #300]	@ (801c5d0 <ip4_input+0x240>)
 801c4a2:	691b      	ldr	r3, [r3, #16]
 801c4a4:	6839      	ldr	r1, [r7, #0]
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f000 f96e 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d105      	bne.n	801c4be <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c4b2:	4b47      	ldr	r3, [pc, #284]	@ (801c5d0 <ip4_input+0x240>)
 801c4b4:	691b      	ldr	r3, [r3, #16]
 801c4b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c4ba:	2be0      	cmp	r3, #224	@ 0xe0
 801c4bc:	d104      	bne.n	801c4c8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c4be:	6878      	ldr	r0, [r7, #4]
 801c4c0:	f7f7 fc36 	bl	8013d30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	e07e      	b.n	801c5c6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c4c8:	693b      	ldr	r3, [r7, #16]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d104      	bne.n	801c4d8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c4ce:	6878      	ldr	r0, [r7, #4]
 801c4d0:	f7f7 fc2e 	bl	8013d30 <pbuf_free>
    return ERR_OK;
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	e076      	b.n	801c5c6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c4d8:	697b      	ldr	r3, [r7, #20]
 801c4da:	88db      	ldrh	r3, [r3, #6]
 801c4dc:	b29b      	uxth	r3, r3
 801c4de:	461a      	mov	r2, r3
 801c4e0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801c4e4:	4013      	ands	r3, r2
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d00b      	beq.n	801c502 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c4ea:	6878      	ldr	r0, [r7, #4]
 801c4ec:	f000 fc92 	bl	801ce14 <ip4_reass>
 801c4f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d101      	bne.n	801c4fc <ip4_input+0x16c>
      return ERR_OK;
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	e064      	b.n	801c5c6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	685b      	ldr	r3, [r3, #4]
 801c500:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c502:	4a33      	ldr	r2, [pc, #204]	@ (801c5d0 <ip4_input+0x240>)
 801c504:	693b      	ldr	r3, [r7, #16]
 801c506:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c508:	4a31      	ldr	r2, [pc, #196]	@ (801c5d0 <ip4_input+0x240>)
 801c50a:	683b      	ldr	r3, [r7, #0]
 801c50c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c50e:	4a30      	ldr	r2, [pc, #192]	@ (801c5d0 <ip4_input+0x240>)
 801c510:	697b      	ldr	r3, [r7, #20]
 801c512:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	781b      	ldrb	r3, [r3, #0]
 801c518:	f003 030f 	and.w	r3, r3, #15
 801c51c:	b2db      	uxtb	r3, r3
 801c51e:	009b      	lsls	r3, r3, #2
 801c520:	b2db      	uxtb	r3, r3
 801c522:	461a      	mov	r2, r3
 801c524:	4b2a      	ldr	r3, [pc, #168]	@ (801c5d0 <ip4_input+0x240>)
 801c526:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c528:	89fb      	ldrh	r3, [r7, #14]
 801c52a:	4619      	mov	r1, r3
 801c52c:	6878      	ldr	r0, [r7, #4]
 801c52e:	f7f7 fb47 	bl	8013bc0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c532:	697b      	ldr	r3, [r7, #20]
 801c534:	7a5b      	ldrb	r3, [r3, #9]
 801c536:	2b11      	cmp	r3, #17
 801c538:	d006      	beq.n	801c548 <ip4_input+0x1b8>
 801c53a:	2b11      	cmp	r3, #17
 801c53c:	dc13      	bgt.n	801c566 <ip4_input+0x1d6>
 801c53e:	2b01      	cmp	r3, #1
 801c540:	d00c      	beq.n	801c55c <ip4_input+0x1cc>
 801c542:	2b06      	cmp	r3, #6
 801c544:	d005      	beq.n	801c552 <ip4_input+0x1c2>
 801c546:	e00e      	b.n	801c566 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c548:	6839      	ldr	r1, [r7, #0]
 801c54a:	6878      	ldr	r0, [r7, #4]
 801c54c:	f7fe f94a 	bl	801a7e4 <udp_input>
        break;
 801c550:	e026      	b.n	801c5a0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c552:	6839      	ldr	r1, [r7, #0]
 801c554:	6878      	ldr	r0, [r7, #4]
 801c556:	f7f9 fd07 	bl	8015f68 <tcp_input>
        break;
 801c55a:	e021      	b.n	801c5a0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c55c:	6839      	ldr	r1, [r7, #0]
 801c55e:	6878      	ldr	r0, [r7, #4]
 801c560:	f7ff fcc8 	bl	801bef4 <icmp_input>
        break;
 801c564:	e01c      	b.n	801c5a0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c566:	4b1a      	ldr	r3, [pc, #104]	@ (801c5d0 <ip4_input+0x240>)
 801c568:	695b      	ldr	r3, [r3, #20]
 801c56a:	6939      	ldr	r1, [r7, #16]
 801c56c:	4618      	mov	r0, r3
 801c56e:	f000 f90b 	bl	801c788 <ip4_addr_isbroadcast_u32>
 801c572:	4603      	mov	r3, r0
 801c574:	2b00      	cmp	r3, #0
 801c576:	d10f      	bne.n	801c598 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c578:	4b15      	ldr	r3, [pc, #84]	@ (801c5d0 <ip4_input+0x240>)
 801c57a:	695b      	ldr	r3, [r3, #20]
 801c57c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c580:	2be0      	cmp	r3, #224	@ 0xe0
 801c582:	d009      	beq.n	801c598 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c588:	4619      	mov	r1, r3
 801c58a:	6878      	ldr	r0, [r7, #4]
 801c58c:	f7f7 fb8b 	bl	8013ca6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c590:	2102      	movs	r1, #2
 801c592:	6878      	ldr	r0, [r7, #4]
 801c594:	f7ff fdce 	bl	801c134 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c598:	6878      	ldr	r0, [r7, #4]
 801c59a:	f7f7 fbc9 	bl	8013d30 <pbuf_free>
        break;
 801c59e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c5a0:	4b0b      	ldr	r3, [pc, #44]	@ (801c5d0 <ip4_input+0x240>)
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c5a6:	4b0a      	ldr	r3, [pc, #40]	@ (801c5d0 <ip4_input+0x240>)
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c5ac:	4b08      	ldr	r3, [pc, #32]	@ (801c5d0 <ip4_input+0x240>)
 801c5ae:	2200      	movs	r2, #0
 801c5b0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c5b2:	4b07      	ldr	r3, [pc, #28]	@ (801c5d0 <ip4_input+0x240>)
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c5b8:	4b05      	ldr	r3, [pc, #20]	@ (801c5d0 <ip4_input+0x240>)
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c5be:	4b04      	ldr	r3, [pc, #16]	@ (801c5d0 <ip4_input+0x240>)
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c5c4:	2300      	movs	r3, #0
}
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	3718      	adds	r7, #24
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	bd80      	pop	{r7, pc}
 801c5ce:	bf00      	nop
 801c5d0:	2401034c 	.word	0x2401034c
 801c5d4:	24016e00 	.word	0x24016e00

0801c5d8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b08a      	sub	sp, #40	@ 0x28
 801c5dc:	af04      	add	r7, sp, #16
 801c5de:	60f8      	str	r0, [r7, #12]
 801c5e0:	60b9      	str	r1, [r7, #8]
 801c5e2:	607a      	str	r2, [r7, #4]
 801c5e4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c5e6:	68bb      	ldr	r3, [r7, #8]
 801c5e8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d009      	beq.n	801c604 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c5f0:	68bb      	ldr	r3, [r7, #8]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d003      	beq.n	801c5fe <ip4_output_if+0x26>
 801c5f6:	68bb      	ldr	r3, [r7, #8]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d102      	bne.n	801c604 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c600:	3304      	adds	r3, #4
 801c602:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c604:	78fa      	ldrb	r2, [r7, #3]
 801c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c608:	9302      	str	r3, [sp, #8]
 801c60a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c60e:	9301      	str	r3, [sp, #4]
 801c610:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c614:	9300      	str	r3, [sp, #0]
 801c616:	4613      	mov	r3, r2
 801c618:	687a      	ldr	r2, [r7, #4]
 801c61a:	6979      	ldr	r1, [r7, #20]
 801c61c:	68f8      	ldr	r0, [r7, #12]
 801c61e:	f000 f805 	bl	801c62c <ip4_output_if_src>
 801c622:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c624:	4618      	mov	r0, r3
 801c626:	3718      	adds	r7, #24
 801c628:	46bd      	mov	sp, r7
 801c62a:	bd80      	pop	{r7, pc}

0801c62c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c62c:	b580      	push	{r7, lr}
 801c62e:	b088      	sub	sp, #32
 801c630:	af00      	add	r7, sp, #0
 801c632:	60f8      	str	r0, [r7, #12]
 801c634:	60b9      	str	r1, [r7, #8]
 801c636:	607a      	str	r2, [r7, #4]
 801c638:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	7b9b      	ldrb	r3, [r3, #14]
 801c63e:	2b01      	cmp	r3, #1
 801c640:	d006      	beq.n	801c650 <ip4_output_if_src+0x24>
 801c642:	4b4b      	ldr	r3, [pc, #300]	@ (801c770 <ip4_output_if_src+0x144>)
 801c644:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c648:	494a      	ldr	r1, [pc, #296]	@ (801c774 <ip4_output_if_src+0x148>)
 801c64a:	484b      	ldr	r0, [pc, #300]	@ (801c778 <ip4_output_if_src+0x14c>)
 801c64c:	f001 fbb2 	bl	801ddb4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d060      	beq.n	801c718 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c656:	2314      	movs	r3, #20
 801c658:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c65a:	2114      	movs	r1, #20
 801c65c:	68f8      	ldr	r0, [r7, #12]
 801c65e:	f7f7 fa9f 	bl	8013ba0 <pbuf_add_header>
 801c662:	4603      	mov	r3, r0
 801c664:	2b00      	cmp	r3, #0
 801c666:	d002      	beq.n	801c66e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c668:	f06f 0301 	mvn.w	r3, #1
 801c66c:	e07c      	b.n	801c768 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	685b      	ldr	r3, [r3, #4]
 801c672:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	895b      	ldrh	r3, [r3, #10]
 801c678:	2b13      	cmp	r3, #19
 801c67a:	d806      	bhi.n	801c68a <ip4_output_if_src+0x5e>
 801c67c:	4b3c      	ldr	r3, [pc, #240]	@ (801c770 <ip4_output_if_src+0x144>)
 801c67e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c682:	493e      	ldr	r1, [pc, #248]	@ (801c77c <ip4_output_if_src+0x150>)
 801c684:	483c      	ldr	r0, [pc, #240]	@ (801c778 <ip4_output_if_src+0x14c>)
 801c686:	f001 fb95 	bl	801ddb4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c68a:	69fb      	ldr	r3, [r7, #28]
 801c68c:	78fa      	ldrb	r2, [r7, #3]
 801c68e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c690:	69fb      	ldr	r3, [r7, #28]
 801c692:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c696:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	681a      	ldr	r2, [r3, #0]
 801c69c:	69fb      	ldr	r3, [r7, #28]
 801c69e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c6a0:	8b7b      	ldrh	r3, [r7, #26]
 801c6a2:	089b      	lsrs	r3, r3, #2
 801c6a4:	b29b      	uxth	r3, r3
 801c6a6:	b2db      	uxtb	r3, r3
 801c6a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6ac:	b2da      	uxtb	r2, r3
 801c6ae:	69fb      	ldr	r3, [r7, #28]
 801c6b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c6b2:	69fb      	ldr	r3, [r7, #28]
 801c6b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c6b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	891b      	ldrh	r3, [r3, #8]
 801c6be:	4618      	mov	r0, r3
 801c6c0:	f7f5 fe46 	bl	8012350 <lwip_htons>
 801c6c4:	4603      	mov	r3, r0
 801c6c6:	461a      	mov	r2, r3
 801c6c8:	69fb      	ldr	r3, [r7, #28]
 801c6ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c6cc:	69fb      	ldr	r3, [r7, #28]
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	719a      	strb	r2, [r3, #6]
 801c6d2:	2200      	movs	r2, #0
 801c6d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c6d6:	4b2a      	ldr	r3, [pc, #168]	@ (801c780 <ip4_output_if_src+0x154>)
 801c6d8:	881b      	ldrh	r3, [r3, #0]
 801c6da:	4618      	mov	r0, r3
 801c6dc:	f7f5 fe38 	bl	8012350 <lwip_htons>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	461a      	mov	r2, r3
 801c6e4:	69fb      	ldr	r3, [r7, #28]
 801c6e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c6e8:	4b25      	ldr	r3, [pc, #148]	@ (801c780 <ip4_output_if_src+0x154>)
 801c6ea:	881b      	ldrh	r3, [r3, #0]
 801c6ec:	3301      	adds	r3, #1
 801c6ee:	b29a      	uxth	r2, r3
 801c6f0:	4b23      	ldr	r3, [pc, #140]	@ (801c780 <ip4_output_if_src+0x154>)
 801c6f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c6f4:	68bb      	ldr	r3, [r7, #8]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d104      	bne.n	801c704 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c6fa:	4b22      	ldr	r3, [pc, #136]	@ (801c784 <ip4_output_if_src+0x158>)
 801c6fc:	681a      	ldr	r2, [r3, #0]
 801c6fe:	69fb      	ldr	r3, [r7, #28]
 801c700:	60da      	str	r2, [r3, #12]
 801c702:	e003      	b.n	801c70c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c704:	68bb      	ldr	r3, [r7, #8]
 801c706:	681a      	ldr	r2, [r3, #0]
 801c708:	69fb      	ldr	r3, [r7, #28]
 801c70a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c70c:	69fb      	ldr	r3, [r7, #28]
 801c70e:	2200      	movs	r2, #0
 801c710:	729a      	strb	r2, [r3, #10]
 801c712:	2200      	movs	r2, #0
 801c714:	72da      	strb	r2, [r3, #11]
 801c716:	e00f      	b.n	801c738 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	895b      	ldrh	r3, [r3, #10]
 801c71c:	2b13      	cmp	r3, #19
 801c71e:	d802      	bhi.n	801c726 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c720:	f06f 0301 	mvn.w	r3, #1
 801c724:	e020      	b.n	801c768 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	685b      	ldr	r3, [r3, #4]
 801c72a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c72c:	69fb      	ldr	r3, [r7, #28]
 801c72e:	691b      	ldr	r3, [r3, #16]
 801c730:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c732:	f107 0314 	add.w	r3, r7, #20
 801c736:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c73a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d00c      	beq.n	801c75a <ip4_output_if_src+0x12e>
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	891a      	ldrh	r2, [r3, #8]
 801c744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c746:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c748:	429a      	cmp	r2, r3
 801c74a:	d906      	bls.n	801c75a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c74c:	687a      	ldr	r2, [r7, #4]
 801c74e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c750:	68f8      	ldr	r0, [r7, #12]
 801c752:	f000 fd53 	bl	801d1fc <ip4_frag>
 801c756:	4603      	mov	r3, r0
 801c758:	e006      	b.n	801c768 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c75c:	695b      	ldr	r3, [r3, #20]
 801c75e:	687a      	ldr	r2, [r7, #4]
 801c760:	68f9      	ldr	r1, [r7, #12]
 801c762:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c764:	4798      	blx	r3
 801c766:	4603      	mov	r3, r0
}
 801c768:	4618      	mov	r0, r3
 801c76a:	3720      	adds	r7, #32
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}
 801c770:	08022330 	.word	0x08022330
 801c774:	08022364 	.word	0x08022364
 801c778:	08022370 	.word	0x08022370
 801c77c:	08022398 	.word	0x08022398
 801c780:	24016f5e 	.word	0x24016f5e
 801c784:	08022868 	.word	0x08022868

0801c788 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c788:	b480      	push	{r7}
 801c78a:	b085      	sub	sp, #20
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
 801c790:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c79c:	d002      	beq.n	801c7a4 <ip4_addr_isbroadcast_u32+0x1c>
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d101      	bne.n	801c7a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c7a4:	2301      	movs	r3, #1
 801c7a6:	e02a      	b.n	801c7fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c7a8:	683b      	ldr	r3, [r7, #0]
 801c7aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c7ae:	f003 0302 	and.w	r3, r3, #2
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d101      	bne.n	801c7ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c7b6:	2300      	movs	r3, #0
 801c7b8:	e021      	b.n	801c7fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	3304      	adds	r3, #4
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	687a      	ldr	r2, [r7, #4]
 801c7c2:	429a      	cmp	r2, r3
 801c7c4:	d101      	bne.n	801c7ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c7c6:	2300      	movs	r3, #0
 801c7c8:	e019      	b.n	801c7fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c7ca:	68fa      	ldr	r2, [r7, #12]
 801c7cc:	683b      	ldr	r3, [r7, #0]
 801c7ce:	3304      	adds	r3, #4
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	405a      	eors	r2, r3
 801c7d4:	683b      	ldr	r3, [r7, #0]
 801c7d6:	3308      	adds	r3, #8
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	4013      	ands	r3, r2
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d10d      	bne.n	801c7fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c7e0:	683b      	ldr	r3, [r7, #0]
 801c7e2:	3308      	adds	r3, #8
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	43da      	mvns	r2, r3
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c7ec:	683b      	ldr	r3, [r7, #0]
 801c7ee:	3308      	adds	r3, #8
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c7f4:	429a      	cmp	r2, r3
 801c7f6:	d101      	bne.n	801c7fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c7f8:	2301      	movs	r3, #1
 801c7fa:	e000      	b.n	801c7fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c7fc:	2300      	movs	r3, #0
  }
}
 801c7fe:	4618      	mov	r0, r3
 801c800:	3714      	adds	r7, #20
 801c802:	46bd      	mov	sp, r7
 801c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c808:	4770      	bx	lr
	...

0801c80c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b084      	sub	sp, #16
 801c810:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c812:	2300      	movs	r3, #0
 801c814:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c816:	4b12      	ldr	r3, [pc, #72]	@ (801c860 <ip_reass_tmr+0x54>)
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c81c:	e018      	b.n	801c850 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	7fdb      	ldrb	r3, [r3, #31]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d00b      	beq.n	801c83e <ip_reass_tmr+0x32>
      r->timer--;
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	7fdb      	ldrb	r3, [r3, #31]
 801c82a:	3b01      	subs	r3, #1
 801c82c:	b2da      	uxtb	r2, r3
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	60fb      	str	r3, [r7, #12]
 801c83c:	e008      	b.n	801c850 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c848:	68b9      	ldr	r1, [r7, #8]
 801c84a:	6878      	ldr	r0, [r7, #4]
 801c84c:	f000 f80a 	bl	801c864 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d1e3      	bne.n	801c81e <ip_reass_tmr+0x12>
    }
  }
}
 801c856:	bf00      	nop
 801c858:	bf00      	nop
 801c85a:	3710      	adds	r7, #16
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}
 801c860:	24016f60 	.word	0x24016f60

0801c864 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c864:	b580      	push	{r7, lr}
 801c866:	b088      	sub	sp, #32
 801c868:	af00      	add	r7, sp, #0
 801c86a:	6078      	str	r0, [r7, #4]
 801c86c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c86e:	2300      	movs	r3, #0
 801c870:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c872:	683a      	ldr	r2, [r7, #0]
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	429a      	cmp	r2, r3
 801c878:	d105      	bne.n	801c886 <ip_reass_free_complete_datagram+0x22>
 801c87a:	4b45      	ldr	r3, [pc, #276]	@ (801c990 <ip_reass_free_complete_datagram+0x12c>)
 801c87c:	22ab      	movs	r2, #171	@ 0xab
 801c87e:	4945      	ldr	r1, [pc, #276]	@ (801c994 <ip_reass_free_complete_datagram+0x130>)
 801c880:	4845      	ldr	r0, [pc, #276]	@ (801c998 <ip_reass_free_complete_datagram+0x134>)
 801c882:	f001 fa97 	bl	801ddb4 <iprintf>
  if (prev != NULL) {
 801c886:	683b      	ldr	r3, [r7, #0]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d00a      	beq.n	801c8a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	687a      	ldr	r2, [r7, #4]
 801c892:	429a      	cmp	r2, r3
 801c894:	d005      	beq.n	801c8a2 <ip_reass_free_complete_datagram+0x3e>
 801c896:	4b3e      	ldr	r3, [pc, #248]	@ (801c990 <ip_reass_free_complete_datagram+0x12c>)
 801c898:	22ad      	movs	r2, #173	@ 0xad
 801c89a:	4940      	ldr	r1, [pc, #256]	@ (801c99c <ip_reass_free_complete_datagram+0x138>)
 801c89c:	483e      	ldr	r0, [pc, #248]	@ (801c998 <ip_reass_free_complete_datagram+0x134>)
 801c89e:	f001 fa89 	bl	801ddb4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	685b      	ldr	r3, [r3, #4]
 801c8a6:	685b      	ldr	r3, [r3, #4]
 801c8a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c8aa:	697b      	ldr	r3, [r7, #20]
 801c8ac:	889b      	ldrh	r3, [r3, #4]
 801c8ae:	b29b      	uxth	r3, r3
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d12a      	bne.n	801c90a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	685b      	ldr	r3, [r3, #4]
 801c8b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c8ba:	697b      	ldr	r3, [r7, #20]
 801c8bc:	681a      	ldr	r2, [r3, #0]
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c8c2:	69bb      	ldr	r3, [r7, #24]
 801c8c4:	6858      	ldr	r0, [r3, #4]
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	3308      	adds	r3, #8
 801c8ca:	2214      	movs	r2, #20
 801c8cc:	4619      	mov	r1, r3
 801c8ce:	f001 fca4 	bl	801e21a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c8d2:	2101      	movs	r1, #1
 801c8d4:	69b8      	ldr	r0, [r7, #24]
 801c8d6:	f7ff fc3d 	bl	801c154 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c8da:	69b8      	ldr	r0, [r7, #24]
 801c8dc:	f7f7 fab6 	bl	8013e4c <pbuf_clen>
 801c8e0:	4603      	mov	r3, r0
 801c8e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c8e4:	8bfa      	ldrh	r2, [r7, #30]
 801c8e6:	8a7b      	ldrh	r3, [r7, #18]
 801c8e8:	4413      	add	r3, r2
 801c8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c8ee:	db05      	blt.n	801c8fc <ip_reass_free_complete_datagram+0x98>
 801c8f0:	4b27      	ldr	r3, [pc, #156]	@ (801c990 <ip_reass_free_complete_datagram+0x12c>)
 801c8f2:	22bc      	movs	r2, #188	@ 0xbc
 801c8f4:	492a      	ldr	r1, [pc, #168]	@ (801c9a0 <ip_reass_free_complete_datagram+0x13c>)
 801c8f6:	4828      	ldr	r0, [pc, #160]	@ (801c998 <ip_reass_free_complete_datagram+0x134>)
 801c8f8:	f001 fa5c 	bl	801ddb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c8fc:	8bfa      	ldrh	r2, [r7, #30]
 801c8fe:	8a7b      	ldrh	r3, [r7, #18]
 801c900:	4413      	add	r3, r2
 801c902:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c904:	69b8      	ldr	r0, [r7, #24]
 801c906:	f7f7 fa13 	bl	8013d30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c90a:	687b      	ldr	r3, [r7, #4]
 801c90c:	685b      	ldr	r3, [r3, #4]
 801c90e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c910:	e01f      	b.n	801c952 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c912:	69bb      	ldr	r3, [r7, #24]
 801c914:	685b      	ldr	r3, [r3, #4]
 801c916:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c918:	69bb      	ldr	r3, [r7, #24]
 801c91a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c91c:	697b      	ldr	r3, [r7, #20]
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c922:	68f8      	ldr	r0, [r7, #12]
 801c924:	f7f7 fa92 	bl	8013e4c <pbuf_clen>
 801c928:	4603      	mov	r3, r0
 801c92a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c92c:	8bfa      	ldrh	r2, [r7, #30]
 801c92e:	8a7b      	ldrh	r3, [r7, #18]
 801c930:	4413      	add	r3, r2
 801c932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c936:	db05      	blt.n	801c944 <ip_reass_free_complete_datagram+0xe0>
 801c938:	4b15      	ldr	r3, [pc, #84]	@ (801c990 <ip_reass_free_complete_datagram+0x12c>)
 801c93a:	22cc      	movs	r2, #204	@ 0xcc
 801c93c:	4918      	ldr	r1, [pc, #96]	@ (801c9a0 <ip_reass_free_complete_datagram+0x13c>)
 801c93e:	4816      	ldr	r0, [pc, #88]	@ (801c998 <ip_reass_free_complete_datagram+0x134>)
 801c940:	f001 fa38 	bl	801ddb4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c944:	8bfa      	ldrh	r2, [r7, #30]
 801c946:	8a7b      	ldrh	r3, [r7, #18]
 801c948:	4413      	add	r3, r2
 801c94a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c94c:	68f8      	ldr	r0, [r7, #12]
 801c94e:	f7f7 f9ef 	bl	8013d30 <pbuf_free>
  while (p != NULL) {
 801c952:	69bb      	ldr	r3, [r7, #24]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d1dc      	bne.n	801c912 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c958:	6839      	ldr	r1, [r7, #0]
 801c95a:	6878      	ldr	r0, [r7, #4]
 801c95c:	f000 f8c2 	bl	801cae4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c960:	4b10      	ldr	r3, [pc, #64]	@ (801c9a4 <ip_reass_free_complete_datagram+0x140>)
 801c962:	881b      	ldrh	r3, [r3, #0]
 801c964:	8bfa      	ldrh	r2, [r7, #30]
 801c966:	429a      	cmp	r2, r3
 801c968:	d905      	bls.n	801c976 <ip_reass_free_complete_datagram+0x112>
 801c96a:	4b09      	ldr	r3, [pc, #36]	@ (801c990 <ip_reass_free_complete_datagram+0x12c>)
 801c96c:	22d2      	movs	r2, #210	@ 0xd2
 801c96e:	490e      	ldr	r1, [pc, #56]	@ (801c9a8 <ip_reass_free_complete_datagram+0x144>)
 801c970:	4809      	ldr	r0, [pc, #36]	@ (801c998 <ip_reass_free_complete_datagram+0x134>)
 801c972:	f001 fa1f 	bl	801ddb4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c976:	4b0b      	ldr	r3, [pc, #44]	@ (801c9a4 <ip_reass_free_complete_datagram+0x140>)
 801c978:	881a      	ldrh	r2, [r3, #0]
 801c97a:	8bfb      	ldrh	r3, [r7, #30]
 801c97c:	1ad3      	subs	r3, r2, r3
 801c97e:	b29a      	uxth	r2, r3
 801c980:	4b08      	ldr	r3, [pc, #32]	@ (801c9a4 <ip_reass_free_complete_datagram+0x140>)
 801c982:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c984:	8bfb      	ldrh	r3, [r7, #30]
}
 801c986:	4618      	mov	r0, r3
 801c988:	3720      	adds	r7, #32
 801c98a:	46bd      	mov	sp, r7
 801c98c:	bd80      	pop	{r7, pc}
 801c98e:	bf00      	nop
 801c990:	080223c8 	.word	0x080223c8
 801c994:	08022404 	.word	0x08022404
 801c998:	08022410 	.word	0x08022410
 801c99c:	08022438 	.word	0x08022438
 801c9a0:	0802244c 	.word	0x0802244c
 801c9a4:	24016f64 	.word	0x24016f64
 801c9a8:	0802246c 	.word	0x0802246c

0801c9ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b08a      	sub	sp, #40	@ 0x28
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
 801c9b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c9b6:	2300      	movs	r3, #0
 801c9b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c9ba:	2300      	movs	r3, #0
 801c9bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c9be:	2300      	movs	r3, #0
 801c9c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c9ca:	4b28      	ldr	r3, [pc, #160]	@ (801ca6c <ip_reass_remove_oldest_datagram+0xc0>)
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c9d0:	e030      	b.n	801ca34 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9d4:	695a      	ldr	r2, [r3, #20]
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	68db      	ldr	r3, [r3, #12]
 801c9da:	429a      	cmp	r2, r3
 801c9dc:	d10c      	bne.n	801c9f8 <ip_reass_remove_oldest_datagram+0x4c>
 801c9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9e0:	699a      	ldr	r2, [r3, #24]
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	691b      	ldr	r3, [r3, #16]
 801c9e6:	429a      	cmp	r2, r3
 801c9e8:	d106      	bne.n	801c9f8 <ip_reass_remove_oldest_datagram+0x4c>
 801c9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9ec:	899a      	ldrh	r2, [r3, #12]
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	889b      	ldrh	r3, [r3, #4]
 801c9f2:	b29b      	uxth	r3, r3
 801c9f4:	429a      	cmp	r2, r3
 801c9f6:	d014      	beq.n	801ca22 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c9f8:	693b      	ldr	r3, [r7, #16]
 801c9fa:	3301      	adds	r3, #1
 801c9fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c9fe:	6a3b      	ldr	r3, [r7, #32]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d104      	bne.n	801ca0e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca06:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ca08:	69fb      	ldr	r3, [r7, #28]
 801ca0a:	61bb      	str	r3, [r7, #24]
 801ca0c:	e009      	b.n	801ca22 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ca0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca10:	7fda      	ldrb	r2, [r3, #31]
 801ca12:	6a3b      	ldr	r3, [r7, #32]
 801ca14:	7fdb      	ldrb	r3, [r3, #31]
 801ca16:	429a      	cmp	r2, r3
 801ca18:	d803      	bhi.n	801ca22 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca1c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ca1e:	69fb      	ldr	r3, [r7, #28]
 801ca20:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ca22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d001      	beq.n	801ca2e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca2c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ca2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ca34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d1cb      	bne.n	801c9d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ca3a:	6a3b      	ldr	r3, [r7, #32]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d008      	beq.n	801ca52 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ca40:	69b9      	ldr	r1, [r7, #24]
 801ca42:	6a38      	ldr	r0, [r7, #32]
 801ca44:	f7ff ff0e 	bl	801c864 <ip_reass_free_complete_datagram>
 801ca48:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ca4a:	697a      	ldr	r2, [r7, #20]
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	4413      	add	r3, r2
 801ca50:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ca52:	697a      	ldr	r2, [r7, #20]
 801ca54:	683b      	ldr	r3, [r7, #0]
 801ca56:	429a      	cmp	r2, r3
 801ca58:	da02      	bge.n	801ca60 <ip_reass_remove_oldest_datagram+0xb4>
 801ca5a:	693b      	ldr	r3, [r7, #16]
 801ca5c:	2b01      	cmp	r3, #1
 801ca5e:	dcac      	bgt.n	801c9ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ca60:	697b      	ldr	r3, [r7, #20]
}
 801ca62:	4618      	mov	r0, r3
 801ca64:	3728      	adds	r7, #40	@ 0x28
 801ca66:	46bd      	mov	sp, r7
 801ca68:	bd80      	pop	{r7, pc}
 801ca6a:	bf00      	nop
 801ca6c:	24016f60 	.word	0x24016f60

0801ca70 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ca70:	b580      	push	{r7, lr}
 801ca72:	b084      	sub	sp, #16
 801ca74:	af00      	add	r7, sp, #0
 801ca76:	6078      	str	r0, [r7, #4]
 801ca78:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ca7a:	2004      	movs	r0, #4
 801ca7c:	f7f6 fa08 	bl	8012e90 <memp_malloc>
 801ca80:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ca82:	68fb      	ldr	r3, [r7, #12]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d110      	bne.n	801caaa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ca88:	6839      	ldr	r1, [r7, #0]
 801ca8a:	6878      	ldr	r0, [r7, #4]
 801ca8c:	f7ff ff8e 	bl	801c9ac <ip_reass_remove_oldest_datagram>
 801ca90:	4602      	mov	r2, r0
 801ca92:	683b      	ldr	r3, [r7, #0]
 801ca94:	4293      	cmp	r3, r2
 801ca96:	dc03      	bgt.n	801caa0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ca98:	2004      	movs	r0, #4
 801ca9a:	f7f6 f9f9 	bl	8012e90 <memp_malloc>
 801ca9e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d101      	bne.n	801caaa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801caa6:	2300      	movs	r3, #0
 801caa8:	e016      	b.n	801cad8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801caaa:	2220      	movs	r2, #32
 801caac:	2100      	movs	r1, #0
 801caae:	68f8      	ldr	r0, [r7, #12]
 801cab0:	f001 fad8 	bl	801e064 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	220f      	movs	r2, #15
 801cab8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801caba:	4b09      	ldr	r3, [pc, #36]	@ (801cae0 <ip_reass_enqueue_new_datagram+0x70>)
 801cabc:	681a      	ldr	r2, [r3, #0]
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801cac2:	4a07      	ldr	r2, [pc, #28]	@ (801cae0 <ip_reass_enqueue_new_datagram+0x70>)
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	3308      	adds	r3, #8
 801cacc:	2214      	movs	r2, #20
 801cace:	6879      	ldr	r1, [r7, #4]
 801cad0:	4618      	mov	r0, r3
 801cad2:	f001 fba2 	bl	801e21a <memcpy>
  return ipr;
 801cad6:	68fb      	ldr	r3, [r7, #12]
}
 801cad8:	4618      	mov	r0, r3
 801cada:	3710      	adds	r7, #16
 801cadc:	46bd      	mov	sp, r7
 801cade:	bd80      	pop	{r7, pc}
 801cae0:	24016f60 	.word	0x24016f60

0801cae4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b082      	sub	sp, #8
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
 801caec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801caee:	4b10      	ldr	r3, [pc, #64]	@ (801cb30 <ip_reass_dequeue_datagram+0x4c>)
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	687a      	ldr	r2, [r7, #4]
 801caf4:	429a      	cmp	r2, r3
 801caf6:	d104      	bne.n	801cb02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	681b      	ldr	r3, [r3, #0]
 801cafc:	4a0c      	ldr	r2, [pc, #48]	@ (801cb30 <ip_reass_dequeue_datagram+0x4c>)
 801cafe:	6013      	str	r3, [r2, #0]
 801cb00:	e00d      	b.n	801cb1e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801cb02:	683b      	ldr	r3, [r7, #0]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d106      	bne.n	801cb16 <ip_reass_dequeue_datagram+0x32>
 801cb08:	4b0a      	ldr	r3, [pc, #40]	@ (801cb34 <ip_reass_dequeue_datagram+0x50>)
 801cb0a:	f240 1245 	movw	r2, #325	@ 0x145
 801cb0e:	490a      	ldr	r1, [pc, #40]	@ (801cb38 <ip_reass_dequeue_datagram+0x54>)
 801cb10:	480a      	ldr	r0, [pc, #40]	@ (801cb3c <ip_reass_dequeue_datagram+0x58>)
 801cb12:	f001 f94f 	bl	801ddb4 <iprintf>
    prev->next = ipr->next;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	681a      	ldr	r2, [r3, #0]
 801cb1a:	683b      	ldr	r3, [r7, #0]
 801cb1c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cb1e:	6879      	ldr	r1, [r7, #4]
 801cb20:	2004      	movs	r0, #4
 801cb22:	f7f6 fa2b 	bl	8012f7c <memp_free>
}
 801cb26:	bf00      	nop
 801cb28:	3708      	adds	r7, #8
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	bd80      	pop	{r7, pc}
 801cb2e:	bf00      	nop
 801cb30:	24016f60 	.word	0x24016f60
 801cb34:	080223c8 	.word	0x080223c8
 801cb38:	08022490 	.word	0x08022490
 801cb3c:	08022410 	.word	0x08022410

0801cb40 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b08c      	sub	sp, #48	@ 0x30
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	60f8      	str	r0, [r7, #12]
 801cb48:	60b9      	str	r1, [r7, #8]
 801cb4a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801cb50:	2301      	movs	r3, #1
 801cb52:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801cb54:	68bb      	ldr	r3, [r7, #8]
 801cb56:	685b      	ldr	r3, [r3, #4]
 801cb58:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801cb5a:	69fb      	ldr	r3, [r7, #28]
 801cb5c:	885b      	ldrh	r3, [r3, #2]
 801cb5e:	b29b      	uxth	r3, r3
 801cb60:	4618      	mov	r0, r3
 801cb62:	f7f5 fbf5 	bl	8012350 <lwip_htons>
 801cb66:	4603      	mov	r3, r0
 801cb68:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801cb6a:	69fb      	ldr	r3, [r7, #28]
 801cb6c:	781b      	ldrb	r3, [r3, #0]
 801cb6e:	f003 030f 	and.w	r3, r3, #15
 801cb72:	b2db      	uxtb	r3, r3
 801cb74:	009b      	lsls	r3, r3, #2
 801cb76:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801cb78:	7e7b      	ldrb	r3, [r7, #25]
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	8b7a      	ldrh	r2, [r7, #26]
 801cb7e:	429a      	cmp	r2, r3
 801cb80:	d202      	bcs.n	801cb88 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cb82:	f04f 33ff 	mov.w	r3, #4294967295
 801cb86:	e135      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801cb88:	7e7b      	ldrb	r3, [r7, #25]
 801cb8a:	b29b      	uxth	r3, r3
 801cb8c:	8b7a      	ldrh	r2, [r7, #26]
 801cb8e:	1ad3      	subs	r3, r2, r3
 801cb90:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801cb92:	69fb      	ldr	r3, [r7, #28]
 801cb94:	88db      	ldrh	r3, [r3, #6]
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7f5 fbd9 	bl	8012350 <lwip_htons>
 801cb9e:	4603      	mov	r3, r0
 801cba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cba4:	b29b      	uxth	r3, r3
 801cba6:	00db      	lsls	r3, r3, #3
 801cba8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801cbaa:	68bb      	ldr	r3, [r7, #8]
 801cbac:	685b      	ldr	r3, [r3, #4]
 801cbae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801cbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbb2:	2200      	movs	r2, #0
 801cbb4:	701a      	strb	r2, [r3, #0]
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	705a      	strb	r2, [r3, #1]
 801cbba:	2200      	movs	r2, #0
 801cbbc:	709a      	strb	r2, [r3, #2]
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801cbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbc4:	8afa      	ldrh	r2, [r7, #22]
 801cbc6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801cbc8:	8afa      	ldrh	r2, [r7, #22]
 801cbca:	8b7b      	ldrh	r3, [r7, #26]
 801cbcc:	4413      	add	r3, r2
 801cbce:	b29a      	uxth	r2, r3
 801cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbd2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801cbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbd6:	88db      	ldrh	r3, [r3, #6]
 801cbd8:	b29b      	uxth	r3, r3
 801cbda:	8afa      	ldrh	r2, [r7, #22]
 801cbdc:	429a      	cmp	r2, r3
 801cbde:	d902      	bls.n	801cbe6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cbe0:	f04f 33ff 	mov.w	r3, #4294967295
 801cbe4:	e106      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	685b      	ldr	r3, [r3, #4]
 801cbea:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbec:	e068      	b.n	801ccc0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbf0:	685b      	ldr	r3, [r3, #4]
 801cbf2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbf6:	889b      	ldrh	r3, [r3, #4]
 801cbf8:	b29a      	uxth	r2, r3
 801cbfa:	693b      	ldr	r3, [r7, #16]
 801cbfc:	889b      	ldrh	r3, [r3, #4]
 801cbfe:	b29b      	uxth	r3, r3
 801cc00:	429a      	cmp	r2, r3
 801cc02:	d235      	bcs.n	801cc70 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cc08:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801cc0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d020      	beq.n	801cc52 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801cc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc12:	889b      	ldrh	r3, [r3, #4]
 801cc14:	b29a      	uxth	r2, r3
 801cc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc18:	88db      	ldrh	r3, [r3, #6]
 801cc1a:	b29b      	uxth	r3, r3
 801cc1c:	429a      	cmp	r2, r3
 801cc1e:	d307      	bcc.n	801cc30 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801cc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc22:	88db      	ldrh	r3, [r3, #6]
 801cc24:	b29a      	uxth	r2, r3
 801cc26:	693b      	ldr	r3, [r7, #16]
 801cc28:	889b      	ldrh	r3, [r3, #4]
 801cc2a:	b29b      	uxth	r3, r3
 801cc2c:	429a      	cmp	r2, r3
 801cc2e:	d902      	bls.n	801cc36 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cc30:	f04f 33ff 	mov.w	r3, #4294967295
 801cc34:	e0de      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc38:	68ba      	ldr	r2, [r7, #8]
 801cc3a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801cc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc3e:	88db      	ldrh	r3, [r3, #6]
 801cc40:	b29a      	uxth	r2, r3
 801cc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc44:	889b      	ldrh	r3, [r3, #4]
 801cc46:	b29b      	uxth	r3, r3
 801cc48:	429a      	cmp	r2, r3
 801cc4a:	d03d      	beq.n	801ccc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801cc50:	e03a      	b.n	801ccc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801cc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc54:	88db      	ldrh	r3, [r3, #6]
 801cc56:	b29a      	uxth	r2, r3
 801cc58:	693b      	ldr	r3, [r7, #16]
 801cc5a:	889b      	ldrh	r3, [r3, #4]
 801cc5c:	b29b      	uxth	r3, r3
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d902      	bls.n	801cc68 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cc62:	f04f 33ff 	mov.w	r3, #4294967295
 801cc66:	e0c5      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	68ba      	ldr	r2, [r7, #8]
 801cc6c:	605a      	str	r2, [r3, #4]
      break;
 801cc6e:	e02b      	b.n	801ccc8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801cc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc72:	889b      	ldrh	r3, [r3, #4]
 801cc74:	b29a      	uxth	r2, r3
 801cc76:	693b      	ldr	r3, [r7, #16]
 801cc78:	889b      	ldrh	r3, [r3, #4]
 801cc7a:	b29b      	uxth	r3, r3
 801cc7c:	429a      	cmp	r2, r3
 801cc7e:	d102      	bne.n	801cc86 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cc80:	f04f 33ff 	mov.w	r3, #4294967295
 801cc84:	e0b6      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801cc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc88:	889b      	ldrh	r3, [r3, #4]
 801cc8a:	b29a      	uxth	r2, r3
 801cc8c:	693b      	ldr	r3, [r7, #16]
 801cc8e:	88db      	ldrh	r3, [r3, #6]
 801cc90:	b29b      	uxth	r3, r3
 801cc92:	429a      	cmp	r2, r3
 801cc94:	d202      	bcs.n	801cc9c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cc96:	f04f 33ff 	mov.w	r3, #4294967295
 801cc9a:	e0ab      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801cc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d009      	beq.n	801ccb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801cca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cca4:	88db      	ldrh	r3, [r3, #6]
 801cca6:	b29a      	uxth	r2, r3
 801cca8:	693b      	ldr	r3, [r7, #16]
 801ccaa:	889b      	ldrh	r3, [r3, #4]
 801ccac:	b29b      	uxth	r3, r3
 801ccae:	429a      	cmp	r2, r3
 801ccb0:	d001      	beq.n	801ccb6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ccb6:	693b      	ldr	r3, [r7, #16]
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801ccbc:	693b      	ldr	r3, [r7, #16]
 801ccbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d193      	bne.n	801cbee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ccc6:	e000      	b.n	801ccca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ccc8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ccca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d12d      	bne.n	801cd2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ccd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d01c      	beq.n	801cd10 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ccd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccd8:	88db      	ldrh	r3, [r3, #6]
 801ccda:	b29a      	uxth	r2, r3
 801ccdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ccde:	889b      	ldrh	r3, [r3, #4]
 801cce0:	b29b      	uxth	r3, r3
 801cce2:	429a      	cmp	r2, r3
 801cce4:	d906      	bls.n	801ccf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801cce6:	4b45      	ldr	r3, [pc, #276]	@ (801cdfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cce8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801ccec:	4944      	ldr	r1, [pc, #272]	@ (801ce00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ccee:	4845      	ldr	r0, [pc, #276]	@ (801ce04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ccf0:	f001 f860 	bl	801ddb4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ccf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccf6:	68ba      	ldr	r2, [r7, #8]
 801ccf8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ccfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccfc:	88db      	ldrh	r3, [r3, #6]
 801ccfe:	b29a      	uxth	r2, r3
 801cd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd02:	889b      	ldrh	r3, [r3, #4]
 801cd04:	b29b      	uxth	r3, r3
 801cd06:	429a      	cmp	r2, r3
 801cd08:	d010      	beq.n	801cd2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	623b      	str	r3, [r7, #32]
 801cd0e:	e00d      	b.n	801cd2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	685b      	ldr	r3, [r3, #4]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d006      	beq.n	801cd26 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801cd18:	4b38      	ldr	r3, [pc, #224]	@ (801cdfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cd1a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801cd1e:	493a      	ldr	r1, [pc, #232]	@ (801ce08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801cd20:	4838      	ldr	r0, [pc, #224]	@ (801ce04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cd22:	f001 f847 	bl	801ddb4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	68ba      	ldr	r2, [r7, #8]
 801cd2a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d105      	bne.n	801cd3e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	7f9b      	ldrb	r3, [r3, #30]
 801cd36:	f003 0301 	and.w	r3, r3, #1
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d059      	beq.n	801cdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801cd3e:	6a3b      	ldr	r3, [r7, #32]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d04f      	beq.n	801cde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	685b      	ldr	r3, [r3, #4]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d006      	beq.n	801cd5a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	685b      	ldr	r3, [r3, #4]
 801cd50:	685b      	ldr	r3, [r3, #4]
 801cd52:	889b      	ldrh	r3, [r3, #4]
 801cd54:	b29b      	uxth	r3, r3
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d002      	beq.n	801cd60 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	623b      	str	r3, [r7, #32]
 801cd5e:	e041      	b.n	801cde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801cd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd62:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801cd6a:	e012      	b.n	801cd92 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801cd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd6e:	685b      	ldr	r3, [r3, #4]
 801cd70:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801cd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd74:	88db      	ldrh	r3, [r3, #6]
 801cd76:	b29a      	uxth	r2, r3
 801cd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd7a:	889b      	ldrh	r3, [r3, #4]
 801cd7c:	b29b      	uxth	r3, r3
 801cd7e:	429a      	cmp	r2, r3
 801cd80:	d002      	beq.n	801cd88 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801cd82:	2300      	movs	r3, #0
 801cd84:	623b      	str	r3, [r7, #32]
            break;
 801cd86:	e007      	b.n	801cd98 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801cd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cd8e:	681b      	ldr	r3, [r3, #0]
 801cd90:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801cd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d1e9      	bne.n	801cd6c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801cd98:	6a3b      	ldr	r3, [r7, #32]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d022      	beq.n	801cde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801cd9e:	68fb      	ldr	r3, [r7, #12]
 801cda0:	685b      	ldr	r3, [r3, #4]
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d106      	bne.n	801cdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801cda6:	4b15      	ldr	r3, [pc, #84]	@ (801cdfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cda8:	f240 12df 	movw	r2, #479	@ 0x1df
 801cdac:	4917      	ldr	r1, [pc, #92]	@ (801ce0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801cdae:	4815      	ldr	r0, [pc, #84]	@ (801ce04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cdb0:	f001 f800 	bl	801ddb4 <iprintf>
          LWIP_ASSERT("sanity check",
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	685b      	ldr	r3, [r3, #4]
 801cdb8:	685b      	ldr	r3, [r3, #4]
 801cdba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	d106      	bne.n	801cdce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801cdc0:	4b0e      	ldr	r3, [pc, #56]	@ (801cdfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cdc2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801cdc6:	4911      	ldr	r1, [pc, #68]	@ (801ce0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801cdc8:	480e      	ldr	r0, [pc, #56]	@ (801ce04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cdca:	f000 fff3 	bl	801ddb4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801cdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d006      	beq.n	801cde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801cdd6:	4b09      	ldr	r3, [pc, #36]	@ (801cdfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cdd8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801cddc:	490c      	ldr	r1, [pc, #48]	@ (801ce10 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801cdde:	4809      	ldr	r0, [pc, #36]	@ (801ce04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cde0:	f000 ffe8 	bl	801ddb4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801cde4:	6a3b      	ldr	r3, [r7, #32]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	bf14      	ite	ne
 801cdea:	2301      	movne	r3, #1
 801cdec:	2300      	moveq	r3, #0
 801cdee:	b2db      	uxtb	r3, r3
 801cdf0:	e000      	b.n	801cdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801cdf2:	2300      	movs	r3, #0
}
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	3730      	adds	r7, #48	@ 0x30
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	bd80      	pop	{r7, pc}
 801cdfc:	080223c8 	.word	0x080223c8
 801ce00:	080224ac 	.word	0x080224ac
 801ce04:	08022410 	.word	0x08022410
 801ce08:	080224cc 	.word	0x080224cc
 801ce0c:	08022504 	.word	0x08022504
 801ce10:	08022514 	.word	0x08022514

0801ce14 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801ce14:	b580      	push	{r7, lr}
 801ce16:	b08e      	sub	sp, #56	@ 0x38
 801ce18:	af00      	add	r7, sp, #0
 801ce1a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	685b      	ldr	r3, [r3, #4]
 801ce20:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801ce22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce24:	781b      	ldrb	r3, [r3, #0]
 801ce26:	f003 030f 	and.w	r3, r3, #15
 801ce2a:	b2db      	uxtb	r3, r3
 801ce2c:	009b      	lsls	r3, r3, #2
 801ce2e:	b2db      	uxtb	r3, r3
 801ce30:	2b14      	cmp	r3, #20
 801ce32:	f040 8171 	bne.w	801d118 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801ce36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce38:	88db      	ldrh	r3, [r3, #6]
 801ce3a:	b29b      	uxth	r3, r3
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	f7f5 fa87 	bl	8012350 <lwip_htons>
 801ce42:	4603      	mov	r3, r0
 801ce44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce48:	b29b      	uxth	r3, r3
 801ce4a:	00db      	lsls	r3, r3, #3
 801ce4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce50:	885b      	ldrh	r3, [r3, #2]
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	4618      	mov	r0, r3
 801ce56:	f7f5 fa7b 	bl	8012350 <lwip_htons>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ce5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce60:	781b      	ldrb	r3, [r3, #0]
 801ce62:	f003 030f 	and.w	r3, r3, #15
 801ce66:	b2db      	uxtb	r3, r3
 801ce68:	009b      	lsls	r3, r3, #2
 801ce6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801ce6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ce72:	b29b      	uxth	r3, r3
 801ce74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ce76:	429a      	cmp	r2, r3
 801ce78:	f0c0 8150 	bcc.w	801d11c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ce7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ce80:	b29b      	uxth	r3, r3
 801ce82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ce84:	1ad3      	subs	r3, r2, r3
 801ce86:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ce88:	6878      	ldr	r0, [r7, #4]
 801ce8a:	f7f6 ffdf 	bl	8013e4c <pbuf_clen>
 801ce8e:	4603      	mov	r3, r0
 801ce90:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ce92:	4b8c      	ldr	r3, [pc, #560]	@ (801d0c4 <ip4_reass+0x2b0>)
 801ce94:	881b      	ldrh	r3, [r3, #0]
 801ce96:	461a      	mov	r2, r3
 801ce98:	8c3b      	ldrh	r3, [r7, #32]
 801ce9a:	4413      	add	r3, r2
 801ce9c:	2b0a      	cmp	r3, #10
 801ce9e:	dd10      	ble.n	801cec2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cea0:	8c3b      	ldrh	r3, [r7, #32]
 801cea2:	4619      	mov	r1, r3
 801cea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cea6:	f7ff fd81 	bl	801c9ac <ip_reass_remove_oldest_datagram>
 801ceaa:	4603      	mov	r3, r0
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	f000 8137 	beq.w	801d120 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ceb2:	4b84      	ldr	r3, [pc, #528]	@ (801d0c4 <ip4_reass+0x2b0>)
 801ceb4:	881b      	ldrh	r3, [r3, #0]
 801ceb6:	461a      	mov	r2, r3
 801ceb8:	8c3b      	ldrh	r3, [r7, #32]
 801ceba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801cebc:	2b0a      	cmp	r3, #10
 801cebe:	f300 812f 	bgt.w	801d120 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cec2:	4b81      	ldr	r3, [pc, #516]	@ (801d0c8 <ip4_reass+0x2b4>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	633b      	str	r3, [r7, #48]	@ 0x30
 801cec8:	e015      	b.n	801cef6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ceca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cecc:	695a      	ldr	r2, [r3, #20]
 801cece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ced0:	68db      	ldr	r3, [r3, #12]
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d10c      	bne.n	801cef0 <ip4_reass+0xdc>
 801ced6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ced8:	699a      	ldr	r2, [r3, #24]
 801ceda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cedc:	691b      	ldr	r3, [r3, #16]
 801cede:	429a      	cmp	r2, r3
 801cee0:	d106      	bne.n	801cef0 <ip4_reass+0xdc>
 801cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cee4:	899a      	ldrh	r2, [r3, #12]
 801cee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cee8:	889b      	ldrh	r3, [r3, #4]
 801ceea:	b29b      	uxth	r3, r3
 801ceec:	429a      	cmp	r2, r3
 801ceee:	d006      	beq.n	801cefe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801cef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	633b      	str	r3, [r7, #48]	@ 0x30
 801cef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d1e6      	bne.n	801ceca <ip4_reass+0xb6>
 801cefc:	e000      	b.n	801cf00 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801cefe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf02:	2b00      	cmp	r3, #0
 801cf04:	d109      	bne.n	801cf1a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801cf06:	8c3b      	ldrh	r3, [r7, #32]
 801cf08:	4619      	mov	r1, r3
 801cf0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cf0c:	f7ff fdb0 	bl	801ca70 <ip_reass_enqueue_new_datagram>
 801cf10:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf14:	2b00      	cmp	r3, #0
 801cf16:	d11c      	bne.n	801cf52 <ip4_reass+0x13e>
      goto nullreturn;
 801cf18:	e105      	b.n	801d126 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf1c:	88db      	ldrh	r3, [r3, #6]
 801cf1e:	b29b      	uxth	r3, r3
 801cf20:	4618      	mov	r0, r3
 801cf22:	f7f5 fa15 	bl	8012350 <lwip_htons>
 801cf26:	4603      	mov	r3, r0
 801cf28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d110      	bne.n	801cf52 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801cf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf32:	89db      	ldrh	r3, [r3, #14]
 801cf34:	4618      	mov	r0, r3
 801cf36:	f7f5 fa0b 	bl	8012350 <lwip_htons>
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d006      	beq.n	801cf52 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf46:	3308      	adds	r3, #8
 801cf48:	2214      	movs	r2, #20
 801cf4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cf4c:	4618      	mov	r0, r3
 801cf4e:	f001 f964 	bl	801e21a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801cf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf54:	88db      	ldrh	r3, [r3, #6]
 801cf56:	b29b      	uxth	r3, r3
 801cf58:	f003 0320 	and.w	r3, r3, #32
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	bf0c      	ite	eq
 801cf60:	2301      	moveq	r3, #1
 801cf62:	2300      	movne	r3, #0
 801cf64:	b2db      	uxtb	r3, r3
 801cf66:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801cf68:	69fb      	ldr	r3, [r7, #28]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d00e      	beq.n	801cf8c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801cf6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cf70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cf72:	4413      	add	r3, r2
 801cf74:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801cf76:	8b7a      	ldrh	r2, [r7, #26]
 801cf78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cf7a:	429a      	cmp	r2, r3
 801cf7c:	f0c0 80a0 	bcc.w	801d0c0 <ip4_reass+0x2ac>
 801cf80:	8b7b      	ldrh	r3, [r7, #26]
 801cf82:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801cf86:	4293      	cmp	r3, r2
 801cf88:	f200 809a 	bhi.w	801d0c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801cf8c:	69fa      	ldr	r2, [r7, #28]
 801cf8e:	6879      	ldr	r1, [r7, #4]
 801cf90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cf92:	f7ff fdd5 	bl	801cb40 <ip_reass_chain_frag_into_datagram_and_validate>
 801cf96:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801cf98:	697b      	ldr	r3, [r7, #20]
 801cf9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf9e:	f000 809b 	beq.w	801d0d8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801cfa2:	4b48      	ldr	r3, [pc, #288]	@ (801d0c4 <ip4_reass+0x2b0>)
 801cfa4:	881a      	ldrh	r2, [r3, #0]
 801cfa6:	8c3b      	ldrh	r3, [r7, #32]
 801cfa8:	4413      	add	r3, r2
 801cfaa:	b29a      	uxth	r2, r3
 801cfac:	4b45      	ldr	r3, [pc, #276]	@ (801d0c4 <ip4_reass+0x2b0>)
 801cfae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801cfb0:	69fb      	ldr	r3, [r7, #28]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d00d      	beq.n	801cfd2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801cfb6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cfb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cfba:	4413      	add	r3, r2
 801cfbc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfc0:	8a7a      	ldrh	r2, [r7, #18]
 801cfc2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801cfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfc6:	7f9b      	ldrb	r3, [r3, #30]
 801cfc8:	f043 0301 	orr.w	r3, r3, #1
 801cfcc:	b2da      	uxtb	r2, r3
 801cfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfd0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801cfd2:	697b      	ldr	r3, [r7, #20]
 801cfd4:	2b01      	cmp	r3, #1
 801cfd6:	d171      	bne.n	801d0bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801cfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfda:	8b9b      	ldrh	r3, [r3, #28]
 801cfdc:	3314      	adds	r3, #20
 801cfde:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801cfe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfe2:	685b      	ldr	r3, [r3, #4]
 801cfe4:	685b      	ldr	r3, [r3, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801cfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfec:	685b      	ldr	r3, [r3, #4]
 801cfee:	685b      	ldr	r3, [r3, #4]
 801cff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801cff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cff4:	3308      	adds	r3, #8
 801cff6:	2214      	movs	r2, #20
 801cff8:	4619      	mov	r1, r3
 801cffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cffc:	f001 f90d 	bl	801e21a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d000:	8a3b      	ldrh	r3, [r7, #16]
 801d002:	4618      	mov	r0, r3
 801d004:	f7f5 f9a4 	bl	8012350 <lwip_htons>
 801d008:	4603      	mov	r3, r0
 801d00a:	461a      	mov	r2, r3
 801d00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d00e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d012:	2200      	movs	r2, #0
 801d014:	719a      	strb	r2, [r3, #6]
 801d016:	2200      	movs	r2, #0
 801d018:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d01c:	2200      	movs	r2, #0
 801d01e:	729a      	strb	r2, [r3, #10]
 801d020:	2200      	movs	r2, #0
 801d022:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d026:	685b      	ldr	r3, [r3, #4]
 801d028:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d02a:	e00d      	b.n	801d048 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d02e:	685b      	ldr	r3, [r3, #4]
 801d030:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d032:	2114      	movs	r1, #20
 801d034:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d036:	f7f6 fdc3 	bl	8013bc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d03a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d03c:	6878      	ldr	r0, [r7, #4]
 801d03e:	f7f6 ff45 	bl	8013ecc <pbuf_cat>
      r = iprh->next_pbuf;
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801d048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d1ee      	bne.n	801d02c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d04e:	4b1e      	ldr	r3, [pc, #120]	@ (801d0c8 <ip4_reass+0x2b4>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d054:	429a      	cmp	r2, r3
 801d056:	d102      	bne.n	801d05e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d058:	2300      	movs	r3, #0
 801d05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d05c:	e010      	b.n	801d080 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d05e:	4b1a      	ldr	r3, [pc, #104]	@ (801d0c8 <ip4_reass+0x2b4>)
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d064:	e007      	b.n	801d076 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d006      	beq.n	801d07e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d1f4      	bne.n	801d066 <ip4_reass+0x252>
 801d07c:	e000      	b.n	801d080 <ip4_reass+0x26c>
          break;
 801d07e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d082:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d084:	f7ff fd2e 	bl	801cae4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d088:	6878      	ldr	r0, [r7, #4]
 801d08a:	f7f6 fedf 	bl	8013e4c <pbuf_clen>
 801d08e:	4603      	mov	r3, r0
 801d090:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d092:	4b0c      	ldr	r3, [pc, #48]	@ (801d0c4 <ip4_reass+0x2b0>)
 801d094:	881b      	ldrh	r3, [r3, #0]
 801d096:	8c3a      	ldrh	r2, [r7, #32]
 801d098:	429a      	cmp	r2, r3
 801d09a:	d906      	bls.n	801d0aa <ip4_reass+0x296>
 801d09c:	4b0b      	ldr	r3, [pc, #44]	@ (801d0cc <ip4_reass+0x2b8>)
 801d09e:	f240 229b 	movw	r2, #667	@ 0x29b
 801d0a2:	490b      	ldr	r1, [pc, #44]	@ (801d0d0 <ip4_reass+0x2bc>)
 801d0a4:	480b      	ldr	r0, [pc, #44]	@ (801d0d4 <ip4_reass+0x2c0>)
 801d0a6:	f000 fe85 	bl	801ddb4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d0aa:	4b06      	ldr	r3, [pc, #24]	@ (801d0c4 <ip4_reass+0x2b0>)
 801d0ac:	881a      	ldrh	r2, [r3, #0]
 801d0ae:	8c3b      	ldrh	r3, [r7, #32]
 801d0b0:	1ad3      	subs	r3, r2, r3
 801d0b2:	b29a      	uxth	r2, r3
 801d0b4:	4b03      	ldr	r3, [pc, #12]	@ (801d0c4 <ip4_reass+0x2b0>)
 801d0b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	e038      	b.n	801d12e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d0bc:	2300      	movs	r3, #0
 801d0be:	e036      	b.n	801d12e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801d0c0:	bf00      	nop
 801d0c2:	e00a      	b.n	801d0da <ip4_reass+0x2c6>
 801d0c4:	24016f64 	.word	0x24016f64
 801d0c8:	24016f60 	.word	0x24016f60
 801d0cc:	080223c8 	.word	0x080223c8
 801d0d0:	08022538 	.word	0x08022538
 801d0d4:	08022410 	.word	0x08022410
    goto nullreturn_ipr;
 801d0d8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d106      	bne.n	801d0ee <ip4_reass+0x2da>
 801d0e0:	4b15      	ldr	r3, [pc, #84]	@ (801d138 <ip4_reass+0x324>)
 801d0e2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801d0e6:	4915      	ldr	r1, [pc, #84]	@ (801d13c <ip4_reass+0x328>)
 801d0e8:	4815      	ldr	r0, [pc, #84]	@ (801d140 <ip4_reass+0x32c>)
 801d0ea:	f000 fe63 	bl	801ddb4 <iprintf>
  if (ipr->p == NULL) {
 801d0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0f0:	685b      	ldr	r3, [r3, #4]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d116      	bne.n	801d124 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d0f6:	4b13      	ldr	r3, [pc, #76]	@ (801d144 <ip4_reass+0x330>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d0fc:	429a      	cmp	r2, r3
 801d0fe:	d006      	beq.n	801d10e <ip4_reass+0x2fa>
 801d100:	4b0d      	ldr	r3, [pc, #52]	@ (801d138 <ip4_reass+0x324>)
 801d102:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801d106:	4910      	ldr	r1, [pc, #64]	@ (801d148 <ip4_reass+0x334>)
 801d108:	480d      	ldr	r0, [pc, #52]	@ (801d140 <ip4_reass+0x32c>)
 801d10a:	f000 fe53 	bl	801ddb4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d10e:	2100      	movs	r1, #0
 801d110:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d112:	f7ff fce7 	bl	801cae4 <ip_reass_dequeue_datagram>
 801d116:	e006      	b.n	801d126 <ip4_reass+0x312>
    goto nullreturn;
 801d118:	bf00      	nop
 801d11a:	e004      	b.n	801d126 <ip4_reass+0x312>
    goto nullreturn;
 801d11c:	bf00      	nop
 801d11e:	e002      	b.n	801d126 <ip4_reass+0x312>
      goto nullreturn;
 801d120:	bf00      	nop
 801d122:	e000      	b.n	801d126 <ip4_reass+0x312>
  }

nullreturn:
 801d124:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d126:	6878      	ldr	r0, [r7, #4]
 801d128:	f7f6 fe02 	bl	8013d30 <pbuf_free>
  return NULL;
 801d12c:	2300      	movs	r3, #0
}
 801d12e:	4618      	mov	r0, r3
 801d130:	3738      	adds	r7, #56	@ 0x38
 801d132:	46bd      	mov	sp, r7
 801d134:	bd80      	pop	{r7, pc}
 801d136:	bf00      	nop
 801d138:	080223c8 	.word	0x080223c8
 801d13c:	08022554 	.word	0x08022554
 801d140:	08022410 	.word	0x08022410
 801d144:	24016f60 	.word	0x24016f60
 801d148:	08022560 	.word	0x08022560

0801d14c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d14c:	b580      	push	{r7, lr}
 801d14e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d150:	2005      	movs	r0, #5
 801d152:	f7f5 fe9d 	bl	8012e90 <memp_malloc>
 801d156:	4603      	mov	r3, r0
}
 801d158:	4618      	mov	r0, r3
 801d15a:	bd80      	pop	{r7, pc}

0801d15c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d15c:	b580      	push	{r7, lr}
 801d15e:	b082      	sub	sp, #8
 801d160:	af00      	add	r7, sp, #0
 801d162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	2b00      	cmp	r3, #0
 801d168:	d106      	bne.n	801d178 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d16a:	4b07      	ldr	r3, [pc, #28]	@ (801d188 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d16c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801d170:	4906      	ldr	r1, [pc, #24]	@ (801d18c <ip_frag_free_pbuf_custom_ref+0x30>)
 801d172:	4807      	ldr	r0, [pc, #28]	@ (801d190 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d174:	f000 fe1e 	bl	801ddb4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d178:	6879      	ldr	r1, [r7, #4]
 801d17a:	2005      	movs	r0, #5
 801d17c:	f7f5 fefe 	bl	8012f7c <memp_free>
}
 801d180:	bf00      	nop
 801d182:	3708      	adds	r7, #8
 801d184:	46bd      	mov	sp, r7
 801d186:	bd80      	pop	{r7, pc}
 801d188:	080223c8 	.word	0x080223c8
 801d18c:	08022580 	.word	0x08022580
 801d190:	08022410 	.word	0x08022410

0801d194 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b084      	sub	sp, #16
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d106      	bne.n	801d1b4 <ipfrag_free_pbuf_custom+0x20>
 801d1a6:	4b11      	ldr	r3, [pc, #68]	@ (801d1ec <ipfrag_free_pbuf_custom+0x58>)
 801d1a8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801d1ac:	4910      	ldr	r1, [pc, #64]	@ (801d1f0 <ipfrag_free_pbuf_custom+0x5c>)
 801d1ae:	4811      	ldr	r0, [pc, #68]	@ (801d1f4 <ipfrag_free_pbuf_custom+0x60>)
 801d1b0:	f000 fe00 	bl	801ddb4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d1b4:	68fa      	ldr	r2, [r7, #12]
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	429a      	cmp	r2, r3
 801d1ba:	d006      	beq.n	801d1ca <ipfrag_free_pbuf_custom+0x36>
 801d1bc:	4b0b      	ldr	r3, [pc, #44]	@ (801d1ec <ipfrag_free_pbuf_custom+0x58>)
 801d1be:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801d1c2:	490d      	ldr	r1, [pc, #52]	@ (801d1f8 <ipfrag_free_pbuf_custom+0x64>)
 801d1c4:	480b      	ldr	r0, [pc, #44]	@ (801d1f4 <ipfrag_free_pbuf_custom+0x60>)
 801d1c6:	f000 fdf5 	bl	801ddb4 <iprintf>
  if (pcr->original != NULL) {
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	695b      	ldr	r3, [r3, #20]
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d004      	beq.n	801d1dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	695b      	ldr	r3, [r3, #20]
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f7f6 fdaa 	bl	8013d30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d1dc:	68f8      	ldr	r0, [r7, #12]
 801d1de:	f7ff ffbd 	bl	801d15c <ip_frag_free_pbuf_custom_ref>
}
 801d1e2:	bf00      	nop
 801d1e4:	3710      	adds	r7, #16
 801d1e6:	46bd      	mov	sp, r7
 801d1e8:	bd80      	pop	{r7, pc}
 801d1ea:	bf00      	nop
 801d1ec:	080223c8 	.word	0x080223c8
 801d1f0:	0802258c 	.word	0x0802258c
 801d1f4:	08022410 	.word	0x08022410
 801d1f8:	08022598 	.word	0x08022598

0801d1fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d1fc:	b580      	push	{r7, lr}
 801d1fe:	b094      	sub	sp, #80	@ 0x50
 801d200:	af02      	add	r7, sp, #8
 801d202:	60f8      	str	r0, [r7, #12]
 801d204:	60b9      	str	r1, [r7, #8]
 801d206:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d208:	2300      	movs	r3, #0
 801d20a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d20e:	68bb      	ldr	r3, [r7, #8]
 801d210:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d212:	3b14      	subs	r3, #20
 801d214:	2b00      	cmp	r3, #0
 801d216:	da00      	bge.n	801d21a <ip4_frag+0x1e>
 801d218:	3307      	adds	r3, #7
 801d21a:	10db      	asrs	r3, r3, #3
 801d21c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d21e:	2314      	movs	r3, #20
 801d220:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	685b      	ldr	r3, [r3, #4]
 801d226:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801d228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d22a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d22e:	781b      	ldrb	r3, [r3, #0]
 801d230:	f003 030f 	and.w	r3, r3, #15
 801d234:	b2db      	uxtb	r3, r3
 801d236:	009b      	lsls	r3, r3, #2
 801d238:	b2db      	uxtb	r3, r3
 801d23a:	2b14      	cmp	r3, #20
 801d23c:	d002      	beq.n	801d244 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d23e:	f06f 0305 	mvn.w	r3, #5
 801d242:	e110      	b.n	801d466 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	895b      	ldrh	r3, [r3, #10]
 801d248:	2b13      	cmp	r3, #19
 801d24a:	d809      	bhi.n	801d260 <ip4_frag+0x64>
 801d24c:	4b88      	ldr	r3, [pc, #544]	@ (801d470 <ip4_frag+0x274>)
 801d24e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801d252:	4988      	ldr	r1, [pc, #544]	@ (801d474 <ip4_frag+0x278>)
 801d254:	4888      	ldr	r0, [pc, #544]	@ (801d478 <ip4_frag+0x27c>)
 801d256:	f000 fdad 	bl	801ddb4 <iprintf>
 801d25a:	f06f 0305 	mvn.w	r3, #5
 801d25e:	e102      	b.n	801d466 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d262:	88db      	ldrh	r3, [r3, #6]
 801d264:	b29b      	uxth	r3, r3
 801d266:	4618      	mov	r0, r3
 801d268:	f7f5 f872 	bl	8012350 <lwip_htons>
 801d26c:	4603      	mov	r3, r0
 801d26e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801d270:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d272:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d276:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d27a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d27c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d280:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	891b      	ldrh	r3, [r3, #8]
 801d286:	3b14      	subs	r3, #20
 801d288:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801d28c:	e0e1      	b.n	801d452 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d28e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d290:	00db      	lsls	r3, r3, #3
 801d292:	b29b      	uxth	r3, r3
 801d294:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d298:	4293      	cmp	r3, r2
 801d29a:	bf28      	it	cs
 801d29c:	4613      	movcs	r3, r2
 801d29e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d2a0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d2a4:	2114      	movs	r1, #20
 801d2a6:	200e      	movs	r0, #14
 801d2a8:	f7f6 fa28 	bl	80136fc <pbuf_alloc>
 801d2ac:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	f000 80d5 	beq.w	801d460 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2b8:	895b      	ldrh	r3, [r3, #10]
 801d2ba:	2b13      	cmp	r3, #19
 801d2bc:	d806      	bhi.n	801d2cc <ip4_frag+0xd0>
 801d2be:	4b6c      	ldr	r3, [pc, #432]	@ (801d470 <ip4_frag+0x274>)
 801d2c0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801d2c4:	496d      	ldr	r1, [pc, #436]	@ (801d47c <ip4_frag+0x280>)
 801d2c6:	486c      	ldr	r0, [pc, #432]	@ (801d478 <ip4_frag+0x27c>)
 801d2c8:	f000 fd74 	bl	801ddb4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ce:	685b      	ldr	r3, [r3, #4]
 801d2d0:	2214      	movs	r2, #20
 801d2d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	f000 ffa0 	bl	801e21a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2dc:	685b      	ldr	r3, [r3, #4]
 801d2de:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801d2e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d2e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801d2e6:	e064      	b.n	801d3b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	895a      	ldrh	r2, [r3, #10]
 801d2ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d2ee:	1ad3      	subs	r3, r2, r3
 801d2f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	895b      	ldrh	r3, [r3, #10]
 801d2f6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d2f8:	429a      	cmp	r2, r3
 801d2fa:	d906      	bls.n	801d30a <ip4_frag+0x10e>
 801d2fc:	4b5c      	ldr	r3, [pc, #368]	@ (801d470 <ip4_frag+0x274>)
 801d2fe:	f240 322d 	movw	r2, #813	@ 0x32d
 801d302:	495f      	ldr	r1, [pc, #380]	@ (801d480 <ip4_frag+0x284>)
 801d304:	485c      	ldr	r0, [pc, #368]	@ (801d478 <ip4_frag+0x27c>)
 801d306:	f000 fd55 	bl	801ddb4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d30a:	8bfa      	ldrh	r2, [r7, #30]
 801d30c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d310:	4293      	cmp	r3, r2
 801d312:	bf28      	it	cs
 801d314:	4613      	movcs	r3, r2
 801d316:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d31a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d105      	bne.n	801d32e <ip4_frag+0x132>
        poff = 0;
 801d322:	2300      	movs	r3, #0
 801d324:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	60fb      	str	r3, [r7, #12]
        continue;
 801d32c:	e041      	b.n	801d3b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d32e:	f7ff ff0d 	bl	801d14c <ip_frag_alloc_pbuf_custom_ref>
 801d332:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d334:	69bb      	ldr	r3, [r7, #24]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d103      	bne.n	801d342 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d33a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d33c:	f7f6 fcf8 	bl	8013d30 <pbuf_free>
        goto memerr;
 801d340:	e08f      	b.n	801d462 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d342:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d348:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d34a:	4413      	add	r3, r2
 801d34c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801d350:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801d354:	9201      	str	r2, [sp, #4]
 801d356:	9300      	str	r3, [sp, #0]
 801d358:	4603      	mov	r3, r0
 801d35a:	2241      	movs	r2, #65	@ 0x41
 801d35c:	2000      	movs	r0, #0
 801d35e:	f7f6 fafb 	bl	8013958 <pbuf_alloced_custom>
 801d362:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d364:	697b      	ldr	r3, [r7, #20]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d106      	bne.n	801d378 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d36a:	69b8      	ldr	r0, [r7, #24]
 801d36c:	f7ff fef6 	bl	801d15c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d370:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d372:	f7f6 fcdd 	bl	8013d30 <pbuf_free>
        goto memerr;
 801d376:	e074      	b.n	801d462 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d378:	68f8      	ldr	r0, [r7, #12]
 801d37a:	f7f6 fd7f 	bl	8013e7c <pbuf_ref>
      pcr->original = p;
 801d37e:	69bb      	ldr	r3, [r7, #24]
 801d380:	68fa      	ldr	r2, [r7, #12]
 801d382:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d384:	69bb      	ldr	r3, [r7, #24]
 801d386:	4a3f      	ldr	r2, [pc, #252]	@ (801d484 <ip4_frag+0x288>)
 801d388:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d38a:	6979      	ldr	r1, [r7, #20]
 801d38c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d38e:	f7f6 fd9d 	bl	8013ecc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d392:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801d396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d39a:	1ad3      	subs	r3, r2, r3
 801d39c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801d3a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d004      	beq.n	801d3b2 <ip4_frag+0x1b6>
        poff = 0;
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d3ac:	68fb      	ldr	r3, [r7, #12]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d3b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d196      	bne.n	801d2e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d3ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d3bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d3c0:	4413      	add	r3, r2
 801d3c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d3c4:	68bb      	ldr	r3, [r7, #8]
 801d3c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d3c8:	f1a3 0213 	sub.w	r2, r3, #19
 801d3cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d3d0:	429a      	cmp	r2, r3
 801d3d2:	bfcc      	ite	gt
 801d3d4:	2301      	movgt	r3, #1
 801d3d6:	2300      	movle	r3, #0
 801d3d8:	b2db      	uxtb	r3, r3
 801d3da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d3dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801d3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d3e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801d3e6:	6a3b      	ldr	r3, [r7, #32]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d002      	beq.n	801d3f2 <ip4_frag+0x1f6>
 801d3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d003      	beq.n	801d3fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d3f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d3f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801d3f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d3fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	f7f4 ffa7 	bl	8012350 <lwip_htons>
 801d402:	4603      	mov	r3, r0
 801d404:	461a      	mov	r2, r3
 801d406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d408:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d40a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d40c:	3314      	adds	r3, #20
 801d40e:	b29b      	uxth	r3, r3
 801d410:	4618      	mov	r0, r3
 801d412:	f7f4 ff9d 	bl	8012350 <lwip_htons>
 801d416:	4603      	mov	r3, r0
 801d418:	461a      	mov	r2, r3
 801d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d41c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d420:	2200      	movs	r2, #0
 801d422:	729a      	strb	r2, [r3, #10]
 801d424:	2200      	movs	r2, #0
 801d426:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	695b      	ldr	r3, [r3, #20]
 801d42c:	687a      	ldr	r2, [r7, #4]
 801d42e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d430:	68b8      	ldr	r0, [r7, #8]
 801d432:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d434:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d436:	f7f6 fc7b 	bl	8013d30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d43a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d43e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d440:	1ad3      	subs	r3, r2, r3
 801d442:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801d446:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801d44a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d44c:	4413      	add	r3, r2
 801d44e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801d452:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d456:	2b00      	cmp	r3, #0
 801d458:	f47f af19 	bne.w	801d28e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d45c:	2300      	movs	r3, #0
 801d45e:	e002      	b.n	801d466 <ip4_frag+0x26a>
      goto memerr;
 801d460:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d462:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d466:	4618      	mov	r0, r3
 801d468:	3748      	adds	r7, #72	@ 0x48
 801d46a:	46bd      	mov	sp, r7
 801d46c:	bd80      	pop	{r7, pc}
 801d46e:	bf00      	nop
 801d470:	080223c8 	.word	0x080223c8
 801d474:	080225a4 	.word	0x080225a4
 801d478:	08022410 	.word	0x08022410
 801d47c:	080225c0 	.word	0x080225c0
 801d480:	080225e0 	.word	0x080225e0
 801d484:	0801d195 	.word	0x0801d195

0801d488 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d488:	b580      	push	{r7, lr}
 801d48a:	b086      	sub	sp, #24
 801d48c:	af00      	add	r7, sp, #0
 801d48e:	6078      	str	r0, [r7, #4]
 801d490:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d492:	230e      	movs	r3, #14
 801d494:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	895b      	ldrh	r3, [r3, #10]
 801d49a:	2b0e      	cmp	r3, #14
 801d49c:	d96e      	bls.n	801d57c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	7bdb      	ldrb	r3, [r3, #15]
 801d4a2:	2b00      	cmp	r3, #0
 801d4a4:	d106      	bne.n	801d4b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d4a6:	683b      	ldr	r3, [r7, #0]
 801d4a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d4ac:	3301      	adds	r3, #1
 801d4ae:	b2da      	uxtb	r2, r3
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	685b      	ldr	r3, [r3, #4]
 801d4b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d4ba:	693b      	ldr	r3, [r7, #16]
 801d4bc:	7b1a      	ldrb	r2, [r3, #12]
 801d4be:	7b5b      	ldrb	r3, [r3, #13]
 801d4c0:	021b      	lsls	r3, r3, #8
 801d4c2:	4313      	orrs	r3, r2
 801d4c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d4c6:	693b      	ldr	r3, [r7, #16]
 801d4c8:	781b      	ldrb	r3, [r3, #0]
 801d4ca:	f003 0301 	and.w	r3, r3, #1
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d023      	beq.n	801d51a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d4d2:	693b      	ldr	r3, [r7, #16]
 801d4d4:	781b      	ldrb	r3, [r3, #0]
 801d4d6:	2b01      	cmp	r3, #1
 801d4d8:	d10f      	bne.n	801d4fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d4da:	693b      	ldr	r3, [r7, #16]
 801d4dc:	785b      	ldrb	r3, [r3, #1]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d11b      	bne.n	801d51a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d4e2:	693b      	ldr	r3, [r7, #16]
 801d4e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d4e6:	2b5e      	cmp	r3, #94	@ 0x5e
 801d4e8:	d117      	bne.n	801d51a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	7b5b      	ldrb	r3, [r3, #13]
 801d4ee:	f043 0310 	orr.w	r3, r3, #16
 801d4f2:	b2da      	uxtb	r2, r3
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	735a      	strb	r2, [r3, #13]
 801d4f8:	e00f      	b.n	801d51a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d4fa:	693b      	ldr	r3, [r7, #16]
 801d4fc:	2206      	movs	r2, #6
 801d4fe:	4928      	ldr	r1, [pc, #160]	@ (801d5a0 <ethernet_input+0x118>)
 801d500:	4618      	mov	r0, r3
 801d502:	f000 fd9f 	bl	801e044 <memcmp>
 801d506:	4603      	mov	r3, r0
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d106      	bne.n	801d51a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	7b5b      	ldrb	r3, [r3, #13]
 801d510:	f043 0308 	orr.w	r3, r3, #8
 801d514:	b2da      	uxtb	r2, r3
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d51a:	89fb      	ldrh	r3, [r7, #14]
 801d51c:	2b08      	cmp	r3, #8
 801d51e:	d003      	beq.n	801d528 <ethernet_input+0xa0>
 801d520:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d524:	d014      	beq.n	801d550 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d526:	e032      	b.n	801d58e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d528:	683b      	ldr	r3, [r7, #0]
 801d52a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d52e:	f003 0308 	and.w	r3, r3, #8
 801d532:	2b00      	cmp	r3, #0
 801d534:	d024      	beq.n	801d580 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d536:	8afb      	ldrh	r3, [r7, #22]
 801d538:	4619      	mov	r1, r3
 801d53a:	6878      	ldr	r0, [r7, #4]
 801d53c:	f7f6 fb40 	bl	8013bc0 <pbuf_remove_header>
 801d540:	4603      	mov	r3, r0
 801d542:	2b00      	cmp	r3, #0
 801d544:	d11e      	bne.n	801d584 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d546:	6839      	ldr	r1, [r7, #0]
 801d548:	6878      	ldr	r0, [r7, #4]
 801d54a:	f7fe ff21 	bl	801c390 <ip4_input>
      break;
 801d54e:	e013      	b.n	801d578 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d550:	683b      	ldr	r3, [r7, #0]
 801d552:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d556:	f003 0308 	and.w	r3, r3, #8
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d014      	beq.n	801d588 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d55e:	8afb      	ldrh	r3, [r7, #22]
 801d560:	4619      	mov	r1, r3
 801d562:	6878      	ldr	r0, [r7, #4]
 801d564:	f7f6 fb2c 	bl	8013bc0 <pbuf_remove_header>
 801d568:	4603      	mov	r3, r0
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d10e      	bne.n	801d58c <ethernet_input+0x104>
        etharp_input(p, netif);
 801d56e:	6839      	ldr	r1, [r7, #0]
 801d570:	6878      	ldr	r0, [r7, #4]
 801d572:	f7fe f89b 	bl	801b6ac <etharp_input>
      break;
 801d576:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d578:	2300      	movs	r3, #0
 801d57a:	e00c      	b.n	801d596 <ethernet_input+0x10e>
    goto free_and_return;
 801d57c:	bf00      	nop
 801d57e:	e006      	b.n	801d58e <ethernet_input+0x106>
        goto free_and_return;
 801d580:	bf00      	nop
 801d582:	e004      	b.n	801d58e <ethernet_input+0x106>
        goto free_and_return;
 801d584:	bf00      	nop
 801d586:	e002      	b.n	801d58e <ethernet_input+0x106>
        goto free_and_return;
 801d588:	bf00      	nop
 801d58a:	e000      	b.n	801d58e <ethernet_input+0x106>
        goto free_and_return;
 801d58c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d58e:	6878      	ldr	r0, [r7, #4]
 801d590:	f7f6 fbce 	bl	8013d30 <pbuf_free>
  return ERR_OK;
 801d594:	2300      	movs	r3, #0
}
 801d596:	4618      	mov	r0, r3
 801d598:	3718      	adds	r7, #24
 801d59a:	46bd      	mov	sp, r7
 801d59c:	bd80      	pop	{r7, pc}
 801d59e:	bf00      	nop
 801d5a0:	0802286c 	.word	0x0802286c

0801d5a4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	b086      	sub	sp, #24
 801d5a8:	af00      	add	r7, sp, #0
 801d5aa:	60f8      	str	r0, [r7, #12]
 801d5ac:	60b9      	str	r1, [r7, #8]
 801d5ae:	607a      	str	r2, [r7, #4]
 801d5b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d5b2:	8c3b      	ldrh	r3, [r7, #32]
 801d5b4:	4618      	mov	r0, r3
 801d5b6:	f7f4 fecb 	bl	8012350 <lwip_htons>
 801d5ba:	4603      	mov	r3, r0
 801d5bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d5be:	210e      	movs	r1, #14
 801d5c0:	68b8      	ldr	r0, [r7, #8]
 801d5c2:	f7f6 faed 	bl	8013ba0 <pbuf_add_header>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	d125      	bne.n	801d618 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d5cc:	68bb      	ldr	r3, [r7, #8]
 801d5ce:	685b      	ldr	r3, [r3, #4]
 801d5d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d5d2:	693b      	ldr	r3, [r7, #16]
 801d5d4:	8afa      	ldrh	r2, [r7, #22]
 801d5d6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d5d8:	693b      	ldr	r3, [r7, #16]
 801d5da:	2206      	movs	r2, #6
 801d5dc:	6839      	ldr	r1, [r7, #0]
 801d5de:	4618      	mov	r0, r3
 801d5e0:	f000 fe1b 	bl	801e21a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d5e4:	693b      	ldr	r3, [r7, #16]
 801d5e6:	3306      	adds	r3, #6
 801d5e8:	2206      	movs	r2, #6
 801d5ea:	6879      	ldr	r1, [r7, #4]
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f000 fe14 	bl	801e21a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d5f8:	2b06      	cmp	r3, #6
 801d5fa:	d006      	beq.n	801d60a <ethernet_output+0x66>
 801d5fc:	4b0a      	ldr	r3, [pc, #40]	@ (801d628 <ethernet_output+0x84>)
 801d5fe:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d602:	490a      	ldr	r1, [pc, #40]	@ (801d62c <ethernet_output+0x88>)
 801d604:	480a      	ldr	r0, [pc, #40]	@ (801d630 <ethernet_output+0x8c>)
 801d606:	f000 fbd5 	bl	801ddb4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	699b      	ldr	r3, [r3, #24]
 801d60e:	68b9      	ldr	r1, [r7, #8]
 801d610:	68f8      	ldr	r0, [r7, #12]
 801d612:	4798      	blx	r3
 801d614:	4603      	mov	r3, r0
 801d616:	e002      	b.n	801d61e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d618:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d61a:	f06f 0301 	mvn.w	r3, #1
}
 801d61e:	4618      	mov	r0, r3
 801d620:	3718      	adds	r7, #24
 801d622:	46bd      	mov	sp, r7
 801d624:	bd80      	pop	{r7, pc}
 801d626:	bf00      	nop
 801d628:	080225f0 	.word	0x080225f0
 801d62c:	08022628 	.word	0x08022628
 801d630:	0802265c 	.word	0x0802265c

0801d634 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d634:	b580      	push	{r7, lr}
 801d636:	b082      	sub	sp, #8
 801d638:	af00      	add	r7, sp, #0
 801d63a:	6078      	str	r0, [r7, #4]
 801d63c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	2200      	movs	r2, #0
 801d642:	2104      	movs	r1, #4
 801d644:	4618      	mov	r0, r3
 801d646:	f7ed f929 	bl	800a89c <osMessageQueueNew>
 801d64a:	4602      	mov	r2, r0
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d102      	bne.n	801d65e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d658:	f04f 33ff 	mov.w	r3, #4294967295
 801d65c:	e000      	b.n	801d660 <sys_mbox_new+0x2c>

  return ERR_OK;
 801d65e:	2300      	movs	r3, #0
}
 801d660:	4618      	mov	r0, r3
 801d662:	3708      	adds	r7, #8
 801d664:	46bd      	mov	sp, r7
 801d666:	bd80      	pop	{r7, pc}

0801d668 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b082      	sub	sp, #8
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	681b      	ldr	r3, [r3, #0]
 801d674:	4618      	mov	r0, r3
 801d676:	f7ed fa43 	bl	800ab00 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	4618      	mov	r0, r3
 801d680:	f7ed fa5e 	bl	800ab40 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801d684:	bf00      	nop
 801d686:	3708      	adds	r7, #8
 801d688:	46bd      	mov	sp, r7
 801d68a:	bd80      	pop	{r7, pc}

0801d68c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d68c:	b580      	push	{r7, lr}
 801d68e:	b084      	sub	sp, #16
 801d690:	af00      	add	r7, sp, #0
 801d692:	6078      	str	r0, [r7, #4]
 801d694:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6818      	ldr	r0, [r3, #0]
 801d69a:	4639      	mov	r1, r7
 801d69c:	2300      	movs	r3, #0
 801d69e:	2200      	movs	r2, #0
 801d6a0:	f7ed f970 	bl	800a984 <osMessageQueuePut>
 801d6a4:	4603      	mov	r3, r0
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d102      	bne.n	801d6b0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d6aa:	2300      	movs	r3, #0
 801d6ac:	73fb      	strb	r3, [r7, #15]
 801d6ae:	e001      	b.n	801d6b4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d6b0:	23ff      	movs	r3, #255	@ 0xff
 801d6b2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	3710      	adds	r7, #16
 801d6bc:	46bd      	mov	sp, r7
 801d6be:	bd80      	pop	{r7, pc}

0801d6c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d6c0:	b580      	push	{r7, lr}
 801d6c2:	b086      	sub	sp, #24
 801d6c4:	af00      	add	r7, sp, #0
 801d6c6:	60f8      	str	r0, [r7, #12]
 801d6c8:	60b9      	str	r1, [r7, #8]
 801d6ca:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d6cc:	f7ec fdd2 	bl	800a274 <osKernelGetTickCount>
 801d6d0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d013      	beq.n	801d700 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	6818      	ldr	r0, [r3, #0]
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	2200      	movs	r2, #0
 801d6e0:	68b9      	ldr	r1, [r7, #8]
 801d6e2:	f7ed f9af 	bl	800aa44 <osMessageQueueGet>
 801d6e6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d105      	bne.n	801d6fa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d6ee:	f7ec fdc1 	bl	800a274 <osKernelGetTickCount>
 801d6f2:	4602      	mov	r2, r0
 801d6f4:	697b      	ldr	r3, [r7, #20]
 801d6f6:	1ad3      	subs	r3, r2, r3
 801d6f8:	e00f      	b.n	801d71a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 801d6fe:	e00c      	b.n	801d71a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	6818      	ldr	r0, [r3, #0]
 801d704:	f04f 33ff 	mov.w	r3, #4294967295
 801d708:	2200      	movs	r2, #0
 801d70a:	68b9      	ldr	r1, [r7, #8]
 801d70c:	f7ed f99a 	bl	800aa44 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d710:	f7ec fdb0 	bl	800a274 <osKernelGetTickCount>
 801d714:	4602      	mov	r2, r0
 801d716:	697b      	ldr	r3, [r7, #20]
 801d718:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	3718      	adds	r7, #24
 801d71e:	46bd      	mov	sp, r7
 801d720:	bd80      	pop	{r7, pc}

0801d722 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801d722:	b580      	push	{r7, lr}
 801d724:	b082      	sub	sp, #8
 801d726:	af00      	add	r7, sp, #0
 801d728:	6078      	str	r0, [r7, #4]
 801d72a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	6818      	ldr	r0, [r3, #0]
 801d730:	2300      	movs	r3, #0
 801d732:	2200      	movs	r2, #0
 801d734:	6839      	ldr	r1, [r7, #0]
 801d736:	f7ed f985 	bl	800aa44 <osMessageQueueGet>
 801d73a:	4603      	mov	r3, r0
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d101      	bne.n	801d744 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801d740:	2300      	movs	r3, #0
 801d742:	e001      	b.n	801d748 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801d744:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801d748:	4618      	mov	r0, r3
 801d74a:	3708      	adds	r7, #8
 801d74c:	46bd      	mov	sp, r7
 801d74e:	bd80      	pop	{r7, pc}

0801d750 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d750:	b480      	push	{r7}
 801d752:	b083      	sub	sp, #12
 801d754:	af00      	add	r7, sp, #0
 801d756:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d101      	bne.n	801d764 <sys_mbox_valid+0x14>
    return 0;
 801d760:	2300      	movs	r3, #0
 801d762:	e000      	b.n	801d766 <sys_mbox_valid+0x16>
  else
    return 1;
 801d764:	2301      	movs	r3, #1
}
 801d766:	4618      	mov	r0, r3
 801d768:	370c      	adds	r7, #12
 801d76a:	46bd      	mov	sp, r7
 801d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d770:	4770      	bx	lr

0801d772 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801d772:	b480      	push	{r7}
 801d774:	b083      	sub	sp, #12
 801d776:	af00      	add	r7, sp, #0
 801d778:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	2200      	movs	r2, #0
 801d77e:	601a      	str	r2, [r3, #0]
}
 801d780:	bf00      	nop
 801d782:	370c      	adds	r7, #12
 801d784:	46bd      	mov	sp, r7
 801d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d78a:	4770      	bx	lr

0801d78c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801d78c:	b580      	push	{r7, lr}
 801d78e:	b082      	sub	sp, #8
 801d790:	af00      	add	r7, sp, #0
 801d792:	6078      	str	r0, [r7, #4]
 801d794:	460b      	mov	r3, r1
 801d796:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801d798:	78fb      	ldrb	r3, [r7, #3]
 801d79a:	2200      	movs	r2, #0
 801d79c:	4619      	mov	r1, r3
 801d79e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801d7a2:	f7ec ff38 	bl	800a616 <osSemaphoreNew>
 801d7a6:	4602      	mov	r2, r0
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d102      	bne.n	801d7ba <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d7b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d7b8:	e009      	b.n	801d7ce <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801d7ba:	78fb      	ldrb	r3, [r7, #3]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d105      	bne.n	801d7cc <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	2100      	movs	r1, #0
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7ec ffae 	bl	800a728 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801d7cc:	2300      	movs	r3, #0
}
 801d7ce:	4618      	mov	r0, r3
 801d7d0:	3708      	adds	r7, #8
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	bd80      	pop	{r7, pc}

0801d7d6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801d7d6:	b580      	push	{r7, lr}
 801d7d8:	b084      	sub	sp, #16
 801d7da:	af00      	add	r7, sp, #0
 801d7dc:	6078      	str	r0, [r7, #4]
 801d7de:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801d7e0:	f7ec fd48 	bl	800a274 <osKernelGetTickCount>
 801d7e4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d011      	beq.n	801d810 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	681b      	ldr	r3, [r3, #0]
 801d7f0:	6839      	ldr	r1, [r7, #0]
 801d7f2:	4618      	mov	r0, r3
 801d7f4:	f7ec ff98 	bl	800a728 <osSemaphoreAcquire>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d105      	bne.n	801d80a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801d7fe:	f7ec fd39 	bl	800a274 <osKernelGetTickCount>
 801d802:	4602      	mov	r2, r0
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	1ad3      	subs	r3, r2, r3
 801d808:	e012      	b.n	801d830 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d80a:	f04f 33ff 	mov.w	r3, #4294967295
 801d80e:	e00f      	b.n	801d830 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801d810:	bf00      	nop
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	f04f 31ff 	mov.w	r1, #4294967295
 801d81a:	4618      	mov	r0, r3
 801d81c:	f7ec ff84 	bl	800a728 <osSemaphoreAcquire>
 801d820:	4603      	mov	r3, r0
 801d822:	2b00      	cmp	r3, #0
 801d824:	d1f5      	bne.n	801d812 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801d826:	f7ec fd25 	bl	800a274 <osKernelGetTickCount>
 801d82a:	4602      	mov	r2, r0
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d830:	4618      	mov	r0, r3
 801d832:	3710      	adds	r7, #16
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}

0801d838 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b082      	sub	sp, #8
 801d83c:	af00      	add	r7, sp, #0
 801d83e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	681b      	ldr	r3, [r3, #0]
 801d844:	4618      	mov	r0, r3
 801d846:	f7ec ffc1 	bl	800a7cc <osSemaphoreRelease>
}
 801d84a:	bf00      	nop
 801d84c:	3708      	adds	r7, #8
 801d84e:	46bd      	mov	sp, r7
 801d850:	bd80      	pop	{r7, pc}

0801d852 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d852:	b580      	push	{r7, lr}
 801d854:	b082      	sub	sp, #8
 801d856:	af00      	add	r7, sp, #0
 801d858:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	4618      	mov	r0, r3
 801d860:	f7ec fff8 	bl	800a854 <osSemaphoreDelete>
}
 801d864:	bf00      	nop
 801d866:	3708      	adds	r7, #8
 801d868:	46bd      	mov	sp, r7
 801d86a:	bd80      	pop	{r7, pc}

0801d86c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d86c:	b480      	push	{r7}
 801d86e:	b083      	sub	sp, #12
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d101      	bne.n	801d880 <sys_sem_valid+0x14>
    return 0;
 801d87c:	2300      	movs	r3, #0
 801d87e:	e000      	b.n	801d882 <sys_sem_valid+0x16>
  else
    return 1;
 801d880:	2301      	movs	r3, #1
}
 801d882:	4618      	mov	r0, r3
 801d884:	370c      	adds	r7, #12
 801d886:	46bd      	mov	sp, r7
 801d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d88c:	4770      	bx	lr

0801d88e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d88e:	b480      	push	{r7}
 801d890:	b083      	sub	sp, #12
 801d892:	af00      	add	r7, sp, #0
 801d894:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	2200      	movs	r2, #0
 801d89a:	601a      	str	r2, [r3, #0]
}
 801d89c:	bf00      	nop
 801d89e:	370c      	adds	r7, #12
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a6:	4770      	bx	lr

0801d8a8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d8ac:	2000      	movs	r0, #0
 801d8ae:	f7ec fda4 	bl	800a3fa <osMutexNew>
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	4a01      	ldr	r2, [pc, #4]	@ (801d8bc <sys_init+0x14>)
 801d8b6:	6013      	str	r3, [r2, #0]
#endif
}
 801d8b8:	bf00      	nop
 801d8ba:	bd80      	pop	{r7, pc}
 801d8bc:	24016f68 	.word	0x24016f68

0801d8c0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d8c0:	b580      	push	{r7, lr}
 801d8c2:	b082      	sub	sp, #8
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d8c8:	2000      	movs	r0, #0
 801d8ca:	f7ec fd96 	bl	800a3fa <osMutexNew>
 801d8ce:	4602      	mov	r2, r0
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d102      	bne.n	801d8e2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d8dc:	f04f 33ff 	mov.w	r3, #4294967295
 801d8e0:	e000      	b.n	801d8e4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d8e2:	2300      	movs	r3, #0
}
 801d8e4:	4618      	mov	r0, r3
 801d8e6:	3708      	adds	r7, #8
 801d8e8:	46bd      	mov	sp, r7
 801d8ea:	bd80      	pop	{r7, pc}

0801d8ec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	b082      	sub	sp, #8
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	f04f 31ff 	mov.w	r1, #4294967295
 801d8fc:	4618      	mov	r0, r3
 801d8fe:	f7ec fe02 	bl	800a506 <osMutexAcquire>
#endif
}
 801d902:	bf00      	nop
 801d904:	3708      	adds	r7, #8
 801d906:	46bd      	mov	sp, r7
 801d908:	bd80      	pop	{r7, pc}

0801d90a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d90a:	b580      	push	{r7, lr}
 801d90c:	b082      	sub	sp, #8
 801d90e:	af00      	add	r7, sp, #0
 801d910:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	4618      	mov	r0, r3
 801d918:	f7ec fe40 	bl	800a59c <osMutexRelease>
}
 801d91c:	bf00      	nop
 801d91e:	3708      	adds	r7, #8
 801d920:	46bd      	mov	sp, r7
 801d922:	bd80      	pop	{r7, pc}

0801d924 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d924:	b580      	push	{r7, lr}
 801d926:	b08e      	sub	sp, #56	@ 0x38
 801d928:	af00      	add	r7, sp, #0
 801d92a:	60f8      	str	r0, [r7, #12]
 801d92c:	60b9      	str	r1, [r7, #8]
 801d92e:	607a      	str	r2, [r7, #4]
 801d930:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d932:	f107 0314 	add.w	r3, r7, #20
 801d936:	2224      	movs	r2, #36	@ 0x24
 801d938:	2100      	movs	r1, #0
 801d93a:	4618      	mov	r0, r3
 801d93c:	f000 fb92 	bl	801e064 <memset>
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	617b      	str	r3, [r7, #20]
 801d944:	683b      	ldr	r3, [r7, #0]
 801d946:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d94c:	f107 0314 	add.w	r3, r7, #20
 801d950:	461a      	mov	r2, r3
 801d952:	6879      	ldr	r1, [r7, #4]
 801d954:	68b8      	ldr	r0, [r7, #8]
 801d956:	f7ec fca2 	bl	800a29e <osThreadNew>
 801d95a:	4603      	mov	r3, r0
#endif
}
 801d95c:	4618      	mov	r0, r3
 801d95e:	3738      	adds	r7, #56	@ 0x38
 801d960:	46bd      	mov	sp, r7
 801d962:	bd80      	pop	{r7, pc}

0801d964 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d964:	b580      	push	{r7, lr}
 801d966:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d968:	4b04      	ldr	r3, [pc, #16]	@ (801d97c <sys_arch_protect+0x18>)
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	f04f 31ff 	mov.w	r1, #4294967295
 801d970:	4618      	mov	r0, r3
 801d972:	f7ec fdc8 	bl	800a506 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d976:	2301      	movs	r3, #1
}
 801d978:	4618      	mov	r0, r3
 801d97a:	bd80      	pop	{r7, pc}
 801d97c:	24016f68 	.word	0x24016f68

0801d980 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	b082      	sub	sp, #8
 801d984:	af00      	add	r7, sp, #0
 801d986:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d988:	4b04      	ldr	r3, [pc, #16]	@ (801d99c <sys_arch_unprotect+0x1c>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	4618      	mov	r0, r3
 801d98e:	f7ec fe05 	bl	800a59c <osMutexRelease>
}
 801d992:	bf00      	nop
 801d994:	3708      	adds	r7, #8
 801d996:	46bd      	mov	sp, r7
 801d998:	bd80      	pop	{r7, pc}
 801d99a:	bf00      	nop
 801d99c:	24016f68 	.word	0x24016f68

0801d9a0 <__assert_func>:
 801d9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d9a2:	4614      	mov	r4, r2
 801d9a4:	461a      	mov	r2, r3
 801d9a6:	4b09      	ldr	r3, [pc, #36]	@ (801d9cc <__assert_func+0x2c>)
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	4605      	mov	r5, r0
 801d9ac:	68d8      	ldr	r0, [r3, #12]
 801d9ae:	b954      	cbnz	r4, 801d9c6 <__assert_func+0x26>
 801d9b0:	4b07      	ldr	r3, [pc, #28]	@ (801d9d0 <__assert_func+0x30>)
 801d9b2:	461c      	mov	r4, r3
 801d9b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d9b8:	9100      	str	r1, [sp, #0]
 801d9ba:	462b      	mov	r3, r5
 801d9bc:	4905      	ldr	r1, [pc, #20]	@ (801d9d4 <__assert_func+0x34>)
 801d9be:	f000 f9c9 	bl	801dd54 <fiprintf>
 801d9c2:	f000 fc38 	bl	801e236 <abort>
 801d9c6:	4b04      	ldr	r3, [pc, #16]	@ (801d9d8 <__assert_func+0x38>)
 801d9c8:	e7f4      	b.n	801d9b4 <__assert_func+0x14>
 801d9ca:	bf00      	nop
 801d9cc:	24000040 	.word	0x24000040
 801d9d0:	080228b5 	.word	0x080228b5
 801d9d4:	08022887 	.word	0x08022887
 801d9d8:	0802287a 	.word	0x0802287a

0801d9dc <calloc>:
 801d9dc:	4b02      	ldr	r3, [pc, #8]	@ (801d9e8 <calloc+0xc>)
 801d9de:	460a      	mov	r2, r1
 801d9e0:	4601      	mov	r1, r0
 801d9e2:	6818      	ldr	r0, [r3, #0]
 801d9e4:	f000 b802 	b.w	801d9ec <_calloc_r>
 801d9e8:	24000040 	.word	0x24000040

0801d9ec <_calloc_r>:
 801d9ec:	b570      	push	{r4, r5, r6, lr}
 801d9ee:	fba1 5402 	umull	r5, r4, r1, r2
 801d9f2:	b93c      	cbnz	r4, 801da04 <_calloc_r+0x18>
 801d9f4:	4629      	mov	r1, r5
 801d9f6:	f000 f83f 	bl	801da78 <_malloc_r>
 801d9fa:	4606      	mov	r6, r0
 801d9fc:	b928      	cbnz	r0, 801da0a <_calloc_r+0x1e>
 801d9fe:	2600      	movs	r6, #0
 801da00:	4630      	mov	r0, r6
 801da02:	bd70      	pop	{r4, r5, r6, pc}
 801da04:	220c      	movs	r2, #12
 801da06:	6002      	str	r2, [r0, #0]
 801da08:	e7f9      	b.n	801d9fe <_calloc_r+0x12>
 801da0a:	462a      	mov	r2, r5
 801da0c:	4621      	mov	r1, r4
 801da0e:	f000 fb29 	bl	801e064 <memset>
 801da12:	e7f5      	b.n	801da00 <_calloc_r+0x14>

0801da14 <malloc>:
 801da14:	4b02      	ldr	r3, [pc, #8]	@ (801da20 <malloc+0xc>)
 801da16:	4601      	mov	r1, r0
 801da18:	6818      	ldr	r0, [r3, #0]
 801da1a:	f000 b82d 	b.w	801da78 <_malloc_r>
 801da1e:	bf00      	nop
 801da20:	24000040 	.word	0x24000040

0801da24 <free>:
 801da24:	4b02      	ldr	r3, [pc, #8]	@ (801da30 <free+0xc>)
 801da26:	4601      	mov	r1, r0
 801da28:	6818      	ldr	r0, [r3, #0]
 801da2a:	f000 bc0b 	b.w	801e244 <_free_r>
 801da2e:	bf00      	nop
 801da30:	24000040 	.word	0x24000040

0801da34 <sbrk_aligned>:
 801da34:	b570      	push	{r4, r5, r6, lr}
 801da36:	4e0f      	ldr	r6, [pc, #60]	@ (801da74 <sbrk_aligned+0x40>)
 801da38:	460c      	mov	r4, r1
 801da3a:	6831      	ldr	r1, [r6, #0]
 801da3c:	4605      	mov	r5, r0
 801da3e:	b911      	cbnz	r1, 801da46 <sbrk_aligned+0x12>
 801da40:	f000 fba2 	bl	801e188 <_sbrk_r>
 801da44:	6030      	str	r0, [r6, #0]
 801da46:	4621      	mov	r1, r4
 801da48:	4628      	mov	r0, r5
 801da4a:	f000 fb9d 	bl	801e188 <_sbrk_r>
 801da4e:	1c43      	adds	r3, r0, #1
 801da50:	d103      	bne.n	801da5a <sbrk_aligned+0x26>
 801da52:	f04f 34ff 	mov.w	r4, #4294967295
 801da56:	4620      	mov	r0, r4
 801da58:	bd70      	pop	{r4, r5, r6, pc}
 801da5a:	1cc4      	adds	r4, r0, #3
 801da5c:	f024 0403 	bic.w	r4, r4, #3
 801da60:	42a0      	cmp	r0, r4
 801da62:	d0f8      	beq.n	801da56 <sbrk_aligned+0x22>
 801da64:	1a21      	subs	r1, r4, r0
 801da66:	4628      	mov	r0, r5
 801da68:	f000 fb8e 	bl	801e188 <_sbrk_r>
 801da6c:	3001      	adds	r0, #1
 801da6e:	d1f2      	bne.n	801da56 <sbrk_aligned+0x22>
 801da70:	e7ef      	b.n	801da52 <sbrk_aligned+0x1e>
 801da72:	bf00      	nop
 801da74:	24016f6c 	.word	0x24016f6c

0801da78 <_malloc_r>:
 801da78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da7c:	1ccd      	adds	r5, r1, #3
 801da7e:	f025 0503 	bic.w	r5, r5, #3
 801da82:	3508      	adds	r5, #8
 801da84:	2d0c      	cmp	r5, #12
 801da86:	bf38      	it	cc
 801da88:	250c      	movcc	r5, #12
 801da8a:	2d00      	cmp	r5, #0
 801da8c:	4606      	mov	r6, r0
 801da8e:	db01      	blt.n	801da94 <_malloc_r+0x1c>
 801da90:	42a9      	cmp	r1, r5
 801da92:	d904      	bls.n	801da9e <_malloc_r+0x26>
 801da94:	230c      	movs	r3, #12
 801da96:	6033      	str	r3, [r6, #0]
 801da98:	2000      	movs	r0, #0
 801da9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801db74 <_malloc_r+0xfc>
 801daa2:	f000 f869 	bl	801db78 <__malloc_lock>
 801daa6:	f8d8 3000 	ldr.w	r3, [r8]
 801daaa:	461c      	mov	r4, r3
 801daac:	bb44      	cbnz	r4, 801db00 <_malloc_r+0x88>
 801daae:	4629      	mov	r1, r5
 801dab0:	4630      	mov	r0, r6
 801dab2:	f7ff ffbf 	bl	801da34 <sbrk_aligned>
 801dab6:	1c43      	adds	r3, r0, #1
 801dab8:	4604      	mov	r4, r0
 801daba:	d158      	bne.n	801db6e <_malloc_r+0xf6>
 801dabc:	f8d8 4000 	ldr.w	r4, [r8]
 801dac0:	4627      	mov	r7, r4
 801dac2:	2f00      	cmp	r7, #0
 801dac4:	d143      	bne.n	801db4e <_malloc_r+0xd6>
 801dac6:	2c00      	cmp	r4, #0
 801dac8:	d04b      	beq.n	801db62 <_malloc_r+0xea>
 801daca:	6823      	ldr	r3, [r4, #0]
 801dacc:	4639      	mov	r1, r7
 801dace:	4630      	mov	r0, r6
 801dad0:	eb04 0903 	add.w	r9, r4, r3
 801dad4:	f000 fb58 	bl	801e188 <_sbrk_r>
 801dad8:	4581      	cmp	r9, r0
 801dada:	d142      	bne.n	801db62 <_malloc_r+0xea>
 801dadc:	6821      	ldr	r1, [r4, #0]
 801dade:	1a6d      	subs	r5, r5, r1
 801dae0:	4629      	mov	r1, r5
 801dae2:	4630      	mov	r0, r6
 801dae4:	f7ff ffa6 	bl	801da34 <sbrk_aligned>
 801dae8:	3001      	adds	r0, #1
 801daea:	d03a      	beq.n	801db62 <_malloc_r+0xea>
 801daec:	6823      	ldr	r3, [r4, #0]
 801daee:	442b      	add	r3, r5
 801daf0:	6023      	str	r3, [r4, #0]
 801daf2:	f8d8 3000 	ldr.w	r3, [r8]
 801daf6:	685a      	ldr	r2, [r3, #4]
 801daf8:	bb62      	cbnz	r2, 801db54 <_malloc_r+0xdc>
 801dafa:	f8c8 7000 	str.w	r7, [r8]
 801dafe:	e00f      	b.n	801db20 <_malloc_r+0xa8>
 801db00:	6822      	ldr	r2, [r4, #0]
 801db02:	1b52      	subs	r2, r2, r5
 801db04:	d420      	bmi.n	801db48 <_malloc_r+0xd0>
 801db06:	2a0b      	cmp	r2, #11
 801db08:	d917      	bls.n	801db3a <_malloc_r+0xc2>
 801db0a:	1961      	adds	r1, r4, r5
 801db0c:	42a3      	cmp	r3, r4
 801db0e:	6025      	str	r5, [r4, #0]
 801db10:	bf18      	it	ne
 801db12:	6059      	strne	r1, [r3, #4]
 801db14:	6863      	ldr	r3, [r4, #4]
 801db16:	bf08      	it	eq
 801db18:	f8c8 1000 	streq.w	r1, [r8]
 801db1c:	5162      	str	r2, [r4, r5]
 801db1e:	604b      	str	r3, [r1, #4]
 801db20:	4630      	mov	r0, r6
 801db22:	f000 f82f 	bl	801db84 <__malloc_unlock>
 801db26:	f104 000b 	add.w	r0, r4, #11
 801db2a:	1d23      	adds	r3, r4, #4
 801db2c:	f020 0007 	bic.w	r0, r0, #7
 801db30:	1ac2      	subs	r2, r0, r3
 801db32:	bf1c      	itt	ne
 801db34:	1a1b      	subne	r3, r3, r0
 801db36:	50a3      	strne	r3, [r4, r2]
 801db38:	e7af      	b.n	801da9a <_malloc_r+0x22>
 801db3a:	6862      	ldr	r2, [r4, #4]
 801db3c:	42a3      	cmp	r3, r4
 801db3e:	bf0c      	ite	eq
 801db40:	f8c8 2000 	streq.w	r2, [r8]
 801db44:	605a      	strne	r2, [r3, #4]
 801db46:	e7eb      	b.n	801db20 <_malloc_r+0xa8>
 801db48:	4623      	mov	r3, r4
 801db4a:	6864      	ldr	r4, [r4, #4]
 801db4c:	e7ae      	b.n	801daac <_malloc_r+0x34>
 801db4e:	463c      	mov	r4, r7
 801db50:	687f      	ldr	r7, [r7, #4]
 801db52:	e7b6      	b.n	801dac2 <_malloc_r+0x4a>
 801db54:	461a      	mov	r2, r3
 801db56:	685b      	ldr	r3, [r3, #4]
 801db58:	42a3      	cmp	r3, r4
 801db5a:	d1fb      	bne.n	801db54 <_malloc_r+0xdc>
 801db5c:	2300      	movs	r3, #0
 801db5e:	6053      	str	r3, [r2, #4]
 801db60:	e7de      	b.n	801db20 <_malloc_r+0xa8>
 801db62:	230c      	movs	r3, #12
 801db64:	6033      	str	r3, [r6, #0]
 801db66:	4630      	mov	r0, r6
 801db68:	f000 f80c 	bl	801db84 <__malloc_unlock>
 801db6c:	e794      	b.n	801da98 <_malloc_r+0x20>
 801db6e:	6005      	str	r5, [r0, #0]
 801db70:	e7d6      	b.n	801db20 <_malloc_r+0xa8>
 801db72:	bf00      	nop
 801db74:	24016f70 	.word	0x24016f70

0801db78 <__malloc_lock>:
 801db78:	4801      	ldr	r0, [pc, #4]	@ (801db80 <__malloc_lock+0x8>)
 801db7a:	f000 bb4c 	b.w	801e216 <__retarget_lock_acquire_recursive>
 801db7e:	bf00      	nop
 801db80:	240170b4 	.word	0x240170b4

0801db84 <__malloc_unlock>:
 801db84:	4801      	ldr	r0, [pc, #4]	@ (801db8c <__malloc_unlock+0x8>)
 801db86:	f000 bb47 	b.w	801e218 <__retarget_lock_release_recursive>
 801db8a:	bf00      	nop
 801db8c:	240170b4 	.word	0x240170b4

0801db90 <rand>:
 801db90:	4b16      	ldr	r3, [pc, #88]	@ (801dbec <rand+0x5c>)
 801db92:	b510      	push	{r4, lr}
 801db94:	681c      	ldr	r4, [r3, #0]
 801db96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db98:	b9b3      	cbnz	r3, 801dbc8 <rand+0x38>
 801db9a:	2018      	movs	r0, #24
 801db9c:	f7ff ff3a 	bl	801da14 <malloc>
 801dba0:	4602      	mov	r2, r0
 801dba2:	6320      	str	r0, [r4, #48]	@ 0x30
 801dba4:	b920      	cbnz	r0, 801dbb0 <rand+0x20>
 801dba6:	4b12      	ldr	r3, [pc, #72]	@ (801dbf0 <rand+0x60>)
 801dba8:	4812      	ldr	r0, [pc, #72]	@ (801dbf4 <rand+0x64>)
 801dbaa:	2152      	movs	r1, #82	@ 0x52
 801dbac:	f7ff fef8 	bl	801d9a0 <__assert_func>
 801dbb0:	4911      	ldr	r1, [pc, #68]	@ (801dbf8 <rand+0x68>)
 801dbb2:	4b12      	ldr	r3, [pc, #72]	@ (801dbfc <rand+0x6c>)
 801dbb4:	e9c0 1300 	strd	r1, r3, [r0]
 801dbb8:	4b11      	ldr	r3, [pc, #68]	@ (801dc00 <rand+0x70>)
 801dbba:	6083      	str	r3, [r0, #8]
 801dbbc:	230b      	movs	r3, #11
 801dbbe:	8183      	strh	r3, [r0, #12]
 801dbc0:	2100      	movs	r1, #0
 801dbc2:	2001      	movs	r0, #1
 801dbc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801dbc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801dbca:	480e      	ldr	r0, [pc, #56]	@ (801dc04 <rand+0x74>)
 801dbcc:	690b      	ldr	r3, [r1, #16]
 801dbce:	694c      	ldr	r4, [r1, #20]
 801dbd0:	4a0d      	ldr	r2, [pc, #52]	@ (801dc08 <rand+0x78>)
 801dbd2:	4358      	muls	r0, r3
 801dbd4:	fb02 0004 	mla	r0, r2, r4, r0
 801dbd8:	fba3 3202 	umull	r3, r2, r3, r2
 801dbdc:	3301      	adds	r3, #1
 801dbde:	eb40 0002 	adc.w	r0, r0, r2
 801dbe2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801dbe6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801dbea:	bd10      	pop	{r4, pc}
 801dbec:	24000040 	.word	0x24000040
 801dbf0:	080228b6 	.word	0x080228b6
 801dbf4:	080228cd 	.word	0x080228cd
 801dbf8:	abcd330e 	.word	0xabcd330e
 801dbfc:	e66d1234 	.word	0xe66d1234
 801dc00:	0005deec 	.word	0x0005deec
 801dc04:	5851f42d 	.word	0x5851f42d
 801dc08:	4c957f2d 	.word	0x4c957f2d

0801dc0c <std>:
 801dc0c:	2300      	movs	r3, #0
 801dc0e:	b510      	push	{r4, lr}
 801dc10:	4604      	mov	r4, r0
 801dc12:	e9c0 3300 	strd	r3, r3, [r0]
 801dc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc1a:	6083      	str	r3, [r0, #8]
 801dc1c:	8181      	strh	r1, [r0, #12]
 801dc1e:	6643      	str	r3, [r0, #100]	@ 0x64
 801dc20:	81c2      	strh	r2, [r0, #14]
 801dc22:	6183      	str	r3, [r0, #24]
 801dc24:	4619      	mov	r1, r3
 801dc26:	2208      	movs	r2, #8
 801dc28:	305c      	adds	r0, #92	@ 0x5c
 801dc2a:	f000 fa1b 	bl	801e064 <memset>
 801dc2e:	4b0d      	ldr	r3, [pc, #52]	@ (801dc64 <std+0x58>)
 801dc30:	6263      	str	r3, [r4, #36]	@ 0x24
 801dc32:	4b0d      	ldr	r3, [pc, #52]	@ (801dc68 <std+0x5c>)
 801dc34:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dc36:	4b0d      	ldr	r3, [pc, #52]	@ (801dc6c <std+0x60>)
 801dc38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dc3a:	4b0d      	ldr	r3, [pc, #52]	@ (801dc70 <std+0x64>)
 801dc3c:	6323      	str	r3, [r4, #48]	@ 0x30
 801dc3e:	4b0d      	ldr	r3, [pc, #52]	@ (801dc74 <std+0x68>)
 801dc40:	6224      	str	r4, [r4, #32]
 801dc42:	429c      	cmp	r4, r3
 801dc44:	d006      	beq.n	801dc54 <std+0x48>
 801dc46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dc4a:	4294      	cmp	r4, r2
 801dc4c:	d002      	beq.n	801dc54 <std+0x48>
 801dc4e:	33d0      	adds	r3, #208	@ 0xd0
 801dc50:	429c      	cmp	r4, r3
 801dc52:	d105      	bne.n	801dc60 <std+0x54>
 801dc54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc5c:	f000 bada 	b.w	801e214 <__retarget_lock_init_recursive>
 801dc60:	bd10      	pop	{r4, pc}
 801dc62:	bf00      	nop
 801dc64:	0801de95 	.word	0x0801de95
 801dc68:	0801deb7 	.word	0x0801deb7
 801dc6c:	0801deef 	.word	0x0801deef
 801dc70:	0801df13 	.word	0x0801df13
 801dc74:	24016f74 	.word	0x24016f74

0801dc78 <stdio_exit_handler>:
 801dc78:	4a02      	ldr	r2, [pc, #8]	@ (801dc84 <stdio_exit_handler+0xc>)
 801dc7a:	4903      	ldr	r1, [pc, #12]	@ (801dc88 <stdio_exit_handler+0x10>)
 801dc7c:	4803      	ldr	r0, [pc, #12]	@ (801dc8c <stdio_exit_handler+0x14>)
 801dc7e:	f000 b87b 	b.w	801dd78 <_fwalk_sglue>
 801dc82:	bf00      	nop
 801dc84:	24000034 	.word	0x24000034
 801dc88:	0801e981 	.word	0x0801e981
 801dc8c:	24000044 	.word	0x24000044

0801dc90 <cleanup_stdio>:
 801dc90:	6841      	ldr	r1, [r0, #4]
 801dc92:	4b0c      	ldr	r3, [pc, #48]	@ (801dcc4 <cleanup_stdio+0x34>)
 801dc94:	4299      	cmp	r1, r3
 801dc96:	b510      	push	{r4, lr}
 801dc98:	4604      	mov	r4, r0
 801dc9a:	d001      	beq.n	801dca0 <cleanup_stdio+0x10>
 801dc9c:	f000 fe70 	bl	801e980 <_fflush_r>
 801dca0:	68a1      	ldr	r1, [r4, #8]
 801dca2:	4b09      	ldr	r3, [pc, #36]	@ (801dcc8 <cleanup_stdio+0x38>)
 801dca4:	4299      	cmp	r1, r3
 801dca6:	d002      	beq.n	801dcae <cleanup_stdio+0x1e>
 801dca8:	4620      	mov	r0, r4
 801dcaa:	f000 fe69 	bl	801e980 <_fflush_r>
 801dcae:	68e1      	ldr	r1, [r4, #12]
 801dcb0:	4b06      	ldr	r3, [pc, #24]	@ (801dccc <cleanup_stdio+0x3c>)
 801dcb2:	4299      	cmp	r1, r3
 801dcb4:	d004      	beq.n	801dcc0 <cleanup_stdio+0x30>
 801dcb6:	4620      	mov	r0, r4
 801dcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcbc:	f000 be60 	b.w	801e980 <_fflush_r>
 801dcc0:	bd10      	pop	{r4, pc}
 801dcc2:	bf00      	nop
 801dcc4:	24016f74 	.word	0x24016f74
 801dcc8:	24016fdc 	.word	0x24016fdc
 801dccc:	24017044 	.word	0x24017044

0801dcd0 <global_stdio_init.part.0>:
 801dcd0:	b510      	push	{r4, lr}
 801dcd2:	4b0b      	ldr	r3, [pc, #44]	@ (801dd00 <global_stdio_init.part.0+0x30>)
 801dcd4:	4c0b      	ldr	r4, [pc, #44]	@ (801dd04 <global_stdio_init.part.0+0x34>)
 801dcd6:	4a0c      	ldr	r2, [pc, #48]	@ (801dd08 <global_stdio_init.part.0+0x38>)
 801dcd8:	601a      	str	r2, [r3, #0]
 801dcda:	4620      	mov	r0, r4
 801dcdc:	2200      	movs	r2, #0
 801dcde:	2104      	movs	r1, #4
 801dce0:	f7ff ff94 	bl	801dc0c <std>
 801dce4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dce8:	2201      	movs	r2, #1
 801dcea:	2109      	movs	r1, #9
 801dcec:	f7ff ff8e 	bl	801dc0c <std>
 801dcf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dcf4:	2202      	movs	r2, #2
 801dcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcfa:	2112      	movs	r1, #18
 801dcfc:	f7ff bf86 	b.w	801dc0c <std>
 801dd00:	240170ac 	.word	0x240170ac
 801dd04:	24016f74 	.word	0x24016f74
 801dd08:	0801dc79 	.word	0x0801dc79

0801dd0c <__sfp_lock_acquire>:
 801dd0c:	4801      	ldr	r0, [pc, #4]	@ (801dd14 <__sfp_lock_acquire+0x8>)
 801dd0e:	f000 ba82 	b.w	801e216 <__retarget_lock_acquire_recursive>
 801dd12:	bf00      	nop
 801dd14:	240170b5 	.word	0x240170b5

0801dd18 <__sfp_lock_release>:
 801dd18:	4801      	ldr	r0, [pc, #4]	@ (801dd20 <__sfp_lock_release+0x8>)
 801dd1a:	f000 ba7d 	b.w	801e218 <__retarget_lock_release_recursive>
 801dd1e:	bf00      	nop
 801dd20:	240170b5 	.word	0x240170b5

0801dd24 <__sinit>:
 801dd24:	b510      	push	{r4, lr}
 801dd26:	4604      	mov	r4, r0
 801dd28:	f7ff fff0 	bl	801dd0c <__sfp_lock_acquire>
 801dd2c:	6a23      	ldr	r3, [r4, #32]
 801dd2e:	b11b      	cbz	r3, 801dd38 <__sinit+0x14>
 801dd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd34:	f7ff bff0 	b.w	801dd18 <__sfp_lock_release>
 801dd38:	4b04      	ldr	r3, [pc, #16]	@ (801dd4c <__sinit+0x28>)
 801dd3a:	6223      	str	r3, [r4, #32]
 801dd3c:	4b04      	ldr	r3, [pc, #16]	@ (801dd50 <__sinit+0x2c>)
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d1f5      	bne.n	801dd30 <__sinit+0xc>
 801dd44:	f7ff ffc4 	bl	801dcd0 <global_stdio_init.part.0>
 801dd48:	e7f2      	b.n	801dd30 <__sinit+0xc>
 801dd4a:	bf00      	nop
 801dd4c:	0801dc91 	.word	0x0801dc91
 801dd50:	240170ac 	.word	0x240170ac

0801dd54 <fiprintf>:
 801dd54:	b40e      	push	{r1, r2, r3}
 801dd56:	b503      	push	{r0, r1, lr}
 801dd58:	4601      	mov	r1, r0
 801dd5a:	ab03      	add	r3, sp, #12
 801dd5c:	4805      	ldr	r0, [pc, #20]	@ (801dd74 <fiprintf+0x20>)
 801dd5e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd62:	6800      	ldr	r0, [r0, #0]
 801dd64:	9301      	str	r3, [sp, #4]
 801dd66:	f000 fae1 	bl	801e32c <_vfiprintf_r>
 801dd6a:	b002      	add	sp, #8
 801dd6c:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd70:	b003      	add	sp, #12
 801dd72:	4770      	bx	lr
 801dd74:	24000040 	.word	0x24000040

0801dd78 <_fwalk_sglue>:
 801dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd7c:	4607      	mov	r7, r0
 801dd7e:	4688      	mov	r8, r1
 801dd80:	4614      	mov	r4, r2
 801dd82:	2600      	movs	r6, #0
 801dd84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd88:	f1b9 0901 	subs.w	r9, r9, #1
 801dd8c:	d505      	bpl.n	801dd9a <_fwalk_sglue+0x22>
 801dd8e:	6824      	ldr	r4, [r4, #0]
 801dd90:	2c00      	cmp	r4, #0
 801dd92:	d1f7      	bne.n	801dd84 <_fwalk_sglue+0xc>
 801dd94:	4630      	mov	r0, r6
 801dd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd9a:	89ab      	ldrh	r3, [r5, #12]
 801dd9c:	2b01      	cmp	r3, #1
 801dd9e:	d907      	bls.n	801ddb0 <_fwalk_sglue+0x38>
 801dda0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dda4:	3301      	adds	r3, #1
 801dda6:	d003      	beq.n	801ddb0 <_fwalk_sglue+0x38>
 801dda8:	4629      	mov	r1, r5
 801ddaa:	4638      	mov	r0, r7
 801ddac:	47c0      	blx	r8
 801ddae:	4306      	orrs	r6, r0
 801ddb0:	3568      	adds	r5, #104	@ 0x68
 801ddb2:	e7e9      	b.n	801dd88 <_fwalk_sglue+0x10>

0801ddb4 <iprintf>:
 801ddb4:	b40f      	push	{r0, r1, r2, r3}
 801ddb6:	b507      	push	{r0, r1, r2, lr}
 801ddb8:	4906      	ldr	r1, [pc, #24]	@ (801ddd4 <iprintf+0x20>)
 801ddba:	ab04      	add	r3, sp, #16
 801ddbc:	6808      	ldr	r0, [r1, #0]
 801ddbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddc2:	6881      	ldr	r1, [r0, #8]
 801ddc4:	9301      	str	r3, [sp, #4]
 801ddc6:	f000 fab1 	bl	801e32c <_vfiprintf_r>
 801ddca:	b003      	add	sp, #12
 801ddcc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ddd0:	b004      	add	sp, #16
 801ddd2:	4770      	bx	lr
 801ddd4:	24000040 	.word	0x24000040

0801ddd8 <_puts_r>:
 801ddd8:	6a03      	ldr	r3, [r0, #32]
 801ddda:	b570      	push	{r4, r5, r6, lr}
 801dddc:	6884      	ldr	r4, [r0, #8]
 801ddde:	4605      	mov	r5, r0
 801dde0:	460e      	mov	r6, r1
 801dde2:	b90b      	cbnz	r3, 801dde8 <_puts_r+0x10>
 801dde4:	f7ff ff9e 	bl	801dd24 <__sinit>
 801dde8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ddea:	07db      	lsls	r3, r3, #31
 801ddec:	d405      	bmi.n	801ddfa <_puts_r+0x22>
 801ddee:	89a3      	ldrh	r3, [r4, #12]
 801ddf0:	0598      	lsls	r0, r3, #22
 801ddf2:	d402      	bmi.n	801ddfa <_puts_r+0x22>
 801ddf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ddf6:	f000 fa0e 	bl	801e216 <__retarget_lock_acquire_recursive>
 801ddfa:	89a3      	ldrh	r3, [r4, #12]
 801ddfc:	0719      	lsls	r1, r3, #28
 801ddfe:	d502      	bpl.n	801de06 <_puts_r+0x2e>
 801de00:	6923      	ldr	r3, [r4, #16]
 801de02:	2b00      	cmp	r3, #0
 801de04:	d135      	bne.n	801de72 <_puts_r+0x9a>
 801de06:	4621      	mov	r1, r4
 801de08:	4628      	mov	r0, r5
 801de0a:	f000 f8c5 	bl	801df98 <__swsetup_r>
 801de0e:	b380      	cbz	r0, 801de72 <_puts_r+0x9a>
 801de10:	f04f 35ff 	mov.w	r5, #4294967295
 801de14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de16:	07da      	lsls	r2, r3, #31
 801de18:	d405      	bmi.n	801de26 <_puts_r+0x4e>
 801de1a:	89a3      	ldrh	r3, [r4, #12]
 801de1c:	059b      	lsls	r3, r3, #22
 801de1e:	d402      	bmi.n	801de26 <_puts_r+0x4e>
 801de20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de22:	f000 f9f9 	bl	801e218 <__retarget_lock_release_recursive>
 801de26:	4628      	mov	r0, r5
 801de28:	bd70      	pop	{r4, r5, r6, pc}
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	da04      	bge.n	801de38 <_puts_r+0x60>
 801de2e:	69a2      	ldr	r2, [r4, #24]
 801de30:	429a      	cmp	r2, r3
 801de32:	dc17      	bgt.n	801de64 <_puts_r+0x8c>
 801de34:	290a      	cmp	r1, #10
 801de36:	d015      	beq.n	801de64 <_puts_r+0x8c>
 801de38:	6823      	ldr	r3, [r4, #0]
 801de3a:	1c5a      	adds	r2, r3, #1
 801de3c:	6022      	str	r2, [r4, #0]
 801de3e:	7019      	strb	r1, [r3, #0]
 801de40:	68a3      	ldr	r3, [r4, #8]
 801de42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801de46:	3b01      	subs	r3, #1
 801de48:	60a3      	str	r3, [r4, #8]
 801de4a:	2900      	cmp	r1, #0
 801de4c:	d1ed      	bne.n	801de2a <_puts_r+0x52>
 801de4e:	2b00      	cmp	r3, #0
 801de50:	da11      	bge.n	801de76 <_puts_r+0x9e>
 801de52:	4622      	mov	r2, r4
 801de54:	210a      	movs	r1, #10
 801de56:	4628      	mov	r0, r5
 801de58:	f000 f85f 	bl	801df1a <__swbuf_r>
 801de5c:	3001      	adds	r0, #1
 801de5e:	d0d7      	beq.n	801de10 <_puts_r+0x38>
 801de60:	250a      	movs	r5, #10
 801de62:	e7d7      	b.n	801de14 <_puts_r+0x3c>
 801de64:	4622      	mov	r2, r4
 801de66:	4628      	mov	r0, r5
 801de68:	f000 f857 	bl	801df1a <__swbuf_r>
 801de6c:	3001      	adds	r0, #1
 801de6e:	d1e7      	bne.n	801de40 <_puts_r+0x68>
 801de70:	e7ce      	b.n	801de10 <_puts_r+0x38>
 801de72:	3e01      	subs	r6, #1
 801de74:	e7e4      	b.n	801de40 <_puts_r+0x68>
 801de76:	6823      	ldr	r3, [r4, #0]
 801de78:	1c5a      	adds	r2, r3, #1
 801de7a:	6022      	str	r2, [r4, #0]
 801de7c:	220a      	movs	r2, #10
 801de7e:	701a      	strb	r2, [r3, #0]
 801de80:	e7ee      	b.n	801de60 <_puts_r+0x88>
	...

0801de84 <puts>:
 801de84:	4b02      	ldr	r3, [pc, #8]	@ (801de90 <puts+0xc>)
 801de86:	4601      	mov	r1, r0
 801de88:	6818      	ldr	r0, [r3, #0]
 801de8a:	f7ff bfa5 	b.w	801ddd8 <_puts_r>
 801de8e:	bf00      	nop
 801de90:	24000040 	.word	0x24000040

0801de94 <__sread>:
 801de94:	b510      	push	{r4, lr}
 801de96:	460c      	mov	r4, r1
 801de98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de9c:	f000 f962 	bl	801e164 <_read_r>
 801dea0:	2800      	cmp	r0, #0
 801dea2:	bfab      	itete	ge
 801dea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dea6:	89a3      	ldrhlt	r3, [r4, #12]
 801dea8:	181b      	addge	r3, r3, r0
 801deaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801deae:	bfac      	ite	ge
 801deb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801deb2:	81a3      	strhlt	r3, [r4, #12]
 801deb4:	bd10      	pop	{r4, pc}

0801deb6 <__swrite>:
 801deb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801deba:	461f      	mov	r7, r3
 801debc:	898b      	ldrh	r3, [r1, #12]
 801debe:	05db      	lsls	r3, r3, #23
 801dec0:	4605      	mov	r5, r0
 801dec2:	460c      	mov	r4, r1
 801dec4:	4616      	mov	r6, r2
 801dec6:	d505      	bpl.n	801ded4 <__swrite+0x1e>
 801dec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801decc:	2302      	movs	r3, #2
 801dece:	2200      	movs	r2, #0
 801ded0:	f000 f936 	bl	801e140 <_lseek_r>
 801ded4:	89a3      	ldrh	r3, [r4, #12]
 801ded6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801deda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dede:	81a3      	strh	r3, [r4, #12]
 801dee0:	4632      	mov	r2, r6
 801dee2:	463b      	mov	r3, r7
 801dee4:	4628      	mov	r0, r5
 801dee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801deea:	f000 b95d 	b.w	801e1a8 <_write_r>

0801deee <__sseek>:
 801deee:	b510      	push	{r4, lr}
 801def0:	460c      	mov	r4, r1
 801def2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801def6:	f000 f923 	bl	801e140 <_lseek_r>
 801defa:	1c43      	adds	r3, r0, #1
 801defc:	89a3      	ldrh	r3, [r4, #12]
 801defe:	bf15      	itete	ne
 801df00:	6560      	strne	r0, [r4, #84]	@ 0x54
 801df02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801df06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801df0a:	81a3      	strheq	r3, [r4, #12]
 801df0c:	bf18      	it	ne
 801df0e:	81a3      	strhne	r3, [r4, #12]
 801df10:	bd10      	pop	{r4, pc}

0801df12 <__sclose>:
 801df12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df16:	f000 b8ad 	b.w	801e074 <_close_r>

0801df1a <__swbuf_r>:
 801df1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df1c:	460e      	mov	r6, r1
 801df1e:	4614      	mov	r4, r2
 801df20:	4605      	mov	r5, r0
 801df22:	b118      	cbz	r0, 801df2c <__swbuf_r+0x12>
 801df24:	6a03      	ldr	r3, [r0, #32]
 801df26:	b90b      	cbnz	r3, 801df2c <__swbuf_r+0x12>
 801df28:	f7ff fefc 	bl	801dd24 <__sinit>
 801df2c:	69a3      	ldr	r3, [r4, #24]
 801df2e:	60a3      	str	r3, [r4, #8]
 801df30:	89a3      	ldrh	r3, [r4, #12]
 801df32:	071a      	lsls	r2, r3, #28
 801df34:	d501      	bpl.n	801df3a <__swbuf_r+0x20>
 801df36:	6923      	ldr	r3, [r4, #16]
 801df38:	b943      	cbnz	r3, 801df4c <__swbuf_r+0x32>
 801df3a:	4621      	mov	r1, r4
 801df3c:	4628      	mov	r0, r5
 801df3e:	f000 f82b 	bl	801df98 <__swsetup_r>
 801df42:	b118      	cbz	r0, 801df4c <__swbuf_r+0x32>
 801df44:	f04f 37ff 	mov.w	r7, #4294967295
 801df48:	4638      	mov	r0, r7
 801df4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df4c:	6823      	ldr	r3, [r4, #0]
 801df4e:	6922      	ldr	r2, [r4, #16]
 801df50:	1a98      	subs	r0, r3, r2
 801df52:	6963      	ldr	r3, [r4, #20]
 801df54:	b2f6      	uxtb	r6, r6
 801df56:	4283      	cmp	r3, r0
 801df58:	4637      	mov	r7, r6
 801df5a:	dc05      	bgt.n	801df68 <__swbuf_r+0x4e>
 801df5c:	4621      	mov	r1, r4
 801df5e:	4628      	mov	r0, r5
 801df60:	f000 fd0e 	bl	801e980 <_fflush_r>
 801df64:	2800      	cmp	r0, #0
 801df66:	d1ed      	bne.n	801df44 <__swbuf_r+0x2a>
 801df68:	68a3      	ldr	r3, [r4, #8]
 801df6a:	3b01      	subs	r3, #1
 801df6c:	60a3      	str	r3, [r4, #8]
 801df6e:	6823      	ldr	r3, [r4, #0]
 801df70:	1c5a      	adds	r2, r3, #1
 801df72:	6022      	str	r2, [r4, #0]
 801df74:	701e      	strb	r6, [r3, #0]
 801df76:	6962      	ldr	r2, [r4, #20]
 801df78:	1c43      	adds	r3, r0, #1
 801df7a:	429a      	cmp	r2, r3
 801df7c:	d004      	beq.n	801df88 <__swbuf_r+0x6e>
 801df7e:	89a3      	ldrh	r3, [r4, #12]
 801df80:	07db      	lsls	r3, r3, #31
 801df82:	d5e1      	bpl.n	801df48 <__swbuf_r+0x2e>
 801df84:	2e0a      	cmp	r6, #10
 801df86:	d1df      	bne.n	801df48 <__swbuf_r+0x2e>
 801df88:	4621      	mov	r1, r4
 801df8a:	4628      	mov	r0, r5
 801df8c:	f000 fcf8 	bl	801e980 <_fflush_r>
 801df90:	2800      	cmp	r0, #0
 801df92:	d0d9      	beq.n	801df48 <__swbuf_r+0x2e>
 801df94:	e7d6      	b.n	801df44 <__swbuf_r+0x2a>
	...

0801df98 <__swsetup_r>:
 801df98:	b538      	push	{r3, r4, r5, lr}
 801df9a:	4b29      	ldr	r3, [pc, #164]	@ (801e040 <__swsetup_r+0xa8>)
 801df9c:	4605      	mov	r5, r0
 801df9e:	6818      	ldr	r0, [r3, #0]
 801dfa0:	460c      	mov	r4, r1
 801dfa2:	b118      	cbz	r0, 801dfac <__swsetup_r+0x14>
 801dfa4:	6a03      	ldr	r3, [r0, #32]
 801dfa6:	b90b      	cbnz	r3, 801dfac <__swsetup_r+0x14>
 801dfa8:	f7ff febc 	bl	801dd24 <__sinit>
 801dfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dfb0:	0719      	lsls	r1, r3, #28
 801dfb2:	d422      	bmi.n	801dffa <__swsetup_r+0x62>
 801dfb4:	06da      	lsls	r2, r3, #27
 801dfb6:	d407      	bmi.n	801dfc8 <__swsetup_r+0x30>
 801dfb8:	2209      	movs	r2, #9
 801dfba:	602a      	str	r2, [r5, #0]
 801dfbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dfc0:	81a3      	strh	r3, [r4, #12]
 801dfc2:	f04f 30ff 	mov.w	r0, #4294967295
 801dfc6:	e033      	b.n	801e030 <__swsetup_r+0x98>
 801dfc8:	0758      	lsls	r0, r3, #29
 801dfca:	d512      	bpl.n	801dff2 <__swsetup_r+0x5a>
 801dfcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dfce:	b141      	cbz	r1, 801dfe2 <__swsetup_r+0x4a>
 801dfd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dfd4:	4299      	cmp	r1, r3
 801dfd6:	d002      	beq.n	801dfde <__swsetup_r+0x46>
 801dfd8:	4628      	mov	r0, r5
 801dfda:	f000 f933 	bl	801e244 <_free_r>
 801dfde:	2300      	movs	r3, #0
 801dfe0:	6363      	str	r3, [r4, #52]	@ 0x34
 801dfe2:	89a3      	ldrh	r3, [r4, #12]
 801dfe4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dfe8:	81a3      	strh	r3, [r4, #12]
 801dfea:	2300      	movs	r3, #0
 801dfec:	6063      	str	r3, [r4, #4]
 801dfee:	6923      	ldr	r3, [r4, #16]
 801dff0:	6023      	str	r3, [r4, #0]
 801dff2:	89a3      	ldrh	r3, [r4, #12]
 801dff4:	f043 0308 	orr.w	r3, r3, #8
 801dff8:	81a3      	strh	r3, [r4, #12]
 801dffa:	6923      	ldr	r3, [r4, #16]
 801dffc:	b94b      	cbnz	r3, 801e012 <__swsetup_r+0x7a>
 801dffe:	89a3      	ldrh	r3, [r4, #12]
 801e000:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e008:	d003      	beq.n	801e012 <__swsetup_r+0x7a>
 801e00a:	4621      	mov	r1, r4
 801e00c:	4628      	mov	r0, r5
 801e00e:	f000 fd05 	bl	801ea1c <__smakebuf_r>
 801e012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e016:	f013 0201 	ands.w	r2, r3, #1
 801e01a:	d00a      	beq.n	801e032 <__swsetup_r+0x9a>
 801e01c:	2200      	movs	r2, #0
 801e01e:	60a2      	str	r2, [r4, #8]
 801e020:	6962      	ldr	r2, [r4, #20]
 801e022:	4252      	negs	r2, r2
 801e024:	61a2      	str	r2, [r4, #24]
 801e026:	6922      	ldr	r2, [r4, #16]
 801e028:	b942      	cbnz	r2, 801e03c <__swsetup_r+0xa4>
 801e02a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e02e:	d1c5      	bne.n	801dfbc <__swsetup_r+0x24>
 801e030:	bd38      	pop	{r3, r4, r5, pc}
 801e032:	0799      	lsls	r1, r3, #30
 801e034:	bf58      	it	pl
 801e036:	6962      	ldrpl	r2, [r4, #20]
 801e038:	60a2      	str	r2, [r4, #8]
 801e03a:	e7f4      	b.n	801e026 <__swsetup_r+0x8e>
 801e03c:	2000      	movs	r0, #0
 801e03e:	e7f7      	b.n	801e030 <__swsetup_r+0x98>
 801e040:	24000040 	.word	0x24000040

0801e044 <memcmp>:
 801e044:	b510      	push	{r4, lr}
 801e046:	3901      	subs	r1, #1
 801e048:	4402      	add	r2, r0
 801e04a:	4290      	cmp	r0, r2
 801e04c:	d101      	bne.n	801e052 <memcmp+0xe>
 801e04e:	2000      	movs	r0, #0
 801e050:	e005      	b.n	801e05e <memcmp+0x1a>
 801e052:	7803      	ldrb	r3, [r0, #0]
 801e054:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e058:	42a3      	cmp	r3, r4
 801e05a:	d001      	beq.n	801e060 <memcmp+0x1c>
 801e05c:	1b18      	subs	r0, r3, r4
 801e05e:	bd10      	pop	{r4, pc}
 801e060:	3001      	adds	r0, #1
 801e062:	e7f2      	b.n	801e04a <memcmp+0x6>

0801e064 <memset>:
 801e064:	4402      	add	r2, r0
 801e066:	4603      	mov	r3, r0
 801e068:	4293      	cmp	r3, r2
 801e06a:	d100      	bne.n	801e06e <memset+0xa>
 801e06c:	4770      	bx	lr
 801e06e:	f803 1b01 	strb.w	r1, [r3], #1
 801e072:	e7f9      	b.n	801e068 <memset+0x4>

0801e074 <_close_r>:
 801e074:	b538      	push	{r3, r4, r5, lr}
 801e076:	4d06      	ldr	r5, [pc, #24]	@ (801e090 <_close_r+0x1c>)
 801e078:	2300      	movs	r3, #0
 801e07a:	4604      	mov	r4, r0
 801e07c:	4608      	mov	r0, r1
 801e07e:	602b      	str	r3, [r5, #0]
 801e080:	f7e3 fd3c 	bl	8001afc <_close>
 801e084:	1c43      	adds	r3, r0, #1
 801e086:	d102      	bne.n	801e08e <_close_r+0x1a>
 801e088:	682b      	ldr	r3, [r5, #0]
 801e08a:	b103      	cbz	r3, 801e08e <_close_r+0x1a>
 801e08c:	6023      	str	r3, [r4, #0]
 801e08e:	bd38      	pop	{r3, r4, r5, pc}
 801e090:	240170b0 	.word	0x240170b0

0801e094 <_reclaim_reent>:
 801e094:	4b29      	ldr	r3, [pc, #164]	@ (801e13c <_reclaim_reent+0xa8>)
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	4283      	cmp	r3, r0
 801e09a:	b570      	push	{r4, r5, r6, lr}
 801e09c:	4604      	mov	r4, r0
 801e09e:	d04b      	beq.n	801e138 <_reclaim_reent+0xa4>
 801e0a0:	69c3      	ldr	r3, [r0, #28]
 801e0a2:	b1ab      	cbz	r3, 801e0d0 <_reclaim_reent+0x3c>
 801e0a4:	68db      	ldr	r3, [r3, #12]
 801e0a6:	b16b      	cbz	r3, 801e0c4 <_reclaim_reent+0x30>
 801e0a8:	2500      	movs	r5, #0
 801e0aa:	69e3      	ldr	r3, [r4, #28]
 801e0ac:	68db      	ldr	r3, [r3, #12]
 801e0ae:	5959      	ldr	r1, [r3, r5]
 801e0b0:	2900      	cmp	r1, #0
 801e0b2:	d13b      	bne.n	801e12c <_reclaim_reent+0x98>
 801e0b4:	3504      	adds	r5, #4
 801e0b6:	2d80      	cmp	r5, #128	@ 0x80
 801e0b8:	d1f7      	bne.n	801e0aa <_reclaim_reent+0x16>
 801e0ba:	69e3      	ldr	r3, [r4, #28]
 801e0bc:	4620      	mov	r0, r4
 801e0be:	68d9      	ldr	r1, [r3, #12]
 801e0c0:	f000 f8c0 	bl	801e244 <_free_r>
 801e0c4:	69e3      	ldr	r3, [r4, #28]
 801e0c6:	6819      	ldr	r1, [r3, #0]
 801e0c8:	b111      	cbz	r1, 801e0d0 <_reclaim_reent+0x3c>
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	f000 f8ba 	bl	801e244 <_free_r>
 801e0d0:	6961      	ldr	r1, [r4, #20]
 801e0d2:	b111      	cbz	r1, 801e0da <_reclaim_reent+0x46>
 801e0d4:	4620      	mov	r0, r4
 801e0d6:	f000 f8b5 	bl	801e244 <_free_r>
 801e0da:	69e1      	ldr	r1, [r4, #28]
 801e0dc:	b111      	cbz	r1, 801e0e4 <_reclaim_reent+0x50>
 801e0de:	4620      	mov	r0, r4
 801e0e0:	f000 f8b0 	bl	801e244 <_free_r>
 801e0e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e0e6:	b111      	cbz	r1, 801e0ee <_reclaim_reent+0x5a>
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	f000 f8ab 	bl	801e244 <_free_r>
 801e0ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e0f0:	b111      	cbz	r1, 801e0f8 <_reclaim_reent+0x64>
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	f000 f8a6 	bl	801e244 <_free_r>
 801e0f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e0fa:	b111      	cbz	r1, 801e102 <_reclaim_reent+0x6e>
 801e0fc:	4620      	mov	r0, r4
 801e0fe:	f000 f8a1 	bl	801e244 <_free_r>
 801e102:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e104:	b111      	cbz	r1, 801e10c <_reclaim_reent+0x78>
 801e106:	4620      	mov	r0, r4
 801e108:	f000 f89c 	bl	801e244 <_free_r>
 801e10c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e10e:	b111      	cbz	r1, 801e116 <_reclaim_reent+0x82>
 801e110:	4620      	mov	r0, r4
 801e112:	f000 f897 	bl	801e244 <_free_r>
 801e116:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e118:	b111      	cbz	r1, 801e120 <_reclaim_reent+0x8c>
 801e11a:	4620      	mov	r0, r4
 801e11c:	f000 f892 	bl	801e244 <_free_r>
 801e120:	6a23      	ldr	r3, [r4, #32]
 801e122:	b14b      	cbz	r3, 801e138 <_reclaim_reent+0xa4>
 801e124:	4620      	mov	r0, r4
 801e126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e12a:	4718      	bx	r3
 801e12c:	680e      	ldr	r6, [r1, #0]
 801e12e:	4620      	mov	r0, r4
 801e130:	f000 f888 	bl	801e244 <_free_r>
 801e134:	4631      	mov	r1, r6
 801e136:	e7bb      	b.n	801e0b0 <_reclaim_reent+0x1c>
 801e138:	bd70      	pop	{r4, r5, r6, pc}
 801e13a:	bf00      	nop
 801e13c:	24000040 	.word	0x24000040

0801e140 <_lseek_r>:
 801e140:	b538      	push	{r3, r4, r5, lr}
 801e142:	4d07      	ldr	r5, [pc, #28]	@ (801e160 <_lseek_r+0x20>)
 801e144:	4604      	mov	r4, r0
 801e146:	4608      	mov	r0, r1
 801e148:	4611      	mov	r1, r2
 801e14a:	2200      	movs	r2, #0
 801e14c:	602a      	str	r2, [r5, #0]
 801e14e:	461a      	mov	r2, r3
 801e150:	f7e3 fcfb 	bl	8001b4a <_lseek>
 801e154:	1c43      	adds	r3, r0, #1
 801e156:	d102      	bne.n	801e15e <_lseek_r+0x1e>
 801e158:	682b      	ldr	r3, [r5, #0]
 801e15a:	b103      	cbz	r3, 801e15e <_lseek_r+0x1e>
 801e15c:	6023      	str	r3, [r4, #0]
 801e15e:	bd38      	pop	{r3, r4, r5, pc}
 801e160:	240170b0 	.word	0x240170b0

0801e164 <_read_r>:
 801e164:	b538      	push	{r3, r4, r5, lr}
 801e166:	4d07      	ldr	r5, [pc, #28]	@ (801e184 <_read_r+0x20>)
 801e168:	4604      	mov	r4, r0
 801e16a:	4608      	mov	r0, r1
 801e16c:	4611      	mov	r1, r2
 801e16e:	2200      	movs	r2, #0
 801e170:	602a      	str	r2, [r5, #0]
 801e172:	461a      	mov	r2, r3
 801e174:	f7e3 fc89 	bl	8001a8a <_read>
 801e178:	1c43      	adds	r3, r0, #1
 801e17a:	d102      	bne.n	801e182 <_read_r+0x1e>
 801e17c:	682b      	ldr	r3, [r5, #0]
 801e17e:	b103      	cbz	r3, 801e182 <_read_r+0x1e>
 801e180:	6023      	str	r3, [r4, #0]
 801e182:	bd38      	pop	{r3, r4, r5, pc}
 801e184:	240170b0 	.word	0x240170b0

0801e188 <_sbrk_r>:
 801e188:	b538      	push	{r3, r4, r5, lr}
 801e18a:	4d06      	ldr	r5, [pc, #24]	@ (801e1a4 <_sbrk_r+0x1c>)
 801e18c:	2300      	movs	r3, #0
 801e18e:	4604      	mov	r4, r0
 801e190:	4608      	mov	r0, r1
 801e192:	602b      	str	r3, [r5, #0]
 801e194:	f7e3 fce6 	bl	8001b64 <_sbrk>
 801e198:	1c43      	adds	r3, r0, #1
 801e19a:	d102      	bne.n	801e1a2 <_sbrk_r+0x1a>
 801e19c:	682b      	ldr	r3, [r5, #0]
 801e19e:	b103      	cbz	r3, 801e1a2 <_sbrk_r+0x1a>
 801e1a0:	6023      	str	r3, [r4, #0]
 801e1a2:	bd38      	pop	{r3, r4, r5, pc}
 801e1a4:	240170b0 	.word	0x240170b0

0801e1a8 <_write_r>:
 801e1a8:	b538      	push	{r3, r4, r5, lr}
 801e1aa:	4d07      	ldr	r5, [pc, #28]	@ (801e1c8 <_write_r+0x20>)
 801e1ac:	4604      	mov	r4, r0
 801e1ae:	4608      	mov	r0, r1
 801e1b0:	4611      	mov	r1, r2
 801e1b2:	2200      	movs	r2, #0
 801e1b4:	602a      	str	r2, [r5, #0]
 801e1b6:	461a      	mov	r2, r3
 801e1b8:	f7e3 fc84 	bl	8001ac4 <_write>
 801e1bc:	1c43      	adds	r3, r0, #1
 801e1be:	d102      	bne.n	801e1c6 <_write_r+0x1e>
 801e1c0:	682b      	ldr	r3, [r5, #0]
 801e1c2:	b103      	cbz	r3, 801e1c6 <_write_r+0x1e>
 801e1c4:	6023      	str	r3, [r4, #0]
 801e1c6:	bd38      	pop	{r3, r4, r5, pc}
 801e1c8:	240170b0 	.word	0x240170b0

0801e1cc <__libc_init_array>:
 801e1cc:	b570      	push	{r4, r5, r6, lr}
 801e1ce:	4d0d      	ldr	r5, [pc, #52]	@ (801e204 <__libc_init_array+0x38>)
 801e1d0:	4c0d      	ldr	r4, [pc, #52]	@ (801e208 <__libc_init_array+0x3c>)
 801e1d2:	1b64      	subs	r4, r4, r5
 801e1d4:	10a4      	asrs	r4, r4, #2
 801e1d6:	2600      	movs	r6, #0
 801e1d8:	42a6      	cmp	r6, r4
 801e1da:	d109      	bne.n	801e1f0 <__libc_init_array+0x24>
 801e1dc:	4d0b      	ldr	r5, [pc, #44]	@ (801e20c <__libc_init_array+0x40>)
 801e1de:	4c0c      	ldr	r4, [pc, #48]	@ (801e210 <__libc_init_array+0x44>)
 801e1e0:	f000 fcbe 	bl	801eb60 <_init>
 801e1e4:	1b64      	subs	r4, r4, r5
 801e1e6:	10a4      	asrs	r4, r4, #2
 801e1e8:	2600      	movs	r6, #0
 801e1ea:	42a6      	cmp	r6, r4
 801e1ec:	d105      	bne.n	801e1fa <__libc_init_array+0x2e>
 801e1ee:	bd70      	pop	{r4, r5, r6, pc}
 801e1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1f4:	4798      	blx	r3
 801e1f6:	3601      	adds	r6, #1
 801e1f8:	e7ee      	b.n	801e1d8 <__libc_init_array+0xc>
 801e1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 801e1fe:	4798      	blx	r3
 801e200:	3601      	adds	r6, #1
 801e202:	e7f2      	b.n	801e1ea <__libc_init_array+0x1e>
 801e204:	08022960 	.word	0x08022960
 801e208:	08022960 	.word	0x08022960
 801e20c:	08022960 	.word	0x08022960
 801e210:	08022964 	.word	0x08022964

0801e214 <__retarget_lock_init_recursive>:
 801e214:	4770      	bx	lr

0801e216 <__retarget_lock_acquire_recursive>:
 801e216:	4770      	bx	lr

0801e218 <__retarget_lock_release_recursive>:
 801e218:	4770      	bx	lr

0801e21a <memcpy>:
 801e21a:	440a      	add	r2, r1
 801e21c:	4291      	cmp	r1, r2
 801e21e:	f100 33ff 	add.w	r3, r0, #4294967295
 801e222:	d100      	bne.n	801e226 <memcpy+0xc>
 801e224:	4770      	bx	lr
 801e226:	b510      	push	{r4, lr}
 801e228:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e22c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e230:	4291      	cmp	r1, r2
 801e232:	d1f9      	bne.n	801e228 <memcpy+0xe>
 801e234:	bd10      	pop	{r4, pc}

0801e236 <abort>:
 801e236:	b508      	push	{r3, lr}
 801e238:	2006      	movs	r0, #6
 801e23a:	f000 fc53 	bl	801eae4 <raise>
 801e23e:	2001      	movs	r0, #1
 801e240:	f7e3 fc18 	bl	8001a74 <_exit>

0801e244 <_free_r>:
 801e244:	b538      	push	{r3, r4, r5, lr}
 801e246:	4605      	mov	r5, r0
 801e248:	2900      	cmp	r1, #0
 801e24a:	d041      	beq.n	801e2d0 <_free_r+0x8c>
 801e24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e250:	1f0c      	subs	r4, r1, #4
 801e252:	2b00      	cmp	r3, #0
 801e254:	bfb8      	it	lt
 801e256:	18e4      	addlt	r4, r4, r3
 801e258:	f7ff fc8e 	bl	801db78 <__malloc_lock>
 801e25c:	4a1d      	ldr	r2, [pc, #116]	@ (801e2d4 <_free_r+0x90>)
 801e25e:	6813      	ldr	r3, [r2, #0]
 801e260:	b933      	cbnz	r3, 801e270 <_free_r+0x2c>
 801e262:	6063      	str	r3, [r4, #4]
 801e264:	6014      	str	r4, [r2, #0]
 801e266:	4628      	mov	r0, r5
 801e268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e26c:	f7ff bc8a 	b.w	801db84 <__malloc_unlock>
 801e270:	42a3      	cmp	r3, r4
 801e272:	d908      	bls.n	801e286 <_free_r+0x42>
 801e274:	6820      	ldr	r0, [r4, #0]
 801e276:	1821      	adds	r1, r4, r0
 801e278:	428b      	cmp	r3, r1
 801e27a:	bf01      	itttt	eq
 801e27c:	6819      	ldreq	r1, [r3, #0]
 801e27e:	685b      	ldreq	r3, [r3, #4]
 801e280:	1809      	addeq	r1, r1, r0
 801e282:	6021      	streq	r1, [r4, #0]
 801e284:	e7ed      	b.n	801e262 <_free_r+0x1e>
 801e286:	461a      	mov	r2, r3
 801e288:	685b      	ldr	r3, [r3, #4]
 801e28a:	b10b      	cbz	r3, 801e290 <_free_r+0x4c>
 801e28c:	42a3      	cmp	r3, r4
 801e28e:	d9fa      	bls.n	801e286 <_free_r+0x42>
 801e290:	6811      	ldr	r1, [r2, #0]
 801e292:	1850      	adds	r0, r2, r1
 801e294:	42a0      	cmp	r0, r4
 801e296:	d10b      	bne.n	801e2b0 <_free_r+0x6c>
 801e298:	6820      	ldr	r0, [r4, #0]
 801e29a:	4401      	add	r1, r0
 801e29c:	1850      	adds	r0, r2, r1
 801e29e:	4283      	cmp	r3, r0
 801e2a0:	6011      	str	r1, [r2, #0]
 801e2a2:	d1e0      	bne.n	801e266 <_free_r+0x22>
 801e2a4:	6818      	ldr	r0, [r3, #0]
 801e2a6:	685b      	ldr	r3, [r3, #4]
 801e2a8:	6053      	str	r3, [r2, #4]
 801e2aa:	4408      	add	r0, r1
 801e2ac:	6010      	str	r0, [r2, #0]
 801e2ae:	e7da      	b.n	801e266 <_free_r+0x22>
 801e2b0:	d902      	bls.n	801e2b8 <_free_r+0x74>
 801e2b2:	230c      	movs	r3, #12
 801e2b4:	602b      	str	r3, [r5, #0]
 801e2b6:	e7d6      	b.n	801e266 <_free_r+0x22>
 801e2b8:	6820      	ldr	r0, [r4, #0]
 801e2ba:	1821      	adds	r1, r4, r0
 801e2bc:	428b      	cmp	r3, r1
 801e2be:	bf04      	itt	eq
 801e2c0:	6819      	ldreq	r1, [r3, #0]
 801e2c2:	685b      	ldreq	r3, [r3, #4]
 801e2c4:	6063      	str	r3, [r4, #4]
 801e2c6:	bf04      	itt	eq
 801e2c8:	1809      	addeq	r1, r1, r0
 801e2ca:	6021      	streq	r1, [r4, #0]
 801e2cc:	6054      	str	r4, [r2, #4]
 801e2ce:	e7ca      	b.n	801e266 <_free_r+0x22>
 801e2d0:	bd38      	pop	{r3, r4, r5, pc}
 801e2d2:	bf00      	nop
 801e2d4:	24016f70 	.word	0x24016f70

0801e2d8 <__sfputc_r>:
 801e2d8:	6893      	ldr	r3, [r2, #8]
 801e2da:	3b01      	subs	r3, #1
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	b410      	push	{r4}
 801e2e0:	6093      	str	r3, [r2, #8]
 801e2e2:	da08      	bge.n	801e2f6 <__sfputc_r+0x1e>
 801e2e4:	6994      	ldr	r4, [r2, #24]
 801e2e6:	42a3      	cmp	r3, r4
 801e2e8:	db01      	blt.n	801e2ee <__sfputc_r+0x16>
 801e2ea:	290a      	cmp	r1, #10
 801e2ec:	d103      	bne.n	801e2f6 <__sfputc_r+0x1e>
 801e2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2f2:	f7ff be12 	b.w	801df1a <__swbuf_r>
 801e2f6:	6813      	ldr	r3, [r2, #0]
 801e2f8:	1c58      	adds	r0, r3, #1
 801e2fa:	6010      	str	r0, [r2, #0]
 801e2fc:	7019      	strb	r1, [r3, #0]
 801e2fe:	4608      	mov	r0, r1
 801e300:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e304:	4770      	bx	lr

0801e306 <__sfputs_r>:
 801e306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e308:	4606      	mov	r6, r0
 801e30a:	460f      	mov	r7, r1
 801e30c:	4614      	mov	r4, r2
 801e30e:	18d5      	adds	r5, r2, r3
 801e310:	42ac      	cmp	r4, r5
 801e312:	d101      	bne.n	801e318 <__sfputs_r+0x12>
 801e314:	2000      	movs	r0, #0
 801e316:	e007      	b.n	801e328 <__sfputs_r+0x22>
 801e318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e31c:	463a      	mov	r2, r7
 801e31e:	4630      	mov	r0, r6
 801e320:	f7ff ffda 	bl	801e2d8 <__sfputc_r>
 801e324:	1c43      	adds	r3, r0, #1
 801e326:	d1f3      	bne.n	801e310 <__sfputs_r+0xa>
 801e328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e32c <_vfiprintf_r>:
 801e32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e330:	460d      	mov	r5, r1
 801e332:	b09d      	sub	sp, #116	@ 0x74
 801e334:	4614      	mov	r4, r2
 801e336:	4698      	mov	r8, r3
 801e338:	4606      	mov	r6, r0
 801e33a:	b118      	cbz	r0, 801e344 <_vfiprintf_r+0x18>
 801e33c:	6a03      	ldr	r3, [r0, #32]
 801e33e:	b90b      	cbnz	r3, 801e344 <_vfiprintf_r+0x18>
 801e340:	f7ff fcf0 	bl	801dd24 <__sinit>
 801e344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e346:	07d9      	lsls	r1, r3, #31
 801e348:	d405      	bmi.n	801e356 <_vfiprintf_r+0x2a>
 801e34a:	89ab      	ldrh	r3, [r5, #12]
 801e34c:	059a      	lsls	r2, r3, #22
 801e34e:	d402      	bmi.n	801e356 <_vfiprintf_r+0x2a>
 801e350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e352:	f7ff ff60 	bl	801e216 <__retarget_lock_acquire_recursive>
 801e356:	89ab      	ldrh	r3, [r5, #12]
 801e358:	071b      	lsls	r3, r3, #28
 801e35a:	d501      	bpl.n	801e360 <_vfiprintf_r+0x34>
 801e35c:	692b      	ldr	r3, [r5, #16]
 801e35e:	b99b      	cbnz	r3, 801e388 <_vfiprintf_r+0x5c>
 801e360:	4629      	mov	r1, r5
 801e362:	4630      	mov	r0, r6
 801e364:	f7ff fe18 	bl	801df98 <__swsetup_r>
 801e368:	b170      	cbz	r0, 801e388 <_vfiprintf_r+0x5c>
 801e36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e36c:	07dc      	lsls	r4, r3, #31
 801e36e:	d504      	bpl.n	801e37a <_vfiprintf_r+0x4e>
 801e370:	f04f 30ff 	mov.w	r0, #4294967295
 801e374:	b01d      	add	sp, #116	@ 0x74
 801e376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e37a:	89ab      	ldrh	r3, [r5, #12]
 801e37c:	0598      	lsls	r0, r3, #22
 801e37e:	d4f7      	bmi.n	801e370 <_vfiprintf_r+0x44>
 801e380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e382:	f7ff ff49 	bl	801e218 <__retarget_lock_release_recursive>
 801e386:	e7f3      	b.n	801e370 <_vfiprintf_r+0x44>
 801e388:	2300      	movs	r3, #0
 801e38a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e38c:	2320      	movs	r3, #32
 801e38e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e392:	f8cd 800c 	str.w	r8, [sp, #12]
 801e396:	2330      	movs	r3, #48	@ 0x30
 801e398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e548 <_vfiprintf_r+0x21c>
 801e39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e3a0:	f04f 0901 	mov.w	r9, #1
 801e3a4:	4623      	mov	r3, r4
 801e3a6:	469a      	mov	sl, r3
 801e3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3ac:	b10a      	cbz	r2, 801e3b2 <_vfiprintf_r+0x86>
 801e3ae:	2a25      	cmp	r2, #37	@ 0x25
 801e3b0:	d1f9      	bne.n	801e3a6 <_vfiprintf_r+0x7a>
 801e3b2:	ebba 0b04 	subs.w	fp, sl, r4
 801e3b6:	d00b      	beq.n	801e3d0 <_vfiprintf_r+0xa4>
 801e3b8:	465b      	mov	r3, fp
 801e3ba:	4622      	mov	r2, r4
 801e3bc:	4629      	mov	r1, r5
 801e3be:	4630      	mov	r0, r6
 801e3c0:	f7ff ffa1 	bl	801e306 <__sfputs_r>
 801e3c4:	3001      	adds	r0, #1
 801e3c6:	f000 80a7 	beq.w	801e518 <_vfiprintf_r+0x1ec>
 801e3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3cc:	445a      	add	r2, fp
 801e3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801e3d0:	f89a 3000 	ldrb.w	r3, [sl]
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	f000 809f 	beq.w	801e518 <_vfiprintf_r+0x1ec>
 801e3da:	2300      	movs	r3, #0
 801e3dc:	f04f 32ff 	mov.w	r2, #4294967295
 801e3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e3e4:	f10a 0a01 	add.w	sl, sl, #1
 801e3e8:	9304      	str	r3, [sp, #16]
 801e3ea:	9307      	str	r3, [sp, #28]
 801e3ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e3f0:	931a      	str	r3, [sp, #104]	@ 0x68
 801e3f2:	4654      	mov	r4, sl
 801e3f4:	2205      	movs	r2, #5
 801e3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3fa:	4853      	ldr	r0, [pc, #332]	@ (801e548 <_vfiprintf_r+0x21c>)
 801e3fc:	f7e1 ff88 	bl	8000310 <memchr>
 801e400:	9a04      	ldr	r2, [sp, #16]
 801e402:	b9d8      	cbnz	r0, 801e43c <_vfiprintf_r+0x110>
 801e404:	06d1      	lsls	r1, r2, #27
 801e406:	bf44      	itt	mi
 801e408:	2320      	movmi	r3, #32
 801e40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e40e:	0713      	lsls	r3, r2, #28
 801e410:	bf44      	itt	mi
 801e412:	232b      	movmi	r3, #43	@ 0x2b
 801e414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e418:	f89a 3000 	ldrb.w	r3, [sl]
 801e41c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e41e:	d015      	beq.n	801e44c <_vfiprintf_r+0x120>
 801e420:	9a07      	ldr	r2, [sp, #28]
 801e422:	4654      	mov	r4, sl
 801e424:	2000      	movs	r0, #0
 801e426:	f04f 0c0a 	mov.w	ip, #10
 801e42a:	4621      	mov	r1, r4
 801e42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e430:	3b30      	subs	r3, #48	@ 0x30
 801e432:	2b09      	cmp	r3, #9
 801e434:	d94b      	bls.n	801e4ce <_vfiprintf_r+0x1a2>
 801e436:	b1b0      	cbz	r0, 801e466 <_vfiprintf_r+0x13a>
 801e438:	9207      	str	r2, [sp, #28]
 801e43a:	e014      	b.n	801e466 <_vfiprintf_r+0x13a>
 801e43c:	eba0 0308 	sub.w	r3, r0, r8
 801e440:	fa09 f303 	lsl.w	r3, r9, r3
 801e444:	4313      	orrs	r3, r2
 801e446:	9304      	str	r3, [sp, #16]
 801e448:	46a2      	mov	sl, r4
 801e44a:	e7d2      	b.n	801e3f2 <_vfiprintf_r+0xc6>
 801e44c:	9b03      	ldr	r3, [sp, #12]
 801e44e:	1d19      	adds	r1, r3, #4
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	9103      	str	r1, [sp, #12]
 801e454:	2b00      	cmp	r3, #0
 801e456:	bfbb      	ittet	lt
 801e458:	425b      	neglt	r3, r3
 801e45a:	f042 0202 	orrlt.w	r2, r2, #2
 801e45e:	9307      	strge	r3, [sp, #28]
 801e460:	9307      	strlt	r3, [sp, #28]
 801e462:	bfb8      	it	lt
 801e464:	9204      	strlt	r2, [sp, #16]
 801e466:	7823      	ldrb	r3, [r4, #0]
 801e468:	2b2e      	cmp	r3, #46	@ 0x2e
 801e46a:	d10a      	bne.n	801e482 <_vfiprintf_r+0x156>
 801e46c:	7863      	ldrb	r3, [r4, #1]
 801e46e:	2b2a      	cmp	r3, #42	@ 0x2a
 801e470:	d132      	bne.n	801e4d8 <_vfiprintf_r+0x1ac>
 801e472:	9b03      	ldr	r3, [sp, #12]
 801e474:	1d1a      	adds	r2, r3, #4
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	9203      	str	r2, [sp, #12]
 801e47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e47e:	3402      	adds	r4, #2
 801e480:	9305      	str	r3, [sp, #20]
 801e482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e558 <_vfiprintf_r+0x22c>
 801e486:	7821      	ldrb	r1, [r4, #0]
 801e488:	2203      	movs	r2, #3
 801e48a:	4650      	mov	r0, sl
 801e48c:	f7e1 ff40 	bl	8000310 <memchr>
 801e490:	b138      	cbz	r0, 801e4a2 <_vfiprintf_r+0x176>
 801e492:	9b04      	ldr	r3, [sp, #16]
 801e494:	eba0 000a 	sub.w	r0, r0, sl
 801e498:	2240      	movs	r2, #64	@ 0x40
 801e49a:	4082      	lsls	r2, r0
 801e49c:	4313      	orrs	r3, r2
 801e49e:	3401      	adds	r4, #1
 801e4a0:	9304      	str	r3, [sp, #16]
 801e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4a6:	4829      	ldr	r0, [pc, #164]	@ (801e54c <_vfiprintf_r+0x220>)
 801e4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e4ac:	2206      	movs	r2, #6
 801e4ae:	f7e1 ff2f 	bl	8000310 <memchr>
 801e4b2:	2800      	cmp	r0, #0
 801e4b4:	d03f      	beq.n	801e536 <_vfiprintf_r+0x20a>
 801e4b6:	4b26      	ldr	r3, [pc, #152]	@ (801e550 <_vfiprintf_r+0x224>)
 801e4b8:	bb1b      	cbnz	r3, 801e502 <_vfiprintf_r+0x1d6>
 801e4ba:	9b03      	ldr	r3, [sp, #12]
 801e4bc:	3307      	adds	r3, #7
 801e4be:	f023 0307 	bic.w	r3, r3, #7
 801e4c2:	3308      	adds	r3, #8
 801e4c4:	9303      	str	r3, [sp, #12]
 801e4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4c8:	443b      	add	r3, r7
 801e4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4cc:	e76a      	b.n	801e3a4 <_vfiprintf_r+0x78>
 801e4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4d2:	460c      	mov	r4, r1
 801e4d4:	2001      	movs	r0, #1
 801e4d6:	e7a8      	b.n	801e42a <_vfiprintf_r+0xfe>
 801e4d8:	2300      	movs	r3, #0
 801e4da:	3401      	adds	r4, #1
 801e4dc:	9305      	str	r3, [sp, #20]
 801e4de:	4619      	mov	r1, r3
 801e4e0:	f04f 0c0a 	mov.w	ip, #10
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e4ea:	3a30      	subs	r2, #48	@ 0x30
 801e4ec:	2a09      	cmp	r2, #9
 801e4ee:	d903      	bls.n	801e4f8 <_vfiprintf_r+0x1cc>
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d0c6      	beq.n	801e482 <_vfiprintf_r+0x156>
 801e4f4:	9105      	str	r1, [sp, #20]
 801e4f6:	e7c4      	b.n	801e482 <_vfiprintf_r+0x156>
 801e4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 801e4fc:	4604      	mov	r4, r0
 801e4fe:	2301      	movs	r3, #1
 801e500:	e7f0      	b.n	801e4e4 <_vfiprintf_r+0x1b8>
 801e502:	ab03      	add	r3, sp, #12
 801e504:	9300      	str	r3, [sp, #0]
 801e506:	462a      	mov	r2, r5
 801e508:	4b12      	ldr	r3, [pc, #72]	@ (801e554 <_vfiprintf_r+0x228>)
 801e50a:	a904      	add	r1, sp, #16
 801e50c:	4630      	mov	r0, r6
 801e50e:	f3af 8000 	nop.w
 801e512:	4607      	mov	r7, r0
 801e514:	1c78      	adds	r0, r7, #1
 801e516:	d1d6      	bne.n	801e4c6 <_vfiprintf_r+0x19a>
 801e518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e51a:	07d9      	lsls	r1, r3, #31
 801e51c:	d405      	bmi.n	801e52a <_vfiprintf_r+0x1fe>
 801e51e:	89ab      	ldrh	r3, [r5, #12]
 801e520:	059a      	lsls	r2, r3, #22
 801e522:	d402      	bmi.n	801e52a <_vfiprintf_r+0x1fe>
 801e524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e526:	f7ff fe77 	bl	801e218 <__retarget_lock_release_recursive>
 801e52a:	89ab      	ldrh	r3, [r5, #12]
 801e52c:	065b      	lsls	r3, r3, #25
 801e52e:	f53f af1f 	bmi.w	801e370 <_vfiprintf_r+0x44>
 801e532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e534:	e71e      	b.n	801e374 <_vfiprintf_r+0x48>
 801e536:	ab03      	add	r3, sp, #12
 801e538:	9300      	str	r3, [sp, #0]
 801e53a:	462a      	mov	r2, r5
 801e53c:	4b05      	ldr	r3, [pc, #20]	@ (801e554 <_vfiprintf_r+0x228>)
 801e53e:	a904      	add	r1, sp, #16
 801e540:	4630      	mov	r0, r6
 801e542:	f000 f879 	bl	801e638 <_printf_i>
 801e546:	e7e4      	b.n	801e512 <_vfiprintf_r+0x1e6>
 801e548:	08022925 	.word	0x08022925
 801e54c:	0802292f 	.word	0x0802292f
 801e550:	00000000 	.word	0x00000000
 801e554:	0801e307 	.word	0x0801e307
 801e558:	0802292b 	.word	0x0802292b

0801e55c <_printf_common>:
 801e55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e560:	4616      	mov	r6, r2
 801e562:	4698      	mov	r8, r3
 801e564:	688a      	ldr	r2, [r1, #8]
 801e566:	690b      	ldr	r3, [r1, #16]
 801e568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e56c:	4293      	cmp	r3, r2
 801e56e:	bfb8      	it	lt
 801e570:	4613      	movlt	r3, r2
 801e572:	6033      	str	r3, [r6, #0]
 801e574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e578:	4607      	mov	r7, r0
 801e57a:	460c      	mov	r4, r1
 801e57c:	b10a      	cbz	r2, 801e582 <_printf_common+0x26>
 801e57e:	3301      	adds	r3, #1
 801e580:	6033      	str	r3, [r6, #0]
 801e582:	6823      	ldr	r3, [r4, #0]
 801e584:	0699      	lsls	r1, r3, #26
 801e586:	bf42      	ittt	mi
 801e588:	6833      	ldrmi	r3, [r6, #0]
 801e58a:	3302      	addmi	r3, #2
 801e58c:	6033      	strmi	r3, [r6, #0]
 801e58e:	6825      	ldr	r5, [r4, #0]
 801e590:	f015 0506 	ands.w	r5, r5, #6
 801e594:	d106      	bne.n	801e5a4 <_printf_common+0x48>
 801e596:	f104 0a19 	add.w	sl, r4, #25
 801e59a:	68e3      	ldr	r3, [r4, #12]
 801e59c:	6832      	ldr	r2, [r6, #0]
 801e59e:	1a9b      	subs	r3, r3, r2
 801e5a0:	42ab      	cmp	r3, r5
 801e5a2:	dc26      	bgt.n	801e5f2 <_printf_common+0x96>
 801e5a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e5a8:	6822      	ldr	r2, [r4, #0]
 801e5aa:	3b00      	subs	r3, #0
 801e5ac:	bf18      	it	ne
 801e5ae:	2301      	movne	r3, #1
 801e5b0:	0692      	lsls	r2, r2, #26
 801e5b2:	d42b      	bmi.n	801e60c <_printf_common+0xb0>
 801e5b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e5b8:	4641      	mov	r1, r8
 801e5ba:	4638      	mov	r0, r7
 801e5bc:	47c8      	blx	r9
 801e5be:	3001      	adds	r0, #1
 801e5c0:	d01e      	beq.n	801e600 <_printf_common+0xa4>
 801e5c2:	6823      	ldr	r3, [r4, #0]
 801e5c4:	6922      	ldr	r2, [r4, #16]
 801e5c6:	f003 0306 	and.w	r3, r3, #6
 801e5ca:	2b04      	cmp	r3, #4
 801e5cc:	bf02      	ittt	eq
 801e5ce:	68e5      	ldreq	r5, [r4, #12]
 801e5d0:	6833      	ldreq	r3, [r6, #0]
 801e5d2:	1aed      	subeq	r5, r5, r3
 801e5d4:	68a3      	ldr	r3, [r4, #8]
 801e5d6:	bf0c      	ite	eq
 801e5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e5dc:	2500      	movne	r5, #0
 801e5de:	4293      	cmp	r3, r2
 801e5e0:	bfc4      	itt	gt
 801e5e2:	1a9b      	subgt	r3, r3, r2
 801e5e4:	18ed      	addgt	r5, r5, r3
 801e5e6:	2600      	movs	r6, #0
 801e5e8:	341a      	adds	r4, #26
 801e5ea:	42b5      	cmp	r5, r6
 801e5ec:	d11a      	bne.n	801e624 <_printf_common+0xc8>
 801e5ee:	2000      	movs	r0, #0
 801e5f0:	e008      	b.n	801e604 <_printf_common+0xa8>
 801e5f2:	2301      	movs	r3, #1
 801e5f4:	4652      	mov	r2, sl
 801e5f6:	4641      	mov	r1, r8
 801e5f8:	4638      	mov	r0, r7
 801e5fa:	47c8      	blx	r9
 801e5fc:	3001      	adds	r0, #1
 801e5fe:	d103      	bne.n	801e608 <_printf_common+0xac>
 801e600:	f04f 30ff 	mov.w	r0, #4294967295
 801e604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e608:	3501      	adds	r5, #1
 801e60a:	e7c6      	b.n	801e59a <_printf_common+0x3e>
 801e60c:	18e1      	adds	r1, r4, r3
 801e60e:	1c5a      	adds	r2, r3, #1
 801e610:	2030      	movs	r0, #48	@ 0x30
 801e612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e616:	4422      	add	r2, r4
 801e618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e61c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e620:	3302      	adds	r3, #2
 801e622:	e7c7      	b.n	801e5b4 <_printf_common+0x58>
 801e624:	2301      	movs	r3, #1
 801e626:	4622      	mov	r2, r4
 801e628:	4641      	mov	r1, r8
 801e62a:	4638      	mov	r0, r7
 801e62c:	47c8      	blx	r9
 801e62e:	3001      	adds	r0, #1
 801e630:	d0e6      	beq.n	801e600 <_printf_common+0xa4>
 801e632:	3601      	adds	r6, #1
 801e634:	e7d9      	b.n	801e5ea <_printf_common+0x8e>
	...

0801e638 <_printf_i>:
 801e638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e63c:	7e0f      	ldrb	r7, [r1, #24]
 801e63e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e640:	2f78      	cmp	r7, #120	@ 0x78
 801e642:	4691      	mov	r9, r2
 801e644:	4680      	mov	r8, r0
 801e646:	460c      	mov	r4, r1
 801e648:	469a      	mov	sl, r3
 801e64a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e64e:	d807      	bhi.n	801e660 <_printf_i+0x28>
 801e650:	2f62      	cmp	r7, #98	@ 0x62
 801e652:	d80a      	bhi.n	801e66a <_printf_i+0x32>
 801e654:	2f00      	cmp	r7, #0
 801e656:	f000 80d2 	beq.w	801e7fe <_printf_i+0x1c6>
 801e65a:	2f58      	cmp	r7, #88	@ 0x58
 801e65c:	f000 80b9 	beq.w	801e7d2 <_printf_i+0x19a>
 801e660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e668:	e03a      	b.n	801e6e0 <_printf_i+0xa8>
 801e66a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e66e:	2b15      	cmp	r3, #21
 801e670:	d8f6      	bhi.n	801e660 <_printf_i+0x28>
 801e672:	a101      	add	r1, pc, #4	@ (adr r1, 801e678 <_printf_i+0x40>)
 801e674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e678:	0801e6d1 	.word	0x0801e6d1
 801e67c:	0801e6e5 	.word	0x0801e6e5
 801e680:	0801e661 	.word	0x0801e661
 801e684:	0801e661 	.word	0x0801e661
 801e688:	0801e661 	.word	0x0801e661
 801e68c:	0801e661 	.word	0x0801e661
 801e690:	0801e6e5 	.word	0x0801e6e5
 801e694:	0801e661 	.word	0x0801e661
 801e698:	0801e661 	.word	0x0801e661
 801e69c:	0801e661 	.word	0x0801e661
 801e6a0:	0801e661 	.word	0x0801e661
 801e6a4:	0801e7e5 	.word	0x0801e7e5
 801e6a8:	0801e70f 	.word	0x0801e70f
 801e6ac:	0801e79f 	.word	0x0801e79f
 801e6b0:	0801e661 	.word	0x0801e661
 801e6b4:	0801e661 	.word	0x0801e661
 801e6b8:	0801e807 	.word	0x0801e807
 801e6bc:	0801e661 	.word	0x0801e661
 801e6c0:	0801e70f 	.word	0x0801e70f
 801e6c4:	0801e661 	.word	0x0801e661
 801e6c8:	0801e661 	.word	0x0801e661
 801e6cc:	0801e7a7 	.word	0x0801e7a7
 801e6d0:	6833      	ldr	r3, [r6, #0]
 801e6d2:	1d1a      	adds	r2, r3, #4
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	6032      	str	r2, [r6, #0]
 801e6d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e6dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e6e0:	2301      	movs	r3, #1
 801e6e2:	e09d      	b.n	801e820 <_printf_i+0x1e8>
 801e6e4:	6833      	ldr	r3, [r6, #0]
 801e6e6:	6820      	ldr	r0, [r4, #0]
 801e6e8:	1d19      	adds	r1, r3, #4
 801e6ea:	6031      	str	r1, [r6, #0]
 801e6ec:	0606      	lsls	r6, r0, #24
 801e6ee:	d501      	bpl.n	801e6f4 <_printf_i+0xbc>
 801e6f0:	681d      	ldr	r5, [r3, #0]
 801e6f2:	e003      	b.n	801e6fc <_printf_i+0xc4>
 801e6f4:	0645      	lsls	r5, r0, #25
 801e6f6:	d5fb      	bpl.n	801e6f0 <_printf_i+0xb8>
 801e6f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e6fc:	2d00      	cmp	r5, #0
 801e6fe:	da03      	bge.n	801e708 <_printf_i+0xd0>
 801e700:	232d      	movs	r3, #45	@ 0x2d
 801e702:	426d      	negs	r5, r5
 801e704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e708:	4859      	ldr	r0, [pc, #356]	@ (801e870 <_printf_i+0x238>)
 801e70a:	230a      	movs	r3, #10
 801e70c:	e011      	b.n	801e732 <_printf_i+0xfa>
 801e70e:	6821      	ldr	r1, [r4, #0]
 801e710:	6833      	ldr	r3, [r6, #0]
 801e712:	0608      	lsls	r0, r1, #24
 801e714:	f853 5b04 	ldr.w	r5, [r3], #4
 801e718:	d402      	bmi.n	801e720 <_printf_i+0xe8>
 801e71a:	0649      	lsls	r1, r1, #25
 801e71c:	bf48      	it	mi
 801e71e:	b2ad      	uxthmi	r5, r5
 801e720:	2f6f      	cmp	r7, #111	@ 0x6f
 801e722:	4853      	ldr	r0, [pc, #332]	@ (801e870 <_printf_i+0x238>)
 801e724:	6033      	str	r3, [r6, #0]
 801e726:	bf14      	ite	ne
 801e728:	230a      	movne	r3, #10
 801e72a:	2308      	moveq	r3, #8
 801e72c:	2100      	movs	r1, #0
 801e72e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e732:	6866      	ldr	r6, [r4, #4]
 801e734:	60a6      	str	r6, [r4, #8]
 801e736:	2e00      	cmp	r6, #0
 801e738:	bfa2      	ittt	ge
 801e73a:	6821      	ldrge	r1, [r4, #0]
 801e73c:	f021 0104 	bicge.w	r1, r1, #4
 801e740:	6021      	strge	r1, [r4, #0]
 801e742:	b90d      	cbnz	r5, 801e748 <_printf_i+0x110>
 801e744:	2e00      	cmp	r6, #0
 801e746:	d04b      	beq.n	801e7e0 <_printf_i+0x1a8>
 801e748:	4616      	mov	r6, r2
 801e74a:	fbb5 f1f3 	udiv	r1, r5, r3
 801e74e:	fb03 5711 	mls	r7, r3, r1, r5
 801e752:	5dc7      	ldrb	r7, [r0, r7]
 801e754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e758:	462f      	mov	r7, r5
 801e75a:	42bb      	cmp	r3, r7
 801e75c:	460d      	mov	r5, r1
 801e75e:	d9f4      	bls.n	801e74a <_printf_i+0x112>
 801e760:	2b08      	cmp	r3, #8
 801e762:	d10b      	bne.n	801e77c <_printf_i+0x144>
 801e764:	6823      	ldr	r3, [r4, #0]
 801e766:	07df      	lsls	r7, r3, #31
 801e768:	d508      	bpl.n	801e77c <_printf_i+0x144>
 801e76a:	6923      	ldr	r3, [r4, #16]
 801e76c:	6861      	ldr	r1, [r4, #4]
 801e76e:	4299      	cmp	r1, r3
 801e770:	bfde      	ittt	le
 801e772:	2330      	movle	r3, #48	@ 0x30
 801e774:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e778:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e77c:	1b92      	subs	r2, r2, r6
 801e77e:	6122      	str	r2, [r4, #16]
 801e780:	f8cd a000 	str.w	sl, [sp]
 801e784:	464b      	mov	r3, r9
 801e786:	aa03      	add	r2, sp, #12
 801e788:	4621      	mov	r1, r4
 801e78a:	4640      	mov	r0, r8
 801e78c:	f7ff fee6 	bl	801e55c <_printf_common>
 801e790:	3001      	adds	r0, #1
 801e792:	d14a      	bne.n	801e82a <_printf_i+0x1f2>
 801e794:	f04f 30ff 	mov.w	r0, #4294967295
 801e798:	b004      	add	sp, #16
 801e79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e79e:	6823      	ldr	r3, [r4, #0]
 801e7a0:	f043 0320 	orr.w	r3, r3, #32
 801e7a4:	6023      	str	r3, [r4, #0]
 801e7a6:	4833      	ldr	r0, [pc, #204]	@ (801e874 <_printf_i+0x23c>)
 801e7a8:	2778      	movs	r7, #120	@ 0x78
 801e7aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e7ae:	6823      	ldr	r3, [r4, #0]
 801e7b0:	6831      	ldr	r1, [r6, #0]
 801e7b2:	061f      	lsls	r7, r3, #24
 801e7b4:	f851 5b04 	ldr.w	r5, [r1], #4
 801e7b8:	d402      	bmi.n	801e7c0 <_printf_i+0x188>
 801e7ba:	065f      	lsls	r7, r3, #25
 801e7bc:	bf48      	it	mi
 801e7be:	b2ad      	uxthmi	r5, r5
 801e7c0:	6031      	str	r1, [r6, #0]
 801e7c2:	07d9      	lsls	r1, r3, #31
 801e7c4:	bf44      	itt	mi
 801e7c6:	f043 0320 	orrmi.w	r3, r3, #32
 801e7ca:	6023      	strmi	r3, [r4, #0]
 801e7cc:	b11d      	cbz	r5, 801e7d6 <_printf_i+0x19e>
 801e7ce:	2310      	movs	r3, #16
 801e7d0:	e7ac      	b.n	801e72c <_printf_i+0xf4>
 801e7d2:	4827      	ldr	r0, [pc, #156]	@ (801e870 <_printf_i+0x238>)
 801e7d4:	e7e9      	b.n	801e7aa <_printf_i+0x172>
 801e7d6:	6823      	ldr	r3, [r4, #0]
 801e7d8:	f023 0320 	bic.w	r3, r3, #32
 801e7dc:	6023      	str	r3, [r4, #0]
 801e7de:	e7f6      	b.n	801e7ce <_printf_i+0x196>
 801e7e0:	4616      	mov	r6, r2
 801e7e2:	e7bd      	b.n	801e760 <_printf_i+0x128>
 801e7e4:	6833      	ldr	r3, [r6, #0]
 801e7e6:	6825      	ldr	r5, [r4, #0]
 801e7e8:	6961      	ldr	r1, [r4, #20]
 801e7ea:	1d18      	adds	r0, r3, #4
 801e7ec:	6030      	str	r0, [r6, #0]
 801e7ee:	062e      	lsls	r6, r5, #24
 801e7f0:	681b      	ldr	r3, [r3, #0]
 801e7f2:	d501      	bpl.n	801e7f8 <_printf_i+0x1c0>
 801e7f4:	6019      	str	r1, [r3, #0]
 801e7f6:	e002      	b.n	801e7fe <_printf_i+0x1c6>
 801e7f8:	0668      	lsls	r0, r5, #25
 801e7fa:	d5fb      	bpl.n	801e7f4 <_printf_i+0x1bc>
 801e7fc:	8019      	strh	r1, [r3, #0]
 801e7fe:	2300      	movs	r3, #0
 801e800:	6123      	str	r3, [r4, #16]
 801e802:	4616      	mov	r6, r2
 801e804:	e7bc      	b.n	801e780 <_printf_i+0x148>
 801e806:	6833      	ldr	r3, [r6, #0]
 801e808:	1d1a      	adds	r2, r3, #4
 801e80a:	6032      	str	r2, [r6, #0]
 801e80c:	681e      	ldr	r6, [r3, #0]
 801e80e:	6862      	ldr	r2, [r4, #4]
 801e810:	2100      	movs	r1, #0
 801e812:	4630      	mov	r0, r6
 801e814:	f7e1 fd7c 	bl	8000310 <memchr>
 801e818:	b108      	cbz	r0, 801e81e <_printf_i+0x1e6>
 801e81a:	1b80      	subs	r0, r0, r6
 801e81c:	6060      	str	r0, [r4, #4]
 801e81e:	6863      	ldr	r3, [r4, #4]
 801e820:	6123      	str	r3, [r4, #16]
 801e822:	2300      	movs	r3, #0
 801e824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e828:	e7aa      	b.n	801e780 <_printf_i+0x148>
 801e82a:	6923      	ldr	r3, [r4, #16]
 801e82c:	4632      	mov	r2, r6
 801e82e:	4649      	mov	r1, r9
 801e830:	4640      	mov	r0, r8
 801e832:	47d0      	blx	sl
 801e834:	3001      	adds	r0, #1
 801e836:	d0ad      	beq.n	801e794 <_printf_i+0x15c>
 801e838:	6823      	ldr	r3, [r4, #0]
 801e83a:	079b      	lsls	r3, r3, #30
 801e83c:	d413      	bmi.n	801e866 <_printf_i+0x22e>
 801e83e:	68e0      	ldr	r0, [r4, #12]
 801e840:	9b03      	ldr	r3, [sp, #12]
 801e842:	4298      	cmp	r0, r3
 801e844:	bfb8      	it	lt
 801e846:	4618      	movlt	r0, r3
 801e848:	e7a6      	b.n	801e798 <_printf_i+0x160>
 801e84a:	2301      	movs	r3, #1
 801e84c:	4632      	mov	r2, r6
 801e84e:	4649      	mov	r1, r9
 801e850:	4640      	mov	r0, r8
 801e852:	47d0      	blx	sl
 801e854:	3001      	adds	r0, #1
 801e856:	d09d      	beq.n	801e794 <_printf_i+0x15c>
 801e858:	3501      	adds	r5, #1
 801e85a:	68e3      	ldr	r3, [r4, #12]
 801e85c:	9903      	ldr	r1, [sp, #12]
 801e85e:	1a5b      	subs	r3, r3, r1
 801e860:	42ab      	cmp	r3, r5
 801e862:	dcf2      	bgt.n	801e84a <_printf_i+0x212>
 801e864:	e7eb      	b.n	801e83e <_printf_i+0x206>
 801e866:	2500      	movs	r5, #0
 801e868:	f104 0619 	add.w	r6, r4, #25
 801e86c:	e7f5      	b.n	801e85a <_printf_i+0x222>
 801e86e:	bf00      	nop
 801e870:	08022936 	.word	0x08022936
 801e874:	08022947 	.word	0x08022947

0801e878 <__sflush_r>:
 801e878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e880:	0716      	lsls	r6, r2, #28
 801e882:	4605      	mov	r5, r0
 801e884:	460c      	mov	r4, r1
 801e886:	d454      	bmi.n	801e932 <__sflush_r+0xba>
 801e888:	684b      	ldr	r3, [r1, #4]
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	dc02      	bgt.n	801e894 <__sflush_r+0x1c>
 801e88e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e890:	2b00      	cmp	r3, #0
 801e892:	dd48      	ble.n	801e926 <__sflush_r+0xae>
 801e894:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e896:	2e00      	cmp	r6, #0
 801e898:	d045      	beq.n	801e926 <__sflush_r+0xae>
 801e89a:	2300      	movs	r3, #0
 801e89c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e8a0:	682f      	ldr	r7, [r5, #0]
 801e8a2:	6a21      	ldr	r1, [r4, #32]
 801e8a4:	602b      	str	r3, [r5, #0]
 801e8a6:	d030      	beq.n	801e90a <__sflush_r+0x92>
 801e8a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e8aa:	89a3      	ldrh	r3, [r4, #12]
 801e8ac:	0759      	lsls	r1, r3, #29
 801e8ae:	d505      	bpl.n	801e8bc <__sflush_r+0x44>
 801e8b0:	6863      	ldr	r3, [r4, #4]
 801e8b2:	1ad2      	subs	r2, r2, r3
 801e8b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e8b6:	b10b      	cbz	r3, 801e8bc <__sflush_r+0x44>
 801e8b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e8ba:	1ad2      	subs	r2, r2, r3
 801e8bc:	2300      	movs	r3, #0
 801e8be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e8c0:	6a21      	ldr	r1, [r4, #32]
 801e8c2:	4628      	mov	r0, r5
 801e8c4:	47b0      	blx	r6
 801e8c6:	1c43      	adds	r3, r0, #1
 801e8c8:	89a3      	ldrh	r3, [r4, #12]
 801e8ca:	d106      	bne.n	801e8da <__sflush_r+0x62>
 801e8cc:	6829      	ldr	r1, [r5, #0]
 801e8ce:	291d      	cmp	r1, #29
 801e8d0:	d82b      	bhi.n	801e92a <__sflush_r+0xb2>
 801e8d2:	4a2a      	ldr	r2, [pc, #168]	@ (801e97c <__sflush_r+0x104>)
 801e8d4:	410a      	asrs	r2, r1
 801e8d6:	07d6      	lsls	r6, r2, #31
 801e8d8:	d427      	bmi.n	801e92a <__sflush_r+0xb2>
 801e8da:	2200      	movs	r2, #0
 801e8dc:	6062      	str	r2, [r4, #4]
 801e8de:	04d9      	lsls	r1, r3, #19
 801e8e0:	6922      	ldr	r2, [r4, #16]
 801e8e2:	6022      	str	r2, [r4, #0]
 801e8e4:	d504      	bpl.n	801e8f0 <__sflush_r+0x78>
 801e8e6:	1c42      	adds	r2, r0, #1
 801e8e8:	d101      	bne.n	801e8ee <__sflush_r+0x76>
 801e8ea:	682b      	ldr	r3, [r5, #0]
 801e8ec:	b903      	cbnz	r3, 801e8f0 <__sflush_r+0x78>
 801e8ee:	6560      	str	r0, [r4, #84]	@ 0x54
 801e8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e8f2:	602f      	str	r7, [r5, #0]
 801e8f4:	b1b9      	cbz	r1, 801e926 <__sflush_r+0xae>
 801e8f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e8fa:	4299      	cmp	r1, r3
 801e8fc:	d002      	beq.n	801e904 <__sflush_r+0x8c>
 801e8fe:	4628      	mov	r0, r5
 801e900:	f7ff fca0 	bl	801e244 <_free_r>
 801e904:	2300      	movs	r3, #0
 801e906:	6363      	str	r3, [r4, #52]	@ 0x34
 801e908:	e00d      	b.n	801e926 <__sflush_r+0xae>
 801e90a:	2301      	movs	r3, #1
 801e90c:	4628      	mov	r0, r5
 801e90e:	47b0      	blx	r6
 801e910:	4602      	mov	r2, r0
 801e912:	1c50      	adds	r0, r2, #1
 801e914:	d1c9      	bne.n	801e8aa <__sflush_r+0x32>
 801e916:	682b      	ldr	r3, [r5, #0]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d0c6      	beq.n	801e8aa <__sflush_r+0x32>
 801e91c:	2b1d      	cmp	r3, #29
 801e91e:	d001      	beq.n	801e924 <__sflush_r+0xac>
 801e920:	2b16      	cmp	r3, #22
 801e922:	d11e      	bne.n	801e962 <__sflush_r+0xea>
 801e924:	602f      	str	r7, [r5, #0]
 801e926:	2000      	movs	r0, #0
 801e928:	e022      	b.n	801e970 <__sflush_r+0xf8>
 801e92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e92e:	b21b      	sxth	r3, r3
 801e930:	e01b      	b.n	801e96a <__sflush_r+0xf2>
 801e932:	690f      	ldr	r7, [r1, #16]
 801e934:	2f00      	cmp	r7, #0
 801e936:	d0f6      	beq.n	801e926 <__sflush_r+0xae>
 801e938:	0793      	lsls	r3, r2, #30
 801e93a:	680e      	ldr	r6, [r1, #0]
 801e93c:	bf08      	it	eq
 801e93e:	694b      	ldreq	r3, [r1, #20]
 801e940:	600f      	str	r7, [r1, #0]
 801e942:	bf18      	it	ne
 801e944:	2300      	movne	r3, #0
 801e946:	eba6 0807 	sub.w	r8, r6, r7
 801e94a:	608b      	str	r3, [r1, #8]
 801e94c:	f1b8 0f00 	cmp.w	r8, #0
 801e950:	dde9      	ble.n	801e926 <__sflush_r+0xae>
 801e952:	6a21      	ldr	r1, [r4, #32]
 801e954:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e956:	4643      	mov	r3, r8
 801e958:	463a      	mov	r2, r7
 801e95a:	4628      	mov	r0, r5
 801e95c:	47b0      	blx	r6
 801e95e:	2800      	cmp	r0, #0
 801e960:	dc08      	bgt.n	801e974 <__sflush_r+0xfc>
 801e962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e96a:	81a3      	strh	r3, [r4, #12]
 801e96c:	f04f 30ff 	mov.w	r0, #4294967295
 801e970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e974:	4407      	add	r7, r0
 801e976:	eba8 0800 	sub.w	r8, r8, r0
 801e97a:	e7e7      	b.n	801e94c <__sflush_r+0xd4>
 801e97c:	dfbffffe 	.word	0xdfbffffe

0801e980 <_fflush_r>:
 801e980:	b538      	push	{r3, r4, r5, lr}
 801e982:	690b      	ldr	r3, [r1, #16]
 801e984:	4605      	mov	r5, r0
 801e986:	460c      	mov	r4, r1
 801e988:	b913      	cbnz	r3, 801e990 <_fflush_r+0x10>
 801e98a:	2500      	movs	r5, #0
 801e98c:	4628      	mov	r0, r5
 801e98e:	bd38      	pop	{r3, r4, r5, pc}
 801e990:	b118      	cbz	r0, 801e99a <_fflush_r+0x1a>
 801e992:	6a03      	ldr	r3, [r0, #32]
 801e994:	b90b      	cbnz	r3, 801e99a <_fflush_r+0x1a>
 801e996:	f7ff f9c5 	bl	801dd24 <__sinit>
 801e99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d0f3      	beq.n	801e98a <_fflush_r+0xa>
 801e9a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e9a4:	07d0      	lsls	r0, r2, #31
 801e9a6:	d404      	bmi.n	801e9b2 <_fflush_r+0x32>
 801e9a8:	0599      	lsls	r1, r3, #22
 801e9aa:	d402      	bmi.n	801e9b2 <_fflush_r+0x32>
 801e9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9ae:	f7ff fc32 	bl	801e216 <__retarget_lock_acquire_recursive>
 801e9b2:	4628      	mov	r0, r5
 801e9b4:	4621      	mov	r1, r4
 801e9b6:	f7ff ff5f 	bl	801e878 <__sflush_r>
 801e9ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9bc:	07da      	lsls	r2, r3, #31
 801e9be:	4605      	mov	r5, r0
 801e9c0:	d4e4      	bmi.n	801e98c <_fflush_r+0xc>
 801e9c2:	89a3      	ldrh	r3, [r4, #12]
 801e9c4:	059b      	lsls	r3, r3, #22
 801e9c6:	d4e1      	bmi.n	801e98c <_fflush_r+0xc>
 801e9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9ca:	f7ff fc25 	bl	801e218 <__retarget_lock_release_recursive>
 801e9ce:	e7dd      	b.n	801e98c <_fflush_r+0xc>

0801e9d0 <__swhatbuf_r>:
 801e9d0:	b570      	push	{r4, r5, r6, lr}
 801e9d2:	460c      	mov	r4, r1
 801e9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9d8:	2900      	cmp	r1, #0
 801e9da:	b096      	sub	sp, #88	@ 0x58
 801e9dc:	4615      	mov	r5, r2
 801e9de:	461e      	mov	r6, r3
 801e9e0:	da0d      	bge.n	801e9fe <__swhatbuf_r+0x2e>
 801e9e2:	89a3      	ldrh	r3, [r4, #12]
 801e9e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e9e8:	f04f 0100 	mov.w	r1, #0
 801e9ec:	bf14      	ite	ne
 801e9ee:	2340      	movne	r3, #64	@ 0x40
 801e9f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e9f4:	2000      	movs	r0, #0
 801e9f6:	6031      	str	r1, [r6, #0]
 801e9f8:	602b      	str	r3, [r5, #0]
 801e9fa:	b016      	add	sp, #88	@ 0x58
 801e9fc:	bd70      	pop	{r4, r5, r6, pc}
 801e9fe:	466a      	mov	r2, sp
 801ea00:	f000 f878 	bl	801eaf4 <_fstat_r>
 801ea04:	2800      	cmp	r0, #0
 801ea06:	dbec      	blt.n	801e9e2 <__swhatbuf_r+0x12>
 801ea08:	9901      	ldr	r1, [sp, #4]
 801ea0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ea0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ea12:	4259      	negs	r1, r3
 801ea14:	4159      	adcs	r1, r3
 801ea16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ea1a:	e7eb      	b.n	801e9f4 <__swhatbuf_r+0x24>

0801ea1c <__smakebuf_r>:
 801ea1c:	898b      	ldrh	r3, [r1, #12]
 801ea1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ea20:	079d      	lsls	r5, r3, #30
 801ea22:	4606      	mov	r6, r0
 801ea24:	460c      	mov	r4, r1
 801ea26:	d507      	bpl.n	801ea38 <__smakebuf_r+0x1c>
 801ea28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ea2c:	6023      	str	r3, [r4, #0]
 801ea2e:	6123      	str	r3, [r4, #16]
 801ea30:	2301      	movs	r3, #1
 801ea32:	6163      	str	r3, [r4, #20]
 801ea34:	b003      	add	sp, #12
 801ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea38:	ab01      	add	r3, sp, #4
 801ea3a:	466a      	mov	r2, sp
 801ea3c:	f7ff ffc8 	bl	801e9d0 <__swhatbuf_r>
 801ea40:	9f00      	ldr	r7, [sp, #0]
 801ea42:	4605      	mov	r5, r0
 801ea44:	4639      	mov	r1, r7
 801ea46:	4630      	mov	r0, r6
 801ea48:	f7ff f816 	bl	801da78 <_malloc_r>
 801ea4c:	b948      	cbnz	r0, 801ea62 <__smakebuf_r+0x46>
 801ea4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea52:	059a      	lsls	r2, r3, #22
 801ea54:	d4ee      	bmi.n	801ea34 <__smakebuf_r+0x18>
 801ea56:	f023 0303 	bic.w	r3, r3, #3
 801ea5a:	f043 0302 	orr.w	r3, r3, #2
 801ea5e:	81a3      	strh	r3, [r4, #12]
 801ea60:	e7e2      	b.n	801ea28 <__smakebuf_r+0xc>
 801ea62:	89a3      	ldrh	r3, [r4, #12]
 801ea64:	6020      	str	r0, [r4, #0]
 801ea66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ea6a:	81a3      	strh	r3, [r4, #12]
 801ea6c:	9b01      	ldr	r3, [sp, #4]
 801ea6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ea72:	b15b      	cbz	r3, 801ea8c <__smakebuf_r+0x70>
 801ea74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea78:	4630      	mov	r0, r6
 801ea7a:	f000 f84d 	bl	801eb18 <_isatty_r>
 801ea7e:	b128      	cbz	r0, 801ea8c <__smakebuf_r+0x70>
 801ea80:	89a3      	ldrh	r3, [r4, #12]
 801ea82:	f023 0303 	bic.w	r3, r3, #3
 801ea86:	f043 0301 	orr.w	r3, r3, #1
 801ea8a:	81a3      	strh	r3, [r4, #12]
 801ea8c:	89a3      	ldrh	r3, [r4, #12]
 801ea8e:	431d      	orrs	r5, r3
 801ea90:	81a5      	strh	r5, [r4, #12]
 801ea92:	e7cf      	b.n	801ea34 <__smakebuf_r+0x18>

0801ea94 <_raise_r>:
 801ea94:	291f      	cmp	r1, #31
 801ea96:	b538      	push	{r3, r4, r5, lr}
 801ea98:	4605      	mov	r5, r0
 801ea9a:	460c      	mov	r4, r1
 801ea9c:	d904      	bls.n	801eaa8 <_raise_r+0x14>
 801ea9e:	2316      	movs	r3, #22
 801eaa0:	6003      	str	r3, [r0, #0]
 801eaa2:	f04f 30ff 	mov.w	r0, #4294967295
 801eaa6:	bd38      	pop	{r3, r4, r5, pc}
 801eaa8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801eaaa:	b112      	cbz	r2, 801eab2 <_raise_r+0x1e>
 801eaac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eab0:	b94b      	cbnz	r3, 801eac6 <_raise_r+0x32>
 801eab2:	4628      	mov	r0, r5
 801eab4:	f000 f852 	bl	801eb5c <_getpid_r>
 801eab8:	4622      	mov	r2, r4
 801eaba:	4601      	mov	r1, r0
 801eabc:	4628      	mov	r0, r5
 801eabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eac2:	f000 b839 	b.w	801eb38 <_kill_r>
 801eac6:	2b01      	cmp	r3, #1
 801eac8:	d00a      	beq.n	801eae0 <_raise_r+0x4c>
 801eaca:	1c59      	adds	r1, r3, #1
 801eacc:	d103      	bne.n	801ead6 <_raise_r+0x42>
 801eace:	2316      	movs	r3, #22
 801ead0:	6003      	str	r3, [r0, #0]
 801ead2:	2001      	movs	r0, #1
 801ead4:	e7e7      	b.n	801eaa6 <_raise_r+0x12>
 801ead6:	2100      	movs	r1, #0
 801ead8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801eadc:	4620      	mov	r0, r4
 801eade:	4798      	blx	r3
 801eae0:	2000      	movs	r0, #0
 801eae2:	e7e0      	b.n	801eaa6 <_raise_r+0x12>

0801eae4 <raise>:
 801eae4:	4b02      	ldr	r3, [pc, #8]	@ (801eaf0 <raise+0xc>)
 801eae6:	4601      	mov	r1, r0
 801eae8:	6818      	ldr	r0, [r3, #0]
 801eaea:	f7ff bfd3 	b.w	801ea94 <_raise_r>
 801eaee:	bf00      	nop
 801eaf0:	24000040 	.word	0x24000040

0801eaf4 <_fstat_r>:
 801eaf4:	b538      	push	{r3, r4, r5, lr}
 801eaf6:	4d07      	ldr	r5, [pc, #28]	@ (801eb14 <_fstat_r+0x20>)
 801eaf8:	2300      	movs	r3, #0
 801eafa:	4604      	mov	r4, r0
 801eafc:	4608      	mov	r0, r1
 801eafe:	4611      	mov	r1, r2
 801eb00:	602b      	str	r3, [r5, #0]
 801eb02:	f7e3 f807 	bl	8001b14 <_fstat>
 801eb06:	1c43      	adds	r3, r0, #1
 801eb08:	d102      	bne.n	801eb10 <_fstat_r+0x1c>
 801eb0a:	682b      	ldr	r3, [r5, #0]
 801eb0c:	b103      	cbz	r3, 801eb10 <_fstat_r+0x1c>
 801eb0e:	6023      	str	r3, [r4, #0]
 801eb10:	bd38      	pop	{r3, r4, r5, pc}
 801eb12:	bf00      	nop
 801eb14:	240170b0 	.word	0x240170b0

0801eb18 <_isatty_r>:
 801eb18:	b538      	push	{r3, r4, r5, lr}
 801eb1a:	4d06      	ldr	r5, [pc, #24]	@ (801eb34 <_isatty_r+0x1c>)
 801eb1c:	2300      	movs	r3, #0
 801eb1e:	4604      	mov	r4, r0
 801eb20:	4608      	mov	r0, r1
 801eb22:	602b      	str	r3, [r5, #0]
 801eb24:	f7e3 f806 	bl	8001b34 <_isatty>
 801eb28:	1c43      	adds	r3, r0, #1
 801eb2a:	d102      	bne.n	801eb32 <_isatty_r+0x1a>
 801eb2c:	682b      	ldr	r3, [r5, #0]
 801eb2e:	b103      	cbz	r3, 801eb32 <_isatty_r+0x1a>
 801eb30:	6023      	str	r3, [r4, #0]
 801eb32:	bd38      	pop	{r3, r4, r5, pc}
 801eb34:	240170b0 	.word	0x240170b0

0801eb38 <_kill_r>:
 801eb38:	b538      	push	{r3, r4, r5, lr}
 801eb3a:	4d07      	ldr	r5, [pc, #28]	@ (801eb58 <_kill_r+0x20>)
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	4604      	mov	r4, r0
 801eb40:	4608      	mov	r0, r1
 801eb42:	4611      	mov	r1, r2
 801eb44:	602b      	str	r3, [r5, #0]
 801eb46:	f7e2 ff83 	bl	8001a50 <_kill>
 801eb4a:	1c43      	adds	r3, r0, #1
 801eb4c:	d102      	bne.n	801eb54 <_kill_r+0x1c>
 801eb4e:	682b      	ldr	r3, [r5, #0]
 801eb50:	b103      	cbz	r3, 801eb54 <_kill_r+0x1c>
 801eb52:	6023      	str	r3, [r4, #0]
 801eb54:	bd38      	pop	{r3, r4, r5, pc}
 801eb56:	bf00      	nop
 801eb58:	240170b0 	.word	0x240170b0

0801eb5c <_getpid_r>:
 801eb5c:	f7e2 bf70 	b.w	8001a40 <_getpid>

0801eb60 <_init>:
 801eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb62:	bf00      	nop
 801eb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb66:	bc08      	pop	{r3}
 801eb68:	469e      	mov	lr, r3
 801eb6a:	4770      	bx	lr

0801eb6c <_fini>:
 801eb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb6e:	bf00      	nop
 801eb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb72:	bc08      	pop	{r3}
 801eb74:	469e      	mov	lr, r3
 801eb76:	4770      	bx	lr
