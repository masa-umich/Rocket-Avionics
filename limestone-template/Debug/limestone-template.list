
limestone-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012548  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000189c  08012818  08012818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080140b4  080140b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080140bc  080140bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080140c0  080140c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  080140c4  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  24000088  0801414c  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000df70  24004a0c  08018acf  0001aa0c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2401297c  08018acf  0001b97c  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  0001b000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001aa0b  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030e9a  00000000  00000000  0001aa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000712a  00000000  00000000  0004b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002320  00000000  00000000  00052a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b12  00000000  00000000  00054d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ee4  00000000  00000000  00056832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038235  00000000  00000000  00067716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00168efa  00000000  00000000  0009f94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00208845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ad4  00000000  00000000  00208888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0021235c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a0c 	.word	0x24004a0c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012800 	.word	0x08012800

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a10 	.word	0x24004a10
 800030c:	08012800 	.word	0x08012800

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f000 fc81 	bl	8000fac <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b45      	ldr	r3, [pc, #276]	@ (80007c0 <main+0x120>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b3f      	ldr	r3, [pc, #252]	@ (80007c0 <main+0x120>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <main+0x120>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a39      	ldr	r2, [pc, #228]	@ (80007c0 <main+0x120>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b33      	ldr	r3, [pc, #204]	@ (80007c0 <main+0x120>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d138      	bne.n	800076e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <main+0x120>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b2d      	ldr	r3, [pc, #180]	@ (80007c0 <main+0x120>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	4922      	ldr	r1, [pc, #136]	@ (80007c0 <main+0x120>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <main+0x120>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <main+0x120>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e000      	b.n	8000770 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f001 fafa 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f82c 	bl	80007d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SCB->VTOR = FLASH_BASE; // fuck this stupid bug kys
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <main+0x120>)
 800077a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800077e:	609a      	str	r2, [r3, #8]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 fb0c 	bl	8000d9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000784:	f000 f894 	bl	80008b0 <MX_I2C1_Init>
  MX_I2C5_Init();
 8000788:	f000 f8d0 	bl	800092c <MX_I2C5_Init>
  MX_SPI1_Init();
 800078c:	f000 f90c 	bl	80009a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000790:	f000 f960 	bl	8000a54 <MX_SPI2_Init>
  MX_SPI4_Init();
 8000794:	f000 f9b4 	bl	8000b00 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000798:	f000 fa08 	bl	8000bac <MX_SPI5_Init>
  MX_SPI6_Init();
 800079c:	f000 fa5c 	bl	8000c58 <MX_SPI6_Init>
  MX_USART10_UART_Init();
 80007a0:	f000 fab0 	bl	8000d04 <MX_USART10_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007a4:	f008 fb12 	bl	8008dcc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007a8:	4a06      	ldr	r2, [pc, #24]	@ (80007c4 <main+0x124>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <main+0x128>)
 80007ae:	f008 fb6c 	bl	8008e8a <osThreadNew>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <main+0x12c>)
 80007b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007b8:	f008 fb2c 	bl	8008e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <main+0x11c>
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	08013eac 	.word	0x08013eac
 80007c8:	08000f89 	.word	0x08000f89
 80007cc:	24004e0c 	.word	0x24004e0c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	@ 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	224c      	movs	r2, #76	@ 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f011 f913 	bl	8011a0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f011 f90d 	bl	8011a0a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f003 fc15 	bl	8004020 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <SystemClock_Config+0xdc>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000802:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <SystemClock_Config+0xdc>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000808:	6193      	str	r3, [r2, #24]
 800080a:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <SystemClock_Config+0xdc>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000816:	bf00      	nop
 8000818:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <SystemClock_Config+0xdc>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000824:	d1f8      	bne.n	8000818 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV8;
 800082a:	2319      	movs	r3, #25
 800082c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800082e:	2340      	movs	r3, #64	@ 0x40
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000836:	2300      	movs	r3, #0
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 800083e:	2360      	movs	r3, #96	@ 0x60
 8000840:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000846:	2303      	movs	r3, #3
 8000848:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800084e:	2304      	movs	r3, #4
 8000850:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000852:	2300      	movs	r3, #0
 8000854:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fc38 	bl	80040d4 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800086a:	f000 fbf1 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	@ 0x3f
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fff7 	bl	8004888 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008a0:	f000 fbd6 	bl	8001050 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3770      	adds	r7, #112	@ 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024800 	.word	0x58024800

080008b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <MX_I2C1_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008bc:	f640 6214 	movw	r2, #3604	@ 0xe14
 80008c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <MX_I2C1_Init+0x74>)
 80008ee:	f003 fa63 	bl	8003db8 <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f8:	f000 fbaa 	bl	8001050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4809      	ldr	r0, [pc, #36]	@ (8000924 <MX_I2C1_Init+0x74>)
 8000900:	f003 faf6 	bl	8003ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800090a:	f000 fba1 	bl	8001050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_I2C1_Init+0x74>)
 8000912:	f003 fb38 	bl	8003f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800091c:	f000 fb98 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	24004a28 	.word	0x24004a28
 8000928:	40005400 	.word	0x40005400

0800092c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C5_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000E14;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000938:	f640 6214 	movw	r2, #3604	@ 0xe14
 800093c:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 800093e:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000946:	2201      	movs	r2, #1
 8000948:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000956:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C5_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000968:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800096a:	f003 fa25 	bl	8003db8 <HAL_I2C_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C5_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 fb6c 	bl	8001050 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800097c:	f003 fab8 	bl	8003ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C5_Init+0x5e>
  {
    Error_Handler();
 8000986:	f000 fb63 	bl	8001050 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_I2C5_Init+0x74>)
 800098e:	f003 fafa 	bl	8003f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C5_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 fb5a 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24004a7c 	.word	0x24004a7c
 80009a4:	40006400 	.word	0x40006400

080009a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009ac:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009ae:	4a28      	ldr	r2, [pc, #160]	@ (8000a50 <MX_SPI1_Init+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b24      	ldr	r3, [pc, #144]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009c0:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009c2:	2203      	movs	r2, #3
 80009c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 80009fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_SPI1_Init+0xa4>)
 8000a38:	f006 f874 	bl	8006b24 <HAL_SPI_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a42:	f000 fb05 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24004ad0 	.word	0x24004ad0
 8000a50:	40013000 	.word	0x40013000

08000a54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a5a:	4a28      	ldr	r2, [pc, #160]	@ (8000afc <MX_SPI2_Init+0xa8>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a6e:	2203      	movs	r2, #3
 8000a70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_SPI2_Init+0xa4>)
 8000ae4:	f006 f81e 	bl	8006b24 <HAL_SPI_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000aee:	f000 faaf 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	24004b58 	.word	0x24004b58
 8000afc:	40003800 	.word	0x40003800

08000b00 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b06:	4a28      	ldr	r2, [pc, #160]	@ (8000ba8 <MX_SPI4_Init+0xa8>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b0c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b10:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b18:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b2c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000b30:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b56:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_SPI4_Init+0xa4>)
 8000b90:	f005 ffc8 	bl	8006b24 <HAL_SPI_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000b9a:	f000 fa59 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24004be0 	.word	0x24004be0
 8000ba8:	40013400 	.word	0x40013400

08000bac <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bb2:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <MX_SPI5_Init+0xa8>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b26      	ldr	r3, [pc, #152]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bd8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000bdc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c02:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_SPI5_Init+0xa4>)
 8000c3c:	f005 ff72 	bl	8006b24 <HAL_SPI_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000c46:	f000 fa03 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	24004c68 	.word	0x24004c68
 8000c54:	40015000 	.word	0x40015000

08000c58 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c5e:	4a28      	ldr	r2, [pc, #160]	@ (8000d00 <MX_SPI6_Init+0xa8>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c68:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6a:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c70:	4b22      	ldr	r3, [pc, #136]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c72:	2203      	movs	r2, #3
 8000c74:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c84:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c88:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000caa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_SPI6_Init+0xa4>)
 8000ce8:	f005 ff1c 	bl	8006b24 <HAL_SPI_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8000cf2:	f000 f9ad 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24004cf0 	.word	0x24004cf0
 8000d00:	58001400 	.word	0x58001400

08000d04 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8000d08:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d0a:	4a23      	ldr	r2, [pc, #140]	@ (8000d98 <MX_USART10_UART_Init+0x94>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d4c:	4811      	ldr	r0, [pc, #68]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d4e:	f006 f828 	bl	8006da2 <HAL_UART_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART10_UART_Init+0x58>
  {
    Error_Handler();
 8000d58:	f000 f97a 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d60:	f007 f935 	bl	8007fce <HAL_UARTEx_SetTxFifoThreshold>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART10_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6a:	f000 f971 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4808      	ldr	r0, [pc, #32]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d72:	f007 f96a 	bl	800804a <HAL_UARTEx_SetRxFifoThreshold>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART10_UART_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 f968 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_USART10_UART_Init+0x90>)
 8000d82:	f007 f8eb 	bl	8007f5c <HAL_UARTEx_DisableFifoMode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART10_UART_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f960 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24004d78 	.word	0x24004d78
 8000d98:	40011c00 	.word	0x40011c00

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	4b6f      	ldr	r3, [pc, #444]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	4a6d      	ldr	r2, [pc, #436]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd0:	4b67      	ldr	r3, [pc, #412]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	4a66      	ldr	r2, [pc, #408]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000dd8:	f043 0320 	orr.w	r3, r3, #32
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de0:	4b63      	ldr	r3, [pc, #396]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b60      	ldr	r3, [pc, #384]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	4a5e      	ldr	r2, [pc, #376]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b58      	ldr	r3, [pc, #352]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	4a57      	ldr	r2, [pc, #348]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1c:	4b54      	ldr	r3, [pc, #336]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b51      	ldr	r3, [pc, #324]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e30:	4a4f      	ldr	r2, [pc, #316]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b49      	ldr	r3, [pc, #292]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	4a48      	ldr	r2, [pc, #288]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e58:	4b45      	ldr	r3, [pc, #276]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b42      	ldr	r3, [pc, #264]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	4a40      	ldr	r2, [pc, #256]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e76:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <MX_GPIO_Init+0x1d4>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSRT_GPIO_Port, RF_NSRT_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2104      	movs	r1, #4
 8000e88:	483a      	ldr	r0, [pc, #232]	@ (8000f74 <MX_GPIO_Init+0x1d8>)
 8000e8a:	f002 ff61 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TC_CS1_Pin|TC_CS2_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000e94:	4838      	ldr	r0, [pc, #224]	@ (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e96:	f002 ff5b 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VLV_CTRL_GPIO_Port, VLV_CTRL_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea0:	4836      	ldr	r0, [pc, #216]	@ (8000f7c <MX_GPIO_Init+0x1e0>)
 8000ea2:	f002 ff55 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZ_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000eac:	4834      	ldr	r0, [pc, #208]	@ (8000f80 <MX_GPIO_Init+0x1e4>)
 8000eae:	f002 ff4f 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_BLUE_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	4833      	ldr	r0, [pc, #204]	@ (8000f84 <MX_GPIO_Init+0x1e8>)
 8000eb8:	f002 ff4a 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_SW_Pin */
  GPIO_InitStruct.Pin = MODE_SW_Pin;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_SW_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4829      	ldr	r0, [pc, #164]	@ (8000f74 <MX_GPIO_Init+0x1d8>)
 8000ed0:	f002 fd96 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSRT_Pin */
  GPIO_InitStruct.Pin = RF_NSRT_Pin;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RF_NSRT_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4822      	ldr	r0, [pc, #136]	@ (8000f74 <MX_GPIO_Init+0x1d8>)
 8000eec:	f002 fd88 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS1_Pin TC_CS2_Pin */
  GPIO_InitStruct.Pin = TC_CS1_Pin|TC_CS2_Pin;
 8000ef0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	481b      	ldr	r0, [pc, #108]	@ (8000f78 <MX_GPIO_Init+0x1dc>)
 8000f0a:	f002 fd79 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VLV_CTRL_Pin */
  GPIO_InitStruct.Pin = VLV_CTRL_Pin;
 8000f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(VLV_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4815      	ldr	r0, [pc, #84]	@ (8000f7c <MX_GPIO_Init+0x1e0>)
 8000f28:	f002 fd6a 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LED_RED_Pin;
 8000f2c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	480e      	ldr	r0, [pc, #56]	@ (8000f80 <MX_GPIO_Init+0x1e4>)
 8000f46:	f002 fd5b 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <MX_GPIO_Init+0x1e8>)
 8000f62:	f002 fd4d 	bl	8003a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	3730      	adds	r7, #48	@ 0x30
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020800 	.word	0x58020800
 8000f78:	58020c00 	.word	0x58020c00
 8000f7c:	58020000 	.word	0x58020000
 8000f80:	58020400 	.word	0x58020400
 8000f84:	58021000 	.word	0x58021000

08000f88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f90:	f007 f8e8 	bl	8008164 <MX_LWIP_Init>
  // Initialize and start the TCP server
  //tcpserver_init();
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000f94:	2101      	movs	r1, #1
 8000f96:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <StartDefaultTask+0x20>)
 8000f98:	f002 fef3 	bl	8003d82 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa0:	f008 f805 	bl	8008fae <osDelay>
	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000fa4:	bf00      	nop
 8000fa6:	e7f5      	b.n	8000f94 <StartDefaultTask+0xc>
 8000fa8:	58021000 	.word	0x58021000

08000fac <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fbe:	f001 f85d 	bl	800207c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00000000;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fce:	231f      	movs	r3, #31
 8000fd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fd2:	2387      	movs	r3, #135	@ 0x87
 8000fd4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 f87b 	bl	80020ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <MPU_Config+0xa0>)
 8000ffc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000ffe:	2310      	movs	r3, #16
 8001000:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001002:	2300      	movs	r3, #0
 8001004:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001006:	2301      	movs	r3, #1
 8001008:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800100a:	2303      	movs	r3, #3
 800100c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001012:	463b      	mov	r3, r7
 8001014:	4618      	mov	r0, r3
 8001016:	f001 f869 	bl	80020ec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800101a:	2302      	movs	r3, #2
 800101c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800101e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001022:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001024:	2308      	movs	r3, #8
 8001026:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001028:	2300      	movs	r3, #0
 800102a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800102c:	2301      	movs	r3, #1
 800102e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001034:	463b      	mov	r3, r7
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f858 	bl	80020ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800103c:	2004      	movs	r0, #4
 800103e:	f001 f835 	bl	80020ac <HAL_MPU_Enable>

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	30000200 	.word	0x30000200

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <Error_Handler+0x4>

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_MspInit+0x38>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_MspInit+0x38>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_MspInit+0x38>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	210f      	movs	r1, #15
 8001080:	f06f 0001 	mvn.w	r0, #1
 8001084:	f000 ffd3 	bl	800202e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58024400 	.word	0x58024400

08001094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0bc      	sub	sp, #240	@ 0xf0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	22b8      	movs	r2, #184	@ 0xb8
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f010 fca8 	bl	8011a0a <memset>
  if(hi2c->Instance==I2C1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a5f      	ldr	r2, [pc, #380]	@ (800123c <HAL_I2C_MspInit+0x1a8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d146      	bne.n	8001152 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c4:	f04f 0208 	mov.w	r2, #8
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 ff60 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010e6:	f7ff ffb3 	bl	8001050 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b55      	ldr	r3, [pc, #340]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	4a53      	ldr	r2, [pc, #332]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010fa:	4b51      	ldr	r3, [pc, #324]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001120:	2304      	movs	r3, #4
 8001122:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800112a:	4619      	mov	r1, r3
 800112c:	4845      	ldr	r0, [pc, #276]	@ (8001244 <HAL_I2C_MspInit+0x1b0>)
 800112e:	f002 fc67 	bl	8003a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001132:	4b43      	ldr	r3, [pc, #268]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001138:	4a41      	ldr	r2, [pc, #260]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 800113a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800113e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001142:	4b3f      	ldr	r3, [pc, #252]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 8001144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001150:	e070      	b.n	8001234 <HAL_I2C_MspInit+0x1a0>
  else if(hi2c->Instance==I2C5)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a3c      	ldr	r2, [pc, #240]	@ (8001248 <HAL_I2C_MspInit+0x1b4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d16b      	bne.n	8001234 <HAL_I2C_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 800115c:	f04f 0208 	mov.w	r2, #8
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	4618      	mov	r0, r3
 8001174:	f003 ff14 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800117e:	f7ff ff67 	bl	8001050 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001188:	4a2d      	ldr	r2, [pc, #180]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a26      	ldr	r2, [pc, #152]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 80011d8:	2306      	movs	r3, #6
 80011da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011e2:	4619      	mov	r1, r3
 80011e4:	4819      	ldr	r0, [pc, #100]	@ (800124c <HAL_I2C_MspInit+0x1b8>)
 80011e6:	f002 fc0b 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f2:	2312      	movs	r3, #18
 80011f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C5;
 8001204:	2306      	movs	r3, #6
 8001206:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800120e:	4619      	mov	r1, r3
 8001210:	480f      	ldr	r0, [pc, #60]	@ (8001250 <HAL_I2C_MspInit+0x1bc>)
 8001212:	f002 fbf5 	bl	8003a00 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 8001218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121c:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 800121e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001222:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_I2C_MspInit+0x1ac>)
 8001228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	37f0      	adds	r7, #240	@ 0xf0
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40005400 	.word	0x40005400
 8001240:	58024400 	.word	0x58024400
 8001244:	58020400 	.word	0x58020400
 8001248:	40006400 	.word	0x40006400
 800124c:	58020800 	.word	0x58020800
 8001250:	58020000 	.word	0x58020000

08001254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0c4      	sub	sp, #272	@ 0x110
 8001258:	af00      	add	r7, sp, #0
 800125a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800125e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001262:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001274:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001278:	22b8      	movs	r2, #184	@ 0xb8
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f010 fbc4 	bl	8011a0a <memset>
  if(hspi->Instance==SPI1)
 8001282:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001286:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4ac3      	ldr	r2, [pc, #780]	@ (800159c <HAL_SPI_MspInit+0x348>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d16b      	bne.n	800136c <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001294:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fe78 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 80012b6:	f7ff fecb 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ba:	4bb9      	ldr	r3, [pc, #740]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012c0:	4ab7      	ldr	r2, [pc, #732]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ca:	4bb5      	ldr	r3, [pc, #724]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	4bb1      	ldr	r3, [pc, #708]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012de:	4ab0      	ldr	r2, [pc, #704]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e8:	4bad      	ldr	r3, [pc, #692]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f6:	4baa      	ldr	r3, [pc, #680]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4aa8      	ldr	r2, [pc, #672]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80012fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4ba6      	ldr	r3, [pc, #664]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001310:	637b      	str	r3, [r7, #52]	@ 0x34
 8001312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132c:	2305      	movs	r3, #5
 800132e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001336:	4619      	mov	r1, r3
 8001338:	489a      	ldr	r0, [pc, #616]	@ (80015a4 <HAL_SPI_MspInit+0x350>)
 800133a:	f002 fb61 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800133e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001342:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001358:	2305      	movs	r3, #5
 800135a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800135e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001362:	4619      	mov	r1, r3
 8001364:	4890      	ldr	r0, [pc, #576]	@ (80015a8 <HAL_SPI_MspInit+0x354>)
 8001366:	f002 fb4b 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 800136a:	e1c7      	b.n	80016fc <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI2)
 800136c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001370:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a8c      	ldr	r2, [pc, #560]	@ (80015ac <HAL_SPI_MspInit+0x358>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d16b      	bne.n	8001456 <HAL_SPI_MspInit+0x202>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800137e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fe03 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_SPI_MspInit+0x150>
      Error_Handler();
 80013a0:	f7ff fe56 	bl	8001050 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013a4:	4b7e      	ldr	r3, [pc, #504]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013aa:	4a7d      	ldr	r2, [pc, #500]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b4:	4b7a      	ldr	r3, [pc, #488]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b77      	ldr	r3, [pc, #476]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	4a75      	ldr	r2, [pc, #468]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d2:	4b73      	ldr	r3, [pc, #460]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013fe:	2308      	movs	r3, #8
 8001400:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001416:	2305      	movs	r3, #5
 8001418:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001420:	4619      	mov	r1, r3
 8001422:	4863      	ldr	r0, [pc, #396]	@ (80015b0 <HAL_SPI_MspInit+0x35c>)
 8001424:	f002 faec 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001428:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800142c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001442:	2305      	movs	r3, #5
 8001444:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800144c:	4619      	mov	r1, r3
 800144e:	4859      	ldr	r0, [pc, #356]	@ (80015b4 <HAL_SPI_MspInit+0x360>)
 8001450:	f002 fad6 	bl	8003a00 <HAL_GPIO_Init>
}
 8001454:	e152      	b.n	80016fc <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI4)
 8001456:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800145a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a55      	ldr	r2, [pc, #340]	@ (80015b8 <HAL_SPI_MspInit+0x364>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d147      	bne.n	80014f8 <HAL_SPI_MspInit+0x2a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001468:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800147e:	4618      	mov	r0, r3
 8001480:	f003 fd8e 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 800148a:	f7ff fde1 	bl	8001050 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001494:	4a42      	ldr	r2, [pc, #264]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001496:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800149a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800149e:	4b40      	ldr	r3, [pc, #256]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80014a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ac:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b2:	4a3b      	ldr	r2, [pc, #236]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014bc:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 80014ca:	f44f 53c3 	mov.w	r3, #6240	@ 0x1860
 80014ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e4:	2305      	movs	r3, #5
 80014e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ea:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80014ee:	4619      	mov	r1, r3
 80014f0:	4832      	ldr	r0, [pc, #200]	@ (80015bc <HAL_SPI_MspInit+0x368>)
 80014f2:	f002 fa85 	bl	8003a00 <HAL_GPIO_Init>
}
 80014f6:	e101      	b.n	80016fc <HAL_SPI_MspInit+0x4a8>
  else if(hspi->Instance==SPI5)
 80014f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2e      	ldr	r2, [pc, #184]	@ (80015c0 <HAL_SPI_MspInit+0x36c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d15e      	bne.n	80015c8 <HAL_SPI_MspInit+0x374>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800150a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fd3d 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_SPI_MspInit+0x2dc>
      Error_Handler();
 800152c:	f7ff fd90 	bl	8001050 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001536:	4a1a      	ldr	r2, [pc, #104]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001538:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800153c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800154e:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001554:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001556:	f043 0320 	orr.w	r3, r3, #32
 800155a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_SPI_MspInit+0x34c>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800156c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001570:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001586:	2305      	movs	r3, #5
 8001588:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001590:	4619      	mov	r1, r3
 8001592:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <HAL_SPI_MspInit+0x370>)
 8001594:	f002 fa34 	bl	8003a00 <HAL_GPIO_Init>
}
 8001598:	e0b0      	b.n	80016fc <HAL_SPI_MspInit+0x4a8>
 800159a:	bf00      	nop
 800159c:	40013000 	.word	0x40013000
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58020c00 	.word	0x58020c00
 80015a8:	58021800 	.word	0x58021800
 80015ac:	40003800 	.word	0x40003800
 80015b0:	58020800 	.word	0x58020800
 80015b4:	58020400 	.word	0x58020400
 80015b8:	40013400 	.word	0x40013400
 80015bc:	58021000 	.word	0x58021000
 80015c0:	40015000 	.word	0x40015000
 80015c4:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 80015c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001708 <HAL_SPI_MspInit+0x4b4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	f040 8090 	bne.w	80016fc <HAL_SPI_MspInit+0x4a8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80015dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fcd4 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_SPI_MspInit+0x3ae>
      Error_Handler();
 80015fe:	f7ff fd27 	bl	8001050 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001602:	4b42      	ldr	r3, [pc, #264]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001608:	4a40      	ldr	r2, [pc, #256]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001612:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b3a      	ldr	r3, [pc, #232]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001626:	4a39      	ldr	r2, [pc, #228]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001630:	4b36      	ldr	r3, [pc, #216]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800163e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001648:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800164c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800164e:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001654:	4a2d      	ldr	r2, [pc, #180]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165e:	4b2b      	ldr	r3, [pc, #172]	@ (800170c <HAL_SPI_MspInit+0x4b8>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8001668:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800167a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167c:	2301      	movs	r3, #1
 800167e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001694:	2305      	movs	r3, #5
 8001696:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800169e:	4619      	mov	r1, r3
 80016a0:	481b      	ldr	r0, [pc, #108]	@ (8001710 <HAL_SPI_MspInit+0x4bc>)
 80016a2:	f002 f9ad 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80016a6:	2360      	movs	r3, #96	@ 0x60
 80016a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80016be:	2308      	movs	r3, #8
 80016c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016c8:	4619      	mov	r1, r3
 80016ca:	4811      	ldr	r0, [pc, #68]	@ (8001710 <HAL_SPI_MspInit+0x4bc>)
 80016cc:	f002 f998 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80016ea:	2305      	movs	r3, #5
 80016ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	@ (8001714 <HAL_SPI_MspInit+0x4c0>)
 80016f8:	f002 f982 	bl	8003a00 <HAL_GPIO_Init>
}
 80016fc:	bf00      	nop
 80016fe:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	58001400 	.word	0x58001400
 800170c:	58024400 	.word	0x58024400
 8001710:	58020000 	.word	0x58020000
 8001714:	58021800 	.word	0x58021800

08001718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0b8      	sub	sp, #224	@ 0xe0
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	22b8      	movs	r2, #184	@ 0xb8
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f010 f966 	bl	8011a0a <memset>
  if(huart->Instance==USART10)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a31      	ldr	r2, [pc, #196]	@ (8001808 <HAL_UART_MspInit+0xf0>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d15a      	bne.n	80017fe <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART10_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8001748:	f04f 0201 	mov.w	r2, #1
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fc1e 	bl	8004fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800176a:	f7ff fc71 	bl	8001050 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART10_CLK_ENABLE();
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <HAL_UART_MspInit+0xf4>)
 8001770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001774:	4a25      	ldr	r2, [pc, #148]	@ (800180c <HAL_UART_MspInit+0xf4>)
 8001776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800177a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_UART_MspInit+0xf4>)
 8001780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <HAL_UART_MspInit+0xf4>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	4a1e      	ldr	r2, [pc, #120]	@ (800180c <HAL_UART_MspInit+0xf4>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179c:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_UART_MspInit+0xf4>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    /**USART10 GPIO Configuration
    PE2     ------> USART10_RX
    PE3     ------> USART10_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017aa:	2304      	movs	r3, #4
 80017ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80017c2:	2304      	movs	r3, #4
 80017c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017cc:	4619      	mov	r1, r3
 80017ce:	4810      	ldr	r0, [pc, #64]	@ (8001810 <HAL_UART_MspInit+0xf8>)
 80017d0:	f002 f916 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d4:	2308      	movs	r3, #8
 80017d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_USART10;
 80017ec:	230b      	movs	r3, #11
 80017ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <HAL_UART_MspInit+0xf8>)
 80017fa:	f002 f901 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE END USART10_MspInit 1 */

  }

}
 80017fe:	bf00      	nop
 8001800:	37e0      	adds	r7, #224	@ 0xe0
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40011c00 	.word	0x40011c00
 800180c:	58024400 	.word	0x58024400
 8001810:	58021000 	.word	0x58021000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <NMI_Handler+0x4>

0800181c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <MemManage_Handler+0x4>

0800182c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <UsageFault_Handler+0x4>

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 fafd 	bl	8001e4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001852:	f009 ff6d 	bl	800b730 <xTaskGetSchedulerState>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d001      	beq.n	8001860 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800185c:	f00a fe64 	bl	800c528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <_kill+0x20>)
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	2401296c 	.word	0x2401296c

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe5 	bl	8001874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <_exit+0x12>

080018ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e00a      	b.n	80018d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018c0:	f3af 8000 	nop.w
 80018c4:	4601      	mov	r1, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	60ba      	str	r2, [r7, #8]
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbf0      	blt.n	80018c0 <_read+0x12>
  }

  return len;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e009      	b.n	800190e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	60ba      	str	r2, [r7, #8]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf1      	blt.n	80018fa <_write+0x12>
  }
  return len;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_close>:

int _close(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001948:	605a      	str	r2, [r3, #4]
  return 0;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_isatty>:

int _isatty(int file)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001960:	2301      	movs	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d205      	bcs.n	80019c4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <_sbrk+0x6c>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	24050000 	.word	0x24050000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	24004e10 	.word	0x24004e10
 80019f0:	24012980 	.word	0x24012980
 80019f4:	2401296c 	.word	0x2401296c

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019fe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae8 <SystemInit+0xf0>)
 8001a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a04:	4a38      	ldr	r2, [pc, #224]	@ (8001ae8 <SystemInit+0xf0>)
 8001a06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <SystemInit+0xf4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d807      	bhi.n	8001a2a <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a1a:	4b34      	ldr	r3, [pc, #208]	@ (8001aec <SystemInit+0xf4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 030f 	bic.w	r3, r3, #15
 8001a22:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <SystemInit+0xf4>)
 8001a24:	f043 0307 	orr.w	r3, r3, #7
 8001a28:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a2a:	4b31      	ldr	r3, [pc, #196]	@ (8001af0 <SystemInit+0xf8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a30      	ldr	r2, [pc, #192]	@ (8001af0 <SystemInit+0xf8>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a36:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <SystemInit+0xf8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <SystemInit+0xf8>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	492b      	ldr	r1, [pc, #172]	@ (8001af0 <SystemInit+0xf8>)
 8001a42:	4b2c      	ldr	r3, [pc, #176]	@ (8001af4 <SystemInit+0xfc>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a48:	4b28      	ldr	r3, [pc, #160]	@ (8001aec <SystemInit+0xf4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a54:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <SystemInit+0xf4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 030f 	bic.w	r3, r3, #15
 8001a5c:	4a23      	ldr	r2, [pc, #140]	@ (8001aec <SystemInit+0xf4>)
 8001a5e:	f043 0307 	orr.w	r3, r3, #7
 8001a62:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a64:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <SystemInit+0xf8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <SystemInit+0xf8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <SystemInit+0xf8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <SystemInit+0xf8>)
 8001a78:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <SystemInit+0x100>)
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <SystemInit+0xf8>)
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001afc <SystemInit+0x104>)
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a82:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <SystemInit+0xf8>)
 8001a84:	4a1e      	ldr	r2, [pc, #120]	@ (8001b00 <SystemInit+0x108>)
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a88:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <SystemInit+0xf8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <SystemInit+0xf8>)
 8001a90:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <SystemInit+0x108>)
 8001a92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <SystemInit+0xf8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <SystemInit+0xf8>)
 8001a9c:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <SystemInit+0x108>)
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <SystemInit+0xf8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <SystemInit+0xf8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a11      	ldr	r2, [pc, #68]	@ (8001af0 <SystemInit+0xf8>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <SystemInit+0xf8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <SystemInit+0xf8>)
 8001aba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001abe:	4a0c      	ldr	r2, [pc, #48]	@ (8001af0 <SystemInit+0xf8>)
 8001ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001ac4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <SystemInit+0xf8>)
 8001aca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001ace:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001ad0:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <SystemInit+0x10c>)
 8001ad4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ad8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00
 8001aec:	52002000 	.word	0x52002000
 8001af0:	58024400 	.word	0x58024400
 8001af4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001af8:	02020200 	.word	0x02020200
 8001afc:	01ff0000 	.word	0x01ff0000
 8001b00:	01010280 	.word	0x01010280
 8001b04:	52004000 	.word	0x52004000

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b0c:	f7ff ff74 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f010 f80d 	bl	8011b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7fe fdb1 	bl	80006a0 <main>
  bx  lr
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b48:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001b4c:	080140c4 	.word	0x080140c4
  ldr r2, =_sbss
 8001b50:	24004a0c 	.word	0x24004a0c
  ldr r4, =_ebss
 8001b54:	2401297c 	.word	0x2401297c

08001b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC3_IRQHandler>

08001b5a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <LAN8742_RegisterBusIO+0x28>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <LAN8742_RegisterBusIO+0x28>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <LAN8742_RegisterBusIO+0x28>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e014      	b.n	8001bb2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d139      	bne.n	8001c4e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2220      	movs	r2, #32
 8001bec:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e01c      	b.n	8001c2e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f107 020c 	add.w	r2, r7, #12
 8001bfc:	2112      	movs	r1, #18
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	4798      	blx	r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da03      	bge.n	8001c10 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001c08:	f06f 0304 	mvn.w	r3, #4
 8001c0c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001c0e:	e00b      	b.n	8001c28 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d105      	bne.n	8001c28 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
         break;
 8001c26:	e005      	b.n	8001c34 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b1f      	cmp	r3, #31
 8001c32:	d9df      	bls.n	8001bf4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b1f      	cmp	r3, #31
 8001c3a:	d902      	bls.n	8001c42 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c3c:	f06f 0302 	mvn.w	r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 }
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6810      	ldr	r0, [r2, #0]
 8001c6c:	f107 020c 	add.w	r2, r7, #12
 8001c70:	2101      	movs	r1, #1
 8001c72:	4798      	blx	r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da02      	bge.n	8001c80 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c7a:	f06f 0304 	mvn.w	r3, #4
 8001c7e:	e06e      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	f107 020c 	add.w	r2, r7, #12
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4798      	blx	r3
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	da02      	bge.n	8001c9c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001c96:	f06f 0304 	mvn.w	r3, #4
 8001c9a:	e060      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e059      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6810      	ldr	r0, [r2, #0]
 8001cb2:	f107 020c 	add.w	r2, r7, #12
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4798      	blx	r3
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	da02      	bge.n	8001cc6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cc0:	f06f 0304 	mvn.w	r3, #4
 8001cc4:	e04b      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11b      	bne.n	8001d08 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <LAN8742_GetLinkState+0x90>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e03a      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e033      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d00:	2304      	movs	r3, #4
 8001d02:	e02c      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d04:	2305      	movs	r3, #5
 8001d06:	e02a      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6810      	ldr	r0, [r2, #0]
 8001d10:	f107 020c 	add.w	r2, r7, #12
 8001d14:	211f      	movs	r1, #31
 8001d16:	4798      	blx	r3
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da02      	bge.n	8001d24 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d1e:	f06f 0304 	mvn.w	r3, #4
 8001d22:	e01c      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d2e:	2306      	movs	r3, #6
 8001d30:	e015      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 031c 	and.w	r3, r3, #28
 8001d38:	2b18      	cmp	r3, #24
 8001d3a:	d101      	bne.n	8001d40 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e00e      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 031c 	and.w	r3, r3, #28
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d101      	bne.n	8001d4e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e007      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f003 031c 	and.w	r3, r3, #28
 8001d54:	2b14      	cmp	r3, #20
 8001d56:	d101      	bne.n	8001d5c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e000      	b.n	8001d5e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d5c:	2305      	movs	r3, #5
    }
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
 8001d70:	f000 f952 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d74:	f002 ff3e 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_Init+0x68>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4913      	ldr	r1, [pc, #76]	@ (8001dd4 <HAL_Init+0x6c>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_Init+0x68>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd4 <HAL_Init+0x6c>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <HAL_Init+0x70>)
 8001daa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dac:	4a0b      	ldr	r2, [pc, #44]	@ (8001ddc <HAL_Init+0x74>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001db2:	200f      	movs	r0, #15
 8001db4:	f000 f814 	bl	8001de0 <HAL_InitTick>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e002      	b.n	8001dc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc2:	f7ff f949 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	08013ed0 	.word	0x08013ed0
 8001dd8:	24000004 	.word	0x24000004
 8001ddc:	24000000 	.word	0x24000000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_InitTick+0x60>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e021      	b.n	8001e38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_InitTick+0x64>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <HAL_InitTick+0x60>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f929 	bl	8002062 <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f901 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	@ (8001e48 <HAL_InitTick+0x68>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2400000c 	.word	0x2400000c
 8001e44:	24000000 	.word	0x24000000
 8001e48:	24000008 	.word	0x24000008

08001e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e50:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_IncTick+0x24>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2400000c 	.word	0x2400000c
 8001e70:	24004e14 	.word	0x24004e14

08001e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <HAL_GetTick+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	24004e14 	.word	0x24004e14

08001e8c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001e9c:	4904      	ldr	r1, [pc, #16]	@ (8001eb0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	58000400 	.word	0x58000400

08001eb4 <__NVIC_SetPriorityGrouping>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	05fa0000 	.word	0x05fa0000

08001efc <__NVIC_GetPriorityGrouping>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_SetPriority>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff47 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff5e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff90 	bl	8001f6c <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5f 	bl	8001f18 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffb2 	bl	8001fd4 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002080:	f3bf 8f5f 	dmb	sy
}
 8002084:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002086:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <HAL_MPU_Disable+0x28>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	4a06      	ldr	r2, [pc, #24]	@ (80020a4 <HAL_MPU_Disable+0x28>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002090:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002092:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <HAL_MPU_Disable+0x2c>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	e000ed90 	.word	0xe000ed90

080020ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020b4:	4a0b      	ldr	r2, [pc, #44]	@ (80020e4 <HAL_MPU_Enable+0x38>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_MPU_Enable+0x3c>)
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	4a09      	ldr	r2, [pc, #36]	@ (80020e8 <HAL_MPU_Enable+0x3c>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020ca:	f3bf 8f4f 	dsb	sy
}
 80020ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020d0:	f3bf 8f6f 	isb	sy
}
 80020d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed90 	.word	0xe000ed90
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	785a      	ldrb	r2, [r3, #1]
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_MPU_ConfigRegion+0x7c>)
 80020fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_MPU_ConfigRegion+0x7c>)
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_MPU_ConfigRegion+0x7c>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002108:	4a17      	ldr	r2, [pc, #92]	@ (8002168 <HAL_MPU_ConfigRegion+0x7c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7b1b      	ldrb	r3, [r3, #12]
 8002114:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7adb      	ldrb	r3, [r3, #11]
 800211a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800211c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	7a9b      	ldrb	r3, [r3, #10]
 8002122:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002124:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7b5b      	ldrb	r3, [r3, #13]
 800212a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800212c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7b9b      	ldrb	r3, [r3, #14]
 8002132:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002134:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7bdb      	ldrb	r3, [r3, #15]
 800213a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800213c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7a5b      	ldrb	r3, [r3, #9]
 8002142:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7a1b      	ldrb	r3, [r3, #8]
 800214a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800214c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002156:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002158:	6113      	str	r3, [r2, #16]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed90 	.word	0xe000ed90

0800216c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0e3      	b.n	8002346 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002184:	2b00      	cmp	r3, #0
 8002186:	d106      	bne.n	8002196 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2223      	movs	r2, #35	@ 0x23
 800218c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f006 fbbb 	bl	800890c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <HAL_ETH_Init+0x1e4>)
 8002198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800219c:	4a6c      	ldr	r2, [pc, #432]	@ (8002350 <HAL_ETH_Init+0x1e4>)
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_ETH_Init+0x1e4>)
 80021a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7a1b      	ldrb	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff fe65 	bl	8001e8c <HAL_SYSCFG_ETHInterfaceSelect>
 80021c2:	e003      	b.n	80021cc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80021c4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80021c8:	f7ff fe60 	bl	8001e8c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80021cc:	4b61      	ldr	r3, [pc, #388]	@ (8002354 <HAL_ETH_Init+0x1e8>)
 80021ce:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e8:	f7ff fe44 	bl	8001e74 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021ee:	e011      	b.n	8002214 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021f0:	f7ff fe40 	bl	8001e74 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80021fe:	d909      	bls.n	8002214 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	22e0      	movs	r2, #224	@ 0xe0
 800220c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e098      	b.n	8002346 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e4      	bne.n	80021f0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fe0a 	bl	8002e40 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800222c:	f002 fe5c 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8002230:	4603      	mov	r3, r0
 8002232:	4a49      	ldr	r2, [pc, #292]	@ (8002358 <HAL_ETH_Init+0x1ec>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	0c9a      	lsrs	r2, r3, #18
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3a01      	subs	r2, #1
 8002240:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fffb 	bl	8003240 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002252:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002256:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002262:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002266:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	22e0      	movs	r2, #224	@ 0xe0
 8002282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e05d      	b.n	8002346 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002292:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <HAL_ETH_Init+0x1f0>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6952      	ldr	r2, [r2, #20]
 800229e:	0051      	lsls	r1, r2, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022aa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f001 f863 	bl	800337a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 f8a9 	bl	800340c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	3305      	adds	r3, #5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	3303      	adds	r3, #3
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	061a      	lsls	r2, r3, #24
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	3302      	adds	r3, #2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	3301      	adds	r3, #1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80022f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002306:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002308:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_ETH_Init+0x1f4>)
 800231a:	430b      	orrs	r3, r1
 800231c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <HAL_ETH_Init+0x1f8>)
 800232e:	430b      	orrs	r3, r1
 8002330:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2210      	movs	r2, #16
 8002340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	58024400 	.word	0x58024400
 8002354:	58000400 	.word	0x58000400
 8002358:	431bde83 	.word	0x431bde83
 800235c:	ffff8001 	.word	0xffff8001
 8002360:	0c020060 	.word	0x0c020060
 8002364:	0c20c000 	.word	0x0c20c000

08002368 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002376:	2b10      	cmp	r3, #16
 8002378:	d165      	bne.n	8002446 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2223      	movs	r2, #35	@ 0x23
 800237e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2204      	movs	r2, #4
 800238c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9e4 	bl	800275c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800239c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023ac:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80023e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023e4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0202 	orr.w	r2, r2, #2
 800240a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002424:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002430:	430b      	orrs	r3, r1
 8002432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002436:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2223      	movs	r2, #35	@ 0x23
 800243e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245e:	2b23      	cmp	r3, #35	@ 0x23
 8002460:	d165      	bne.n	800252e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2223      	movs	r2, #35	@ 0x23
 8002466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002472:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_ETH_Stop_IT+0xec>)
 800247c:	400b      	ands	r3, r1
 800247e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002482:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800248e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800249e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0201 	bic.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0202 	bic.w	r2, r2, #2
 80024f0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	e00e      	b.n	8002516 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	3212      	adds	r2, #18
 80024fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002502:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3301      	adds	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d9ed      	bls.n	80024f8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2210      	movs	r2, #16
 8002526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	ffff2f3e 	.word	0xffff2f3e

08002540 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e03a      	b.n	80025da <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800256a:	2b23      	cmp	r3, #35	@ 0x23
 800256c:	d134      	bne.n	80025d8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002576:	2201      	movs	r2, #1
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 ffa4 	bl	80034c8 <ETH_Prepare_Tx_Descriptors>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258c:	f043 0202 	orr.w	r2, r3, #2
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e01f      	b.n	80025da <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800259a:	f3bf 8f4f 	dsb	sy
}
 800259e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d904      	bls.n	80025bc <HAL_ETH_Transmit_IT+0x7c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	1f1a      	subs	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3106      	adds	r1, #6
 80025c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025d0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b088      	sub	sp, #32
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0a2      	b.n	8002754 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002614:	2b23      	cmp	r3, #35	@ 0x23
 8002616:	d001      	beq.n	800261c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e09b      	b.n	8002754 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	3212      	adds	r2, #18
 8002628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002632:	f1c3 0304 	rsb	r3, r3, #4
 8002636:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002638:	e064      	b.n	8002704 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <HAL_ETH_ReadData+0x88>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d03a      	beq.n	80026e0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f006 fadc 	bl	8008c7c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3301      	adds	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d902      	bls.n	80026f2 <HAL_ETH_ReadData+0x110>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3b04      	subs	r3, #4
 80026f0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	3212      	adds	r2, #18
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002708:	2b00      	cmp	r3, #0
 800270a:	db06      	blt.n	800271a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d202      	bcs.n	800271a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d08f      	beq.n	800263a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f814 	bl	800275c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002768:	2301      	movs	r3, #1
 800276a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002770:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	3212      	adds	r2, #18
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002782:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002784:	e038      	b.n	80027f8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d112      	bne.n	80027b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800278e:	f107 0308 	add.w	r3, r7, #8
 8002792:	4618      	mov	r0, r3
 8002794:	f006 fa42 	bl	8008c1c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	74fb      	strb	r3, [r7, #19]
 80027a2:	e007      	b.n	80027b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	461a      	mov	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	461a      	mov	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01e      	beq.n	80027f8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e003      	b.n	80027d4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	3301      	adds	r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d902      	bls.n	80027e6 <ETH_UpdateDescriptor+0x8a>
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	3b04      	subs	r3, #4
 80027e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	3212      	adds	r2, #18
 80027ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f0:	617b      	str	r3, [r7, #20]
      desccount--;
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <ETH_UpdateDescriptor+0xa8>
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1c0      	bne.n	8002786 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	429a      	cmp	r2, r3
 800280c:	d01b      	beq.n	8002846 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002818:	f3bf 8f5f 	dmb	sy
}
 800281c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6919      	ldr	r1, [r3, #16]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	18ca      	adds	r2, r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002836:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002846:	bf00      	nop
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3318      	adds	r3, #24
 800285a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800286c:	e047      	b.n	80028fe <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800286e:	2301      	movs	r3, #1
 8002870:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3b01      	subs	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	3304      	adds	r3, #4
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	3301      	adds	r3, #1
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d902      	bls.n	800289a <HAL_ETH_ReleaseTxPacket+0x4c>
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3b04      	subs	r3, #4
 8002898:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800289e:	7bbb      	ldrb	r3, [r7, #14]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02c      	beq.n	80028fe <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68d9      	ldr	r1, [r3, #12]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db1f      	blt.n	80028fa <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3304      	adds	r3, #4
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 fa40 	bl	8008d4c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3304      	adds	r3, #4
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	3301      	adds	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d902      	bls.n	80028ec <HAL_ETH_ReleaseTxPacket+0x9e>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	3b04      	subs	r3, #4
 80028ea:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028f8:	e001      	b.n	80028fe <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_ETH_ReleaseTxPacket+0xbc>
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1b1      	bne.n	800286e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e03e      	b.n	80029b4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800293e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	055b      	lsls	r3, r3, #21
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f043 030c 	orr.w	r3, r3, #12
 8002962:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002976:	f7ff fa7d 	bl	8001e74 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800297c:	e009      	b.n	8002992 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800297e:	f7ff fa79 	bl	8001e74 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800298c:	d901      	bls.n	8002992 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e010      	b.n	80029b4 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e03c      	b.n	8002a58 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80029e6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	055b      	lsls	r3, r3, #21
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 030c 	bic.w	r3, r3, #12
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a1e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002a22:	4a0f      	ldr	r2, [pc, #60]	@ (8002a60 <HAL_ETH_WritePHYRegister+0xa4>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002a2a:	f7ff fa23 	bl	8001e74 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a30:	e009      	b.n	8002a46 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002a32:	f7ff fa1f 	bl	8001e74 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a40:	d901      	bls.n	8002a46 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e008      	b.n	8002a58 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ed      	bne.n	8002a32 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40028000 	.word	0x40028000

08002a64 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e1c3      	b.n	8002e00 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0e5b      	lsrs	r3, r3, #25
 8002cc2:	f003 021f 	and.w	r2, r3, #31
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 020f 	and.w	r2, r3, #15
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002d8c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002d9c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e00b      	b.n	8002e38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d105      	bne.n	8002e36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f865 	bl	8002efc <ETH_SetMACConfig>

    return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e5a:	f002 f845 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8002e5e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d804      	bhi.n	8002e72 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e022      	b.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a16      	ldr	r2, [pc, #88]	@ (8002ed0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d204      	bcs.n	8002e84 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e019      	b.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4a13      	ldr	r2, [pc, #76]	@ (8002ed4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d915      	bls.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ed8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d804      	bhi.n	8002e9e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e00c      	b.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8002edc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d804      	bhi.n	8002eb0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e003      	b.n	8002eb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	02160ebf 	.word	0x02160ebf
 8002ed0:	03938700 	.word	0x03938700
 8002ed4:	05f5e0ff 	.word	0x05f5e0ff
 8002ed8:	08f0d17f 	.word	0x08f0d17f
 8002edc:	0ee6b27f 	.word	0x0ee6b27f

08002ee0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002f0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	791b      	ldrb	r3, [r3, #4]
 8002f14:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002f16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
 8002f1c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002f1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	7b5b      	ldrb	r3, [r3, #13]
 8002f24:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	7b9b      	ldrb	r3, [r3, #14]
 8002f2c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	7bdb      	ldrb	r3, [r3, #15]
 8002f34:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	7c12      	ldrb	r2, [r2, #16]
 8002f3c:	2a00      	cmp	r2, #0
 8002f3e:	d102      	bne.n	8002f46 <ETH_SetMACConfig+0x4a>
 8002f40:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f44:	e000      	b.n	8002f48 <ETH_SetMACConfig+0x4c>
 8002f46:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	7c52      	ldrb	r2, [r2, #17]
 8002f4e:	2a00      	cmp	r2, #0
 8002f50:	d102      	bne.n	8002f58 <ETH_SetMACConfig+0x5c>
 8002f52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f56:	e000      	b.n	8002f5a <ETH_SetMACConfig+0x5e>
 8002f58:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	7c9b      	ldrb	r3, [r3, #18]
 8002f60:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f62:	431a      	orrs	r2, r3
               macconf->Speed |
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002f68:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002f6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7f1b      	ldrb	r3, [r3, #28]
 8002f74:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002f76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	7f5b      	ldrb	r3, [r3, #29]
 8002f7c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002f7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	7f92      	ldrb	r2, [r2, #30]
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d102      	bne.n	8002f8e <ETH_SetMACConfig+0x92>
 8002f88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8c:	e000      	b.n	8002f90 <ETH_SetMACConfig+0x94>
 8002f8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002f90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7fdb      	ldrb	r3, [r3, #31]
 8002f96:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002f98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002fa0:	2a00      	cmp	r2, #0
 8002fa2:	d102      	bne.n	8002faa <ETH_SetMACConfig+0xae>
 8002fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa8:	e000      	b.n	8002fac <ETH_SetMACConfig+0xb0>
 8002faa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002fac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002fb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002fbc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b56      	ldr	r3, [pc, #344]	@ (8003128 <ETH_SetMACConfig+0x22c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fe6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002fe8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ff0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ff2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ffa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ffc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003004:	2a00      	cmp	r2, #0
 8003006:	d102      	bne.n	800300e <ETH_SetMACConfig+0x112>
 8003008:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800300c:	e000      	b.n	8003010 <ETH_SetMACConfig+0x114>
 800300e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003010:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	4b42      	ldr	r3, [pc, #264]	@ (800312c <ETH_SetMACConfig+0x230>)
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	430b      	orrs	r3, r1
 800302c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003034:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b3a      	ldr	r3, [pc, #232]	@ (8003130 <ETH_SetMACConfig+0x234>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	430b      	orrs	r3, r1
 8003050:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003058:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800305e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003066:	2a00      	cmp	r2, #0
 8003068:	d101      	bne.n	800306e <ETH_SetMACConfig+0x172>
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	e000      	b.n	8003070 <ETH_SetMACConfig+0x174>
 800306e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003070:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003082:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003086:	4013      	ands	r3, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	430b      	orrs	r3, r1
 8003090:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003098:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80030a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f023 0103 	bic.w	r1, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80030c6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d101      	bne.n	80030ea <ETH_SetMACConfig+0x1ee>
 80030e6:	2240      	movs	r2, #64	@ 0x40
 80030e8:	e000      	b.n	80030ec <ETH_SetMACConfig+0x1f0>
 80030ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80030ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80030f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80030f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80030fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800310c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	430a      	orrs	r2, r1
 8003118:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	00048083 	.word	0x00048083
 800312c:	c0f88000 	.word	0xc0f88000
 8003130:	fffffef0 	.word	0xfffffef0

08003134 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b38      	ldr	r3, [pc, #224]	@ (800322c <ETH_SetDMAConfig+0xf8>)
 800314a:	4013      	ands	r3, r2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6811      	ldr	r1, [r2, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800315a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	791b      	ldrb	r3, [r3, #4]
 8003160:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003166:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	7b1b      	ldrb	r3, [r3, #12]
 800316c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <ETH_SetDMAConfig+0xfc>)
 800317e:	4013      	ands	r3, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	430b      	orrs	r3, r1
 8003188:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800318c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	7b5b      	ldrb	r3, [r3, #13]
 8003192:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80031a8:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <ETH_SetDMAConfig+0x100>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	430b      	orrs	r3, r1
 80031b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031b8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	7d1b      	ldrb	r3, [r3, #20]
 80031c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80031c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	7f5b      	ldrb	r3, [r3, #29]
 80031cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031da:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80031de:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <ETH_SetDMAConfig+0x104>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	68f9      	ldr	r1, [r7, #12]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031ee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	7f1b      	ldrb	r3, [r3, #28]
 80031f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003208:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <ETH_SetDMAConfig+0x108>)
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	430b      	orrs	r3, r1
 8003218:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800321c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	ffff87fd 	.word	0xffff87fd
 8003230:	ffff2ffe 	.word	0xffff2ffe
 8003234:	fffec000 	.word	0xfffec000
 8003238:	ffc0efef 	.word	0xffc0efef
 800323c:	7fc0ffff 	.word	0x7fc0ffff

08003240 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0a4      	sub	sp, #144	@ 0x90
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800324e:	2300      	movs	r3, #0
 8003250:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800327c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003280:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003288:	2300      	movs	r3, #0
 800328a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003292:	2300      	movs	r3, #0
 8003294:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003298:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800329c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80032a4:	2300      	movs	r3, #0
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80032ba:	2300      	movs	r3, #0
 80032bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80032c2:	2300      	movs	r3, #0
 80032c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80032d8:	2320      	movs	r3, #32
 80032da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80032ea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80032f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032f4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80032fc:	2302      	movs	r3, #2
 80032fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003314:	2301      	movs	r3, #1
 8003316:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800331a:	2300      	movs	r3, #0
 800331c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003328:	4619      	mov	r1, r3
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fde6 	bl	8002efc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003330:	2301      	movs	r3, #1
 8003332:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003342:	2300      	movs	r3, #0
 8003344:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800334a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800334e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003354:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003358:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003360:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fee1 	bl	8003134 <ETH_SetDMAConfig>
}
 8003372:	bf00      	nop
 8003374:	3790      	adds	r7, #144	@ 0x90
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e01d      	b.n	80033c4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68d9      	ldr	r1, [r3, #12]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	3206      	adds	r2, #6
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d9de      	bls.n	8003388 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d8:	461a      	mov	r2, r3
 80033da:	2303      	movs	r3, #3
 80033dc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033fc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e023      	b.n	8003462 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	3212      	adds	r2, #18
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d9d8      	bls.n	800341a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800348e:	461a      	mov	r2, r3
 8003490:	2303      	movs	r3, #3
 8003492:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b091      	sub	sp, #68	@ 0x44
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3318      	adds	r3, #24
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80034e6:	2300      	movs	r3, #0
 80034e8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800350a:	d007      	beq.n	800351c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003510:	3304      	adds	r3, #4
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	e266      	b.n	80039ee <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d044      	beq.n	80035b6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	4b75      	ldr	r3, [pc, #468]	@ (8003708 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003532:	4013      	ands	r3, r2
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003538:	431a      	orrs	r2, r3
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800353e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003558:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d027      	beq.n	80035b6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	b29a      	uxth	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	431a      	orrs	r2, r3
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	431a      	orrs	r2, r3
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80035a4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80035b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b51      	ldr	r3, [pc, #324]	@ (800370c <ETH_Prepare_Tx_Descriptors+0x244>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	6992      	ldr	r2, [r2, #24]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80035d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d036      	beq.n	8003666 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003602:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003604:	f3bf 8f5f 	dmb	sy
}
 8003608:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003618:	3301      	adds	r3, #1
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800361c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361e:	2b03      	cmp	r3, #3
 8003620:	d902      	bls.n	8003628 <ETH_Prepare_Tx_Descriptors+0x160>
 8003622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003624:	3b04      	subs	r3, #4
 8003626:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800362c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003630:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	3301      	adds	r3, #1
 8003636:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003644:	d10f      	bne.n	8003666 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003650:	f3bf 8f5f 	dmb	sy
}
 8003654:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e1c3      	b.n	80039ee <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003668:	3301      	adds	r3, #1
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4b24      	ldr	r3, [pc, #144]	@ (800370c <ETH_Prepare_Tx_Descriptors+0x244>)
 800367c:	4013      	ands	r3, r2
 800367e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003680:	6852      	ldr	r2, [r2, #4]
 8003682:	431a      	orrs	r2, r3
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <ETH_Prepare_Tx_Descriptors+0x248>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036aa:	6852      	ldr	r2, [r2, #4]
 80036ac:	0412      	lsls	r2, r2, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	e008      	b.n	80036c8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <ETH_Prepare_Tx_Descriptors+0x248>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d021      	beq.n	8003718 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	04db      	lsls	r3, r3, #19
 80036e2:	431a      	orrs	r2, r3
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80036e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	69d2      	ldr	r2, [r2, #28]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	e02e      	b.n	8003766 <ETH_Prepare_Tx_Descriptors+0x29e>
 8003708:	ffff0000 	.word	0xffff0000
 800370c:	ffffc000 	.word	0xffffc000
 8003710:	c000ffff 	.word	0xc000ffff
 8003714:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b7b      	ldr	r3, [pc, #492]	@ (800390c <ETH_Prepare_Tx_Descriptors+0x444>)
 800371e:	4013      	ands	r3, r2
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	431a      	orrs	r2, r3
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	431a      	orrs	r2, r3
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377e:	431a      	orrs	r2, r3
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800379c:	f3bf 8f5f 	dmb	sy
}
 80037a0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80da 	beq.w	8003970 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80037ce:	e0cf      	b.n	8003970 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80037d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037da:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037de:	3301      	adds	r3, #1
 80037e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d902      	bls.n	80037ee <ETH_Prepare_Tx_Descriptors+0x326>
 80037e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ea:	3b04      	subs	r3, #4
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003802:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800380c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003810:	d007      	beq.n	8003822 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003816:	3304      	adds	r3, #4
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d029      	beq.n	8003876 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800382a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003830:	2300      	movs	r3, #0
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003834:	e019      	b.n	800386a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003836:	f3bf 8f5f 	dmb	sy
}
 800383a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800384a:	3301      	adds	r3, #1
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800384e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003850:	2b03      	cmp	r3, #3
 8003852:	d902      	bls.n	800385a <ETH_Prepare_Tx_Descriptors+0x392>
 8003854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003856:	3b04      	subs	r3, #4
 8003858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800385e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003862:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003866:	3301      	adds	r3, #1
 8003868:	63bb      	str	r3, [r7, #56]	@ 0x38
 800386a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	429a      	cmp	r2, r3
 8003870:	d3e1      	bcc.n	8003836 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	e0bb      	b.n	80039ee <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	3301      	adds	r3, #1
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b1f      	ldr	r3, [pc, #124]	@ (8003910 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003892:	4013      	ands	r3, r2
 8003894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003896:	6852      	ldr	r2, [r2, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80038a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80038ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80038b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	4b16      	ldr	r3, [pc, #88]	@ (8003914 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c0:	6852      	ldr	r2, [r2, #4]
 80038c2:	0412      	lsls	r2, r2, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	e008      	b.n	80038de <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ce:	2200      	movs	r2, #0
 80038d0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80038d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003914 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80038d8:	4013      	ands	r3, r2
 80038da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038dc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <ETH_Prepare_Tx_Descriptors+0x450>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	69d2      	ldr	r2, [r2, #28]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e020      	b.n	800394c <ETH_Prepare_Tx_Descriptors+0x484>
 800390a:	bf00      	nop
 800390c:	ffff8000 	.word	0xffff8000
 8003910:	ffffc000 	.word	0xffffc000
 8003914:	c000ffff 	.word	0xc000ffff
 8003918:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800391c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <ETH_Prepare_Tx_Descriptors+0x534>)
 8003922:	4013      	ands	r3, r2
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	6852      	ldr	r2, [r2, #4]
 8003928:	431a      	orrs	r2, r3
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	3301      	adds	r3, #1
 8003950:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003952:	f3bf 8f5f 	dmb	sy
}
 8003956:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003962:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f47f af2b 	bne.w	80037d0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	e005      	b.n	800399a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800399a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80039a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ae:	3304      	adds	r3, #4
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
 80039c0:	613b      	str	r3, [r7, #16]
  return(result);
 80039c2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	4413      	add	r3, r2
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f383 8810 	msr	PRIMASK, r3
}
 80039ea:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3744      	adds	r7, #68	@ 0x44
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	ffff8000 	.word	0xffff8000

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a0e:	4b86      	ldr	r3, [pc, #536]	@ (8003c28 <HAL_GPIO_Init+0x228>)
 8003a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a12:	e18c      	b.n	8003d2e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	2101      	movs	r1, #1
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 817e 	beq.w	8003d28 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d005      	beq.n	8003a44 <HAL_GPIO_Init+0x44>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d130      	bne.n	8003aa6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f003 0201 	and.w	r2, r3, #1
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d017      	beq.n	8003ae2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	2203      	movs	r2, #3
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d123      	bne.n	8003b36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	08da      	lsrs	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3208      	adds	r2, #8
 8003af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	220f      	movs	r2, #15
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	69b9      	ldr	r1, [r7, #24]
 8003b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	2203      	movs	r2, #3
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 80d8 	beq.w	8003d28 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b78:	4b2c      	ldr	r3, [pc, #176]	@ (8003c2c <HAL_GPIO_Init+0x22c>)
 8003b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <HAL_GPIO_Init+0x22c>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_GPIO_Init+0x22c>)
 8003b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b96:	4a26      	ldr	r2, [pc, #152]	@ (8003c30 <HAL_GPIO_Init+0x230>)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	220f      	movs	r2, #15
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c34 <HAL_GPIO_Init+0x234>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <HAL_GPIO_Init+0x258>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c38 <HAL_GPIO_Init+0x238>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d02b      	beq.n	8003c22 <HAL_GPIO_Init+0x222>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c3c <HAL_GPIO_Init+0x23c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d025      	beq.n	8003c1e <HAL_GPIO_Init+0x21e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c40 <HAL_GPIO_Init+0x240>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01f      	beq.n	8003c1a <HAL_GPIO_Init+0x21a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a19      	ldr	r2, [pc, #100]	@ (8003c44 <HAL_GPIO_Init+0x244>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d019      	beq.n	8003c16 <HAL_GPIO_Init+0x216>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <HAL_GPIO_Init+0x248>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_GPIO_Init+0x212>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a17      	ldr	r2, [pc, #92]	@ (8003c4c <HAL_GPIO_Init+0x24c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00d      	beq.n	8003c0e <HAL_GPIO_Init+0x20e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <HAL_GPIO_Init+0x250>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <HAL_GPIO_Init+0x20a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <HAL_GPIO_Init+0x254>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_GPIO_Init+0x206>
 8003c02:	2309      	movs	r3, #9
 8003c04:	e029      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c06:	230a      	movs	r3, #10
 8003c08:	e027      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e025      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e023      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e021      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e01f      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e01d      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e01b      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e019      	b.n	8003c5a <HAL_GPIO_Init+0x25a>
 8003c26:	bf00      	nop
 8003c28:	58000080 	.word	0x58000080
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58000400 	.word	0x58000400
 8003c34:	58020000 	.word	0x58020000
 8003c38:	58020400 	.word	0x58020400
 8003c3c:	58020800 	.word	0x58020800
 8003c40:	58020c00 	.word	0x58020c00
 8003c44:	58021000 	.word	0x58021000
 8003c48:	58021400 	.word	0x58021400
 8003c4c:	58021800 	.word	0x58021800
 8003c50:	58021c00 	.word	0x58021c00
 8003c54:	58022400 	.word	0x58022400
 8003c58:	2300      	movs	r3, #0
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	f002 0203 	and.w	r2, r2, #3
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	4093      	lsls	r3, r2
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6a:	4938      	ldr	r1, [pc, #224]	@ (8003d4c <HAL_GPIO_Init+0x34c>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f ae6b 	bne.w	8003a14 <HAL_GPIO_Init+0x14>
  }
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	3724      	adds	r7, #36	@ 0x24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	58000400 	.word	0x58000400

08003d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d6c:	e003      	b.n	8003d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	041a      	lsls	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	619a      	str	r2, [r3, #24]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d94:	887a      	ldrh	r2, [r7, #2]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	041a      	lsls	r2, r3, #16
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	43d9      	mvns	r1, r3
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	400b      	ands	r3, r1
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	619a      	str	r2, [r3, #24]
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e08b      	b.n	8003ee2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd f958 	bl	8001094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	@ 0x24
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	e006      	b.n	8003e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d108      	bne.n	8003e5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	e007      	b.n	8003e6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <HAL_I2C_Init+0x134>)
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69d9      	ldr	r1, [r3, #28]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1a      	ldr	r2, [r3, #32]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	02008000 	.word	0x02008000

08003ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d138      	bne.n	8003f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e032      	b.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	@ 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d139      	bne.n	8004010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e033      	b.n	8004012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2224      	movs	r2, #36	@ 0x24
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004028:	4b29      	ldr	r3, [pc, #164]	@ (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	2b06      	cmp	r3, #6
 8004032:	d00a      	beq.n	800404a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004034:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e03f      	b.n	80040c6 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e03d      	b.n	80040c6 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800404a:	4b21      	ldr	r3, [pc, #132]	@ (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004052:	491f      	ldr	r1, [pc, #124]	@ (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800405a:	f7fd ff0b 	bl	8001e74 <HAL_GetTick>
 800405e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004060:	e009      	b.n	8004076 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004062:	f7fd ff07 	bl	8001e74 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004070:	d901      	bls.n	8004076 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e027      	b.n	80040c6 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004076:	4b16      	ldr	r3, [pc, #88]	@ (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004082:	d1ee      	bne.n	8004062 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b1e      	cmp	r3, #30
 8004088:	d008      	beq.n	800409c <HAL_PWREx_ConfigSupply+0x7c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b2e      	cmp	r3, #46	@ 0x2e
 800408e:	d005      	beq.n	800409c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b1d      	cmp	r3, #29
 8004094:	d002      	beq.n	800409c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b2d      	cmp	r3, #45	@ 0x2d
 800409a:	d113      	bne.n	80040c4 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800409c:	f7fd feea 	bl	8001e74 <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040a2:	e009      	b.n	80040b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040a4:	f7fd fee6 	bl	8001e74 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040b2:	d901      	bls.n	80040b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e006      	b.n	80040c6 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0311 	and.w	r3, r3, #17
 80040c0:	2b11      	cmp	r3, #17
 80040c2:	d1ef      	bne.n	80040a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	58024800 	.word	0x58024800

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08c      	sub	sp, #48	@ 0x30
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e3c8      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f4:	4b88      	ldr	r3, [pc, #544]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040fe:	4b86      	ldr	r3, [pc, #536]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004106:	2b10      	cmp	r3, #16
 8004108:	d007      	beq.n	800411a <HAL_RCC_OscConfig+0x46>
 800410a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800410c:	2b18      	cmp	r3, #24
 800410e:	d110      	bne.n	8004132 <HAL_RCC_OscConfig+0x5e>
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d10b      	bne.n	8004132 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411a:	4b7f      	ldr	r3, [pc, #508]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d06c      	beq.n	8004200 <HAL_RCC_OscConfig+0x12c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d168      	bne.n	8004200 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e3a2      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x76>
 800413c:	4b76      	ldr	r3, [pc, #472]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a75      	ldr	r2, [pc, #468]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e02e      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x98>
 8004152:	4b71      	ldr	r3, [pc, #452]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a70      	ldr	r2, [pc, #448]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b6e      	ldr	r3, [pc, #440]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a6d      	ldr	r2, [pc, #436]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01d      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0xbc>
 8004176:	4b68      	ldr	r3, [pc, #416]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a67      	ldr	r2, [pc, #412]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b65      	ldr	r3, [pc, #404]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a64      	ldr	r2, [pc, #400]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 8004190:	4b61      	ldr	r3, [pc, #388]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a60      	ldr	r2, [pc, #384]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b5e      	ldr	r3, [pc, #376]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd fe60 	bl	8001e74 <HAL_GetTick>
 80041b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fd fe5c 	bl	8001e74 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	@ 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e356      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041ca:	4b53      	ldr	r3, [pc, #332]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe4>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fd fe4c 	bl	8001e74 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fd fe48 	bl	8001e74 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	@ 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e342      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f2:	4b49      	ldr	r3, [pc, #292]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x10c>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 808c 	beq.w	8004328 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004210:	4b41      	ldr	r3, [pc, #260]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004218:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800421a:	4b3f      	ldr	r3, [pc, #252]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_RCC_OscConfig+0x162>
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	2b18      	cmp	r3, #24
 800422a:	d137      	bne.n	800429c <HAL_RCC_OscConfig+0x1c8>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d132      	bne.n	800429c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004236:	4b38      	ldr	r3, [pc, #224]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_RCC_OscConfig+0x17a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e314      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800424e:	4b32      	ldr	r3, [pc, #200]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 0219 	bic.w	r2, r3, #25
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	492f      	ldr	r1, [pc, #188]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fd fe08 	bl	8001e74 <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004268:	f7fd fe04 	bl	8001e74 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e2fe      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800427a:	4b27      	ldr	r3, [pc, #156]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004286:	4b24      	ldr	r3, [pc, #144]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	4920      	ldr	r1, [pc, #128]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 8004296:	4313      	orrs	r3, r2
 8004298:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429a:	e045      	b.n	8004328 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d026      	beq.n	80042f2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 0219 	bic.w	r2, r3, #25
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4919      	ldr	r1, [pc, #100]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd fddd 	bl	8001e74 <HAL_GetTick>
 80042ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042be:	f7fd fdd9 	bl	8001e74 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e2d3      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	490b      	ldr	r1, [pc, #44]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	e01a      	b.n	8004328 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f2:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a08      	ldr	r2, [pc, #32]	@ (8004318 <HAL_RCC_OscConfig+0x244>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd fdb9 	bl	8001e74 <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fdb5 	bl	8001e74 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d903      	bls.n	800431c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e2af      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
 8004318:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800431c:	4b96      	ldr	r3, [pc, #600]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ee      	bne.n	8004306 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d06a      	beq.n	800440a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004334:	4b90      	ldr	r3, [pc, #576]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800433c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800433e:	4b8e      	ldr	r3, [pc, #568]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b08      	cmp	r3, #8
 8004348:	d007      	beq.n	800435a <HAL_RCC_OscConfig+0x286>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b18      	cmp	r3, #24
 800434e:	d11b      	bne.n	8004388 <HAL_RCC_OscConfig+0x2b4>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d116      	bne.n	8004388 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800435a:	4b87      	ldr	r3, [pc, #540]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x29e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b80      	cmp	r3, #128	@ 0x80
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e282      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004372:	4b81      	ldr	r3, [pc, #516]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	497d      	ldr	r1, [pc, #500]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004386:	e040      	b.n	800440a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d023      	beq.n	80043d8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004390:	4b79      	ldr	r3, [pc, #484]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a78      	ldr	r2, [pc, #480]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd fd6a 	bl	8001e74 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043a4:	f7fd fd66 	bl	8001e74 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e260      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043b6:	4b70      	ldr	r3, [pc, #448]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	4969      	ldr	r1, [pc, #420]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60cb      	str	r3, [r1, #12]
 80043d6:	e018      	b.n	800440a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80043d8:	4b67      	ldr	r3, [pc, #412]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a66      	ldr	r2, [pc, #408]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80043de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fd46 	bl	8001e74 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043ec:	f7fd fd42 	bl	8001e74 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e23c      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80043fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d036      	beq.n	8004484 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d019      	beq.n	8004452 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441e:	4b56      	ldr	r3, [pc, #344]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004422:	4a55      	ldr	r2, [pc, #340]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442a:	f7fd fd23 	bl	8001e74 <HAL_GetTick>
 800442e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004432:	f7fd fd1f 	bl	8001e74 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e219      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004444:	4b4c      	ldr	r3, [pc, #304]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x35e>
 8004450:	e018      	b.n	8004484 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004452:	4b49      	ldr	r3, [pc, #292]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004456:	4a48      	ldr	r2, [pc, #288]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445e:	f7fd fd09 	bl	8001e74 <HAL_GetTick>
 8004462:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004466:	f7fd fd05 	bl	8001e74 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1ff      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004478:	4b3f      	ldr	r3, [pc, #252]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800447a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d036      	beq.n	80044fe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d019      	beq.n	80044cc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004498:	4b37      	ldr	r3, [pc, #220]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a36      	ldr	r2, [pc, #216]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800449e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044a4:	f7fd fce6 	bl	8001e74 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ac:	f7fd fce2 	bl	8001e74 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e1dc      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80044be:	4b2e      	ldr	r3, [pc, #184]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x3d8>
 80044ca:	e018      	b.n	80044fe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80044d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80044d8:	f7fd fccc 	bl	8001e74 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044e0:	f7fd fcc8 	bl	8001e74 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e1c2      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80044f2:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8086 	beq.w	8004618 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800450c:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_RCC_OscConfig+0x4a8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <HAL_RCC_OscConfig+0x4a8>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004518:	f7fd fcac 	bl	8001e74 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fd fca8 	bl	8001e74 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	@ 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e1a2      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_RCC_OscConfig+0x4a8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d106      	bne.n	8004554 <HAL_RCC_OscConfig+0x480>
 8004546:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a0b      	ldr	r2, [pc, #44]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70
 8004552:	e032      	b.n	80045ba <HAL_RCC_OscConfig+0x4e6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <HAL_RCC_OscConfig+0x4ac>
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004560:	4a05      	ldr	r2, [pc, #20]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	@ 0x70
 8004568:	4b03      	ldr	r3, [pc, #12]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456c:	4a02      	ldr	r2, [pc, #8]	@ (8004578 <HAL_RCC_OscConfig+0x4a4>)
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	@ 0x70
 8004574:	e021      	b.n	80045ba <HAL_RCC_OscConfig+0x4e6>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	58024800 	.word	0x58024800
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b05      	cmp	r3, #5
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4ce>
 8004588:	4b83      	ldr	r3, [pc, #524]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458c:	4a82      	ldr	r2, [pc, #520]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	6713      	str	r3, [r2, #112]	@ 0x70
 8004594:	4b80      	ldr	r3, [pc, #512]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	4a7f      	ldr	r2, [pc, #508]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a0:	e00b      	b.n	80045ba <HAL_RCC_OscConfig+0x4e6>
 80045a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	4a79      	ldr	r2, [pc, #484]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fd fc57 	bl	8001e74 <HAL_GetTick>
 80045c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fd fc53 	bl	8001e74 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e14b      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e0:	4b6d      	ldr	r3, [pc, #436]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ee      	beq.n	80045ca <HAL_RCC_OscConfig+0x4f6>
 80045ec:	e014      	b.n	8004618 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ee:	f7fd fc41 	bl	8001e74 <HAL_GetTick>
 80045f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045f4:	e00a      	b.n	800460c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fd fc3d 	bl	8001e74 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e135      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800460c:	4b62      	ldr	r3, [pc, #392]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ee      	bne.n	80045f6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 812a 	beq.w	8004876 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004622:	4b5d      	ldr	r3, [pc, #372]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800462a:	2b18      	cmp	r3, #24
 800462c:	f000 80ba 	beq.w	80047a4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	2b02      	cmp	r3, #2
 8004636:	f040 8095 	bne.w	8004764 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b57      	ldr	r3, [pc, #348]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a56      	ldr	r2, [pc, #344]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fc15 	bl	8001e74 <HAL_GetTick>
 800464a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd fc11 	bl	8001e74 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e10b      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004660:	4b4d      	ldr	r3, [pc, #308]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466c:	4b4a      	ldr	r3, [pc, #296]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800466e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004670:	4b4a      	ldr	r3, [pc, #296]	@ (800479c <HAL_RCC_OscConfig+0x6c8>)
 8004672:	4013      	ands	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	430a      	orrs	r2, r1
 8004680:	4945      	ldr	r1, [pc, #276]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	628b      	str	r3, [r1, #40]	@ 0x28
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	3b01      	subs	r3, #1
 800468c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004694:	3b01      	subs	r3, #1
 8004696:	025b      	lsls	r3, r3, #9
 8004698:	b29b      	uxth	r3, r3
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	3b01      	subs	r3, #1
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	3b01      	subs	r3, #1
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046b6:	4938      	ldr	r1, [pc, #224]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80046bc:	4b36      	ldr	r3, [pc, #216]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	4a35      	ldr	r2, [pc, #212]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80046c8:	4b33      	ldr	r3, [pc, #204]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046cc:	4b34      	ldr	r3, [pc, #208]	@ (80047a0 <HAL_RCC_OscConfig+0x6cc>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046d4:	00d2      	lsls	r2, r2, #3
 80046d6:	4930      	ldr	r1, [pc, #192]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80046dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	f023 020c 	bic.w	r2, r3, #12
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	492b      	ldr	r1, [pc, #172]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80046ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	f023 0202 	bic.w	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	4927      	ldr	r1, [pc, #156]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004700:	4b25      	ldr	r3, [pc, #148]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	4a24      	ldr	r2, [pc, #144]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800470c:	4b22      	ldr	r3, [pc, #136]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	4a21      	ldr	r2, [pc, #132]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004716:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004718:	4b1f      	ldr	r3, [pc, #124]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800471a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471c:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800471e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004724:	4b1c      	ldr	r3, [pc, #112]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fd fb9a 	bl	8001e74 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fd fb96 	bl	8001e74 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e090      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x670>
 8004762:	e088      	b.n	8004876 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004764:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0b      	ldr	r2, [pc, #44]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fd fb80 	bl	8001e74 <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004778:	f7fd fb7c 	bl	8001e74 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e076      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800478a:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <HAL_RCC_OscConfig+0x6c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x6a4>
 8004796:	e06e      	b.n	8004876 <HAL_RCC_OscConfig+0x7a2>
 8004798:	58024400 	.word	0x58024400
 800479c:	fffffc0c 	.word	0xfffffc0c
 80047a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80047a4:	4b36      	ldr	r3, [pc, #216]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047aa:	4b35      	ldr	r3, [pc, #212]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d031      	beq.n	800481c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0203 	and.w	r2, r3, #3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d12a      	bne.n	800481c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d122      	bne.n	800481c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d11a      	bne.n	800481c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d111      	bne.n	800481c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d108      	bne.n	800481c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	0e1b      	lsrs	r3, r3, #24
 800480e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e02b      	b.n	8004878 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004820:	4b17      	ldr	r3, [pc, #92]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 8004822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004824:	08db      	lsrs	r3, r3, #3
 8004826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800482a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	429a      	cmp	r2, r3
 8004834:	d01f      	beq.n	8004876 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004836:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	4a11      	ldr	r2, [pc, #68]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004842:	f7fd fb17 	bl	8001e74 <HAL_GetTick>
 8004846:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004848:	bf00      	nop
 800484a:	f7fd fb13 	bl	8001e74 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	4293      	cmp	r3, r2
 8004854:	d0f9      	beq.n	800484a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004856:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 8004858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800485a:	4b0a      	ldr	r3, [pc, #40]	@ (8004884 <HAL_RCC_OscConfig+0x7b0>)
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004862:	00d2      	lsls	r2, r2, #3
 8004864:	4906      	ldr	r1, [pc, #24]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 8004866:	4313      	orrs	r3, r2
 8004868:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800486a:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	4a04      	ldr	r2, [pc, #16]	@ (8004880 <HAL_RCC_OscConfig+0x7ac>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3730      	adds	r7, #48	@ 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	58024400 	.word	0x58024400
 8004884:	ffff0007 	.word	0xffff0007

08004888 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e19c      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b8a      	ldr	r3, [pc, #552]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d910      	bls.n	80048cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b87      	ldr	r3, [pc, #540]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 020f 	bic.w	r2, r3, #15
 80048b2:	4985      	ldr	r1, [pc, #532]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b83      	ldr	r3, [pc, #524]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e184      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	4b7b      	ldr	r3, [pc, #492]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d908      	bls.n	80048fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048e8:	4b78      	ldr	r3, [pc, #480]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4975      	ldr	r1, [pc, #468]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	4b70      	ldr	r3, [pc, #448]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004912:	429a      	cmp	r2, r3
 8004914:	d908      	bls.n	8004928 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004916:	4b6d      	ldr	r3, [pc, #436]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	496a      	ldr	r1, [pc, #424]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004924:	4313      	orrs	r3, r2
 8004926:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	4b64      	ldr	r3, [pc, #400]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004940:	429a      	cmp	r2, r3
 8004942:	d908      	bls.n	8004956 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004944:	4b61      	ldr	r3, [pc, #388]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	495e      	ldr	r1, [pc, #376]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004952:	4313      	orrs	r3, r2
 8004954:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	4b59      	ldr	r3, [pc, #356]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800496e:	429a      	cmp	r2, r3
 8004970:	d908      	bls.n	8004984 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004972:	4b56      	ldr	r3, [pc, #344]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4953      	ldr	r1, [pc, #332]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004980:	4313      	orrs	r3, r2
 8004982:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4b4d      	ldr	r3, [pc, #308]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	429a      	cmp	r2, r3
 800499e:	d908      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a0:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f023 020f 	bic.w	r2, r3, #15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4947      	ldr	r1, [pc, #284]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d055      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049be:	4b43      	ldr	r3, [pc, #268]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4940      	ldr	r1, [pc, #256]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d107      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d8:	4b3c      	ldr	r3, [pc, #240]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d121      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0f6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f0:	4b36      	ldr	r3, [pc, #216]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d115      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0ea      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d107      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a08:	4b30      	ldr	r3, [pc, #192]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d109      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0de      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a18:	4b2c      	ldr	r3, [pc, #176]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0304 	and.w	r3, r3, #4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0d6      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a28:	4b28      	ldr	r3, [pc, #160]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f023 0207 	bic.w	r2, r3, #7
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4925      	ldr	r1, [pc, #148]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3a:	f7fd fa1b 	bl	8001e74 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a42:	f7fd fa17 	bl	8001e74 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0be      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a58:	4b1c      	ldr	r3, [pc, #112]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d1eb      	bne.n	8004a42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d010      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d208      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a86:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f023 020f 	bic.w	r2, r3, #15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	490e      	ldr	r1, [pc, #56]	@ (8004acc <HAL_RCC_ClockConfig+0x244>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d214      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f023 020f 	bic.w	r2, r3, #15
 8004aae:	4906      	ldr	r1, [pc, #24]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <HAL_RCC_ClockConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 030f 	and.w	r3, r3, #15
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e086      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x34e>
 8004ac8:	52002000 	.word	0x52002000
 8004acc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d208      	bcs.n	8004afe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004aec:	4b3c      	ldr	r3, [pc, #240]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	4939      	ldr	r1, [pc, #228]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	4b34      	ldr	r3, [pc, #208]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d208      	bcs.n	8004b2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b1a:	4b31      	ldr	r3, [pc, #196]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	492e      	ldr	r1, [pc, #184]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699a      	ldr	r2, [r3, #24]
 8004b3c:	4b28      	ldr	r3, [pc, #160]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d208      	bcs.n	8004b5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b48:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	4922      	ldr	r1, [pc, #136]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d208      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b76:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	4917      	ldr	r1, [pc, #92]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004b88:	f000 f834 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b14      	ldr	r3, [pc, #80]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	4912      	ldr	r1, [pc, #72]	@ (8004be4 <HAL_RCC_ClockConfig+0x35c>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8004be0 <HAL_RCC_ClockConfig+0x358>)
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	4a0d      	ldr	r2, [pc, #52]	@ (8004be4 <HAL_RCC_ClockConfig+0x35c>)
 8004bb0:	5cd3      	ldrb	r3, [r2, r3]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004be8 <HAL_RCC_ClockConfig+0x360>)
 8004bbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bec <HAL_RCC_ClockConfig+0x364>)
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <HAL_RCC_ClockConfig+0x368>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fd f908 	bl	8001de0 <HAL_InitTick>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	08013ed0 	.word	0x08013ed0
 8004be8:	24000004 	.word	0x24000004
 8004bec:	24000000 	.word	0x24000000
 8004bf0:	24000008 	.word	0x24000008

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	@ 0x24
 8004bf8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfa:	4bb3      	ldr	r3, [pc, #716]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c02:	2b18      	cmp	r3, #24
 8004c04:	f200 8155 	bhi.w	8004eb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c08:	a201      	add	r2, pc, #4	@ (adr r2, 8004c10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c75 	.word	0x08004c75
 8004c14:	08004eb3 	.word	0x08004eb3
 8004c18:	08004eb3 	.word	0x08004eb3
 8004c1c:	08004eb3 	.word	0x08004eb3
 8004c20:	08004eb3 	.word	0x08004eb3
 8004c24:	08004eb3 	.word	0x08004eb3
 8004c28:	08004eb3 	.word	0x08004eb3
 8004c2c:	08004eb3 	.word	0x08004eb3
 8004c30:	08004c9b 	.word	0x08004c9b
 8004c34:	08004eb3 	.word	0x08004eb3
 8004c38:	08004eb3 	.word	0x08004eb3
 8004c3c:	08004eb3 	.word	0x08004eb3
 8004c40:	08004eb3 	.word	0x08004eb3
 8004c44:	08004eb3 	.word	0x08004eb3
 8004c48:	08004eb3 	.word	0x08004eb3
 8004c4c:	08004eb3 	.word	0x08004eb3
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004eb3 	.word	0x08004eb3
 8004c58:	08004eb3 	.word	0x08004eb3
 8004c5c:	08004eb3 	.word	0x08004eb3
 8004c60:	08004eb3 	.word	0x08004eb3
 8004c64:	08004eb3 	.word	0x08004eb3
 8004c68:	08004eb3 	.word	0x08004eb3
 8004c6c:	08004eb3 	.word	0x08004eb3
 8004c70:	08004ca7 	.word	0x08004ca7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c74:	4b94      	ldr	r3, [pc, #592]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c80:	4b91      	ldr	r3, [pc, #580]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a90      	ldr	r2, [pc, #576]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004c92:	e111      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c94:	4b8d      	ldr	r3, [pc, #564]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c96:	61bb      	str	r3, [r7, #24]
      break;
 8004c98:	e10e      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c9c:	61bb      	str	r3, [r7, #24]
      break;
 8004c9e:	e10b      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ed4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ca2:	61bb      	str	r3, [r7, #24]
      break;
 8004ca4:	e108      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ca6:	4b88      	ldr	r3, [pc, #544]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004cb0:	4b85      	ldr	r3, [pc, #532]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cbc:	4b82      	ldr	r3, [pc, #520]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004cc6:	4b80      	ldr	r3, [pc, #512]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80e1 	beq.w	8004eac <HAL_RCC_GetSysClockFreq+0x2b8>
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f000 8083 	beq.w	8004df8 <HAL_RCC_GetSysClockFreq+0x204>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	f200 80a1 	bhi.w	8004e3c <HAL_RCC_GetSysClockFreq+0x248>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x114>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d056      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d06:	e099      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d08:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02d      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d14:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	08db      	lsrs	r3, r3, #3
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	4a6b      	ldr	r2, [pc, #428]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	ee07 3a90 	vmov	s15, r3
 8004d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b62      	ldr	r3, [pc, #392]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004d6e:	e087      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004edc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d82:	4b51      	ldr	r3, [pc, #324]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004db2:	e065      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dda:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004df6:	e043      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004ee4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e3a:	e021      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004ee0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004ed8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004e80:	4b11      	ldr	r3, [pc, #68]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	0a5b      	lsrs	r3, r3, #9
 8004e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea4:	ee17 3a90 	vmov	r3, s15
 8004ea8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61bb      	str	r3, [r7, #24]
      break;
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004eb2:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004eb4:	61bb      	str	r3, [r7, #24]
      break;
 8004eb6:	bf00      	nop
  }

  return sysclockfreq;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	@ 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	58024400 	.word	0x58024400
 8004ecc:	03d09000 	.word	0x03d09000
 8004ed0:	003d0900 	.word	0x003d0900
 8004ed4:	02dc6c00 	.word	0x02dc6c00
 8004ed8:	46000000 	.word	0x46000000
 8004edc:	4c742400 	.word	0x4c742400
 8004ee0:	4a742400 	.word	0x4a742400
 8004ee4:	4c371b00 	.word	0x4c371b00

08004ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004eee:	f7ff fe81 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	490f      	ldr	r1, [pc, #60]	@ (8004f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f00:	5ccb      	ldrb	r3, [r1, r3]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	4a09      	ldr	r2, [pc, #36]	@ (8004f3c <HAL_RCC_GetHCLKFreq+0x54>)
 8004f16:	5cd3      	ldrb	r3, [r2, r3]
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f22:	4a07      	ldr	r2, [pc, #28]	@ (8004f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f26:	4a07      	ldr	r2, [pc, #28]	@ (8004f44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	08013ed0 	.word	0x08013ed0
 8004f40:	24000004 	.word	0x24000004
 8004f44:	24000000 	.word	0x24000000

08004f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f4c:	f7ff ffcc 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b06      	ldr	r3, [pc, #24]	@ (8004f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4904      	ldr	r1, [pc, #16]	@ (8004f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	58024400 	.word	0x58024400
 8004f70:	08013ed0 	.word	0x08013ed0

08004f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f78:	f7ff ffb6 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	0a1b      	lsrs	r3, r3, #8
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	4904      	ldr	r1, [pc, #16]	@ (8004f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f8a:	5ccb      	ldrb	r3, [r1, r3]
 8004f8c:	f003 031f 	and.w	r3, r3, #31
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	08013ed0 	.word	0x08013ed0

08004fa0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa4:	b0c6      	sub	sp, #280	@ 0x118
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004fc4:	2500      	movs	r5, #0
 8004fc6:	ea54 0305 	orrs.w	r3, r4, r5
 8004fca:	d049      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fd6:	d02f      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004fd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fdc:	d828      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fe2:	d01a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fe4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fe8:	d822      	bhi.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff2:	d007      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ff4:	e01c      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff6:	4bab      	ldr	r3, [pc, #684]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	4aaa      	ldr	r2, [pc, #680]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005000:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005002:	e01a      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005008:	3308      	adds	r3, #8
 800500a:	2102      	movs	r1, #2
 800500c:	4618      	mov	r0, r3
 800500e:	f001 fc25 	bl	800685c <RCCEx_PLL2_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005018:	e00f      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501e:	3328      	adds	r3, #40	@ 0x28
 8005020:	2102      	movs	r1, #2
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fccc 	bl	80069c0 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800502e:	e004      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800503a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005042:	4b98      	ldr	r3, [pc, #608]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005046:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005050:	4a94      	ldr	r2, [pc, #592]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005052:	430b      	orrs	r3, r1
 8005054:	6513      	str	r3, [r2, #80]	@ 0x50
 8005056:	e003      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800505c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800506c:	f04f 0900 	mov.w	r9, #0
 8005070:	ea58 0309 	orrs.w	r3, r8, r9
 8005074:	d047      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507c:	2b04      	cmp	r3, #4
 800507e:	d82a      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005080:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	0800509d 	.word	0x0800509d
 800508c:	080050ab 	.word	0x080050ab
 8005090:	080050c1 	.word	0x080050c1
 8005094:	080050df 	.word	0x080050df
 8005098:	080050df 	.word	0x080050df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b81      	ldr	r3, [pc, #516]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	4a80      	ldr	r2, [pc, #512]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050a8:	e01a      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ae:	3308      	adds	r3, #8
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 fbd2 	bl	800685c <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050be:	e00f      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c4:	3328      	adds	r3, #40	@ 0x28
 80050c6:	2100      	movs	r1, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 fc79 	bl	80069c0 <RCCEx_PLL3_Config>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80050d4:	e004      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050dc:	e000      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80050de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050e8:	4b6e      	ldr	r3, [pc, #440]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ec:	f023 0107 	bic.w	r1, r3, #7
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f6:	4a6b      	ldr	r2, [pc, #428]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005102:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005112:	f04f 0b00 	mov.w	fp, #0
 8005116:	ea5a 030b 	orrs.w	r3, sl, fp
 800511a:	d05b      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800511c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005124:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005128:	d03b      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800512a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800512e:	d834      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005130:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005134:	d037      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800513a:	d82e      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800513c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005140:	d033      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005142:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005146:	d828      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800514c:	d01a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800514e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005152:	d822      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800515c:	d007      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800515e:	e01c      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4b50      	ldr	r3, [pc, #320]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4a4f      	ldr	r2, [pc, #316]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516c:	e01e      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005172:	3308      	adds	r3, #8
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f001 fb70 	bl	800685c <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005182:	e013      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	3328      	adds	r3, #40	@ 0x28
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fc17 	bl	80069c0 <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005198:	e008      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051a0:	e004      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80051a2:	bf00      	nop
 80051a4:	e002      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80051aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051b4:	4b3b      	ldr	r3, [pc, #236]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80051c4:	4a37      	ldr	r2, [pc, #220]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80051c6:	430b      	orrs	r3, r1
 80051c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80051ca:	e003      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80051e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051e4:	2300      	movs	r3, #0
 80051e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80051ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d05d      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80051fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005200:	d03b      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005202:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005206:	d834      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800520c:	d037      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800520e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005212:	d82e      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005214:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005218:	d033      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800521a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800521e:	d828      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005224:	d01a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800522a:	d822      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005234:	d007      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005236:	e01c      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005238:	4b1a      	ldr	r3, [pc, #104]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	4a19      	ldr	r2, [pc, #100]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800523e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005244:	e01e      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524a:	3308      	adds	r3, #8
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f001 fb04 	bl	800685c <RCCEx_PLL2_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800525a:	e013      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	3328      	adds	r3, #40	@ 0x28
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f001 fbab 	bl	80069c0 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005270:	e008      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005278:	e004      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800527a:	bf00      	nop
 800527c:	e002      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800527e:	bf00      	nop
 8005280:	e000      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005298:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800529c:	4a01      	ldr	r2, [pc, #4]	@ (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800529e:	430b      	orrs	r3, r1
 80052a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a2:	e005      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80052a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80052bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80052c6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d03a      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	2b30      	cmp	r3, #48	@ 0x30
 80052d8:	d01f      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80052da:	2b30      	cmp	r3, #48	@ 0x30
 80052dc:	d819      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d00c      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d815      	bhi.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d019      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d111      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ee:	4baa      	ldr	r3, [pc, #680]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4aa9      	ldr	r2, [pc, #676]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80052fa:	e011      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005300:	3308      	adds	r3, #8
 8005302:	2102      	movs	r1, #2
 8005304:	4618      	mov	r0, r3
 8005306:	f001 faa9 	bl	800685c <RCCEx_PLL2_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800531e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005320:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005328:	4b9b      	ldr	r3, [pc, #620]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800532a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800532c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005336:	4a98      	ldr	r2, [pc, #608]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005338:	430b      	orrs	r3, r1
 800533a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800533c:	e003      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005342:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005356:	2300      	movs	r3, #0
 8005358:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800535c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005360:	460b      	mov	r3, r1
 8005362:	4313      	orrs	r3, r2
 8005364:	d051      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005370:	d035      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005376:	d82e      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800537c:	d031      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800537e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005382:	d828      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005388:	d01a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800538a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800538e:	d822      	bhi.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005398:	d007      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800539a:	e01c      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539c:	4b7e      	ldr	r3, [pc, #504]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4a7d      	ldr	r2, [pc, #500]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053a8:	e01c      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	3308      	adds	r3, #8
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 fa52 	bl	800685c <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053be:	e011      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c4:	3328      	adds	r3, #40	@ 0x28
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 faf9 	bl	80069c0 <RCCEx_PLL3_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80053d4:	e006      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80053e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	4a67      	ldr	r2, [pc, #412]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005400:	e003      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005402:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005406:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005416:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005420:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005424:	460b      	mov	r3, r1
 8005426:	4313      	orrs	r3, r2
 8005428:	d053      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800542a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005434:	d033      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005436:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800543a:	d82c      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800543c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005440:	d02f      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005446:	d826      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005448:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800544c:	d02b      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800544e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005452:	d820      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005458:	d012      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800545a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800545e:	d81a      	bhi.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d022      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005468:	d115      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	3308      	adds	r3, #8
 8005470:	2101      	movs	r1, #1
 8005472:	4618      	mov	r0, r3
 8005474:	f001 f9f2 	bl	800685c <RCCEx_PLL2_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800547e:	e015      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005484:	3328      	adds	r3, #40	@ 0x28
 8005486:	2101      	movs	r1, #1
 8005488:	4618      	mov	r0, r3
 800548a:	f001 fa99 	bl	80069c0 <RCCEx_PLL3_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005494:	e00a      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800549e:	bf00      	nop
 80054a0:	e004      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054a2:	bf00      	nop
 80054a4:	e002      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054a6:	bf00      	nop
 80054a8:	e000      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80054aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10a      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054b4:	4b38      	ldr	r3, [pc, #224]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	4a35      	ldr	r2, [pc, #212]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80054de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054e2:	2300      	movs	r3, #0
 80054e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80054e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054ec:	460b      	mov	r3, r1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	d058      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80054f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054fe:	d033      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005504:	d82c      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d02f      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d826      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005516:	d02b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800551c:	d820      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800551e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005522:	d012      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005528:	d81a      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d022      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005532:	d115      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005538:	3308      	adds	r3, #8
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f98d 	bl	800685c <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005548:	e015      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800554a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fa34 	bl	80069c0 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800555e:	e00a      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005566:	e006      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005568:	bf00      	nop
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10e      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800558e:	4a02      	ldr	r2, [pc, #8]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005590:	430b      	orrs	r3, r1
 8005592:	6593      	str	r3, [r2, #88]	@ 0x58
 8005594:	e006      	b.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005596:	bf00      	nop
 8005598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80055b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80055ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80055be:	460b      	mov	r3, r1
 80055c0:	4313      	orrs	r3, r2
 80055c2:	d037      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ce:	d00e      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80055d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055d4:	d816      	bhi.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80055da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055de:	d111      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055e0:	4bc4      	ldr	r3, [pc, #784]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	4ac3      	ldr	r2, [pc, #780]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80055ec:	e00f      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f2:	3308      	adds	r3, #8
 80055f4:	2101      	movs	r1, #1
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f930 	bl	800685c <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800560a:	e000      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005616:	4bb7      	ldr	r3, [pc, #732]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005624:	4ab3      	ldr	r2, [pc, #716]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005626:	430b      	orrs	r3, r1
 8005628:	6513      	str	r3, [r2, #80]	@ 0x50
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800564a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d039      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800565a:	2b03      	cmp	r3, #3
 800565c:	d81c      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800565e:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	080056a1 	.word	0x080056a1
 8005668:	08005675 	.word	0x08005675
 800566c:	08005683 	.word	0x08005683
 8005670:	080056a1 	.word	0x080056a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005674:	4b9f      	ldr	r3, [pc, #636]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	4a9e      	ldr	r2, [pc, #632]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800567a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800567e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005680:	e00f      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005686:	3308      	adds	r3, #8
 8005688:	2102      	movs	r1, #2
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f8e6 	bl	800685c <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005696:	e004      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800569e:	e000      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80056a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056aa:	4b92      	ldr	r3, [pc, #584]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	f023 0103 	bic.w	r1, r3, #3
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b8:	4a8e      	ldr	r2, [pc, #568]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80056d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f000 8099 	beq.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ea:	4b83      	ldr	r3, [pc, #524]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a82      	ldr	r2, [pc, #520]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80056f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056f6:	f7fc fbbd 	bl	8001e74 <HAL_GetTick>
 80056fa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056fe:	e00b      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fc fbb8 	bl	8001e74 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b64      	cmp	r3, #100	@ 0x64
 800570e:	d903      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005716:	e005      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005718:	4b77      	ldr	r3, [pc, #476]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0ed      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005728:	2b00      	cmp	r3, #0
 800572a:	d173      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800572c:	4b71      	ldr	r3, [pc, #452]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800572e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005734:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005738:	4053      	eors	r3, r2
 800573a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800573e:	2b00      	cmp	r3, #0
 8005740:	d015      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005742:	4b6c      	ldr	r3, [pc, #432]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800574e:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005752:	4a68      	ldr	r2, [pc, #416]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005758:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800575a:	4b66      	ldr	r3, [pc, #408]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575e:	4a65      	ldr	r2, [pc, #404]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005764:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005766:	4a63      	ldr	r2, [pc, #396]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800576e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005772:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800577a:	d118      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fc fb7a 	bl	8001e74 <HAL_GetTick>
 8005780:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005784:	e00d      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fc fb75 	bl	8001e74 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005790:	1ad2      	subs	r2, r2, r3
 8005792:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005796:	429a      	cmp	r2, r3
 8005798:	d903      	bls.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80057a0:	e005      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057a2:	4b54      	ldr	r3, [pc, #336]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0eb      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80057ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d129      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057c6:	d10e      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80057c8:	4b4a      	ldr	r3, [pc, #296]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057d8:	091a      	lsrs	r2, r3, #4
 80057da:	4b48      	ldr	r3, [pc, #288]	@ (80058fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057dc:	4013      	ands	r3, r2
 80057de:	4a45      	ldr	r2, [pc, #276]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6113      	str	r3, [r2, #16]
 80057e4:	e005      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80057e6:	4b43      	ldr	r3, [pc, #268]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	4a42      	ldr	r2, [pc, #264]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057f0:	6113      	str	r3, [r2, #16]
 80057f2:	4b40      	ldr	r3, [pc, #256]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80057f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005802:	4a3c      	ldr	r2, [pc, #240]	@ (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005804:	430b      	orrs	r3, r1
 8005806:	6713      	str	r3, [r2, #112]	@ 0x70
 8005808:	e008      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800580a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800580e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005812:	e003      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005818:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800581c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f002 0301 	and.w	r3, r2, #1
 8005828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005832:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005836:	460b      	mov	r3, r1
 8005838:	4313      	orrs	r3, r2
 800583a:	f000 808f 	beq.w	800595c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800583e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005844:	2b28      	cmp	r3, #40	@ 0x28
 8005846:	d871      	bhi.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005848:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005935 	.word	0x08005935
 8005854:	0800592d 	.word	0x0800592d
 8005858:	0800592d 	.word	0x0800592d
 800585c:	0800592d 	.word	0x0800592d
 8005860:	0800592d 	.word	0x0800592d
 8005864:	0800592d 	.word	0x0800592d
 8005868:	0800592d 	.word	0x0800592d
 800586c:	0800592d 	.word	0x0800592d
 8005870:	08005901 	.word	0x08005901
 8005874:	0800592d 	.word	0x0800592d
 8005878:	0800592d 	.word	0x0800592d
 800587c:	0800592d 	.word	0x0800592d
 8005880:	0800592d 	.word	0x0800592d
 8005884:	0800592d 	.word	0x0800592d
 8005888:	0800592d 	.word	0x0800592d
 800588c:	0800592d 	.word	0x0800592d
 8005890:	08005917 	.word	0x08005917
 8005894:	0800592d 	.word	0x0800592d
 8005898:	0800592d 	.word	0x0800592d
 800589c:	0800592d 	.word	0x0800592d
 80058a0:	0800592d 	.word	0x0800592d
 80058a4:	0800592d 	.word	0x0800592d
 80058a8:	0800592d 	.word	0x0800592d
 80058ac:	0800592d 	.word	0x0800592d
 80058b0:	08005935 	.word	0x08005935
 80058b4:	0800592d 	.word	0x0800592d
 80058b8:	0800592d 	.word	0x0800592d
 80058bc:	0800592d 	.word	0x0800592d
 80058c0:	0800592d 	.word	0x0800592d
 80058c4:	0800592d 	.word	0x0800592d
 80058c8:	0800592d 	.word	0x0800592d
 80058cc:	0800592d 	.word	0x0800592d
 80058d0:	08005935 	.word	0x08005935
 80058d4:	0800592d 	.word	0x0800592d
 80058d8:	0800592d 	.word	0x0800592d
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	0800592d 	.word	0x0800592d
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800592d 	.word	0x0800592d
 80058ec:	0800592d 	.word	0x0800592d
 80058f0:	08005935 	.word	0x08005935
 80058f4:	58024400 	.word	0x58024400
 80058f8:	58024800 	.word	0x58024800
 80058fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005904:	3308      	adds	r3, #8
 8005906:	2101      	movs	r1, #1
 8005908:	4618      	mov	r0, r3
 800590a:	f000 ffa7 	bl	800685c <RCCEx_PLL2_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005914:	e00f      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591a:	3328      	adds	r3, #40	@ 0x28
 800591c:	2101      	movs	r1, #1
 800591e:	4618      	mov	r0, r3
 8005920:	f001 f84e 	bl	80069c0 <RCCEx_PLL3_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800592a:	e004      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005932:	e000      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800593e:	4bbf      	ldr	r3, [pc, #764]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005942:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800594c:	4abb      	ldr	r2, [pc, #748]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800594e:	430b      	orrs	r3, r1
 8005950:	6553      	str	r3, [r2, #84]	@ 0x54
 8005952:	e003      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005958:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f002 0302 	and.w	r3, r2, #2
 8005968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005972:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005976:	460b      	mov	r3, r1
 8005978:	4313      	orrs	r3, r2
 800597a:	d041      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800597c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	2b05      	cmp	r3, #5
 8005984:	d824      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005986:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059d9 	.word	0x080059d9
 8005990:	080059a5 	.word	0x080059a5
 8005994:	080059bb 	.word	0x080059bb
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059d9 	.word	0x080059d9
 80059a0:	080059d9 	.word	0x080059d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	3308      	adds	r3, #8
 80059aa:	2101      	movs	r1, #1
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 ff55 	bl	800685c <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059b8:	e00f      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059be:	3328      	adds	r3, #40	@ 0x28
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fffc 	bl	80069c0 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80059ce:	e004      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059d6:	e000      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80059d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80059e2:	4b96      	ldr	r3, [pc, #600]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	f023 0107 	bic.w	r1, r3, #7
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f0:	4a92      	ldr	r2, [pc, #584]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059f2:	430b      	orrs	r3, r1
 80059f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80059f6:	e003      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f002 0304 	and.w	r3, r2, #4
 8005a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a10:	2300      	movs	r3, #0
 8005a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a16:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	d044      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a28:	2b05      	cmp	r3, #5
 8005a2a:	d825      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005a81 	.word	0x08005a81
 8005a38:	08005a4d 	.word	0x08005a4d
 8005a3c:	08005a63 	.word	0x08005a63
 8005a40:	08005a81 	.word	0x08005a81
 8005a44:	08005a81 	.word	0x08005a81
 8005a48:	08005a81 	.word	0x08005a81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a50:	3308      	adds	r3, #8
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 ff01 	bl	800685c <RCCEx_PLL2_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a60:	e00f      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a66:	3328      	adds	r3, #40	@ 0x28
 8005a68:	2101      	movs	r1, #1
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 ffa8 	bl	80069c0 <RCCEx_PLL3_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005a76:	e004      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a7e:	e000      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a8e:	f023 0107 	bic.w	r1, r3, #7
 8005a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9a:	4a68      	ldr	r2, [pc, #416]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f002 0320 	and.w	r3, r2, #32
 8005ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005aba:	2300      	movs	r3, #0
 8005abc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ac0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	d055      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ad6:	d033      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005adc:	d82c      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae2:	d02f      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae8:	d826      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005aea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005aee:	d02b      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005af0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005af4:	d820      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005afa:	d012      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b00:	d81a      	bhi.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d022      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b0a:	d115      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	3308      	adds	r3, #8
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fea1 	bl	800685c <RCCEx_PLL2_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b20:	e015      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b26:	3328      	adds	r3, #40	@ 0x28
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff48 	bl	80069c0 <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005b36:	e00a      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b3e:	e006      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b40:	bf00      	nop
 8005b42:	e004      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b44:	bf00      	nop
 8005b46:	e002      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b48:	bf00      	nop
 8005b4a:	e000      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b56:	4b39      	ldr	r3, [pc, #228]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b66:	4a35      	ldr	r2, [pc, #212]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b6c:	e003      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005b82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b8c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b90:	460b      	mov	r3, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	d058      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ba2:	d033      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005ba4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ba8:	d82c      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bae:	d02f      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb4:	d826      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005bb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bba:	d02b      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005bbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bc0:	d820      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bc6:	d012      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bcc:	d81a      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d022      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd6:	d115      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bdc:	3308      	adds	r3, #8
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fe3b 	bl	800685c <RCCEx_PLL2_Config>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005bec:	e015      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf2:	3328      	adds	r3, #40	@ 0x28
 8005bf4:	2102      	movs	r1, #2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fee2 	bl	80069c0 <RCCEx_PLL3_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005c02:	e00a      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c0a:	e006      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c0c:	bf00      	nop
 8005c0e:	e004      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c10:	bf00      	nop
 8005c12:	e002      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c14:	bf00      	nop
 8005c16:	e000      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10e      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c22:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c32:	4a02      	ldr	r2, [pc, #8]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005c3a:	bf00      	nop
 8005c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005c54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005c62:	460b      	mov	r3, r1
 8005c64:	4313      	orrs	r3, r2
 8005c66:	d055      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005c74:	d033      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005c76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005c7a:	d82c      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c80:	d02f      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c86:	d826      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005c8c:	d02b      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005c8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005c92:	d820      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c98:	d012      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c9e:	d81a      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d022      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca8:	d115      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fdd2 	bl	800685c <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e015      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	3328      	adds	r3, #40	@ 0x28
 8005cc6:	2102      	movs	r1, #2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fe79 	bl	80069c0 <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e00a      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cdc:	e006      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e004      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e002      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005ce6:	bf00      	nop
 8005ce8:	e000      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10b      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d04:	4a9c      	ldr	r2, [pc, #624]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d06:	430b      	orrs	r3, r1
 8005d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f002 0308 	and.w	r3, r2, #8
 8005d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d2a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	d01e      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d46:	3328      	adds	r3, #40	@ 0x28
 8005d48:	2102      	movs	r1, #2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fe38 	bl	80069c0 <RCCEx_PLL3_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005d5c:	4b86      	ldr	r3, [pc, #536]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d6c:	4a82      	ldr	r2, [pc, #520]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f002 0310 	and.w	r3, r2, #16
 8005d7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d82:	2300      	movs	r3, #0
 8005d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d88:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d01e      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d9e:	d10c      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da4:	3328      	adds	r3, #40	@ 0x28
 8005da6:	2102      	movs	r1, #2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fe09 	bl	80069c0 <RCCEx_PLL3_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dba:	4b6f      	ldr	r3, [pc, #444]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dca:	4a6b      	ldr	r2, [pc, #428]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dde:	2300      	movs	r3, #0
 8005de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005de2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005de6:	460b      	mov	r3, r1
 8005de8:	4313      	orrs	r3, r2
 8005dea:	d03e      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005df8:	d022      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dfe:	d81b      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e08:	d00b      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005e0a:	e015      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	3308      	adds	r3, #8
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fd21 	bl	800685c <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e20:	e00f      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e26:	3328      	adds	r3, #40	@ 0x28
 8005e28:	2102      	movs	r1, #2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fdc8 	bl	80069c0 <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e3e:	e000      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e5a:	4a47      	ldr	r2, [pc, #284]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e60:	e003      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e78:	2300      	movs	r3, #0
 8005e7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005e80:	460b      	mov	r3, r1
 8005e82:	4313      	orrs	r3, r2
 8005e84:	d03b      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e92:	d01f      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005e94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e98:	d818      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ea4:	d007      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005ea6:	e011      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4b33      	ldr	r3, [pc, #204]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	4a32      	ldr	r2, [pc, #200]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005eb4:	e00f      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eba:	3328      	adds	r3, #40	@ 0x28
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fd7e 	bl	80069c0 <RCCEx_PLL3_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005eca:	e004      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ede:	4b26      	ldr	r3, [pc, #152]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eee:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ef0:	430b      	orrs	r3, r1
 8005ef2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005efa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005f14:	460b      	mov	r3, r1
 8005f16:	4313      	orrs	r3, r2
 8005f18:	d034      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f28:	d007      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005f2a:	e011      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2c:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f30:	4a11      	ldr	r2, [pc, #68]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f38:	e00e      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3e:	3308      	adds	r3, #8
 8005f40:	2102      	movs	r1, #2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fc8a 	bl	800685c <RCCEx_PLL2_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005f4e:	e003      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10d      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f60:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6e:	4a02      	ldr	r2, [pc, #8]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f74:	e006      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005f76:	bf00      	nop
 8005f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f92:	2300      	movs	r3, #0
 8005f94:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f96:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	d00c      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa4:	3328      	adds	r3, #40	@ 0x28
 8005fa6:	2102      	movs	r1, #2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fd09 	bl	80069c0 <RCCEx_PLL3_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fc8:	2300      	movs	r3, #0
 8005fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fcc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	d036      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe0:	d018      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe6:	d811      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fec:	d014      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ff2:	d80b      	bhi.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d011      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ffc:	d106      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffe:	4bb7      	ldr	r3, [pc, #732]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006002:	4ab6      	ldr	r2, [pc, #728]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006008:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800600a:	e008      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006012:	e004      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006014:	bf00      	nop
 8006016:	e002      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006018:	bf00      	nop
 800601a:	e000      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800601c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800601e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006026:	4bad      	ldr	r3, [pc, #692]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006034:	4aa9      	ldr	r2, [pc, #676]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006036:	430b      	orrs	r3, r1
 8006038:	6553      	str	r3, [r2, #84]	@ 0x54
 800603a:	e003      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006050:	653b      	str	r3, [r7, #80]	@ 0x50
 8006052:	2300      	movs	r3, #0
 8006054:	657b      	str	r3, [r7, #84]	@ 0x54
 8006056:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800605a:	460b      	mov	r3, r1
 800605c:	4313      	orrs	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006060:	4b9e      	ldr	r3, [pc, #632]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006064:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	4a9b      	ldr	r2, [pc, #620]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006082:	2300      	movs	r3, #0
 8006084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006086:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800608a:	460b      	mov	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006090:	4b92      	ldr	r3, [pc, #584]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006094:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800609e:	4a8f      	ldr	r2, [pc, #572]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80060b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80060b2:	2300      	movs	r3, #0
 80060b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060c0:	4b86      	ldr	r3, [pc, #536]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	4a85      	ldr	r2, [pc, #532]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060ca:	6113      	str	r3, [r2, #16]
 80060cc:	4b83      	ldr	r3, [pc, #524]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060ce:	6919      	ldr	r1, [r3, #16]
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060d8:	4a80      	ldr	r2, [pc, #512]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80060ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ec:	2300      	movs	r3, #0
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80060fa:	4b78      	ldr	r3, [pc, #480]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	4a74      	ldr	r2, [pc, #464]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800610a:	430b      	orrs	r3, r1
 800610c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30
 800611c:	2300      	movs	r3, #0
 800611e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006120:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006124:	460b      	mov	r3, r1
 8006126:	4313      	orrs	r3, r2
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800612a:	4b6c      	ldr	r3, [pc, #432]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613a:	4a68      	ldr	r2, [pc, #416]	@ (80062dc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800613c:	430b      	orrs	r3, r1
 800613e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	2100      	movs	r1, #0
 800614a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006152:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d011      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006160:	3308      	adds	r3, #8
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fb79 	bl	800685c <RCCEx_PLL2_Config>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006170:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800617c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	2100      	movs	r1, #0
 800618a:	6239      	str	r1, [r7, #32]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
 8006192:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	d011      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	3308      	adds	r3, #8
 80061a2:	2101      	movs	r1, #1
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fb59 	bl	800685c <RCCEx_PLL2_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80061b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80061c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	2100      	movs	r1, #0
 80061ca:	61b9      	str	r1, [r7, #24]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80061d6:	460b      	mov	r3, r1
 80061d8:	4313      	orrs	r3, r2
 80061da:	d011      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e0:	3308      	adds	r3, #8
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fb39 	bl	800685c <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80061f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	2100      	movs	r1, #0
 800620a:	6139      	str	r1, [r7, #16]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006216:	460b      	mov	r3, r1
 8006218:	4313      	orrs	r3, r2
 800621a:	d011      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	3328      	adds	r3, #40	@ 0x28
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fbcb 	bl	80069c0 <RCCEx_PLL3_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006230:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800623c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	2100      	movs	r1, #0
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d011      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	3328      	adds	r3, #40	@ 0x28
 8006262:	2101      	movs	r1, #1
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fbab 	bl	80069c0 <RCCEx_PLL3_Config>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800627c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	2100      	movs	r1, #0
 800628a:	6039      	str	r1, [r7, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d011      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800629c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a0:	3328      	adds	r3, #40	@ 0x28
 80062a2:	2102      	movs	r1, #2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fb8b 	bl	80069c0 <RCCEx_PLL3_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80062b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80062c0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80062d4:	46bd      	mov	sp, r7
 80062d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062da:	bf00      	nop
 80062dc:	58024400 	.word	0x58024400

080062e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80062e4:	f7fe fe00 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4904      	ldr	r1, [pc, #16]	@ (8006308 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	58024400 	.word	0x58024400
 8006308:	08013ed0 	.word	0x08013ed0

0800630c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800630c:	b480      	push	{r7}
 800630e:	b089      	sub	sp, #36	@ 0x24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006314:	4ba1      	ldr	r3, [pc, #644]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800631e:	4b9f      	ldr	r3, [pc, #636]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	0b1b      	lsrs	r3, r3, #12
 8006324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006328:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800632a:	4b9c      	ldr	r3, [pc, #624]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006336:	4b99      	ldr	r3, [pc, #612]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800633a:	08db      	lsrs	r3, r3, #3
 800633c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	fb02 f303 	mul.w	r3, r2, r3
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8111 	beq.w	800657c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b02      	cmp	r3, #2
 800635e:	f000 8083 	beq.w	8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b02      	cmp	r3, #2
 8006366:	f200 80a1 	bhi.w	80064ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d056      	beq.n	8006424 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006376:	e099      	b.n	80064ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006378:	4b88      	ldr	r3, [pc, #544]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d02d      	beq.n	80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006384:	4b85      	ldr	r3, [pc, #532]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	08db      	lsrs	r3, r3, #3
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	4a84      	ldr	r2, [pc, #528]	@ (80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006390:	fa22 f303 	lsr.w	r3, r2, r3
 8006394:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ae:	4b7b      	ldr	r3, [pc, #492]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b6:	ee07 3a90 	vmov	s15, r3
 80063ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063be:	ed97 6a03 	vldr	s12, [r7, #12]
 80063c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80063de:	e087      	b.n	80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80063ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f2:	4b6a      	ldr	r3, [pc, #424]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006402:	ed97 6a03 	vldr	s12, [r7, #12]
 8006406:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800640a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006422:	e065      	b.n	80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006436:	4b59      	ldr	r3, [pc, #356]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006446:	ed97 6a03 	vldr	s12, [r7, #12]
 800644a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800644e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006466:	e043      	b.n	80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647a:	4b48      	ldr	r3, [pc, #288]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648a:	ed97 6a03 	vldr	s12, [r7, #12]
 800648e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800649e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064aa:	e021      	b.n	80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064be:	4b37      	ldr	r3, [pc, #220]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80064d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80064f0:	4b2a      	ldr	r3, [pc, #168]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	0a5b      	lsrs	r3, r3, #9
 80064f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650a:	edd7 6a07 	vldr	s13, [r7, #28]
 800650e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006516:	ee17 2a90 	vmov	r2, s15
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800651e:	4b1f      	ldr	r3, [pc, #124]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	0c1b      	lsrs	r3, r3, #16
 8006524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006534:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006538:	edd7 6a07 	vldr	s13, [r7, #28]
 800653c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006544:	ee17 2a90 	vmov	r2, s15
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800654c:	4b13      	ldr	r3, [pc, #76]	@ (800659c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	0e1b      	lsrs	r3, r3, #24
 8006552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006566:	edd7 6a07 	vldr	s13, [r7, #28]
 800656a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800656e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006572:	ee17 2a90 	vmov	r2, s15
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800657a:	e008      	b.n	800658e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	609a      	str	r2, [r3, #8]
}
 800658e:	bf00      	nop
 8006590:	3724      	adds	r7, #36	@ 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	58024400 	.word	0x58024400
 80065a0:	03d09000 	.word	0x03d09000
 80065a4:	46000000 	.word	0x46000000
 80065a8:	4c742400 	.word	0x4c742400
 80065ac:	4a742400 	.word	0x4a742400
 80065b0:	4c371b00 	.word	0x4c371b00

080065b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b089      	sub	sp, #36	@ 0x24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80065c6:	4b9f      	ldr	r3, [pc, #636]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ca:	0d1b      	lsrs	r3, r3, #20
 80065cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80065d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80065de:	4b99      	ldr	r3, [pc, #612]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	08db      	lsrs	r3, r3, #3
 80065e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 8111 	beq.w	8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b02      	cmp	r3, #2
 8006606:	f000 8083 	beq.w	8006710 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2b02      	cmp	r3, #2
 800660e:	f200 80a1 	bhi.w	8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d056      	beq.n	80066cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800661e:	e099      	b.n	8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006620:	4b88      	ldr	r3, [pc, #544]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02d      	beq.n	8006688 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800662c:	4b85      	ldr	r3, [pc, #532]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	4a84      	ldr	r2, [pc, #528]	@ (8006848 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006656:	4b7b      	ldr	r3, [pc, #492]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006666:	ed97 6a03 	vldr	s12, [r7, #12]
 800666a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800684c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800666e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800667a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006686:	e087      	b.n	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006692:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006850 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800669a:	4b6a      	ldr	r3, [pc, #424]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80066ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800684c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ca:	e065      	b.n	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80066da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066de:	4b59      	ldr	r3, [pc, #356]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80066f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800684c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670e:	e043      	b.n	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006858 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800671e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006722:	4b48      	ldr	r3, [pc, #288]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006732:	ed97 6a03 	vldr	s12, [r7, #12]
 8006736:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800684c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800673a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006752:	e021      	b.n	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	ed97 6a03 	vldr	s12, [r7, #12]
 800677a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800684c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800677e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006796:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006798:	4b2a      	ldr	r3, [pc, #168]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	0a5b      	lsrs	r3, r3, #9
 800679e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067be:	ee17 2a90 	vmov	r2, s15
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80067c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	0c1b      	lsrs	r3, r3, #16
 80067cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ec:	ee17 2a90 	vmov	r2, s15
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80067f4:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f8:	0e1b      	lsrs	r3, r3, #24
 80067fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067fe:	ee07 3a90 	vmov	s15, r3
 8006802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800680a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800680e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681a:	ee17 2a90 	vmov	r2, s15
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006822:	e008      	b.n	8006836 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	609a      	str	r2, [r3, #8]
}
 8006836:	bf00      	nop
 8006838:	3724      	adds	r7, #36	@ 0x24
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	58024400 	.word	0x58024400
 8006848:	03d09000 	.word	0x03d09000
 800684c:	46000000 	.word	0x46000000
 8006850:	4c742400 	.word	0x4c742400
 8006854:	4a742400 	.word	0x4a742400
 8006858:	4c371b00 	.word	0x4c371b00

0800685c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800686a:	4b53      	ldr	r3, [pc, #332]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800686c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	2b03      	cmp	r3, #3
 8006874:	d101      	bne.n	800687a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e099      	b.n	80069ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800687a:	4b4f      	ldr	r3, [pc, #316]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a4e      	ldr	r2, [pc, #312]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006880:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006886:	f7fb faf5 	bl	8001e74 <HAL_GetTick>
 800688a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800688c:	e008      	b.n	80068a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800688e:	f7fb faf1 	bl	8001e74 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b02      	cmp	r3, #2
 800689a:	d901      	bls.n	80068a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e086      	b.n	80069ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068a0:	4b45      	ldr	r3, [pc, #276]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1f0      	bne.n	800688e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068ac:	4b42      	ldr	r3, [pc, #264]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	031b      	lsls	r3, r3, #12
 80068ba:	493f      	ldr	r1, [pc, #252]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	628b      	str	r3, [r1, #40]	@ 0x28
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	025b      	lsls	r3, r3, #9
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	3b01      	subs	r3, #1
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	061b      	lsls	r3, r3, #24
 80068ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80068f0:	4931      	ldr	r1, [pc, #196]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80068f6:	4b30      	ldr	r3, [pc, #192]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	492d      	ldr	r1, [pc, #180]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006908:	4b2b      	ldr	r3, [pc, #172]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800690a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690c:	f023 0220 	bic.w	r2, r3, #32
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	4928      	ldr	r1, [pc, #160]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006916:	4313      	orrs	r3, r2
 8006918:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800691a:	4b27      	ldr	r3, [pc, #156]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4a26      	ldr	r2, [pc, #152]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006920:	f023 0310 	bic.w	r3, r3, #16
 8006924:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006926:	4b24      	ldr	r3, [pc, #144]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800692a:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <RCCEx_PLL2_Config+0x160>)
 800692c:	4013      	ands	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	69d2      	ldr	r2, [r2, #28]
 8006932:	00d2      	lsls	r2, r2, #3
 8006934:	4920      	ldr	r1, [pc, #128]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006936:	4313      	orrs	r3, r2
 8006938:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800693a:	4b1f      	ldr	r3, [pc, #124]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800693c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800693e:	4a1e      	ldr	r2, [pc, #120]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006940:	f043 0310 	orr.w	r3, r3, #16
 8006944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800694c:	4b1a      	ldr	r3, [pc, #104]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	4a19      	ldr	r2, [pc, #100]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006952:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006956:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006958:	e00f      	b.n	800697a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d106      	bne.n	800696e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006960:	4b15      	ldr	r3, [pc, #84]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	4a14      	ldr	r2, [pc, #80]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800696a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800696c:	e005      	b.n	800697a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800696e:	4b12      	ldr	r3, [pc, #72]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	4a11      	ldr	r2, [pc, #68]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006978:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800697a:	4b0f      	ldr	r3, [pc, #60]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a0e      	ldr	r2, [pc, #56]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 8006980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006986:	f7fb fa75 	bl	8001e74 <HAL_GetTick>
 800698a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800698c:	e008      	b.n	80069a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800698e:	f7fb fa71 	bl	8001e74 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e006      	b.n	80069ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <RCCEx_PLL2_Config+0x15c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	58024400 	.word	0x58024400
 80069bc:	ffff0007 	.word	0xffff0007

080069c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ce:	4b53      	ldr	r3, [pc, #332]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d101      	bne.n	80069de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e099      	b.n	8006b12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80069de:	4b4f      	ldr	r3, [pc, #316]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a4e      	ldr	r2, [pc, #312]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 80069e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ea:	f7fb fa43 	bl	8001e74 <HAL_GetTick>
 80069ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069f0:	e008      	b.n	8006a04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069f2:	f7fb fa3f 	bl	8001e74 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d901      	bls.n	8006a04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e086      	b.n	8006b12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a04:	4b45      	ldr	r3, [pc, #276]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1f0      	bne.n	80069f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a10:	4b42      	ldr	r3, [pc, #264]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	051b      	lsls	r3, r3, #20
 8006a1e:	493f      	ldr	r1, [pc, #252]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	025b      	lsls	r3, r3, #9
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	041b      	lsls	r3, r3, #16
 8006a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	061b      	lsls	r3, r3, #24
 8006a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a54:	4931      	ldr	r1, [pc, #196]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a5a:	4b30      	ldr	r3, [pc, #192]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	492d      	ldr	r1, [pc, #180]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	4928      	ldr	r1, [pc, #160]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006a7e:	4b27      	ldr	r3, [pc, #156]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	4a26      	ldr	r2, [pc, #152]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006a8a:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a8e:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <RCCEx_PLL3_Config+0x160>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	69d2      	ldr	r2, [r2, #28]
 8006a96:	00d2      	lsls	r2, r2, #3
 8006a98:	4920      	ldr	r1, [pc, #128]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab4:	4a19      	ldr	r2, [pc, #100]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006aba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006abc:	e00f      	b.n	8006ade <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d106      	bne.n	8006ad2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ac4:	4b15      	ldr	r3, [pc, #84]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006aca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ace:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ad0:	e005      	b.n	8006ade <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ad2:	4b12      	ldr	r3, [pc, #72]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	4a11      	ldr	r2, [pc, #68]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006adc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ade:	4b0f      	ldr	r3, [pc, #60]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aea:	f7fb f9c3 	bl	8001e74 <HAL_GetTick>
 8006aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006af0:	e008      	b.n	8006b04 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006af2:	f7fb f9bf 	bl	8001e74 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e006      	b.n	8006b12 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b04:	4b05      	ldr	r3, [pc, #20]	@ (8006b1c <RCCEx_PLL3_Config+0x15c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	ffff0007 	.word	0xffff0007

08006b24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e10f      	b.n	8006d56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a87      	ldr	r2, [pc, #540]	@ (8006d60 <HAL_SPI_Init+0x23c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <HAL_SPI_Init+0x42>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a86      	ldr	r2, [pc, #536]	@ (8006d64 <HAL_SPI_Init+0x240>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00a      	beq.n	8006b66 <HAL_SPI_Init+0x42>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a84      	ldr	r2, [pc, #528]	@ (8006d68 <HAL_SPI_Init+0x244>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d005      	beq.n	8006b66 <HAL_SPI_Init+0x42>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	d901      	bls.n	8006b66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e0f7      	b.n	8006d56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f900 	bl	8006d6c <SPI_GetPacketSize>
 8006b6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a7b      	ldr	r2, [pc, #492]	@ (8006d60 <HAL_SPI_Init+0x23c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00c      	beq.n	8006b92 <HAL_SPI_Init+0x6e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a79      	ldr	r2, [pc, #484]	@ (8006d64 <HAL_SPI_Init+0x240>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <HAL_SPI_Init+0x6e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a78      	ldr	r2, [pc, #480]	@ (8006d68 <HAL_SPI_Init+0x244>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d002      	beq.n	8006b92 <HAL_SPI_Init+0x6e>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d811      	bhi.n	8006bb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006b96:	4a72      	ldr	r2, [pc, #456]	@ (8006d60 <HAL_SPI_Init+0x23c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a70      	ldr	r2, [pc, #448]	@ (8006d64 <HAL_SPI_Init+0x240>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_SPI_Init+0x8c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6f      	ldr	r2, [pc, #444]	@ (8006d68 <HAL_SPI_Init+0x244>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d104      	bne.n	8006bba <HAL_SPI_Init+0x96>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d901      	bls.n	8006bba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e0cd      	b.n	8006d56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fa fb40 	bl	8001254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006bf6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c00:	d119      	bne.n	8006c36 <HAL_SPI_Init+0x112>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c0a:	d103      	bne.n	8006c14 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10c      	bne.n	8006c36 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c24:	d107      	bne.n	8006c36 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00f      	beq.n	8006c62 <HAL_SPI_Init+0x13e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b06      	cmp	r3, #6
 8006c48:	d90b      	bls.n	8006c62 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e007      	b.n	8006c72 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69da      	ldr	r2, [r3, #28]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c84:	ea42 0103 	orr.w	r1, r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd2:	ea42 0103 	orr.w	r1, r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d113      	bne.n	8006d12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00a      	beq.n	8006d44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40013000 	.word	0x40013000
 8006d64:	40003800 	.word	0x40003800
 8006d68:	40003c00 	.word	0x40003c00

08006d6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	095b      	lsrs	r3, r3, #5
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	3307      	adds	r3, #7
 8006d8a:	08db      	lsrs	r3, r3, #3
 8006d8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e042      	b.n	8006e3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fa fca6 	bl	8001718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2224      	movs	r2, #36	@ 0x24
 8006dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fe95 	bl	8007b1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f826 	bl	8006e44 <UART_SetConfig>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e01b      	b.n	8006e3a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 ff14 	bl	8007c60 <UART_CheckIdleState>
 8006e38:	4603      	mov	r3, r0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e48:	b092      	sub	sp, #72	@ 0x48
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	431a      	orrs	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4bbe      	ldr	r3, [pc, #760]	@ (800716c <UART_SetConfig+0x328>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4ab3      	ldr	r2, [pc, #716]	@ (8007170 <UART_SetConfig+0x32c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d004      	beq.n	8006eb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eac:	4313      	orrs	r3, r2
 8006eae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	4baf      	ldr	r3, [pc, #700]	@ (8007174 <UART_SetConfig+0x330>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	f023 010f 	bic.w	r1, r3, #15
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4aa6      	ldr	r2, [pc, #664]	@ (8007178 <UART_SetConfig+0x334>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d177      	bne.n	8006fd4 <UART_SetConfig+0x190>
 8006ee4:	4ba5      	ldr	r3, [pc, #660]	@ (800717c <UART_SetConfig+0x338>)
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eec:	2b28      	cmp	r3, #40	@ 0x28
 8006eee:	d86d      	bhi.n	8006fcc <UART_SetConfig+0x188>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0xb4>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f9d 	.word	0x08006f9d
 8006efc:	08006fcd 	.word	0x08006fcd
 8006f00:	08006fcd 	.word	0x08006fcd
 8006f04:	08006fcd 	.word	0x08006fcd
 8006f08:	08006fcd 	.word	0x08006fcd
 8006f0c:	08006fcd 	.word	0x08006fcd
 8006f10:	08006fcd 	.word	0x08006fcd
 8006f14:	08006fcd 	.word	0x08006fcd
 8006f18:	08006fa5 	.word	0x08006fa5
 8006f1c:	08006fcd 	.word	0x08006fcd
 8006f20:	08006fcd 	.word	0x08006fcd
 8006f24:	08006fcd 	.word	0x08006fcd
 8006f28:	08006fcd 	.word	0x08006fcd
 8006f2c:	08006fcd 	.word	0x08006fcd
 8006f30:	08006fcd 	.word	0x08006fcd
 8006f34:	08006fcd 	.word	0x08006fcd
 8006f38:	08006fad 	.word	0x08006fad
 8006f3c:	08006fcd 	.word	0x08006fcd
 8006f40:	08006fcd 	.word	0x08006fcd
 8006f44:	08006fcd 	.word	0x08006fcd
 8006f48:	08006fcd 	.word	0x08006fcd
 8006f4c:	08006fcd 	.word	0x08006fcd
 8006f50:	08006fcd 	.word	0x08006fcd
 8006f54:	08006fcd 	.word	0x08006fcd
 8006f58:	08006fb5 	.word	0x08006fb5
 8006f5c:	08006fcd 	.word	0x08006fcd
 8006f60:	08006fcd 	.word	0x08006fcd
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006fcd 	.word	0x08006fcd
 8006f6c:	08006fcd 	.word	0x08006fcd
 8006f70:	08006fcd 	.word	0x08006fcd
 8006f74:	08006fcd 	.word	0x08006fcd
 8006f78:	08006fbd 	.word	0x08006fbd
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	08006fcd 	.word	0x08006fcd
 8006f84:	08006fcd 	.word	0x08006fcd
 8006f88:	08006fcd 	.word	0x08006fcd
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fcd 	.word	0x08006fcd
 8006f94:	08006fcd 	.word	0x08006fcd
 8006f98:	08006fc5 	.word	0x08006fc5
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e326      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e322      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fac:	2308      	movs	r3, #8
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e31e      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e31a      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fbc:	2320      	movs	r3, #32
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e316      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fc4:	2340      	movs	r3, #64	@ 0x40
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fca:	e312      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fd2:	e30e      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a69      	ldr	r2, [pc, #420]	@ (8007180 <UART_SetConfig+0x33c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d130      	bne.n	8007040 <UART_SetConfig+0x1fc>
 8006fde:	4b67      	ldr	r3, [pc, #412]	@ (800717c <UART_SetConfig+0x338>)
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	2b05      	cmp	r3, #5
 8006fe8:	d826      	bhi.n	8007038 <UART_SetConfig+0x1f4>
 8006fea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <UART_SetConfig+0x1ac>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007009 	.word	0x08007009
 8006ff4:	08007011 	.word	0x08007011
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	2300      	movs	r3, #0
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700e:	e2f0      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007010:	2304      	movs	r3, #4
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e2ec      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007018:	2308      	movs	r3, #8
 800701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701e:	e2e8      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007020:	2310      	movs	r3, #16
 8007022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007026:	e2e4      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007028:	2320      	movs	r3, #32
 800702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702e:	e2e0      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007030:	2340      	movs	r3, #64	@ 0x40
 8007032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007036:	e2dc      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007038:	2380      	movs	r3, #128	@ 0x80
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800703e:	e2d8      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a4f      	ldr	r2, [pc, #316]	@ (8007184 <UART_SetConfig+0x340>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d130      	bne.n	80070ac <UART_SetConfig+0x268>
 800704a:	4b4c      	ldr	r3, [pc, #304]	@ (800717c <UART_SetConfig+0x338>)
 800704c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b05      	cmp	r3, #5
 8007054:	d826      	bhi.n	80070a4 <UART_SetConfig+0x260>
 8007056:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <UART_SetConfig+0x218>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007075 	.word	0x08007075
 8007060:	0800707d 	.word	0x0800707d
 8007064:	08007085 	.word	0x08007085
 8007068:	0800708d 	.word	0x0800708d
 800706c:	08007095 	.word	0x08007095
 8007070:	0800709d 	.word	0x0800709d
 8007074:	2300      	movs	r3, #0
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707a:	e2ba      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007082:	e2b6      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708a:	e2b2      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007092:	e2ae      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007094:	2320      	movs	r3, #32
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709a:	e2aa      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800709c:	2340      	movs	r3, #64	@ 0x40
 800709e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a2:	e2a6      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070aa:	e2a2      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a35      	ldr	r2, [pc, #212]	@ (8007188 <UART_SetConfig+0x344>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d130      	bne.n	8007118 <UART_SetConfig+0x2d4>
 80070b6:	4b31      	ldr	r3, [pc, #196]	@ (800717c <UART_SetConfig+0x338>)
 80070b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d826      	bhi.n	8007110 <UART_SetConfig+0x2cc>
 80070c2:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <UART_SetConfig+0x284>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070e1 	.word	0x080070e1
 80070cc:	080070e9 	.word	0x080070e9
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	080070f9 	.word	0x080070f9
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007109 	.word	0x08007109
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e6:	e284      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80070e8:	2304      	movs	r3, #4
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ee:	e280      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80070f0:	2308      	movs	r3, #8
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f6:	e27c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80070f8:	2310      	movs	r3, #16
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070fe:	e278      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007100:	2320      	movs	r3, #32
 8007102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007106:	e274      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007108:	2340      	movs	r3, #64	@ 0x40
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710e:	e270      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007116:	e26c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <UART_SetConfig+0x348>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d142      	bne.n	80071a8 <UART_SetConfig+0x364>
 8007122:	4b16      	ldr	r3, [pc, #88]	@ (800717c <UART_SetConfig+0x338>)
 8007124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	2b05      	cmp	r3, #5
 800712c:	d838      	bhi.n	80071a0 <UART_SetConfig+0x35c>
 800712e:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <UART_SetConfig+0x2f0>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	0800714d 	.word	0x0800714d
 8007138:	08007155 	.word	0x08007155
 800713c:	0800715d 	.word	0x0800715d
 8007140:	08007165 	.word	0x08007165
 8007144:	08007191 	.word	0x08007191
 8007148:	08007199 	.word	0x08007199
 800714c:	2300      	movs	r3, #0
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007152:	e24e      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007154:	2304      	movs	r3, #4
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800715a:	e24a      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800715c:	2308      	movs	r3, #8
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007162:	e246      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007164:	2310      	movs	r3, #16
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716a:	e242      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800716c:	cfff69f3 	.word	0xcfff69f3
 8007170:	58000c00 	.word	0x58000c00
 8007174:	11fff4ff 	.word	0x11fff4ff
 8007178:	40011000 	.word	0x40011000
 800717c:	58024400 	.word	0x58024400
 8007180:	40004400 	.word	0x40004400
 8007184:	40004800 	.word	0x40004800
 8007188:	40004c00 	.word	0x40004c00
 800718c:	40005000 	.word	0x40005000
 8007190:	2320      	movs	r3, #32
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e22c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007198:	2340      	movs	r3, #64	@ 0x40
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719e:	e228      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80071a0:	2380      	movs	r3, #128	@ 0x80
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a6:	e224      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4ab1      	ldr	r2, [pc, #708]	@ (8007474 <UART_SetConfig+0x630>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d176      	bne.n	80072a0 <UART_SetConfig+0x45c>
 80071b2:	4bb1      	ldr	r3, [pc, #708]	@ (8007478 <UART_SetConfig+0x634>)
 80071b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ba:	2b28      	cmp	r3, #40	@ 0x28
 80071bc:	d86c      	bhi.n	8007298 <UART_SetConfig+0x454>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <UART_SetConfig+0x380>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	08007269 	.word	0x08007269
 80071c8:	08007299 	.word	0x08007299
 80071cc:	08007299 	.word	0x08007299
 80071d0:	08007299 	.word	0x08007299
 80071d4:	08007299 	.word	0x08007299
 80071d8:	08007299 	.word	0x08007299
 80071dc:	08007299 	.word	0x08007299
 80071e0:	08007299 	.word	0x08007299
 80071e4:	08007271 	.word	0x08007271
 80071e8:	08007299 	.word	0x08007299
 80071ec:	08007299 	.word	0x08007299
 80071f0:	08007299 	.word	0x08007299
 80071f4:	08007299 	.word	0x08007299
 80071f8:	08007299 	.word	0x08007299
 80071fc:	08007299 	.word	0x08007299
 8007200:	08007299 	.word	0x08007299
 8007204:	08007279 	.word	0x08007279
 8007208:	08007299 	.word	0x08007299
 800720c:	08007299 	.word	0x08007299
 8007210:	08007299 	.word	0x08007299
 8007214:	08007299 	.word	0x08007299
 8007218:	08007299 	.word	0x08007299
 800721c:	08007299 	.word	0x08007299
 8007220:	08007299 	.word	0x08007299
 8007224:	08007281 	.word	0x08007281
 8007228:	08007299 	.word	0x08007299
 800722c:	08007299 	.word	0x08007299
 8007230:	08007299 	.word	0x08007299
 8007234:	08007299 	.word	0x08007299
 8007238:	08007299 	.word	0x08007299
 800723c:	08007299 	.word	0x08007299
 8007240:	08007299 	.word	0x08007299
 8007244:	08007289 	.word	0x08007289
 8007248:	08007299 	.word	0x08007299
 800724c:	08007299 	.word	0x08007299
 8007250:	08007299 	.word	0x08007299
 8007254:	08007299 	.word	0x08007299
 8007258:	08007299 	.word	0x08007299
 800725c:	08007299 	.word	0x08007299
 8007260:	08007299 	.word	0x08007299
 8007264:	08007291 	.word	0x08007291
 8007268:	2301      	movs	r3, #1
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e1c0      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007270:	2304      	movs	r3, #4
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1bc      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007278:	2308      	movs	r3, #8
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e1b8      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007280:	2310      	movs	r3, #16
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007286:	e1b4      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007288:	2320      	movs	r3, #32
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728e:	e1b0      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007290:	2340      	movs	r3, #64	@ 0x40
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007296:	e1ac      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007298:	2380      	movs	r3, #128	@ 0x80
 800729a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729e:	e1a8      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a75      	ldr	r2, [pc, #468]	@ (800747c <UART_SetConfig+0x638>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d130      	bne.n	800730c <UART_SetConfig+0x4c8>
 80072aa:	4b73      	ldr	r3, [pc, #460]	@ (8007478 <UART_SetConfig+0x634>)
 80072ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	2b05      	cmp	r3, #5
 80072b4:	d826      	bhi.n	8007304 <UART_SetConfig+0x4c0>
 80072b6:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <UART_SetConfig+0x478>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072d5 	.word	0x080072d5
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e18a      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80072dc:	2304      	movs	r3, #4
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e186      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80072e4:	2308      	movs	r3, #8
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e182      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80072ec:	2310      	movs	r3, #16
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f2:	e17e      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80072f4:	2320      	movs	r3, #32
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fa:	e17a      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80072fc:	2340      	movs	r3, #64	@ 0x40
 80072fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007302:	e176      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007304:	2380      	movs	r3, #128	@ 0x80
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730a:	e172      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a5b      	ldr	r2, [pc, #364]	@ (8007480 <UART_SetConfig+0x63c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d130      	bne.n	8007378 <UART_SetConfig+0x534>
 8007316:	4b58      	ldr	r3, [pc, #352]	@ (8007478 <UART_SetConfig+0x634>)
 8007318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b05      	cmp	r3, #5
 8007320:	d826      	bhi.n	8007370 <UART_SetConfig+0x52c>
 8007322:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <UART_SetConfig+0x4e4>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	08007341 	.word	0x08007341
 800732c:	08007349 	.word	0x08007349
 8007330:	08007351 	.word	0x08007351
 8007334:	08007359 	.word	0x08007359
 8007338:	08007361 	.word	0x08007361
 800733c:	08007369 	.word	0x08007369
 8007340:	2300      	movs	r3, #0
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e154      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007348:	2304      	movs	r3, #4
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e150      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e14c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007358:	2310      	movs	r3, #16
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e148      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007360:	2320      	movs	r3, #32
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e144      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007368:	2340      	movs	r3, #64	@ 0x40
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e140      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007370:	2380      	movs	r3, #128	@ 0x80
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e13c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a41      	ldr	r2, [pc, #260]	@ (8007484 <UART_SetConfig+0x640>)
 800737e:	4293      	cmp	r3, r2
 8007380:	f040 8082 	bne.w	8007488 <UART_SetConfig+0x644>
 8007384:	4b3c      	ldr	r3, [pc, #240]	@ (8007478 <UART_SetConfig+0x634>)
 8007386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007388:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800738c:	2b28      	cmp	r3, #40	@ 0x28
 800738e:	d86d      	bhi.n	800746c <UART_SetConfig+0x628>
 8007390:	a201      	add	r2, pc, #4	@ (adr r2, 8007398 <UART_SetConfig+0x554>)
 8007392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007396:	bf00      	nop
 8007398:	0800743d 	.word	0x0800743d
 800739c:	0800746d 	.word	0x0800746d
 80073a0:	0800746d 	.word	0x0800746d
 80073a4:	0800746d 	.word	0x0800746d
 80073a8:	0800746d 	.word	0x0800746d
 80073ac:	0800746d 	.word	0x0800746d
 80073b0:	0800746d 	.word	0x0800746d
 80073b4:	0800746d 	.word	0x0800746d
 80073b8:	08007445 	.word	0x08007445
 80073bc:	0800746d 	.word	0x0800746d
 80073c0:	0800746d 	.word	0x0800746d
 80073c4:	0800746d 	.word	0x0800746d
 80073c8:	0800746d 	.word	0x0800746d
 80073cc:	0800746d 	.word	0x0800746d
 80073d0:	0800746d 	.word	0x0800746d
 80073d4:	0800746d 	.word	0x0800746d
 80073d8:	0800744d 	.word	0x0800744d
 80073dc:	0800746d 	.word	0x0800746d
 80073e0:	0800746d 	.word	0x0800746d
 80073e4:	0800746d 	.word	0x0800746d
 80073e8:	0800746d 	.word	0x0800746d
 80073ec:	0800746d 	.word	0x0800746d
 80073f0:	0800746d 	.word	0x0800746d
 80073f4:	0800746d 	.word	0x0800746d
 80073f8:	08007455 	.word	0x08007455
 80073fc:	0800746d 	.word	0x0800746d
 8007400:	0800746d 	.word	0x0800746d
 8007404:	0800746d 	.word	0x0800746d
 8007408:	0800746d 	.word	0x0800746d
 800740c:	0800746d 	.word	0x0800746d
 8007410:	0800746d 	.word	0x0800746d
 8007414:	0800746d 	.word	0x0800746d
 8007418:	0800745d 	.word	0x0800745d
 800741c:	0800746d 	.word	0x0800746d
 8007420:	0800746d 	.word	0x0800746d
 8007424:	0800746d 	.word	0x0800746d
 8007428:	0800746d 	.word	0x0800746d
 800742c:	0800746d 	.word	0x0800746d
 8007430:	0800746d 	.word	0x0800746d
 8007434:	0800746d 	.word	0x0800746d
 8007438:	08007465 	.word	0x08007465
 800743c:	2301      	movs	r3, #1
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e0d6      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007444:	2304      	movs	r3, #4
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e0d2      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800744c:	2308      	movs	r3, #8
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e0ce      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007454:	2310      	movs	r3, #16
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e0ca      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800745c:	2320      	movs	r3, #32
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e0c6      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007464:	2340      	movs	r3, #64	@ 0x40
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e0c2      	b.n	80075f2 <UART_SetConfig+0x7ae>
 800746c:	2380      	movs	r3, #128	@ 0x80
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007472:	e0be      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007474:	40011400 	.word	0x40011400
 8007478:	58024400 	.word	0x58024400
 800747c:	40007800 	.word	0x40007800
 8007480:	40007c00 	.word	0x40007c00
 8007484:	40011800 	.word	0x40011800
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4aad      	ldr	r2, [pc, #692]	@ (8007744 <UART_SetConfig+0x900>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d176      	bne.n	8007580 <UART_SetConfig+0x73c>
 8007492:	4bad      	ldr	r3, [pc, #692]	@ (8007748 <UART_SetConfig+0x904>)
 8007494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800749a:	2b28      	cmp	r3, #40	@ 0x28
 800749c:	d86c      	bhi.n	8007578 <UART_SetConfig+0x734>
 800749e:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <UART_SetConfig+0x660>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	08007549 	.word	0x08007549
 80074a8:	08007579 	.word	0x08007579
 80074ac:	08007579 	.word	0x08007579
 80074b0:	08007579 	.word	0x08007579
 80074b4:	08007579 	.word	0x08007579
 80074b8:	08007579 	.word	0x08007579
 80074bc:	08007579 	.word	0x08007579
 80074c0:	08007579 	.word	0x08007579
 80074c4:	08007551 	.word	0x08007551
 80074c8:	08007579 	.word	0x08007579
 80074cc:	08007579 	.word	0x08007579
 80074d0:	08007579 	.word	0x08007579
 80074d4:	08007579 	.word	0x08007579
 80074d8:	08007579 	.word	0x08007579
 80074dc:	08007579 	.word	0x08007579
 80074e0:	08007579 	.word	0x08007579
 80074e4:	08007559 	.word	0x08007559
 80074e8:	08007579 	.word	0x08007579
 80074ec:	08007579 	.word	0x08007579
 80074f0:	08007579 	.word	0x08007579
 80074f4:	08007579 	.word	0x08007579
 80074f8:	08007579 	.word	0x08007579
 80074fc:	08007579 	.word	0x08007579
 8007500:	08007579 	.word	0x08007579
 8007504:	08007561 	.word	0x08007561
 8007508:	08007579 	.word	0x08007579
 800750c:	08007579 	.word	0x08007579
 8007510:	08007579 	.word	0x08007579
 8007514:	08007579 	.word	0x08007579
 8007518:	08007579 	.word	0x08007579
 800751c:	08007579 	.word	0x08007579
 8007520:	08007579 	.word	0x08007579
 8007524:	08007569 	.word	0x08007569
 8007528:	08007579 	.word	0x08007579
 800752c:	08007579 	.word	0x08007579
 8007530:	08007579 	.word	0x08007579
 8007534:	08007579 	.word	0x08007579
 8007538:	08007579 	.word	0x08007579
 800753c:	08007579 	.word	0x08007579
 8007540:	08007579 	.word	0x08007579
 8007544:	08007571 	.word	0x08007571
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754e:	e050      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007550:	2304      	movs	r3, #4
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007556:	e04c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007558:	2308      	movs	r3, #8
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e048      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007560:	2310      	movs	r3, #16
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e044      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007568:	2320      	movs	r3, #32
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e040      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007570:	2340      	movs	r3, #64	@ 0x40
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007576:	e03c      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007578:	2380      	movs	r3, #128	@ 0x80
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e038      	b.n	80075f2 <UART_SetConfig+0x7ae>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a71      	ldr	r2, [pc, #452]	@ (800774c <UART_SetConfig+0x908>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d130      	bne.n	80075ec <UART_SetConfig+0x7a8>
 800758a:	4b6f      	ldr	r3, [pc, #444]	@ (8007748 <UART_SetConfig+0x904>)
 800758c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	2b05      	cmp	r3, #5
 8007594:	d826      	bhi.n	80075e4 <UART_SetConfig+0x7a0>
 8007596:	a201      	add	r2, pc, #4	@ (adr r2, 800759c <UART_SetConfig+0x758>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075b5 	.word	0x080075b5
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	080075c5 	.word	0x080075c5
 80075a8:	080075cd 	.word	0x080075cd
 80075ac:	080075d5 	.word	0x080075d5
 80075b0:	080075dd 	.word	0x080075dd
 80075b4:	2302      	movs	r3, #2
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ba:	e01a      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075bc:	2304      	movs	r3, #4
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e016      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075c4:	2308      	movs	r3, #8
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e012      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075cc:	2310      	movs	r3, #16
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e00e      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075d4:	2320      	movs	r3, #32
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e00a      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075dc:	2340      	movs	r3, #64	@ 0x40
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e006      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075e4:	2380      	movs	r3, #128	@ 0x80
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e002      	b.n	80075f2 <UART_SetConfig+0x7ae>
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a55      	ldr	r2, [pc, #340]	@ (800774c <UART_SetConfig+0x908>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	f040 80f8 	bne.w	80077ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007602:	2b20      	cmp	r3, #32
 8007604:	dc46      	bgt.n	8007694 <UART_SetConfig+0x850>
 8007606:	2b02      	cmp	r3, #2
 8007608:	db75      	blt.n	80076f6 <UART_SetConfig+0x8b2>
 800760a:	3b02      	subs	r3, #2
 800760c:	2b1e      	cmp	r3, #30
 800760e:	d872      	bhi.n	80076f6 <UART_SetConfig+0x8b2>
 8007610:	a201      	add	r2, pc, #4	@ (adr r2, 8007618 <UART_SetConfig+0x7d4>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	0800769b 	.word	0x0800769b
 800761c:	080076f7 	.word	0x080076f7
 8007620:	080076a3 	.word	0x080076a3
 8007624:	080076f7 	.word	0x080076f7
 8007628:	080076f7 	.word	0x080076f7
 800762c:	080076f7 	.word	0x080076f7
 8007630:	080076b3 	.word	0x080076b3
 8007634:	080076f7 	.word	0x080076f7
 8007638:	080076f7 	.word	0x080076f7
 800763c:	080076f7 	.word	0x080076f7
 8007640:	080076f7 	.word	0x080076f7
 8007644:	080076f7 	.word	0x080076f7
 8007648:	080076f7 	.word	0x080076f7
 800764c:	080076f7 	.word	0x080076f7
 8007650:	080076c3 	.word	0x080076c3
 8007654:	080076f7 	.word	0x080076f7
 8007658:	080076f7 	.word	0x080076f7
 800765c:	080076f7 	.word	0x080076f7
 8007660:	080076f7 	.word	0x080076f7
 8007664:	080076f7 	.word	0x080076f7
 8007668:	080076f7 	.word	0x080076f7
 800766c:	080076f7 	.word	0x080076f7
 8007670:	080076f7 	.word	0x080076f7
 8007674:	080076f7 	.word	0x080076f7
 8007678:	080076f7 	.word	0x080076f7
 800767c:	080076f7 	.word	0x080076f7
 8007680:	080076f7 	.word	0x080076f7
 8007684:	080076f7 	.word	0x080076f7
 8007688:	080076f7 	.word	0x080076f7
 800768c:	080076f7 	.word	0x080076f7
 8007690:	080076e9 	.word	0x080076e9
 8007694:	2b40      	cmp	r3, #64	@ 0x40
 8007696:	d02a      	beq.n	80076ee <UART_SetConfig+0x8aa>
 8007698:	e02d      	b.n	80076f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800769a:	f7fe fe21 	bl	80062e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800769e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076a0:	e02f      	b.n	8007702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fe30 	bl	800630c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076b0:	e027      	b.n	8007702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076b2:	f107 0318 	add.w	r3, r7, #24
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe ff7c 	bl	80065b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c0:	e01f      	b.n	8007702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076c2:	4b21      	ldr	r3, [pc, #132]	@ (8007748 <UART_SetConfig+0x904>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d009      	beq.n	80076e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007748 <UART_SetConfig+0x904>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	08db      	lsrs	r3, r3, #3
 80076d4:	f003 0303 	and.w	r3, r3, #3
 80076d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007750 <UART_SetConfig+0x90c>)
 80076da:	fa22 f303 	lsr.w	r3, r2, r3
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076e0:	e00f      	b.n	8007702 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80076e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007750 <UART_SetConfig+0x90c>)
 80076e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e6:	e00c      	b.n	8007702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007754 <UART_SetConfig+0x910>)
 80076ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076ec:	e009      	b.n	8007702 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f4:	e005      	b.n	8007702 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 81ee 	beq.w	8007ae6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770e:	4a12      	ldr	r2, [pc, #72]	@ (8007758 <UART_SetConfig+0x914>)
 8007710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007714:	461a      	mov	r2, r3
 8007716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007718:	fbb3 f3f2 	udiv	r3, r3, r2
 800771c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	4413      	add	r3, r2
 8007728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772a:	429a      	cmp	r2, r3
 800772c:	d305      	bcc.n	800773a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007736:	429a      	cmp	r2, r3
 8007738:	d910      	bls.n	800775c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007740:	e1d1      	b.n	8007ae6 <UART_SetConfig+0xca2>
 8007742:	bf00      	nop
 8007744:	40011c00 	.word	0x40011c00
 8007748:	58024400 	.word	0x58024400
 800774c:	58000c00 	.word	0x58000c00
 8007750:	03d09000 	.word	0x03d09000
 8007754:	003d0900 	.word	0x003d0900
 8007758:	08013ee0 	.word	0x08013ee0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800775c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800775e:	2200      	movs	r2, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	60fa      	str	r2, [r7, #12]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007768:	4ac0      	ldr	r2, [pc, #768]	@ (8007a6c <UART_SetConfig+0xc28>)
 800776a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776e:	b29b      	uxth	r3, r3
 8007770:	2200      	movs	r2, #0
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800777e:	f7f8 fe17 	bl	80003b0 <__aeabi_uldivmod>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4610      	mov	r0, r2
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0200 	mov.w	r2, #0
 800778e:	f04f 0300 	mov.w	r3, #0
 8007792:	020b      	lsls	r3, r1, #8
 8007794:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007798:	0202      	lsls	r2, r0, #8
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	6849      	ldr	r1, [r1, #4]
 800779e:	0849      	lsrs	r1, r1, #1
 80077a0:	2000      	movs	r0, #0
 80077a2:	460c      	mov	r4, r1
 80077a4:	4605      	mov	r5, r0
 80077a6:	eb12 0804 	adds.w	r8, r2, r4
 80077aa:	eb43 0905 	adc.w	r9, r3, r5
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	469a      	mov	sl, r3
 80077b6:	4693      	mov	fp, r2
 80077b8:	4652      	mov	r2, sl
 80077ba:	465b      	mov	r3, fp
 80077bc:	4640      	mov	r0, r8
 80077be:	4649      	mov	r1, r9
 80077c0:	f7f8 fdf6 	bl	80003b0 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4613      	mov	r3, r2
 80077ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d2:	d308      	bcc.n	80077e6 <UART_SetConfig+0x9a2>
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077da:	d204      	bcs.n	80077e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077e2:	60da      	str	r2, [r3, #12]
 80077e4:	e17f      	b.n	8007ae6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077ec:	e17b      	b.n	8007ae6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077f6:	f040 80bd 	bne.w	8007974 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80077fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077fe:	2b20      	cmp	r3, #32
 8007800:	dc48      	bgt.n	8007894 <UART_SetConfig+0xa50>
 8007802:	2b00      	cmp	r3, #0
 8007804:	db7b      	blt.n	80078fe <UART_SetConfig+0xaba>
 8007806:	2b20      	cmp	r3, #32
 8007808:	d879      	bhi.n	80078fe <UART_SetConfig+0xaba>
 800780a:	a201      	add	r2, pc, #4	@ (adr r2, 8007810 <UART_SetConfig+0x9cc>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	0800789b 	.word	0x0800789b
 8007814:	080078a3 	.word	0x080078a3
 8007818:	080078ff 	.word	0x080078ff
 800781c:	080078ff 	.word	0x080078ff
 8007820:	080078ab 	.word	0x080078ab
 8007824:	080078ff 	.word	0x080078ff
 8007828:	080078ff 	.word	0x080078ff
 800782c:	080078ff 	.word	0x080078ff
 8007830:	080078bb 	.word	0x080078bb
 8007834:	080078ff 	.word	0x080078ff
 8007838:	080078ff 	.word	0x080078ff
 800783c:	080078ff 	.word	0x080078ff
 8007840:	080078ff 	.word	0x080078ff
 8007844:	080078ff 	.word	0x080078ff
 8007848:	080078ff 	.word	0x080078ff
 800784c:	080078ff 	.word	0x080078ff
 8007850:	080078cb 	.word	0x080078cb
 8007854:	080078ff 	.word	0x080078ff
 8007858:	080078ff 	.word	0x080078ff
 800785c:	080078ff 	.word	0x080078ff
 8007860:	080078ff 	.word	0x080078ff
 8007864:	080078ff 	.word	0x080078ff
 8007868:	080078ff 	.word	0x080078ff
 800786c:	080078ff 	.word	0x080078ff
 8007870:	080078ff 	.word	0x080078ff
 8007874:	080078ff 	.word	0x080078ff
 8007878:	080078ff 	.word	0x080078ff
 800787c:	080078ff 	.word	0x080078ff
 8007880:	080078ff 	.word	0x080078ff
 8007884:	080078ff 	.word	0x080078ff
 8007888:	080078ff 	.word	0x080078ff
 800788c:	080078ff 	.word	0x080078ff
 8007890:	080078f1 	.word	0x080078f1
 8007894:	2b40      	cmp	r3, #64	@ 0x40
 8007896:	d02e      	beq.n	80078f6 <UART_SetConfig+0xab2>
 8007898:	e031      	b.n	80078fe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800789a:	f7fd fb55 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 800789e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078a0:	e033      	b.n	800790a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078a2:	f7fd fb67 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 80078a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078a8:	e02f      	b.n	800790a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fd2c 	bl	800630c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b8:	e027      	b.n	800790a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ba:	f107 0318 	add.w	r3, r7, #24
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fe78 	bl	80065b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078c8:	e01f      	b.n	800790a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078ca:	4b69      	ldr	r3, [pc, #420]	@ (8007a70 <UART_SetConfig+0xc2c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80078d6:	4b66      	ldr	r3, [pc, #408]	@ (8007a70 <UART_SetConfig+0xc2c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	08db      	lsrs	r3, r3, #3
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	4a64      	ldr	r2, [pc, #400]	@ (8007a74 <UART_SetConfig+0xc30>)
 80078e2:	fa22 f303 	lsr.w	r3, r2, r3
 80078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80078e8:	e00f      	b.n	800790a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80078ea:	4b62      	ldr	r3, [pc, #392]	@ (8007a74 <UART_SetConfig+0xc30>)
 80078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ee:	e00c      	b.n	800790a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078f0:	4b61      	ldr	r3, [pc, #388]	@ (8007a78 <UART_SetConfig+0xc34>)
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f4:	e009      	b.n	800790a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078fc:	e005      	b.n	800790a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800790a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80ea 	beq.w	8007ae6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	4a55      	ldr	r2, [pc, #340]	@ (8007a6c <UART_SetConfig+0xc28>)
 8007918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800791c:	461a      	mov	r2, r3
 800791e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007920:	fbb3 f3f2 	udiv	r3, r3, r2
 8007924:	005a      	lsls	r2, r3, #1
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	085b      	lsrs	r3, r3, #1
 800792c:	441a      	add	r2, r3
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	fbb2 f3f3 	udiv	r3, r2, r3
 8007936:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800793a:	2b0f      	cmp	r3, #15
 800793c:	d916      	bls.n	800796c <UART_SetConfig+0xb28>
 800793e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007944:	d212      	bcs.n	800796c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007948:	b29b      	uxth	r3, r3
 800794a:	f023 030f 	bic.w	r3, r3, #15
 800794e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	b29a      	uxth	r2, r3
 800795c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800795e:	4313      	orrs	r3, r2
 8007960:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007968:	60da      	str	r2, [r3, #12]
 800796a:	e0bc      	b.n	8007ae6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007972:	e0b8      	b.n	8007ae6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007974:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007978:	2b20      	cmp	r3, #32
 800797a:	dc4b      	bgt.n	8007a14 <UART_SetConfig+0xbd0>
 800797c:	2b00      	cmp	r3, #0
 800797e:	f2c0 8087 	blt.w	8007a90 <UART_SetConfig+0xc4c>
 8007982:	2b20      	cmp	r3, #32
 8007984:	f200 8084 	bhi.w	8007a90 <UART_SetConfig+0xc4c>
 8007988:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0xb4c>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	08007a1b 	.word	0x08007a1b
 8007994:	08007a23 	.word	0x08007a23
 8007998:	08007a91 	.word	0x08007a91
 800799c:	08007a91 	.word	0x08007a91
 80079a0:	08007a2b 	.word	0x08007a2b
 80079a4:	08007a91 	.word	0x08007a91
 80079a8:	08007a91 	.word	0x08007a91
 80079ac:	08007a91 	.word	0x08007a91
 80079b0:	08007a3b 	.word	0x08007a3b
 80079b4:	08007a91 	.word	0x08007a91
 80079b8:	08007a91 	.word	0x08007a91
 80079bc:	08007a91 	.word	0x08007a91
 80079c0:	08007a91 	.word	0x08007a91
 80079c4:	08007a91 	.word	0x08007a91
 80079c8:	08007a91 	.word	0x08007a91
 80079cc:	08007a91 	.word	0x08007a91
 80079d0:	08007a4b 	.word	0x08007a4b
 80079d4:	08007a91 	.word	0x08007a91
 80079d8:	08007a91 	.word	0x08007a91
 80079dc:	08007a91 	.word	0x08007a91
 80079e0:	08007a91 	.word	0x08007a91
 80079e4:	08007a91 	.word	0x08007a91
 80079e8:	08007a91 	.word	0x08007a91
 80079ec:	08007a91 	.word	0x08007a91
 80079f0:	08007a91 	.word	0x08007a91
 80079f4:	08007a91 	.word	0x08007a91
 80079f8:	08007a91 	.word	0x08007a91
 80079fc:	08007a91 	.word	0x08007a91
 8007a00:	08007a91 	.word	0x08007a91
 8007a04:	08007a91 	.word	0x08007a91
 8007a08:	08007a91 	.word	0x08007a91
 8007a0c:	08007a91 	.word	0x08007a91
 8007a10:	08007a83 	.word	0x08007a83
 8007a14:	2b40      	cmp	r3, #64	@ 0x40
 8007a16:	d037      	beq.n	8007a88 <UART_SetConfig+0xc44>
 8007a18:	e03a      	b.n	8007a90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1a:	f7fd fa95 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8007a1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a20:	e03c      	b.n	8007a9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a22:	f7fd faa7 	bl	8004f74 <HAL_RCC_GetPCLK2Freq>
 8007a26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a28:	e038      	b.n	8007a9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fc6c 	bl	800630c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a38:	e030      	b.n	8007a9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3a:	f107 0318 	add.w	r3, r7, #24
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fdb8 	bl	80065b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e028      	b.n	8007a9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4a:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <UART_SetConfig+0xc2c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d012      	beq.n	8007a7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a56:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <UART_SetConfig+0xc2c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	08db      	lsrs	r3, r3, #3
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	4a04      	ldr	r2, [pc, #16]	@ (8007a74 <UART_SetConfig+0xc30>)
 8007a62:	fa22 f303 	lsr.w	r3, r2, r3
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a68:	e018      	b.n	8007a9c <UART_SetConfig+0xc58>
 8007a6a:	bf00      	nop
 8007a6c:	08013ee0 	.word	0x08013ee0
 8007a70:	58024400 	.word	0x58024400
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007a7c:	4b24      	ldr	r3, [pc, #144]	@ (8007b10 <UART_SetConfig+0xccc>)
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e00c      	b.n	8007a9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a82:	4b24      	ldr	r3, [pc, #144]	@ (8007b14 <UART_SetConfig+0xcd0>)
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a86:	e009      	b.n	8007a9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8e:	e005      	b.n	8007a9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a9a:	bf00      	nop
    }

    if (pclk != 0U)
 8007a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d021      	beq.n	8007ae6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b18 <UART_SetConfig+0xcd4>)
 8007aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab0:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	085b      	lsrs	r3, r3, #1
 8007aba:	441a      	add	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	2b0f      	cmp	r3, #15
 8007aca:	d909      	bls.n	8007ae0 <UART_SetConfig+0xc9c>
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ad2:	d205      	bcs.n	8007ae0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	e002      	b.n	8007ae6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2200      	movs	r2, #0
 8007b00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b02:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3748      	adds	r7, #72	@ 0x48
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	003d0900 	.word	0x003d0900
 8007b18:	08013ee0 	.word	0x08013ee0

08007b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01a      	beq.n	8007c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c1a:	d10a      	bne.n	8007c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
  }
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b098      	sub	sp, #96	@ 0x60
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c70:	f7fa f900 	bl	8001e74 <HAL_GetTick>
 8007c74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d12f      	bne.n	8007ce4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f88e 	bl	8007db4 <UART_WaitOnFlagUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d022      	beq.n	8007ce4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca6:	e853 3f00 	ldrex	r3, [r3]
 8007caa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e6      	bne.n	8007c9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e063      	b.n	8007dac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d149      	bne.n	8007d86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cf2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f857 	bl	8007db4 <UART_WaitOnFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d03c      	beq.n	8007d86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	623b      	str	r3, [r7, #32]
   return(result);
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e6      	bne.n	8007d0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d5e:	61fa      	str	r2, [r7, #28]
 8007d60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	69b9      	ldr	r1, [r7, #24]
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e5      	bne.n	8007d3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e012      	b.n	8007dac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2220      	movs	r2, #32
 8007d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3758      	adds	r7, #88	@ 0x58
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dc4:	e04f      	b.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dcc:	d04b      	beq.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dce:	f7fa f851 	bl	8001e74 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d302      	bcc.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e04e      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d037      	beq.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b80      	cmp	r3, #128	@ 0x80
 8007dfa:	d034      	beq.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b40      	cmp	r3, #64	@ 0x40
 8007e00:	d031      	beq.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d110      	bne.n	8007e32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2208      	movs	r2, #8
 8007e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f839 	bl	8007e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2208      	movs	r2, #8
 8007e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e029      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e40:	d111      	bne.n	8007e66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f81f 	bl	8007e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e00f      	b.n	8007e86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	bf0c      	ite	eq
 8007e76:	2301      	moveq	r3, #1
 8007e78:	2300      	movne	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d0a0      	beq.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b095      	sub	sp, #84	@ 0x54
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ebc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e6      	bne.n	8007e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	4b1e      	ldr	r3, [pc, #120]	@ (8007f58 <UART_EndRxTransfer+0xc8>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e5      	bne.n	8007eca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d118      	bne.n	8007f38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 0310 	bic.w	r3, r3, #16
 8007f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f24:	61bb      	str	r3, [r7, #24]
 8007f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6979      	ldr	r1, [r7, #20]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	613b      	str	r3, [r7, #16]
   return(result);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e6      	bne.n	8007f06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f4c:	bf00      	nop
 8007f4e:	3754      	adds	r7, #84	@ 0x54
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	effffffe 	.word	0xeffffffe

08007f5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e027      	b.n	8007fc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2224      	movs	r2, #36	@ 0x24
 8007f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0201 	bic.w	r2, r2, #1
 8007f98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fa0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e02d      	b.n	8008042 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2224      	movs	r2, #36	@ 0x24
 8007ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0201 	bic.w	r2, r2, #1
 800800c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f850 	bl	80080c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800805a:	2b01      	cmp	r3, #1
 800805c:	d101      	bne.n	8008062 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800805e:	2302      	movs	r3, #2
 8008060:	e02d      	b.n	80080be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2224      	movs	r2, #36	@ 0x24
 800806e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 0201 	bic.w	r2, r2, #1
 8008088:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f812 	bl	80080c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d108      	bne.n	80080ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080e8:	e031      	b.n	800814e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ea:	2310      	movs	r3, #16
 80080ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080ee:	2310      	movs	r3, #16
 80080f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	0e5b      	lsrs	r3, r3, #25
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	0f5b      	lsrs	r3, r3, #29
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	7b3a      	ldrb	r2, [r7, #12]
 8008116:	4911      	ldr	r1, [pc, #68]	@ (800815c <UARTEx_SetNbDataToProcess+0x94>)
 8008118:	5c8a      	ldrb	r2, [r1, r2]
 800811a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800811e:	7b3a      	ldrb	r2, [r7, #12]
 8008120:	490f      	ldr	r1, [pc, #60]	@ (8008160 <UARTEx_SetNbDataToProcess+0x98>)
 8008122:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008124:	fb93 f3f2 	sdiv	r3, r3, r2
 8008128:	b29a      	uxth	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	7b7a      	ldrb	r2, [r7, #13]
 8008134:	4909      	ldr	r1, [pc, #36]	@ (800815c <UARTEx_SetNbDataToProcess+0x94>)
 8008136:	5c8a      	ldrb	r2, [r1, r2]
 8008138:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800813c:	7b7a      	ldrb	r2, [r7, #13]
 800813e:	4908      	ldr	r1, [pc, #32]	@ (8008160 <UARTEx_SetNbDataToProcess+0x98>)
 8008140:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008142:	fb93 f3f2 	sdiv	r3, r3, r2
 8008146:	b29a      	uxth	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	08013ef8 	.word	0x08013ef8
 8008160:	08013f00 	.word	0x08013f00

08008164 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800816a:	4b92      	ldr	r3, [pc, #584]	@ (80083b4 <MX_LWIP_Init+0x250>)
 800816c:	22c0      	movs	r2, #192	@ 0xc0
 800816e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008170:	4b90      	ldr	r3, [pc, #576]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008172:	22a8      	movs	r2, #168	@ 0xa8
 8008174:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 8008176:	4b8f      	ldr	r3, [pc, #572]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008178:	2232      	movs	r2, #50	@ 0x32
 800817a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800817c:	4b8d      	ldr	r3, [pc, #564]	@ (80083b4 <MX_LWIP_Init+0x250>)
 800817e:	220a      	movs	r2, #10
 8008180:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008182:	4b8d      	ldr	r3, [pc, #564]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008184:	22ff      	movs	r2, #255	@ 0xff
 8008186:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008188:	4b8b      	ldr	r3, [pc, #556]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800818a:	22ff      	movs	r2, #255	@ 0xff
 800818c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800818e:	4b8a      	ldr	r3, [pc, #552]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008190:	22ff      	movs	r2, #255	@ 0xff
 8008192:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008194:	4b88      	ldr	r3, [pc, #544]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008196:	2200      	movs	r2, #0
 8008198:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800819a:	4b88      	ldr	r3, [pc, #544]	@ (80083bc <MX_LWIP_Init+0x258>)
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80081a0:	4b86      	ldr	r3, [pc, #536]	@ (80083bc <MX_LWIP_Init+0x258>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80081a6:	4b85      	ldr	r3, [pc, #532]	@ (80083bc <MX_LWIP_Init+0x258>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80081ac:	4b83      	ldr	r3, [pc, #524]	@ (80083bc <MX_LWIP_Init+0x258>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80081b2:	2100      	movs	r1, #0
 80081b4:	2000      	movs	r0, #0
 80081b6:	f004 fd4f 	bl	800cc58 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80081ba:	4b7e      	ldr	r3, [pc, #504]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	061a      	lsls	r2, r3, #24
 80081c0:	4b7c      	ldr	r3, [pc, #496]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	431a      	orrs	r2, r3
 80081c8:	4b7a      	ldr	r3, [pc, #488]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081ca:	789b      	ldrb	r3, [r3, #2]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	4313      	orrs	r3, r2
 80081d0:	4a78      	ldr	r2, [pc, #480]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081d2:	78d2      	ldrb	r2, [r2, #3]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	061a      	lsls	r2, r3, #24
 80081d8:	4b76      	ldr	r3, [pc, #472]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	0619      	lsls	r1, r3, #24
 80081de:	4b75      	ldr	r3, [pc, #468]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	4319      	orrs	r1, r3
 80081e6:	4b73      	ldr	r3, [pc, #460]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081e8:	789b      	ldrb	r3, [r3, #2]
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	430b      	orrs	r3, r1
 80081ee:	4971      	ldr	r1, [pc, #452]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081f0:	78c9      	ldrb	r1, [r1, #3]
 80081f2:	430b      	orrs	r3, r1
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081fa:	431a      	orrs	r2, r3
 80081fc:	4b6d      	ldr	r3, [pc, #436]	@ (80083b4 <MX_LWIP_Init+0x250>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	0619      	lsls	r1, r3, #24
 8008202:	4b6c      	ldr	r3, [pc, #432]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	4319      	orrs	r1, r3
 800820a:	4b6a      	ldr	r3, [pc, #424]	@ (80083b4 <MX_LWIP_Init+0x250>)
 800820c:	789b      	ldrb	r3, [r3, #2]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	430b      	orrs	r3, r1
 8008212:	4968      	ldr	r1, [pc, #416]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008214:	78c9      	ldrb	r1, [r1, #3]
 8008216:	430b      	orrs	r3, r1
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800821e:	431a      	orrs	r2, r3
 8008220:	4b64      	ldr	r3, [pc, #400]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	0619      	lsls	r1, r3, #24
 8008226:	4b63      	ldr	r3, [pc, #396]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	041b      	lsls	r3, r3, #16
 800822c:	4319      	orrs	r1, r3
 800822e:	4b61      	ldr	r3, [pc, #388]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008230:	789b      	ldrb	r3, [r3, #2]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	430b      	orrs	r3, r1
 8008236:	495f      	ldr	r1, [pc, #380]	@ (80083b4 <MX_LWIP_Init+0x250>)
 8008238:	78c9      	ldrb	r1, [r1, #3]
 800823a:	430b      	orrs	r3, r1
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	4313      	orrs	r3, r2
 8008240:	4a5f      	ldr	r2, [pc, #380]	@ (80083c0 <MX_LWIP_Init+0x25c>)
 8008242:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008244:	4b5c      	ldr	r3, [pc, #368]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	061a      	lsls	r2, r3, #24
 800824a:	4b5b      	ldr	r3, [pc, #364]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	041b      	lsls	r3, r3, #16
 8008250:	431a      	orrs	r2, r3
 8008252:	4b59      	ldr	r3, [pc, #356]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008254:	789b      	ldrb	r3, [r3, #2]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	4313      	orrs	r3, r2
 800825a:	4a57      	ldr	r2, [pc, #348]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800825c:	78d2      	ldrb	r2, [r2, #3]
 800825e:	4313      	orrs	r3, r2
 8008260:	061a      	lsls	r2, r3, #24
 8008262:	4b55      	ldr	r3, [pc, #340]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	0619      	lsls	r1, r3, #24
 8008268:	4b53      	ldr	r3, [pc, #332]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	4319      	orrs	r1, r3
 8008270:	4b51      	ldr	r3, [pc, #324]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008272:	789b      	ldrb	r3, [r3, #2]
 8008274:	021b      	lsls	r3, r3, #8
 8008276:	430b      	orrs	r3, r1
 8008278:	494f      	ldr	r1, [pc, #316]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800827a:	78c9      	ldrb	r1, [r1, #3]
 800827c:	430b      	orrs	r3, r1
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008284:	431a      	orrs	r2, r3
 8008286:	4b4c      	ldr	r3, [pc, #304]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	0619      	lsls	r1, r3, #24
 800828c:	4b4a      	ldr	r3, [pc, #296]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	4319      	orrs	r1, r3
 8008294:	4b48      	ldr	r3, [pc, #288]	@ (80083b8 <MX_LWIP_Init+0x254>)
 8008296:	789b      	ldrb	r3, [r3, #2]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	430b      	orrs	r3, r1
 800829c:	4946      	ldr	r1, [pc, #280]	@ (80083b8 <MX_LWIP_Init+0x254>)
 800829e:	78c9      	ldrb	r1, [r1, #3]
 80082a0:	430b      	orrs	r3, r1
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80082a8:	431a      	orrs	r2, r3
 80082aa:	4b43      	ldr	r3, [pc, #268]	@ (80083b8 <MX_LWIP_Init+0x254>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	0619      	lsls	r1, r3, #24
 80082b0:	4b41      	ldr	r3, [pc, #260]	@ (80083b8 <MX_LWIP_Init+0x254>)
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	041b      	lsls	r3, r3, #16
 80082b6:	4319      	orrs	r1, r3
 80082b8:	4b3f      	ldr	r3, [pc, #252]	@ (80083b8 <MX_LWIP_Init+0x254>)
 80082ba:	789b      	ldrb	r3, [r3, #2]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	430b      	orrs	r3, r1
 80082c0:	493d      	ldr	r1, [pc, #244]	@ (80083b8 <MX_LWIP_Init+0x254>)
 80082c2:	78c9      	ldrb	r1, [r1, #3]
 80082c4:	430b      	orrs	r3, r1
 80082c6:	0e1b      	lsrs	r3, r3, #24
 80082c8:	4313      	orrs	r3, r2
 80082ca:	4a3e      	ldr	r2, [pc, #248]	@ (80083c4 <MX_LWIP_Init+0x260>)
 80082cc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80082ce:	4b3b      	ldr	r3, [pc, #236]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	061a      	lsls	r2, r3, #24
 80082d4:	4b39      	ldr	r3, [pc, #228]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	041b      	lsls	r3, r3, #16
 80082da:	431a      	orrs	r2, r3
 80082dc:	4b37      	ldr	r3, [pc, #220]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082de:	789b      	ldrb	r3, [r3, #2]
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	4313      	orrs	r3, r2
 80082e4:	4a35      	ldr	r2, [pc, #212]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082e6:	78d2      	ldrb	r2, [r2, #3]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	061a      	lsls	r2, r3, #24
 80082ec:	4b33      	ldr	r3, [pc, #204]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	0619      	lsls	r1, r3, #24
 80082f2:	4b32      	ldr	r3, [pc, #200]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	4319      	orrs	r1, r3
 80082fa:	4b30      	ldr	r3, [pc, #192]	@ (80083bc <MX_LWIP_Init+0x258>)
 80082fc:	789b      	ldrb	r3, [r3, #2]
 80082fe:	021b      	lsls	r3, r3, #8
 8008300:	430b      	orrs	r3, r1
 8008302:	492e      	ldr	r1, [pc, #184]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008304:	78c9      	ldrb	r1, [r1, #3]
 8008306:	430b      	orrs	r3, r1
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800830e:	431a      	orrs	r2, r3
 8008310:	4b2a      	ldr	r3, [pc, #168]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	0619      	lsls	r1, r3, #24
 8008316:	4b29      	ldr	r3, [pc, #164]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	4319      	orrs	r1, r3
 800831e:	4b27      	ldr	r3, [pc, #156]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008320:	789b      	ldrb	r3, [r3, #2]
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	430b      	orrs	r3, r1
 8008326:	4925      	ldr	r1, [pc, #148]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008328:	78c9      	ldrb	r1, [r1, #3]
 800832a:	430b      	orrs	r3, r1
 800832c:	0a1b      	lsrs	r3, r3, #8
 800832e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008332:	431a      	orrs	r2, r3
 8008334:	4b21      	ldr	r3, [pc, #132]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	0619      	lsls	r1, r3, #24
 800833a:	4b20      	ldr	r3, [pc, #128]	@ (80083bc <MX_LWIP_Init+0x258>)
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	041b      	lsls	r3, r3, #16
 8008340:	4319      	orrs	r1, r3
 8008342:	4b1e      	ldr	r3, [pc, #120]	@ (80083bc <MX_LWIP_Init+0x258>)
 8008344:	789b      	ldrb	r3, [r3, #2]
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	430b      	orrs	r3, r1
 800834a:	491c      	ldr	r1, [pc, #112]	@ (80083bc <MX_LWIP_Init+0x258>)
 800834c:	78c9      	ldrb	r1, [r1, #3]
 800834e:	430b      	orrs	r3, r1
 8008350:	0e1b      	lsrs	r3, r3, #24
 8008352:	4313      	orrs	r3, r2
 8008354:	4a1c      	ldr	r2, [pc, #112]	@ (80083c8 <MX_LWIP_Init+0x264>)
 8008356:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008358:	4b1c      	ldr	r3, [pc, #112]	@ (80083cc <MX_LWIP_Init+0x268>)
 800835a:	9302      	str	r3, [sp, #8]
 800835c:	4b1c      	ldr	r3, [pc, #112]	@ (80083d0 <MX_LWIP_Init+0x26c>)
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4b18      	ldr	r3, [pc, #96]	@ (80083c8 <MX_LWIP_Init+0x264>)
 8008366:	4a17      	ldr	r2, [pc, #92]	@ (80083c4 <MX_LWIP_Init+0x260>)
 8008368:	4915      	ldr	r1, [pc, #84]	@ (80083c0 <MX_LWIP_Init+0x25c>)
 800836a:	481a      	ldr	r0, [pc, #104]	@ (80083d4 <MX_LWIP_Init+0x270>)
 800836c:	f005 faea 	bl	800d944 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008370:	4818      	ldr	r0, [pc, #96]	@ (80083d4 <MX_LWIP_Init+0x270>)
 8008372:	f005 fc95 	bl	800dca0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008376:	4817      	ldr	r0, [pc, #92]	@ (80083d4 <MX_LWIP_Init+0x270>)
 8008378:	f005 fca2 	bl	800dcc0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800837c:	4916      	ldr	r1, [pc, #88]	@ (80083d8 <MX_LWIP_Init+0x274>)
 800837e:	4815      	ldr	r0, [pc, #84]	@ (80083d4 <MX_LWIP_Init+0x270>)
 8008380:	f005 fda0 	bl	800dec4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008384:	2224      	movs	r2, #36	@ 0x24
 8008386:	2100      	movs	r1, #0
 8008388:	4814      	ldr	r0, [pc, #80]	@ (80083dc <MX_LWIP_Init+0x278>)
 800838a:	f009 fb3e 	bl	8011a0a <memset>
  attributes.name = "EthLink";
 800838e:	4b13      	ldr	r3, [pc, #76]	@ (80083dc <MX_LWIP_Init+0x278>)
 8008390:	4a13      	ldr	r2, [pc, #76]	@ (80083e0 <MX_LWIP_Init+0x27c>)
 8008392:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008394:	4b11      	ldr	r3, [pc, #68]	@ (80083dc <MX_LWIP_Init+0x278>)
 8008396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800839a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800839c:	4b0f      	ldr	r3, [pc, #60]	@ (80083dc <MX_LWIP_Init+0x278>)
 800839e:	2210      	movs	r2, #16
 80083a0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80083a2:	4a0e      	ldr	r2, [pc, #56]	@ (80083dc <MX_LWIP_Init+0x278>)
 80083a4:	490b      	ldr	r1, [pc, #44]	@ (80083d4 <MX_LWIP_Init+0x270>)
 80083a6:	480f      	ldr	r0, [pc, #60]	@ (80083e4 <MX_LWIP_Init+0x280>)
 80083a8:	f000 fd6f 	bl	8008e8a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80083ac:	bf00      	nop
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	24004e58 	.word	0x24004e58
 80083b8:	24004e5c 	.word	0x24004e5c
 80083bc:	24004e60 	.word	0x24004e60
 80083c0:	24004e4c 	.word	0x24004e4c
 80083c4:	24004e50 	.word	0x24004e50
 80083c8:	24004e54 	.word	0x24004e54
 80083cc:	0800cc15 	.word	0x0800cc15
 80083d0:	08008861 	.word	0x08008861
 80083d4:	24004e18 	.word	0x24004e18
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	24004e64 	.word	0x24004e64
 80083e0:	08012824 	.word	0x08012824
 80083e4:	08008b01 	.word	0x08008b01

080083e8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b0aa      	sub	sp, #168	@ 0xa8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8008416:	f107 0310 	add.w	r3, r7, #16
 800841a:	2264      	movs	r2, #100	@ 0x64
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f009 faf3 	bl	8011a0a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008424:	4b89      	ldr	r3, [pc, #548]	@ (800864c <low_level_init+0x250>)
 8008426:	4a8a      	ldr	r2, [pc, #552]	@ (8008650 <low_level_init+0x254>)
 8008428:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800842a:	2300      	movs	r3, #0
 800842c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800842e:	2380      	movs	r3, #128	@ 0x80
 8008430:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008432:	23e1      	movs	r3, #225	@ 0xe1
 8008434:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008436:	2300      	movs	r3, #0
 8008438:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800843a:	2300      	movs	r3, #0
 800843c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800843e:	2300      	movs	r3, #0
 8008440:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008442:	4a82      	ldr	r2, [pc, #520]	@ (800864c <low_level_init+0x250>)
 8008444:	f107 0308 	add.w	r3, r7, #8
 8008448:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800844a:	4b80      	ldr	r3, [pc, #512]	@ (800864c <low_level_init+0x250>)
 800844c:	2201      	movs	r2, #1
 800844e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008450:	4b7e      	ldr	r3, [pc, #504]	@ (800864c <low_level_init+0x250>)
 8008452:	4a80      	ldr	r2, [pc, #512]	@ (8008654 <low_level_init+0x258>)
 8008454:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008456:	4b7d      	ldr	r3, [pc, #500]	@ (800864c <low_level_init+0x250>)
 8008458:	4a7f      	ldr	r2, [pc, #508]	@ (8008658 <low_level_init+0x25c>)
 800845a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800845c:	4b7b      	ldr	r3, [pc, #492]	@ (800864c <low_level_init+0x250>)
 800845e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008462:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008464:	4879      	ldr	r0, [pc, #484]	@ (800864c <low_level_init+0x250>)
 8008466:	f7f9 fe81 	bl	800216c <HAL_ETH_Init>
 800846a:	4603      	mov	r3, r0
 800846c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008470:	2238      	movs	r2, #56	@ 0x38
 8008472:	2100      	movs	r1, #0
 8008474:	4879      	ldr	r0, [pc, #484]	@ (800865c <low_level_init+0x260>)
 8008476:	f009 fac8 	bl	8011a0a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800847a:	4b78      	ldr	r3, [pc, #480]	@ (800865c <low_level_init+0x260>)
 800847c:	2221      	movs	r2, #33	@ 0x21
 800847e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008480:	4b76      	ldr	r3, [pc, #472]	@ (800865c <low_level_init+0x260>)
 8008482:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8008486:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008488:	4b74      	ldr	r3, [pc, #464]	@ (800865c <low_level_init+0x260>)
 800848a:	2200      	movs	r2, #0
 800848c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800848e:	4874      	ldr	r0, [pc, #464]	@ (8008660 <low_level_init+0x264>)
 8008490:	f005 f912 	bl	800d6b8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2206      	movs	r2, #6
 8008498:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800849c:	4b6b      	ldr	r3, [pc, #428]	@ (800864c <low_level_init+0x250>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80084a8:	4b68      	ldr	r3, [pc, #416]	@ (800864c <low_level_init+0x250>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	785a      	ldrb	r2, [r3, #1]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80084b4:	4b65      	ldr	r3, [pc, #404]	@ (800864c <low_level_init+0x250>)
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	789a      	ldrb	r2, [r3, #2]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80084c0:	4b62      	ldr	r3, [pc, #392]	@ (800864c <low_level_init+0x250>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	78da      	ldrb	r2, [r3, #3]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80084cc:	4b5f      	ldr	r3, [pc, #380]	@ (800864c <low_level_init+0x250>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	791a      	ldrb	r2, [r3, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80084d8:	4b5c      	ldr	r3, [pc, #368]	@ (800864c <low_level_init+0x250>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	795a      	ldrb	r2, [r3, #5]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80084ea:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80084f2:	f043 030a 	orr.w	r3, r3, #10
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	2001      	movs	r0, #1
 8008504:	f000 fe7c 	bl	8009200 <osSemaphoreNew>
 8008508:	4603      	mov	r3, r0
 800850a:	4a56      	ldr	r2, [pc, #344]	@ (8008664 <low_level_init+0x268>)
 800850c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	2001      	movs	r0, #1
 8008514:	f000 fe74 	bl	8009200 <osSemaphoreNew>
 8008518:	4603      	mov	r3, r0
 800851a:	4a53      	ldr	r2, [pc, #332]	@ (8008668 <low_level_init+0x26c>)
 800851c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800851e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008522:	2224      	movs	r2, #36	@ 0x24
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f009 fa6f 	bl	8011a0a <memset>
  attributes.name = "EthIf";
 800852c:	4b4f      	ldr	r3, [pc, #316]	@ (800866c <low_level_init+0x270>)
 800852e:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008530:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8008534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8008538:	2330      	movs	r3, #48	@ 0x30
 800853a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800853e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8008542:	461a      	mov	r2, r3
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	484a      	ldr	r0, [pc, #296]	@ (8008670 <low_level_init+0x274>)
 8008548:	f000 fc9f 	bl	8008e8a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800854c:	4949      	ldr	r1, [pc, #292]	@ (8008674 <low_level_init+0x278>)
 800854e:	484a      	ldr	r0, [pc, #296]	@ (8008678 <low_level_init+0x27c>)
 8008550:	f7f9 fb03 	bl	8001b5a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008554:	4848      	ldr	r0, [pc, #288]	@ (8008678 <low_level_init+0x27c>)
 8008556:	f7f9 fb32 	bl	8001bbe <LAN8742_Init>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f005 fc7f 	bl	800de64 <netif_set_link_down>
    netif_set_down(netif);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f005 fc16 	bl	800dd98 <netif_set_down>
 800856c:	e06b      	b.n	8008646 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800856e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008572:	2b00      	cmp	r3, #0
 8008574:	d165      	bne.n	8008642 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008576:	4840      	ldr	r0, [pc, #256]	@ (8008678 <low_level_init+0x27c>)
 8008578:	f7f9 fb6e 	bl	8001c58 <LAN8742_GetLinkState>
 800857c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008580:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008584:	2b01      	cmp	r3, #1
 8008586:	dc06      	bgt.n	8008596 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f005 fc6b 	bl	800de64 <netif_set_link_down>
      netif_set_down(netif);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f005 fc02 	bl	800dd98 <netif_set_down>
 8008594:	e057      	b.n	8008646 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8008596:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800859a:	3b02      	subs	r3, #2
 800859c:	2b03      	cmp	r3, #3
 800859e:	d82b      	bhi.n	80085f8 <low_level_init+0x1fc>
 80085a0:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <low_level_init+0x1ac>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085b9 	.word	0x080085b9
 80085ac:	080085cb 	.word	0x080085cb
 80085b0:	080085db 	.word	0x080085db
 80085b4:	080085eb 	.word	0x080085eb
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80085b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80085bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80085c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80085c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80085c8:	e01f      	b.n	800860a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80085d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80085d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80085d8:	e017      	b.n	800860a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80085da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80085de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80085e2:	2300      	movs	r3, #0
 80085e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80085e8:	e00f      	b.n	800860a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80085f0:	2300      	movs	r3, #0
 80085f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80085f6:	e008      	b.n	800860a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80085f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80085fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008604:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008608:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	4619      	mov	r1, r3
 8008610:	480e      	ldr	r0, [pc, #56]	@ (800864c <low_level_init+0x250>)
 8008612:	f7fa fa27 	bl	8002a64 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800861a:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800861c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008622:	f107 0310 	add.w	r3, r7, #16
 8008626:	4619      	mov	r1, r3
 8008628:	4808      	ldr	r0, [pc, #32]	@ (800864c <low_level_init+0x250>)
 800862a:	f7fa fbef 	bl	8002e0c <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800862e:	4807      	ldr	r0, [pc, #28]	@ (800864c <low_level_init+0x250>)
 8008630:	f7f9 fe9a 	bl	8002368 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f005 fb43 	bl	800dcc0 <netif_set_up>
    netif_set_link_up(netif);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f005 fbde 	bl	800ddfc <netif_set_link_up>
 8008640:	e001      	b.n	8008646 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8008642:	f7f8 fd05 	bl	8001050 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008646:	37a8      	adds	r7, #168	@ 0xa8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	24004e98 	.word	0x24004e98
 8008650:	40028000 	.word	0x40028000
 8008654:	30000100 	.word	0x30000100
 8008658:	30000000 	.word	0x30000000
 800865c:	24004f48 	.word	0x24004f48
 8008660:	08013f08 	.word	0x08013f08
 8008664:	24004e90 	.word	0x24004e90
 8008668:	24004e94 	.word	0x24004e94
 800866c:	0801282c 	.word	0x0801282c
 8008670:	0800880d 	.word	0x0800880d
 8008674:	24000010 	.word	0x24000010
 8008678:	24004f80 	.word	0x24004f80

0800867c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b092      	sub	sp, #72	@ 0x48
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008694:	f107 030c 	add.w	r3, r7, #12
 8008698:	2230      	movs	r2, #48	@ 0x30
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f009 f9b4 	bl	8011a0a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80086a2:	f107 030c 	add.w	r3, r7, #12
 80086a6:	2230      	movs	r2, #48	@ 0x30
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f009 f9ad 	bl	8011a0a <memset>

  for(q = p; q != NULL; q = q->next)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086b4:	e045      	b.n	8008742 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80086b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d902      	bls.n	80086c2 <low_level_output+0x46>
      return ERR_IF;
 80086bc:	f06f 030b 	mvn.w	r3, #11
 80086c0:	e07f      	b.n	80087c2 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80086c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c4:	6859      	ldr	r1, [r3, #4]
 80086c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086c8:	4613      	mov	r3, r2
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	3348      	adds	r3, #72	@ 0x48
 80086d2:	443b      	add	r3, r7
 80086d4:	3b3c      	subs	r3, #60	@ 0x3c
 80086d6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80086d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086da:	895b      	ldrh	r3, [r3, #10]
 80086dc:	4619      	mov	r1, r3
 80086de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086e0:	4613      	mov	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	3348      	adds	r3, #72	@ 0x48
 80086ea:	443b      	add	r3, r7
 80086ec:	3b38      	subs	r3, #56	@ 0x38
 80086ee:	6019      	str	r1, [r3, #0]

    if(i>0)
 80086f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d011      	beq.n	800871a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80086f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f8:	1e5a      	subs	r2, r3, #1
 80086fa:	f107 000c 	add.w	r0, r7, #12
 80086fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008700:	460b      	mov	r3, r1
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	440b      	add	r3, r1
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	18c1      	adds	r1, r0, r3
 800870a:	4613      	mov	r3, r2
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	3348      	adds	r3, #72	@ 0x48
 8008714:	443b      	add	r3, r7
 8008716:	3b34      	subs	r3, #52	@ 0x34
 8008718:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800871a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d109      	bne.n	8008736 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008724:	4613      	mov	r3, r2
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	3348      	adds	r3, #72	@ 0x48
 800872e:	443b      	add	r3, r7
 8008730:	3b34      	subs	r3, #52	@ 0x34
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008738:	3301      	adds	r3, #1
 800873a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800873c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	643b      	str	r3, [r7, #64]	@ 0x40
 8008742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1b6      	bne.n	80086b6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	891b      	ldrh	r3, [r3, #8]
 800874c:	461a      	mov	r2, r3
 800874e:	4b1f      	ldr	r3, [pc, #124]	@ (80087cc <low_level_output+0x150>)
 8008750:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008752:	4a1e      	ldr	r2, [pc, #120]	@ (80087cc <low_level_output+0x150>)
 8008754:	f107 030c 	add.w	r3, r7, #12
 8008758:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800875a:	4a1c      	ldr	r2, [pc, #112]	@ (80087cc <low_level_output+0x150>)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8008760:	6838      	ldr	r0, [r7, #0]
 8008762:	f005 ff83 	bl	800e66c <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8008766:	4919      	ldr	r1, [pc, #100]	@ (80087cc <low_level_output+0x150>)
 8008768:	4819      	ldr	r0, [pc, #100]	@ (80087d0 <low_level_output+0x154>)
 800876a:	f7f9 fee9 	bl	8002540 <HAL_ETH_Transmit_IT>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d103      	bne.n	800877c <low_level_output+0x100>
    {
      errval = ERR_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800877a:	e01b      	b.n	80087b4 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800877c:	4814      	ldr	r0, [pc, #80]	@ (80087d0 <low_level_output+0x154>)
 800877e:	f7fa fbaf 	bl	8002ee0 <HAL_ETH_GetError>
 8008782:	4603      	mov	r3, r0
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <low_level_output+0x158>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fdbd 	bl	8009314 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800879a:	480d      	ldr	r0, [pc, #52]	@ (80087d0 <low_level_output+0x154>)
 800879c:	f7fa f857 	bl	800284e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80087a0:	23fe      	movs	r3, #254	@ 0xfe
 80087a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80087a6:	e005      	b.n	80087b4 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80087a8:	6838      	ldr	r0, [r7, #0]
 80087aa:	f005 feb9 	bl	800e520 <pbuf_free>
        errval =  ERR_IF;
 80087ae:	23f4      	movs	r3, #244	@ 0xf4
 80087b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80087b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80087b8:	f113 0f02 	cmn.w	r3, #2
 80087bc:	d0d3      	beq.n	8008766 <low_level_output+0xea>

  return errval;
 80087be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3748      	adds	r7, #72	@ 0x48
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	24004f48 	.word	0x24004f48
 80087d0:	24004e98 	.word	0x24004e98
 80087d4:	24004e94 	.word	0x24004e94

080087d8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80087e4:	4b07      	ldr	r3, [pc, #28]	@ (8008804 <low_level_input+0x2c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d105      	bne.n	80087f8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80087ec:	f107 030c 	add.w	r3, r7, #12
 80087f0:	4619      	mov	r1, r3
 80087f2:	4805      	ldr	r0, [pc, #20]	@ (8008808 <low_level_input+0x30>)
 80087f4:	f7f9 fef5 	bl	80025e2 <HAL_ETH_ReadData>
  }

  return p;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	24004e8c 	.word	0x24004e8c
 8008808:	24004e98 	.word	0x24004e98

0800880c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800881c:	4b0f      	ldr	r3, [pc, #60]	@ (800885c <ethernetif_input+0x50>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f04f 31ff 	mov.w	r1, #4294967295
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fd75 	bl	8009314 <osSemaphoreAcquire>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f5      	bne.n	800881c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008830:	68b8      	ldr	r0, [r7, #8]
 8008832:	f7ff ffd1 	bl	80087d8 <low_level_input>
 8008836:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	4798      	blx	r3
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f005 fe66 	bl	800e520 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1ea      	bne.n	8008830 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800885a:	e7df      	b.n	800881c <ethernetif_input+0x10>
 800885c:	24004e90 	.word	0x24004e90

08008860 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <ethernetif_init+0x1c>
 800886e:	4b0e      	ldr	r3, [pc, #56]	@ (80088a8 <ethernetif_init+0x48>)
 8008870:	f240 2222 	movw	r2, #546	@ 0x222
 8008874:	490d      	ldr	r1, [pc, #52]	@ (80088ac <ethernetif_init+0x4c>)
 8008876:	480e      	ldr	r0, [pc, #56]	@ (80088b0 <ethernetif_init+0x50>)
 8008878:	f009 f862 	bl	8011940 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2273      	movs	r2, #115	@ 0x73
 8008880:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2274      	movs	r2, #116	@ 0x74
 8008888:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a09      	ldr	r2, [pc, #36]	@ (80088b4 <ethernetif_init+0x54>)
 8008890:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a08      	ldr	r2, [pc, #32]	@ (80088b8 <ethernetif_init+0x58>)
 8008896:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff fdaf 	bl	80083fc <low_level_init>

  return ERR_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	08012834 	.word	0x08012834
 80088ac:	08012850 	.word	0x08012850
 80088b0:	08012860 	.word	0x08012860
 80088b4:	0800f831 	.word	0x0800f831
 80088b8:	0800867d 	.word	0x0800867d

080088bc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	4809      	ldr	r0, [pc, #36]	@ (80088f0 <pbuf_free_custom+0x34>)
 80088cc:	f004 ffe4 	bl	800d898 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80088d0:	4b08      	ldr	r3, [pc, #32]	@ (80088f4 <pbuf_free_custom+0x38>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d107      	bne.n	80088e8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <pbuf_free_custom+0x38>)
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80088de:	4b06      	ldr	r3, [pc, #24]	@ (80088f8 <pbuf_free_custom+0x3c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fd68 	bl	80093b8 <osSemaphoreRelease>
  }
}
 80088e8:	bf00      	nop
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	08013f08 	.word	0x08013f08
 80088f4:	24004e8c 	.word	0x24004e8c
 80088f8:	24004e90 	.word	0x24004e90

080088fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008900:	f7f9 fab8 	bl	8001e74 <HAL_GetTick>
 8008904:	4603      	mov	r3, r0
}
 8008906:	4618      	mov	r0, r3
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08e      	sub	sp, #56	@ 0x38
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a49      	ldr	r2, [pc, #292]	@ (8008a50 <HAL_ETH_MspInit+0x144>)
 800892a:	4293      	cmp	r3, r2
 800892c:	f040 808b 	bne.w	8008a46 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008930:	4b48      	ldr	r3, [pc, #288]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008932:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008936:	4a47      	ldr	r2, [pc, #284]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800893c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008940:	4b44      	ldr	r3, [pc, #272]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800894a:	623b      	str	r3, [r7, #32]
 800894c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800894e:	4b41      	ldr	r3, [pc, #260]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008954:	4a3f      	ldr	r2, [pc, #252]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800895a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800895e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008968:	61fb      	str	r3, [r7, #28]
 800896a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800896c:	4b39      	ldr	r3, [pc, #228]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 800896e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008972:	4a38      	ldr	r2, [pc, #224]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008978:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800897c:	4b35      	ldr	r3, [pc, #212]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 800897e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008986:	61bb      	str	r3, [r7, #24]
 8008988:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800898a:	4b32      	ldr	r3, [pc, #200]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 800898c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008990:	4a30      	ldr	r2, [pc, #192]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 8008992:	f043 0304 	orr.w	r3, r3, #4
 8008996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800899a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 800899c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089a8:	4b2a      	ldr	r3, [pc, #168]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 80089aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089ae:	4a29      	ldr	r2, [pc, #164]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80089b8:	4b26      	ldr	r3, [pc, #152]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 80089ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089c6:	4b23      	ldr	r3, [pc, #140]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 80089c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089cc:	4a21      	ldr	r2, [pc, #132]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 80089ce:	f043 0302 	orr.w	r3, r3, #2
 80089d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80089d6:	4b1f      	ldr	r3, [pc, #124]	@ (8008a54 <HAL_ETH_MspInit+0x148>)
 80089d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80089e4:	2332      	movs	r3, #50	@ 0x32
 80089e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e8:	2302      	movs	r3, #2
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089f0:	2303      	movs	r3, #3
 80089f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089f4:	230b      	movs	r3, #11
 80089f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089fc:	4619      	mov	r1, r3
 80089fe:	4816      	ldr	r0, [pc, #88]	@ (8008a58 <HAL_ETH_MspInit+0x14c>)
 8008a00:	f7fa fffe 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008a04:	2386      	movs	r3, #134	@ 0x86
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a10:	2303      	movs	r3, #3
 8008a12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a14:	230b      	movs	r3, #11
 8008a16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	480f      	ldr	r0, [pc, #60]	@ (8008a5c <HAL_ETH_MspInit+0x150>)
 8008a20:	f7fa ffee 	bl	8003a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008a24:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a32:	2303      	movs	r3, #3
 8008a34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a36:	230b      	movs	r3, #11
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4807      	ldr	r0, [pc, #28]	@ (8008a60 <HAL_ETH_MspInit+0x154>)
 8008a42:	f7fa ffdd 	bl	8003a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008a46:	bf00      	nop
 8008a48:	3738      	adds	r7, #56	@ 0x38
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40028000 	.word	0x40028000
 8008a54:	58024400 	.word	0x58024400
 8008a58:	58020800 	.word	0x58020800
 8008a5c:	58020000 	.word	0x58020000
 8008a60:	58020400 	.word	0x58020400

08008a64 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008a68:	4802      	ldr	r0, [pc, #8]	@ (8008a74 <ETH_PHY_IO_Init+0x10>)
 8008a6a:	f7fa f9e9 	bl	8002e40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	24004e98 	.word	0x24004e98

08008a78 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  return 0;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	68f9      	ldr	r1, [r7, #12]
 8008a9a:	4807      	ldr	r0, [pc, #28]	@ (8008ab8 <ETH_PHY_IO_ReadReg+0x30>)
 8008a9c:	f7f9 ff3a 	bl	8002914 <HAL_ETH_ReadPHYRegister>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	e000      	b.n	8008aae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	24004e98 	.word	0x24004e98

08008abc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	68f9      	ldr	r1, [r7, #12]
 8008ace:	4807      	ldr	r0, [pc, #28]	@ (8008aec <ETH_PHY_IO_WriteReg+0x30>)
 8008ad0:	f7f9 ff74 	bl	80029bc <HAL_ETH_WritePHYRegister>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	e000      	b.n	8008ae2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	24004e98 	.word	0x24004e98

08008af0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008af4:	f7f9 f9be 	bl	8001e74 <HAL_GetTick>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b0a0      	sub	sp, #128	@ 0x80
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008b08:	f107 0308 	add.w	r3, r7, #8
 8008b0c:	2264      	movs	r2, #100	@ 0x64
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4618      	mov	r0, r3
 8008b12:	f008 ff7a 	bl	8011a0a <memset>
  int32_t PHYLinkState = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b1e:	2300      	movs	r3, #0
 8008b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b22:	2300      	movs	r3, #0
 8008b24:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008b2a:	483a      	ldr	r0, [pc, #232]	@ (8008c14 <ethernet_link_thread+0x114>)
 8008b2c:	f7f9 f894 	bl	8001c58 <LAN8742_GetLinkState>
 8008b30:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008b38:	089b      	lsrs	r3, r3, #2
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <ethernet_link_thread+0x5e>
 8008b44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	dc09      	bgt.n	8008b5e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008b4a:	4833      	ldr	r0, [pc, #204]	@ (8008c18 <ethernet_link_thread+0x118>)
 8008b4c:	f7f9 fc80 	bl	8002450 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008b50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008b52:	f005 f921 	bl	800dd98 <netif_set_down>
    netif_set_link_down(netif);
 8008b56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008b58:	f005 f984 	bl	800de64 <netif_set_link_down>
 8008b5c:	e055      	b.n	8008c0a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d14e      	bne.n	8008c0a <ethernet_link_thread+0x10a>
 8008b6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	dd4b      	ble.n	8008c0a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b74:	3b02      	subs	r3, #2
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d82a      	bhi.n	8008bd0 <ethernet_link_thread+0xd0>
 8008b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b80 <ethernet_link_thread+0x80>)
 8008b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008ba3 	.word	0x08008ba3
 8008b88:	08008bb3 	.word	0x08008bb3
 8008b8c:	08008bc3 	.word	0x08008bc3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008b90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008b94:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008b96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008ba0:	e017      	b.n	8008bd2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008ba6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008baa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008bac:	2301      	movs	r3, #1
 8008bae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008bb0:	e00f      	b.n	8008bd2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008bb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008bb6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008bc0:	e007      	b.n	8008bd2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008bce:	e000      	b.n	8008bd2 <ethernet_link_thread+0xd2>
    default:
      break;
 8008bd0:	bf00      	nop
    }

    if(linkchanged)
 8008bd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d018      	beq.n	8008c0a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008bd8:	f107 0308 	add.w	r3, r7, #8
 8008bdc:	4619      	mov	r1, r3
 8008bde:	480e      	ldr	r0, [pc, #56]	@ (8008c18 <ethernet_link_thread+0x118>)
 8008be0:	f7f9 ff40 	bl	8002a64 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008be6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008be8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bea:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4809      	ldr	r0, [pc, #36]	@ (8008c18 <ethernet_link_thread+0x118>)
 8008bf4:	f7fa f90a 	bl	8002e0c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008bf8:	4807      	ldr	r0, [pc, #28]	@ (8008c18 <ethernet_link_thread+0x118>)
 8008bfa:	f7f9 fbb5 	bl	8002368 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008bfe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c00:	f005 f85e 	bl	800dcc0 <netif_set_up>
      netif_set_link_up(netif);
 8008c04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c06:	f005 f8f9 	bl	800ddfc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008c0a:	2064      	movs	r0, #100	@ 0x64
 8008c0c:	f000 f9cf 	bl	8008fae <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008c10:	e78b      	b.n	8008b2a <ethernet_link_thread+0x2a>
 8008c12:	bf00      	nop
 8008c14:	24004f80 	.word	0x24004f80
 8008c18:	24004e98 	.word	0x24004e98

08008c1c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008c24:	4812      	ldr	r0, [pc, #72]	@ (8008c70 <HAL_ETH_RxAllocateCallback+0x54>)
 8008c26:	f004 fdc3 	bl	800d7b0 <memp_malloc_pool>
 8008c2a:	60f8      	str	r0, [r7, #12]
  if (p)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d014      	beq.n	8008c5c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f103 0220 	add.w	r2, r3, #32
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c74 <HAL_ETH_RxAllocateCallback+0x58>)
 8008c40:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008c4a:	9201      	str	r2, [sp, #4]
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2241      	movs	r2, #65	@ 0x41
 8008c52:	2100      	movs	r1, #0
 8008c54:	2000      	movs	r0, #0
 8008c56:	f005 faa9 	bl	800e1ac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008c5a:	e005      	b.n	8008c68 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008c5c:	4b06      	ldr	r3, [pc, #24]	@ (8008c78 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	08013f08 	.word	0x08013f08
 8008c74:	080088bd 	.word	0x080088bd
 8008c78:	24004e8c 	.word	0x24004e8c

08008c7c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b08d      	sub	sp, #52	@ 0x34
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3b20      	subs	r3, #32
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008caa:	887a      	ldrh	r2, [r7, #2]
 8008cac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	e003      	b.n	8008cc6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cc4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cd2:	e009      	b.n	8008ce8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd6:	891a      	ldrh	r2, [r3, #8]
 8008cd8:	887b      	ldrh	r3, [r7, #2]
 8008cda:	4413      	add	r3, r2
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f2      	bne.n	8008cd4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008cee:	887b      	ldrh	r3, [r7, #2]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	623a      	str	r2, [r7, #32]
 8008cf4:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dd1d      	ble.n	8008d38 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	f003 021f 	and.w	r2, r3, #31
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d0c:	f3bf 8f4f 	dsb	sy
}
 8008d10:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008d12:	4a0d      	ldr	r2, [pc, #52]	@ (8008d48 <HAL_ETH_RxLinkCallback+0xcc>)
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	3320      	adds	r3, #32
 8008d1e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	3b20      	subs	r3, #32
 8008d24:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dcf2      	bgt.n	8008d12 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8008d2c:	f3bf 8f4f 	dsb	sy
}
 8008d30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008d32:	f3bf 8f6f 	isb	sy
}
 8008d36:	bf00      	nop
}
 8008d38:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008d3a:	bf00      	nop
 8008d3c:	3734      	adds	r7, #52	@ 0x34
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	e000ed00 	.word	0xe000ed00

08008d4c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f005 fbe3 	bl	800e520 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <__NVIC_SetPriority>:
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	db0a      	blt.n	8008d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	490c      	ldr	r1, [pc, #48]	@ (8008db0 <__NVIC_SetPriority+0x4c>)
 8008d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d82:	0112      	lsls	r2, r2, #4
 8008d84:	b2d2      	uxtb	r2, r2
 8008d86:	440b      	add	r3, r1
 8008d88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008d8c:	e00a      	b.n	8008da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	4908      	ldr	r1, [pc, #32]	@ (8008db4 <__NVIC_SetPriority+0x50>)
 8008d94:	88fb      	ldrh	r3, [r7, #6]
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	0112      	lsls	r2, r2, #4
 8008d9e:	b2d2      	uxtb	r2, r2
 8008da0:	440b      	add	r3, r1
 8008da2:	761a      	strb	r2, [r3, #24]
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	e000e100 	.word	0xe000e100
 8008db4:	e000ed00 	.word	0xe000ed00

08008db8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	f06f 0004 	mvn.w	r0, #4
 8008dc2:	f7ff ffcf 	bl	8008d64 <__NVIC_SetPriority>
#endif
}
 8008dc6:	bf00      	nop
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd2:	f3ef 8305 	mrs	r3, IPSR
 8008dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8008dd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008dde:	f06f 0305 	mvn.w	r3, #5
 8008de2:	607b      	str	r3, [r7, #4]
 8008de4:	e00c      	b.n	8008e00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008de6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e10 <osKernelInitialize+0x44>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dee:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <osKernelInitialize+0x44>)
 8008df0:	2201      	movs	r2, #1
 8008df2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	e002      	b.n	8008e00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e00:	687b      	ldr	r3, [r7, #4]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	24004fa0 	.word	0x24004fa0

08008e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e1a:	f3ef 8305 	mrs	r3, IPSR
 8008e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e26:	f06f 0305 	mvn.w	r3, #5
 8008e2a:	607b      	str	r3, [r7, #4]
 8008e2c:	e010      	b.n	8008e50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <osKernelStart+0x48>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d109      	bne.n	8008e4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e36:	f7ff ffbf 	bl	8008db8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e3a:	4b08      	ldr	r3, [pc, #32]	@ (8008e5c <osKernelStart+0x48>)
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e40:	f001 fff0 	bl	800ae24 <vTaskStartScheduler>
      stat = osOK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	607b      	str	r3, [r7, #4]
 8008e48:	e002      	b.n	8008e50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e50:	687b      	ldr	r3, [r7, #4]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	24004fa0 	.word	0x24004fa0

08008e60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e66:	f3ef 8305 	mrs	r3, IPSR
 8008e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8008e6c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008e72:	f002 f903 	bl	800b07c <xTaskGetTickCountFromISR>
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	e002      	b.n	8008e80 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008e7a:	f002 f8ef 	bl	800b05c <xTaskGetTickCount>
 8008e7e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008e80:	687b      	ldr	r3, [r7, #4]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b08e      	sub	sp, #56	@ 0x38
 8008e8e:	af04      	add	r7, sp, #16
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e9a:	f3ef 8305 	mrs	r3, IPSR
 8008e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d17e      	bne.n	8008fa4 <osThreadNew+0x11a>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d07b      	beq.n	8008fa4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008eac:	2380      	movs	r3, #128	@ 0x80
 8008eae:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008eb0:	2318      	movs	r3, #24
 8008eb2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d045      	beq.n	8008f50 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <osThreadNew+0x48>
        name = attr->name;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d008      	beq.n	8008ef8 <osThreadNew+0x6e>
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	2b38      	cmp	r3, #56	@ 0x38
 8008eea:	d805      	bhi.n	8008ef8 <osThreadNew+0x6e>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <osThreadNew+0x72>
        return (NULL);
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e054      	b.n	8008fa6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	089b      	lsrs	r3, r3, #2
 8008f0a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00e      	beq.n	8008f32 <osThreadNew+0xa8>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	2ba7      	cmp	r3, #167	@ 0xa7
 8008f1a:	d90a      	bls.n	8008f32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d006      	beq.n	8008f32 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <osThreadNew+0xa8>
        mem = 1;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	61bb      	str	r3, [r7, #24]
 8008f30:	e010      	b.n	8008f54 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10c      	bne.n	8008f54 <osThreadNew+0xca>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d108      	bne.n	8008f54 <osThreadNew+0xca>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <osThreadNew+0xca>
          mem = 0;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	e001      	b.n	8008f54 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d110      	bne.n	8008f7c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f62:	9202      	str	r2, [sp, #8]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	6a3a      	ldr	r2, [r7, #32]
 8008f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f001 fd63 	bl	800aa3c <xTaskCreateStatic>
 8008f76:	4603      	mov	r3, r0
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e013      	b.n	8008fa4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d110      	bne.n	8008fa4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f107 0310 	add.w	r3, r7, #16
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f001 fdb1 	bl	800aafc <xTaskCreate>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d001      	beq.n	8008fa4 <osThreadNew+0x11a>
            hTask = NULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fa4:	693b      	ldr	r3, [r7, #16]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3728      	adds	r7, #40	@ 0x28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb6:	f3ef 8305 	mrs	r3, IPSR
 8008fba:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osDelay+0x1c>
    stat = osErrorISR;
 8008fc2:	f06f 0305 	mvn.w	r3, #5
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	e007      	b.n	8008fda <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <osDelay+0x2c>
      vTaskDelay(ticks);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 feef 	bl	800adb8 <vTaskDelay>
    }
  }

  return (stat);
 8008fda:	68fb      	ldr	r3, [r7, #12]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ff0:	f3ef 8305 	mrs	r3, IPSR
 8008ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ff6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d174      	bne.n	80090e6 <osMutexNew+0x102>
    if (attr != NULL) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <osMutexNew+0x26>
      type = attr->attr_bits;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	e001      	b.n	800900e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <osMutexNew+0x3a>
      rmtx = 1U;
 8009018:	2301      	movs	r3, #1
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	e001      	b.n	8009022 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d15c      	bne.n	80090e6 <osMutexNew+0x102>
      mem = -1;
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d015      	beq.n	8009064 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <osMutexNew+0x6a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	2b4f      	cmp	r3, #79	@ 0x4f
 8009046:	d902      	bls.n	800904e <osMutexNew+0x6a>
          mem = 1;
 8009048:	2301      	movs	r3, #1
 800904a:	613b      	str	r3, [r7, #16]
 800904c:	e00c      	b.n	8009068 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d108      	bne.n	8009068 <osMutexNew+0x84>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <osMutexNew+0x84>
            mem = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	e001      	b.n	8009068 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d112      	bne.n	8009094 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4619      	mov	r1, r3
 800907a:	2004      	movs	r0, #4
 800907c:	f000 fd71 	bl	8009b62 <xQueueCreateMutexStatic>
 8009080:	61f8      	str	r0, [r7, #28]
 8009082:	e016      	b.n	80090b2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4619      	mov	r1, r3
 800908a:	2001      	movs	r0, #1
 800908c:	f000 fd69 	bl	8009b62 <xQueueCreateMutexStatic>
 8009090:	61f8      	str	r0, [r7, #28]
 8009092:	e00e      	b.n	80090b2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80090a0:	2004      	movs	r0, #4
 80090a2:	f000 fd46 	bl	8009b32 <xQueueCreateMutex>
 80090a6:	61f8      	str	r0, [r7, #28]
 80090a8:	e003      	b.n	80090b2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80090aa:	2001      	movs	r0, #1
 80090ac:	f000 fd41 	bl	8009b32 <xQueueCreateMutex>
 80090b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00c      	beq.n	80090d2 <osMutexNew+0xee>
        if (attr != NULL) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <osMutexNew+0xe2>
          name = attr->name;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e001      	b.n	80090ca <osMutexNew+0xe6>
        } else {
          name = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	69f8      	ldr	r0, [r7, #28]
 80090ce:	f001 fc2d 	bl	800a92c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d006      	beq.n	80090e6 <osMutexNew+0x102>
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f043 0301 	orr.w	r3, r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910e:	f3ef 8305 	mrs	r3, IPSR
 8009112:	60bb      	str	r3, [r7, #8]
  return(result);
 8009114:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800911a:	f06f 0305 	mvn.w	r3, #5
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e02c      	b.n	800917c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009128:	f06f 0303 	mvn.w	r3, #3
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	e025      	b.n	800917c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d011      	beq.n	800915a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f000 fd62 	bl	8009c02 <xQueueTakeMutexRecursive>
 800913e:	4603      	mov	r3, r0
 8009140:	2b01      	cmp	r3, #1
 8009142:	d01b      	beq.n	800917c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800914a:	f06f 0301 	mvn.w	r3, #1
 800914e:	617b      	str	r3, [r7, #20]
 8009150:	e014      	b.n	800917c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009152:	f06f 0302 	mvn.w	r3, #2
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	e010      	b.n	800917c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6938      	ldr	r0, [r7, #16]
 800915e:	f001 f907 	bl	800a370 <xQueueSemaphoreTake>
 8009162:	4603      	mov	r3, r0
 8009164:	2b01      	cmp	r3, #1
 8009166:	d009      	beq.n	800917c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800916e:	f06f 0301 	mvn.w	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
 8009174:	e002      	b.n	800917c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009176:	f06f 0302 	mvn.w	r3, #2
 800917a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800917c:	697b      	ldr	r3, [r7, #20]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a2:	f3ef 8305 	mrs	r3, IPSR
 80091a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80091a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <osMutexRelease+0x30>
    stat = osErrorISR;
 80091ae:	f06f 0305 	mvn.w	r3, #5
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	e01f      	b.n	80091f6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80091bc:	f06f 0303 	mvn.w	r3, #3
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	e018      	b.n	80091f6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80091ca:	6938      	ldr	r0, [r7, #16]
 80091cc:	f000 fce4 	bl	8009b98 <xQueueGiveMutexRecursive>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d00f      	beq.n	80091f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80091d6:	f06f 0302 	mvn.w	r3, #2
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e00b      	b.n	80091f6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80091de:	2300      	movs	r3, #0
 80091e0:	2200      	movs	r2, #0
 80091e2:	2100      	movs	r1, #0
 80091e4:	6938      	ldr	r0, [r7, #16]
 80091e6:	f000 fdb1 	bl	8009d4c <xQueueGenericSend>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d002      	beq.n	80091f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80091f0:	f06f 0302 	mvn.w	r3, #2
 80091f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80091f6:	697b      	ldr	r3, [r7, #20]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009200:	b580      	push	{r7, lr}
 8009202:	b08a      	sub	sp, #40	@ 0x28
 8009204:	af02      	add	r7, sp, #8
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009210:	f3ef 8305 	mrs	r3, IPSR
 8009214:	613b      	str	r3, [r7, #16]
  return(result);
 8009216:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009218:	2b00      	cmp	r3, #0
 800921a:	d175      	bne.n	8009308 <osSemaphoreNew+0x108>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d072      	beq.n	8009308 <osSemaphoreNew+0x108>
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	429a      	cmp	r2, r3
 8009228:	d86e      	bhi.n	8009308 <osSemaphoreNew+0x108>
    mem = -1;
 800922a:	f04f 33ff 	mov.w	r3, #4294967295
 800922e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d015      	beq.n	8009262 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d006      	beq.n	800924c <osSemaphoreNew+0x4c>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	2b4f      	cmp	r3, #79	@ 0x4f
 8009244:	d902      	bls.n	800924c <osSemaphoreNew+0x4c>
        mem = 1;
 8009246:	2301      	movs	r3, #1
 8009248:	61bb      	str	r3, [r7, #24]
 800924a:	e00c      	b.n	8009266 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d108      	bne.n	8009266 <osSemaphoreNew+0x66>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <osSemaphoreNew+0x66>
          mem = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	61bb      	str	r3, [r7, #24]
 8009260:	e001      	b.n	8009266 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926c:	d04c      	beq.n	8009308 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d128      	bne.n	80092c6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d10a      	bne.n	8009290 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	2203      	movs	r2, #3
 8009280:	9200      	str	r2, [sp, #0]
 8009282:	2200      	movs	r2, #0
 8009284:	2100      	movs	r1, #0
 8009286:	2001      	movs	r0, #1
 8009288:	f000 fb5e 	bl	8009948 <xQueueGenericCreateStatic>
 800928c:	61f8      	str	r0, [r7, #28]
 800928e:	e005      	b.n	800929c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009290:	2203      	movs	r2, #3
 8009292:	2100      	movs	r1, #0
 8009294:	2001      	movs	r0, #1
 8009296:	f000 fbd4 	bl	8009a42 <xQueueGenericCreate>
 800929a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d022      	beq.n	80092e8 <osSemaphoreNew+0xe8>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01f      	beq.n	80092e8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092a8:	2300      	movs	r3, #0
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	69f8      	ldr	r0, [r7, #28]
 80092b0:	f000 fd4c 	bl	8009d4c <xQueueGenericSend>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d016      	beq.n	80092e8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80092ba:	69f8      	ldr	r0, [r7, #28]
 80092bc:	f001 f9ea 	bl	800a694 <vQueueDelete>
            hSemaphore = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]
 80092c4:	e010      	b.n	80092e8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d108      	bne.n	80092de <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	461a      	mov	r2, r3
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 fccb 	bl	8009c70 <xQueueCreateCountingSemaphoreStatic>
 80092da:	61f8      	str	r0, [r7, #28]
 80092dc:	e004      	b.n	80092e8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fcfe 	bl	8009ce2 <xQueueCreateCountingSemaphore>
 80092e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00c      	beq.n	8009308 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <osSemaphoreNew+0xfc>
          name = attr->name;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	e001      	b.n	8009300 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009300:	6979      	ldr	r1, [r7, #20]
 8009302:	69f8      	ldr	r0, [r7, #28]
 8009304:	f001 fb12 	bl	800a92c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009308:	69fb      	ldr	r3, [r7, #28]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d103      	bne.n	8009334 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800932c:	f06f 0303 	mvn.w	r3, #3
 8009330:	617b      	str	r3, [r7, #20]
 8009332:	e039      	b.n	80093a8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009334:	f3ef 8305 	mrs	r3, IPSR
 8009338:	60fb      	str	r3, [r7, #12]
  return(result);
 800933a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800933c:	2b00      	cmp	r3, #0
 800933e:	d022      	beq.n	8009386 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009346:	f06f 0303 	mvn.w	r3, #3
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	e02c      	b.n	80093a8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009352:	f107 0308 	add.w	r3, r7, #8
 8009356:	461a      	mov	r2, r3
 8009358:	2100      	movs	r1, #0
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f001 f918 	bl	800a590 <xQueueReceiveFromISR>
 8009360:	4603      	mov	r3, r0
 8009362:	2b01      	cmp	r3, #1
 8009364:	d003      	beq.n	800936e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009366:	f06f 0302 	mvn.w	r3, #2
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	e01c      	b.n	80093a8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d019      	beq.n	80093a8 <osSemaphoreAcquire+0x94>
 8009374:	4b0f      	ldr	r3, [pc, #60]	@ (80093b4 <osSemaphoreAcquire+0xa0>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	e010      	b.n	80093a8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6938      	ldr	r0, [r7, #16]
 800938a:	f000 fff1 	bl	800a370 <xQueueSemaphoreTake>
 800938e:	4603      	mov	r3, r0
 8009390:	2b01      	cmp	r3, #1
 8009392:	d009      	beq.n	80093a8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800939a:	f06f 0301 	mvn.w	r3, #1
 800939e:	617b      	str	r3, [r7, #20]
 80093a0:	e002      	b.n	80093a8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80093a2:	f06f 0302 	mvn.w	r3, #2
 80093a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80093a8:	697b      	ldr	r3, [r7, #20]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	e000ed04 	.word	0xe000ed04

080093b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d103      	bne.n	80093d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80093ce:	f06f 0303 	mvn.w	r3, #3
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e02c      	b.n	8009430 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093d6:	f3ef 8305 	mrs	r3, IPSR
 80093da:	60fb      	str	r3, [r7, #12]
  return(result);
 80093dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d01a      	beq.n	8009418 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	4619      	mov	r1, r3
 80093ec:	6938      	ldr	r0, [r7, #16]
 80093ee:	f000 fe4d 	bl	800a08c <xQueueGiveFromISR>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d003      	beq.n	8009400 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80093f8:	f06f 0302 	mvn.w	r3, #2
 80093fc:	617b      	str	r3, [r7, #20]
 80093fe:	e017      	b.n	8009430 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d014      	beq.n	8009430 <osSemaphoreRelease+0x78>
 8009406:	4b0d      	ldr	r3, [pc, #52]	@ (800943c <osSemaphoreRelease+0x84>)
 8009408:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	e00b      	b.n	8009430 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009418:	2300      	movs	r3, #0
 800941a:	2200      	movs	r2, #0
 800941c:	2100      	movs	r1, #0
 800941e:	6938      	ldr	r0, [r7, #16]
 8009420:	f000 fc94 	bl	8009d4c <xQueueGenericSend>
 8009424:	4603      	mov	r3, r0
 8009426:	2b01      	cmp	r3, #1
 8009428:	d002      	beq.n	8009430 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800942a:	f06f 0302 	mvn.w	r3, #2
 800942e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009430:	697b      	ldr	r3, [r7, #20]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	@ 0x28
 8009444:	af02      	add	r7, sp, #8
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009450:	f3ef 8305 	mrs	r3, IPSR
 8009454:	613b      	str	r3, [r7, #16]
  return(result);
 8009456:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009458:	2b00      	cmp	r3, #0
 800945a:	d15f      	bne.n	800951c <osMessageQueueNew+0xdc>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d05c      	beq.n	800951c <osMessageQueueNew+0xdc>
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d059      	beq.n	800951c <osMessageQueueNew+0xdc>
    mem = -1;
 8009468:	f04f 33ff 	mov.w	r3, #4294967295
 800946c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d029      	beq.n	80094c8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d012      	beq.n	80094a2 <osMessageQueueNew+0x62>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2b4f      	cmp	r3, #79	@ 0x4f
 8009482:	d90e      	bls.n	80094a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00a      	beq.n	80094a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	695a      	ldr	r2, [r3, #20]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <osMessageQueueNew+0x62>
        mem = 1;
 800949c:	2301      	movs	r3, #1
 800949e:	61bb      	str	r3, [r7, #24]
 80094a0:	e014      	b.n	80094cc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d110      	bne.n	80094cc <osMessageQueueNew+0x8c>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10c      	bne.n	80094cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d108      	bne.n	80094cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <osMessageQueueNew+0x8c>
          mem = 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
 80094c6:	e001      	b.n	80094cc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d10b      	bne.n	80094ea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	2100      	movs	r1, #0
 80094dc:	9100      	str	r1, [sp, #0]
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 fa31 	bl	8009948 <xQueueGenericCreateStatic>
 80094e6:	61f8      	str	r0, [r7, #28]
 80094e8:	e008      	b.n	80094fc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d105      	bne.n	80094fc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80094f0:	2200      	movs	r2, #0
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 faa4 	bl	8009a42 <xQueueGenericCreate>
 80094fa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00c      	beq.n	800951c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d003      	beq.n	8009510 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	e001      	b.n	8009514 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009514:	6979      	ldr	r1, [r7, #20]
 8009516:	69f8      	ldr	r0, [r7, #28]
 8009518:	f001 fa08 	bl	800a92c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800951c:	69fb      	ldr	r3, [r7, #28]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800953c:	2300      	movs	r3, #0
 800953e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009540:	f3ef 8305 	mrs	r3, IPSR
 8009544:	617b      	str	r3, [r7, #20]
  return(result);
 8009546:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009548:	2b00      	cmp	r3, #0
 800954a:	d028      	beq.n	800959e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d005      	beq.n	800955e <osMessageQueuePut+0x36>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <osMessageQueuePut+0x36>
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800955e:	f06f 0303 	mvn.w	r3, #3
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	e038      	b.n	80095d8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800956a:	f107 0210 	add.w	r2, r7, #16
 800956e:	2300      	movs	r3, #0
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	69b8      	ldr	r0, [r7, #24]
 8009574:	f000 fcec 	bl	8009f50 <xQueueGenericSendFromISR>
 8009578:	4603      	mov	r3, r0
 800957a:	2b01      	cmp	r3, #1
 800957c:	d003      	beq.n	8009586 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800957e:	f06f 0302 	mvn.w	r3, #2
 8009582:	61fb      	str	r3, [r7, #28]
 8009584:	e028      	b.n	80095d8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d025      	beq.n	80095d8 <osMessageQueuePut+0xb0>
 800958c:	4b15      	ldr	r3, [pc, #84]	@ (80095e4 <osMessageQueuePut+0xbc>)
 800958e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	e01c      	b.n	80095d8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <osMessageQueuePut+0x82>
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d103      	bne.n	80095b2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80095aa:	f06f 0303 	mvn.w	r3, #3
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e012      	b.n	80095d8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80095b2:	2300      	movs	r3, #0
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	68b9      	ldr	r1, [r7, #8]
 80095b8:	69b8      	ldr	r0, [r7, #24]
 80095ba:	f000 fbc7 	bl	8009d4c <xQueueGenericSend>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d009      	beq.n	80095d8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80095ca:	f06f 0301 	mvn.w	r3, #1
 80095ce:	61fb      	str	r3, [r7, #28]
 80095d0:	e002      	b.n	80095d8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80095d2:	f06f 0302 	mvn.w	r3, #2
 80095d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095d8:	69fb      	ldr	r3, [r7, #28]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	617b      	str	r3, [r7, #20]
  return(result);
 8009604:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009606:	2b00      	cmp	r3, #0
 8009608:	d028      	beq.n	800965c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <osMessageQueueGet+0x34>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <osMessageQueueGet+0x34>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800961c:	f06f 0303 	mvn.w	r3, #3
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	e037      	b.n	8009694 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009624:	2300      	movs	r3, #0
 8009626:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	461a      	mov	r2, r3
 800962e:	68b9      	ldr	r1, [r7, #8]
 8009630:	69b8      	ldr	r0, [r7, #24]
 8009632:	f000 ffad 	bl	800a590 <xQueueReceiveFromISR>
 8009636:	4603      	mov	r3, r0
 8009638:	2b01      	cmp	r3, #1
 800963a:	d003      	beq.n	8009644 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800963c:	f06f 0302 	mvn.w	r3, #2
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	e027      	b.n	8009694 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d024      	beq.n	8009694 <osMessageQueueGet+0xac>
 800964a:	4b15      	ldr	r3, [pc, #84]	@ (80096a0 <osMessageQueueGet+0xb8>)
 800964c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	e01b      	b.n	8009694 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d002      	beq.n	8009668 <osMessageQueueGet+0x80>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d103      	bne.n	8009670 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009668:	f06f 0303 	mvn.w	r3, #3
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	e011      	b.n	8009694 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	69b8      	ldr	r0, [r7, #24]
 8009676:	f000 fd99 	bl	800a1ac <xQueueReceive>
 800967a:	4603      	mov	r3, r0
 800967c:	2b01      	cmp	r3, #1
 800967e:	d009      	beq.n	8009694 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009686:	f06f 0301 	mvn.w	r3, #1
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e002      	b.n	8009694 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800968e:	f06f 0302 	mvn.w	r3, #2
 8009692:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009694:	69fb      	ldr	r3, [r7, #28]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	e000ed04 	.word	0xe000ed04

080096a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4a07      	ldr	r2, [pc, #28]	@ (80096d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80096b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	4a06      	ldr	r2, [pc, #24]	@ (80096d4 <vApplicationGetIdleTaskMemory+0x30>)
 80096ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2280      	movs	r2, #128	@ 0x80
 80096c0:	601a      	str	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	24004fa4 	.word	0x24004fa4
 80096d4:	2400504c 	.word	0x2400504c

080096d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4a07      	ldr	r2, [pc, #28]	@ (8009704 <vApplicationGetTimerTaskMemory+0x2c>)
 80096e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	4a06      	ldr	r2, [pc, #24]	@ (8009708 <vApplicationGetTimerTaskMemory+0x30>)
 80096ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096f6:	601a      	str	r2, [r3, #0]
}
 80096f8:	bf00      	nop
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	2400524c 	.word	0x2400524c
 8009708:	240052f4 	.word	0x240052f4

0800970c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f103 0208 	add.w	r2, r3, #8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f04f 32ff 	mov.w	r2, #4294967295
 8009724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f103 0208 	add.w	r2, r3, #8
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f103 0208 	add.w	r2, r3, #8
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]
}
 80097a2:	bf00      	nop
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c4:	d103      	bne.n	80097ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	e00c      	b.n	80097e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3308      	adds	r3, #8
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	e002      	b.n	80097dc <vListInsert+0x2e>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d2f6      	bcs.n	80097d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6892      	ldr	r2, [r2, #8]
 8009836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	6852      	ldr	r2, [r2, #4]
 8009840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d103      	bne.n	8009854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	1e5a      	subs	r2, r3, #1
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10b      	bne.n	80098a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800989a:	bf00      	nop
 800989c:	bf00      	nop
 800989e:	e7fd      	b.n	800989c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80098a0:	f002 fdb2 	bl	800c408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098b0:	fb01 f303 	mul.w	r3, r1, r3
 80098b4:	441a      	add	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d0:	3b01      	subs	r3, #1
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098d6:	fb01 f303 	mul.w	r3, r1, r3
 80098da:	441a      	add	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	22ff      	movs	r2, #255	@ 0xff
 80098e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	22ff      	movs	r2, #255	@ 0xff
 80098ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d114      	bne.n	8009920 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d01a      	beq.n	8009934 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3310      	adds	r3, #16
 8009902:	4618      	mov	r0, r3
 8009904:	f001 fd3e 	bl	800b384 <xTaskRemoveFromEventList>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d012      	beq.n	8009934 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <xQueueGenericReset+0xd0>)
 8009910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	e009      	b.n	8009934 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3310      	adds	r3, #16
 8009924:	4618      	mov	r0, r3
 8009926:	f7ff fef1 	bl	800970c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3324      	adds	r3, #36	@ 0x24
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff feec 	bl	800970c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009934:	f002 fd9a 	bl	800c46c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009938:	2301      	movs	r3, #1
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08e      	sub	sp, #56	@ 0x38
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	e7fd      	b.n	8009970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <xQueueGenericCreateStatic+0x56>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <xQueueGenericCreateStatic+0x5a>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueGenericCreateStatic+0x5c>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10b      	bne.n	80099c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	623b      	str	r3, [r7, #32]
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d102      	bne.n	80099cc <xQueueGenericCreateStatic+0x84>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <xQueueGenericCreateStatic+0x88>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e000      	b.n	80099d2 <xQueueGenericCreateStatic+0x8a>
 80099d0:	2300      	movs	r3, #0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	61fb      	str	r3, [r7, #28]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099ee:	2350      	movs	r3, #80	@ 0x50
 80099f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	2b50      	cmp	r3, #80	@ 0x50
 80099f6:	d00b      	beq.n	8009a10 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	61bb      	str	r3, [r7, #24]
}
 8009a0a:	bf00      	nop
 8009a0c:	bf00      	nop
 8009a0e:	e7fd      	b.n	8009a0c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a10:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00d      	beq.n	8009a38 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a24:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f840 	bl	8009ab8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3730      	adds	r7, #48	@ 0x30
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b08a      	sub	sp, #40	@ 0x28
 8009a46:	af02      	add	r7, sp, #8
 8009a48:	60f8      	str	r0, [r7, #12]
 8009a4a:	60b9      	str	r1, [r7, #8]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10b      	bne.n	8009a6e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	613b      	str	r3, [r7, #16]
}
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	e7fd      	b.n	8009a6a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	fb02 f303 	mul.w	r3, r2, r3
 8009a76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	3350      	adds	r3, #80	@ 0x50
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f002 fde5 	bl	800c64c <pvPortMalloc>
 8009a82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d011      	beq.n	8009aae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	3350      	adds	r3, #80	@ 0x50
 8009a92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a9c:	79fa      	ldrb	r2, [r7, #7]
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f805 	bl	8009ab8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009aae:	69bb      	ldr	r3, [r7, #24]
	}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3720      	adds	r7, #32
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	e002      	b.n	8009ada <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	69b8      	ldr	r0, [r7, #24]
 8009aea:	f7ff fec3 	bl	8009874 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	78fa      	ldrb	r2, [r7, #3]
 8009af2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2200      	movs	r2, #0
 8009b22:	2100      	movs	r1, #0
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f911 	bl	8009d4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	4603      	mov	r3, r0
 8009b3a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	617b      	str	r3, [r7, #20]
 8009b40:	2300      	movs	r3, #0
 8009b42:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	461a      	mov	r2, r3
 8009b48:	6939      	ldr	r1, [r7, #16]
 8009b4a:	6978      	ldr	r0, [r7, #20]
 8009b4c:	f7ff ff79 	bl	8009a42 <xQueueGenericCreate>
 8009b50:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff ffd3 	bl	8009afe <prvInitialiseMutex>

		return xNewQueue;
 8009b58:	68fb      	ldr	r3, [r7, #12]
	}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3718      	adds	r7, #24
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b088      	sub	sp, #32
 8009b66:	af02      	add	r7, sp, #8
 8009b68:	4603      	mov	r3, r0
 8009b6a:	6039      	str	r1, [r7, #0]
 8009b6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	617b      	str	r3, [r7, #20]
 8009b72:	2300      	movs	r3, #0
 8009b74:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	6939      	ldr	r1, [r7, #16]
 8009b80:	6978      	ldr	r0, [r7, #20]
 8009b82:	f7ff fee1 	bl	8009948 <xQueueGenericCreateStatic>
 8009b86:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff ffb8 	bl	8009afe <prvInitialiseMutex>

		return xNewQueue;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
	}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3718      	adds	r7, #24
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10b      	bne.n	8009bc2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bae:	f383 8811 	msr	BASEPRI, r3
 8009bb2:	f3bf 8f6f 	isb	sy
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	60fb      	str	r3, [r7, #12]
}
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	e7fd      	b.n	8009bbe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	689c      	ldr	r4, [r3, #8]
 8009bc6:	f001 fda3 	bl	800b710 <xTaskGetCurrentTaskHandle>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d111      	bne.n	8009bf4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	1e5a      	subs	r2, r3, #1
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d105      	bne.n	8009bee <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009be2:	2300      	movs	r3, #0
 8009be4:	2200      	movs	r2, #0
 8009be6:	2100      	movs	r1, #0
 8009be8:	6938      	ldr	r0, [r7, #16]
 8009bea:	f000 f8af 	bl	8009d4c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e001      	b.n	8009bf8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009bf8:	697b      	ldr	r3, [r7, #20]
	}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd90      	pop	{r4, r7, pc}

08009c02 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009c02:	b590      	push	{r4, r7, lr}
 8009c04:	b087      	sub	sp, #28
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10b      	bne.n	8009c2e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	60fb      	str	r3, [r7, #12]
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	e7fd      	b.n	8009c2a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	689c      	ldr	r4, [r3, #8]
 8009c32:	f001 fd6d 	bl	800b710 <xTaskGetCurrentTaskHandle>
 8009c36:	4603      	mov	r3, r0
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	d107      	bne.n	8009c4c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009c46:	2301      	movs	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	e00c      	b.n	8009c66 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6938      	ldr	r0, [r7, #16]
 8009c50:	f000 fb8e 	bl	800a370 <xQueueSemaphoreTake>
 8009c54:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d004      	beq.n	8009c66 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009c66:	697b      	ldr	r3, [r7, #20]
	}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd90      	pop	{r4, r7, pc}

08009c70 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	@ 0x28
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10b      	bne.n	8009c9a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	61bb      	str	r3, [r7, #24]
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	e7fd      	b.n	8009c96 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d90b      	bls.n	8009cba <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	617b      	str	r3, [r7, #20]
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
 8009cb8:	e7fd      	b.n	8009cb6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009cba:	2302      	movs	r3, #2
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff fe3f 	bl	8009948 <xQueueGenericCreateStatic>
 8009cca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
	}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3720      	adds	r7, #32
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	613b      	str	r3, [r7, #16]
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop
 8009d08:	e7fd      	b.n	8009d06 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d90b      	bls.n	8009d2a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60fb      	str	r3, [r7, #12]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff fe87 	bl	8009a42 <xQueueGenericCreate>
 8009d34:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009d42:	697b      	ldr	r3, [r7, #20]
	}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08e      	sub	sp, #56	@ 0x38
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10b      	bne.n	8009d80 <xQueueGenericSend+0x34>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d7a:	bf00      	nop
 8009d7c:	bf00      	nop
 8009d7e:	e7fd      	b.n	8009d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <xQueueGenericSend+0x42>
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <xQueueGenericSend+0x46>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e000      	b.n	8009d94 <xQueueGenericSend+0x48>
 8009d92:	2300      	movs	r3, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10b      	bne.n	8009db0 <xQueueGenericSend+0x64>
	__asm volatile
 8009d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9c:	f383 8811 	msr	BASEPRI, r3
 8009da0:	f3bf 8f6f 	isb	sy
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009daa:	bf00      	nop
 8009dac:	bf00      	nop
 8009dae:	e7fd      	b.n	8009dac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d103      	bne.n	8009dbe <xQueueGenericSend+0x72>
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d101      	bne.n	8009dc2 <xQueueGenericSend+0x76>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <xQueueGenericSend+0x78>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10b      	bne.n	8009de0 <xQueueGenericSend+0x94>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	623b      	str	r3, [r7, #32]
}
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
 8009dde:	e7fd      	b.n	8009ddc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009de0:	f001 fca6 	bl	800b730 <xTaskGetSchedulerState>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <xQueueGenericSend+0xa4>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d101      	bne.n	8009df4 <xQueueGenericSend+0xa8>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <xQueueGenericSend+0xaa>
 8009df4:	2300      	movs	r3, #0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10b      	bne.n	8009e12 <xQueueGenericSend+0xc6>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	61fb      	str	r3, [r7, #28]
}
 8009e0c:	bf00      	nop
 8009e0e:	bf00      	nop
 8009e10:	e7fd      	b.n	8009e0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e12:	f002 faf9 	bl	800c408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d302      	bcc.n	8009e28 <xQueueGenericSend+0xdc>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d129      	bne.n	8009e7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e2e:	f000 fc6d 	bl	800a70c <prvCopyDataToQueue>
 8009e32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d010      	beq.n	8009e5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	3324      	adds	r3, #36	@ 0x24
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 fa9f 	bl	800b384 <xTaskRemoveFromEventList>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d013      	beq.n	8009e74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8009f4c <xQueueGenericSend+0x200>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	e00a      	b.n	8009e74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d007      	beq.n	8009e74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e64:	4b39      	ldr	r3, [pc, #228]	@ (8009f4c <xQueueGenericSend+0x200>)
 8009e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e74:	f002 fafa 	bl	800c46c <vPortExitCritical>
				return pdPASS;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e063      	b.n	8009f44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d103      	bne.n	8009e8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e82:	f002 faf3 	bl	800c46c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	e05c      	b.n	8009f44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	4618      	mov	r0, r3
 8009e96:	f001 fad9 	bl	800b44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e9e:	f002 fae5 	bl	800c46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ea2:	f001 f82f 	bl	800af04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ea6:	f002 faaf 	bl	800c408 <vPortEnterCritical>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009eb0:	b25b      	sxtb	r3, r3
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d103      	bne.n	8009ec0 <xQueueGenericSend+0x174>
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ec6:	b25b      	sxtb	r3, r3
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d103      	bne.n	8009ed6 <xQueueGenericSend+0x18a>
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ed6:	f002 fac9 	bl	800c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eda:	1d3a      	adds	r2, r7, #4
 8009edc:	f107 0314 	add.w	r3, r7, #20
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 fac8 	bl	800b478 <xTaskCheckForTimeOut>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d124      	bne.n	8009f38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ef0:	f000 fd04 	bl	800a8fc <prvIsQueueFull>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d018      	beq.n	8009f2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efc:	3310      	adds	r3, #16
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	4611      	mov	r1, r2
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 f9ec 	bl	800b2e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f0a:	f000 fc8f 	bl	800a82c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f0e:	f001 f807 	bl	800af20 <xTaskResumeAll>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f47f af7c 	bne.w	8009e12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f4c <xQueueGenericSend+0x200>)
 8009f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f20:	601a      	str	r2, [r3, #0]
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	e772      	b.n	8009e12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f2e:	f000 fc7d 	bl	800a82c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f32:	f000 fff5 	bl	800af20 <xTaskResumeAll>
 8009f36:	e76c      	b.n	8009e12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f3a:	f000 fc77 	bl	800a82c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f3e:	f000 ffef 	bl	800af20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3738      	adds	r7, #56	@ 0x38
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	e000ed04 	.word	0xe000ed04

08009f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b090      	sub	sp, #64	@ 0x40
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10b      	bne.n	8009f80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6c:	f383 8811 	msr	BASEPRI, r3
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f7a:	bf00      	nop
 8009f7c:	bf00      	nop
 8009f7e:	e7fd      	b.n	8009f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d103      	bne.n	8009f8e <xQueueGenericSendFromISR+0x3e>
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <xQueueGenericSendFromISR+0x42>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericSendFromISR+0x44>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10b      	bne.n	8009fb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	e7fd      	b.n	8009fac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d103      	bne.n	8009fbe <xQueueGenericSendFromISR+0x6e>
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d101      	bne.n	8009fc2 <xQueueGenericSendFromISR+0x72>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueGenericSendFromISR+0x74>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10b      	bne.n	8009fe0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	623b      	str	r3, [r7, #32]
}
 8009fda:	bf00      	nop
 8009fdc:	bf00      	nop
 8009fde:	e7fd      	b.n	8009fdc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fe0:	f002 faf2 	bl	800c5c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fe4:	f3ef 8211 	mrs	r2, BASEPRI
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	61fa      	str	r2, [r7, #28]
 8009ffa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ffe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a008:	429a      	cmp	r2, r3
 800a00a:	d302      	bcc.n	800a012 <xQueueGenericSendFromISR+0xc2>
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d12f      	bne.n	800a072 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a018:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a020:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a028:	f000 fb70 	bl	800a70c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a02c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a034:	d112      	bne.n	800a05c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d016      	beq.n	800a06c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a040:	3324      	adds	r3, #36	@ 0x24
 800a042:	4618      	mov	r0, r3
 800a044:	f001 f99e 	bl	800b384 <xTaskRemoveFromEventList>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00e      	beq.n	800a06c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	e007      	b.n	800a06c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a05c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a060:	3301      	adds	r3, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	b25a      	sxtb	r2, r3
 800a066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a06c:	2301      	movs	r3, #1
 800a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a070:	e001      	b.n	800a076 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a078:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a080:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a084:	4618      	mov	r0, r3
 800a086:	3740      	adds	r7, #64	@ 0x40
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08e      	sub	sp, #56	@ 0x38
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	623b      	str	r3, [r7, #32]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	61fb      	str	r3, [r7, #28]
}
 800a0d2:	bf00      	nop
 800a0d4:	bf00      	nop
 800a0d6:	e7fd      	b.n	800a0d4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d103      	bne.n	800a0e8 <xQueueGiveFromISR+0x5c>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <xQueueGiveFromISR+0x60>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <xQueueGiveFromISR+0x62>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	61bb      	str	r3, [r7, #24]
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	e7fd      	b.n	800a106 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a10a:	f002 fa5d 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a10e:	f3ef 8211 	mrs	r2, BASEPRI
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	617a      	str	r2, [r7, #20]
 800a124:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a126:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a128:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a136:	429a      	cmp	r2, r3
 800a138:	d22b      	bcs.n	800a192 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a14c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a154:	d112      	bne.n	800a17c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	3324      	adds	r3, #36	@ 0x24
 800a162:	4618      	mov	r0, r3
 800a164:	f001 f90e 	bl	800b384 <xTaskRemoveFromEventList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00e      	beq.n	800a18c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	e007      	b.n	800a18c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a17c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a180:	3301      	adds	r3, #1
 800a182:	b2db      	uxtb	r3, r3
 800a184:	b25a      	sxtb	r2, r3
 800a186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a18c:	2301      	movs	r3, #1
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a190:	e001      	b.n	800a196 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a192:	2300      	movs	r3, #0
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
 800a196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a198:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f383 8811 	msr	BASEPRI, r3
}
 800a1a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3738      	adds	r7, #56	@ 0x38
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	@ 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <xQueueReceive+0x32>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	623b      	str	r3, [r7, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <xQueueReceive+0x40>
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <xQueueReceive+0x44>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <xQueueReceive+0x46>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10b      	bne.n	800a20e <xQueueReceive+0x62>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61fb      	str	r3, [r7, #28]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a20e:	f001 fa8f 	bl	800b730 <xTaskGetSchedulerState>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <xQueueReceive+0x72>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d101      	bne.n	800a222 <xQueueReceive+0x76>
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <xQueueReceive+0x78>
 800a222:	2300      	movs	r3, #0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10b      	bne.n	800a240 <xQueueReceive+0x94>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	61bb      	str	r3, [r7, #24]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a240:	f002 f8e2 	bl	800c408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01f      	beq.n	800a290 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a250:	68b9      	ldr	r1, [r7, #8]
 800a252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a254:	f000 fac4 	bl	800a7e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	1e5a      	subs	r2, r3, #1
 800a25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00f      	beq.n	800a288 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26a:	3310      	adds	r3, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	f001 f889 	bl	800b384 <xTaskRemoveFromEventList>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d007      	beq.n	800a288 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a278:	4b3c      	ldr	r3, [pc, #240]	@ (800a36c <xQueueReceive+0x1c0>)
 800a27a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a288:	f002 f8f0 	bl	800c46c <vPortExitCritical>
				return pdPASS;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e069      	b.n	800a364 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a296:	f002 f8e9 	bl	800c46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a29a:	2300      	movs	r3, #0
 800a29c:	e062      	b.n	800a364 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2a4:	f107 0310 	add.w	r3, r7, #16
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f001 f8cf 	bl	800b44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2b2:	f002 f8db 	bl	800c46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2b6:	f000 fe25 	bl	800af04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2ba:	f002 f8a5 	bl	800c408 <vPortEnterCritical>
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a2c4:	b25b      	sxtb	r3, r3
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ca:	d103      	bne.n	800a2d4 <xQueueReceive+0x128>
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e0:	d103      	bne.n	800a2ea <xQueueReceive+0x13e>
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2ea:	f002 f8bf 	bl	800c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ee:	1d3a      	adds	r2, r7, #4
 800a2f0:	f107 0310 	add.w	r3, r7, #16
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 f8be 	bl	800b478 <xTaskCheckForTimeOut>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d123      	bne.n	800a34a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a304:	f000 fae4 	bl	800a8d0 <prvIsQueueEmpty>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d017      	beq.n	800a33e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a310:	3324      	adds	r3, #36	@ 0x24
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f000 ffe2 	bl	800b2e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a31c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a31e:	f000 fa85 	bl	800a82c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a322:	f000 fdfd 	bl	800af20 <xTaskResumeAll>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d189      	bne.n	800a240 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a32c:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <xQueueReceive+0x1c0>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	e780      	b.n	800a240 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a33e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a340:	f000 fa74 	bl	800a82c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a344:	f000 fdec 	bl	800af20 <xTaskResumeAll>
 800a348:	e77a      	b.n	800a240 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a34a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a34c:	f000 fa6e 	bl	800a82c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a350:	f000 fde6 	bl	800af20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a356:	f000 fabb 	bl	800a8d0 <prvIsQueueEmpty>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f43f af6f 	beq.w	800a240 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a362:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a364:	4618      	mov	r0, r3
 800a366:	3730      	adds	r7, #48	@ 0x30
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08e      	sub	sp, #56	@ 0x38
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a37a:	2300      	movs	r3, #0
 800a37c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a382:	2300      	movs	r3, #0
 800a384:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	623b      	str	r3, [r7, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	bf00      	nop
 800a3a2:	e7fd      	b.n	800a3a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00b      	beq.n	800a3c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	61fb      	str	r3, [r7, #28]
}
 800a3be:	bf00      	nop
 800a3c0:	bf00      	nop
 800a3c2:	e7fd      	b.n	800a3c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3c4:	f001 f9b4 	bl	800b730 <xTaskGetSchedulerState>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d102      	bne.n	800a3d4 <xQueueSemaphoreTake+0x64>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <xQueueSemaphoreTake+0x68>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <xQueueSemaphoreTake+0x6a>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10b      	bne.n	800a3f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	61bb      	str	r3, [r7, #24]
}
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	e7fd      	b.n	800a3f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3f6:	f002 f807 	bl	800c408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	2b00      	cmp	r3, #0
 800a404:	d024      	beq.n	800a450 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a408:	1e5a      	subs	r2, r3, #1
 800a40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d104      	bne.n	800a420 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a416:	f001 fb05 	bl	800ba24 <pvTaskIncrementMutexHeldCount>
 800a41a:	4602      	mov	r2, r0
 800a41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00f      	beq.n	800a448 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42a:	3310      	adds	r3, #16
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 ffa9 	bl	800b384 <xTaskRemoveFromEventList>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a438:	4b54      	ldr	r3, [pc, #336]	@ (800a58c <xQueueSemaphoreTake+0x21c>)
 800a43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a448:	f002 f810 	bl	800c46c <vPortExitCritical>
				return pdPASS;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e098      	b.n	800a582 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d112      	bne.n	800a47c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	617b      	str	r3, [r7, #20]
}
 800a46e:	bf00      	nop
 800a470:	bf00      	nop
 800a472:	e7fd      	b.n	800a470 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a474:	f001 fffa 	bl	800c46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a478:	2300      	movs	r3, #0
 800a47a:	e082      	b.n	800a582 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a482:	f107 030c 	add.w	r3, r7, #12
 800a486:	4618      	mov	r0, r3
 800a488:	f000 ffe0 	bl	800b44c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a490:	f001 ffec 	bl	800c46c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a494:	f000 fd36 	bl	800af04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a498:	f001 ffb6 	bl	800c408 <vPortEnterCritical>
 800a49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4a2:	b25b      	sxtb	r3, r3
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a8:	d103      	bne.n	800a4b2 <xQueueSemaphoreTake+0x142>
 800a4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4be:	d103      	bne.n	800a4c8 <xQueueSemaphoreTake+0x158>
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4c8:	f001 ffd0 	bl	800c46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4cc:	463a      	mov	r2, r7
 800a4ce:	f107 030c 	add.w	r3, r7, #12
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 ffcf 	bl	800b478 <xTaskCheckForTimeOut>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d132      	bne.n	800a546 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a4e2:	f000 f9f5 	bl	800a8d0 <prvIsQueueEmpty>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d026      	beq.n	800a53a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a4f4:	f001 ff88 	bl	800c408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 f935 	bl	800b76c <xTaskPriorityInherit>
 800a502:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a504:	f001 ffb2 	bl	800c46c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50a:	3324      	adds	r3, #36	@ 0x24
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	4611      	mov	r1, r2
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fee5 	bl	800b2e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a518:	f000 f988 	bl	800a82c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a51c:	f000 fd00 	bl	800af20 <xTaskResumeAll>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	f47f af67 	bne.w	800a3f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a528:	4b18      	ldr	r3, [pc, #96]	@ (800a58c <xQueueSemaphoreTake+0x21c>)
 800a52a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	e75d      	b.n	800a3f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a53a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a53c:	f000 f976 	bl	800a82c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a540:	f000 fcee 	bl	800af20 <xTaskResumeAll>
 800a544:	e757      	b.n	800a3f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a548:	f000 f970 	bl	800a82c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a54c:	f000 fce8 	bl	800af20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a550:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a552:	f000 f9bd 	bl	800a8d0 <prvIsQueueEmpty>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f43f af4c 	beq.w	800a3f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00d      	beq.n	800a580 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a564:	f001 ff50 	bl	800c408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a56a:	f000 f8b7 	bl	800a6dc <prvGetDisinheritPriorityAfterTimeout>
 800a56e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a576:	4618      	mov	r0, r3
 800a578:	f001 f9d0 	bl	800b91c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a57c:	f001 ff76 	bl	800c46c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a582:	4618      	mov	r0, r3
 800a584:	3738      	adds	r7, #56	@ 0x38
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	e000ed04 	.word	0xe000ed04

0800a590 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	@ 0x38
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	623b      	str	r3, [r7, #32]
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	e7fd      	b.n	800a5ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d103      	bne.n	800a5cc <xQueueReceiveFromISR+0x3c>
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <xQueueReceiveFromISR+0x40>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e000      	b.n	800a5d2 <xQueueReceiveFromISR+0x42>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	61fb      	str	r3, [r7, #28]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5ee:	f001 ffeb 	bl	800c5c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a5f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	61ba      	str	r2, [r7, #24]
 800a608:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a60a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a612:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a616:	2b00      	cmp	r3, #0
 800a618:	d02f      	beq.n	800a67a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a628:	f000 f8da 	bl	800a7e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62e:	1e5a      	subs	r2, r3, #1
 800a630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a632:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a634:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d112      	bne.n	800a664 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d016      	beq.n	800a674 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	3310      	adds	r3, #16
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fe9a 	bl	800b384 <xTaskRemoveFromEventList>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00e      	beq.n	800a674 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	e007      	b.n	800a674 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a668:	3301      	adds	r3, #1
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	b25a      	sxtb	r2, r3
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a674:	2301      	movs	r3, #1
 800a676:	637b      	str	r3, [r7, #52]	@ 0x34
 800a678:	e001      	b.n	800a67e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a680:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	f383 8811 	msr	BASEPRI, r3
}
 800a688:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3738      	adds	r7, #56	@ 0x38
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10b      	bne.n	800a6be <vQueueDelete+0x2a>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	60bb      	str	r3, [r7, #8]
}
 800a6b8:	bf00      	nop
 800a6ba:	bf00      	nop
 800a6bc:	e7fd      	b.n	800a6ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 f95e 	bl	800a980 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f002 f88a 	bl	800c7e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a6d4:	bf00      	nop
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	e001      	b.n	800a6fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
	}
 800a700:	4618      	mov	r0, r3
 800a702:	3714      	adds	r7, #20
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a718:	2300      	movs	r3, #0
 800a71a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a720:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10d      	bne.n	800a746 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d14d      	bne.n	800a7ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	4618      	mov	r0, r3
 800a738:	f001 f880 	bl	800b83c <xTaskPriorityDisinherit>
 800a73c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	609a      	str	r2, [r3, #8]
 800a744:	e043      	b.n	800a7ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d119      	bne.n	800a780 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6858      	ldr	r0, [r3, #4]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a754:	461a      	mov	r2, r3
 800a756:	68b9      	ldr	r1, [r7, #8]
 800a758:	f007 fa23 	bl	8011ba2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a764:	441a      	add	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	685a      	ldr	r2, [r3, #4]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	429a      	cmp	r2, r3
 800a774:	d32b      	bcc.n	800a7ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	605a      	str	r2, [r3, #4]
 800a77e:	e026      	b.n	800a7ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	68d8      	ldr	r0, [r3, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a788:	461a      	mov	r2, r3
 800a78a:	68b9      	ldr	r1, [r7, #8]
 800a78c:	f007 fa09 	bl	8011ba2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a798:	425b      	negs	r3, r3
 800a79a:	441a      	add	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d207      	bcs.n	800a7bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	689a      	ldr	r2, [r3, #8]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b4:	425b      	negs	r3, r3
 800a7b6:	441a      	add	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d105      	bne.n	800a7ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a7d6:	697b      	ldr	r3, [r7, #20]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d018      	beq.n	800a824 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fa:	441a      	add	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d303      	bcc.n	800a814 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68d9      	ldr	r1, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81c:	461a      	mov	r2, r3
 800a81e:	6838      	ldr	r0, [r7, #0]
 800a820:	f007 f9bf 	bl	8011ba2 <memcpy>
	}
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a834:	f001 fde8 	bl	800c408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a83e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a840:	e011      	b.n	800a866 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a846:	2b00      	cmp	r3, #0
 800a848:	d012      	beq.n	800a870 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3324      	adds	r3, #36	@ 0x24
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 fd98 	bl	800b384 <xTaskRemoveFromEventList>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a85a:	f000 fe71 	bl	800b540 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	3b01      	subs	r3, #1
 800a862:	b2db      	uxtb	r3, r3
 800a864:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	dce9      	bgt.n	800a842 <prvUnlockQueue+0x16>
 800a86e:	e000      	b.n	800a872 <prvUnlockQueue+0x46>
					break;
 800a870:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	22ff      	movs	r2, #255	@ 0xff
 800a876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a87a:	f001 fdf7 	bl	800c46c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a87e:	f001 fdc3 	bl	800c408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a888:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a88a:	e011      	b.n	800a8b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d012      	beq.n	800a8ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3310      	adds	r3, #16
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 fd73 	bl	800b384 <xTaskRemoveFromEventList>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8a4:	f000 fe4c 	bl	800b540 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dce9      	bgt.n	800a88c <prvUnlockQueue+0x60>
 800a8b8:	e000      	b.n	800a8bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	22ff      	movs	r2, #255	@ 0xff
 800a8c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a8c4:	f001 fdd2 	bl	800c46c <vPortExitCritical>
}
 800a8c8:	bf00      	nop
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8d8:	f001 fd96 	bl	800c408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	e001      	b.n	800a8ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ee:	f001 fdbd 	bl	800c46c <vPortExitCritical>

	return xReturn;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a904:	f001 fd80 	bl	800c408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a910:	429a      	cmp	r2, r3
 800a912:	d102      	bne.n	800a91a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a914:	2301      	movs	r3, #1
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	e001      	b.n	800a91e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a91e:	f001 fda5 	bl	800c46c <vPortExitCritical>

	return xReturn;
 800a922:	68fb      	ldr	r3, [r7, #12]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	e014      	b.n	800a966 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a93c:	4a0f      	ldr	r2, [pc, #60]	@ (800a97c <vQueueAddToRegistry+0x50>)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10b      	bne.n	800a960 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a948:	490c      	ldr	r1, [pc, #48]	@ (800a97c <vQueueAddToRegistry+0x50>)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a952:	4a0a      	ldr	r2, [pc, #40]	@ (800a97c <vQueueAddToRegistry+0x50>)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	00db      	lsls	r3, r3, #3
 800a958:	4413      	add	r3, r2
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a95e:	e006      	b.n	800a96e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b07      	cmp	r3, #7
 800a96a:	d9e7      	bls.n	800a93c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a96c:	bf00      	nop
 800a96e:	bf00      	nop
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	240056f4 	.word	0x240056f4

0800a980 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a988:	2300      	movs	r3, #0
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	e016      	b.n	800a9bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a98e:	4a10      	ldr	r2, [pc, #64]	@ (800a9d0 <vQueueUnregisterQueue+0x50>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	4413      	add	r3, r2
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d10b      	bne.n	800a9b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a99e:	4a0c      	ldr	r2, [pc, #48]	@ (800a9d0 <vQueueUnregisterQueue+0x50>)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a9a8:	4a09      	ldr	r2, [pc, #36]	@ (800a9d0 <vQueueUnregisterQueue+0x50>)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	00db      	lsls	r3, r3, #3
 800a9ae:	4413      	add	r3, r2
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	605a      	str	r2, [r3, #4]
				break;
 800a9b4:	e006      	b.n	800a9c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b07      	cmp	r3, #7
 800a9c0:	d9e5      	bls.n	800a98e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a9c2:	bf00      	nop
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	240056f4 	.word	0x240056f4

0800a9d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9e4:	f001 fd10 	bl	800c408 <vPortEnterCritical>
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ee:	b25b      	sxtb	r3, r3
 800a9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f4:	d103      	bne.n	800a9fe <vQueueWaitForMessageRestricted+0x2a>
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa04:	b25b      	sxtb	r3, r3
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d103      	bne.n	800aa14 <vQueueWaitForMessageRestricted+0x40>
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa14:	f001 fd2a 	bl	800c46c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d106      	bne.n	800aa2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	3324      	adds	r3, #36	@ 0x24
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	68b9      	ldr	r1, [r7, #8]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fc7f 	bl	800b32c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa2e:	6978      	ldr	r0, [r7, #20]
 800aa30:	f7ff fefc 	bl	800a82c <prvUnlockQueue>
	}
 800aa34:	bf00      	nop
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08e      	sub	sp, #56	@ 0x38
 800aa40:	af04      	add	r7, sp, #16
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10b      	bne.n	800aa68 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	623b      	str	r3, [r7, #32]
}
 800aa62:	bf00      	nop
 800aa64:	bf00      	nop
 800aa66:	e7fd      	b.n	800aa64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10b      	bne.n	800aa86 <xTaskCreateStatic+0x4a>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	61fb      	str	r3, [r7, #28]
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	e7fd      	b.n	800aa82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa86:	23a8      	movs	r3, #168	@ 0xa8
 800aa88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2ba8      	cmp	r3, #168	@ 0xa8
 800aa8e:	d00b      	beq.n	800aaa8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	61bb      	str	r3, [r7, #24]
}
 800aaa2:	bf00      	nop
 800aaa4:	bf00      	nop
 800aaa6:	e7fd      	b.n	800aaa4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aaa8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d01e      	beq.n	800aaee <xTaskCreateStatic+0xb2>
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d01b      	beq.n	800aaee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aabe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aac8:	2300      	movs	r3, #0
 800aaca:	9303      	str	r3, [sp, #12]
 800aacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aace:	9302      	str	r3, [sp, #8]
 800aad0:	f107 0314 	add.w	r3, r7, #20
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 f851 	bl	800ab88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aae6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aae8:	f000 f8f6 	bl	800acd8 <prvAddNewTaskToReadyList>
 800aaec:	e001      	b.n	800aaf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aaf2:	697b      	ldr	r3, [r7, #20]
	}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3728      	adds	r7, #40	@ 0x28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08c      	sub	sp, #48	@ 0x30
 800ab00:	af04      	add	r7, sp, #16
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	603b      	str	r3, [r7, #0]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab0c:	88fb      	ldrh	r3, [r7, #6]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f001 fd9b 	bl	800c64c <pvPortMalloc>
 800ab16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00e      	beq.n	800ab3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab1e:	20a8      	movs	r0, #168	@ 0xa8
 800ab20:	f001 fd94 	bl	800c64c <pvPortMalloc>
 800ab24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab32:	e005      	b.n	800ab40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab34:	6978      	ldr	r0, [r7, #20]
 800ab36:	f001 fe57 	bl	800c7e8 <vPortFree>
 800ab3a:	e001      	b.n	800ab40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d017      	beq.n	800ab76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab4e:	88fa      	ldrh	r2, [r7, #6]
 800ab50:	2300      	movs	r3, #0
 800ab52:	9303      	str	r3, [sp, #12]
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	9302      	str	r3, [sp, #8]
 800ab58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f000 f80f 	bl	800ab88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab6a:	69f8      	ldr	r0, [r7, #28]
 800ab6c:	f000 f8b4 	bl	800acd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab70:	2301      	movs	r3, #1
 800ab72:	61bb      	str	r3, [r7, #24]
 800ab74:	e002      	b.n	800ab7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab76:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
	}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
	...

0800ab88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	461a      	mov	r2, r3
 800aba0:	21a5      	movs	r1, #165	@ 0xa5
 800aba2:	f006 ff32 	bl	8011a0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800abb0:	440b      	add	r3, r1
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	617b      	str	r3, [r7, #20]
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	e7fd      	b.n	800abde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01f      	beq.n	800ac28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abe8:	2300      	movs	r3, #0
 800abea:	61fb      	str	r3, [r7, #28]
 800abec:	e012      	b.n	800ac14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	4413      	add	r3, r2
 800abf4:	7819      	ldrb	r1, [r3, #0]
 800abf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	4413      	add	r3, r2
 800abfc:	3334      	adds	r3, #52	@ 0x34
 800abfe:	460a      	mov	r2, r1
 800ac00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4413      	add	r3, r2
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d006      	beq.n	800ac1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	3301      	adds	r3, #1
 800ac12:	61fb      	str	r3, [r7, #28]
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	2b0f      	cmp	r3, #15
 800ac18:	d9e9      	bls.n	800abee <prvInitialiseNewTask+0x66>
 800ac1a:	e000      	b.n	800ac1e <prvInitialiseNewTask+0x96>
			{
				break;
 800ac1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac26:	e003      	b.n	800ac30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	2b37      	cmp	r3, #55	@ 0x37
 800ac34:	d901      	bls.n	800ac3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac36:	2337      	movs	r3, #55	@ 0x37
 800ac38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac48:	2200      	movs	r2, #0
 800ac4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe fd7b 	bl	800974c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	3318      	adds	r3, #24
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7fe fd76 	bl	800974c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac88:	3354      	adds	r3, #84	@ 0x54
 800ac8a:	224c      	movs	r2, #76	@ 0x4c
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f006 febb 	bl	8011a0a <memset>
 800ac94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac96:	4a0d      	ldr	r2, [pc, #52]	@ (800accc <prvInitialiseNewTask+0x144>)
 800ac98:	659a      	str	r2, [r3, #88]	@ 0x58
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	4a0c      	ldr	r2, [pc, #48]	@ (800acd0 <prvInitialiseNewTask+0x148>)
 800ac9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca2:	4a0c      	ldr	r2, [pc, #48]	@ (800acd4 <prvInitialiseNewTask+0x14c>)
 800aca4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	68f9      	ldr	r1, [r7, #12]
 800acaa:	69b8      	ldr	r0, [r7, #24]
 800acac:	f001 fa7c 	bl	800c1a8 <pxPortInitialiseStack>
 800acb0:	4602      	mov	r2, r0
 800acb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc2:	bf00      	nop
 800acc4:	3720      	adds	r7, #32
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	24012830 	.word	0x24012830
 800acd0:	24012898 	.word	0x24012898
 800acd4:	24012900 	.word	0x24012900

0800acd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ace0:	f001 fb92 	bl	800c408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ace4:	4b2d      	ldr	r3, [pc, #180]	@ (800ad9c <prvAddNewTaskToReadyList+0xc4>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	4a2c      	ldr	r2, [pc, #176]	@ (800ad9c <prvAddNewTaskToReadyList+0xc4>)
 800acec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acee:	4b2c      	ldr	r3, [pc, #176]	@ (800ada0 <prvAddNewTaskToReadyList+0xc8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d109      	bne.n	800ad0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acf6:	4a2a      	ldr	r2, [pc, #168]	@ (800ada0 <prvAddNewTaskToReadyList+0xc8>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acfc:	4b27      	ldr	r3, [pc, #156]	@ (800ad9c <prvAddNewTaskToReadyList+0xc4>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d110      	bne.n	800ad26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad04:	f000 fc40 	bl	800b588 <prvInitialiseTaskLists>
 800ad08:	e00d      	b.n	800ad26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad0a:	4b26      	ldr	r3, [pc, #152]	@ (800ada4 <prvAddNewTaskToReadyList+0xcc>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad12:	4b23      	ldr	r3, [pc, #140]	@ (800ada0 <prvAddNewTaskToReadyList+0xc8>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d802      	bhi.n	800ad26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad20:	4a1f      	ldr	r2, [pc, #124]	@ (800ada0 <prvAddNewTaskToReadyList+0xc8>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad26:	4b20      	ldr	r3, [pc, #128]	@ (800ada8 <prvAddNewTaskToReadyList+0xd0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	4a1e      	ldr	r2, [pc, #120]	@ (800ada8 <prvAddNewTaskToReadyList+0xd0>)
 800ad2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad30:	4b1d      	ldr	r3, [pc, #116]	@ (800ada8 <prvAddNewTaskToReadyList+0xd0>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad3c:	4b1b      	ldr	r3, [pc, #108]	@ (800adac <prvAddNewTaskToReadyList+0xd4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d903      	bls.n	800ad4c <prvAddNewTaskToReadyList+0x74>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad48:	4a18      	ldr	r2, [pc, #96]	@ (800adac <prvAddNewTaskToReadyList+0xd4>)
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4a15      	ldr	r2, [pc, #84]	@ (800adb0 <prvAddNewTaskToReadyList+0xd8>)
 800ad5a:	441a      	add	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7fe fcff 	bl	8009766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad68:	f001 fb80 	bl	800c46c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad6c:	4b0d      	ldr	r3, [pc, #52]	@ (800ada4 <prvAddNewTaskToReadyList+0xcc>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00e      	beq.n	800ad92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad74:	4b0a      	ldr	r3, [pc, #40]	@ (800ada0 <prvAddNewTaskToReadyList+0xc8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d207      	bcs.n	800ad92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad82:	4b0c      	ldr	r3, [pc, #48]	@ (800adb4 <prvAddNewTaskToReadyList+0xdc>)
 800ad84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad92:	bf00      	nop
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	24005c08 	.word	0x24005c08
 800ada0:	24005734 	.word	0x24005734
 800ada4:	24005c14 	.word	0x24005c14
 800ada8:	24005c24 	.word	0x24005c24
 800adac:	24005c10 	.word	0x24005c10
 800adb0:	24005738 	.word	0x24005738
 800adb4:	e000ed04 	.word	0xe000ed04

0800adb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d018      	beq.n	800adfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800adca:	4b14      	ldr	r3, [pc, #80]	@ (800ae1c <vTaskDelay+0x64>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00b      	beq.n	800adea <vTaskDelay+0x32>
	__asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	60bb      	str	r3, [r7, #8]
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	e7fd      	b.n	800ade6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800adea:	f000 f88b 	bl	800af04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800adee:	2100      	movs	r1, #0
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fe2b 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adf6:	f000 f893 	bl	800af20 <xTaskResumeAll>
 800adfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d107      	bne.n	800ae12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae02:	4b07      	ldr	r3, [pc, #28]	@ (800ae20 <vTaskDelay+0x68>)
 800ae04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	24005c30 	.word	0x24005c30
 800ae20:	e000ed04 	.word	0xe000ed04

0800ae24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	@ 0x28
 800ae28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae32:	463a      	mov	r2, r7
 800ae34:	1d39      	adds	r1, r7, #4
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe fc32 	bl	80096a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	9202      	str	r2, [sp, #8]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	460a      	mov	r2, r1
 800ae52:	4924      	ldr	r1, [pc, #144]	@ (800aee4 <vTaskStartScheduler+0xc0>)
 800ae54:	4824      	ldr	r0, [pc, #144]	@ (800aee8 <vTaskStartScheduler+0xc4>)
 800ae56:	f7ff fdf1 	bl	800aa3c <xTaskCreateStatic>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	4a23      	ldr	r2, [pc, #140]	@ (800aeec <vTaskStartScheduler+0xc8>)
 800ae5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae60:	4b22      	ldr	r3, [pc, #136]	@ (800aeec <vTaskStartScheduler+0xc8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	617b      	str	r3, [r7, #20]
 800ae6c:	e001      	b.n	800ae72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d102      	bne.n	800ae7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae78:	f000 fe3c 	bl	800baf4 <xTimerCreateTimerTask>
 800ae7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d11b      	bne.n	800aebc <vTaskStartScheduler+0x98>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	613b      	str	r3, [r7, #16]
}
 800ae96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae98:	4b15      	ldr	r3, [pc, #84]	@ (800aef0 <vTaskStartScheduler+0xcc>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3354      	adds	r3, #84	@ 0x54
 800ae9e:	4a15      	ldr	r2, [pc, #84]	@ (800aef4 <vTaskStartScheduler+0xd0>)
 800aea0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aea2:	4b15      	ldr	r3, [pc, #84]	@ (800aef8 <vTaskStartScheduler+0xd4>)
 800aea4:	f04f 32ff 	mov.w	r2, #4294967295
 800aea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aeaa:	4b14      	ldr	r3, [pc, #80]	@ (800aefc <vTaskStartScheduler+0xd8>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aeb0:	4b13      	ldr	r3, [pc, #76]	@ (800af00 <vTaskStartScheduler+0xdc>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aeb6:	f001 fa03 	bl	800c2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aeba:	e00f      	b.n	800aedc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d10b      	bne.n	800aedc <vTaskStartScheduler+0xb8>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	60fb      	str	r3, [r7, #12]
}
 800aed6:	bf00      	nop
 800aed8:	bf00      	nop
 800aeda:	e7fd      	b.n	800aed8 <vTaskStartScheduler+0xb4>
}
 800aedc:	bf00      	nop
 800aede:	3718      	adds	r7, #24
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	08012888 	.word	0x08012888
 800aee8:	0800b559 	.word	0x0800b559
 800aeec:	24005c2c 	.word	0x24005c2c
 800aef0:	24005734 	.word	0x24005734
 800aef4:	24000038 	.word	0x24000038
 800aef8:	24005c28 	.word	0x24005c28
 800aefc:	24005c14 	.word	0x24005c14
 800af00:	24005c0c 	.word	0x24005c0c

0800af04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af08:	4b04      	ldr	r3, [pc, #16]	@ (800af1c <vTaskSuspendAll+0x18>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3301      	adds	r3, #1
 800af0e:	4a03      	ldr	r2, [pc, #12]	@ (800af1c <vTaskSuspendAll+0x18>)
 800af10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af12:	bf00      	nop
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	24005c30 	.word	0x24005c30

0800af20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af2e:	4b42      	ldr	r3, [pc, #264]	@ (800b038 <xTaskResumeAll+0x118>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10b      	bne.n	800af4e <xTaskResumeAll+0x2e>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	603b      	str	r3, [r7, #0]
}
 800af48:	bf00      	nop
 800af4a:	bf00      	nop
 800af4c:	e7fd      	b.n	800af4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af4e:	f001 fa5b 	bl	800c408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af52:	4b39      	ldr	r3, [pc, #228]	@ (800b038 <xTaskResumeAll+0x118>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	3b01      	subs	r3, #1
 800af58:	4a37      	ldr	r2, [pc, #220]	@ (800b038 <xTaskResumeAll+0x118>)
 800af5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af5c:	4b36      	ldr	r3, [pc, #216]	@ (800b038 <xTaskResumeAll+0x118>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d162      	bne.n	800b02a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af64:	4b35      	ldr	r3, [pc, #212]	@ (800b03c <xTaskResumeAll+0x11c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d05e      	beq.n	800b02a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af6c:	e02f      	b.n	800afce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af6e:	4b34      	ldr	r3, [pc, #208]	@ (800b040 <xTaskResumeAll+0x120>)
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3318      	adds	r3, #24
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fc50 	bl	8009820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3304      	adds	r3, #4
 800af84:	4618      	mov	r0, r3
 800af86:	f7fe fc4b 	bl	8009820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8e:	4b2d      	ldr	r3, [pc, #180]	@ (800b044 <xTaskResumeAll+0x124>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	429a      	cmp	r2, r3
 800af94:	d903      	bls.n	800af9e <xTaskResumeAll+0x7e>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9a:	4a2a      	ldr	r2, [pc, #168]	@ (800b044 <xTaskResumeAll+0x124>)
 800af9c:	6013      	str	r3, [r2, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa2:	4613      	mov	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4a27      	ldr	r2, [pc, #156]	@ (800b048 <xTaskResumeAll+0x128>)
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	4610      	mov	r0, r2
 800afb6:	f7fe fbd6 	bl	8009766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbe:	4b23      	ldr	r3, [pc, #140]	@ (800b04c <xTaskResumeAll+0x12c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d302      	bcc.n	800afce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800afc8:	4b21      	ldr	r3, [pc, #132]	@ (800b050 <xTaskResumeAll+0x130>)
 800afca:	2201      	movs	r2, #1
 800afcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afce:	4b1c      	ldr	r3, [pc, #112]	@ (800b040 <xTaskResumeAll+0x120>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1cb      	bne.n	800af6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800afdc:	f000 fb78 	bl	800b6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800afe0:	4b1c      	ldr	r3, [pc, #112]	@ (800b054 <xTaskResumeAll+0x134>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d010      	beq.n	800b00e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afec:	f000 f858 	bl	800b0a0 <xTaskIncrementTick>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aff6:	4b16      	ldr	r3, [pc, #88]	@ (800b050 <xTaskResumeAll+0x130>)
 800aff8:	2201      	movs	r2, #1
 800affa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3b01      	subs	r3, #1
 800b000:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1f1      	bne.n	800afec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b008:	4b12      	ldr	r3, [pc, #72]	@ (800b054 <xTaskResumeAll+0x134>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b00e:	4b10      	ldr	r3, [pc, #64]	@ (800b050 <xTaskResumeAll+0x130>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d009      	beq.n	800b02a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b016:	2301      	movs	r3, #1
 800b018:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b01a:	4b0f      	ldr	r3, [pc, #60]	@ (800b058 <xTaskResumeAll+0x138>)
 800b01c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b02a:	f001 fa1f 	bl	800c46c <vPortExitCritical>

	return xAlreadyYielded;
 800b02e:	68bb      	ldr	r3, [r7, #8]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	24005c30 	.word	0x24005c30
 800b03c:	24005c08 	.word	0x24005c08
 800b040:	24005bc8 	.word	0x24005bc8
 800b044:	24005c10 	.word	0x24005c10
 800b048:	24005738 	.word	0x24005738
 800b04c:	24005734 	.word	0x24005734
 800b050:	24005c1c 	.word	0x24005c1c
 800b054:	24005c18 	.word	0x24005c18
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b062:	4b05      	ldr	r3, [pc, #20]	@ (800b078 <xTaskGetTickCount+0x1c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b068:	687b      	ldr	r3, [r7, #4]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	24005c0c 	.word	0x24005c0c

0800b07c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b082:	f001 faa1 	bl	800c5c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b086:	2300      	movs	r3, #0
 800b088:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b08a:	4b04      	ldr	r3, [pc, #16]	@ (800b09c <xTaskGetTickCountFromISR+0x20>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b090:	683b      	ldr	r3, [r7, #0]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	24005c0c 	.word	0x24005c0c

0800b0a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0aa:	4b4f      	ldr	r3, [pc, #316]	@ (800b1e8 <xTaskIncrementTick+0x148>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 8090 	bne.w	800b1d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0b4:	4b4d      	ldr	r3, [pc, #308]	@ (800b1ec <xTaskIncrementTick+0x14c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0bc:	4a4b      	ldr	r2, [pc, #300]	@ (800b1ec <xTaskIncrementTick+0x14c>)
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d121      	bne.n	800b10c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0c8:	4b49      	ldr	r3, [pc, #292]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00b      	beq.n	800b0ea <xTaskIncrementTick+0x4a>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	603b      	str	r3, [r7, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <xTaskIncrementTick+0x46>
 800b0ea:	4b41      	ldr	r3, [pc, #260]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	4b40      	ldr	r3, [pc, #256]	@ (800b1f4 <xTaskIncrementTick+0x154>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f4 <xTaskIncrementTick+0x154>)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f8 <xTaskIncrementTick+0x158>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	4a3c      	ldr	r2, [pc, #240]	@ (800b1f8 <xTaskIncrementTick+0x158>)
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	f000 fae2 	bl	800b6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b10c:	4b3b      	ldr	r3, [pc, #236]	@ (800b1fc <xTaskIncrementTick+0x15c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	429a      	cmp	r2, r3
 800b114:	d349      	bcc.n	800b1aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b116:	4b36      	ldr	r3, [pc, #216]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d104      	bne.n	800b12a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b120:	4b36      	ldr	r3, [pc, #216]	@ (800b1fc <xTaskIncrementTick+0x15c>)
 800b122:	f04f 32ff 	mov.w	r2, #4294967295
 800b126:	601a      	str	r2, [r3, #0]
					break;
 800b128:	e03f      	b.n	800b1aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12a:	4b31      	ldr	r3, [pc, #196]	@ (800b1f0 <xTaskIncrementTick+0x150>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d203      	bcs.n	800b14a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b142:	4a2e      	ldr	r2, [pc, #184]	@ (800b1fc <xTaskIncrementTick+0x15c>)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b148:	e02f      	b.n	800b1aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fb66 	bl	8009820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	3318      	adds	r3, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f7fe fb5d 	bl	8009820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16a:	4b25      	ldr	r3, [pc, #148]	@ (800b200 <xTaskIncrementTick+0x160>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d903      	bls.n	800b17a <xTaskIncrementTick+0xda>
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b176:	4a22      	ldr	r2, [pc, #136]	@ (800b200 <xTaskIncrementTick+0x160>)
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b17e:	4613      	mov	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4a1f      	ldr	r2, [pc, #124]	@ (800b204 <xTaskIncrementTick+0x164>)
 800b188:	441a      	add	r2, r3
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	3304      	adds	r3, #4
 800b18e:	4619      	mov	r1, r3
 800b190:	4610      	mov	r0, r2
 800b192:	f7fe fae8 	bl	8009766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19a:	4b1b      	ldr	r3, [pc, #108]	@ (800b208 <xTaskIncrementTick+0x168>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d3b8      	bcc.n	800b116 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a8:	e7b5      	b.n	800b116 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1aa:	4b17      	ldr	r3, [pc, #92]	@ (800b208 <xTaskIncrementTick+0x168>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1b0:	4914      	ldr	r1, [pc, #80]	@ (800b204 <xTaskIncrementTick+0x164>)
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	440b      	add	r3, r1
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d901      	bls.n	800b1c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1c6:	4b11      	ldr	r3, [pc, #68]	@ (800b20c <xTaskIncrementTick+0x16c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d007      	beq.n	800b1de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	e004      	b.n	800b1de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b210 <xTaskIncrementTick+0x170>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	4a0d      	ldr	r2, [pc, #52]	@ (800b210 <xTaskIncrementTick+0x170>)
 800b1dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1de:	697b      	ldr	r3, [r7, #20]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3718      	adds	r7, #24
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	24005c30 	.word	0x24005c30
 800b1ec:	24005c0c 	.word	0x24005c0c
 800b1f0:	24005bc0 	.word	0x24005bc0
 800b1f4:	24005bc4 	.word	0x24005bc4
 800b1f8:	24005c20 	.word	0x24005c20
 800b1fc:	24005c28 	.word	0x24005c28
 800b200:	24005c10 	.word	0x24005c10
 800b204:	24005738 	.word	0x24005738
 800b208:	24005734 	.word	0x24005734
 800b20c:	24005c1c 	.word	0x24005c1c
 800b210:	24005c18 	.word	0x24005c18

0800b214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b21a:	4b2b      	ldr	r3, [pc, #172]	@ (800b2c8 <vTaskSwitchContext+0xb4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b222:	4b2a      	ldr	r3, [pc, #168]	@ (800b2cc <vTaskSwitchContext+0xb8>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b228:	e047      	b.n	800b2ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b22a:	4b28      	ldr	r3, [pc, #160]	@ (800b2cc <vTaskSwitchContext+0xb8>)
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b230:	4b27      	ldr	r3, [pc, #156]	@ (800b2d0 <vTaskSwitchContext+0xbc>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	e011      	b.n	800b25c <vTaskSwitchContext+0x48>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10b      	bne.n	800b256 <vTaskSwitchContext+0x42>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	607b      	str	r3, [r7, #4]
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	e7fd      	b.n	800b252 <vTaskSwitchContext+0x3e>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3b01      	subs	r3, #1
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	491d      	ldr	r1, [pc, #116]	@ (800b2d4 <vTaskSwitchContext+0xc0>)
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	440b      	add	r3, r1
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0e3      	beq.n	800b238 <vTaskSwitchContext+0x24>
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4613      	mov	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4a16      	ldr	r2, [pc, #88]	@ (800b2d4 <vTaskSwitchContext+0xc0>)
 800b27c:	4413      	add	r3, r2
 800b27e:	60bb      	str	r3, [r7, #8]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	605a      	str	r2, [r3, #4]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	3308      	adds	r3, #8
 800b292:	429a      	cmp	r2, r3
 800b294:	d104      	bne.n	800b2a0 <vTaskSwitchContext+0x8c>
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	605a      	str	r2, [r3, #4]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	@ (800b2d8 <vTaskSwitchContext+0xc4>)
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	4a09      	ldr	r2, [pc, #36]	@ (800b2d0 <vTaskSwitchContext+0xbc>)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2b0:	4b09      	ldr	r3, [pc, #36]	@ (800b2d8 <vTaskSwitchContext+0xc4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3354      	adds	r3, #84	@ 0x54
 800b2b6:	4a09      	ldr	r2, [pc, #36]	@ (800b2dc <vTaskSwitchContext+0xc8>)
 800b2b8:	6013      	str	r3, [r2, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	24005c30 	.word	0x24005c30
 800b2cc:	24005c1c 	.word	0x24005c1c
 800b2d0:	24005c10 	.word	0x24005c10
 800b2d4:	24005738 	.word	0x24005738
 800b2d8:	24005734 	.word	0x24005734
 800b2dc:	24000038 	.word	0x24000038

0800b2e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10b      	bne.n	800b308 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	60fb      	str	r3, [r7, #12]
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	e7fd      	b.n	800b304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b308:	4b07      	ldr	r3, [pc, #28]	@ (800b328 <vTaskPlaceOnEventList+0x48>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3318      	adds	r3, #24
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f7fe fa4c 	bl	80097ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b316:	2101      	movs	r1, #1
 800b318:	6838      	ldr	r0, [r7, #0]
 800b31a:	f000 fb97 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	24005734 	.word	0x24005734

0800b32c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10b      	bne.n	800b356 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	617b      	str	r3, [r7, #20]
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	e7fd      	b.n	800b352 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b356:	4b0a      	ldr	r3, [pc, #40]	@ (800b380 <vTaskPlaceOnEventListRestricted+0x54>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3318      	adds	r3, #24
 800b35c:	4619      	mov	r1, r3
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7fe fa01 	bl	8009766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d002      	beq.n	800b370 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b36a:	f04f 33ff 	mov.w	r3, #4294967295
 800b36e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	68b8      	ldr	r0, [r7, #8]
 800b374:	f000 fb6a 	bl	800ba4c <prvAddCurrentTaskToDelayedList>
	}
 800b378:	bf00      	nop
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	24005734 	.word	0x24005734

0800b384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10b      	bne.n	800b3b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	60fb      	str	r3, [r7, #12]
}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	e7fd      	b.n	800b3ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	3318      	adds	r3, #24
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fe fa32 	bl	8009820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b434 <xTaskRemoveFromEventList+0xb0>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d11d      	bne.n	800b400 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fe fa29 	bl	8009820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d2:	4b19      	ldr	r3, [pc, #100]	@ (800b438 <xTaskRemoveFromEventList+0xb4>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d903      	bls.n	800b3e2 <xTaskRemoveFromEventList+0x5e>
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3de:	4a16      	ldr	r2, [pc, #88]	@ (800b438 <xTaskRemoveFromEventList+0xb4>)
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4a13      	ldr	r2, [pc, #76]	@ (800b43c <xTaskRemoveFromEventList+0xb8>)
 800b3f0:	441a      	add	r2, r3
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	f7fe f9b4 	bl	8009766 <vListInsertEnd>
 800b3fe:	e005      	b.n	800b40c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	3318      	adds	r3, #24
 800b404:	4619      	mov	r1, r3
 800b406:	480e      	ldr	r0, [pc, #56]	@ (800b440 <xTaskRemoveFromEventList+0xbc>)
 800b408:	f7fe f9ad 	bl	8009766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b410:	4b0c      	ldr	r3, [pc, #48]	@ (800b444 <xTaskRemoveFromEventList+0xc0>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b416:	429a      	cmp	r2, r3
 800b418:	d905      	bls.n	800b426 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b41a:	2301      	movs	r3, #1
 800b41c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b41e:	4b0a      	ldr	r3, [pc, #40]	@ (800b448 <xTaskRemoveFromEventList+0xc4>)
 800b420:	2201      	movs	r2, #1
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	e001      	b.n	800b42a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b426:	2300      	movs	r3, #0
 800b428:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b42a:	697b      	ldr	r3, [r7, #20]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	24005c30 	.word	0x24005c30
 800b438:	24005c10 	.word	0x24005c10
 800b43c:	24005738 	.word	0x24005738
 800b440:	24005bc8 	.word	0x24005bc8
 800b444:	24005734 	.word	0x24005734
 800b448:	24005c1c 	.word	0x24005c1c

0800b44c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b454:	4b06      	ldr	r3, [pc, #24]	@ (800b470 <vTaskInternalSetTimeOutState+0x24>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b45c:	4b05      	ldr	r3, [pc, #20]	@ (800b474 <vTaskInternalSetTimeOutState+0x28>)
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	605a      	str	r2, [r3, #4]
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	24005c20 	.word	0x24005c20
 800b474:	24005c0c 	.word	0x24005c0c

0800b478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10b      	bne.n	800b4a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	613b      	str	r3, [r7, #16]
}
 800b49a:	bf00      	nop
 800b49c:	bf00      	nop
 800b49e:	e7fd      	b.n	800b49c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10b      	bne.n	800b4be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	60fb      	str	r3, [r7, #12]
}
 800b4b8:	bf00      	nop
 800b4ba:	bf00      	nop
 800b4bc:	e7fd      	b.n	800b4ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b4be:	f000 ffa3 	bl	800c408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b538 <xTaskCheckForTimeOut+0xc0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	69ba      	ldr	r2, [r7, #24]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4da:	d102      	bne.n	800b4e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	61fb      	str	r3, [r7, #28]
 800b4e0:	e023      	b.n	800b52a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	4b15      	ldr	r3, [pc, #84]	@ (800b53c <xTaskCheckForTimeOut+0xc4>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d007      	beq.n	800b4fe <xTaskCheckForTimeOut+0x86>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	69ba      	ldr	r2, [r7, #24]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d302      	bcc.n	800b4fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	61fb      	str	r3, [r7, #28]
 800b4fc:	e015      	b.n	800b52a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	429a      	cmp	r2, r3
 800b506:	d20b      	bcs.n	800b520 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ff99 	bl	800b44c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e004      	b.n	800b52a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	2200      	movs	r2, #0
 800b524:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b526:	2301      	movs	r3, #1
 800b528:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b52a:	f000 ff9f 	bl	800c46c <vPortExitCritical>

	return xReturn;
 800b52e:	69fb      	ldr	r3, [r7, #28]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	24005c0c 	.word	0x24005c0c
 800b53c:	24005c20 	.word	0x24005c20

0800b540 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b540:	b480      	push	{r7}
 800b542:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b544:	4b03      	ldr	r3, [pc, #12]	@ (800b554 <vTaskMissedYield+0x14>)
 800b546:	2201      	movs	r2, #1
 800b548:	601a      	str	r2, [r3, #0]
}
 800b54a:	bf00      	nop
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	24005c1c 	.word	0x24005c1c

0800b558 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b560:	f000 f852 	bl	800b608 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b564:	4b06      	ldr	r3, [pc, #24]	@ (800b580 <prvIdleTask+0x28>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d9f9      	bls.n	800b560 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b56c:	4b05      	ldr	r3, [pc, #20]	@ (800b584 <prvIdleTask+0x2c>)
 800b56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b57c:	e7f0      	b.n	800b560 <prvIdleTask+0x8>
 800b57e:	bf00      	nop
 800b580:	24005738 	.word	0x24005738
 800b584:	e000ed04 	.word	0xe000ed04

0800b588 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b58e:	2300      	movs	r3, #0
 800b590:	607b      	str	r3, [r7, #4]
 800b592:	e00c      	b.n	800b5ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4a12      	ldr	r2, [pc, #72]	@ (800b5e8 <prvInitialiseTaskLists+0x60>)
 800b5a0:	4413      	add	r3, r2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fe f8b2 	bl	800970c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b37      	cmp	r3, #55	@ 0x37
 800b5b2:	d9ef      	bls.n	800b594 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b5b4:	480d      	ldr	r0, [pc, #52]	@ (800b5ec <prvInitialiseTaskLists+0x64>)
 800b5b6:	f7fe f8a9 	bl	800970c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b5ba:	480d      	ldr	r0, [pc, #52]	@ (800b5f0 <prvInitialiseTaskLists+0x68>)
 800b5bc:	f7fe f8a6 	bl	800970c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b5c0:	480c      	ldr	r0, [pc, #48]	@ (800b5f4 <prvInitialiseTaskLists+0x6c>)
 800b5c2:	f7fe f8a3 	bl	800970c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b5c6:	480c      	ldr	r0, [pc, #48]	@ (800b5f8 <prvInitialiseTaskLists+0x70>)
 800b5c8:	f7fe f8a0 	bl	800970c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5cc:	480b      	ldr	r0, [pc, #44]	@ (800b5fc <prvInitialiseTaskLists+0x74>)
 800b5ce:	f7fe f89d 	bl	800970c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b600 <prvInitialiseTaskLists+0x78>)
 800b5d4:	4a05      	ldr	r2, [pc, #20]	@ (800b5ec <prvInitialiseTaskLists+0x64>)
 800b5d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b604 <prvInitialiseTaskLists+0x7c>)
 800b5da:	4a05      	ldr	r2, [pc, #20]	@ (800b5f0 <prvInitialiseTaskLists+0x68>)
 800b5dc:	601a      	str	r2, [r3, #0]
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	24005738 	.word	0x24005738
 800b5ec:	24005b98 	.word	0x24005b98
 800b5f0:	24005bac 	.word	0x24005bac
 800b5f4:	24005bc8 	.word	0x24005bc8
 800b5f8:	24005bdc 	.word	0x24005bdc
 800b5fc:	24005bf4 	.word	0x24005bf4
 800b600:	24005bc0 	.word	0x24005bc0
 800b604:	24005bc4 	.word	0x24005bc4

0800b608 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b60e:	e019      	b.n	800b644 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b610:	f000 fefa 	bl	800c408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b614:	4b10      	ldr	r3, [pc, #64]	@ (800b658 <prvCheckTasksWaitingTermination+0x50>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3304      	adds	r3, #4
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe f8fd 	bl	8009820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b626:	4b0d      	ldr	r3, [pc, #52]	@ (800b65c <prvCheckTasksWaitingTermination+0x54>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	4a0b      	ldr	r2, [pc, #44]	@ (800b65c <prvCheckTasksWaitingTermination+0x54>)
 800b62e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b630:	4b0b      	ldr	r3, [pc, #44]	@ (800b660 <prvCheckTasksWaitingTermination+0x58>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3b01      	subs	r3, #1
 800b636:	4a0a      	ldr	r2, [pc, #40]	@ (800b660 <prvCheckTasksWaitingTermination+0x58>)
 800b638:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b63a:	f000 ff17 	bl	800c46c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f810 	bl	800b664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b644:	4b06      	ldr	r3, [pc, #24]	@ (800b660 <prvCheckTasksWaitingTermination+0x58>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1e1      	bne.n	800b610 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	24005bdc 	.word	0x24005bdc
 800b65c:	24005c08 	.word	0x24005c08
 800b660:	24005bf0 	.word	0x24005bf0

0800b664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3354      	adds	r3, #84	@ 0x54
 800b670:	4618      	mov	r0, r3
 800b672:	f006 f9e3 	bl	8011a3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d108      	bne.n	800b692 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b684:	4618      	mov	r0, r3
 800b686:	f001 f8af 	bl	800c7e8 <vPortFree>
				vPortFree( pxTCB );
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f001 f8ac 	bl	800c7e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b690:	e019      	b.n	800b6c6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d103      	bne.n	800b6a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f001 f8a3 	bl	800c7e8 <vPortFree>
	}
 800b6a2:	e010      	b.n	800b6c6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d00b      	beq.n	800b6c6 <prvDeleteTCB+0x62>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	60fb      	str	r3, [r7, #12]
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	e7fd      	b.n	800b6c2 <prvDeleteTCB+0x5e>
	}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b708 <prvResetNextTaskUnblockTime+0x38>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d104      	bne.n	800b6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b70c <prvResetNextTaskUnblockTime+0x3c>)
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6e8:	e008      	b.n	800b6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ea:	4b07      	ldr	r3, [pc, #28]	@ (800b708 <prvResetNextTaskUnblockTime+0x38>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4a04      	ldr	r2, [pc, #16]	@ (800b70c <prvResetNextTaskUnblockTime+0x3c>)
 800b6fa:	6013      	str	r3, [r2, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	24005bc0 	.word	0x24005bc0
 800b70c:	24005c28 	.word	0x24005c28

0800b710 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b716:	4b05      	ldr	r3, [pc, #20]	@ (800b72c <xTaskGetCurrentTaskHandle+0x1c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b71c:	687b      	ldr	r3, [r7, #4]
	}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	24005734 	.word	0x24005734

0800b730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b736:	4b0b      	ldr	r3, [pc, #44]	@ (800b764 <xTaskGetSchedulerState+0x34>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d102      	bne.n	800b744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b73e:	2301      	movs	r3, #1
 800b740:	607b      	str	r3, [r7, #4]
 800b742:	e008      	b.n	800b756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b744:	4b08      	ldr	r3, [pc, #32]	@ (800b768 <xTaskGetSchedulerState+0x38>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d102      	bne.n	800b752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b74c:	2302      	movs	r3, #2
 800b74e:	607b      	str	r3, [r7, #4]
 800b750:	e001      	b.n	800b756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b752:	2300      	movs	r3, #0
 800b754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b756:	687b      	ldr	r3, [r7, #4]
	}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	24005c14 	.word	0x24005c14
 800b768:	24005c30 	.word	0x24005c30

0800b76c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b778:	2300      	movs	r3, #0
 800b77a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d051      	beq.n	800b826 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b786:	4b2a      	ldr	r3, [pc, #168]	@ (800b830 <xTaskPriorityInherit+0xc4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d241      	bcs.n	800b814 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	db06      	blt.n	800b7a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b798:	4b25      	ldr	r3, [pc, #148]	@ (800b830 <xTaskPriorityInherit+0xc4>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	6959      	ldr	r1, [r3, #20]
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b834 <xTaskPriorityInherit+0xc8>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d122      	bne.n	800b804 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe f82c 	bl	8009820 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7c8:	4b19      	ldr	r3, [pc, #100]	@ (800b830 <xTaskPriorityInherit+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d6:	4b18      	ldr	r3, [pc, #96]	@ (800b838 <xTaskPriorityInherit+0xcc>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d903      	bls.n	800b7e6 <xTaskPriorityInherit+0x7a>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	4a15      	ldr	r2, [pc, #84]	@ (800b838 <xTaskPriorityInherit+0xcc>)
 800b7e4:	6013      	str	r3, [r2, #0]
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4a10      	ldr	r2, [pc, #64]	@ (800b834 <xTaskPriorityInherit+0xc8>)
 800b7f4:	441a      	add	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f7fd ffb2 	bl	8009766 <vListInsertEnd>
 800b802:	e004      	b.n	800b80e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b804:	4b0a      	ldr	r3, [pc, #40]	@ (800b830 <xTaskPriorityInherit+0xc4>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b80e:	2301      	movs	r3, #1
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	e008      	b.n	800b826 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b818:	4b05      	ldr	r3, [pc, #20]	@ (800b830 <xTaskPriorityInherit+0xc4>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81e:	429a      	cmp	r2, r3
 800b820:	d201      	bcs.n	800b826 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b822:	2301      	movs	r3, #1
 800b824:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b826:	68fb      	ldr	r3, [r7, #12]
	}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	24005734 	.word	0x24005734
 800b834:	24005738 	.word	0x24005738
 800b838:	24005c10 	.word	0x24005c10

0800b83c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b848:	2300      	movs	r3, #0
 800b84a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d058      	beq.n	800b904 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b852:	4b2f      	ldr	r3, [pc, #188]	@ (800b910 <xTaskPriorityDisinherit+0xd4>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d00b      	beq.n	800b874 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	60fb      	str	r3, [r7, #12]
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	e7fd      	b.n	800b870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10b      	bne.n	800b894 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	60bb      	str	r3, [r7, #8]
}
 800b88e:	bf00      	nop
 800b890:	bf00      	nop
 800b892:	e7fd      	b.n	800b890 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b898:	1e5a      	subs	r2, r3, #1
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d02c      	beq.n	800b904 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d128      	bne.n	800b904 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd ffb2 	bl	8009820 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b914 <xTaskPriorityDisinherit+0xd8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d903      	bls.n	800b8e4 <xTaskPriorityDisinherit+0xa8>
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e0:	4a0c      	ldr	r2, [pc, #48]	@ (800b914 <xTaskPriorityDisinherit+0xd8>)
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4a09      	ldr	r2, [pc, #36]	@ (800b918 <xTaskPriorityDisinherit+0xdc>)
 800b8f2:	441a      	add	r2, r3
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f7fd ff33 	bl	8009766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b900:	2301      	movs	r3, #1
 800b902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b904:	697b      	ldr	r3, [r7, #20]
	}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	24005734 	.word	0x24005734
 800b914:	24005c10 	.word	0x24005c10
 800b918:	24005738 	.word	0x24005738

0800b91c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b92a:	2301      	movs	r3, #1
 800b92c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d06c      	beq.n	800ba0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10b      	bne.n	800b954 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	60fb      	str	r3, [r7, #12]
}
 800b94e:	bf00      	nop
 800b950:	bf00      	nop
 800b952:	e7fd      	b.n	800b950 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d902      	bls.n	800b964 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	e002      	b.n	800b96a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b964:	69bb      	ldr	r3, [r7, #24]
 800b966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b968:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	429a      	cmp	r2, r3
 800b972:	d04c      	beq.n	800ba0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d147      	bne.n	800ba0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b97e:	4b26      	ldr	r3, [pc, #152]	@ (800ba18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	429a      	cmp	r2, r3
 800b986:	d10b      	bne.n	800b9a0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98c:	f383 8811 	msr	BASEPRI, r3
 800b990:	f3bf 8f6f 	isb	sy
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	60bb      	str	r3, [r7, #8]
}
 800b99a:	bf00      	nop
 800b99c:	bf00      	nop
 800b99e:	e7fd      	b.n	800b99c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	69fa      	ldr	r2, [r7, #28]
 800b9aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	699b      	ldr	r3, [r3, #24]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	db04      	blt.n	800b9be <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	6959      	ldr	r1, [r3, #20]
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4a13      	ldr	r2, [pc, #76]	@ (800ba1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b9ce:	4413      	add	r3, r2
 800b9d0:	4299      	cmp	r1, r3
 800b9d2:	d11c      	bne.n	800ba0e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fd ff21 	bl	8009820 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d903      	bls.n	800b9f2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	4a0c      	ldr	r2, [pc, #48]	@ (800ba20 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4a07      	ldr	r2, [pc, #28]	@ (800ba1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ba00:	441a      	add	r2, r3
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f7fd feac 	bl	8009766 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba0e:	bf00      	nop
 800ba10:	3720      	adds	r7, #32
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	24005734 	.word	0x24005734
 800ba1c:	24005738 	.word	0x24005738
 800ba20:	24005c10 	.word	0x24005c10

0800ba24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba24:	b480      	push	{r7}
 800ba26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba28:	4b07      	ldr	r3, [pc, #28]	@ (800ba48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba30:	4b05      	ldr	r3, [pc, #20]	@ (800ba48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba36:	3201      	adds	r2, #1
 800ba38:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	@ (800ba48 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
	}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	24005734 	.word	0x24005734

0800ba4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba56:	4b21      	ldr	r3, [pc, #132]	@ (800badc <prvAddCurrentTaskToDelayedList+0x90>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba5c:	4b20      	ldr	r3, [pc, #128]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3304      	adds	r3, #4
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fd fedc 	bl	8009820 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6e:	d10a      	bne.n	800ba86 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba76:	4b1a      	ldr	r3, [pc, #104]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4819      	ldr	r0, [pc, #100]	@ (800bae4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba80:	f7fd fe71 	bl	8009766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba84:	e026      	b.n	800bad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba8e:	4b14      	ldr	r3, [pc, #80]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d209      	bcs.n	800bab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba9e:	4b12      	ldr	r3, [pc, #72]	@ (800bae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	4b0f      	ldr	r3, [pc, #60]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4619      	mov	r1, r3
 800baaa:	4610      	mov	r0, r2
 800baac:	f7fd fe7f 	bl	80097ae <vListInsert>
}
 800bab0:	e010      	b.n	800bad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bab2:	4b0e      	ldr	r3, [pc, #56]	@ (800baec <prvAddCurrentTaskToDelayedList+0xa0>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	4b0a      	ldr	r3, [pc, #40]	@ (800bae0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3304      	adds	r3, #4
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	f7fd fe75 	bl	80097ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bac4:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d202      	bcs.n	800bad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bace:	4a08      	ldr	r2, [pc, #32]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	6013      	str	r3, [r2, #0]
}
 800bad4:	bf00      	nop
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	24005c0c 	.word	0x24005c0c
 800bae0:	24005734 	.word	0x24005734
 800bae4:	24005bf4 	.word	0x24005bf4
 800bae8:	24005bc4 	.word	0x24005bc4
 800baec:	24005bc0 	.word	0x24005bc0
 800baf0:	24005c28 	.word	0x24005c28

0800baf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08a      	sub	sp, #40	@ 0x28
 800baf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bafe:	f000 fb13 	bl	800c128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb02:	4b1d      	ldr	r3, [pc, #116]	@ (800bb78 <xTimerCreateTimerTask+0x84>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d021      	beq.n	800bb4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb12:	1d3a      	adds	r2, r7, #4
 800bb14:	f107 0108 	add.w	r1, r7, #8
 800bb18:	f107 030c 	add.w	r3, r7, #12
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fd fddb 	bl	80096d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	9202      	str	r2, [sp, #8]
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	2300      	movs	r3, #0
 800bb32:	460a      	mov	r2, r1
 800bb34:	4911      	ldr	r1, [pc, #68]	@ (800bb7c <xTimerCreateTimerTask+0x88>)
 800bb36:	4812      	ldr	r0, [pc, #72]	@ (800bb80 <xTimerCreateTimerTask+0x8c>)
 800bb38:	f7fe ff80 	bl	800aa3c <xTaskCreateStatic>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	4a11      	ldr	r2, [pc, #68]	@ (800bb84 <xTimerCreateTimerTask+0x90>)
 800bb40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb42:	4b10      	ldr	r3, [pc, #64]	@ (800bb84 <xTimerCreateTimerTask+0x90>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10b      	bne.n	800bb6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	613b      	str	r3, [r7, #16]
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	e7fd      	b.n	800bb68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb6c:	697b      	ldr	r3, [r7, #20]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	24005c64 	.word	0x24005c64
 800bb7c:	08012890 	.word	0x08012890
 800bb80:	0800bcc1 	.word	0x0800bcc1
 800bb84:	24005c68 	.word	0x24005c68

0800bb88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08a      	sub	sp, #40	@ 0x28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
 800bb94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10b      	bne.n	800bbb8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	623b      	str	r3, [r7, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	bf00      	nop
 800bbb6:	e7fd      	b.n	800bbb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbb8:	4b19      	ldr	r3, [pc, #100]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d02a      	beq.n	800bc16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b05      	cmp	r3, #5
 800bbd0:	dc18      	bgt.n	800bc04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbd2:	f7ff fdad 	bl	800b730 <xTaskGetSchedulerState>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d109      	bne.n	800bbf0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbdc:	4b10      	ldr	r3, [pc, #64]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bbde:	6818      	ldr	r0, [r3, #0]
 800bbe0:	f107 0110 	add.w	r1, r7, #16
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbe8:	f7fe f8b0 	bl	8009d4c <xQueueGenericSend>
 800bbec:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbee:	e012      	b.n	800bc16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	f107 0110 	add.w	r1, r7, #16
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7fe f8a6 	bl	8009d4c <xQueueGenericSend>
 800bc00:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc02:	e008      	b.n	800bc16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc04:	4b06      	ldr	r3, [pc, #24]	@ (800bc20 <xTimerGenericCommand+0x98>)
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	f107 0110 	add.w	r1, r7, #16
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	f7fe f99e 	bl	8009f50 <xQueueGenericSendFromISR>
 800bc14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3728      	adds	r7, #40	@ 0x28
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	24005c64 	.word	0x24005c64

0800bc24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc2e:	4b23      	ldr	r3, [pc, #140]	@ (800bcbc <prvProcessExpiredTimer+0x98>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fd fdef 	bl	8009820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d023      	beq.n	800bc98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	699a      	ldr	r2, [r3, #24]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	18d1      	adds	r1, r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	6978      	ldr	r0, [r7, #20]
 800bc5e:	f000 f8d5 	bl	800be0c <prvInsertTimerInActiveList>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d020      	beq.n	800bcaa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	2100      	movs	r1, #0
 800bc72:	6978      	ldr	r0, [r7, #20]
 800bc74:	f7ff ff88 	bl	800bb88 <xTimerGenericCommand>
 800bc78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d114      	bne.n	800bcaa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60fb      	str	r3, [r7, #12]
}
 800bc92:	bf00      	nop
 800bc94:	bf00      	nop
 800bc96:	e7fd      	b.n	800bc94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc9e:	f023 0301 	bic.w	r3, r3, #1
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	6978      	ldr	r0, [r7, #20]
 800bcb0:	4798      	blx	r3
}
 800bcb2:	bf00      	nop
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	24005c5c 	.word	0x24005c5c

0800bcc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcc8:	f107 0308 	add.w	r3, r7, #8
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 f859 	bl	800bd84 <prvGetNextExpireTime>
 800bcd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f000 f805 	bl	800bce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcde:	f000 f8d7 	bl	800be90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bce2:	bf00      	nop
 800bce4:	e7f0      	b.n	800bcc8 <prvTimerTask+0x8>
	...

0800bce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bcf2:	f7ff f907 	bl	800af04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcf6:	f107 0308 	add.w	r3, r7, #8
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 f866 	bl	800bdcc <prvSampleTimeNow>
 800bd00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d130      	bne.n	800bd6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <prvProcessTimerOrBlockTask+0x3c>
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d806      	bhi.n	800bd24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd16:	f7ff f903 	bl	800af20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd1a:	68f9      	ldr	r1, [r7, #12]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff ff81 	bl	800bc24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd22:	e024      	b.n	800bd6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d008      	beq.n	800bd3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd2a:	4b13      	ldr	r3, [pc, #76]	@ (800bd78 <prvProcessTimerOrBlockTask+0x90>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <prvProcessTimerOrBlockTask+0x50>
 800bd34:	2301      	movs	r3, #1
 800bd36:	e000      	b.n	800bd3a <prvProcessTimerOrBlockTask+0x52>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd7c <prvProcessTimerOrBlockTask+0x94>)
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f7fe fe43 	bl	800a9d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd4e:	f7ff f8e7 	bl	800af20 <xTaskResumeAll>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd58:	4b09      	ldr	r3, [pc, #36]	@ (800bd80 <prvProcessTimerOrBlockTask+0x98>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
}
 800bd68:	e001      	b.n	800bd6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd6a:	f7ff f8d9 	bl	800af20 <xTaskResumeAll>
}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	24005c60 	.word	0x24005c60
 800bd7c:	24005c64 	.word	0x24005c64
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc8 <prvGetNextExpireTime+0x44>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d101      	bne.n	800bd9a <prvGetNextExpireTime+0x16>
 800bd96:	2201      	movs	r2, #1
 800bd98:	e000      	b.n	800bd9c <prvGetNextExpireTime+0x18>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d105      	bne.n	800bdb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bda8:	4b07      	ldr	r3, [pc, #28]	@ (800bdc8 <prvGetNextExpireTime+0x44>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	60fb      	str	r3, [r7, #12]
 800bdb2:	e001      	b.n	800bdb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	24005c5c 	.word	0x24005c5c

0800bdcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bdd4:	f7ff f942 	bl	800b05c <xTaskGetTickCount>
 800bdd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdda:	4b0b      	ldr	r3, [pc, #44]	@ (800be08 <prvSampleTimeNow+0x3c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d205      	bcs.n	800bdf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bde4:	f000 f93a 	bl	800c05c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	e002      	b.n	800bdf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bdf6:	4a04      	ldr	r2, [pc, #16]	@ (800be08 <prvSampleTimeNow+0x3c>)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3710      	adds	r7, #16
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	24005c6c 	.word	0x24005c6c

0800be0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d812      	bhi.n	800be58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d302      	bcc.n	800be46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be40:	2301      	movs	r3, #1
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e01b      	b.n	800be7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be46:	4b10      	ldr	r3, [pc, #64]	@ (800be88 <prvInsertTimerInActiveList+0x7c>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3304      	adds	r3, #4
 800be4e:	4619      	mov	r1, r3
 800be50:	4610      	mov	r0, r2
 800be52:	f7fd fcac 	bl	80097ae <vListInsert>
 800be56:	e012      	b.n	800be7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d206      	bcs.n	800be6e <prvInsertTimerInActiveList+0x62>
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	429a      	cmp	r2, r3
 800be66:	d302      	bcc.n	800be6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	617b      	str	r3, [r7, #20]
 800be6c:	e007      	b.n	800be7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be6e:	4b07      	ldr	r3, [pc, #28]	@ (800be8c <prvInsertTimerInActiveList+0x80>)
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3304      	adds	r3, #4
 800be76:	4619      	mov	r1, r3
 800be78:	4610      	mov	r0, r2
 800be7a:	f7fd fc98 	bl	80097ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be7e:	697b      	ldr	r3, [r7, #20]
}
 800be80:	4618      	mov	r0, r3
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	24005c60 	.word	0x24005c60
 800be8c:	24005c5c 	.word	0x24005c5c

0800be90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08e      	sub	sp, #56	@ 0x38
 800be94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be96:	e0ce      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da19      	bge.n	800bed2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be9e:	1d3b      	adds	r3, r7, #4
 800bea0:	3304      	adds	r3, #4
 800bea2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10b      	bne.n	800bec2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	61fb      	str	r3, [r7, #28]
}
 800bebc:	bf00      	nop
 800bebe:	bf00      	nop
 800bec0:	e7fd      	b.n	800bebe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bec8:	6850      	ldr	r0, [r2, #4]
 800beca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800becc:	6892      	ldr	r2, [r2, #8]
 800bece:	4611      	mov	r1, r2
 800bed0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f2c0 80ae 	blt.w	800c036 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d004      	beq.n	800bef0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	3304      	adds	r3, #4
 800beea:	4618      	mov	r0, r3
 800beec:	f7fd fc98 	bl	8009820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bef0:	463b      	mov	r3, r7
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff ff6a 	bl	800bdcc <prvSampleTimeNow>
 800bef8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b09      	cmp	r3, #9
 800befe:	f200 8097 	bhi.w	800c030 <prvProcessReceivedCommands+0x1a0>
 800bf02:	a201      	add	r2, pc, #4	@ (adr r2, 800bf08 <prvProcessReceivedCommands+0x78>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf31 	.word	0x0800bf31
 800bf0c:	0800bf31 	.word	0x0800bf31
 800bf10:	0800bf31 	.word	0x0800bf31
 800bf14:	0800bfa7 	.word	0x0800bfa7
 800bf18:	0800bfbb 	.word	0x0800bfbb
 800bf1c:	0800c007 	.word	0x0800c007
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf31 	.word	0x0800bf31
 800bf28:	0800bfa7 	.word	0x0800bfa7
 800bf2c:	0800bfbb 	.word	0x0800bfbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	18d1      	adds	r1, r2, r3
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf50:	f7ff ff5c 	bl	800be0c <prvInsertTimerInActiveList>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d06c      	beq.n	800c034 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf68:	f003 0304 	and.w	r3, r3, #4
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d061      	beq.n	800c034 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf74:	699b      	ldr	r3, [r3, #24]
 800bf76:	441a      	add	r2, r3
 800bf78:	2300      	movs	r3, #0
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2100      	movs	r1, #0
 800bf80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf82:	f7ff fe01 	bl	800bb88 <xTimerGenericCommand>
 800bf86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d152      	bne.n	800c034 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	61bb      	str	r3, [r7, #24]
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	e7fd      	b.n	800bfa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfac:	f023 0301 	bic.w	r3, r3, #1
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfb8:	e03d      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfc0:	f043 0301 	orr.w	r3, r3, #1
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10b      	bne.n	800bff2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	617b      	str	r3, [r7, #20]
}
 800bfec:	bf00      	nop
 800bfee:	bf00      	nop
 800bff0:	e7fd      	b.n	800bfee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	18d1      	adds	r1, r2, r3
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c000:	f7ff ff04 	bl	800be0c <prvInsertTimerInActiveList>
					break;
 800c004:	e017      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d103      	bne.n	800c01c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c016:	f000 fbe7 	bl	800c7e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c01a:	e00c      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	b2da      	uxtb	r2, r3
 800c028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c02e:	e002      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c030:	bf00      	nop
 800c032:	e000      	b.n	800c036 <prvProcessReceivedCommands+0x1a6>
					break;
 800c034:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c036:	4b08      	ldr	r3, [pc, #32]	@ (800c058 <prvProcessReceivedCommands+0x1c8>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	1d39      	adds	r1, r7, #4
 800c03c:	2200      	movs	r2, #0
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe f8b4 	bl	800a1ac <xQueueReceive>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	f47f af26 	bne.w	800be98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c04c:	bf00      	nop
 800c04e:	bf00      	nop
 800c050:	3730      	adds	r7, #48	@ 0x30
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	24005c64 	.word	0x24005c64

0800c05c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c062:	e049      	b.n	800c0f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c064:	4b2e      	ldr	r3, [pc, #184]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06e:	4b2c      	ldr	r3, [pc, #176]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	3304      	adds	r3, #4
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fd fbcf 	bl	8009820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d02f      	beq.n	800c0f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	4413      	add	r3, r2
 800c0a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d90e      	bls.n	800c0c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	4619      	mov	r1, r3
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	f7fd fb74 	bl	80097ae <vListInsert>
 800c0c6:	e017      	b.n	800c0f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff fd58 	bl	800bb88 <xTimerGenericCommand>
 800c0d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10b      	bne.n	800c0f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	603b      	str	r3, [r7, #0]
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	e7fd      	b.n	800c0f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0f8:	4b09      	ldr	r3, [pc, #36]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1b0      	bne.n	800c064 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c102:	4b07      	ldr	r3, [pc, #28]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c108:	4b06      	ldr	r3, [pc, #24]	@ (800c124 <prvSwitchTimerLists+0xc8>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a04      	ldr	r2, [pc, #16]	@ (800c120 <prvSwitchTimerLists+0xc4>)
 800c10e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c110:	4a04      	ldr	r2, [pc, #16]	@ (800c124 <prvSwitchTimerLists+0xc8>)
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	6013      	str	r3, [r2, #0]
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	24005c5c 	.word	0x24005c5c
 800c124:	24005c60 	.word	0x24005c60

0800c128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c12e:	f000 f96b 	bl	800c408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c132:	4b15      	ldr	r3, [pc, #84]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d120      	bne.n	800c17c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c13a:	4814      	ldr	r0, [pc, #80]	@ (800c18c <prvCheckForValidListAndQueue+0x64>)
 800c13c:	f7fd fae6 	bl	800970c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c140:	4813      	ldr	r0, [pc, #76]	@ (800c190 <prvCheckForValidListAndQueue+0x68>)
 800c142:	f7fd fae3 	bl	800970c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c146:	4b13      	ldr	r3, [pc, #76]	@ (800c194 <prvCheckForValidListAndQueue+0x6c>)
 800c148:	4a10      	ldr	r2, [pc, #64]	@ (800c18c <prvCheckForValidListAndQueue+0x64>)
 800c14a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c14c:	4b12      	ldr	r3, [pc, #72]	@ (800c198 <prvCheckForValidListAndQueue+0x70>)
 800c14e:	4a10      	ldr	r2, [pc, #64]	@ (800c190 <prvCheckForValidListAndQueue+0x68>)
 800c150:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c152:	2300      	movs	r3, #0
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	4b11      	ldr	r3, [pc, #68]	@ (800c19c <prvCheckForValidListAndQueue+0x74>)
 800c158:	4a11      	ldr	r2, [pc, #68]	@ (800c1a0 <prvCheckForValidListAndQueue+0x78>)
 800c15a:	2110      	movs	r1, #16
 800c15c:	200a      	movs	r0, #10
 800c15e:	f7fd fbf3 	bl	8009948 <xQueueGenericCreateStatic>
 800c162:	4603      	mov	r3, r0
 800c164:	4a08      	ldr	r2, [pc, #32]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c166:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c168:	4b07      	ldr	r3, [pc, #28]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d005      	beq.n	800c17c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c170:	4b05      	ldr	r3, [pc, #20]	@ (800c188 <prvCheckForValidListAndQueue+0x60>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	490b      	ldr	r1, [pc, #44]	@ (800c1a4 <prvCheckForValidListAndQueue+0x7c>)
 800c176:	4618      	mov	r0, r3
 800c178:	f7fe fbd8 	bl	800a92c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c17c:	f000 f976 	bl	800c46c <vPortExitCritical>
}
 800c180:	bf00      	nop
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	24005c64 	.word	0x24005c64
 800c18c:	24005c34 	.word	0x24005c34
 800c190:	24005c48 	.word	0x24005c48
 800c194:	24005c5c 	.word	0x24005c5c
 800c198:	24005c60 	.word	0x24005c60
 800c19c:	24005d10 	.word	0x24005d10
 800c1a0:	24005c70 	.word	0x24005c70
 800c1a4:	08012898 	.word	0x08012898

0800c1a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3b04      	subs	r3, #4
 800c1b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	3b04      	subs	r3, #4
 800c1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	f023 0201 	bic.w	r2, r3, #1
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3b04      	subs	r3, #4
 800c1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1d8:	4a0c      	ldr	r2, [pc, #48]	@ (800c20c <pxPortInitialiseStack+0x64>)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3b14      	subs	r3, #20
 800c1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3b04      	subs	r3, #4
 800c1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f06f 0202 	mvn.w	r2, #2
 800c1f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3b20      	subs	r3, #32
 800c1fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	0800c211 	.word	0x0800c211

0800c210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c21a:	4b13      	ldr	r3, [pc, #76]	@ (800c268 <prvTaskExitError+0x58>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	d00b      	beq.n	800c23c <prvTaskExitError+0x2c>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	60fb      	str	r3, [r7, #12]
}
 800c236:	bf00      	nop
 800c238:	bf00      	nop
 800c23a:	e7fd      	b.n	800c238 <prvTaskExitError+0x28>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	60bb      	str	r3, [r7, #8]
}
 800c24e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c250:	bf00      	nop
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d0fc      	beq.n	800c252 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c258:	bf00      	nop
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	24000024 	.word	0x24000024
 800c26c:	00000000 	.word	0x00000000

0800c270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c270:	4b07      	ldr	r3, [pc, #28]	@ (800c290 <pxCurrentTCBConst2>)
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	6808      	ldr	r0, [r1, #0]
 800c276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27a:	f380 8809 	msr	PSP, r0
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f04f 0000 	mov.w	r0, #0
 800c286:	f380 8811 	msr	BASEPRI, r0
 800c28a:	4770      	bx	lr
 800c28c:	f3af 8000 	nop.w

0800c290 <pxCurrentTCBConst2>:
 800c290:	24005734 	.word	0x24005734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop

0800c298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c298:	4808      	ldr	r0, [pc, #32]	@ (800c2bc <prvPortStartFirstTask+0x24>)
 800c29a:	6800      	ldr	r0, [r0, #0]
 800c29c:	6800      	ldr	r0, [r0, #0]
 800c29e:	f380 8808 	msr	MSP, r0
 800c2a2:	f04f 0000 	mov.w	r0, #0
 800c2a6:	f380 8814 	msr	CONTROL, r0
 800c2aa:	b662      	cpsie	i
 800c2ac:	b661      	cpsie	f
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	df00      	svc	0
 800c2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ba:	bf00      	nop
 800c2bc:	e000ed08 	.word	0xe000ed08

0800c2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2c6:	4b47      	ldr	r3, [pc, #284]	@ (800c3e4 <xPortStartScheduler+0x124>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a47      	ldr	r2, [pc, #284]	@ (800c3e8 <xPortStartScheduler+0x128>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d10b      	bne.n	800c2e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	613b      	str	r3, [r7, #16]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3e4 <xPortStartScheduler+0x124>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c3ec <xPortStartScheduler+0x12c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d10b      	bne.n	800c30a <xPortStartScheduler+0x4a>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	60fb      	str	r3, [r7, #12]
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c30a:	4b39      	ldr	r3, [pc, #228]	@ (800c3f0 <xPortStartScheduler+0x130>)
 800c30c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	22ff      	movs	r2, #255	@ 0xff
 800c31a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	b2db      	uxtb	r3, r3
 800c328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	4b31      	ldr	r3, [pc, #196]	@ (800c3f4 <xPortStartScheduler+0x134>)
 800c330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c332:	4b31      	ldr	r3, [pc, #196]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c334:	2207      	movs	r2, #7
 800c336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c338:	e009      	b.n	800c34e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c33a:	4b2f      	ldr	r3, [pc, #188]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3b01      	subs	r3, #1
 800c340:	4a2d      	ldr	r2, [pc, #180]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c34e:	78fb      	ldrb	r3, [r7, #3]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c356:	2b80      	cmp	r3, #128	@ 0x80
 800c358:	d0ef      	beq.n	800c33a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c35a:	4b27      	ldr	r3, [pc, #156]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f1c3 0307 	rsb	r3, r3, #7
 800c362:	2b04      	cmp	r3, #4
 800c364:	d00b      	beq.n	800c37e <xPortStartScheduler+0xbe>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60bb      	str	r3, [r7, #8]
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c37e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	021b      	lsls	r3, r3, #8
 800c384:	4a1c      	ldr	r2, [pc, #112]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c388:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c390:	4a19      	ldr	r2, [pc, #100]	@ (800c3f8 <xPortStartScheduler+0x138>)
 800c392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	b2da      	uxtb	r2, r3
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c39c:	4b17      	ldr	r3, [pc, #92]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a16      	ldr	r2, [pc, #88]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c3a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3a8:	4b14      	ldr	r3, [pc, #80]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a13      	ldr	r2, [pc, #76]	@ (800c3fc <xPortStartScheduler+0x13c>)
 800c3ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3b4:	f000 f8da 	bl	800c56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3b8:	4b11      	ldr	r3, [pc, #68]	@ (800c400 <xPortStartScheduler+0x140>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3be:	f000 f8f9 	bl	800c5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3c2:	4b10      	ldr	r3, [pc, #64]	@ (800c404 <xPortStartScheduler+0x144>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c404 <xPortStartScheduler+0x144>)
 800c3c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3ce:	f7ff ff63 	bl	800c298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3d2:	f7fe ff1f 	bl	800b214 <vTaskSwitchContext>
	prvTaskExitError();
 800c3d6:	f7ff ff1b 	bl	800c210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	e000ed00 	.word	0xe000ed00
 800c3e8:	410fc271 	.word	0x410fc271
 800c3ec:	410fc270 	.word	0x410fc270
 800c3f0:	e000e400 	.word	0xe000e400
 800c3f4:	24005d60 	.word	0x24005d60
 800c3f8:	24005d64 	.word	0x24005d64
 800c3fc:	e000ed20 	.word	0xe000ed20
 800c400:	24000024 	.word	0x24000024
 800c404:	e000ef34 	.word	0xe000ef34

0800c408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	607b      	str	r3, [r7, #4]
}
 800c420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c422:	4b10      	ldr	r3, [pc, #64]	@ (800c464 <vPortEnterCritical+0x5c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3301      	adds	r3, #1
 800c428:	4a0e      	ldr	r2, [pc, #56]	@ (800c464 <vPortEnterCritical+0x5c>)
 800c42a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c42c:	4b0d      	ldr	r3, [pc, #52]	@ (800c464 <vPortEnterCritical+0x5c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d110      	bne.n	800c456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c434:	4b0c      	ldr	r3, [pc, #48]	@ (800c468 <vPortEnterCritical+0x60>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00b      	beq.n	800c456 <vPortEnterCritical+0x4e>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	603b      	str	r3, [r7, #0]
}
 800c450:	bf00      	nop
 800c452:	bf00      	nop
 800c454:	e7fd      	b.n	800c452 <vPortEnterCritical+0x4a>
	}
}
 800c456:	bf00      	nop
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	24000024 	.word	0x24000024
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c472:	4b12      	ldr	r3, [pc, #72]	@ (800c4bc <vPortExitCritical+0x50>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10b      	bne.n	800c492 <vPortExitCritical+0x26>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	607b      	str	r3, [r7, #4]
}
 800c48c:	bf00      	nop
 800c48e:	bf00      	nop
 800c490:	e7fd      	b.n	800c48e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c492:	4b0a      	ldr	r3, [pc, #40]	@ (800c4bc <vPortExitCritical+0x50>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3b01      	subs	r3, #1
 800c498:	4a08      	ldr	r2, [pc, #32]	@ (800c4bc <vPortExitCritical+0x50>)
 800c49a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c49c:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <vPortExitCritical+0x50>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d105      	bne.n	800c4b0 <vPortExitCritical+0x44>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f383 8811 	msr	BASEPRI, r3
}
 800c4ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	24000024 	.word	0x24000024

0800c4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4c0:	f3ef 8009 	mrs	r0, PSP
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4b15      	ldr	r3, [pc, #84]	@ (800c520 <pxCurrentTCBConst>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	f01e 0f10 	tst.w	lr, #16
 800c4d0:	bf08      	it	eq
 800c4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4da:	6010      	str	r0, [r2, #0]
 800c4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4e4:	f380 8811 	msr	BASEPRI, r0
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f7fe fe90 	bl	800b214 <vTaskSwitchContext>
 800c4f4:	f04f 0000 	mov.w	r0, #0
 800c4f8:	f380 8811 	msr	BASEPRI, r0
 800c4fc:	bc09      	pop	{r0, r3}
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	6808      	ldr	r0, [r1, #0]
 800c502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c506:	f01e 0f10 	tst.w	lr, #16
 800c50a:	bf08      	it	eq
 800c50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c510:	f380 8809 	msr	PSP, r0
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	f3af 8000 	nop.w

0800c520 <pxCurrentTCBConst>:
 800c520:	24005734 	.word	0x24005734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c524:	bf00      	nop
 800c526:	bf00      	nop

0800c528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
}
 800c540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c542:	f7fe fdad 	bl	800b0a0 <xTaskIncrementTick>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d003      	beq.n	800c554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c54c:	4b06      	ldr	r3, [pc, #24]	@ (800c568 <xPortSysTickHandler+0x40>)
 800c54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	2300      	movs	r3, #0
 800c556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	f383 8811 	msr	BASEPRI, r3
}
 800c55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c560:	bf00      	nop
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c570:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c576:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a4 <vPortSetupTimerInterrupt+0x38>)
 800c578:	2200      	movs	r2, #0
 800c57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a8 <vPortSetupTimerInterrupt+0x3c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0a      	ldr	r2, [pc, #40]	@ (800c5ac <vPortSetupTimerInterrupt+0x40>)
 800c582:	fba2 2303 	umull	r2, r3, r2, r3
 800c586:	099b      	lsrs	r3, r3, #6
 800c588:	4a09      	ldr	r2, [pc, #36]	@ (800c5b0 <vPortSetupTimerInterrupt+0x44>)
 800c58a:	3b01      	subs	r3, #1
 800c58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c58e:	4b04      	ldr	r3, [pc, #16]	@ (800c5a0 <vPortSetupTimerInterrupt+0x34>)
 800c590:	2207      	movs	r2, #7
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	bf00      	nop
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	e000e010 	.word	0xe000e010
 800c5a4:	e000e018 	.word	0xe000e018
 800c5a8:	24000000 	.word	0x24000000
 800c5ac:	10624dd3 	.word	0x10624dd3
 800c5b0:	e000e014 	.word	0xe000e014

0800c5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5c4 <vPortEnableVFP+0x10>
 800c5b8:	6801      	ldr	r1, [r0, #0]
 800c5ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5be:	6001      	str	r1, [r0, #0]
 800c5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5c2:	bf00      	nop
 800c5c4:	e000ed88 	.word	0xe000ed88

0800c5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5ce:	f3ef 8305 	mrs	r3, IPSR
 800c5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2b0f      	cmp	r3, #15
 800c5d8:	d915      	bls.n	800c606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5da:	4a18      	ldr	r2, [pc, #96]	@ (800c63c <vPortValidateInterruptPriority+0x74>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5e4:	4b16      	ldr	r3, [pc, #88]	@ (800c640 <vPortValidateInterruptPriority+0x78>)
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	7afa      	ldrb	r2, [r7, #11]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d20b      	bcs.n	800c606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	607b      	str	r3, [r7, #4]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c606:	4b0f      	ldr	r3, [pc, #60]	@ (800c644 <vPortValidateInterruptPriority+0x7c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c60e:	4b0e      	ldr	r3, [pc, #56]	@ (800c648 <vPortValidateInterruptPriority+0x80>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	429a      	cmp	r2, r3
 800c614:	d90b      	bls.n	800c62e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	603b      	str	r3, [r7, #0]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <vPortValidateInterruptPriority+0x62>
	}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	e000e3f0 	.word	0xe000e3f0
 800c640:	24005d60 	.word	0x24005d60
 800c644:	e000ed0c 	.word	0xe000ed0c
 800c648:	24005d64 	.word	0x24005d64

0800c64c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08a      	sub	sp, #40	@ 0x28
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c658:	f7fe fc54 	bl	800af04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c65c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7d0 <pvPortMalloc+0x184>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c664:	f000 f924 	bl	800c8b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c668:	4b5a      	ldr	r3, [pc, #360]	@ (800c7d4 <pvPortMalloc+0x188>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4013      	ands	r3, r2
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 8095 	bne.w	800c7a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d01e      	beq.n	800c6ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c67c:	2208      	movs	r2, #8
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4413      	add	r3, r2
 800c682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d015      	beq.n	800c6ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f023 0307 	bic.w	r3, r3, #7
 800c694:	3308      	adds	r3, #8
 800c696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <pvPortMalloc+0x6e>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	617b      	str	r3, [r7, #20]
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop
 800c6b8:	e7fd      	b.n	800c6b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d06f      	beq.n	800c7a0 <pvPortMalloc+0x154>
 800c6c0:	4b45      	ldr	r3, [pc, #276]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d86a      	bhi.n	800c7a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6ca:	4b44      	ldr	r3, [pc, #272]	@ (800c7dc <pvPortMalloc+0x190>)
 800c6cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6ce:	4b43      	ldr	r3, [pc, #268]	@ (800c7dc <pvPortMalloc+0x190>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6d4:	e004      	b.n	800c6e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d903      	bls.n	800c6f2 <pvPortMalloc+0xa6>
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1f1      	bne.n	800c6d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6f2:	4b37      	ldr	r3, [pc, #220]	@ (800c7d0 <pvPortMalloc+0x184>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d051      	beq.n	800c7a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2208      	movs	r2, #8
 800c702:	4413      	add	r3, r2
 800c704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	6a3b      	ldr	r3, [r7, #32]
 800c70c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c710:	685a      	ldr	r2, [r3, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	1ad2      	subs	r2, r2, r3
 800c716:	2308      	movs	r3, #8
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d920      	bls.n	800c760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4413      	add	r3, r2
 800c724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00b      	beq.n	800c748 <pvPortMalloc+0xfc>
	__asm volatile
 800c730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	613b      	str	r3, [r7, #16]
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	e7fd      	b.n	800c744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c75a:	69b8      	ldr	r0, [r7, #24]
 800c75c:	f000 f90a 	bl	800c974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c760:	4b1d      	ldr	r3, [pc, #116]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c76c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c76e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b1b      	ldr	r3, [pc, #108]	@ (800c7e0 <pvPortMalloc+0x194>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d203      	bcs.n	800c782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c77a:	4b17      	ldr	r3, [pc, #92]	@ (800c7d8 <pvPortMalloc+0x18c>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a18      	ldr	r2, [pc, #96]	@ (800c7e0 <pvPortMalloc+0x194>)
 800c780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	4b13      	ldr	r3, [pc, #76]	@ (800c7d4 <pvPortMalloc+0x188>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c796:	4b13      	ldr	r3, [pc, #76]	@ (800c7e4 <pvPortMalloc+0x198>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	4a11      	ldr	r2, [pc, #68]	@ (800c7e4 <pvPortMalloc+0x198>)
 800c79e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7a0:	f7fe fbbe 	bl	800af20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00b      	beq.n	800c7c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	60fb      	str	r3, [r7, #12]
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	e7fd      	b.n	800c7c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c7c6:	69fb      	ldr	r3, [r7, #28]
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3728      	adds	r7, #40	@ 0x28
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	2400c170 	.word	0x2400c170
 800c7d4:	2400c184 	.word	0x2400c184
 800c7d8:	2400c174 	.word	0x2400c174
 800c7dc:	2400c168 	.word	0x2400c168
 800c7e0:	2400c178 	.word	0x2400c178
 800c7e4:	2400c17c 	.word	0x2400c17c

0800c7e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d04f      	beq.n	800c89a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7fa:	2308      	movs	r3, #8
 800c7fc:	425b      	negs	r3, r3
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4413      	add	r3, r2
 800c802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	4b25      	ldr	r3, [pc, #148]	@ (800c8a4 <vPortFree+0xbc>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4013      	ands	r3, r2
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10b      	bne.n	800c82e <vPortFree+0x46>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60fb      	str	r3, [r7, #12]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d00b      	beq.n	800c84e <vPortFree+0x66>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	60bb      	str	r3, [r7, #8]
}
 800c848:	bf00      	nop
 800c84a:	bf00      	nop
 800c84c:	e7fd      	b.n	800c84a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	4b14      	ldr	r3, [pc, #80]	@ (800c8a4 <vPortFree+0xbc>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4013      	ands	r3, r2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d01e      	beq.n	800c89a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d11a      	bne.n	800c89a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	4b0e      	ldr	r3, [pc, #56]	@ (800c8a4 <vPortFree+0xbc>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	43db      	mvns	r3, r3
 800c86e:	401a      	ands	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c874:	f7fe fb46 	bl	800af04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	4b0a      	ldr	r3, [pc, #40]	@ (800c8a8 <vPortFree+0xc0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4413      	add	r3, r2
 800c882:	4a09      	ldr	r2, [pc, #36]	@ (800c8a8 <vPortFree+0xc0>)
 800c884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c886:	6938      	ldr	r0, [r7, #16]
 800c888:	f000 f874 	bl	800c974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c88c:	4b07      	ldr	r3, [pc, #28]	@ (800c8ac <vPortFree+0xc4>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	4a06      	ldr	r2, [pc, #24]	@ (800c8ac <vPortFree+0xc4>)
 800c894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c896:	f7fe fb43 	bl	800af20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c89a:	bf00      	nop
 800c89c:	3718      	adds	r7, #24
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	2400c184 	.word	0x2400c184
 800c8a8:	2400c174 	.word	0x2400c174
 800c8ac:	2400c180 	.word	0x2400c180

0800c8b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8b6:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800c8ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8bc:	4b27      	ldr	r3, [pc, #156]	@ (800c95c <prvHeapInit+0xac>)
 800c8be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00c      	beq.n	800c8e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3307      	adds	r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 0307 	bic.w	r3, r3, #7
 800c8d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8d8:	68ba      	ldr	r2, [r7, #8]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	4a1f      	ldr	r2, [pc, #124]	@ (800c95c <prvHeapInit+0xac>)
 800c8e0:	4413      	add	r3, r2
 800c8e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c960 <prvHeapInit+0xb0>)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c960 <prvHeapInit+0xb0>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8fc:	2208      	movs	r2, #8
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	1a9b      	subs	r3, r3, r2
 800c902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4a15      	ldr	r2, [pc, #84]	@ (800c964 <prvHeapInit+0xb4>)
 800c910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c912:	4b14      	ldr	r3, [pc, #80]	@ (800c964 <prvHeapInit+0xb4>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2200      	movs	r2, #0
 800c918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c91a:	4b12      	ldr	r3, [pc, #72]	@ (800c964 <prvHeapInit+0xb4>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	1ad2      	subs	r2, r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c930:	4b0c      	ldr	r3, [pc, #48]	@ (800c964 <prvHeapInit+0xb4>)
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	4a0a      	ldr	r2, [pc, #40]	@ (800c968 <prvHeapInit+0xb8>)
 800c93e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	4a09      	ldr	r2, [pc, #36]	@ (800c96c <prvHeapInit+0xbc>)
 800c946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c948:	4b09      	ldr	r3, [pc, #36]	@ (800c970 <prvHeapInit+0xc0>)
 800c94a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c94e:	601a      	str	r2, [r3, #0]
}
 800c950:	bf00      	nop
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	24005d68 	.word	0x24005d68
 800c960:	2400c168 	.word	0x2400c168
 800c964:	2400c170 	.word	0x2400c170
 800c968:	2400c178 	.word	0x2400c178
 800c96c:	2400c174 	.word	0x2400c174
 800c970:	2400c184 	.word	0x2400c184

0800c974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c97c:	4b28      	ldr	r3, [pc, #160]	@ (800ca20 <prvInsertBlockIntoFreeList+0xac>)
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	e002      	b.n	800c988 <prvInsertBlockIntoFreeList+0x14>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d8f7      	bhi.n	800c982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	4413      	add	r3, r2
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d108      	bne.n	800c9b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	441a      	add	r2, r3
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	441a      	add	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d118      	bne.n	800c9fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	4b15      	ldr	r3, [pc, #84]	@ (800ca24 <prvInsertBlockIntoFreeList+0xb0>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d00d      	beq.n	800c9f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	441a      	add	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	e008      	b.n	800ca04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800ca24 <prvInsertBlockIntoFreeList+0xb0>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	e003      	b.n	800ca04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d002      	beq.n	800ca12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca12:	bf00      	nop
 800ca14:	3714      	adds	r7, #20
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	2400c168 	.word	0x2400c168
 800ca24:	2400c170 	.word	0x2400c170

0800ca28 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ca32:	f002 f8bf 	bl	800ebb4 <sys_timeouts_sleeptime>
 800ca36:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3e:	d10b      	bne.n	800ca58 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ca40:	4813      	ldr	r0, [pc, #76]	@ (800ca90 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca42:	f004 fe32 	bl	80116aa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ca46:	2200      	movs	r2, #0
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f004 fdba 	bl	80115c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ca50:	480f      	ldr	r0, [pc, #60]	@ (800ca90 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca52:	f004 fe1b 	bl	801168c <sys_mutex_lock>
    return;
 800ca56:	e018      	b.n	800ca8a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d102      	bne.n	800ca64 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ca5e:	f002 f86f 	bl	800eb40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca62:	e7e6      	b.n	800ca32 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ca64:	480a      	ldr	r0, [pc, #40]	@ (800ca90 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca66:	f004 fe20 	bl	80116aa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f004 fda8 	bl	80115c4 <sys_arch_mbox_fetch>
 800ca74:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ca76:	4806      	ldr	r0, [pc, #24]	@ (800ca90 <tcpip_timeouts_mbox_fetch+0x68>)
 800ca78:	f004 fe08 	bl	801168c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca82:	d102      	bne.n	800ca8a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ca84:	f002 f85c 	bl	800eb40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ca88:	e7d3      	b.n	800ca32 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	2400c194 	.word	0x2400c194

0800ca94 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ca9c:	4810      	ldr	r0, [pc, #64]	@ (800cae0 <tcpip_thread+0x4c>)
 800ca9e:	f004 fdf5 	bl	801168c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800caa2:	4b10      	ldr	r3, [pc, #64]	@ (800cae4 <tcpip_thread+0x50>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d005      	beq.n	800cab6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800caaa:	4b0e      	ldr	r3, [pc, #56]	@ (800cae4 <tcpip_thread+0x50>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a0e      	ldr	r2, [pc, #56]	@ (800cae8 <tcpip_thread+0x54>)
 800cab0:	6812      	ldr	r2, [r2, #0]
 800cab2:	4610      	mov	r0, r2
 800cab4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cab6:	f107 030c 	add.w	r3, r7, #12
 800caba:	4619      	mov	r1, r3
 800cabc:	480b      	ldr	r0, [pc, #44]	@ (800caec <tcpip_thread+0x58>)
 800cabe:	f7ff ffb3 	bl	800ca28 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cac8:	4b09      	ldr	r3, [pc, #36]	@ (800caf0 <tcpip_thread+0x5c>)
 800caca:	2291      	movs	r2, #145	@ 0x91
 800cacc:	4909      	ldr	r1, [pc, #36]	@ (800caf4 <tcpip_thread+0x60>)
 800cace:	480a      	ldr	r0, [pc, #40]	@ (800caf8 <tcpip_thread+0x64>)
 800cad0:	f004 ff36 	bl	8011940 <iprintf>
      continue;
 800cad4:	e003      	b.n	800cade <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 f80f 	bl	800cafc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cade:	e7ea      	b.n	800cab6 <tcpip_thread+0x22>
 800cae0:	2400c194 	.word	0x2400c194
 800cae4:	2400c188 	.word	0x2400c188
 800cae8:	2400c18c 	.word	0x2400c18c
 800caec:	2400c190 	.word	0x2400c190
 800caf0:	080128a0 	.word	0x080128a0
 800caf4:	080128d0 	.word	0x080128d0
 800caf8:	080128f0 	.word	0x080128f0

0800cafc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d026      	beq.n	800cb5a <tcpip_thread_handle_msg+0x5e>
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	dc2b      	bgt.n	800cb68 <tcpip_thread_handle_msg+0x6c>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <tcpip_thread_handle_msg+0x1e>
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d015      	beq.n	800cb44 <tcpip_thread_handle_msg+0x48>
 800cb18:	e026      	b.n	800cb68 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	6850      	ldr	r0, [r2, #4]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	6892      	ldr	r2, [r2, #8]
 800cb26:	4611      	mov	r1, r2
 800cb28:	4798      	blx	r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d004      	beq.n	800cb3a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f001 fcf3 	bl	800e520 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	2006      	movs	r0, #6
 800cb3e:	f000 fecf 	bl	800d8e0 <memp_free>
      break;
 800cb42:	e018      	b.n	800cb76 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	6892      	ldr	r2, [r2, #8]
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	2005      	movs	r0, #5
 800cb54:	f000 fec4 	bl	800d8e0 <memp_free>
      break;
 800cb58:	e00d      	b.n	800cb76 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	6892      	ldr	r2, [r2, #8]
 800cb62:	4610      	mov	r0, r2
 800cb64:	4798      	blx	r3
      break;
 800cb66:	e006      	b.n	800cb76 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb68:	4b05      	ldr	r3, [pc, #20]	@ (800cb80 <tcpip_thread_handle_msg+0x84>)
 800cb6a:	22cf      	movs	r2, #207	@ 0xcf
 800cb6c:	4905      	ldr	r1, [pc, #20]	@ (800cb84 <tcpip_thread_handle_msg+0x88>)
 800cb6e:	4806      	ldr	r0, [pc, #24]	@ (800cb88 <tcpip_thread_handle_msg+0x8c>)
 800cb70:	f004 fee6 	bl	8011940 <iprintf>
      break;
 800cb74:	bf00      	nop
  }
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	080128a0 	.word	0x080128a0
 800cb84:	080128d0 	.word	0x080128d0
 800cb88:	080128f0 	.word	0x080128f0

0800cb8c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cb98:	481a      	ldr	r0, [pc, #104]	@ (800cc04 <tcpip_inpkt+0x78>)
 800cb9a:	f004 fd44 	bl	8011626 <sys_mbox_valid>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <tcpip_inpkt+0x24>
 800cba4:	4b18      	ldr	r3, [pc, #96]	@ (800cc08 <tcpip_inpkt+0x7c>)
 800cba6:	22fc      	movs	r2, #252	@ 0xfc
 800cba8:	4918      	ldr	r1, [pc, #96]	@ (800cc0c <tcpip_inpkt+0x80>)
 800cbaa:	4819      	ldr	r0, [pc, #100]	@ (800cc10 <tcpip_inpkt+0x84>)
 800cbac:	f004 fec8 	bl	8011940 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cbb0:	2006      	movs	r0, #6
 800cbb2:	f000 fe1f 	bl	800d7f4 <memp_malloc>
 800cbb6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d102      	bne.n	800cbc4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc2:	e01a      	b.n	800cbfa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cbdc:	6979      	ldr	r1, [r7, #20]
 800cbde:	4809      	ldr	r0, [pc, #36]	@ (800cc04 <tcpip_inpkt+0x78>)
 800cbe0:	f004 fcd6 	bl	8011590 <sys_mbox_trypost>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d006      	beq.n	800cbf8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cbea:	6979      	ldr	r1, [r7, #20]
 800cbec:	2006      	movs	r0, #6
 800cbee:	f000 fe77 	bl	800d8e0 <memp_free>
    return ERR_MEM;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf6:	e000      	b.n	800cbfa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cbf8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	2400c190 	.word	0x2400c190
 800cc08:	080128a0 	.word	0x080128a0
 800cc0c:	08012918 	.word	0x08012918
 800cc10:	080128f0 	.word	0x080128f0

0800cc14 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cc24:	f003 0318 	and.w	r3, r3, #24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d006      	beq.n	800cc3a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cc2c:	4a08      	ldr	r2, [pc, #32]	@ (800cc50 <tcpip_input+0x3c>)
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff ffab 	bl	800cb8c <tcpip_inpkt>
 800cc36:	4603      	mov	r3, r0
 800cc38:	e005      	b.n	800cc46 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cc3a:	4a06      	ldr	r2, [pc, #24]	@ (800cc54 <tcpip_input+0x40>)
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff ffa4 	bl	800cb8c <tcpip_inpkt>
 800cc44:	4603      	mov	r3, r0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	080113b1 	.word	0x080113b1
 800cc54:	080102cd 	.word	0x080102cd

0800cc58 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cc62:	f000 f914 	bl	800ce8e <lwip_init>

  tcpip_init_done = initfunc;
 800cc66:	4a17      	ldr	r2, [pc, #92]	@ (800ccc4 <tcpip_init+0x6c>)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cc6c:	4a16      	ldr	r2, [pc, #88]	@ (800ccc8 <tcpip_init+0x70>)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cc72:	2106      	movs	r1, #6
 800cc74:	4815      	ldr	r0, [pc, #84]	@ (800cccc <tcpip_init+0x74>)
 800cc76:	f004 fc71 	bl	801155c <sys_mbox_new>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d006      	beq.n	800cc8e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cc80:	4b13      	ldr	r3, [pc, #76]	@ (800ccd0 <tcpip_init+0x78>)
 800cc82:	f240 2261 	movw	r2, #609	@ 0x261
 800cc86:	4913      	ldr	r1, [pc, #76]	@ (800ccd4 <tcpip_init+0x7c>)
 800cc88:	4813      	ldr	r0, [pc, #76]	@ (800ccd8 <tcpip_init+0x80>)
 800cc8a:	f004 fe59 	bl	8011940 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cc8e:	4813      	ldr	r0, [pc, #76]	@ (800ccdc <tcpip_init+0x84>)
 800cc90:	f004 fce6 	bl	8011660 <sys_mutex_new>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d006      	beq.n	800cca8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd0 <tcpip_init+0x78>)
 800cc9c:	f240 2265 	movw	r2, #613	@ 0x265
 800cca0:	490f      	ldr	r1, [pc, #60]	@ (800cce0 <tcpip_init+0x88>)
 800cca2:	480d      	ldr	r0, [pc, #52]	@ (800ccd8 <tcpip_init+0x80>)
 800cca4:	f004 fe4c 	bl	8011940 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cca8:	2318      	movs	r3, #24
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	490c      	ldr	r1, [pc, #48]	@ (800cce4 <tcpip_init+0x8c>)
 800ccb4:	480c      	ldr	r0, [pc, #48]	@ (800cce8 <tcpip_init+0x90>)
 800ccb6:	f004 fd05 	bl	80116c4 <sys_thread_new>
}
 800ccba:	bf00      	nop
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	2400c188 	.word	0x2400c188
 800ccc8:	2400c18c 	.word	0x2400c18c
 800cccc:	2400c190 	.word	0x2400c190
 800ccd0:	080128a0 	.word	0x080128a0
 800ccd4:	08012928 	.word	0x08012928
 800ccd8:	080128f0 	.word	0x080128f0
 800ccdc:	2400c194 	.word	0x2400c194
 800cce0:	0801294c 	.word	0x0801294c
 800cce4:	0800ca95 	.word	0x0800ca95
 800cce8:	08012970 	.word	0x08012970

0800ccec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	021b      	lsls	r3, r3, #8
 800ccfa:	b21a      	sxth	r2, r3
 800ccfc:	88fb      	ldrh	r3, [r7, #6]
 800ccfe:	0a1b      	lsrs	r3, r3, #8
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	b21b      	sxth	r3, r3
 800cd04:	4313      	orrs	r3, r2
 800cd06:	b21b      	sxth	r3, r3
 800cd08:	b29b      	uxth	r3, r3
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b089      	sub	sp, #36	@ 0x24
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00d      	beq.n	800cd56 <lwip_standard_chksum+0x40>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	dd0a      	ble.n	800cd56 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800cd40:	69fa      	ldr	r2, [r7, #28]
 800cd42:	1c53      	adds	r3, r2, #1
 800cd44:	61fb      	str	r3, [r7, #28]
 800cd46:	f107 030e 	add.w	r3, r7, #14
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	7812      	ldrb	r2, [r2, #0]
 800cd4e:	701a      	strb	r2, [r3, #0]
    len--;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800cd5a:	e00a      	b.n	800cd72 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	1c9a      	adds	r2, r3, #2
 800cd60:	61ba      	str	r2, [r7, #24]
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	461a      	mov	r2, r3
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	4413      	add	r3, r2
 800cd6a:	617b      	str	r3, [r7, #20]
    len -= 2;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	3b02      	subs	r3, #2
 800cd70:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	dcf1      	bgt.n	800cd5c <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd04      	ble.n	800cd88 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800cd7e:	f107 030e 	add.w	r3, r7, #14
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	7812      	ldrb	r2, [r2, #0]
 800cd86:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800cd88:	89fb      	ldrh	r3, [r7, #14]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	4413      	add	r3, r2
 800cd90:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	0c1a      	lsrs	r2, r3, #16
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	4413      	add	r3, r2
 800cd9c:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	0c1a      	lsrs	r2, r3, #16
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	4413      	add	r3, r2
 800cda8:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d007      	beq.n	800cdc0 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	021b      	lsls	r3, r3, #8
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	0a1b      	lsrs	r3, r3, #8
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	b29b      	uxth	r3, r3
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3724      	adds	r7, #36	@ 0x24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800cddc:	887b      	ldrh	r3, [r7, #2]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7ff ff98 	bl	800cd16 <lwip_standard_chksum>
 800cde6:	4603      	mov	r3, r0
 800cde8:	43db      	mvns	r3, r3
 800cdea:	b29b      	uxth	r3, r3
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	e02b      	b.n	800ce62 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	895b      	ldrh	r3, [r3, #10]
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f7ff ff7e 	bl	800cd16 <lwip_standard_chksum>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	4413      	add	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	0c1a      	lsrs	r2, r3, #16
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	4413      	add	r3, r2
 800ce2e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	895b      	ldrh	r3, [r3, #10]
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00e      	beq.n	800ce5c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	bf0c      	ite	eq
 800ce44:	2301      	moveq	r3, #1
 800ce46:	2300      	movne	r3, #0
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	0a1b      	lsrs	r3, r3, #8
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	613b      	str	r3, [r7, #16]
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1d0      	bne.n	800ce0a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d007      	beq.n	800ce7e <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	021b      	lsls	r3, r3, #8
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	0a1b      	lsrs	r3, r3, #8
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	43db      	mvns	r3, r3
 800ce84:	b29b      	uxth	r3, r3
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b082      	sub	sp, #8
 800ce92:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ce98:	f004 fbd6 	bl	8011648 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ce9c:	f000 f8d6 	bl	800d04c <mem_init>
  memp_init();
 800cea0:	f000 fc3a 	bl	800d718 <memp_init>
  pbuf_init();
  netif_init();
 800cea4:	f000 fd46 	bl	800d934 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cea8:	f001 febc 	bl	800ec24 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ceac:	f001 fe00 	bl	800eab0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cec2:	4b05      	ldr	r3, [pc, #20]	@ (800ced8 <ptr_to_mem+0x20>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	88fb      	ldrh	r3, [r7, #6]
 800cec8:	4413      	add	r3, r2
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	2400c1b0 	.word	0x2400c1b0

0800cedc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cee4:	4b05      	ldr	r3, [pc, #20]	@ (800cefc <mem_to_ptr+0x20>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	b29b      	uxth	r3, r3
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	2400c1b0 	.word	0x2400c1b0

0800cf00 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cf00:	b590      	push	{r4, r7, lr}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cf08:	4b47      	ldr	r3, [pc, #284]	@ (800d028 <plug_holes+0x128>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d206      	bcs.n	800cf20 <plug_holes+0x20>
 800cf12:	4b46      	ldr	r3, [pc, #280]	@ (800d02c <plug_holes+0x12c>)
 800cf14:	f240 12df 	movw	r2, #479	@ 0x1df
 800cf18:	4945      	ldr	r1, [pc, #276]	@ (800d030 <plug_holes+0x130>)
 800cf1a:	4846      	ldr	r0, [pc, #280]	@ (800d034 <plug_holes+0x134>)
 800cf1c:	f004 fd10 	bl	8011940 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cf20:	4b45      	ldr	r3, [pc, #276]	@ (800d038 <plug_holes+0x138>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d306      	bcc.n	800cf38 <plug_holes+0x38>
 800cf2a:	4b40      	ldr	r3, [pc, #256]	@ (800d02c <plug_holes+0x12c>)
 800cf2c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800cf30:	4942      	ldr	r1, [pc, #264]	@ (800d03c <plug_holes+0x13c>)
 800cf32:	4840      	ldr	r0, [pc, #256]	@ (800d034 <plug_holes+0x134>)
 800cf34:	f004 fd04 	bl	8011940 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	791b      	ldrb	r3, [r3, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d006      	beq.n	800cf4e <plug_holes+0x4e>
 800cf40:	4b3a      	ldr	r3, [pc, #232]	@ (800d02c <plug_holes+0x12c>)
 800cf42:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cf46:	493e      	ldr	r1, [pc, #248]	@ (800d040 <plug_holes+0x140>)
 800cf48:	483a      	ldr	r0, [pc, #232]	@ (800d034 <plug_holes+0x134>)
 800cf4a:	f004 fcf9 	bl	8011940 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d906      	bls.n	800cf68 <plug_holes+0x68>
 800cf5a:	4b34      	ldr	r3, [pc, #208]	@ (800d02c <plug_holes+0x12c>)
 800cf5c:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800cf60:	4938      	ldr	r1, [pc, #224]	@ (800d044 <plug_holes+0x144>)
 800cf62:	4834      	ldr	r0, [pc, #208]	@ (800d034 <plug_holes+0x134>)
 800cf64:	f004 fcec 	bl	8011940 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	881b      	ldrh	r3, [r3, #0]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff ffa3 	bl	800ceb8 <ptr_to_mem>
 800cf72:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d025      	beq.n	800cfc8 <plug_holes+0xc8>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	791b      	ldrb	r3, [r3, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d121      	bne.n	800cfc8 <plug_holes+0xc8>
 800cf84:	4b2c      	ldr	r3, [pc, #176]	@ (800d038 <plug_holes+0x138>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d01c      	beq.n	800cfc8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cf8e:	4b2e      	ldr	r3, [pc, #184]	@ (800d048 <plug_holes+0x148>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d102      	bne.n	800cf9e <plug_holes+0x9e>
      lfree = mem;
 800cf98:	4a2b      	ldr	r2, [pc, #172]	@ (800d048 <plug_holes+0x148>)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	881a      	ldrh	r2, [r3, #0]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d00a      	beq.n	800cfc8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff ff7e 	bl	800ceb8 <ptr_to_mem>
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7ff ff8c 	bl	800cedc <mem_to_ptr>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	885b      	ldrh	r3, [r3, #2]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff ff73 	bl	800ceb8 <ptr_to_mem>
 800cfd2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d020      	beq.n	800d01e <plug_holes+0x11e>
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	791b      	ldrb	r3, [r3, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d11c      	bne.n	800d01e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cfe4:	4b18      	ldr	r3, [pc, #96]	@ (800d048 <plug_holes+0x148>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d102      	bne.n	800cff4 <plug_holes+0xf4>
      lfree = pmem;
 800cfee:	4a16      	ldr	r2, [pc, #88]	@ (800d048 <plug_holes+0x148>)
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	881a      	ldrh	r2, [r3, #0]
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d004:	4293      	cmp	r3, r2
 800d006:	d00a      	beq.n	800d01e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7ff ff53 	bl	800ceb8 <ptr_to_mem>
 800d012:	4604      	mov	r4, r0
 800d014:	68b8      	ldr	r0, [r7, #8]
 800d016:	f7ff ff61 	bl	800cedc <mem_to_ptr>
 800d01a:	4603      	mov	r3, r0
 800d01c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d01e:	bf00      	nop
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	bd90      	pop	{r4, r7, pc}
 800d026:	bf00      	nop
 800d028:	2400c1b0 	.word	0x2400c1b0
 800d02c:	08012980 	.word	0x08012980
 800d030:	080129b0 	.word	0x080129b0
 800d034:	080129c8 	.word	0x080129c8
 800d038:	2400c1b4 	.word	0x2400c1b4
 800d03c:	080129f0 	.word	0x080129f0
 800d040:	08012a0c 	.word	0x08012a0c
 800d044:	08012a28 	.word	0x08012a28
 800d048:	2400c1bc 	.word	0x2400c1bc

0800d04c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d052:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c8 <mem_init+0x7c>)
 800d054:	4a1d      	ldr	r2, [pc, #116]	@ (800d0cc <mem_init+0x80>)
 800d056:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d058:	4b1b      	ldr	r3, [pc, #108]	@ (800d0c8 <mem_init+0x7c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d064:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d072:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 800d076:	f7ff ff1f 	bl	800ceb8 <ptr_to_mem>
 800d07a:	4603      	mov	r3, r0
 800d07c:	4a14      	ldr	r2, [pc, #80]	@ (800d0d0 <mem_init+0x84>)
 800d07e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d080:	4b13      	ldr	r3, [pc, #76]	@ (800d0d0 <mem_init+0x84>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2201      	movs	r2, #1
 800d086:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d088:	4b11      	ldr	r3, [pc, #68]	@ (800d0d0 <mem_init+0x84>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d090:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d092:	4b0f      	ldr	r3, [pc, #60]	@ (800d0d0 <mem_init+0x84>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d09a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d09c:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c8 <mem_init+0x7c>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a0c      	ldr	r2, [pc, #48]	@ (800d0d4 <mem_init+0x88>)
 800d0a2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d0a4:	480c      	ldr	r0, [pc, #48]	@ (800d0d8 <mem_init+0x8c>)
 800d0a6:	f004 fadb 	bl	8011660 <sys_mutex_new>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0dc <mem_init+0x90>)
 800d0b2:	f240 221f 	movw	r2, #543	@ 0x21f
 800d0b6:	490a      	ldr	r1, [pc, #40]	@ (800d0e0 <mem_init+0x94>)
 800d0b8:	480a      	ldr	r0, [pc, #40]	@ (800d0e4 <mem_init+0x98>)
 800d0ba:	f004 fc41 	bl	8011940 <iprintf>
  }
}
 800d0be:	bf00      	nop
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	2400c1b0 	.word	0x2400c1b0
 800d0cc:	30000200 	.word	0x30000200
 800d0d0:	2400c1b4 	.word	0x2400c1b4
 800d0d4:	2400c1bc 	.word	0x2400c1bc
 800d0d8:	2400c1b8 	.word	0x2400c1b8
 800d0dc:	08012980 	.word	0x08012980
 800d0e0:	08012a54 	.word	0x08012a54
 800d0e4:	080129c8 	.word	0x080129c8

0800d0e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff fef3 	bl	800cedc <mem_to_ptr>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	881b      	ldrh	r3, [r3, #0]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff feda 	bl	800ceb8 <ptr_to_mem>
 800d104:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	885b      	ldrh	r3, [r3, #2]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7ff fed4 	bl	800ceb8 <ptr_to_mem>
 800d110:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	881b      	ldrh	r3, [r3, #0]
 800d116:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d819      	bhi.n	800d152 <mem_link_valid+0x6a>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	885b      	ldrh	r3, [r3, #2]
 800d122:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d126:	4293      	cmp	r3, r2
 800d128:	d813      	bhi.n	800d152 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d12e:	8afa      	ldrh	r2, [r7, #22]
 800d130:	429a      	cmp	r2, r3
 800d132:	d004      	beq.n	800d13e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	8afa      	ldrh	r2, [r7, #22]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d109      	bne.n	800d152 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d13e:	4b08      	ldr	r3, [pc, #32]	@ (800d160 <mem_link_valid+0x78>)
 800d140:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	429a      	cmp	r2, r3
 800d146:	d006      	beq.n	800d156 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	885b      	ldrh	r3, [r3, #2]
 800d14c:	8afa      	ldrh	r2, [r7, #22]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d001      	beq.n	800d156 <mem_link_valid+0x6e>
    return 0;
 800d152:	2300      	movs	r3, #0
 800d154:	e000      	b.n	800d158 <mem_link_valid+0x70>
  }
  return 1;
 800d156:	2301      	movs	r3, #1
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	2400c1b4 	.word	0x2400c1b4

0800d164 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d070      	beq.n	800d254 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f003 0303 	and.w	r3, r3, #3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00d      	beq.n	800d198 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d17c:	4b37      	ldr	r3, [pc, #220]	@ (800d25c <mem_free+0xf8>)
 800d17e:	f240 2273 	movw	r2, #627	@ 0x273
 800d182:	4937      	ldr	r1, [pc, #220]	@ (800d260 <mem_free+0xfc>)
 800d184:	4837      	ldr	r0, [pc, #220]	@ (800d264 <mem_free+0x100>)
 800d186:	f004 fbdb 	bl	8011940 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d18a:	f004 fabb 	bl	8011704 <sys_arch_protect>
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f004 fac5 	bl	8011720 <sys_arch_unprotect>
    return;
 800d196:	e05e      	b.n	800d256 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	3b08      	subs	r3, #8
 800d19c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d19e:	4b32      	ldr	r3, [pc, #200]	@ (800d268 <mem_free+0x104>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	69fa      	ldr	r2, [r7, #28]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d306      	bcc.n	800d1b6 <mem_free+0x52>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f103 020c 	add.w	r2, r3, #12
 800d1ae:	4b2f      	ldr	r3, [pc, #188]	@ (800d26c <mem_free+0x108>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d90d      	bls.n	800d1d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d1b6:	4b29      	ldr	r3, [pc, #164]	@ (800d25c <mem_free+0xf8>)
 800d1b8:	f240 227f 	movw	r2, #639	@ 0x27f
 800d1bc:	492c      	ldr	r1, [pc, #176]	@ (800d270 <mem_free+0x10c>)
 800d1be:	4829      	ldr	r0, [pc, #164]	@ (800d264 <mem_free+0x100>)
 800d1c0:	f004 fbbe 	bl	8011940 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1c4:	f004 fa9e 	bl	8011704 <sys_arch_protect>
 800d1c8:	6138      	str	r0, [r7, #16]
 800d1ca:	6938      	ldr	r0, [r7, #16]
 800d1cc:	f004 faa8 	bl	8011720 <sys_arch_unprotect>
    return;
 800d1d0:	e041      	b.n	800d256 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d1d2:	4828      	ldr	r0, [pc, #160]	@ (800d274 <mem_free+0x110>)
 800d1d4:	f004 fa5a 	bl	801168c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	791b      	ldrb	r3, [r3, #4]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d110      	bne.n	800d202 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d1e0:	4b1e      	ldr	r3, [pc, #120]	@ (800d25c <mem_free+0xf8>)
 800d1e2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800d1e6:	4924      	ldr	r1, [pc, #144]	@ (800d278 <mem_free+0x114>)
 800d1e8:	481e      	ldr	r0, [pc, #120]	@ (800d264 <mem_free+0x100>)
 800d1ea:	f004 fba9 	bl	8011940 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d1ee:	4821      	ldr	r0, [pc, #132]	@ (800d274 <mem_free+0x110>)
 800d1f0:	f004 fa5b 	bl	80116aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1f4:	f004 fa86 	bl	8011704 <sys_arch_protect>
 800d1f8:	6178      	str	r0, [r7, #20]
 800d1fa:	6978      	ldr	r0, [r7, #20]
 800d1fc:	f004 fa90 	bl	8011720 <sys_arch_unprotect>
    return;
 800d200:	e029      	b.n	800d256 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d202:	69f8      	ldr	r0, [r7, #28]
 800d204:	f7ff ff70 	bl	800d0e8 <mem_link_valid>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d110      	bne.n	800d230 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d20e:	4b13      	ldr	r3, [pc, #76]	@ (800d25c <mem_free+0xf8>)
 800d210:	f240 2295 	movw	r2, #661	@ 0x295
 800d214:	4919      	ldr	r1, [pc, #100]	@ (800d27c <mem_free+0x118>)
 800d216:	4813      	ldr	r0, [pc, #76]	@ (800d264 <mem_free+0x100>)
 800d218:	f004 fb92 	bl	8011940 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d21c:	4815      	ldr	r0, [pc, #84]	@ (800d274 <mem_free+0x110>)
 800d21e:	f004 fa44 	bl	80116aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d222:	f004 fa6f 	bl	8011704 <sys_arch_protect>
 800d226:	61b8      	str	r0, [r7, #24]
 800d228:	69b8      	ldr	r0, [r7, #24]
 800d22a:	f004 fa79 	bl	8011720 <sys_arch_unprotect>
    return;
 800d22e:	e012      	b.n	800d256 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	2200      	movs	r2, #0
 800d234:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d236:	4b12      	ldr	r3, [pc, #72]	@ (800d280 <mem_free+0x11c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	69fa      	ldr	r2, [r7, #28]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d202      	bcs.n	800d246 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d240:	4a0f      	ldr	r2, [pc, #60]	@ (800d280 <mem_free+0x11c>)
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d246:	69f8      	ldr	r0, [r7, #28]
 800d248:	f7ff fe5a 	bl	800cf00 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d24c:	4809      	ldr	r0, [pc, #36]	@ (800d274 <mem_free+0x110>)
 800d24e:	f004 fa2c 	bl	80116aa <sys_mutex_unlock>
 800d252:	e000      	b.n	800d256 <mem_free+0xf2>
    return;
 800d254:	bf00      	nop
}
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	08012980 	.word	0x08012980
 800d260:	08012a70 	.word	0x08012a70
 800d264:	080129c8 	.word	0x080129c8
 800d268:	2400c1b0 	.word	0x2400c1b0
 800d26c:	2400c1b4 	.word	0x2400c1b4
 800d270:	08012a94 	.word	0x08012a94
 800d274:	2400c1b8 	.word	0x2400c1b8
 800d278:	08012ab0 	.word	0x08012ab0
 800d27c:	08012ad8 	.word	0x08012ad8
 800d280:	2400c1bc 	.word	0x2400c1bc

0800d284 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d290:	887b      	ldrh	r3, [r7, #2]
 800d292:	3303      	adds	r3, #3
 800d294:	b29b      	uxth	r3, r3
 800d296:	f023 0303 	bic.w	r3, r3, #3
 800d29a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d29c:	8bfb      	ldrh	r3, [r7, #30]
 800d29e:	2b0b      	cmp	r3, #11
 800d2a0:	d801      	bhi.n	800d2a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d2a6:	8bfb      	ldrh	r3, [r7, #30]
 800d2a8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d803      	bhi.n	800d2b8 <mem_trim+0x34>
 800d2b0:	8bfa      	ldrh	r2, [r7, #30]
 800d2b2:	887b      	ldrh	r3, [r7, #2]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d201      	bcs.n	800d2bc <mem_trim+0x38>
    return NULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e0dc      	b.n	800d476 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d2bc:	4b70      	ldr	r3, [pc, #448]	@ (800d480 <mem_trim+0x1fc>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d304      	bcc.n	800d2d0 <mem_trim+0x4c>
 800d2c6:	4b6f      	ldr	r3, [pc, #444]	@ (800d484 <mem_trim+0x200>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d306      	bcc.n	800d2de <mem_trim+0x5a>
 800d2d0:	4b6d      	ldr	r3, [pc, #436]	@ (800d488 <mem_trim+0x204>)
 800d2d2:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d2d6:	496d      	ldr	r1, [pc, #436]	@ (800d48c <mem_trim+0x208>)
 800d2d8:	486d      	ldr	r0, [pc, #436]	@ (800d490 <mem_trim+0x20c>)
 800d2da:	f004 fb31 	bl	8011940 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d2de:	4b68      	ldr	r3, [pc, #416]	@ (800d480 <mem_trim+0x1fc>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d304      	bcc.n	800d2f2 <mem_trim+0x6e>
 800d2e8:	4b66      	ldr	r3, [pc, #408]	@ (800d484 <mem_trim+0x200>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d307      	bcc.n	800d302 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2f2:	f004 fa07 	bl	8011704 <sys_arch_protect>
 800d2f6:	60b8      	str	r0, [r7, #8]
 800d2f8:	68b8      	ldr	r0, [r7, #8]
 800d2fa:	f004 fa11 	bl	8011720 <sys_arch_unprotect>
    return rmem;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	e0b9      	b.n	800d476 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	3b08      	subs	r3, #8
 800d306:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d308:	69b8      	ldr	r0, [r7, #24]
 800d30a:	f7ff fde7 	bl	800cedc <mem_to_ptr>
 800d30e:	4603      	mov	r3, r0
 800d310:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	881a      	ldrh	r2, [r3, #0]
 800d316:	8afb      	ldrh	r3, [r7, #22]
 800d318:	1ad3      	subs	r3, r2, r3
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	3b08      	subs	r3, #8
 800d31e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d320:	8bfa      	ldrh	r2, [r7, #30]
 800d322:	8abb      	ldrh	r3, [r7, #20]
 800d324:	429a      	cmp	r2, r3
 800d326:	d906      	bls.n	800d336 <mem_trim+0xb2>
 800d328:	4b57      	ldr	r3, [pc, #348]	@ (800d488 <mem_trim+0x204>)
 800d32a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d32e:	4959      	ldr	r1, [pc, #356]	@ (800d494 <mem_trim+0x210>)
 800d330:	4857      	ldr	r0, [pc, #348]	@ (800d490 <mem_trim+0x20c>)
 800d332:	f004 fb05 	bl	8011940 <iprintf>
  if (newsize > size) {
 800d336:	8bfa      	ldrh	r2, [r7, #30]
 800d338:	8abb      	ldrh	r3, [r7, #20]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d901      	bls.n	800d342 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800d33e:	2300      	movs	r3, #0
 800d340:	e099      	b.n	800d476 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800d342:	8bfa      	ldrh	r2, [r7, #30]
 800d344:	8abb      	ldrh	r3, [r7, #20]
 800d346:	429a      	cmp	r2, r3
 800d348:	d101      	bne.n	800d34e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	e093      	b.n	800d476 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d34e:	4852      	ldr	r0, [pc, #328]	@ (800d498 <mem_trim+0x214>)
 800d350:	f004 f99c 	bl	801168c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	881b      	ldrh	r3, [r3, #0]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fdad 	bl	800ceb8 <ptr_to_mem>
 800d35e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	791b      	ldrb	r3, [r3, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d141      	bne.n	800d3ec <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d370:	4293      	cmp	r3, r2
 800d372:	d106      	bne.n	800d382 <mem_trim+0xfe>
 800d374:	4b44      	ldr	r3, [pc, #272]	@ (800d488 <mem_trim+0x204>)
 800d376:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d37a:	4948      	ldr	r1, [pc, #288]	@ (800d49c <mem_trim+0x218>)
 800d37c:	4844      	ldr	r0, [pc, #272]	@ (800d490 <mem_trim+0x20c>)
 800d37e:	f004 fadf 	bl	8011940 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d388:	8afa      	ldrh	r2, [r7, #22]
 800d38a:	8bfb      	ldrh	r3, [r7, #30]
 800d38c:	4413      	add	r3, r2
 800d38e:	b29b      	uxth	r3, r3
 800d390:	3308      	adds	r3, #8
 800d392:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d394:	4b42      	ldr	r3, [pc, #264]	@ (800d4a0 <mem_trim+0x21c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	693a      	ldr	r2, [r7, #16]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d106      	bne.n	800d3ac <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800d39e:	89fb      	ldrh	r3, [r7, #14]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff fd89 	bl	800ceb8 <ptr_to_mem>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	4a3d      	ldr	r2, [pc, #244]	@ (800d4a0 <mem_trim+0x21c>)
 800d3aa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d3ac:	89fb      	ldrh	r3, [r7, #14]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7ff fd82 	bl	800ceb8 <ptr_to_mem>
 800d3b4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	89ba      	ldrh	r2, [r7, #12]
 800d3c0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	8afa      	ldrh	r2, [r7, #22]
 800d3c6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	89fa      	ldrh	r2, [r7, #14]
 800d3cc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d049      	beq.n	800d46e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7ff fd6a 	bl	800ceb8 <ptr_to_mem>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	89fb      	ldrh	r3, [r7, #14]
 800d3e8:	8053      	strh	r3, [r2, #2]
 800d3ea:	e040      	b.n	800d46e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d3ec:	8bfb      	ldrh	r3, [r7, #30]
 800d3ee:	f103 0214 	add.w	r2, r3, #20
 800d3f2:	8abb      	ldrh	r3, [r7, #20]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d83a      	bhi.n	800d46e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d3f8:	8afa      	ldrh	r2, [r7, #22]
 800d3fa:	8bfb      	ldrh	r3, [r7, #30]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	3308      	adds	r3, #8
 800d402:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d106      	bne.n	800d41e <mem_trim+0x19a>
 800d410:	4b1d      	ldr	r3, [pc, #116]	@ (800d488 <mem_trim+0x204>)
 800d412:	f240 3216 	movw	r2, #790	@ 0x316
 800d416:	4921      	ldr	r1, [pc, #132]	@ (800d49c <mem_trim+0x218>)
 800d418:	481d      	ldr	r0, [pc, #116]	@ (800d490 <mem_trim+0x20c>)
 800d41a:	f004 fa91 	bl	8011940 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d41e:	89fb      	ldrh	r3, [r7, #14]
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fd49 	bl	800ceb8 <ptr_to_mem>
 800d426:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d428:	4b1d      	ldr	r3, [pc, #116]	@ (800d4a0 <mem_trim+0x21c>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d202      	bcs.n	800d438 <mem_trim+0x1b4>
      lfree = mem2;
 800d432:	4a1b      	ldr	r2, [pc, #108]	@ (800d4a0 <mem_trim+0x21c>)
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	2200      	movs	r2, #0
 800d43c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	881a      	ldrh	r2, [r3, #0]
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	8afa      	ldrh	r2, [r7, #22]
 800d44a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	89fa      	ldrh	r2, [r7, #14]
 800d450:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d007      	beq.n	800d46e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	4618      	mov	r0, r3
 800d464:	f7ff fd28 	bl	800ceb8 <ptr_to_mem>
 800d468:	4602      	mov	r2, r0
 800d46a:	89fb      	ldrh	r3, [r7, #14]
 800d46c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d46e:	480a      	ldr	r0, [pc, #40]	@ (800d498 <mem_trim+0x214>)
 800d470:	f004 f91b 	bl	80116aa <sys_mutex_unlock>
  return rmem;
 800d474:	687b      	ldr	r3, [r7, #4]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3720      	adds	r7, #32
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	2400c1b0 	.word	0x2400c1b0
 800d484:	2400c1b4 	.word	0x2400c1b4
 800d488:	08012980 	.word	0x08012980
 800d48c:	08012b0c 	.word	0x08012b0c
 800d490:	080129c8 	.word	0x080129c8
 800d494:	08012b24 	.word	0x08012b24
 800d498:	2400c1b8 	.word	0x2400c1b8
 800d49c:	08012b44 	.word	0x08012b44
 800d4a0:	2400c1bc 	.word	0x2400c1bc

0800d4a4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d4ae:	88fb      	ldrh	r3, [r7, #6]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <mem_malloc+0x14>
    return NULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	e0e6      	b.n	800d686 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d4b8:	88fb      	ldrh	r3, [r7, #6]
 800d4ba:	3303      	adds	r3, #3
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f023 0303 	bic.w	r3, r3, #3
 800d4c2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d4c4:	8bbb      	ldrh	r3, [r7, #28]
 800d4c6:	2b0b      	cmp	r3, #11
 800d4c8:	d801      	bhi.n	800d4ce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d4ca:	230c      	movs	r3, #12
 800d4cc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d4ce:	8bbb      	ldrh	r3, [r7, #28]
 800d4d0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d803      	bhi.n	800d4e0 <mem_malloc+0x3c>
 800d4d8:	8bba      	ldrh	r2, [r7, #28]
 800d4da:	88fb      	ldrh	r3, [r7, #6]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d201      	bcs.n	800d4e4 <mem_malloc+0x40>
    return NULL;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	e0d0      	b.n	800d686 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d4e4:	486a      	ldr	r0, [pc, #424]	@ (800d690 <mem_malloc+0x1ec>)
 800d4e6:	f004 f8d1 	bl	801168c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4ea:	4b6a      	ldr	r3, [pc, #424]	@ (800d694 <mem_malloc+0x1f0>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff fcf4 	bl	800cedc <mem_to_ptr>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	83fb      	strh	r3, [r7, #30]
 800d4f8:	e0b9      	b.n	800d66e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d4fa:	8bfb      	ldrh	r3, [r7, #30]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7ff fcdb 	bl	800ceb8 <ptr_to_mem>
 800d502:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	791b      	ldrb	r3, [r3, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f040 80a9 	bne.w	800d660 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	461a      	mov	r2, r3
 800d514:	8bfb      	ldrh	r3, [r7, #30]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	f1a3 0208 	sub.w	r2, r3, #8
 800d51c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d51e:	429a      	cmp	r2, r3
 800d520:	f0c0 809e 	bcc.w	800d660 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	461a      	mov	r2, r3
 800d52a:	8bfb      	ldrh	r3, [r7, #30]
 800d52c:	1ad3      	subs	r3, r2, r3
 800d52e:	f1a3 0208 	sub.w	r2, r3, #8
 800d532:	8bbb      	ldrh	r3, [r7, #28]
 800d534:	3314      	adds	r3, #20
 800d536:	429a      	cmp	r2, r3
 800d538:	d335      	bcc.n	800d5a6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d53a:	8bfa      	ldrh	r2, [r7, #30]
 800d53c:	8bbb      	ldrh	r3, [r7, #28]
 800d53e:	4413      	add	r3, r2
 800d540:	b29b      	uxth	r3, r3
 800d542:	3308      	adds	r3, #8
 800d544:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d546:	8a7b      	ldrh	r3, [r7, #18]
 800d548:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d106      	bne.n	800d55e <mem_malloc+0xba>
 800d550:	4b51      	ldr	r3, [pc, #324]	@ (800d698 <mem_malloc+0x1f4>)
 800d552:	f240 3287 	movw	r2, #903	@ 0x387
 800d556:	4951      	ldr	r1, [pc, #324]	@ (800d69c <mem_malloc+0x1f8>)
 800d558:	4851      	ldr	r0, [pc, #324]	@ (800d6a0 <mem_malloc+0x1fc>)
 800d55a:	f004 f9f1 	bl	8011940 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d55e:	8a7b      	ldrh	r3, [r7, #18]
 800d560:	4618      	mov	r0, r3
 800d562:	f7ff fca9 	bl	800ceb8 <ptr_to_mem>
 800d566:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	881a      	ldrh	r2, [r3, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	8bfa      	ldrh	r2, [r7, #30]
 800d57a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	8a7a      	ldrh	r2, [r7, #18]
 800d580:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2201      	movs	r2, #1
 800d586:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800d590:	4293      	cmp	r3, r2
 800d592:	d00b      	beq.n	800d5ac <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fc8d 	bl	800ceb8 <ptr_to_mem>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	8a7b      	ldrh	r3, [r7, #18]
 800d5a2:	8053      	strh	r3, [r2, #2]
 800d5a4:	e002      	b.n	800d5ac <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d5ac:	4b39      	ldr	r3, [pc, #228]	@ (800d694 <mem_malloc+0x1f0>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d127      	bne.n	800d606 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800d5b6:	4b37      	ldr	r3, [pc, #220]	@ (800d694 <mem_malloc+0x1f0>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d5bc:	e005      	b.n	800d5ca <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff fc78 	bl	800ceb8 <ptr_to_mem>
 800d5c8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d004      	beq.n	800d5dc <mem_malloc+0x138>
 800d5d2:	4b34      	ldr	r3, [pc, #208]	@ (800d6a4 <mem_malloc+0x200>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d1f0      	bne.n	800d5be <mem_malloc+0x11a>
          }
          lfree = cur;
 800d5dc:	4a2d      	ldr	r2, [pc, #180]	@ (800d694 <mem_malloc+0x1f0>)
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d5e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d694 <mem_malloc+0x1f0>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b2f      	ldr	r3, [pc, #188]	@ (800d6a4 <mem_malloc+0x200>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d00b      	beq.n	800d606 <mem_malloc+0x162>
 800d5ee:	4b29      	ldr	r3, [pc, #164]	@ (800d694 <mem_malloc+0x1f0>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	791b      	ldrb	r3, [r3, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d006      	beq.n	800d606 <mem_malloc+0x162>
 800d5f8:	4b27      	ldr	r3, [pc, #156]	@ (800d698 <mem_malloc+0x1f4>)
 800d5fa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d5fe:	492a      	ldr	r1, [pc, #168]	@ (800d6a8 <mem_malloc+0x204>)
 800d600:	4827      	ldr	r0, [pc, #156]	@ (800d6a0 <mem_malloc+0x1fc>)
 800d602:	f004 f99d 	bl	8011940 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d606:	4822      	ldr	r0, [pc, #136]	@ (800d690 <mem_malloc+0x1ec>)
 800d608:	f004 f84f 	bl	80116aa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d60c:	8bba      	ldrh	r2, [r7, #28]
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	4413      	add	r3, r2
 800d612:	3308      	adds	r3, #8
 800d614:	4a23      	ldr	r2, [pc, #140]	@ (800d6a4 <mem_malloc+0x200>)
 800d616:	6812      	ldr	r2, [r2, #0]
 800d618:	4293      	cmp	r3, r2
 800d61a:	d906      	bls.n	800d62a <mem_malloc+0x186>
 800d61c:	4b1e      	ldr	r3, [pc, #120]	@ (800d698 <mem_malloc+0x1f4>)
 800d61e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d622:	4922      	ldr	r1, [pc, #136]	@ (800d6ac <mem_malloc+0x208>)
 800d624:	481e      	ldr	r0, [pc, #120]	@ (800d6a0 <mem_malloc+0x1fc>)
 800d626:	f004 f98b 	bl	8011940 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	f003 0303 	and.w	r3, r3, #3
 800d630:	2b00      	cmp	r3, #0
 800d632:	d006      	beq.n	800d642 <mem_malloc+0x19e>
 800d634:	4b18      	ldr	r3, [pc, #96]	@ (800d698 <mem_malloc+0x1f4>)
 800d636:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d63a:	491d      	ldr	r1, [pc, #116]	@ (800d6b0 <mem_malloc+0x20c>)
 800d63c:	4818      	ldr	r0, [pc, #96]	@ (800d6a0 <mem_malloc+0x1fc>)
 800d63e:	f004 f97f 	bl	8011940 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f003 0303 	and.w	r3, r3, #3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d006      	beq.n	800d65a <mem_malloc+0x1b6>
 800d64c:	4b12      	ldr	r3, [pc, #72]	@ (800d698 <mem_malloc+0x1f4>)
 800d64e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d652:	4918      	ldr	r1, [pc, #96]	@ (800d6b4 <mem_malloc+0x210>)
 800d654:	4812      	ldr	r0, [pc, #72]	@ (800d6a0 <mem_malloc+0x1fc>)
 800d656:	f004 f973 	bl	8011940 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	3308      	adds	r3, #8
 800d65e:	e012      	b.n	800d686 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800d660:	8bfb      	ldrh	r3, [r7, #30]
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff fc28 	bl	800ceb8 <ptr_to_mem>
 800d668:	4603      	mov	r3, r0
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d66e:	8bfa      	ldrh	r2, [r7, #30]
 800d670:	8bb9      	ldrh	r1, [r7, #28]
 800d672:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 800d676:	1a5b      	subs	r3, r3, r1
 800d678:	429a      	cmp	r2, r3
 800d67a:	f4ff af3e 	bcc.w	800d4fa <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d67e:	4804      	ldr	r0, [pc, #16]	@ (800d690 <mem_malloc+0x1ec>)
 800d680:	f004 f813 	bl	80116aa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3720      	adds	r7, #32
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	2400c1b8 	.word	0x2400c1b8
 800d694:	2400c1bc 	.word	0x2400c1bc
 800d698:	08012980 	.word	0x08012980
 800d69c:	08012b44 	.word	0x08012b44
 800d6a0:	080129c8 	.word	0x080129c8
 800d6a4:	2400c1b4 	.word	0x2400c1b4
 800d6a8:	08012b58 	.word	0x08012b58
 800d6ac:	08012b74 	.word	0x08012b74
 800d6b0:	08012ba4 	.word	0x08012ba4
 800d6b4:	08012bd4 	.word	0x08012bd4

0800d6b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	3303      	adds	r3, #3
 800d6ce:	f023 0303 	bic.w	r3, r3, #3
 800d6d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	e011      	b.n	800d6fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	885b      	ldrh	r3, [r3, #2]
 800d702:	461a      	mov	r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4293      	cmp	r3, r2
 800d708:	dbe7      	blt.n	800d6da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d70a:	bf00      	nop
 800d70c:	bf00      	nop
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d71e:	2300      	movs	r3, #0
 800d720:	80fb      	strh	r3, [r7, #6]
 800d722:	e009      	b.n	800d738 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d724:	88fb      	ldrh	r3, [r7, #6]
 800d726:	4a08      	ldr	r2, [pc, #32]	@ (800d748 <memp_init+0x30>)
 800d728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff ffc3 	bl	800d6b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d732:	88fb      	ldrh	r3, [r7, #6]
 800d734:	3301      	adds	r3, #1
 800d736:	80fb      	strh	r3, [r7, #6]
 800d738:	88fb      	ldrh	r3, [r7, #6]
 800d73a:	2b09      	cmp	r3, #9
 800d73c:	d9f2      	bls.n	800d724 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	08013f8c 	.word	0x08013f8c

0800d74c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d754:	f003 ffd6 	bl	8011704 <sys_arch_protect>
 800d758:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d015      	beq.n	800d794 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	6812      	ldr	r2, [r2, #0]
 800d770:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	f003 0303 	and.w	r3, r3, #3
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d006      	beq.n	800d78a <do_memp_malloc_pool+0x3e>
 800d77c:	4b09      	ldr	r3, [pc, #36]	@ (800d7a4 <do_memp_malloc_pool+0x58>)
 800d77e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d782:	4909      	ldr	r1, [pc, #36]	@ (800d7a8 <do_memp_malloc_pool+0x5c>)
 800d784:	4809      	ldr	r0, [pc, #36]	@ (800d7ac <do_memp_malloc_pool+0x60>)
 800d786:	f004 f8db 	bl	8011940 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f003 ffc8 	bl	8011720 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	e003      	b.n	800d79c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f003 ffc3 	bl	8011720 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3710      	adds	r7, #16
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	08012bf8 	.word	0x08012bf8
 800d7a8:	08012c28 	.word	0x08012c28
 800d7ac:	08012c4c 	.word	0x08012c4c

0800d7b0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <memp_malloc_pool+0x1c>
 800d7be:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e8 <memp_malloc_pool+0x38>)
 800d7c0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d7c4:	4909      	ldr	r1, [pc, #36]	@ (800d7ec <memp_malloc_pool+0x3c>)
 800d7c6:	480a      	ldr	r0, [pc, #40]	@ (800d7f0 <memp_malloc_pool+0x40>)
 800d7c8:	f004 f8ba 	bl	8011940 <iprintf>
  if (desc == NULL) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <memp_malloc_pool+0x26>
    return NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e003      	b.n	800d7de <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff ffb8 	bl	800d74c <do_memp_malloc_pool>
 800d7dc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	08012bf8 	.word	0x08012bf8
 800d7ec:	08012c74 	.word	0x08012c74
 800d7f0:	08012c4c 	.word	0x08012c4c

0800d7f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	2b09      	cmp	r3, #9
 800d802:	d908      	bls.n	800d816 <memp_malloc+0x22>
 800d804:	4b0a      	ldr	r3, [pc, #40]	@ (800d830 <memp_malloc+0x3c>)
 800d806:	f240 1257 	movw	r2, #343	@ 0x157
 800d80a:	490a      	ldr	r1, [pc, #40]	@ (800d834 <memp_malloc+0x40>)
 800d80c:	480a      	ldr	r0, [pc, #40]	@ (800d838 <memp_malloc+0x44>)
 800d80e:	f004 f897 	bl	8011940 <iprintf>
 800d812:	2300      	movs	r3, #0
 800d814:	e008      	b.n	800d828 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d816:	79fb      	ldrb	r3, [r7, #7]
 800d818:	4a08      	ldr	r2, [pc, #32]	@ (800d83c <memp_malloc+0x48>)
 800d81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff ff94 	bl	800d74c <do_memp_malloc_pool>
 800d824:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d826:	68fb      	ldr	r3, [r7, #12]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	08012bf8 	.word	0x08012bf8
 800d834:	08012c88 	.word	0x08012c88
 800d838:	08012c4c 	.word	0x08012c4c
 800d83c:	08013f8c 	.word	0x08013f8c

0800d840 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	f003 0303 	and.w	r3, r3, #3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d006      	beq.n	800d862 <do_memp_free_pool+0x22>
 800d854:	4b0d      	ldr	r3, [pc, #52]	@ (800d88c <do_memp_free_pool+0x4c>)
 800d856:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d85a:	490d      	ldr	r1, [pc, #52]	@ (800d890 <do_memp_free_pool+0x50>)
 800d85c:	480d      	ldr	r0, [pc, #52]	@ (800d894 <do_memp_free_pool+0x54>)
 800d85e:	f004 f86f 	bl	8011940 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d866:	f003 ff4d 	bl	8011704 <sys_arch_protect>
 800d86a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d87e:	68b8      	ldr	r0, [r7, #8]
 800d880:	f003 ff4e 	bl	8011720 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d884:	bf00      	nop
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	08012bf8 	.word	0x08012bf8
 800d890:	08012ca8 	.word	0x08012ca8
 800d894:	08012c4c 	.word	0x08012c4c

0800d898 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d106      	bne.n	800d8b6 <memp_free_pool+0x1e>
 800d8a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d8d4 <memp_free_pool+0x3c>)
 800d8aa:	f240 1295 	movw	r2, #405	@ 0x195
 800d8ae:	490a      	ldr	r1, [pc, #40]	@ (800d8d8 <memp_free_pool+0x40>)
 800d8b0:	480a      	ldr	r0, [pc, #40]	@ (800d8dc <memp_free_pool+0x44>)
 800d8b2:	f004 f845 	bl	8011940 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d007      	beq.n	800d8cc <memp_free_pool+0x34>
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d004      	beq.n	800d8cc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d8c2:	6839      	ldr	r1, [r7, #0]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff ffbb 	bl	800d840 <do_memp_free_pool>
 800d8ca:	e000      	b.n	800d8ce <memp_free_pool+0x36>
    return;
 800d8cc:	bf00      	nop
}
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	08012bf8 	.word	0x08012bf8
 800d8d8:	08012c74 	.word	0x08012c74
 800d8dc:	08012c4c 	.word	0x08012c4c

0800d8e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	6039      	str	r1, [r7, #0]
 800d8ea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d8ec:	79fb      	ldrb	r3, [r7, #7]
 800d8ee:	2b09      	cmp	r3, #9
 800d8f0:	d907      	bls.n	800d902 <memp_free+0x22>
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d924 <memp_free+0x44>)
 800d8f4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d8f8:	490b      	ldr	r1, [pc, #44]	@ (800d928 <memp_free+0x48>)
 800d8fa:	480c      	ldr	r0, [pc, #48]	@ (800d92c <memp_free+0x4c>)
 800d8fc:	f004 f820 	bl	8011940 <iprintf>
 800d900:	e00c      	b.n	800d91c <memp_free+0x3c>

  if (mem == NULL) {
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d008      	beq.n	800d91a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d908:	79fb      	ldrb	r3, [r7, #7]
 800d90a:	4a09      	ldr	r2, [pc, #36]	@ (800d930 <memp_free+0x50>)
 800d90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d910:	6839      	ldr	r1, [r7, #0]
 800d912:	4618      	mov	r0, r3
 800d914:	f7ff ff94 	bl	800d840 <do_memp_free_pool>
 800d918:	e000      	b.n	800d91c <memp_free+0x3c>
    return;
 800d91a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d91c:	3708      	adds	r7, #8
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	08012bf8 	.word	0x08012bf8
 800d928:	08012cc8 	.word	0x08012cc8
 800d92c:	08012c4c 	.word	0x08012c4c
 800d930:	08013f8c 	.word	0x08013f8c

0800d934 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d934:	b480      	push	{r7}
 800d936:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d938:	bf00      	nop
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
	...

0800d944 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d108      	bne.n	800d96a <netif_add+0x26>
 800d958:	4b57      	ldr	r3, [pc, #348]	@ (800dab8 <netif_add+0x174>)
 800d95a:	f240 1227 	movw	r2, #295	@ 0x127
 800d95e:	4957      	ldr	r1, [pc, #348]	@ (800dabc <netif_add+0x178>)
 800d960:	4857      	ldr	r0, [pc, #348]	@ (800dac0 <netif_add+0x17c>)
 800d962:	f003 ffed 	bl	8011940 <iprintf>
 800d966:	2300      	movs	r3, #0
 800d968:	e0a2      	b.n	800dab0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d108      	bne.n	800d982 <netif_add+0x3e>
 800d970:	4b51      	ldr	r3, [pc, #324]	@ (800dab8 <netif_add+0x174>)
 800d972:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d976:	4953      	ldr	r1, [pc, #332]	@ (800dac4 <netif_add+0x180>)
 800d978:	4851      	ldr	r0, [pc, #324]	@ (800dac0 <netif_add+0x17c>)
 800d97a:	f003 ffe1 	bl	8011940 <iprintf>
 800d97e:	2300      	movs	r3, #0
 800d980:	e096      	b.n	800dab0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d988:	4b4f      	ldr	r3, [pc, #316]	@ (800dac8 <netif_add+0x184>)
 800d98a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d992:	4b4d      	ldr	r3, [pc, #308]	@ (800dac8 <netif_add+0x184>)
 800d994:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d99c:	4b4a      	ldr	r3, [pc, #296]	@ (800dac8 <netif_add+0x184>)
 800d99e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	4a45      	ldr	r2, [pc, #276]	@ (800dacc <netif_add+0x188>)
 800d9b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a3a      	ldr	r2, [r7, #32]
 800d9d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d9d2:	4b3f      	ldr	r3, [pc, #252]	@ (800dad0 <netif_add+0x18c>)
 800d9d4:	781a      	ldrb	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	68b9      	ldr	r1, [r7, #8]
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 f90f 	bl	800dc0c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	4798      	blx	r3
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <netif_add+0xba>
    return NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e058      	b.n	800dab0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da04:	2bff      	cmp	r3, #255	@ 0xff
 800da06:	d103      	bne.n	800da10 <netif_add+0xcc>
        netif->num = 0;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da14:	4b2f      	ldr	r3, [pc, #188]	@ (800dad4 <netif_add+0x190>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	617b      	str	r3, [r7, #20]
 800da1a:	e02b      	b.n	800da74 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	429a      	cmp	r2, r3
 800da22:	d106      	bne.n	800da32 <netif_add+0xee>
 800da24:	4b24      	ldr	r3, [pc, #144]	@ (800dab8 <netif_add+0x174>)
 800da26:	f240 128b 	movw	r2, #395	@ 0x18b
 800da2a:	492b      	ldr	r1, [pc, #172]	@ (800dad8 <netif_add+0x194>)
 800da2c:	4824      	ldr	r0, [pc, #144]	@ (800dac0 <netif_add+0x17c>)
 800da2e:	f003 ff87 	bl	8011940 <iprintf>
        num_netifs++;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	3301      	adds	r3, #1
 800da36:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	2bff      	cmp	r3, #255	@ 0xff
 800da3c:	dd06      	ble.n	800da4c <netif_add+0x108>
 800da3e:	4b1e      	ldr	r3, [pc, #120]	@ (800dab8 <netif_add+0x174>)
 800da40:	f240 128d 	movw	r2, #397	@ 0x18d
 800da44:	4925      	ldr	r1, [pc, #148]	@ (800dadc <netif_add+0x198>)
 800da46:	481e      	ldr	r0, [pc, #120]	@ (800dac0 <netif_add+0x17c>)
 800da48:	f003 ff7a 	bl	8011940 <iprintf>
        if (netif2->num == netif->num) {
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da58:	429a      	cmp	r2, r3
 800da5a:	d108      	bne.n	800da6e <netif_add+0x12a>
          netif->num++;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da62:	3301      	adds	r3, #1
 800da64:	b2da      	uxtb	r2, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800da6c:	e005      	b.n	800da7a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	617b      	str	r3, [r7, #20]
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1d0      	bne.n	800da1c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1be      	bne.n	800d9fe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da86:	2bfe      	cmp	r3, #254	@ 0xfe
 800da88:	d103      	bne.n	800da92 <netif_add+0x14e>
    netif_num = 0;
 800da8a:	4b11      	ldr	r3, [pc, #68]	@ (800dad0 <netif_add+0x18c>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	701a      	strb	r2, [r3, #0]
 800da90:	e006      	b.n	800daa0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da98:	3301      	adds	r3, #1
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dad0 <netif_add+0x18c>)
 800da9e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800daa0:	4b0c      	ldr	r3, [pc, #48]	@ (800dad4 <netif_add+0x190>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800daa8:	4a0a      	ldr	r2, [pc, #40]	@ (800dad4 <netif_add+0x190>)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800daae:	68fb      	ldr	r3, [r7, #12]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	08012ce4 	.word	0x08012ce4
 800dabc:	08012d78 	.word	0x08012d78
 800dac0:	08012d34 	.word	0x08012d34
 800dac4:	08012d94 	.word	0x08012d94
 800dac8:	08013fc4 	.word	0x08013fc4
 800dacc:	0800dee7 	.word	0x0800dee7
 800dad0:	24012720 	.word	0x24012720
 800dad4:	24012718 	.word	0x24012718
 800dad8:	08012db8 	.word	0x08012db8
 800dadc:	08012dcc 	.word	0x08012dcc

0800dae0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 fa23 	bl	800ef38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800daf2:	bf00      	nop
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
	...

0800dafc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <netif_do_set_ipaddr+0x20>
 800db0e:	4b1d      	ldr	r3, [pc, #116]	@ (800db84 <netif_do_set_ipaddr+0x88>)
 800db10:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800db14:	491c      	ldr	r1, [pc, #112]	@ (800db88 <netif_do_set_ipaddr+0x8c>)
 800db16:	481d      	ldr	r0, [pc, #116]	@ (800db8c <netif_do_set_ipaddr+0x90>)
 800db18:	f003 ff12 	bl	8011940 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d106      	bne.n	800db30 <netif_do_set_ipaddr+0x34>
 800db22:	4b18      	ldr	r3, [pc, #96]	@ (800db84 <netif_do_set_ipaddr+0x88>)
 800db24:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800db28:	4917      	ldr	r1, [pc, #92]	@ (800db88 <netif_do_set_ipaddr+0x8c>)
 800db2a:	4818      	ldr	r0, [pc, #96]	@ (800db8c <netif_do_set_ipaddr+0x90>)
 800db2c:	f003 ff08 	bl	8011940 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	3304      	adds	r3, #4
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d01c      	beq.n	800db78 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	3304      	adds	r3, #4
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800db4e:	f107 0314 	add.w	r3, r7, #20
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff ffc3 	bl	800dae0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <netif_do_set_ipaddr+0x6a>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	e000      	b.n	800db68 <netif_do_set_ipaddr+0x6c>
 800db66:	2300      	movs	r3, #0
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800db6c:	2101      	movs	r1, #1
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 f8d2 	bl	800dd18 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800db74:	2301      	movs	r3, #1
 800db76:	e000      	b.n	800db7a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	08012ce4 	.word	0x08012ce4
 800db88:	08012dfc 	.word	0x08012dfc
 800db8c:	08012d34 	.word	0x08012d34

0800db90 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	3308      	adds	r3, #8
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d00a      	beq.n	800dbc0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <netif_do_set_netmask+0x26>
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	e000      	b.n	800dbb8 <netif_do_set_netmask+0x28>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e000      	b.n	800dbc2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3714      	adds	r7, #20
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b085      	sub	sp, #20
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	60b9      	str	r1, [r7, #8]
 800dbd8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	330c      	adds	r3, #12
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d00a      	beq.n	800dbfe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <netif_do_set_gw+0x26>
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	e000      	b.n	800dbf6 <netif_do_set_gw+0x28>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e000      	b.n	800dc00 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
 800dc18:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dc28:	4b1c      	ldr	r3, [pc, #112]	@ (800dc9c <netif_set_addr+0x90>)
 800dc2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dc32:	4b1a      	ldr	r3, [pc, #104]	@ (800dc9c <netif_set_addr+0x90>)
 800dc34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dc3c:	4b17      	ldr	r3, [pc, #92]	@ (800dc9c <netif_set_addr+0x90>)
 800dc3e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <netif_set_addr+0x42>
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d101      	bne.n	800dc52 <netif_set_addr+0x46>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e000      	b.n	800dc54 <netif_set_addr+0x48>
 800dc52:	2300      	movs	r3, #0
 800dc54:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d006      	beq.n	800dc6a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc5c:	f107 0310 	add.w	r3, r7, #16
 800dc60:	461a      	mov	r2, r3
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff ff49 	bl	800dafc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dc6a:	69fa      	ldr	r2, [r7, #28]
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f7ff ff8e 	bl	800db90 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dc74:	69ba      	ldr	r2, [r7, #24]
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f7ff ffa8 	bl	800dbce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d106      	bne.n	800dc92 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc84:	f107 0310 	add.w	r3, r7, #16
 800dc88:	461a      	mov	r2, r3
 800dc8a:	68b9      	ldr	r1, [r7, #8]
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f7ff ff35 	bl	800dafc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dc92:	bf00      	nop
 800dc94:	3720      	adds	r7, #32
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	08013fc4 	.word	0x08013fc4

0800dca0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dca8:	4a04      	ldr	r2, [pc, #16]	@ (800dcbc <netif_set_default+0x1c>)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dcae:	bf00      	nop
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	2401271c 	.word	0x2401271c

0800dcc0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d107      	bne.n	800dcde <netif_set_up+0x1e>
 800dcce:	4b0f      	ldr	r3, [pc, #60]	@ (800dd0c <netif_set_up+0x4c>)
 800dcd0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800dcd4:	490e      	ldr	r1, [pc, #56]	@ (800dd10 <netif_set_up+0x50>)
 800dcd6:	480f      	ldr	r0, [pc, #60]	@ (800dd14 <netif_set_up+0x54>)
 800dcd8:	f003 fe32 	bl	8011940 <iprintf>
 800dcdc:	e013      	b.n	800dd06 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10c      	bne.n	800dd06 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcf2:	f043 0301 	orr.w	r3, r3, #1
 800dcf6:	b2da      	uxtb	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dcfe:	2103      	movs	r1, #3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f809 	bl	800dd18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	08012ce4 	.word	0x08012ce4
 800dd10:	08012e6c 	.word	0x08012e6c
 800dd14:	08012d34 	.word	0x08012d34

0800dd18 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	460b      	mov	r3, r1
 800dd22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d106      	bne.n	800dd38 <netif_issue_reports+0x20>
 800dd2a:	4b18      	ldr	r3, [pc, #96]	@ (800dd8c <netif_issue_reports+0x74>)
 800dd2c:	f240 326d 	movw	r2, #877	@ 0x36d
 800dd30:	4917      	ldr	r1, [pc, #92]	@ (800dd90 <netif_issue_reports+0x78>)
 800dd32:	4818      	ldr	r0, [pc, #96]	@ (800dd94 <netif_issue_reports+0x7c>)
 800dd34:	f003 fe04 	bl	8011940 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd3e:	f003 0304 	and.w	r3, r3, #4
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d01e      	beq.n	800dd84 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd4c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d017      	beq.n	800dd84 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd54:	78fb      	ldrb	r3, [r7, #3]
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d013      	beq.n	800dd86 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3304      	adds	r3, #4
 800dd62:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00e      	beq.n	800dd86 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd6e:	f003 0308 	and.w	r3, r3, #8
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d007      	beq.n	800dd86 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3304      	adds	r3, #4
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f002 f845 	bl	800fe0c <etharp_request>
 800dd82:	e000      	b.n	800dd86 <netif_issue_reports+0x6e>
    return;
 800dd84:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	08012ce4 	.word	0x08012ce4
 800dd90:	08012e88 	.word	0x08012e88
 800dd94:	08012d34 	.word	0x08012d34

0800dd98 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d107      	bne.n	800ddb6 <netif_set_down+0x1e>
 800dda6:	4b12      	ldr	r3, [pc, #72]	@ (800ddf0 <netif_set_down+0x58>)
 800dda8:	f240 329b 	movw	r2, #923	@ 0x39b
 800ddac:	4911      	ldr	r1, [pc, #68]	@ (800ddf4 <netif_set_down+0x5c>)
 800ddae:	4812      	ldr	r0, [pc, #72]	@ (800ddf8 <netif_set_down+0x60>)
 800ddb0:	f003 fdc6 	bl	8011940 <iprintf>
 800ddb4:	e019      	b.n	800ddea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddbc:	f003 0301 	and.w	r3, r3, #1
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d012      	beq.n	800ddea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ddca:	f023 0301 	bic.w	r3, r3, #1
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dddc:	f003 0308 	and.w	r3, r3, #8
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f001 fbcf 	bl	800f588 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	08012ce4 	.word	0x08012ce4
 800ddf4:	08012eac 	.word	0x08012eac
 800ddf8:	08012d34 	.word	0x08012d34

0800ddfc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d107      	bne.n	800de1a <netif_set_link_up+0x1e>
 800de0a:	4b13      	ldr	r3, [pc, #76]	@ (800de58 <netif_set_link_up+0x5c>)
 800de0c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800de10:	4912      	ldr	r1, [pc, #72]	@ (800de5c <netif_set_link_up+0x60>)
 800de12:	4813      	ldr	r0, [pc, #76]	@ (800de60 <netif_set_link_up+0x64>)
 800de14:	f003 fd94 	bl	8011940 <iprintf>
 800de18:	e01b      	b.n	800de52 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de20:	f003 0304 	and.w	r3, r3, #4
 800de24:	2b00      	cmp	r3, #0
 800de26:	d114      	bne.n	800de52 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de2e:	f043 0304 	orr.w	r3, r3, #4
 800de32:	b2da      	uxtb	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de3a:	2103      	movs	r1, #3
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f7ff ff6b 	bl	800dd18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	69db      	ldr	r3, [r3, #28]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d003      	beq.n	800de52 <netif_set_link_up+0x56>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	69db      	ldr	r3, [r3, #28]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	08012ce4 	.word	0x08012ce4
 800de5c:	08012ecc 	.word	0x08012ecc
 800de60:	08012d34 	.word	0x08012d34

0800de64 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d107      	bne.n	800de82 <netif_set_link_down+0x1e>
 800de72:	4b11      	ldr	r3, [pc, #68]	@ (800deb8 <netif_set_link_down+0x54>)
 800de74:	f240 4206 	movw	r2, #1030	@ 0x406
 800de78:	4910      	ldr	r1, [pc, #64]	@ (800debc <netif_set_link_down+0x58>)
 800de7a:	4811      	ldr	r0, [pc, #68]	@ (800dec0 <netif_set_link_down+0x5c>)
 800de7c:	f003 fd60 	bl	8011940 <iprintf>
 800de80:	e017      	b.n	800deb2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de88:	f003 0304 	and.w	r3, r3, #4
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d010      	beq.n	800deb2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800de96:	f023 0304 	bic.w	r3, r3, #4
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	69db      	ldr	r3, [r3, #28]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <netif_set_link_down+0x4e>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	69db      	ldr	r3, [r3, #28]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	08012ce4 	.word	0x08012ce4
 800debc:	08012ef0 	.word	0x08012ef0
 800dec0:	08012d34 	.word	0x08012d34

0800dec4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d002      	beq.n	800deda <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	61da      	str	r2, [r3, #28]
  }
}
 800deda:	bf00      	nop
 800dedc:	370c      	adds	r7, #12
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b085      	sub	sp, #20
 800deea:	af00      	add	r7, sp, #0
 800deec:	60f8      	str	r0, [r7, #12]
 800deee:	60b9      	str	r1, [r7, #8]
 800def0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800def2:	f06f 030b 	mvn.w	r3, #11
}
 800def6:	4618      	mov	r0, r3
 800def8:	3714      	adds	r7, #20
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800df02:	b480      	push	{r7}
 800df04:	b085      	sub	sp, #20
 800df06:	af00      	add	r7, sp, #0
 800df08:	60f8      	str	r0, [r7, #12]
 800df0a:	60b9      	str	r1, [r7, #8]
 800df0c:	4611      	mov	r1, r2
 800df0e:	461a      	mov	r2, r3
 800df10:	460b      	mov	r3, r1
 800df12:	80fb      	strh	r3, [r7, #6]
 800df14:	4613      	mov	r3, r2
 800df16:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	88fa      	ldrh	r2, [r7, #6]
 800df28:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	88ba      	ldrh	r2, [r7, #4]
 800df2e:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800df30:	8b3b      	ldrh	r3, [r7, #24]
 800df32:	b2da      	uxtb	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	7f3a      	ldrb	r2, [r7, #28]
 800df3c:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2201      	movs	r2, #1
 800df42:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2200      	movs	r2, #0
 800df48:	73da      	strb	r2, [r3, #15]
}
 800df4a:	bf00      	nop
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
	...

0800df58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08c      	sub	sp, #48	@ 0x30
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	4603      	mov	r3, r0
 800df60:	71fb      	strb	r3, [r7, #7]
 800df62:	460b      	mov	r3, r1
 800df64:	80bb      	strh	r3, [r7, #4]
 800df66:	4613      	mov	r3, r2
 800df68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800df6e:	887b      	ldrh	r3, [r7, #2]
 800df70:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800df74:	d07f      	beq.n	800e076 <pbuf_alloc+0x11e>
 800df76:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800df7a:	f300 80c8 	bgt.w	800e10e <pbuf_alloc+0x1b6>
 800df7e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800df82:	d010      	beq.n	800dfa6 <pbuf_alloc+0x4e>
 800df84:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800df88:	f300 80c1 	bgt.w	800e10e <pbuf_alloc+0x1b6>
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d002      	beq.n	800df96 <pbuf_alloc+0x3e>
 800df90:	2b41      	cmp	r3, #65	@ 0x41
 800df92:	f040 80bc 	bne.w	800e10e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800df96:	887a      	ldrh	r2, [r7, #2]
 800df98:	88bb      	ldrh	r3, [r7, #4]
 800df9a:	4619      	mov	r1, r3
 800df9c:	2000      	movs	r0, #0
 800df9e:	f000 f8d1 	bl	800e144 <pbuf_alloc_reference>
 800dfa2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800dfa4:	e0bd      	b.n	800e122 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dfae:	88bb      	ldrh	r3, [r7, #4]
 800dfb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dfb2:	2009      	movs	r0, #9
 800dfb4:	f7ff fc1e 	bl	800d7f4 <memp_malloc>
 800dfb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d107      	bne.n	800dfd0 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d002      	beq.n	800dfcc <pbuf_alloc+0x74>
            pbuf_free(p);
 800dfc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfc8:	f000 faaa 	bl	800e520 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e0a9      	b.n	800e124 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dfd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfd2:	3303      	adds	r3, #3
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	f023 0303 	bic.w	r3, r3, #3
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800dfe0:	1a9b      	subs	r3, r3, r2
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	8b7a      	ldrh	r2, [r7, #26]
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	bf28      	it	cs
 800dfea:	4613      	movcs	r3, r2
 800dfec:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dfee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dff0:	3310      	adds	r3, #16
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	4413      	add	r3, r2
 800dff6:	3303      	adds	r3, #3
 800dff8:	f023 0303 	bic.w	r3, r3, #3
 800dffc:	4618      	mov	r0, r3
 800dffe:	89f9      	ldrh	r1, [r7, #14]
 800e000:	8b7a      	ldrh	r2, [r7, #26]
 800e002:	2300      	movs	r3, #0
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	887b      	ldrh	r3, [r7, #2]
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	460b      	mov	r3, r1
 800e00c:	4601      	mov	r1, r0
 800e00e:	6938      	ldr	r0, [r7, #16]
 800e010:	f7ff ff77 	bl	800df02 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	f003 0303 	and.w	r3, r3, #3
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d006      	beq.n	800e02e <pbuf_alloc+0xd6>
 800e020:	4b42      	ldr	r3, [pc, #264]	@ (800e12c <pbuf_alloc+0x1d4>)
 800e022:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e026:	4942      	ldr	r1, [pc, #264]	@ (800e130 <pbuf_alloc+0x1d8>)
 800e028:	4842      	ldr	r0, [pc, #264]	@ (800e134 <pbuf_alloc+0x1dc>)
 800e02a:	f003 fc89 	bl	8011940 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e02e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e030:	3303      	adds	r3, #3
 800e032:	f023 0303 	bic.w	r3, r3, #3
 800e036:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d106      	bne.n	800e04c <pbuf_alloc+0xf4>
 800e03e:	4b3b      	ldr	r3, [pc, #236]	@ (800e12c <pbuf_alloc+0x1d4>)
 800e040:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e044:	493c      	ldr	r1, [pc, #240]	@ (800e138 <pbuf_alloc+0x1e0>)
 800e046:	483b      	ldr	r0, [pc, #236]	@ (800e134 <pbuf_alloc+0x1dc>)
 800e048:	f003 fc7a 	bl	8011940 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	627b      	str	r3, [r7, #36]	@ 0x24
 800e056:	e002      	b.n	800e05e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e062:	8b7a      	ldrh	r2, [r7, #26]
 800e064:	89fb      	ldrh	r3, [r7, #14]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e06e:	8b7b      	ldrh	r3, [r7, #26]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d19e      	bne.n	800dfb2 <pbuf_alloc+0x5a>
      break;
 800e074:	e055      	b.n	800e122 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e076:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e078:	3303      	adds	r3, #3
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	f023 0303 	bic.w	r3, r3, #3
 800e080:	b29a      	uxth	r2, r3
 800e082:	88bb      	ldrh	r3, [r7, #4]
 800e084:	3303      	adds	r3, #3
 800e086:	b29b      	uxth	r3, r3
 800e088:	f023 0303 	bic.w	r3, r3, #3
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	4413      	add	r3, r2
 800e090:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e092:	8b3b      	ldrh	r3, [r7, #24]
 800e094:	3310      	adds	r3, #16
 800e096:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e098:	8b3a      	ldrh	r2, [r7, #24]
 800e09a:	88bb      	ldrh	r3, [r7, #4]
 800e09c:	3303      	adds	r3, #3
 800e09e:	f023 0303 	bic.w	r3, r3, #3
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d306      	bcc.n	800e0b4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e0a6:	8afa      	ldrh	r2, [r7, #22]
 800e0a8:	88bb      	ldrh	r3, [r7, #4]
 800e0aa:	3303      	adds	r3, #3
 800e0ac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d201      	bcs.n	800e0b8 <pbuf_alloc+0x160>
        return NULL;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	e035      	b.n	800e124 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e0b8:	8afb      	ldrh	r3, [r7, #22]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7ff f9f2 	bl	800d4a4 <mem_malloc>
 800e0c0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d101      	bne.n	800e0cc <pbuf_alloc+0x174>
        return NULL;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e02b      	b.n	800e124 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e0cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0ce:	3310      	adds	r3, #16
 800e0d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d2:	4413      	add	r3, r2
 800e0d4:	3303      	adds	r3, #3
 800e0d6:	f023 0303 	bic.w	r3, r3, #3
 800e0da:	4618      	mov	r0, r3
 800e0dc:	88b9      	ldrh	r1, [r7, #4]
 800e0de:	88ba      	ldrh	r2, [r7, #4]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	887b      	ldrh	r3, [r7, #2]
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0ee:	f7ff ff08 	bl	800df02 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	f003 0303 	and.w	r3, r3, #3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d010      	beq.n	800e120 <pbuf_alloc+0x1c8>
 800e0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800e12c <pbuf_alloc+0x1d4>)
 800e100:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e104:	490d      	ldr	r1, [pc, #52]	@ (800e13c <pbuf_alloc+0x1e4>)
 800e106:	480b      	ldr	r0, [pc, #44]	@ (800e134 <pbuf_alloc+0x1dc>)
 800e108:	f003 fc1a 	bl	8011940 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e10c:	e008      	b.n	800e120 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e10e:	4b07      	ldr	r3, [pc, #28]	@ (800e12c <pbuf_alloc+0x1d4>)
 800e110:	f240 1227 	movw	r2, #295	@ 0x127
 800e114:	490a      	ldr	r1, [pc, #40]	@ (800e140 <pbuf_alloc+0x1e8>)
 800e116:	4807      	ldr	r0, [pc, #28]	@ (800e134 <pbuf_alloc+0x1dc>)
 800e118:	f003 fc12 	bl	8011940 <iprintf>
      return NULL;
 800e11c:	2300      	movs	r3, #0
 800e11e:	e001      	b.n	800e124 <pbuf_alloc+0x1cc>
      break;
 800e120:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e124:	4618      	mov	r0, r3
 800e126:	3728      	adds	r7, #40	@ 0x28
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	08012f14 	.word	0x08012f14
 800e130:	08012f44 	.word	0x08012f44
 800e134:	08012f74 	.word	0x08012f74
 800e138:	08012f9c 	.word	0x08012f9c
 800e13c:	08012fd0 	.word	0x08012fd0
 800e140:	08012ffc 	.word	0x08012ffc

0800e144 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af02      	add	r7, sp, #8
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	460b      	mov	r3, r1
 800e14e:	807b      	strh	r3, [r7, #2]
 800e150:	4613      	mov	r3, r2
 800e152:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e154:	883b      	ldrh	r3, [r7, #0]
 800e156:	2b41      	cmp	r3, #65	@ 0x41
 800e158:	d009      	beq.n	800e16e <pbuf_alloc_reference+0x2a>
 800e15a:	883b      	ldrh	r3, [r7, #0]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d006      	beq.n	800e16e <pbuf_alloc_reference+0x2a>
 800e160:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a0 <pbuf_alloc_reference+0x5c>)
 800e162:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e166:	490f      	ldr	r1, [pc, #60]	@ (800e1a4 <pbuf_alloc_reference+0x60>)
 800e168:	480f      	ldr	r0, [pc, #60]	@ (800e1a8 <pbuf_alloc_reference+0x64>)
 800e16a:	f003 fbe9 	bl	8011940 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e16e:	2008      	movs	r0, #8
 800e170:	f7ff fb40 	bl	800d7f4 <memp_malloc>
 800e174:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d101      	bne.n	800e180 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e17c:	2300      	movs	r3, #0
 800e17e:	e00b      	b.n	800e198 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e180:	8879      	ldrh	r1, [r7, #2]
 800e182:	887a      	ldrh	r2, [r7, #2]
 800e184:	2300      	movs	r3, #0
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	883b      	ldrh	r3, [r7, #0]
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	460b      	mov	r3, r1
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7ff feb6 	bl	800df02 <pbuf_init_alloced_pbuf>
  return p;
 800e196:	68fb      	ldr	r3, [r7, #12]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	08012f14 	.word	0x08012f14
 800e1a4:	08013018 	.word	0x08013018
 800e1a8:	08012f74 	.word	0x08012f74

0800e1ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b088      	sub	sp, #32
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	607b      	str	r3, [r7, #4]
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	81bb      	strh	r3, [r7, #12]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e1c0:	7bfb      	ldrb	r3, [r7, #15]
 800e1c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e1c4:	8a7b      	ldrh	r3, [r7, #18]
 800e1c6:	3303      	adds	r3, #3
 800e1c8:	f023 0203 	bic.w	r2, r3, #3
 800e1cc:	89bb      	ldrh	r3, [r7, #12]
 800e1ce:	441a      	add	r2, r3
 800e1d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d901      	bls.n	800e1da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e018      	b.n	800e20c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d007      	beq.n	800e1f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e1e0:	8a7b      	ldrh	r3, [r7, #18]
 800e1e2:	3303      	adds	r3, #3
 800e1e4:	f023 0303 	bic.w	r3, r3, #3
 800e1e8:	6a3a      	ldr	r2, [r7, #32]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	617b      	str	r3, [r7, #20]
 800e1ee:	e001      	b.n	800e1f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	89b9      	ldrh	r1, [r7, #12]
 800e1f8:	89ba      	ldrh	r2, [r7, #12]
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	897b      	ldrh	r3, [r7, #10]
 800e200:	9300      	str	r3, [sp, #0]
 800e202:	460b      	mov	r3, r1
 800e204:	6979      	ldr	r1, [r7, #20]
 800e206:	f7ff fe7c 	bl	800df02 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e20a:	687b      	ldr	r3, [r7, #4]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <pbuf_realloc+0x20>
 800e226:	4b3a      	ldr	r3, [pc, #232]	@ (800e310 <pbuf_realloc+0xfc>)
 800e228:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e22c:	4939      	ldr	r1, [pc, #228]	@ (800e314 <pbuf_realloc+0x100>)
 800e22e:	483a      	ldr	r0, [pc, #232]	@ (800e318 <pbuf_realloc+0x104>)
 800e230:	f003 fb86 	bl	8011940 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	891b      	ldrh	r3, [r3, #8]
 800e238:	887a      	ldrh	r2, [r7, #2]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d263      	bcs.n	800e306 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	891a      	ldrh	r2, [r3, #8]
 800e242:	887b      	ldrh	r3, [r7, #2]
 800e244:	1ad3      	subs	r3, r2, r3
 800e246:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e248:	887b      	ldrh	r3, [r7, #2]
 800e24a:	817b      	strh	r3, [r7, #10]
  q = p;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e250:	e018      	b.n	800e284 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	895b      	ldrh	r3, [r3, #10]
 800e256:	897a      	ldrh	r2, [r7, #10]
 800e258:	1ad3      	subs	r3, r2, r3
 800e25a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	891a      	ldrh	r2, [r3, #8]
 800e260:	893b      	ldrh	r3, [r7, #8]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	b29a      	uxth	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <pbuf_realloc+0x70>
 800e276:	4b26      	ldr	r3, [pc, #152]	@ (800e310 <pbuf_realloc+0xfc>)
 800e278:	f240 12af 	movw	r2, #431	@ 0x1af
 800e27c:	4927      	ldr	r1, [pc, #156]	@ (800e31c <pbuf_realloc+0x108>)
 800e27e:	4826      	ldr	r0, [pc, #152]	@ (800e318 <pbuf_realloc+0x104>)
 800e280:	f003 fb5e 	bl	8011940 <iprintf>
  while (rem_len > q->len) {
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	895b      	ldrh	r3, [r3, #10]
 800e288:	897a      	ldrh	r2, [r7, #10]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d8e1      	bhi.n	800e252 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	7b1b      	ldrb	r3, [r3, #12]
 800e292:	f003 030f 	and.w	r3, r3, #15
 800e296:	2b00      	cmp	r3, #0
 800e298:	d121      	bne.n	800e2de <pbuf_realloc+0xca>
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	895b      	ldrh	r3, [r3, #10]
 800e29e:	897a      	ldrh	r2, [r7, #10]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d01c      	beq.n	800e2de <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	7b5b      	ldrb	r3, [r3, #13]
 800e2a8:	f003 0302 	and.w	r3, r3, #2
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d116      	bne.n	800e2de <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	685a      	ldr	r2, [r3, #4]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	897b      	ldrh	r3, [r7, #10]
 800e2bc:	4413      	add	r3, r2
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f7fe ffde 	bl	800d284 <mem_trim>
 800e2c8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <pbuf_realloc+0xca>
 800e2d0:	4b0f      	ldr	r3, [pc, #60]	@ (800e310 <pbuf_realloc+0xfc>)
 800e2d2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e2d6:	4912      	ldr	r1, [pc, #72]	@ (800e320 <pbuf_realloc+0x10c>)
 800e2d8:	480f      	ldr	r0, [pc, #60]	@ (800e318 <pbuf_realloc+0x104>)
 800e2da:	f003 fb31 	bl	8011940 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	897a      	ldrh	r2, [r7, #10]
 800e2e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	895a      	ldrh	r2, [r3, #10]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d004      	beq.n	800e2fe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f000 f911 	bl	800e520 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2200      	movs	r2, #0
 800e302:	601a      	str	r2, [r3, #0]
 800e304:	e000      	b.n	800e308 <pbuf_realloc+0xf4>
    return;
 800e306:	bf00      	nop

}
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	08012f14 	.word	0x08012f14
 800e314:	0801302c 	.word	0x0801302c
 800e318:	08012f74 	.word	0x08012f74
 800e31c:	08013044 	.word	0x08013044
 800e320:	0801305c 	.word	0x0801305c

0800e324 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	4613      	mov	r3, r2
 800e330:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d106      	bne.n	800e346 <pbuf_add_header_impl+0x22>
 800e338:	4b2b      	ldr	r3, [pc, #172]	@ (800e3e8 <pbuf_add_header_impl+0xc4>)
 800e33a:	f240 12df 	movw	r2, #479	@ 0x1df
 800e33e:	492b      	ldr	r1, [pc, #172]	@ (800e3ec <pbuf_add_header_impl+0xc8>)
 800e340:	482b      	ldr	r0, [pc, #172]	@ (800e3f0 <pbuf_add_header_impl+0xcc>)
 800e342:	f003 fafd 	bl	8011940 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d003      	beq.n	800e354 <pbuf_add_header_impl+0x30>
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e352:	d301      	bcc.n	800e358 <pbuf_add_header_impl+0x34>
    return 1;
 800e354:	2301      	movs	r3, #1
 800e356:	e043      	b.n	800e3e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <pbuf_add_header_impl+0x3e>
    return 0;
 800e35e:	2300      	movs	r3, #0
 800e360:	e03e      	b.n	800e3e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	891a      	ldrh	r2, [r3, #8]
 800e36a:	8a7b      	ldrh	r3, [r7, #18]
 800e36c:	4413      	add	r3, r2
 800e36e:	b29b      	uxth	r3, r3
 800e370:	8a7a      	ldrh	r2, [r7, #18]
 800e372:	429a      	cmp	r2, r3
 800e374:	d901      	bls.n	800e37a <pbuf_add_header_impl+0x56>
    return 1;
 800e376:	2301      	movs	r3, #1
 800e378:	e032      	b.n	800e3e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	7b1b      	ldrb	r3, [r3, #12]
 800e37e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e380:	8a3b      	ldrh	r3, [r7, #16]
 800e382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00c      	beq.n	800e3a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	425b      	negs	r3, r3
 800e392:	4413      	add	r3, r2
 800e394:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3310      	adds	r3, #16
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d20d      	bcs.n	800e3bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e01d      	b.n	800e3e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d006      	beq.n	800e3b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	685a      	ldr	r2, [r3, #4]
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	425b      	negs	r3, r3
 800e3b2:	4413      	add	r3, r2
 800e3b4:	617b      	str	r3, [r7, #20]
 800e3b6:	e001      	b.n	800e3bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e011      	b.n	800e3e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	895a      	ldrh	r2, [r3, #10]
 800e3c6:	8a7b      	ldrh	r3, [r7, #18]
 800e3c8:	4413      	add	r3, r2
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	891a      	ldrh	r2, [r3, #8]
 800e3d4:	8a7b      	ldrh	r3, [r7, #18]
 800e3d6:	4413      	add	r3, r2
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	811a      	strh	r2, [r3, #8]


  return 0;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	08012f14 	.word	0x08012f14
 800e3ec:	08013078 	.word	0x08013078
 800e3f0:	08012f74 	.word	0x08012f74

0800e3f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e3fe:	2200      	movs	r2, #0
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff ff8e 	bl	800e324 <pbuf_add_header_impl>
 800e408:	4603      	mov	r3, r0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
	...

0800e414 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d106      	bne.n	800e432 <pbuf_remove_header+0x1e>
 800e424:	4b20      	ldr	r3, [pc, #128]	@ (800e4a8 <pbuf_remove_header+0x94>)
 800e426:	f240 224b 	movw	r2, #587	@ 0x24b
 800e42a:	4920      	ldr	r1, [pc, #128]	@ (800e4ac <pbuf_remove_header+0x98>)
 800e42c:	4820      	ldr	r0, [pc, #128]	@ (800e4b0 <pbuf_remove_header+0x9c>)
 800e42e:	f003 fa87 	bl	8011940 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d003      	beq.n	800e440 <pbuf_remove_header+0x2c>
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e43e:	d301      	bcc.n	800e444 <pbuf_remove_header+0x30>
    return 1;
 800e440:	2301      	movs	r3, #1
 800e442:	e02c      	b.n	800e49e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d101      	bne.n	800e44e <pbuf_remove_header+0x3a>
    return 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	e027      	b.n	800e49e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	895b      	ldrh	r3, [r3, #10]
 800e456:	89fa      	ldrh	r2, [r7, #14]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d908      	bls.n	800e46e <pbuf_remove_header+0x5a>
 800e45c:	4b12      	ldr	r3, [pc, #72]	@ (800e4a8 <pbuf_remove_header+0x94>)
 800e45e:	f240 2255 	movw	r2, #597	@ 0x255
 800e462:	4914      	ldr	r1, [pc, #80]	@ (800e4b4 <pbuf_remove_header+0xa0>)
 800e464:	4812      	ldr	r0, [pc, #72]	@ (800e4b0 <pbuf_remove_header+0x9c>)
 800e466:	f003 fa6b 	bl	8011940 <iprintf>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e017      	b.n	800e49e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	441a      	add	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	895a      	ldrh	r2, [r3, #10]
 800e484:	89fb      	ldrh	r3, [r7, #14]
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	b29a      	uxth	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	891a      	ldrh	r2, [r3, #8]
 800e492:	89fb      	ldrh	r3, [r7, #14]
 800e494:	1ad3      	subs	r3, r2, r3
 800e496:	b29a      	uxth	r2, r3
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	08012f14 	.word	0x08012f14
 800e4ac:	08013078 	.word	0x08013078
 800e4b0:	08012f74 	.word	0x08012f74
 800e4b4:	08013084 	.word	0x08013084

0800e4b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	807b      	strh	r3, [r7, #2]
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e4c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	da08      	bge.n	800e4e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e4d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4d4:	425b      	negs	r3, r3
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7ff ff9b 	bl	800e414 <pbuf_remove_header>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	e007      	b.n	800e4f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e4e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4e6:	787a      	ldrb	r2, [r7, #1]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7ff ff1a 	bl	800e324 <pbuf_add_header_impl>
 800e4f0:	4603      	mov	r3, r0
  }
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b082      	sub	sp, #8
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	460b      	mov	r3, r1
 800e504:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e506:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e50a:	2201      	movs	r2, #1
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff ffd2 	bl	800e4b8 <pbuf_header_impl>
 800e514:	4603      	mov	r3, r0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b088      	sub	sp, #32
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10b      	bne.n	800e546 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d106      	bne.n	800e542 <pbuf_free+0x22>
 800e534:	4b3b      	ldr	r3, [pc, #236]	@ (800e624 <pbuf_free+0x104>)
 800e536:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e53a:	493b      	ldr	r1, [pc, #236]	@ (800e628 <pbuf_free+0x108>)
 800e53c:	483b      	ldr	r0, [pc, #236]	@ (800e62c <pbuf_free+0x10c>)
 800e53e:	f003 f9ff 	bl	8011940 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e542:	2300      	movs	r3, #0
 800e544:	e069      	b.n	800e61a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e546:	2300      	movs	r3, #0
 800e548:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e54a:	e062      	b.n	800e612 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e54c:	f003 f8da 	bl	8011704 <sys_arch_protect>
 800e550:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	7b9b      	ldrb	r3, [r3, #14]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d106      	bne.n	800e568 <pbuf_free+0x48>
 800e55a:	4b32      	ldr	r3, [pc, #200]	@ (800e624 <pbuf_free+0x104>)
 800e55c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e560:	4933      	ldr	r1, [pc, #204]	@ (800e630 <pbuf_free+0x110>)
 800e562:	4832      	ldr	r0, [pc, #200]	@ (800e62c <pbuf_free+0x10c>)
 800e564:	f003 f9ec 	bl	8011940 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	7b9b      	ldrb	r3, [r3, #14]
 800e56c:	3b01      	subs	r3, #1
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	739a      	strb	r2, [r3, #14]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7b9b      	ldrb	r3, [r3, #14]
 800e578:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e57a:	69b8      	ldr	r0, [r7, #24]
 800e57c:	f003 f8d0 	bl	8011720 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d143      	bne.n	800e60e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	7b1b      	ldrb	r3, [r3, #12]
 800e590:	f003 030f 	and.w	r3, r3, #15
 800e594:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	7b5b      	ldrb	r3, [r3, #13]
 800e59a:	f003 0302 	and.w	r3, r3, #2
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d011      	beq.n	800e5c6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <pbuf_free+0x9c>
 800e5ae:	4b1d      	ldr	r3, [pc, #116]	@ (800e624 <pbuf_free+0x104>)
 800e5b0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e5b4:	491f      	ldr	r1, [pc, #124]	@ (800e634 <pbuf_free+0x114>)
 800e5b6:	481d      	ldr	r0, [pc, #116]	@ (800e62c <pbuf_free+0x10c>)
 800e5b8:	f003 f9c2 	bl	8011940 <iprintf>
        pc->custom_free_function(p);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	4798      	blx	r3
 800e5c4:	e01d      	b.n	800e602 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d104      	bne.n	800e5d6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e5cc:	6879      	ldr	r1, [r7, #4]
 800e5ce:	2009      	movs	r0, #9
 800e5d0:	f7ff f986 	bl	800d8e0 <memp_free>
 800e5d4:	e015      	b.n	800e602 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d104      	bne.n	800e5e6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e5dc:	6879      	ldr	r1, [r7, #4]
 800e5de:	2008      	movs	r0, #8
 800e5e0:	f7ff f97e 	bl	800d8e0 <memp_free>
 800e5e4:	e00d      	b.n	800e602 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e5e6:	7bfb      	ldrb	r3, [r7, #15]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d103      	bne.n	800e5f4 <pbuf_free+0xd4>
          mem_free(p);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7fe fdb9 	bl	800d164 <mem_free>
 800e5f2:	e006      	b.n	800e602 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800e624 <pbuf_free+0x104>)
 800e5f6:	f240 320f 	movw	r2, #783	@ 0x30f
 800e5fa:	490f      	ldr	r1, [pc, #60]	@ (800e638 <pbuf_free+0x118>)
 800e5fc:	480b      	ldr	r0, [pc, #44]	@ (800e62c <pbuf_free+0x10c>)
 800e5fe:	f003 f99f 	bl	8011940 <iprintf>
        }
      }
      count++;
 800e602:	7ffb      	ldrb	r3, [r7, #31]
 800e604:	3301      	adds	r3, #1
 800e606:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	607b      	str	r3, [r7, #4]
 800e60c:	e001      	b.n	800e612 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e60e:	2300      	movs	r3, #0
 800e610:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d199      	bne.n	800e54c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e618:	7ffb      	ldrb	r3, [r7, #31]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3720      	adds	r7, #32
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	08012f14 	.word	0x08012f14
 800e628:	08013078 	.word	0x08013078
 800e62c:	08012f74 	.word	0x08012f74
 800e630:	080130a4 	.word	0x080130a4
 800e634:	080130bc 	.word	0x080130bc
 800e638:	080130e0 	.word	0x080130e0

0800e63c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e644:	2300      	movs	r3, #0
 800e646:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e648:	e005      	b.n	800e656 <pbuf_clen+0x1a>
    ++len;
 800e64a:	89fb      	ldrh	r3, [r7, #14]
 800e64c:	3301      	adds	r3, #1
 800e64e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1f6      	bne.n	800e64a <pbuf_clen+0xe>
  }
  return len;
 800e65c:	89fb      	ldrh	r3, [r7, #14]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
	...

0800e66c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d016      	beq.n	800e6a8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e67a:	f003 f843 	bl	8011704 <sys_arch_protect>
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	7b9b      	ldrb	r3, [r3, #14]
 800e684:	3301      	adds	r3, #1
 800e686:	b2da      	uxtb	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	739a      	strb	r2, [r3, #14]
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f003 f847 	bl	8011720 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	7b9b      	ldrb	r3, [r3, #14]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d106      	bne.n	800e6a8 <pbuf_ref+0x3c>
 800e69a:	4b05      	ldr	r3, [pc, #20]	@ (800e6b0 <pbuf_ref+0x44>)
 800e69c:	f240 3242 	movw	r2, #834	@ 0x342
 800e6a0:	4904      	ldr	r1, [pc, #16]	@ (800e6b4 <pbuf_ref+0x48>)
 800e6a2:	4805      	ldr	r0, [pc, #20]	@ (800e6b8 <pbuf_ref+0x4c>)
 800e6a4:	f003 f94c 	bl	8011940 <iprintf>
  }
}
 800e6a8:	bf00      	nop
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	08012f14 	.word	0x08012f14
 800e6b4:	080130f4 	.word	0x080130f4
 800e6b8:	08012f74 	.word	0x08012f74

0800e6bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <pbuf_cat+0x16>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d107      	bne.n	800e6e2 <pbuf_cat+0x26>
 800e6d2:	4b20      	ldr	r3, [pc, #128]	@ (800e754 <pbuf_cat+0x98>)
 800e6d4:	f240 3259 	movw	r2, #857	@ 0x359
 800e6d8:	491f      	ldr	r1, [pc, #124]	@ (800e758 <pbuf_cat+0x9c>)
 800e6da:	4820      	ldr	r0, [pc, #128]	@ (800e75c <pbuf_cat+0xa0>)
 800e6dc:	f003 f930 	bl	8011940 <iprintf>
 800e6e0:	e034      	b.n	800e74c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	60fb      	str	r3, [r7, #12]
 800e6e6:	e00a      	b.n	800e6fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	891a      	ldrh	r2, [r3, #8]
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	891b      	ldrh	r3, [r3, #8]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1f0      	bne.n	800e6e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	891a      	ldrh	r2, [r3, #8]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	895b      	ldrh	r3, [r3, #10]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d006      	beq.n	800e720 <pbuf_cat+0x64>
 800e712:	4b10      	ldr	r3, [pc, #64]	@ (800e754 <pbuf_cat+0x98>)
 800e714:	f240 3262 	movw	r2, #866	@ 0x362
 800e718:	4911      	ldr	r1, [pc, #68]	@ (800e760 <pbuf_cat+0xa4>)
 800e71a:	4810      	ldr	r0, [pc, #64]	@ (800e75c <pbuf_cat+0xa0>)
 800e71c:	f003 f910 	bl	8011940 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d006      	beq.n	800e736 <pbuf_cat+0x7a>
 800e728:	4b0a      	ldr	r3, [pc, #40]	@ (800e754 <pbuf_cat+0x98>)
 800e72a:	f240 3263 	movw	r2, #867	@ 0x363
 800e72e:	490d      	ldr	r1, [pc, #52]	@ (800e764 <pbuf_cat+0xa8>)
 800e730:	480a      	ldr	r0, [pc, #40]	@ (800e75c <pbuf_cat+0xa0>)
 800e732:	f003 f905 	bl	8011940 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	891a      	ldrh	r2, [r3, #8]
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	891b      	ldrh	r3, [r3, #8]
 800e73e:	4413      	add	r3, r2
 800e740:	b29a      	uxth	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e74c:	3710      	adds	r7, #16
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	08012f14 	.word	0x08012f14
 800e758:	08013108 	.word	0x08013108
 800e75c:	08012f74 	.word	0x08012f74
 800e760:	08013140 	.word	0x08013140
 800e764:	08013170 	.word	0x08013170

0800e768 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e772:	2300      	movs	r3, #0
 800e774:	617b      	str	r3, [r7, #20]
 800e776:	2300      	movs	r3, #0
 800e778:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d008      	beq.n	800e792 <pbuf_copy+0x2a>
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d005      	beq.n	800e792 <pbuf_copy+0x2a>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	891a      	ldrh	r2, [r3, #8]
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	891b      	ldrh	r3, [r3, #8]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d209      	bcs.n	800e7a6 <pbuf_copy+0x3e>
 800e792:	4b57      	ldr	r3, [pc, #348]	@ (800e8f0 <pbuf_copy+0x188>)
 800e794:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e798:	4956      	ldr	r1, [pc, #344]	@ (800e8f4 <pbuf_copy+0x18c>)
 800e79a:	4857      	ldr	r0, [pc, #348]	@ (800e8f8 <pbuf_copy+0x190>)
 800e79c:	f003 f8d0 	bl	8011940 <iprintf>
 800e7a0:	f06f 030f 	mvn.w	r3, #15
 800e7a4:	e09f      	b.n	800e8e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	895b      	ldrh	r3, [r3, #10]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	1ad2      	subs	r2, r2, r3
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	895b      	ldrh	r3, [r3, #10]
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	1acb      	subs	r3, r1, r3
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d306      	bcc.n	800e7cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	895b      	ldrh	r3, [r3, #10]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	1ad3      	subs	r3, r2, r3
 800e7c8:	60fb      	str	r3, [r7, #12]
 800e7ca:	e005      	b.n	800e7d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	895b      	ldrh	r3, [r3, #10]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	18d0      	adds	r0, r2, r3
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	685a      	ldr	r2, [r3, #4]
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	4413      	add	r3, r2
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	f003 f9d9 	bl	8011ba2 <memcpy>
    offset_to += len;
 800e7f0:	697a      	ldr	r2, [r7, #20]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e7f8:	693a      	ldr	r2, [r7, #16]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	895b      	ldrh	r3, [r3, #10]
 800e804:	461a      	mov	r2, r3
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	4293      	cmp	r3, r2
 800e80a:	d906      	bls.n	800e81a <pbuf_copy+0xb2>
 800e80c:	4b38      	ldr	r3, [pc, #224]	@ (800e8f0 <pbuf_copy+0x188>)
 800e80e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e812:	493a      	ldr	r1, [pc, #232]	@ (800e8fc <pbuf_copy+0x194>)
 800e814:	4838      	ldr	r0, [pc, #224]	@ (800e8f8 <pbuf_copy+0x190>)
 800e816:	f003 f893 	bl	8011940 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	895b      	ldrh	r3, [r3, #10]
 800e81e:	461a      	mov	r2, r3
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	4293      	cmp	r3, r2
 800e824:	d906      	bls.n	800e834 <pbuf_copy+0xcc>
 800e826:	4b32      	ldr	r3, [pc, #200]	@ (800e8f0 <pbuf_copy+0x188>)
 800e828:	f240 32da 	movw	r2, #986	@ 0x3da
 800e82c:	4934      	ldr	r1, [pc, #208]	@ (800e900 <pbuf_copy+0x198>)
 800e82e:	4832      	ldr	r0, [pc, #200]	@ (800e8f8 <pbuf_copy+0x190>)
 800e830:	f003 f886 	bl	8011940 <iprintf>
    if (offset_from >= p_from->len) {
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	895b      	ldrh	r3, [r3, #10]
 800e838:	461a      	mov	r2, r3
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d304      	bcc.n	800e84a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	895b      	ldrh	r3, [r3, #10]
 800e84e:	461a      	mov	r2, r3
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	4293      	cmp	r3, r2
 800e854:	d114      	bne.n	800e880 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d10c      	bne.n	800e880 <pbuf_copy+0x118>
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d009      	beq.n	800e880 <pbuf_copy+0x118>
 800e86c:	4b20      	ldr	r3, [pc, #128]	@ (800e8f0 <pbuf_copy+0x188>)
 800e86e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e872:	4924      	ldr	r1, [pc, #144]	@ (800e904 <pbuf_copy+0x19c>)
 800e874:	4820      	ldr	r0, [pc, #128]	@ (800e8f8 <pbuf_copy+0x190>)
 800e876:	f003 f863 	bl	8011940 <iprintf>
 800e87a:	f06f 030f 	mvn.w	r3, #15
 800e87e:	e032      	b.n	800e8e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d013      	beq.n	800e8ae <pbuf_copy+0x146>
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	895a      	ldrh	r2, [r3, #10]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	891b      	ldrh	r3, [r3, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d10d      	bne.n	800e8ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d009      	beq.n	800e8ae <pbuf_copy+0x146>
 800e89a:	4b15      	ldr	r3, [pc, #84]	@ (800e8f0 <pbuf_copy+0x188>)
 800e89c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e8a0:	4919      	ldr	r1, [pc, #100]	@ (800e908 <pbuf_copy+0x1a0>)
 800e8a2:	4815      	ldr	r0, [pc, #84]	@ (800e8f8 <pbuf_copy+0x190>)
 800e8a4:	f003 f84c 	bl	8011940 <iprintf>
 800e8a8:	f06f 0305 	mvn.w	r3, #5
 800e8ac:	e01b      	b.n	800e8e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d013      	beq.n	800e8dc <pbuf_copy+0x174>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	895a      	ldrh	r2, [r3, #10]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	891b      	ldrh	r3, [r3, #8]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d10d      	bne.n	800e8dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d009      	beq.n	800e8dc <pbuf_copy+0x174>
 800e8c8:	4b09      	ldr	r3, [pc, #36]	@ (800e8f0 <pbuf_copy+0x188>)
 800e8ca:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e8ce:	490e      	ldr	r1, [pc, #56]	@ (800e908 <pbuf_copy+0x1a0>)
 800e8d0:	4809      	ldr	r0, [pc, #36]	@ (800e8f8 <pbuf_copy+0x190>)
 800e8d2:	f003 f835 	bl	8011940 <iprintf>
 800e8d6:	f06f 0305 	mvn.w	r3, #5
 800e8da:	e004      	b.n	800e8e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f47f af61 	bne.w	800e7a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e8e4:	2300      	movs	r3, #0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	08012f14 	.word	0x08012f14
 800e8f4:	080131bc 	.word	0x080131bc
 800e8f8:	08012f74 	.word	0x08012f74
 800e8fc:	080131ec 	.word	0x080131ec
 800e900:	08013204 	.word	0x08013204
 800e904:	08013220 	.word	0x08013220
 800e908:	08013230 	.word	0x08013230

0800e90c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	603a      	str	r2, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
 800e918:	460b      	mov	r3, r1
 800e91a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	8919      	ldrh	r1, [r3, #8]
 800e920:	88ba      	ldrh	r2, [r7, #4]
 800e922:	79fb      	ldrb	r3, [r7, #7]
 800e924:	4618      	mov	r0, r3
 800e926:	f7ff fb17 	bl	800df58 <pbuf_alloc>
 800e92a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d101      	bne.n	800e936 <pbuf_clone+0x2a>
    return NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	e011      	b.n	800e95a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7ff ff15 	bl	800e768 <pbuf_copy>
 800e93e:	4603      	mov	r3, r0
 800e940:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e942:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d006      	beq.n	800e958 <pbuf_clone+0x4c>
 800e94a:	4b06      	ldr	r3, [pc, #24]	@ (800e964 <pbuf_clone+0x58>)
 800e94c:	f240 5224 	movw	r2, #1316	@ 0x524
 800e950:	4905      	ldr	r1, [pc, #20]	@ (800e968 <pbuf_clone+0x5c>)
 800e952:	4806      	ldr	r0, [pc, #24]	@ (800e96c <pbuf_clone+0x60>)
 800e954:	f002 fff4 	bl	8011940 <iprintf>
  return q;
 800e958:	68fb      	ldr	r3, [r7, #12]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	08012f14 	.word	0x08012f14
 800e968:	08013388 	.word	0x08013388
 800e96c:	08012f74 	.word	0x08012f74

0800e970 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e97c:	2007      	movs	r0, #7
 800e97e:	f7fe ff39 	bl	800d7f4 <memp_malloc>
 800e982:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d109      	bne.n	800e99e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d151      	bne.n	800ea34 <sys_timeout_abs+0xc4>
 800e990:	4b2a      	ldr	r3, [pc, #168]	@ (800ea3c <sys_timeout_abs+0xcc>)
 800e992:	22be      	movs	r2, #190	@ 0xbe
 800e994:	492a      	ldr	r1, [pc, #168]	@ (800ea40 <sys_timeout_abs+0xd0>)
 800e996:	482b      	ldr	r0, [pc, #172]	@ (800ea44 <sys_timeout_abs+0xd4>)
 800e998:	f002 ffd2 	bl	8011940 <iprintf>
    return;
 800e99c:	e04a      	b.n	800ea34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e9b6:	4b24      	ldr	r3, [pc, #144]	@ (800ea48 <sys_timeout_abs+0xd8>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d103      	bne.n	800e9c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e9be:	4a22      	ldr	r2, [pc, #136]	@ (800ea48 <sys_timeout_abs+0xd8>)
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	6013      	str	r3, [r2, #0]
    return;
 800e9c4:	e037      	b.n	800ea36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	4b1f      	ldr	r3, [pc, #124]	@ (800ea48 <sys_timeout_abs+0xd8>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	0fdb      	lsrs	r3, r3, #31
 800e9d4:	f003 0301 	and.w	r3, r3, #1
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d007      	beq.n	800e9ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ea48 <sys_timeout_abs+0xd8>)
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e9e6:	4a18      	ldr	r2, [pc, #96]	@ (800ea48 <sys_timeout_abs+0xd8>)
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	6013      	str	r3, [r2, #0]
 800e9ec:	e023      	b.n	800ea36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e9ee:	4b16      	ldr	r3, [pc, #88]	@ (800ea48 <sys_timeout_abs+0xd8>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	e01a      	b.n	800ea2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00b      	beq.n	800ea16 <sys_timeout_abs+0xa6>
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	0fdb      	lsrs	r3, r3, #31
 800ea0c:	f003 0301 	and.w	r3, r3, #1
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d007      	beq.n	800ea26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	693a      	ldr	r2, [r7, #16]
 800ea22:	601a      	str	r2, [r3, #0]
        break;
 800ea24:	e007      	b.n	800ea36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1e1      	bne.n	800e9f6 <sys_timeout_abs+0x86>
 800ea32:	e000      	b.n	800ea36 <sys_timeout_abs+0xc6>
    return;
 800ea34:	bf00      	nop
      }
    }
  }
}
 800ea36:	3718      	adds	r7, #24
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	0801339c 	.word	0x0801339c
 800ea40:	080133d0 	.word	0x080133d0
 800ea44:	08013410 	.word	0x08013410
 800ea48:	24012724 	.word	0x24012724

0800ea4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b086      	sub	sp, #24
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	4798      	blx	r3

  now = sys_now();
 800ea5e:	f7f9 ff4d 	bl	80088fc <sys_now>
 800ea62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	4b0f      	ldr	r3, [pc, #60]	@ (800eaa8 <lwip_cyclic_timer+0x5c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	1ad3      	subs	r3, r2, r3
 800ea76:	0fdb      	lsrs	r3, r3, #31
 800ea78:	f003 0301 	and.w	r3, r3, #1
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d009      	beq.n	800ea96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	4413      	add	r3, r2
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	4907      	ldr	r1, [pc, #28]	@ (800eaac <lwip_cyclic_timer+0x60>)
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff ff6e 	bl	800e970 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ea94:	e004      	b.n	800eaa0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	4904      	ldr	r1, [pc, #16]	@ (800eaac <lwip_cyclic_timer+0x60>)
 800ea9a:	68f8      	ldr	r0, [r7, #12]
 800ea9c:	f7ff ff68 	bl	800e970 <sys_timeout_abs>
}
 800eaa0:	bf00      	nop
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	24012728 	.word	0x24012728
 800eaac:	0800ea4d 	.word	0x0800ea4d

0800eab0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eab6:	2300      	movs	r3, #0
 800eab8:	607b      	str	r3, [r7, #4]
 800eaba:	e00e      	b.n	800eada <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800eabc:	4a0b      	ldr	r2, [pc, #44]	@ (800eaec <sys_timeouts_init+0x3c>)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	4a08      	ldr	r2, [pc, #32]	@ (800eaec <sys_timeouts_init+0x3c>)
 800eaca:	4413      	add	r3, r2
 800eacc:	461a      	mov	r2, r3
 800eace:	4908      	ldr	r1, [pc, #32]	@ (800eaf0 <sys_timeouts_init+0x40>)
 800ead0:	f000 f810 	bl	800eaf4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3301      	adds	r3, #1
 800ead8:	607b      	str	r3, [r7, #4]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d9ed      	bls.n	800eabc <sys_timeouts_init+0xc>
  }
}
 800eae0:	bf00      	nop
 800eae2:	bf00      	nop
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	08013fb4 	.word	0x08013fb4
 800eaf0:	0800ea4d 	.word	0x0800ea4d

0800eaf4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb06:	d306      	bcc.n	800eb16 <sys_timeout+0x22>
 800eb08:	4b0a      	ldr	r3, [pc, #40]	@ (800eb34 <sys_timeout+0x40>)
 800eb0a:	f240 1229 	movw	r2, #297	@ 0x129
 800eb0e:	490a      	ldr	r1, [pc, #40]	@ (800eb38 <sys_timeout+0x44>)
 800eb10:	480a      	ldr	r0, [pc, #40]	@ (800eb3c <sys_timeout+0x48>)
 800eb12:	f002 ff15 	bl	8011940 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eb16:	f7f9 fef1 	bl	80088fc <sys_now>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	4413      	add	r3, r2
 800eb20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	68b9      	ldr	r1, [r7, #8]
 800eb26:	6978      	ldr	r0, [r7, #20]
 800eb28:	f7ff ff22 	bl	800e970 <sys_timeout_abs>
#endif
}
 800eb2c:	bf00      	nop
 800eb2e:	3718      	adds	r7, #24
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	0801339c 	.word	0x0801339c
 800eb38:	08013438 	.word	0x08013438
 800eb3c:	08013410 	.word	0x08013410

0800eb40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800eb46:	f7f9 fed9 	bl	80088fc <sys_now>
 800eb4a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800eb4c:	4b17      	ldr	r3, [pc, #92]	@ (800ebac <sys_check_timeouts+0x6c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d022      	beq.n	800eb9e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	0fdb      	lsrs	r3, r3, #31
 800eb62:	f003 0301 	and.w	r3, r3, #1
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d11a      	bne.n	800eba2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a0e      	ldr	r2, [pc, #56]	@ (800ebac <sys_check_timeouts+0x6c>)
 800eb72:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	4a0a      	ldr	r2, [pc, #40]	@ (800ebb0 <sys_check_timeouts+0x70>)
 800eb86:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eb88:	68b9      	ldr	r1, [r7, #8]
 800eb8a:	2007      	movs	r0, #7
 800eb8c:	f7fe fea8 	bl	800d8e0 <memp_free>
    if (handler != NULL) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d0da      	beq.n	800eb4c <sys_check_timeouts+0xc>
      handler(arg);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6838      	ldr	r0, [r7, #0]
 800eb9a:	4798      	blx	r3
  do {
 800eb9c:	e7d6      	b.n	800eb4c <sys_check_timeouts+0xc>
      return;
 800eb9e:	bf00      	nop
 800eba0:	e000      	b.n	800eba4 <sys_check_timeouts+0x64>
      return;
 800eba2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	24012724 	.word	0x24012724
 800ebb0:	24012728 	.word	0x24012728

0800ebb4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ebba:	4b16      	ldr	r3, [pc, #88]	@ (800ec14 <sys_timeouts_sleeptime+0x60>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d102      	bne.n	800ebc8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ebc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc6:	e020      	b.n	800ec0a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800ebc8:	f7f9 fe98 	bl	80088fc <sys_now>
 800ebcc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ebce:	4b11      	ldr	r3, [pc, #68]	@ (800ec14 <sys_timeouts_sleeptime+0x60>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	1ad3      	subs	r3, r2, r3
 800ebd8:	0fdb      	lsrs	r3, r3, #31
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <sys_timeouts_sleeptime+0x34>
    return 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	e010      	b.n	800ec0a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec14 <sys_timeouts_sleeptime+0x60>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	da06      	bge.n	800ec08 <sys_timeouts_sleeptime+0x54>
 800ebfa:	4b07      	ldr	r3, [pc, #28]	@ (800ec18 <sys_timeouts_sleeptime+0x64>)
 800ebfc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ec00:	4906      	ldr	r1, [pc, #24]	@ (800ec1c <sys_timeouts_sleeptime+0x68>)
 800ec02:	4807      	ldr	r0, [pc, #28]	@ (800ec20 <sys_timeouts_sleeptime+0x6c>)
 800ec04:	f002 fe9c 	bl	8011940 <iprintf>
    return ret;
 800ec08:	683b      	ldr	r3, [r7, #0]
  }
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	24012724 	.word	0x24012724
 800ec18:	0801339c 	.word	0x0801339c
 800ec1c:	08013470 	.word	0x08013470
 800ec20:	08013410 	.word	0x08013410

0800ec24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ec28:	f002 fd8a 	bl	8011740 <rand>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	4b01      	ldr	r3, [pc, #4]	@ (800ec44 <udp_init+0x20>)
 800ec3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ec40:	bf00      	nop
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	24000028 	.word	0x24000028

0800ec48 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	4613      	mov	r3, r2
 800ec54:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d105      	bne.n	800ec68 <udp_input_local_match+0x20>
 800ec5c:	4b27      	ldr	r3, [pc, #156]	@ (800ecfc <udp_input_local_match+0xb4>)
 800ec5e:	2287      	movs	r2, #135	@ 0x87
 800ec60:	4927      	ldr	r1, [pc, #156]	@ (800ed00 <udp_input_local_match+0xb8>)
 800ec62:	4828      	ldr	r0, [pc, #160]	@ (800ed04 <udp_input_local_match+0xbc>)
 800ec64:	f002 fe6c 	bl	8011940 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d105      	bne.n	800ec7a <udp_input_local_match+0x32>
 800ec6e:	4b23      	ldr	r3, [pc, #140]	@ (800ecfc <udp_input_local_match+0xb4>)
 800ec70:	2288      	movs	r2, #136	@ 0x88
 800ec72:	4925      	ldr	r1, [pc, #148]	@ (800ed08 <udp_input_local_match+0xc0>)
 800ec74:	4823      	ldr	r0, [pc, #140]	@ (800ed04 <udp_input_local_match+0xbc>)
 800ec76:	f002 fe63 	bl	8011940 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	7a1b      	ldrb	r3, [r3, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00b      	beq.n	800ec9a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	7a1a      	ldrb	r2, [r3, #8]
 800ec86:	4b21      	ldr	r3, [pc, #132]	@ (800ed0c <udp_input_local_match+0xc4>)
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec8e:	3301      	adds	r3, #1
 800ec90:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d001      	beq.n	800ec9a <udp_input_local_match+0x52>
    return 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	e02b      	b.n	800ecf2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d018      	beq.n	800ecd2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d013      	beq.n	800ecce <udp_input_local_match+0x86>
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00f      	beq.n	800ecce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ecae:	4b17      	ldr	r3, [pc, #92]	@ (800ed0c <udp_input_local_match+0xc4>)
 800ecb0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb6:	d00a      	beq.n	800ecce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681a      	ldr	r2, [r3, #0]
 800ecbc:	4b13      	ldr	r3, [pc, #76]	@ (800ed0c <udp_input_local_match+0xc4>)
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	405a      	eors	r2, r3
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	3308      	adds	r3, #8
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d110      	bne.n	800ecf0 <udp_input_local_match+0xa8>
          return 1;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e00f      	b.n	800ecf2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d009      	beq.n	800ecec <udp_input_local_match+0xa4>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d005      	beq.n	800ecec <udp_input_local_match+0xa4>
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	4b09      	ldr	r3, [pc, #36]	@ (800ed0c <udp_input_local_match+0xc4>)
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d101      	bne.n	800ecf0 <udp_input_local_match+0xa8>
        return 1;
 800ecec:	2301      	movs	r3, #1
 800ecee:	e000      	b.n	800ecf2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	08013484 	.word	0x08013484
 800ed00:	080134b4 	.word	0x080134b4
 800ed04:	080134d8 	.word	0x080134d8
 800ed08:	08013500 	.word	0x08013500
 800ed0c:	2400c198 	.word	0x2400c198

0800ed10 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ed10:	b590      	push	{r4, r7, lr}
 800ed12:	b08d      	sub	sp, #52	@ 0x34
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d105      	bne.n	800ed30 <udp_input+0x20>
 800ed24:	4b7c      	ldr	r3, [pc, #496]	@ (800ef18 <udp_input+0x208>)
 800ed26:	22cf      	movs	r2, #207	@ 0xcf
 800ed28:	497c      	ldr	r1, [pc, #496]	@ (800ef1c <udp_input+0x20c>)
 800ed2a:	487d      	ldr	r0, [pc, #500]	@ (800ef20 <udp_input+0x210>)
 800ed2c:	f002 fe08 	bl	8011940 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d105      	bne.n	800ed42 <udp_input+0x32>
 800ed36:	4b78      	ldr	r3, [pc, #480]	@ (800ef18 <udp_input+0x208>)
 800ed38:	22d0      	movs	r2, #208	@ 0xd0
 800ed3a:	497a      	ldr	r1, [pc, #488]	@ (800ef24 <udp_input+0x214>)
 800ed3c:	4878      	ldr	r0, [pc, #480]	@ (800ef20 <udp_input+0x210>)
 800ed3e:	f002 fdff 	bl	8011940 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	895b      	ldrh	r3, [r3, #10]
 800ed46:	2b07      	cmp	r3, #7
 800ed48:	d803      	bhi.n	800ed52 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7ff fbe8 	bl	800e520 <pbuf_free>
    goto end;
 800ed50:	e0de      	b.n	800ef10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ed58:	4b73      	ldr	r3, [pc, #460]	@ (800ef28 <udp_input+0x218>)
 800ed5a:	695b      	ldr	r3, [r3, #20]
 800ed5c:	4a72      	ldr	r2, [pc, #456]	@ (800ef28 <udp_input+0x218>)
 800ed5e:	6812      	ldr	r2, [r2, #0]
 800ed60:	4611      	mov	r1, r2
 800ed62:	4618      	mov	r0, r3
 800ed64:	f001 fca4 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	881b      	ldrh	r3, [r3, #0]
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fd ffba 	bl	800ccec <lwip_htons>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	885b      	ldrh	r3, [r3, #2]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fd ffb2 	bl	800ccec <lwip_htons>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ed90:	2300      	movs	r3, #0
 800ed92:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed98:	4b64      	ldr	r3, [pc, #400]	@ (800ef2c <udp_input+0x21c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed9e:	e054      	b.n	800ee4a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800eda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eda2:	8a5b      	ldrh	r3, [r3, #18]
 800eda4:	89fa      	ldrh	r2, [r7, #14]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d14a      	bne.n	800ee40 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800edaa:	7cfb      	ldrb	r3, [r7, #19]
 800edac:	461a      	mov	r2, r3
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800edb2:	f7ff ff49 	bl	800ec48 <udp_input_local_match>
 800edb6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d041      	beq.n	800ee40 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800edbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edbe:	7c1b      	ldrb	r3, [r3, #16]
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d11d      	bne.n	800ee04 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800edce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd0:	61fb      	str	r3, [r7, #28]
 800edd2:	e017      	b.n	800ee04 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800edd4:	7cfb      	ldrb	r3, [r7, #19]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d014      	beq.n	800ee04 <udp_input+0xf4>
 800edda:	4b53      	ldr	r3, [pc, #332]	@ (800ef28 <udp_input+0x218>)
 800eddc:	695b      	ldr	r3, [r3, #20]
 800edde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede2:	d10f      	bne.n	800ee04 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	3304      	adds	r3, #4
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d008      	beq.n	800ee04 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800edf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	3304      	adds	r3, #4
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d101      	bne.n	800ee04 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ee00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee02:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ee04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee06:	8a9b      	ldrh	r3, [r3, #20]
 800ee08:	8a3a      	ldrh	r2, [r7, #16]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d118      	bne.n	800ee40 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee10:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d005      	beq.n	800ee22 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ee16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	4b43      	ldr	r3, [pc, #268]	@ (800ef28 <udp_input+0x218>)
 800ee1c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d10e      	bne.n	800ee40 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ee22:	6a3b      	ldr	r3, [r7, #32]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d014      	beq.n	800ee52 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ee28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee2a:	68da      	ldr	r2, [r3, #12]
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ee30:	4b3e      	ldr	r3, [pc, #248]	@ (800ef2c <udp_input+0x21c>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee36:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ee38:	4a3c      	ldr	r2, [pc, #240]	@ (800ef2c <udp_input+0x21c>)
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ee3e:	e008      	b.n	800ee52 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ee40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee42:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d1a7      	bne.n	800eda0 <udp_input+0x90>
 800ee50:	e000      	b.n	800ee54 <udp_input+0x144>
        break;
 800ee52:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ee54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d101      	bne.n	800ee5e <udp_input+0x14e>
    pcb = uncon_pcb;
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d002      	beq.n	800ee6a <udp_input+0x15a>
    for_us = 1;
 800ee64:	2301      	movs	r3, #1
 800ee66:	76fb      	strb	r3, [r7, #27]
 800ee68:	e00a      	b.n	800ee80 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	4b2d      	ldr	r3, [pc, #180]	@ (800ef28 <udp_input+0x218>)
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	bf0c      	ite	eq
 800ee78:	2301      	moveq	r3, #1
 800ee7a:	2300      	movne	r3, #0
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ee80:	7efb      	ldrb	r3, [r7, #27]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d041      	beq.n	800ef0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ee86:	2108      	movs	r1, #8
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff fac3 	bl	800e414 <pbuf_remove_header>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ee94:	4b20      	ldr	r3, [pc, #128]	@ (800ef18 <udp_input+0x208>)
 800ee96:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ee9a:	4925      	ldr	r1, [pc, #148]	@ (800ef30 <udp_input+0x220>)
 800ee9c:	4820      	ldr	r0, [pc, #128]	@ (800ef20 <udp_input+0x210>)
 800ee9e:	f002 fd4f 	bl	8011940 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff fb3c 	bl	800e520 <pbuf_free>
      goto end;
 800eea8:	e032      	b.n	800ef10 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d012      	beq.n	800eed6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00a      	beq.n	800eece <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	699c      	ldr	r4, [r3, #24]
 800eebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eebe:	69d8      	ldr	r0, [r3, #28]
 800eec0:	8a3b      	ldrh	r3, [r7, #16]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	4b1b      	ldr	r3, [pc, #108]	@ (800ef34 <udp_input+0x224>)
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eeca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800eecc:	e021      	b.n	800ef12 <udp_input+0x202>
        pbuf_free(p);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7ff fb26 	bl	800e520 <pbuf_free>
        goto end;
 800eed4:	e01c      	b.n	800ef10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800eed6:	7cfb      	ldrb	r3, [r7, #19]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d112      	bne.n	800ef02 <udp_input+0x1f2>
 800eedc:	4b12      	ldr	r3, [pc, #72]	@ (800ef28 <udp_input+0x218>)
 800eede:	695b      	ldr	r3, [r3, #20]
 800eee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eee4:	2be0      	cmp	r3, #224	@ 0xe0
 800eee6:	d00c      	beq.n	800ef02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800eee8:	4b0f      	ldr	r3, [pc, #60]	@ (800ef28 <udp_input+0x218>)
 800eeea:	899b      	ldrh	r3, [r3, #12]
 800eeec:	3308      	adds	r3, #8
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	b21b      	sxth	r3, r3
 800eef2:	4619      	mov	r1, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fb00 	bl	800e4fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800eefa:	2103      	movs	r1, #3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 f8b7 	bl	8010070 <icmp_dest_unreach>
      pbuf_free(p);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7ff fb0c 	bl	800e520 <pbuf_free>
  return;
 800ef08:	e003      	b.n	800ef12 <udp_input+0x202>
    pbuf_free(p);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f7ff fb08 	bl	800e520 <pbuf_free>
  return;
 800ef10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ef12:	372c      	adds	r7, #44	@ 0x2c
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd90      	pop	{r4, r7, pc}
 800ef18:	08013484 	.word	0x08013484
 800ef1c:	08013528 	.word	0x08013528
 800ef20:	080134d8 	.word	0x080134d8
 800ef24:	08013540 	.word	0x08013540
 800ef28:	2400c198 	.word	0x2400c198
 800ef2c:	2401272c 	.word	0x2401272c
 800ef30:	0801355c 	.word	0x0801355c
 800ef34:	2400c1a8 	.word	0x2400c1a8

0800ef38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d01e      	beq.n	800ef86 <udp_netif_ip_addr_changed+0x4e>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d01a      	beq.n	800ef86 <udp_netif_ip_addr_changed+0x4e>
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d017      	beq.n	800ef86 <udp_netif_ip_addr_changed+0x4e>
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d013      	beq.n	800ef86 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef94 <udp_netif_ip_addr_changed+0x5c>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	60fb      	str	r3, [r7, #12]
 800ef64:	e00c      	b.n	800ef80 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d103      	bne.n	800ef7a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1ef      	bne.n	800ef66 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ef86:	bf00      	nop
 800ef88:	3714      	adds	r7, #20
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	2401272c 	.word	0x2401272c

0800ef98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800efa0:	4915      	ldr	r1, [pc, #84]	@ (800eff8 <etharp_free_entry+0x60>)
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	4613      	mov	r3, r2
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	4413      	add	r3, r2
 800efaa:	00db      	lsls	r3, r3, #3
 800efac:	440b      	add	r3, r1
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d013      	beq.n	800efdc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800efb4:	4910      	ldr	r1, [pc, #64]	@ (800eff8 <etharp_free_entry+0x60>)
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	4613      	mov	r3, r2
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	4413      	add	r3, r2
 800efbe:	00db      	lsls	r3, r3, #3
 800efc0:	440b      	add	r3, r1
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7ff faab 	bl	800e520 <pbuf_free>
    arp_table[i].q = NULL;
 800efca:	490b      	ldr	r1, [pc, #44]	@ (800eff8 <etharp_free_entry+0x60>)
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	4613      	mov	r3, r2
 800efd0:	005b      	lsls	r3, r3, #1
 800efd2:	4413      	add	r3, r2
 800efd4:	00db      	lsls	r3, r3, #3
 800efd6:	440b      	add	r3, r1
 800efd8:	2200      	movs	r2, #0
 800efda:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800efdc:	4906      	ldr	r1, [pc, #24]	@ (800eff8 <etharp_free_entry+0x60>)
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	4613      	mov	r3, r2
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	4413      	add	r3, r2
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	440b      	add	r3, r1
 800efea:	3314      	adds	r3, #20
 800efec:	2200      	movs	r2, #0
 800efee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800eff0:	bf00      	nop
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	24012730 	.word	0x24012730

0800effc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f002:	2300      	movs	r3, #0
 800f004:	607b      	str	r3, [r7, #4]
 800f006:	e096      	b.n	800f136 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f008:	494f      	ldr	r1, [pc, #316]	@ (800f148 <etharp_tmr+0x14c>)
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	4613      	mov	r3, r2
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	4413      	add	r3, r2
 800f012:	00db      	lsls	r3, r3, #3
 800f014:	440b      	add	r3, r1
 800f016:	3314      	adds	r3, #20
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f01c:	78fb      	ldrb	r3, [r7, #3]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f000 8086 	beq.w	800f130 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f024:	4948      	ldr	r1, [pc, #288]	@ (800f148 <etharp_tmr+0x14c>)
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4613      	mov	r3, r2
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	4413      	add	r3, r2
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	440b      	add	r3, r1
 800f032:	3312      	adds	r3, #18
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	3301      	adds	r3, #1
 800f038:	b298      	uxth	r0, r3
 800f03a:	4943      	ldr	r1, [pc, #268]	@ (800f148 <etharp_tmr+0x14c>)
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	4613      	mov	r3, r2
 800f040:	005b      	lsls	r3, r3, #1
 800f042:	4413      	add	r3, r2
 800f044:	00db      	lsls	r3, r3, #3
 800f046:	440b      	add	r3, r1
 800f048:	3312      	adds	r3, #18
 800f04a:	4602      	mov	r2, r0
 800f04c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f04e:	493e      	ldr	r1, [pc, #248]	@ (800f148 <etharp_tmr+0x14c>)
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	4613      	mov	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4413      	add	r3, r2
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	440b      	add	r3, r1
 800f05c:	3312      	adds	r3, #18
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800f064:	d215      	bcs.n	800f092 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f066:	4938      	ldr	r1, [pc, #224]	@ (800f148 <etharp_tmr+0x14c>)
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	4613      	mov	r3, r2
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	4413      	add	r3, r2
 800f070:	00db      	lsls	r3, r3, #3
 800f072:	440b      	add	r3, r1
 800f074:	3314      	adds	r3, #20
 800f076:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d10e      	bne.n	800f09a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f07c:	4932      	ldr	r1, [pc, #200]	@ (800f148 <etharp_tmr+0x14c>)
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	4613      	mov	r3, r2
 800f082:	005b      	lsls	r3, r3, #1
 800f084:	4413      	add	r3, r2
 800f086:	00db      	lsls	r3, r3, #3
 800f088:	440b      	add	r3, r1
 800f08a:	3312      	adds	r3, #18
 800f08c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f08e:	2b04      	cmp	r3, #4
 800f090:	d903      	bls.n	800f09a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f7ff ff80 	bl	800ef98 <etharp_free_entry>
 800f098:	e04a      	b.n	800f130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f09a:	492b      	ldr	r1, [pc, #172]	@ (800f148 <etharp_tmr+0x14c>)
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4413      	add	r3, r2
 800f0a4:	00db      	lsls	r3, r3, #3
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3314      	adds	r3, #20
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d10a      	bne.n	800f0c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f0b0:	4925      	ldr	r1, [pc, #148]	@ (800f148 <etharp_tmr+0x14c>)
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	4413      	add	r3, r2
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	440b      	add	r3, r1
 800f0be:	3314      	adds	r3, #20
 800f0c0:	2204      	movs	r2, #4
 800f0c2:	701a      	strb	r2, [r3, #0]
 800f0c4:	e034      	b.n	800f130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f0c6:	4920      	ldr	r1, [pc, #128]	@ (800f148 <etharp_tmr+0x14c>)
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	4413      	add	r3, r2
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	440b      	add	r3, r1
 800f0d4:	3314      	adds	r3, #20
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	2b04      	cmp	r3, #4
 800f0da:	d10a      	bne.n	800f0f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f0dc:	491a      	ldr	r1, [pc, #104]	@ (800f148 <etharp_tmr+0x14c>)
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	4413      	add	r3, r2
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	440b      	add	r3, r1
 800f0ea:	3314      	adds	r3, #20
 800f0ec:	2202      	movs	r2, #2
 800f0ee:	701a      	strb	r2, [r3, #0]
 800f0f0:	e01e      	b.n	800f130 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f0f2:	4915      	ldr	r1, [pc, #84]	@ (800f148 <etharp_tmr+0x14c>)
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	005b      	lsls	r3, r3, #1
 800f0fa:	4413      	add	r3, r2
 800f0fc:	00db      	lsls	r3, r3, #3
 800f0fe:	440b      	add	r3, r1
 800f100:	3314      	adds	r3, #20
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d113      	bne.n	800f130 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f108:	490f      	ldr	r1, [pc, #60]	@ (800f148 <etharp_tmr+0x14c>)
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	4613      	mov	r3, r2
 800f10e:	005b      	lsls	r3, r3, #1
 800f110:	4413      	add	r3, r2
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	440b      	add	r3, r1
 800f116:	3308      	adds	r3, #8
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	4613      	mov	r3, r2
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	4413      	add	r3, r2
 800f122:	00db      	lsls	r3, r3, #3
 800f124:	4a08      	ldr	r2, [pc, #32]	@ (800f148 <etharp_tmr+0x14c>)
 800f126:	4413      	add	r3, r2
 800f128:	3304      	adds	r3, #4
 800f12a:	4619      	mov	r1, r3
 800f12c:	f000 fe6e 	bl	800fe0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	3301      	adds	r3, #1
 800f134:	607b      	str	r3, [r7, #4]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2b09      	cmp	r3, #9
 800f13a:	f77f af65 	ble.w	800f008 <etharp_tmr+0xc>
      }
    }
  }
}
 800f13e:	bf00      	nop
 800f140:	bf00      	nop
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	24012730 	.word	0x24012730

0800f14c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08a      	sub	sp, #40	@ 0x28
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	460b      	mov	r3, r1
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f15a:	230a      	movs	r3, #10
 800f15c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f15e:	230a      	movs	r3, #10
 800f160:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f162:	230a      	movs	r3, #10
 800f164:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800f166:	2300      	movs	r3, #0
 800f168:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f16a:	230a      	movs	r3, #10
 800f16c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	83bb      	strh	r3, [r7, #28]
 800f172:	2300      	movs	r3, #0
 800f174:	837b      	strh	r3, [r7, #26]
 800f176:	2300      	movs	r3, #0
 800f178:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f17a:	2300      	movs	r3, #0
 800f17c:	843b      	strh	r3, [r7, #32]
 800f17e:	e0ae      	b.n	800f2de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f184:	49a6      	ldr	r1, [pc, #664]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f186:	4613      	mov	r3, r2
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	4413      	add	r3, r2
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	440b      	add	r3, r1
 800f190:	3314      	adds	r3, #20
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f196:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f19a:	2b0a      	cmp	r3, #10
 800f19c:	d105      	bne.n	800f1aa <etharp_find_entry+0x5e>
 800f19e:	7dfb      	ldrb	r3, [r7, #23]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d102      	bne.n	800f1aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f1a4:	8c3b      	ldrh	r3, [r7, #32]
 800f1a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f1a8:	e095      	b.n	800f2d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f1aa:	7dfb      	ldrb	r3, [r7, #23]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 8092 	beq.w	800f2d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f1b2:	7dfb      	ldrb	r3, [r7, #23]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d009      	beq.n	800f1cc <etharp_find_entry+0x80>
 800f1b8:	7dfb      	ldrb	r3, [r7, #23]
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d806      	bhi.n	800f1cc <etharp_find_entry+0x80>
 800f1be:	4b99      	ldr	r3, [pc, #612]	@ (800f424 <etharp_find_entry+0x2d8>)
 800f1c0:	f240 1223 	movw	r2, #291	@ 0x123
 800f1c4:	4998      	ldr	r1, [pc, #608]	@ (800f428 <etharp_find_entry+0x2dc>)
 800f1c6:	4899      	ldr	r0, [pc, #612]	@ (800f42c <etharp_find_entry+0x2e0>)
 800f1c8:	f002 fbba 	bl	8011940 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d020      	beq.n	800f214 <etharp_find_entry+0xc8>
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6819      	ldr	r1, [r3, #0]
 800f1d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1da:	4891      	ldr	r0, [pc, #580]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f1dc:	4613      	mov	r3, r2
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	4413      	add	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	4403      	add	r3, r0
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4299      	cmp	r1, r3
 800f1ec:	d112      	bne.n	800f214 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00c      	beq.n	800f20e <etharp_find_entry+0xc2>
 800f1f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1f8:	4989      	ldr	r1, [pc, #548]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	4413      	add	r3, r2
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	440b      	add	r3, r1
 800f204:	3308      	adds	r3, #8
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d102      	bne.n	800f214 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f20e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f212:	e100      	b.n	800f416 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	2b01      	cmp	r3, #1
 800f218:	d140      	bne.n	800f29c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f21a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f21e:	4980      	ldr	r1, [pc, #512]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	440b      	add	r3, r1
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d01a      	beq.n	800f266 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f234:	497a      	ldr	r1, [pc, #488]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f236:	4613      	mov	r3, r2
 800f238:	005b      	lsls	r3, r3, #1
 800f23a:	4413      	add	r3, r2
 800f23c:	00db      	lsls	r3, r3, #3
 800f23e:	440b      	add	r3, r1
 800f240:	3312      	adds	r3, #18
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	8bba      	ldrh	r2, [r7, #28]
 800f246:	429a      	cmp	r2, r3
 800f248:	d845      	bhi.n	800f2d6 <etharp_find_entry+0x18a>
            old_queue = i;
 800f24a:	8c3b      	ldrh	r3, [r7, #32]
 800f24c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f24e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f252:	4973      	ldr	r1, [pc, #460]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f254:	4613      	mov	r3, r2
 800f256:	005b      	lsls	r3, r3, #1
 800f258:	4413      	add	r3, r2
 800f25a:	00db      	lsls	r3, r3, #3
 800f25c:	440b      	add	r3, r1
 800f25e:	3312      	adds	r3, #18
 800f260:	881b      	ldrh	r3, [r3, #0]
 800f262:	83bb      	strh	r3, [r7, #28]
 800f264:	e037      	b.n	800f2d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f26a:	496d      	ldr	r1, [pc, #436]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f26c:	4613      	mov	r3, r2
 800f26e:	005b      	lsls	r3, r3, #1
 800f270:	4413      	add	r3, r2
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	440b      	add	r3, r1
 800f276:	3312      	adds	r3, #18
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	8b7a      	ldrh	r2, [r7, #26]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d82a      	bhi.n	800f2d6 <etharp_find_entry+0x18a>
            old_pending = i;
 800f280:	8c3b      	ldrh	r3, [r7, #32]
 800f282:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800f284:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f288:	4965      	ldr	r1, [pc, #404]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f28a:	4613      	mov	r3, r2
 800f28c:	005b      	lsls	r3, r3, #1
 800f28e:	4413      	add	r3, r2
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	440b      	add	r3, r1
 800f294:	3312      	adds	r3, #18
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	837b      	strh	r3, [r7, #26]
 800f29a:	e01c      	b.n	800f2d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f29c:	7dfb      	ldrb	r3, [r7, #23]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d919      	bls.n	800f2d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f2a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2a6:	495e      	ldr	r1, [pc, #376]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	005b      	lsls	r3, r3, #1
 800f2ac:	4413      	add	r3, r2
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	440b      	add	r3, r1
 800f2b2:	3312      	adds	r3, #18
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	8b3a      	ldrh	r2, [r7, #24]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d80c      	bhi.n	800f2d6 <etharp_find_entry+0x18a>
            old_stable = i;
 800f2bc:	8c3b      	ldrh	r3, [r7, #32]
 800f2be:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800f2c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2c4:	4956      	ldr	r1, [pc, #344]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	005b      	lsls	r3, r3, #1
 800f2ca:	4413      	add	r3, r2
 800f2cc:	00db      	lsls	r3, r3, #3
 800f2ce:	440b      	add	r3, r1
 800f2d0:	3312      	adds	r3, #18
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2d6:	8c3b      	ldrh	r3, [r7, #32]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	843b      	strh	r3, [r7, #32]
 800f2de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f2e2:	2b09      	cmp	r3, #9
 800f2e4:	f77f af4c 	ble.w	800f180 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f2e8:	7afb      	ldrb	r3, [r7, #11]
 800f2ea:	f003 0302 	and.w	r3, r3, #2
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d108      	bne.n	800f304 <etharp_find_entry+0x1b8>
 800f2f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f2f6:	2b0a      	cmp	r3, #10
 800f2f8:	d107      	bne.n	800f30a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f2fa:	7afb      	ldrb	r3, [r7, #11]
 800f2fc:	f003 0301 	and.w	r3, r3, #1
 800f300:	2b00      	cmp	r3, #0
 800f302:	d102      	bne.n	800f30a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f304:	f04f 33ff 	mov.w	r3, #4294967295
 800f308:	e085      	b.n	800f416 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f30a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f30e:	2b09      	cmp	r3, #9
 800f310:	dc02      	bgt.n	800f318 <etharp_find_entry+0x1cc>
    i = empty;
 800f312:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f314:	843b      	strh	r3, [r7, #32]
 800f316:	e039      	b.n	800f38c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f318:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f31c:	2b09      	cmp	r3, #9
 800f31e:	dc14      	bgt.n	800f34a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f322:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f328:	493d      	ldr	r1, [pc, #244]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f32a:	4613      	mov	r3, r2
 800f32c:	005b      	lsls	r3, r3, #1
 800f32e:	4413      	add	r3, r2
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	440b      	add	r3, r1
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d018      	beq.n	800f36c <etharp_find_entry+0x220>
 800f33a:	4b3a      	ldr	r3, [pc, #232]	@ (800f424 <etharp_find_entry+0x2d8>)
 800f33c:	f240 126d 	movw	r2, #365	@ 0x16d
 800f340:	493b      	ldr	r1, [pc, #236]	@ (800f430 <etharp_find_entry+0x2e4>)
 800f342:	483a      	ldr	r0, [pc, #232]	@ (800f42c <etharp_find_entry+0x2e0>)
 800f344:	f002 fafc 	bl	8011940 <iprintf>
 800f348:	e010      	b.n	800f36c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f34a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f34e:	2b09      	cmp	r3, #9
 800f350:	dc02      	bgt.n	800f358 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f352:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f354:	843b      	strh	r3, [r7, #32]
 800f356:	e009      	b.n	800f36c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f35c:	2b09      	cmp	r3, #9
 800f35e:	dc02      	bgt.n	800f366 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f360:	8bfb      	ldrh	r3, [r7, #30]
 800f362:	843b      	strh	r3, [r7, #32]
 800f364:	e002      	b.n	800f36c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f366:	f04f 33ff 	mov.w	r3, #4294967295
 800f36a:	e054      	b.n	800f416 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f36c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f370:	2b09      	cmp	r3, #9
 800f372:	dd06      	ble.n	800f382 <etharp_find_entry+0x236>
 800f374:	4b2b      	ldr	r3, [pc, #172]	@ (800f424 <etharp_find_entry+0x2d8>)
 800f376:	f240 127f 	movw	r2, #383	@ 0x17f
 800f37a:	492e      	ldr	r1, [pc, #184]	@ (800f434 <etharp_find_entry+0x2e8>)
 800f37c:	482b      	ldr	r0, [pc, #172]	@ (800f42c <etharp_find_entry+0x2e0>)
 800f37e:	f002 fadf 	bl	8011940 <iprintf>
    etharp_free_entry(i);
 800f382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fe06 	bl	800ef98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f38c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f390:	2b09      	cmp	r3, #9
 800f392:	dd06      	ble.n	800f3a2 <etharp_find_entry+0x256>
 800f394:	4b23      	ldr	r3, [pc, #140]	@ (800f424 <etharp_find_entry+0x2d8>)
 800f396:	f240 1283 	movw	r2, #387	@ 0x183
 800f39a:	4926      	ldr	r1, [pc, #152]	@ (800f434 <etharp_find_entry+0x2e8>)
 800f39c:	4823      	ldr	r0, [pc, #140]	@ (800f42c <etharp_find_entry+0x2e0>)
 800f39e:	f002 facf 	bl	8011940 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f3a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3a6:	491e      	ldr	r1, [pc, #120]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	440b      	add	r3, r1
 800f3b2:	3314      	adds	r3, #20
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d006      	beq.n	800f3c8 <etharp_find_entry+0x27c>
 800f3ba:	4b1a      	ldr	r3, [pc, #104]	@ (800f424 <etharp_find_entry+0x2d8>)
 800f3bc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f3c0:	491d      	ldr	r1, [pc, #116]	@ (800f438 <etharp_find_entry+0x2ec>)
 800f3c2:	481a      	ldr	r0, [pc, #104]	@ (800f42c <etharp_find_entry+0x2e0>)
 800f3c4:	f002 fabc 	bl	8011940 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f3ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6819      	ldr	r1, [r3, #0]
 800f3d6:	4812      	ldr	r0, [pc, #72]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f3d8:	4613      	mov	r3, r2
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	4413      	add	r3, r2
 800f3de:	00db      	lsls	r3, r3, #3
 800f3e0:	4403      	add	r3, r0
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f3e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3ea:	490d      	ldr	r1, [pc, #52]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f3ec:	4613      	mov	r3, r2
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	4413      	add	r3, r2
 800f3f2:	00db      	lsls	r3, r3, #3
 800f3f4:	440b      	add	r3, r1
 800f3f6:	3312      	adds	r3, #18
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f3fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f400:	4907      	ldr	r1, [pc, #28]	@ (800f420 <etharp_find_entry+0x2d4>)
 800f402:	4613      	mov	r3, r2
 800f404:	005b      	lsls	r3, r3, #1
 800f406:	4413      	add	r3, r2
 800f408:	00db      	lsls	r3, r3, #3
 800f40a:	440b      	add	r3, r1
 800f40c:	3308      	adds	r3, #8
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3728      	adds	r7, #40	@ 0x28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	24012730 	.word	0x24012730
 800f424:	080137e8 	.word	0x080137e8
 800f428:	08013820 	.word	0x08013820
 800f42c:	08013860 	.word	0x08013860
 800f430:	08013888 	.word	0x08013888
 800f434:	080138a0 	.word	0x080138a0
 800f438:	080138b4 	.word	0x080138b4

0800f43c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b088      	sub	sp, #32
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f450:	2b06      	cmp	r3, #6
 800f452:	d006      	beq.n	800f462 <etharp_update_arp_entry+0x26>
 800f454:	4b48      	ldr	r3, [pc, #288]	@ (800f578 <etharp_update_arp_entry+0x13c>)
 800f456:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f45a:	4948      	ldr	r1, [pc, #288]	@ (800f57c <etharp_update_arp_entry+0x140>)
 800f45c:	4848      	ldr	r0, [pc, #288]	@ (800f580 <etharp_update_arp_entry+0x144>)
 800f45e:	f002 fa6f 	bl	8011940 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d012      	beq.n	800f48e <etharp_update_arp_entry+0x52>
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00e      	beq.n	800f48e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	68f9      	ldr	r1, [r7, #12]
 800f476:	4618      	mov	r0, r3
 800f478:	f001 f91a 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 800f47c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d105      	bne.n	800f48e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f48a:	2be0      	cmp	r3, #224	@ 0xe0
 800f48c:	d102      	bne.n	800f494 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f48e:	f06f 030f 	mvn.w	r3, #15
 800f492:	e06c      	b.n	800f56e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f494:	78fb      	ldrb	r3, [r7, #3]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	4619      	mov	r1, r3
 800f49a:	68b8      	ldr	r0, [r7, #8]
 800f49c:	f7ff fe56 	bl	800f14c <etharp_find_entry>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f4a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	da02      	bge.n	800f4b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f4ac:	8afb      	ldrh	r3, [r7, #22]
 800f4ae:	b25b      	sxtb	r3, r3
 800f4b0:	e05d      	b.n	800f56e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f4b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4b6:	4933      	ldr	r1, [pc, #204]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	4413      	add	r3, r2
 800f4be:	00db      	lsls	r3, r3, #3
 800f4c0:	440b      	add	r3, r1
 800f4c2:	3314      	adds	r3, #20
 800f4c4:	2202      	movs	r2, #2
 800f4c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f4c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4cc:	492d      	ldr	r1, [pc, #180]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	005b      	lsls	r3, r3, #1
 800f4d2:	4413      	add	r3, r2
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	440b      	add	r3, r1
 800f4d8:	3308      	adds	r3, #8
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f4de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	005b      	lsls	r3, r3, #1
 800f4e6:	4413      	add	r3, r2
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	4a25      	ldr	r2, [pc, #148]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f4ee:	4413      	add	r3, r2
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	2206      	movs	r2, #6
 800f4f4:	6879      	ldr	r1, [r7, #4]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f002 fb53 	bl	8011ba2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f4fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f500:	4920      	ldr	r1, [pc, #128]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f502:	4613      	mov	r3, r2
 800f504:	005b      	lsls	r3, r3, #1
 800f506:	4413      	add	r3, r2
 800f508:	00db      	lsls	r3, r3, #3
 800f50a:	440b      	add	r3, r1
 800f50c:	3312      	adds	r3, #18
 800f50e:	2200      	movs	r2, #0
 800f510:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f512:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f516:	491b      	ldr	r1, [pc, #108]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f518:	4613      	mov	r3, r2
 800f51a:	005b      	lsls	r3, r3, #1
 800f51c:	4413      	add	r3, r2
 800f51e:	00db      	lsls	r3, r3, #3
 800f520:	440b      	add	r3, r1
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d021      	beq.n	800f56c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f528:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f52c:	4915      	ldr	r1, [pc, #84]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f52e:	4613      	mov	r3, r2
 800f530:	005b      	lsls	r3, r3, #1
 800f532:	4413      	add	r3, r2
 800f534:	00db      	lsls	r3, r3, #3
 800f536:	440b      	add	r3, r1
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f53c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f540:	4910      	ldr	r1, [pc, #64]	@ (800f584 <etharp_update_arp_entry+0x148>)
 800f542:	4613      	mov	r3, r2
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	4413      	add	r3, r2
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	440b      	add	r3, r1
 800f54c:	2200      	movs	r2, #0
 800f54e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f556:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6939      	ldr	r1, [r7, #16]
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f001 ffb3 	bl	80114cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f566:	6938      	ldr	r0, [r7, #16]
 800f568:	f7fe ffda 	bl	800e520 <pbuf_free>
  }
  return ERR_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	080137e8 	.word	0x080137e8
 800f57c:	080138e0 	.word	0x080138e0
 800f580:	08013860 	.word	0x08013860
 800f584:	24012730 	.word	0x24012730

0800f588 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f590:	2300      	movs	r3, #0
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e01e      	b.n	800f5d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f596:	4913      	ldr	r1, [pc, #76]	@ (800f5e4 <etharp_cleanup_netif+0x5c>)
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	4613      	mov	r3, r2
 800f59c:	005b      	lsls	r3, r3, #1
 800f59e:	4413      	add	r3, r2
 800f5a0:	00db      	lsls	r3, r3, #3
 800f5a2:	440b      	add	r3, r1
 800f5a4:	3314      	adds	r3, #20
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f5aa:	7afb      	ldrb	r3, [r7, #11]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00e      	beq.n	800f5ce <etharp_cleanup_netif+0x46>
 800f5b0:	490c      	ldr	r1, [pc, #48]	@ (800f5e4 <etharp_cleanup_netif+0x5c>)
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	4613      	mov	r3, r2
 800f5b6:	005b      	lsls	r3, r3, #1
 800f5b8:	4413      	add	r3, r2
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	440b      	add	r3, r1
 800f5be:	3308      	adds	r3, #8
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d102      	bne.n	800f5ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7ff fce5 	bl	800ef98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	60fb      	str	r3, [r7, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2b09      	cmp	r3, #9
 800f5d8:	dddd      	ble.n	800f596 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f5da:	bf00      	nop
 800f5dc:	bf00      	nop
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	24012730 	.word	0x24012730

0800f5e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f5e8:	b5b0      	push	{r4, r5, r7, lr}
 800f5ea:	b08a      	sub	sp, #40	@ 0x28
 800f5ec:	af04      	add	r7, sp, #16
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d107      	bne.n	800f608 <etharp_input+0x20>
 800f5f8:	4b3d      	ldr	r3, [pc, #244]	@ (800f6f0 <etharp_input+0x108>)
 800f5fa:	f240 228a 	movw	r2, #650	@ 0x28a
 800f5fe:	493d      	ldr	r1, [pc, #244]	@ (800f6f4 <etharp_input+0x10c>)
 800f600:	483d      	ldr	r0, [pc, #244]	@ (800f6f8 <etharp_input+0x110>)
 800f602:	f002 f99d 	bl	8011940 <iprintf>
 800f606:	e06f      	b.n	800f6e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	881b      	ldrh	r3, [r3, #0]
 800f612:	b29b      	uxth	r3, r3
 800f614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f618:	d10c      	bne.n	800f634 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f61e:	2b06      	cmp	r3, #6
 800f620:	d108      	bne.n	800f634 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f626:	2b04      	cmp	r3, #4
 800f628:	d104      	bne.n	800f634 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	885b      	ldrh	r3, [r3, #2]
 800f62e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f630:	2b08      	cmp	r3, #8
 800f632:	d003      	beq.n	800f63c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f7fe ff73 	bl	800e520 <pbuf_free>
    return;
 800f63a:	e055      	b.n	800f6e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	330e      	adds	r3, #14
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	3318      	adds	r3, #24
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	3304      	adds	r3, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d102      	bne.n	800f65c <etharp_input+0x74>
    for_us = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	75fb      	strb	r3, [r7, #23]
 800f65a:	e009      	b.n	800f670 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	3304      	adds	r3, #4
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	429a      	cmp	r2, r3
 800f666:	bf0c      	ite	eq
 800f668:	2301      	moveq	r3, #1
 800f66a:	2300      	movne	r3, #0
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	f103 0208 	add.w	r2, r3, #8
 800f676:	7dfb      	ldrb	r3, [r7, #23]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <etharp_input+0x98>
 800f67c:	2301      	movs	r3, #1
 800f67e:	e000      	b.n	800f682 <etharp_input+0x9a>
 800f680:	2302      	movs	r3, #2
 800f682:	f107 010c 	add.w	r1, r7, #12
 800f686:	6838      	ldr	r0, [r7, #0]
 800f688:	f7ff fed8 	bl	800f43c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	88db      	ldrh	r3, [r3, #6]
 800f690:	b29b      	uxth	r3, r3
 800f692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f696:	d003      	beq.n	800f6a0 <etharp_input+0xb8>
 800f698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f69c:	d01e      	beq.n	800f6dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f69e:	e020      	b.n	800f6e2 <etharp_input+0xfa>
      if (for_us) {
 800f6a0:	7dfb      	ldrb	r3, [r7, #23]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d01c      	beq.n	800f6e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f6c0:	2102      	movs	r1, #2
 800f6c2:	9103      	str	r1, [sp, #12]
 800f6c4:	f107 010c 	add.w	r1, r7, #12
 800f6c8:	9102      	str	r1, [sp, #8]
 800f6ca:	9201      	str	r2, [sp, #4]
 800f6cc:	9300      	str	r3, [sp, #0]
 800f6ce:	462b      	mov	r3, r5
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4601      	mov	r1, r0
 800f6d4:	6838      	ldr	r0, [r7, #0]
 800f6d6:	f000 faeb 	bl	800fcb0 <etharp_raw>
      break;
 800f6da:	e001      	b.n	800f6e0 <etharp_input+0xf8>
      break;
 800f6dc:	bf00      	nop
 800f6de:	e000      	b.n	800f6e2 <etharp_input+0xfa>
      break;
 800f6e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7fe ff1c 	bl	800e520 <pbuf_free>
}
 800f6e8:	3718      	adds	r7, #24
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	080137e8 	.word	0x080137e8
 800f6f4:	08013938 	.word	0x08013938
 800f6f8:	08013860 	.word	0x08013860

0800f6fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af02      	add	r7, sp, #8
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	4613      	mov	r3, r2
 800f708:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f70a:	79fa      	ldrb	r2, [r7, #7]
 800f70c:	4944      	ldr	r1, [pc, #272]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f70e:	4613      	mov	r3, r2
 800f710:	005b      	lsls	r3, r3, #1
 800f712:	4413      	add	r3, r2
 800f714:	00db      	lsls	r3, r3, #3
 800f716:	440b      	add	r3, r1
 800f718:	3314      	adds	r3, #20
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d806      	bhi.n	800f72e <etharp_output_to_arp_index+0x32>
 800f720:	4b40      	ldr	r3, [pc, #256]	@ (800f824 <etharp_output_to_arp_index+0x128>)
 800f722:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f726:	4940      	ldr	r1, [pc, #256]	@ (800f828 <etharp_output_to_arp_index+0x12c>)
 800f728:	4840      	ldr	r0, [pc, #256]	@ (800f82c <etharp_output_to_arp_index+0x130>)
 800f72a:	f002 f909 	bl	8011940 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f72e:	79fa      	ldrb	r2, [r7, #7]
 800f730:	493b      	ldr	r1, [pc, #236]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f732:	4613      	mov	r3, r2
 800f734:	005b      	lsls	r3, r3, #1
 800f736:	4413      	add	r3, r2
 800f738:	00db      	lsls	r3, r3, #3
 800f73a:	440b      	add	r3, r1
 800f73c:	3314      	adds	r3, #20
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	2b02      	cmp	r3, #2
 800f742:	d153      	bne.n	800f7ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f744:	79fa      	ldrb	r2, [r7, #7]
 800f746:	4936      	ldr	r1, [pc, #216]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f748:	4613      	mov	r3, r2
 800f74a:	005b      	lsls	r3, r3, #1
 800f74c:	4413      	add	r3, r2
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	440b      	add	r3, r1
 800f752:	3312      	adds	r3, #18
 800f754:	881b      	ldrh	r3, [r3, #0]
 800f756:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f75a:	d919      	bls.n	800f790 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f75c:	79fa      	ldrb	r2, [r7, #7]
 800f75e:	4613      	mov	r3, r2
 800f760:	005b      	lsls	r3, r3, #1
 800f762:	4413      	add	r3, r2
 800f764:	00db      	lsls	r3, r3, #3
 800f766:	4a2e      	ldr	r2, [pc, #184]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f768:	4413      	add	r3, r2
 800f76a:	3304      	adds	r3, #4
 800f76c:	4619      	mov	r1, r3
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 fb4c 	bl	800fe0c <etharp_request>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d138      	bne.n	800f7ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f77a:	79fa      	ldrb	r2, [r7, #7]
 800f77c:	4928      	ldr	r1, [pc, #160]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f77e:	4613      	mov	r3, r2
 800f780:	005b      	lsls	r3, r3, #1
 800f782:	4413      	add	r3, r2
 800f784:	00db      	lsls	r3, r3, #3
 800f786:	440b      	add	r3, r1
 800f788:	3314      	adds	r3, #20
 800f78a:	2203      	movs	r2, #3
 800f78c:	701a      	strb	r2, [r3, #0]
 800f78e:	e02d      	b.n	800f7ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f790:	79fa      	ldrb	r2, [r7, #7]
 800f792:	4923      	ldr	r1, [pc, #140]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f794:	4613      	mov	r3, r2
 800f796:	005b      	lsls	r3, r3, #1
 800f798:	4413      	add	r3, r2
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	440b      	add	r3, r1
 800f79e:	3312      	adds	r3, #18
 800f7a0:	881b      	ldrh	r3, [r3, #0]
 800f7a2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f7a6:	d321      	bcc.n	800f7ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f7a8:	79fa      	ldrb	r2, [r7, #7]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	005b      	lsls	r3, r3, #1
 800f7ae:	4413      	add	r3, r2
 800f7b0:	00db      	lsls	r3, r3, #3
 800f7b2:	4a1b      	ldr	r2, [pc, #108]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f7b4:	4413      	add	r3, r2
 800f7b6:	1d19      	adds	r1, r3, #4
 800f7b8:	79fa      	ldrb	r2, [r7, #7]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	4413      	add	r3, r2
 800f7c0:	00db      	lsls	r3, r3, #3
 800f7c2:	3308      	adds	r3, #8
 800f7c4:	4a16      	ldr	r2, [pc, #88]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f7c6:	4413      	add	r3, r2
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f000 fafb 	bl	800fdc8 <etharp_request_dst>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d109      	bne.n	800f7ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f7d8:	79fa      	ldrb	r2, [r7, #7]
 800f7da:	4911      	ldr	r1, [pc, #68]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f7dc:	4613      	mov	r3, r2
 800f7de:	005b      	lsls	r3, r3, #1
 800f7e0:	4413      	add	r3, r2
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	440b      	add	r3, r1
 800f7e6:	3314      	adds	r3, #20
 800f7e8:	2203      	movs	r2, #3
 800f7ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f7f2:	79fa      	ldrb	r2, [r7, #7]
 800f7f4:	4613      	mov	r3, r2
 800f7f6:	005b      	lsls	r3, r3, #1
 800f7f8:	4413      	add	r3, r2
 800f7fa:	00db      	lsls	r3, r3, #3
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	4a08      	ldr	r2, [pc, #32]	@ (800f820 <etharp_output_to_arp_index+0x124>)
 800f800:	4413      	add	r3, r2
 800f802:	3304      	adds	r3, #4
 800f804:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f808:	9200      	str	r2, [sp, #0]
 800f80a:	460a      	mov	r2, r1
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f001 fe5c 	bl	80114cc <ethernet_output>
 800f814:	4603      	mov	r3, r0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	24012730 	.word	0x24012730
 800f824:	080137e8 	.word	0x080137e8
 800f828:	08013958 	.word	0x08013958
 800f82c:	08013860 	.word	0x08013860

0800f830 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b08a      	sub	sp, #40	@ 0x28
 800f834:	af02      	add	r7, sp, #8
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <etharp_output+0x24>
 800f846:	4b73      	ldr	r3, [pc, #460]	@ (800fa14 <etharp_output+0x1e4>)
 800f848:	f240 321e 	movw	r2, #798	@ 0x31e
 800f84c:	4972      	ldr	r1, [pc, #456]	@ (800fa18 <etharp_output+0x1e8>)
 800f84e:	4873      	ldr	r0, [pc, #460]	@ (800fa1c <etharp_output+0x1ec>)
 800f850:	f002 f876 	bl	8011940 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d106      	bne.n	800f868 <etharp_output+0x38>
 800f85a:	4b6e      	ldr	r3, [pc, #440]	@ (800fa14 <etharp_output+0x1e4>)
 800f85c:	f240 321f 	movw	r2, #799	@ 0x31f
 800f860:	496f      	ldr	r1, [pc, #444]	@ (800fa20 <etharp_output+0x1f0>)
 800f862:	486e      	ldr	r0, [pc, #440]	@ (800fa1c <etharp_output+0x1ec>)
 800f864:	f002 f86c 	bl	8011940 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <etharp_output+0x4c>
 800f86e:	4b69      	ldr	r3, [pc, #420]	@ (800fa14 <etharp_output+0x1e4>)
 800f870:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f874:	496b      	ldr	r1, [pc, #428]	@ (800fa24 <etharp_output+0x1f4>)
 800f876:	4869      	ldr	r0, [pc, #420]	@ (800fa1c <etharp_output+0x1ec>)
 800f878:	f002 f862 	bl	8011940 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	68f9      	ldr	r1, [r7, #12]
 800f882:	4618      	mov	r0, r3
 800f884:	f000 ff14 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f88e:	4b66      	ldr	r3, [pc, #408]	@ (800fa28 <etharp_output+0x1f8>)
 800f890:	61fb      	str	r3, [r7, #28]
 800f892:	e0af      	b.n	800f9f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f89c:	2be0      	cmp	r3, #224	@ 0xe0
 800f89e:	d118      	bne.n	800f8d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f8a8:	235e      	movs	r3, #94	@ 0x5e
 800f8aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3302      	adds	r3, #2
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	3303      	adds	r3, #3
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f8ca:	f107 0310 	add.w	r3, r7, #16
 800f8ce:	61fb      	str	r3, [r7, #28]
 800f8d0:	e090      	b.n	800f9f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	3304      	adds	r3, #4
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	405a      	eors	r2, r3
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d012      	beq.n	800f910 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f8f0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d00b      	beq.n	800f910 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	330c      	adds	r3, #12
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d003      	beq.n	800f90a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	330c      	adds	r3, #12
 800f906:	61bb      	str	r3, [r7, #24]
 800f908:	e002      	b.n	800f910 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f90a:	f06f 0303 	mvn.w	r3, #3
 800f90e:	e07d      	b.n	800fa0c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f910:	4b46      	ldr	r3, [pc, #280]	@ (800fa2c <etharp_output+0x1fc>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	4619      	mov	r1, r3
 800f916:	4a46      	ldr	r2, [pc, #280]	@ (800fa30 <etharp_output+0x200>)
 800f918:	460b      	mov	r3, r1
 800f91a:	005b      	lsls	r3, r3, #1
 800f91c:	440b      	add	r3, r1
 800f91e:	00db      	lsls	r3, r3, #3
 800f920:	4413      	add	r3, r2
 800f922:	3314      	adds	r3, #20
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b01      	cmp	r3, #1
 800f928:	d925      	bls.n	800f976 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f92a:	4b40      	ldr	r3, [pc, #256]	@ (800fa2c <etharp_output+0x1fc>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	4619      	mov	r1, r3
 800f930:	4a3f      	ldr	r2, [pc, #252]	@ (800fa30 <etharp_output+0x200>)
 800f932:	460b      	mov	r3, r1
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	440b      	add	r3, r1
 800f938:	00db      	lsls	r3, r3, #3
 800f93a:	4413      	add	r3, r2
 800f93c:	3308      	adds	r3, #8
 800f93e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f940:	68fa      	ldr	r2, [r7, #12]
 800f942:	429a      	cmp	r2, r3
 800f944:	d117      	bne.n	800f976 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	4b38      	ldr	r3, [pc, #224]	@ (800fa2c <etharp_output+0x1fc>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	4618      	mov	r0, r3
 800f950:	4937      	ldr	r1, [pc, #220]	@ (800fa30 <etharp_output+0x200>)
 800f952:	4603      	mov	r3, r0
 800f954:	005b      	lsls	r3, r3, #1
 800f956:	4403      	add	r3, r0
 800f958:	00db      	lsls	r3, r3, #3
 800f95a:	440b      	add	r3, r1
 800f95c:	3304      	adds	r3, #4
 800f95e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f960:	429a      	cmp	r2, r3
 800f962:	d108      	bne.n	800f976 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f964:	4b31      	ldr	r3, [pc, #196]	@ (800fa2c <etharp_output+0x1fc>)
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	461a      	mov	r2, r3
 800f96a:	68b9      	ldr	r1, [r7, #8]
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7ff fec5 	bl	800f6fc <etharp_output_to_arp_index>
 800f972:	4603      	mov	r3, r0
 800f974:	e04a      	b.n	800fa0c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f976:	2300      	movs	r3, #0
 800f978:	75fb      	strb	r3, [r7, #23]
 800f97a:	e031      	b.n	800f9e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f97c:	7dfa      	ldrb	r2, [r7, #23]
 800f97e:	492c      	ldr	r1, [pc, #176]	@ (800fa30 <etharp_output+0x200>)
 800f980:	4613      	mov	r3, r2
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	4413      	add	r3, r2
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	440b      	add	r3, r1
 800f98a:	3314      	adds	r3, #20
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d923      	bls.n	800f9da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f992:	7dfa      	ldrb	r2, [r7, #23]
 800f994:	4926      	ldr	r1, [pc, #152]	@ (800fa30 <etharp_output+0x200>)
 800f996:	4613      	mov	r3, r2
 800f998:	005b      	lsls	r3, r3, #1
 800f99a:	4413      	add	r3, r2
 800f99c:	00db      	lsls	r3, r3, #3
 800f99e:	440b      	add	r3, r1
 800f9a0:	3308      	adds	r3, #8
 800f9a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d117      	bne.n	800f9da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	6819      	ldr	r1, [r3, #0]
 800f9ae:	7dfa      	ldrb	r2, [r7, #23]
 800f9b0:	481f      	ldr	r0, [pc, #124]	@ (800fa30 <etharp_output+0x200>)
 800f9b2:	4613      	mov	r3, r2
 800f9b4:	005b      	lsls	r3, r3, #1
 800f9b6:	4413      	add	r3, r2
 800f9b8:	00db      	lsls	r3, r3, #3
 800f9ba:	4403      	add	r3, r0
 800f9bc:	3304      	adds	r3, #4
 800f9be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f9c0:	4299      	cmp	r1, r3
 800f9c2:	d10a      	bne.n	800f9da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f9c4:	4a19      	ldr	r2, [pc, #100]	@ (800fa2c <etharp_output+0x1fc>)
 800f9c6:	7dfb      	ldrb	r3, [r7, #23]
 800f9c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	68b9      	ldr	r1, [r7, #8]
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff fe93 	bl	800f6fc <etharp_output_to_arp_index>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	e018      	b.n	800fa0c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f9da:	7dfb      	ldrb	r3, [r7, #23]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	75fb      	strb	r3, [r7, #23]
 800f9e0:	7dfb      	ldrb	r3, [r7, #23]
 800f9e2:	2b09      	cmp	r3, #9
 800f9e4:	d9ca      	bls.n	800f97c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	69b9      	ldr	r1, [r7, #24]
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f000 f822 	bl	800fa34 <etharp_query>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	e00b      	b.n	800fa0c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f9fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f9fe:	9300      	str	r3, [sp, #0]
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	68b9      	ldr	r1, [r7, #8]
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f001 fd61 	bl	80114cc <ethernet_output>
 800fa0a:	4603      	mov	r3, r0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3720      	adds	r7, #32
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	080137e8 	.word	0x080137e8
 800fa18:	08013938 	.word	0x08013938
 800fa1c:	08013860 	.word	0x08013860
 800fa20:	08013988 	.word	0x08013988
 800fa24:	08013928 	.word	0x08013928
 800fa28:	08013fc8 	.word	0x08013fc8
 800fa2c:	24012820 	.word	0x24012820
 800fa30:	24012730 	.word	0x24012730

0800fa34 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08c      	sub	sp, #48	@ 0x30
 800fa38:	af02      	add	r7, sp, #8
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	3326      	adds	r3, #38	@ 0x26
 800fa44:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fa46:	23ff      	movs	r3, #255	@ 0xff
 800fa48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68f9      	ldr	r1, [r7, #12]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 fe2a 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10c      	bne.n	800fa7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fa6a:	2be0      	cmp	r3, #224	@ 0xe0
 800fa6c:	d006      	beq.n	800fa7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d003      	beq.n	800fa7c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d102      	bne.n	800fa82 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fa7c:	f06f 030f 	mvn.w	r3, #15
 800fa80:	e101      	b.n	800fc86 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	2101      	movs	r1, #1
 800fa86:	68b8      	ldr	r0, [r7, #8]
 800fa88:	f7ff fb60 	bl	800f14c <etharp_find_entry>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fa90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	da02      	bge.n	800fa9e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fa98:	8a7b      	ldrh	r3, [r7, #18]
 800fa9a:	b25b      	sxtb	r3, r3
 800fa9c:	e0f3      	b.n	800fc86 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fa9e:	8a7b      	ldrh	r3, [r7, #18]
 800faa0:	2b7e      	cmp	r3, #126	@ 0x7e
 800faa2:	d906      	bls.n	800fab2 <etharp_query+0x7e>
 800faa4:	4b7a      	ldr	r3, [pc, #488]	@ (800fc90 <etharp_query+0x25c>)
 800faa6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800faaa:	497a      	ldr	r1, [pc, #488]	@ (800fc94 <etharp_query+0x260>)
 800faac:	487a      	ldr	r0, [pc, #488]	@ (800fc98 <etharp_query+0x264>)
 800faae:	f001 ff47 	bl	8011940 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fab2:	8a7b      	ldrh	r3, [r7, #18]
 800fab4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fab6:	7c7a      	ldrb	r2, [r7, #17]
 800fab8:	4978      	ldr	r1, [pc, #480]	@ (800fc9c <etharp_query+0x268>)
 800faba:	4613      	mov	r3, r2
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	4413      	add	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	440b      	add	r3, r1
 800fac4:	3314      	adds	r3, #20
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d115      	bne.n	800faf8 <etharp_query+0xc4>
    is_new_entry = 1;
 800facc:	2301      	movs	r3, #1
 800face:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fad0:	7c7a      	ldrb	r2, [r7, #17]
 800fad2:	4972      	ldr	r1, [pc, #456]	@ (800fc9c <etharp_query+0x268>)
 800fad4:	4613      	mov	r3, r2
 800fad6:	005b      	lsls	r3, r3, #1
 800fad8:	4413      	add	r3, r2
 800fada:	00db      	lsls	r3, r3, #3
 800fadc:	440b      	add	r3, r1
 800fade:	3314      	adds	r3, #20
 800fae0:	2201      	movs	r2, #1
 800fae2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fae4:	7c7a      	ldrb	r2, [r7, #17]
 800fae6:	496d      	ldr	r1, [pc, #436]	@ (800fc9c <etharp_query+0x268>)
 800fae8:	4613      	mov	r3, r2
 800faea:	005b      	lsls	r3, r3, #1
 800faec:	4413      	add	r3, r2
 800faee:	00db      	lsls	r3, r3, #3
 800faf0:	440b      	add	r3, r1
 800faf2:	3308      	adds	r3, #8
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800faf8:	7c7a      	ldrb	r2, [r7, #17]
 800fafa:	4968      	ldr	r1, [pc, #416]	@ (800fc9c <etharp_query+0x268>)
 800fafc:	4613      	mov	r3, r2
 800fafe:	005b      	lsls	r3, r3, #1
 800fb00:	4413      	add	r3, r2
 800fb02:	00db      	lsls	r3, r3, #3
 800fb04:	440b      	add	r3, r1
 800fb06:	3314      	adds	r3, #20
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d011      	beq.n	800fb32 <etharp_query+0xfe>
 800fb0e:	7c7a      	ldrb	r2, [r7, #17]
 800fb10:	4962      	ldr	r1, [pc, #392]	@ (800fc9c <etharp_query+0x268>)
 800fb12:	4613      	mov	r3, r2
 800fb14:	005b      	lsls	r3, r3, #1
 800fb16:	4413      	add	r3, r2
 800fb18:	00db      	lsls	r3, r3, #3
 800fb1a:	440b      	add	r3, r1
 800fb1c:	3314      	adds	r3, #20
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d806      	bhi.n	800fb32 <etharp_query+0xfe>
 800fb24:	4b5a      	ldr	r3, [pc, #360]	@ (800fc90 <etharp_query+0x25c>)
 800fb26:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800fb2a:	495d      	ldr	r1, [pc, #372]	@ (800fca0 <etharp_query+0x26c>)
 800fb2c:	485a      	ldr	r0, [pc, #360]	@ (800fc98 <etharp_query+0x264>)
 800fb2e:	f001 ff07 	bl	8011940 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fb32:	6a3b      	ldr	r3, [r7, #32]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d102      	bne.n	800fb3e <etharp_query+0x10a>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d10c      	bne.n	800fb58 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fb3e:	68b9      	ldr	r1, [r7, #8]
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 f963 	bl	800fe0c <etharp_request>
 800fb46:	4603      	mov	r3, r0
 800fb48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d102      	bne.n	800fb58 <etharp_query+0x124>
      return result;
 800fb52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fb56:	e096      	b.n	800fc86 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d106      	bne.n	800fb6c <etharp_query+0x138>
 800fb5e:	4b4c      	ldr	r3, [pc, #304]	@ (800fc90 <etharp_query+0x25c>)
 800fb60:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800fb64:	494f      	ldr	r1, [pc, #316]	@ (800fca4 <etharp_query+0x270>)
 800fb66:	484c      	ldr	r0, [pc, #304]	@ (800fc98 <etharp_query+0x264>)
 800fb68:	f001 feea 	bl	8011940 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fb6c:	7c7a      	ldrb	r2, [r7, #17]
 800fb6e:	494b      	ldr	r1, [pc, #300]	@ (800fc9c <etharp_query+0x268>)
 800fb70:	4613      	mov	r3, r2
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	4413      	add	r3, r2
 800fb76:	00db      	lsls	r3, r3, #3
 800fb78:	440b      	add	r3, r1
 800fb7a:	3314      	adds	r3, #20
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d917      	bls.n	800fbb2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fb82:	4a49      	ldr	r2, [pc, #292]	@ (800fca8 <etharp_query+0x274>)
 800fb84:	7c7b      	ldrb	r3, [r7, #17]
 800fb86:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fb88:	7c7a      	ldrb	r2, [r7, #17]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	4413      	add	r3, r2
 800fb90:	00db      	lsls	r3, r3, #3
 800fb92:	3308      	adds	r3, #8
 800fb94:	4a41      	ldr	r2, [pc, #260]	@ (800fc9c <etharp_query+0x268>)
 800fb96:	4413      	add	r3, r2
 800fb98:	3304      	adds	r3, #4
 800fb9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb9e:	9200      	str	r2, [sp, #0]
 800fba0:	697a      	ldr	r2, [r7, #20]
 800fba2:	6879      	ldr	r1, [r7, #4]
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f001 fc91 	bl	80114cc <ethernet_output>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fbb0:	e067      	b.n	800fc82 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fbb2:	7c7a      	ldrb	r2, [r7, #17]
 800fbb4:	4939      	ldr	r1, [pc, #228]	@ (800fc9c <etharp_query+0x268>)
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	005b      	lsls	r3, r3, #1
 800fbba:	4413      	add	r3, r2
 800fbbc:	00db      	lsls	r3, r3, #3
 800fbbe:	440b      	add	r3, r1
 800fbc0:	3314      	adds	r3, #20
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d15c      	bne.n	800fc82 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fbd0:	e01c      	b.n	800fc0c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	895a      	ldrh	r2, [r3, #10]
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	891b      	ldrh	r3, [r3, #8]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d10a      	bne.n	800fbf4 <etharp_query+0x1c0>
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d006      	beq.n	800fbf4 <etharp_query+0x1c0>
 800fbe6:	4b2a      	ldr	r3, [pc, #168]	@ (800fc90 <etharp_query+0x25c>)
 800fbe8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800fbec:	492f      	ldr	r1, [pc, #188]	@ (800fcac <etharp_query+0x278>)
 800fbee:	482a      	ldr	r0, [pc, #168]	@ (800fc98 <etharp_query+0x264>)
 800fbf0:	f001 fea6 	bl	8011940 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	7b1b      	ldrb	r3, [r3, #12]
 800fbf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <etharp_query+0x1d2>
        copy_needed = 1;
 800fc00:	2301      	movs	r3, #1
 800fc02:	61bb      	str	r3, [r7, #24]
        break;
 800fc04:	e005      	b.n	800fc12 <etharp_query+0x1de>
      }
      p = p->next;
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1df      	bne.n	800fbd2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d007      	beq.n	800fc28 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800fc1e:	200e      	movs	r0, #14
 800fc20:	f7fe fe74 	bl	800e90c <pbuf_clone>
 800fc24:	61f8      	str	r0, [r7, #28]
 800fc26:	e004      	b.n	800fc32 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fc2c:	69f8      	ldr	r0, [r7, #28]
 800fc2e:	f7fe fd1d 	bl	800e66c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d021      	beq.n	800fc7c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fc38:	7c7a      	ldrb	r2, [r7, #17]
 800fc3a:	4918      	ldr	r1, [pc, #96]	@ (800fc9c <etharp_query+0x268>)
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	4413      	add	r3, r2
 800fc42:	00db      	lsls	r3, r3, #3
 800fc44:	440b      	add	r3, r1
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00a      	beq.n	800fc62 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fc4c:	7c7a      	ldrb	r2, [r7, #17]
 800fc4e:	4913      	ldr	r1, [pc, #76]	@ (800fc9c <etharp_query+0x268>)
 800fc50:	4613      	mov	r3, r2
 800fc52:	005b      	lsls	r3, r3, #1
 800fc54:	4413      	add	r3, r2
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	440b      	add	r3, r1
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fe fc5f 	bl	800e520 <pbuf_free>
      }
      arp_table[i].q = p;
 800fc62:	7c7a      	ldrb	r2, [r7, #17]
 800fc64:	490d      	ldr	r1, [pc, #52]	@ (800fc9c <etharp_query+0x268>)
 800fc66:	4613      	mov	r3, r2
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	4413      	add	r3, r2
 800fc6c:	00db      	lsls	r3, r3, #3
 800fc6e:	440b      	add	r3, r1
 800fc70:	69fa      	ldr	r2, [r7, #28]
 800fc72:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fc74:	2300      	movs	r3, #0
 800fc76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fc7a:	e002      	b.n	800fc82 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fc7c:	23ff      	movs	r3, #255	@ 0xff
 800fc7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800fc82:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3728      	adds	r7, #40	@ 0x28
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	080137e8 	.word	0x080137e8
 800fc94:	08013994 	.word	0x08013994
 800fc98:	08013860 	.word	0x08013860
 800fc9c:	24012730 	.word	0x24012730
 800fca0:	080139a4 	.word	0x080139a4
 800fca4:	08013988 	.word	0x08013988
 800fca8:	24012820 	.word	0x24012820
 800fcac:	080139cc 	.word	0x080139cc

0800fcb0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08a      	sub	sp, #40	@ 0x28
 800fcb4:	af02      	add	r7, sp, #8
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
 800fcbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d106      	bne.n	800fcd6 <etharp_raw+0x26>
 800fcc8:	4b3a      	ldr	r3, [pc, #232]	@ (800fdb4 <etharp_raw+0x104>)
 800fcca:	f240 4257 	movw	r2, #1111	@ 0x457
 800fcce:	493a      	ldr	r1, [pc, #232]	@ (800fdb8 <etharp_raw+0x108>)
 800fcd0:	483a      	ldr	r0, [pc, #232]	@ (800fdbc <etharp_raw+0x10c>)
 800fcd2:	f001 fe35 	bl	8011940 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fcd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fcda:	211c      	movs	r1, #28
 800fcdc:	200e      	movs	r0, #14
 800fcde:	f7fe f93b 	bl	800df58 <pbuf_alloc>
 800fce2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d102      	bne.n	800fcf0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fcea:	f04f 33ff 	mov.w	r3, #4294967295
 800fcee:	e05d      	b.n	800fdac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	895b      	ldrh	r3, [r3, #10]
 800fcf4:	2b1b      	cmp	r3, #27
 800fcf6:	d806      	bhi.n	800fd06 <etharp_raw+0x56>
 800fcf8:	4b2e      	ldr	r3, [pc, #184]	@ (800fdb4 <etharp_raw+0x104>)
 800fcfa:	f240 4262 	movw	r2, #1122	@ 0x462
 800fcfe:	4930      	ldr	r1, [pc, #192]	@ (800fdc0 <etharp_raw+0x110>)
 800fd00:	482e      	ldr	r0, [pc, #184]	@ (800fdbc <etharp_raw+0x10c>)
 800fd02:	f001 fe1d 	bl	8011940 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fd06:	69bb      	ldr	r3, [r7, #24]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fd0c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fc ffec 	bl	800ccec <lwip_htons>
 800fd14:	4603      	mov	r3, r0
 800fd16:	461a      	mov	r2, r3
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fd22:	2b06      	cmp	r3, #6
 800fd24:	d006      	beq.n	800fd34 <etharp_raw+0x84>
 800fd26:	4b23      	ldr	r3, [pc, #140]	@ (800fdb4 <etharp_raw+0x104>)
 800fd28:	f240 4269 	movw	r2, #1129	@ 0x469
 800fd2c:	4925      	ldr	r1, [pc, #148]	@ (800fdc4 <etharp_raw+0x114>)
 800fd2e:	4823      	ldr	r0, [pc, #140]	@ (800fdbc <etharp_raw+0x10c>)
 800fd30:	f001 fe06 	bl	8011940 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	3308      	adds	r3, #8
 800fd38:	2206      	movs	r2, #6
 800fd3a:	6839      	ldr	r1, [r7, #0]
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f001 ff30 	bl	8011ba2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	3312      	adds	r3, #18
 800fd46:	2206      	movs	r2, #6
 800fd48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f001 ff29 	bl	8011ba2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	330e      	adds	r3, #14
 800fd54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd56:	6812      	ldr	r2, [r2, #0]
 800fd58:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	3318      	adds	r3, #24
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd60:	6812      	ldr	r2, [r2, #0]
 800fd62:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	2200      	movs	r2, #0
 800fd68:	701a      	strb	r2, [r3, #0]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f042 0201 	orr.w	r2, r2, #1
 800fd70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f042 0208 	orr.w	r2, r2, #8
 800fd7a:	709a      	strb	r2, [r3, #2]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	2206      	movs	r2, #6
 800fd84:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	2204      	movs	r2, #4
 800fd8a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fd8c:	f640 0306 	movw	r3, #2054	@ 0x806
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	68ba      	ldr	r2, [r7, #8]
 800fd96:	69b9      	ldr	r1, [r7, #24]
 800fd98:	68f8      	ldr	r0, [r7, #12]
 800fd9a:	f001 fb97 	bl	80114cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fd9e:	69b8      	ldr	r0, [r7, #24]
 800fda0:	f7fe fbbe 	bl	800e520 <pbuf_free>
  p = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fda8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3720      	adds	r7, #32
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	080137e8 	.word	0x080137e8
 800fdb8:	08013938 	.word	0x08013938
 800fdbc:	08013860 	.word	0x08013860
 800fdc0:	080139e8 	.word	0x080139e8
 800fdc4:	08013a1c 	.word	0x08013a1c

0800fdc8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b088      	sub	sp, #32
 800fdcc:	af04      	add	r7, sp, #16
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fde4:	2201      	movs	r2, #1
 800fde6:	9203      	str	r2, [sp, #12]
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	9202      	str	r2, [sp, #8]
 800fdec:	4a06      	ldr	r2, [pc, #24]	@ (800fe08 <etharp_request_dst+0x40>)
 800fdee:	9201      	str	r2, [sp, #4]
 800fdf0:	9300      	str	r3, [sp, #0]
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f7ff ff5a 	bl	800fcb0 <etharp_raw>
 800fdfc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	08013fd0 	.word	0x08013fd0

0800fe0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fe16:	4a05      	ldr	r2, [pc, #20]	@ (800fe2c <etharp_request+0x20>)
 800fe18:	6839      	ldr	r1, [r7, #0]
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff ffd4 	bl	800fdc8 <etharp_request_dst>
 800fe20:	4603      	mov	r3, r0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	08013fc8 	.word	0x08013fc8

0800fe30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08e      	sub	sp, #56	@ 0x38
 800fe34:	af04      	add	r7, sp, #16
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fe3a:	4b87      	ldr	r3, [pc, #540]	@ (8010058 <icmp_input+0x228>)
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fe40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f003 030f 	and.w	r3, r3, #15
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800fe50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe52:	2b13      	cmp	r3, #19
 800fe54:	f240 80e8 	bls.w	8010028 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	895b      	ldrh	r3, [r3, #10]
 800fe5c:	2b03      	cmp	r3, #3
 800fe5e:	f240 80e5 	bls.w	801002c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	781b      	ldrb	r3, [r3, #0]
 800fe68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fe6c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f000 80d2 	beq.w	801001a <icmp_input+0x1ea>
 800fe76:	2b08      	cmp	r3, #8
 800fe78:	f040 80d2 	bne.w	8010020 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fe7c:	4b77      	ldr	r3, [pc, #476]	@ (801005c <icmp_input+0x22c>)
 800fe7e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe80:	4b75      	ldr	r3, [pc, #468]	@ (8010058 <icmp_input+0x228>)
 800fe82:	695b      	ldr	r3, [r3, #20]
 800fe84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe88:	2be0      	cmp	r3, #224	@ 0xe0
 800fe8a:	f000 80d6 	beq.w	801003a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fe8e:	4b72      	ldr	r3, [pc, #456]	@ (8010058 <icmp_input+0x228>)
 800fe90:	695b      	ldr	r3, [r3, #20]
 800fe92:	4a71      	ldr	r2, [pc, #452]	@ (8010058 <icmp_input+0x228>)
 800fe94:	6812      	ldr	r2, [r2, #0]
 800fe96:	4611      	mov	r1, r2
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f000 fc09 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 80cc 	bne.w	801003e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	891b      	ldrh	r3, [r3, #8]
 800feaa:	2b07      	cmp	r3, #7
 800feac:	f240 80c0 	bls.w	8010030 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f7fc ff9f 	bl	800cdf4 <inet_chksum_pbuf>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d003      	beq.n	800fec4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7fe fb2f 	bl	800e520 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800fec2:	e0c5      	b.n	8010050 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fec4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fec6:	330e      	adds	r3, #14
 800fec8:	4619      	mov	r1, r3
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7fe fa92 	bl	800e3f4 <pbuf_add_header>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d04b      	beq.n	800ff6e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	891a      	ldrh	r2, [r3, #8]
 800feda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fedc:	4413      	add	r3, r2
 800fede:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	891b      	ldrh	r3, [r3, #8]
 800fee4:	8b7a      	ldrh	r2, [r7, #26]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	f0c0 80ab 	bcc.w	8010042 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800feec:	8b7b      	ldrh	r3, [r7, #26]
 800feee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fef2:	4619      	mov	r1, r3
 800fef4:	200e      	movs	r0, #14
 800fef6:	f7fe f82f 	bl	800df58 <pbuf_alloc>
 800fefa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f000 80a1 	beq.w	8010046 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	895b      	ldrh	r3, [r3, #10]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff0c:	3308      	adds	r3, #8
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d203      	bcs.n	800ff1a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ff12:	6978      	ldr	r0, [r7, #20]
 800ff14:	f7fe fb04 	bl	800e520 <pbuf_free>
          goto icmperr;
 800ff18:	e096      	b.n	8010048 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ff20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ff22:	4618      	mov	r0, r3
 800ff24:	f001 fe3d 	bl	8011ba2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ff28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6978      	ldr	r0, [r7, #20]
 800ff2e:	f7fe fa71 	bl	800e414 <pbuf_remove_header>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d009      	beq.n	800ff4c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ff38:	4b49      	ldr	r3, [pc, #292]	@ (8010060 <icmp_input+0x230>)
 800ff3a:	22b6      	movs	r2, #182	@ 0xb6
 800ff3c:	4949      	ldr	r1, [pc, #292]	@ (8010064 <icmp_input+0x234>)
 800ff3e:	484a      	ldr	r0, [pc, #296]	@ (8010068 <icmp_input+0x238>)
 800ff40:	f001 fcfe 	bl	8011940 <iprintf>
          pbuf_free(r);
 800ff44:	6978      	ldr	r0, [r7, #20]
 800ff46:	f7fe faeb 	bl	800e520 <pbuf_free>
          goto icmperr;
 800ff4a:	e07d      	b.n	8010048 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ff4c:	6879      	ldr	r1, [r7, #4]
 800ff4e:	6978      	ldr	r0, [r7, #20]
 800ff50:	f7fe fc0a 	bl	800e768 <pbuf_copy>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ff5a:	6978      	ldr	r0, [r7, #20]
 800ff5c:	f7fe fae0 	bl	800e520 <pbuf_free>
          goto icmperr;
 800ff60:	e072      	b.n	8010048 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f7fe fadc 	bl	800e520 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	607b      	str	r3, [r7, #4]
 800ff6c:	e00f      	b.n	800ff8e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ff6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff70:	330e      	adds	r3, #14
 800ff72:	4619      	mov	r1, r3
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f7fe fa4d 	bl	800e414 <pbuf_remove_header>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d006      	beq.n	800ff8e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ff80:	4b37      	ldr	r3, [pc, #220]	@ (8010060 <icmp_input+0x230>)
 800ff82:	22c7      	movs	r2, #199	@ 0xc7
 800ff84:	4939      	ldr	r1, [pc, #228]	@ (801006c <icmp_input+0x23c>)
 800ff86:	4838      	ldr	r0, [pc, #224]	@ (8010068 <icmp_input+0x238>)
 800ff88:	f001 fcda 	bl	8011940 <iprintf>
          goto icmperr;
 800ff8c:	e05c      	b.n	8010048 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ff94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ff96:	4619      	mov	r1, r3
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7fe fa2b 	bl	800e3f4 <pbuf_add_header>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d13c      	bne.n	801001e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	681a      	ldr	r2, [r3, #0]
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ffb2:	4b29      	ldr	r3, [pc, #164]	@ (8010058 <icmp_input+0x228>)
 800ffb4:	691a      	ldr	r2, [r3, #16]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	885b      	ldrh	r3, [r3, #2]
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d907      	bls.n	800ffde <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	885b      	ldrh	r3, [r3, #2]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	3309      	adds	r3, #9
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	805a      	strh	r2, [r3, #2]
 800ffdc:	e006      	b.n	800ffec <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	885b      	ldrh	r3, [r3, #2]
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	3308      	adds	r3, #8
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	22ff      	movs	r2, #255	@ 0xff
 800fff0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2200      	movs	r2, #0
 800fff6:	729a      	strb	r2, [r3, #10]
 800fff8:	2200      	movs	r2, #0
 800fffa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	2301      	movs	r3, #1
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	2300      	movs	r3, #0
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	23ff      	movs	r3, #255	@ 0xff
 801000a:	2200      	movs	r2, #0
 801000c:	69f9      	ldr	r1, [r7, #28]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fa76 	bl	8010500 <ip4_output_if>
 8010014:	4603      	mov	r3, r0
 8010016:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010018:	e001      	b.n	801001e <icmp_input+0x1ee>
      break;
 801001a:	bf00      	nop
 801001c:	e000      	b.n	8010020 <icmp_input+0x1f0>
      break;
 801001e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7fe fa7d 	bl	800e520 <pbuf_free>
  return;
 8010026:	e013      	b.n	8010050 <icmp_input+0x220>
    goto lenerr;
 8010028:	bf00      	nop
 801002a:	e002      	b.n	8010032 <icmp_input+0x202>
    goto lenerr;
 801002c:	bf00      	nop
 801002e:	e000      	b.n	8010032 <icmp_input+0x202>
        goto lenerr;
 8010030:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f7fe fa74 	bl	800e520 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010038:	e00a      	b.n	8010050 <icmp_input+0x220>
        goto icmperr;
 801003a:	bf00      	nop
 801003c:	e004      	b.n	8010048 <icmp_input+0x218>
        goto icmperr;
 801003e:	bf00      	nop
 8010040:	e002      	b.n	8010048 <icmp_input+0x218>
          goto icmperr;
 8010042:	bf00      	nop
 8010044:	e000      	b.n	8010048 <icmp_input+0x218>
          goto icmperr;
 8010046:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	f7fe fa69 	bl	800e520 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801004e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010050:	3728      	adds	r7, #40	@ 0x28
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	2400c198 	.word	0x2400c198
 801005c:	2400c1ac 	.word	0x2400c1ac
 8010060:	08013a60 	.word	0x08013a60
 8010064:	08013a98 	.word	0x08013a98
 8010068:	08013ad0 	.word	0x08013ad0
 801006c:	08013af8 	.word	0x08013af8

08010070 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	460b      	mov	r3, r1
 801007a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801007c:	78fb      	ldrb	r3, [r7, #3]
 801007e:	461a      	mov	r2, r3
 8010080:	2103      	movs	r1, #3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 f814 	bl	80100b0 <icmp_send_response>
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	460b      	mov	r3, r1
 801009a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801009c:	78fb      	ldrb	r3, [r7, #3]
 801009e:	461a      	mov	r2, r3
 80100a0:	210b      	movs	r1, #11
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f804 	bl	80100b0 <icmp_send_response>
}
 80100a8:	bf00      	nop
 80100aa:	3708      	adds	r7, #8
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08c      	sub	sp, #48	@ 0x30
 80100b4:	af04      	add	r7, sp, #16
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	70fb      	strb	r3, [r7, #3]
 80100bc:	4613      	mov	r3, r2
 80100be:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80100c0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80100c4:	2124      	movs	r1, #36	@ 0x24
 80100c6:	2022      	movs	r0, #34	@ 0x22
 80100c8:	f7fd ff46 	bl	800df58 <pbuf_alloc>
 80100cc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d056      	beq.n	8010182 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	895b      	ldrh	r3, [r3, #10]
 80100d8:	2b23      	cmp	r3, #35	@ 0x23
 80100da:	d806      	bhi.n	80100ea <icmp_send_response+0x3a>
 80100dc:	4b2b      	ldr	r3, [pc, #172]	@ (801018c <icmp_send_response+0xdc>)
 80100de:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80100e2:	492b      	ldr	r1, [pc, #172]	@ (8010190 <icmp_send_response+0xe0>)
 80100e4:	482b      	ldr	r0, [pc, #172]	@ (8010194 <icmp_send_response+0xe4>)
 80100e6:	f001 fc2b 	bl	8011940 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	78fa      	ldrb	r2, [r7, #3]
 80100fa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	78ba      	ldrb	r2, [r7, #2]
 8010100:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	2200      	movs	r2, #0
 8010106:	711a      	strb	r2, [r3, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2200      	movs	r2, #0
 8010110:	719a      	strb	r2, [r3, #6]
 8010112:	2200      	movs	r2, #0
 8010114:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	f103 0008 	add.w	r0, r3, #8
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	221c      	movs	r2, #28
 8010124:	4619      	mov	r1, r3
 8010126:	f001 fd3c 	bl	8011ba2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010130:	f107 030c 	add.w	r3, r7, #12
 8010134:	4618      	mov	r0, r3
 8010136:	f000 f82f 	bl	8010198 <ip4_route>
 801013a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d01b      	beq.n	801017a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	2200      	movs	r2, #0
 8010146:	709a      	strb	r2, [r3, #2]
 8010148:	2200      	movs	r2, #0
 801014a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	895b      	ldrh	r3, [r3, #10]
 8010150:	4619      	mov	r1, r3
 8010152:	6978      	ldr	r0, [r7, #20]
 8010154:	f7fc fe3c 	bl	800cdd0 <inet_chksum>
 8010158:	4603      	mov	r3, r0
 801015a:	461a      	mov	r2, r3
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010160:	f107 020c 	add.w	r2, r7, #12
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	9302      	str	r3, [sp, #8]
 8010168:	2301      	movs	r3, #1
 801016a:	9301      	str	r3, [sp, #4]
 801016c:	2300      	movs	r3, #0
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	23ff      	movs	r3, #255	@ 0xff
 8010172:	2100      	movs	r1, #0
 8010174:	69f8      	ldr	r0, [r7, #28]
 8010176:	f000 f9c3 	bl	8010500 <ip4_output_if>
  }
  pbuf_free(q);
 801017a:	69f8      	ldr	r0, [r7, #28]
 801017c:	f7fe f9d0 	bl	800e520 <pbuf_free>
 8010180:	e000      	b.n	8010184 <icmp_send_response+0xd4>
    return;
 8010182:	bf00      	nop
}
 8010184:	3720      	adds	r7, #32
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	08013a60 	.word	0x08013a60
 8010190:	08013b2c 	.word	0x08013b2c
 8010194:	08013ad0 	.word	0x08013ad0

08010198 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80101a0:	4b33      	ldr	r3, [pc, #204]	@ (8010270 <ip4_route+0xd8>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	60fb      	str	r3, [r7, #12]
 80101a6:	e036      	b.n	8010216 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d02b      	beq.n	8010210 <ip4_route+0x78>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101be:	089b      	lsrs	r3, r3, #2
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d022      	beq.n	8010210 <ip4_route+0x78>
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	3304      	adds	r3, #4
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d01d      	beq.n	8010210 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	3304      	adds	r3, #4
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	405a      	eors	r2, r3
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	3308      	adds	r3, #8
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4013      	ands	r3, r2
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d101      	bne.n	80101f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	e038      	b.n	8010262 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80101f6:	f003 0302 	and.w	r3, r3, #2
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d108      	bne.n	8010210 <ip4_route+0x78>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	330c      	adds	r3, #12
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	429a      	cmp	r2, r3
 801020a:	d101      	bne.n	8010210 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	e028      	b.n	8010262 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	60fb      	str	r3, [r7, #12]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1c5      	bne.n	80101a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801021c:	4b15      	ldr	r3, [pc, #84]	@ (8010274 <ip4_route+0xdc>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d01a      	beq.n	801025a <ip4_route+0xc2>
 8010224:	4b13      	ldr	r3, [pc, #76]	@ (8010274 <ip4_route+0xdc>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801022c:	f003 0301 	and.w	r3, r3, #1
 8010230:	2b00      	cmp	r3, #0
 8010232:	d012      	beq.n	801025a <ip4_route+0xc2>
 8010234:	4b0f      	ldr	r3, [pc, #60]	@ (8010274 <ip4_route+0xdc>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801023c:	f003 0304 	and.w	r3, r3, #4
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00a      	beq.n	801025a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010244:	4b0b      	ldr	r3, [pc, #44]	@ (8010274 <ip4_route+0xdc>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	3304      	adds	r3, #4
 801024a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801024c:	2b00      	cmp	r3, #0
 801024e:	d004      	beq.n	801025a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b7f      	cmp	r3, #127	@ 0x7f
 8010258:	d101      	bne.n	801025e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801025a:	2300      	movs	r3, #0
 801025c:	e001      	b.n	8010262 <ip4_route+0xca>
  }

  return netif_default;
 801025e:	4b05      	ldr	r3, [pc, #20]	@ (8010274 <ip4_route+0xdc>)
 8010260:	681b      	ldr	r3, [r3, #0]
}
 8010262:	4618      	mov	r0, r3
 8010264:	3714      	adds	r7, #20
 8010266:	46bd      	mov	sp, r7
 8010268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026c:	4770      	bx	lr
 801026e:	bf00      	nop
 8010270:	24012718 	.word	0x24012718
 8010274:	2401271c 	.word	0x2401271c

08010278 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010286:	f003 0301 	and.w	r3, r3, #1
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	d016      	beq.n	80102be <ip4_input_accept+0x46>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3304      	adds	r3, #4
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d011      	beq.n	80102be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801029a:	4b0b      	ldr	r3, [pc, #44]	@ (80102c8 <ip4_input_accept+0x50>)
 801029c:	695a      	ldr	r2, [r3, #20]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	3304      	adds	r3, #4
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d008      	beq.n	80102ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80102a8:	4b07      	ldr	r3, [pc, #28]	@ (80102c8 <ip4_input_accept+0x50>)
 80102aa:	695b      	ldr	r3, [r3, #20]
 80102ac:	6879      	ldr	r1, [r7, #4]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f000 f9fe 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 80102b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d001      	beq.n	80102be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80102ba:	2301      	movs	r3, #1
 80102bc:	e000      	b.n	80102c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	2400c198 	.word	0x2400c198

080102cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	091b      	lsrs	r3, r3, #4
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	2b04      	cmp	r3, #4
 80102e6:	d004      	beq.n	80102f2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7fe f919 	bl	800e520 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80102ee:	2300      	movs	r3, #0
 80102f0:	e0fd      	b.n	80104ee <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 030f 	and.w	r3, r3, #15
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	885b      	ldrh	r3, [r3, #2]
 8010306:	b29b      	uxth	r3, r3
 8010308:	4618      	mov	r0, r3
 801030a:	f7fc fcef 	bl	800ccec <lwip_htons>
 801030e:	4603      	mov	r3, r0
 8010310:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	891b      	ldrh	r3, [r3, #8]
 8010316:	89ba      	ldrh	r2, [r7, #12]
 8010318:	429a      	cmp	r2, r3
 801031a:	d204      	bcs.n	8010326 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801031c:	89bb      	ldrh	r3, [r7, #12]
 801031e:	4619      	mov	r1, r3
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7fd ff77 	bl	800e214 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	895b      	ldrh	r3, [r3, #10]
 801032a:	89fa      	ldrh	r2, [r7, #14]
 801032c:	429a      	cmp	r2, r3
 801032e:	d807      	bhi.n	8010340 <ip4_input+0x74>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	891b      	ldrh	r3, [r3, #8]
 8010334:	89ba      	ldrh	r2, [r7, #12]
 8010336:	429a      	cmp	r2, r3
 8010338:	d802      	bhi.n	8010340 <ip4_input+0x74>
 801033a:	89fb      	ldrh	r3, [r7, #14]
 801033c:	2b13      	cmp	r3, #19
 801033e:	d804      	bhi.n	801034a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f7fe f8ed 	bl	800e520 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	e0d1      	b.n	80104ee <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	691b      	ldr	r3, [r3, #16]
 801034e:	4a6a      	ldr	r2, [pc, #424]	@ (80104f8 <ip4_input+0x22c>)
 8010350:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	4a68      	ldr	r2, [pc, #416]	@ (80104f8 <ip4_input+0x22c>)
 8010358:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801035a:	4b67      	ldr	r3, [pc, #412]	@ (80104f8 <ip4_input+0x22c>)
 801035c:	695b      	ldr	r3, [r3, #20]
 801035e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010362:	2be0      	cmp	r3, #224	@ 0xe0
 8010364:	d112      	bne.n	801038c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	b2db      	uxtb	r3, r3
 8010372:	2b00      	cmp	r3, #0
 8010374:	d007      	beq.n	8010386 <ip4_input+0xba>
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	3304      	adds	r3, #4
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d002      	beq.n	8010386 <ip4_input+0xba>
      netif = inp;
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	613b      	str	r3, [r7, #16]
 8010384:	e02a      	b.n	80103dc <ip4_input+0x110>
    } else {
      netif = NULL;
 8010386:	2300      	movs	r3, #0
 8010388:	613b      	str	r3, [r7, #16]
 801038a:	e027      	b.n	80103dc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801038c:	6838      	ldr	r0, [r7, #0]
 801038e:	f7ff ff73 	bl	8010278 <ip4_input_accept>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <ip4_input+0xd2>
      netif = inp;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	613b      	str	r3, [r7, #16]
 801039c:	e01e      	b.n	80103dc <ip4_input+0x110>
    } else {
      netif = NULL;
 801039e:	2300      	movs	r3, #0
 80103a0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80103a2:	4b55      	ldr	r3, [pc, #340]	@ (80104f8 <ip4_input+0x22c>)
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80103aa:	d017      	beq.n	80103dc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80103ac:	4b53      	ldr	r3, [pc, #332]	@ (80104fc <ip4_input+0x230>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	613b      	str	r3, [r7, #16]
 80103b2:	e00e      	b.n	80103d2 <ip4_input+0x106>
          if (netif == inp) {
 80103b4:	693a      	ldr	r2, [r7, #16]
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d006      	beq.n	80103ca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80103bc:	6938      	ldr	r0, [r7, #16]
 80103be:	f7ff ff5b 	bl	8010278 <ip4_input_accept>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d108      	bne.n	80103da <ip4_input+0x10e>
 80103c8:	e000      	b.n	80103cc <ip4_input+0x100>
            continue;
 80103ca:	bf00      	nop
        NETIF_FOREACH(netif) {
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	613b      	str	r3, [r7, #16]
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d1ed      	bne.n	80103b4 <ip4_input+0xe8>
 80103d8:	e000      	b.n	80103dc <ip4_input+0x110>
            break;
 80103da:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80103dc:	4b46      	ldr	r3, [pc, #280]	@ (80104f8 <ip4_input+0x22c>)
 80103de:	691b      	ldr	r3, [r3, #16]
 80103e0:	6839      	ldr	r1, [r7, #0]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f000 f964 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d105      	bne.n	80103fa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80103ee:	4b42      	ldr	r3, [pc, #264]	@ (80104f8 <ip4_input+0x22c>)
 80103f0:	691b      	ldr	r3, [r3, #16]
 80103f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80103f6:	2be0      	cmp	r3, #224	@ 0xe0
 80103f8:	d104      	bne.n	8010404 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7fe f890 	bl	800e520 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010400:	2300      	movs	r3, #0
 8010402:	e074      	b.n	80104ee <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d104      	bne.n	8010414 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7fe f888 	bl	800e520 <pbuf_free>
    return ERR_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	e06c      	b.n	80104ee <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	88db      	ldrh	r3, [r3, #6]
 8010418:	b29b      	uxth	r3, r3
 801041a:	461a      	mov	r2, r3
 801041c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010420:	4013      	ands	r3, r2
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00b      	beq.n	801043e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 fc88 	bl	8010d3c <ip4_reass>
 801042c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d101      	bne.n	8010438 <ip4_input+0x16c>
      return ERR_OK;
 8010434:	2300      	movs	r3, #0
 8010436:	e05a      	b.n	80104ee <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801043e:	4a2e      	ldr	r2, [pc, #184]	@ (80104f8 <ip4_input+0x22c>)
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010444:	4a2c      	ldr	r2, [pc, #176]	@ (80104f8 <ip4_input+0x22c>)
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801044a:	4a2b      	ldr	r2, [pc, #172]	@ (80104f8 <ip4_input+0x22c>)
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	f003 030f 	and.w	r3, r3, #15
 8010458:	b2db      	uxtb	r3, r3
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	b2db      	uxtb	r3, r3
 801045e:	461a      	mov	r2, r3
 8010460:	4b25      	ldr	r3, [pc, #148]	@ (80104f8 <ip4_input+0x22c>)
 8010462:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010464:	89fb      	ldrh	r3, [r7, #14]
 8010466:	4619      	mov	r1, r3
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7fd ffd3 	bl	800e414 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	7a5b      	ldrb	r3, [r3, #9]
 8010472:	2b01      	cmp	r3, #1
 8010474:	d006      	beq.n	8010484 <ip4_input+0x1b8>
 8010476:	2b11      	cmp	r3, #17
 8010478:	d109      	bne.n	801048e <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801047a:	6839      	ldr	r1, [r7, #0]
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7fe fc47 	bl	800ed10 <udp_input>
        break;
 8010482:	e021      	b.n	80104c8 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010484:	6839      	ldr	r1, [r7, #0]
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7ff fcd2 	bl	800fe30 <icmp_input>
        break;
 801048c:	e01c      	b.n	80104c8 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801048e:	4b1a      	ldr	r3, [pc, #104]	@ (80104f8 <ip4_input+0x22c>)
 8010490:	695b      	ldr	r3, [r3, #20]
 8010492:	6939      	ldr	r1, [r7, #16]
 8010494:	4618      	mov	r0, r3
 8010496:	f000 f90b 	bl	80106b0 <ip4_addr_isbroadcast_u32>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d10f      	bne.n	80104c0 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80104a0:	4b15      	ldr	r3, [pc, #84]	@ (80104f8 <ip4_input+0x22c>)
 80104a2:	695b      	ldr	r3, [r3, #20]
 80104a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80104a8:	2be0      	cmp	r3, #224	@ 0xe0
 80104aa:	d009      	beq.n	80104c0 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80104ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104b0:	4619      	mov	r1, r3
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f7fe f821 	bl	800e4fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80104b8:	2102      	movs	r1, #2
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7ff fdd8 	bl	8010070 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7fe f82d 	bl	800e520 <pbuf_free>
        break;
 80104c6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80104c8:	4b0b      	ldr	r3, [pc, #44]	@ (80104f8 <ip4_input+0x22c>)
 80104ca:	2200      	movs	r2, #0
 80104cc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80104ce:	4b0a      	ldr	r3, [pc, #40]	@ (80104f8 <ip4_input+0x22c>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80104d4:	4b08      	ldr	r3, [pc, #32]	@ (80104f8 <ip4_input+0x22c>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80104da:	4b07      	ldr	r3, [pc, #28]	@ (80104f8 <ip4_input+0x22c>)
 80104dc:	2200      	movs	r2, #0
 80104de:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80104e0:	4b05      	ldr	r3, [pc, #20]	@ (80104f8 <ip4_input+0x22c>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80104e6:	4b04      	ldr	r3, [pc, #16]	@ (80104f8 <ip4_input+0x22c>)
 80104e8:	2200      	movs	r2, #0
 80104ea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3718      	adds	r7, #24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	2400c198 	.word	0x2400c198
 80104fc:	24012718 	.word	0x24012718

08010500 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08a      	sub	sp, #40	@ 0x28
 8010504:	af04      	add	r7, sp, #16
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d009      	beq.n	801052c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <ip4_output_if+0x26>
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d102      	bne.n	801052c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010528:	3304      	adds	r3, #4
 801052a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801052c:	78fa      	ldrb	r2, [r7, #3]
 801052e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010530:	9302      	str	r3, [sp, #8]
 8010532:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010536:	9301      	str	r3, [sp, #4]
 8010538:	f897 3020 	ldrb.w	r3, [r7, #32]
 801053c:	9300      	str	r3, [sp, #0]
 801053e:	4613      	mov	r3, r2
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	6979      	ldr	r1, [r7, #20]
 8010544:	68f8      	ldr	r0, [r7, #12]
 8010546:	f000 f805 	bl	8010554 <ip4_output_if_src>
 801054a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801054c:	4618      	mov	r0, r3
 801054e:	3718      	adds	r7, #24
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b088      	sub	sp, #32
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
 8010560:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	7b9b      	ldrb	r3, [r3, #14]
 8010566:	2b01      	cmp	r3, #1
 8010568:	d006      	beq.n	8010578 <ip4_output_if_src+0x24>
 801056a:	4b4b      	ldr	r3, [pc, #300]	@ (8010698 <ip4_output_if_src+0x144>)
 801056c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010570:	494a      	ldr	r1, [pc, #296]	@ (801069c <ip4_output_if_src+0x148>)
 8010572:	484b      	ldr	r0, [pc, #300]	@ (80106a0 <ip4_output_if_src+0x14c>)
 8010574:	f001 f9e4 	bl	8011940 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d060      	beq.n	8010640 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801057e:	2314      	movs	r3, #20
 8010580:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010582:	2114      	movs	r1, #20
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f7fd ff35 	bl	800e3f4 <pbuf_add_header>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d002      	beq.n	8010596 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010590:	f06f 0301 	mvn.w	r3, #1
 8010594:	e07c      	b.n	8010690 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	685b      	ldr	r3, [r3, #4]
 801059a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	895b      	ldrh	r3, [r3, #10]
 80105a0:	2b13      	cmp	r3, #19
 80105a2:	d806      	bhi.n	80105b2 <ip4_output_if_src+0x5e>
 80105a4:	4b3c      	ldr	r3, [pc, #240]	@ (8010698 <ip4_output_if_src+0x144>)
 80105a6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80105aa:	493e      	ldr	r1, [pc, #248]	@ (80106a4 <ip4_output_if_src+0x150>)
 80105ac:	483c      	ldr	r0, [pc, #240]	@ (80106a0 <ip4_output_if_src+0x14c>)
 80105ae:	f001 f9c7 	bl	8011940 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	78fa      	ldrb	r2, [r7, #3]
 80105b6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80105b8:	69fb      	ldr	r3, [r7, #28]
 80105ba:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80105be:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80105c8:	8b7b      	ldrh	r3, [r7, #26]
 80105ca:	089b      	lsrs	r3, r3, #2
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105d4:	b2da      	uxtb	r2, r3
 80105d6:	69fb      	ldr	r3, [r7, #28]
 80105d8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80105e0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	891b      	ldrh	r3, [r3, #8]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fc fb80 	bl	800ccec <lwip_htons>
 80105ec:	4603      	mov	r3, r0
 80105ee:	461a      	mov	r2, r3
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	2200      	movs	r2, #0
 80105f8:	719a      	strb	r2, [r3, #6]
 80105fa:	2200      	movs	r2, #0
 80105fc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80105fe:	4b2a      	ldr	r3, [pc, #168]	@ (80106a8 <ip4_output_if_src+0x154>)
 8010600:	881b      	ldrh	r3, [r3, #0]
 8010602:	4618      	mov	r0, r3
 8010604:	f7fc fb72 	bl	800ccec <lwip_htons>
 8010608:	4603      	mov	r3, r0
 801060a:	461a      	mov	r2, r3
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010610:	4b25      	ldr	r3, [pc, #148]	@ (80106a8 <ip4_output_if_src+0x154>)
 8010612:	881b      	ldrh	r3, [r3, #0]
 8010614:	3301      	adds	r3, #1
 8010616:	b29a      	uxth	r2, r3
 8010618:	4b23      	ldr	r3, [pc, #140]	@ (80106a8 <ip4_output_if_src+0x154>)
 801061a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d104      	bne.n	801062c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010622:	4b22      	ldr	r3, [pc, #136]	@ (80106ac <ip4_output_if_src+0x158>)
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	60da      	str	r2, [r3, #12]
 801062a:	e003      	b.n	8010634 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	2200      	movs	r2, #0
 8010638:	729a      	strb	r2, [r3, #10]
 801063a:	2200      	movs	r2, #0
 801063c:	72da      	strb	r2, [r3, #11]
 801063e:	e00f      	b.n	8010660 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	895b      	ldrh	r3, [r3, #10]
 8010644:	2b13      	cmp	r3, #19
 8010646:	d802      	bhi.n	801064e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010648:	f06f 0301 	mvn.w	r3, #1
 801064c:	e020      	b.n	8010690 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010654:	69fb      	ldr	r3, [r7, #28]
 8010656:	691b      	ldr	r3, [r3, #16]
 8010658:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801065a:	f107 0314 	add.w	r3, r7, #20
 801065e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010662:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010664:	2b00      	cmp	r3, #0
 8010666:	d00c      	beq.n	8010682 <ip4_output_if_src+0x12e>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	891a      	ldrh	r2, [r3, #8]
 801066c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010670:	429a      	cmp	r2, r3
 8010672:	d906      	bls.n	8010682 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f000 fd53 	bl	8011124 <ip4_frag>
 801067e:	4603      	mov	r3, r0
 8010680:	e006      	b.n	8010690 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010684:	695b      	ldr	r3, [r3, #20]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	68f9      	ldr	r1, [r7, #12]
 801068a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801068c:	4798      	blx	r3
 801068e:	4603      	mov	r3, r0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3720      	adds	r7, #32
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	08013b58 	.word	0x08013b58
 801069c:	08013b8c 	.word	0x08013b8c
 80106a0:	08013b98 	.word	0x08013b98
 80106a4:	08013bc0 	.word	0x08013bc0
 80106a8:	24012822 	.word	0x24012822
 80106ac:	08013fc4 	.word	0x08013fc4

080106b0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c4:	d002      	beq.n	80106cc <ip4_addr_isbroadcast_u32+0x1c>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d101      	bne.n	80106d0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80106cc:	2301      	movs	r3, #1
 80106ce:	e02a      	b.n	8010726 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80106d6:	f003 0302 	and.w	r3, r3, #2
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d101      	bne.n	80106e2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	e021      	b.n	8010726 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	3304      	adds	r3, #4
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d101      	bne.n	80106f2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e019      	b.n	8010726 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	3304      	adds	r3, #4
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	405a      	eors	r2, r3
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	3308      	adds	r3, #8
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4013      	ands	r3, r2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d10d      	bne.n	8010724 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	3308      	adds	r3, #8
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	43da      	mvns	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	3308      	adds	r3, #8
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801071c:	429a      	cmp	r2, r3
 801071e:	d101      	bne.n	8010724 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010720:	2301      	movs	r3, #1
 8010722:	e000      	b.n	8010726 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010724:	2300      	movs	r3, #0
  }
}
 8010726:	4618      	mov	r0, r3
 8010728:	3714      	adds	r7, #20
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
	...

08010734 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801073a:	2300      	movs	r3, #0
 801073c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801073e:	4b12      	ldr	r3, [pc, #72]	@ (8010788 <ip_reass_tmr+0x54>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010744:	e018      	b.n	8010778 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	7fdb      	ldrb	r3, [r3, #31]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00b      	beq.n	8010766 <ip_reass_tmr+0x32>
      r->timer--;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	7fdb      	ldrb	r3, [r3, #31]
 8010752:	3b01      	subs	r3, #1
 8010754:	b2da      	uxtb	r2, r3
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	60fb      	str	r3, [r7, #12]
 8010764:	e008      	b.n	8010778 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010770:	68b9      	ldr	r1, [r7, #8]
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 f80a 	bl	801078c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1e3      	bne.n	8010746 <ip_reass_tmr+0x12>
    }
  }
}
 801077e:	bf00      	nop
 8010780:	bf00      	nop
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	24012824 	.word	0x24012824

0801078c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b088      	sub	sp, #32
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801079a:	683a      	ldr	r2, [r7, #0]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d105      	bne.n	80107ae <ip_reass_free_complete_datagram+0x22>
 80107a2:	4b45      	ldr	r3, [pc, #276]	@ (80108b8 <ip_reass_free_complete_datagram+0x12c>)
 80107a4:	22ab      	movs	r2, #171	@ 0xab
 80107a6:	4945      	ldr	r1, [pc, #276]	@ (80108bc <ip_reass_free_complete_datagram+0x130>)
 80107a8:	4845      	ldr	r0, [pc, #276]	@ (80108c0 <ip_reass_free_complete_datagram+0x134>)
 80107aa:	f001 f8c9 	bl	8011940 <iprintf>
  if (prev != NULL) {
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d00a      	beq.n	80107ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d005      	beq.n	80107ca <ip_reass_free_complete_datagram+0x3e>
 80107be:	4b3e      	ldr	r3, [pc, #248]	@ (80108b8 <ip_reass_free_complete_datagram+0x12c>)
 80107c0:	22ad      	movs	r2, #173	@ 0xad
 80107c2:	4940      	ldr	r1, [pc, #256]	@ (80108c4 <ip_reass_free_complete_datagram+0x138>)
 80107c4:	483e      	ldr	r0, [pc, #248]	@ (80108c0 <ip_reass_free_complete_datagram+0x134>)
 80107c6:	f001 f8bb 	bl	8011940 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	889b      	ldrh	r3, [r3, #4]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d12a      	bne.n	8010832 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	6858      	ldr	r0, [r3, #4]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	3308      	adds	r3, #8
 80107f2:	2214      	movs	r2, #20
 80107f4:	4619      	mov	r1, r3
 80107f6:	f001 f9d4 	bl	8011ba2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80107fa:	2101      	movs	r1, #1
 80107fc:	69b8      	ldr	r0, [r7, #24]
 80107fe:	f7ff fc47 	bl	8010090 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010802:	69b8      	ldr	r0, [r7, #24]
 8010804:	f7fd ff1a 	bl	800e63c <pbuf_clen>
 8010808:	4603      	mov	r3, r0
 801080a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801080c:	8bfa      	ldrh	r2, [r7, #30]
 801080e:	8a7b      	ldrh	r3, [r7, #18]
 8010810:	4413      	add	r3, r2
 8010812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010816:	db05      	blt.n	8010824 <ip_reass_free_complete_datagram+0x98>
 8010818:	4b27      	ldr	r3, [pc, #156]	@ (80108b8 <ip_reass_free_complete_datagram+0x12c>)
 801081a:	22bc      	movs	r2, #188	@ 0xbc
 801081c:	492a      	ldr	r1, [pc, #168]	@ (80108c8 <ip_reass_free_complete_datagram+0x13c>)
 801081e:	4828      	ldr	r0, [pc, #160]	@ (80108c0 <ip_reass_free_complete_datagram+0x134>)
 8010820:	f001 f88e 	bl	8011940 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010824:	8bfa      	ldrh	r2, [r7, #30]
 8010826:	8a7b      	ldrh	r3, [r7, #18]
 8010828:	4413      	add	r3, r2
 801082a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801082c:	69b8      	ldr	r0, [r7, #24]
 801082e:	f7fd fe77 	bl	800e520 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010838:	e01f      	b.n	801087a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801084a:	68f8      	ldr	r0, [r7, #12]
 801084c:	f7fd fef6 	bl	800e63c <pbuf_clen>
 8010850:	4603      	mov	r3, r0
 8010852:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010854:	8bfa      	ldrh	r2, [r7, #30]
 8010856:	8a7b      	ldrh	r3, [r7, #18]
 8010858:	4413      	add	r3, r2
 801085a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801085e:	db05      	blt.n	801086c <ip_reass_free_complete_datagram+0xe0>
 8010860:	4b15      	ldr	r3, [pc, #84]	@ (80108b8 <ip_reass_free_complete_datagram+0x12c>)
 8010862:	22cc      	movs	r2, #204	@ 0xcc
 8010864:	4918      	ldr	r1, [pc, #96]	@ (80108c8 <ip_reass_free_complete_datagram+0x13c>)
 8010866:	4816      	ldr	r0, [pc, #88]	@ (80108c0 <ip_reass_free_complete_datagram+0x134>)
 8010868:	f001 f86a 	bl	8011940 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801086c:	8bfa      	ldrh	r2, [r7, #30]
 801086e:	8a7b      	ldrh	r3, [r7, #18]
 8010870:	4413      	add	r3, r2
 8010872:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f7fd fe53 	bl	800e520 <pbuf_free>
  while (p != NULL) {
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d1dc      	bne.n	801083a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010880:	6839      	ldr	r1, [r7, #0]
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 f8c2 	bl	8010a0c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010888:	4b10      	ldr	r3, [pc, #64]	@ (80108cc <ip_reass_free_complete_datagram+0x140>)
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	8bfa      	ldrh	r2, [r7, #30]
 801088e:	429a      	cmp	r2, r3
 8010890:	d905      	bls.n	801089e <ip_reass_free_complete_datagram+0x112>
 8010892:	4b09      	ldr	r3, [pc, #36]	@ (80108b8 <ip_reass_free_complete_datagram+0x12c>)
 8010894:	22d2      	movs	r2, #210	@ 0xd2
 8010896:	490e      	ldr	r1, [pc, #56]	@ (80108d0 <ip_reass_free_complete_datagram+0x144>)
 8010898:	4809      	ldr	r0, [pc, #36]	@ (80108c0 <ip_reass_free_complete_datagram+0x134>)
 801089a:	f001 f851 	bl	8011940 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801089e:	4b0b      	ldr	r3, [pc, #44]	@ (80108cc <ip_reass_free_complete_datagram+0x140>)
 80108a0:	881a      	ldrh	r2, [r3, #0]
 80108a2:	8bfb      	ldrh	r3, [r7, #30]
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	4b08      	ldr	r3, [pc, #32]	@ (80108cc <ip_reass_free_complete_datagram+0x140>)
 80108aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80108ac:	8bfb      	ldrh	r3, [r7, #30]
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3720      	adds	r7, #32
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	08013bf0 	.word	0x08013bf0
 80108bc:	08013c2c 	.word	0x08013c2c
 80108c0:	08013c38 	.word	0x08013c38
 80108c4:	08013c60 	.word	0x08013c60
 80108c8:	08013c74 	.word	0x08013c74
 80108cc:	24012828 	.word	0x24012828
 80108d0:	08013c94 	.word	0x08013c94

080108d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b08a      	sub	sp, #40	@ 0x28
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80108de:	2300      	movs	r3, #0
 80108e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80108e2:	2300      	movs	r3, #0
 80108e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80108ea:	2300      	movs	r3, #0
 80108ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80108f2:	4b28      	ldr	r3, [pc, #160]	@ (8010994 <ip_reass_remove_oldest_datagram+0xc0>)
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80108f8:	e030      	b.n	801095c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80108fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108fc:	695a      	ldr	r2, [r3, #20]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	429a      	cmp	r2, r3
 8010904:	d10c      	bne.n	8010920 <ip_reass_remove_oldest_datagram+0x4c>
 8010906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010908:	699a      	ldr	r2, [r3, #24]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	429a      	cmp	r2, r3
 8010910:	d106      	bne.n	8010920 <ip_reass_remove_oldest_datagram+0x4c>
 8010912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010914:	899a      	ldrh	r2, [r3, #12]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	889b      	ldrh	r3, [r3, #4]
 801091a:	b29b      	uxth	r3, r3
 801091c:	429a      	cmp	r2, r3
 801091e:	d014      	beq.n	801094a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	3301      	adds	r3, #1
 8010924:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010926:	6a3b      	ldr	r3, [r7, #32]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d104      	bne.n	8010936 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	61bb      	str	r3, [r7, #24]
 8010934:	e009      	b.n	801094a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010938:	7fda      	ldrb	r2, [r3, #31]
 801093a:	6a3b      	ldr	r3, [r7, #32]
 801093c:	7fdb      	ldrb	r3, [r3, #31]
 801093e:	429a      	cmp	r2, r3
 8010940:	d803      	bhi.n	801094a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010944:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d001      	beq.n	8010956 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010954:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801095c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1cb      	bne.n	80108fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d008      	beq.n	801097a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010968:	69b9      	ldr	r1, [r7, #24]
 801096a:	6a38      	ldr	r0, [r7, #32]
 801096c:	f7ff ff0e 	bl	801078c <ip_reass_free_complete_datagram>
 8010970:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010972:	697a      	ldr	r2, [r7, #20]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	4413      	add	r3, r2
 8010978:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	da02      	bge.n	8010988 <ip_reass_remove_oldest_datagram+0xb4>
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	2b01      	cmp	r3, #1
 8010986:	dcac      	bgt.n	80108e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010988:	697b      	ldr	r3, [r7, #20]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3728      	adds	r7, #40	@ 0x28
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	24012824 	.word	0x24012824

08010998 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80109a2:	2001      	movs	r0, #1
 80109a4:	f7fc ff26 	bl	800d7f4 <memp_malloc>
 80109a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d110      	bne.n	80109d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff ff8e 	bl	80108d4 <ip_reass_remove_oldest_datagram>
 80109b8:	4602      	mov	r2, r0
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	4293      	cmp	r3, r2
 80109be:	dc03      	bgt.n	80109c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80109c0:	2001      	movs	r0, #1
 80109c2:	f7fc ff17 	bl	800d7f4 <memp_malloc>
 80109c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d101      	bne.n	80109d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80109ce:	2300      	movs	r3, #0
 80109d0:	e016      	b.n	8010a00 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80109d2:	2220      	movs	r2, #32
 80109d4:	2100      	movs	r1, #0
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f001 f817 	bl	8011a0a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	220f      	movs	r2, #15
 80109e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80109e2:	4b09      	ldr	r3, [pc, #36]	@ (8010a08 <ip_reass_enqueue_new_datagram+0x70>)
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80109ea:	4a07      	ldr	r2, [pc, #28]	@ (8010a08 <ip_reass_enqueue_new_datagram+0x70>)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	3308      	adds	r3, #8
 80109f4:	2214      	movs	r2, #20
 80109f6:	6879      	ldr	r1, [r7, #4]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f001 f8d2 	bl	8011ba2 <memcpy>
  return ipr;
 80109fe:	68fb      	ldr	r3, [r7, #12]
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	24012824 	.word	0x24012824

08010a0c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010a16:	4b10      	ldr	r3, [pc, #64]	@ (8010a58 <ip_reass_dequeue_datagram+0x4c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d104      	bne.n	8010a2a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a0c      	ldr	r2, [pc, #48]	@ (8010a58 <ip_reass_dequeue_datagram+0x4c>)
 8010a26:	6013      	str	r3, [r2, #0]
 8010a28:	e00d      	b.n	8010a46 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d106      	bne.n	8010a3e <ip_reass_dequeue_datagram+0x32>
 8010a30:	4b0a      	ldr	r3, [pc, #40]	@ (8010a5c <ip_reass_dequeue_datagram+0x50>)
 8010a32:	f240 1245 	movw	r2, #325	@ 0x145
 8010a36:	490a      	ldr	r1, [pc, #40]	@ (8010a60 <ip_reass_dequeue_datagram+0x54>)
 8010a38:	480a      	ldr	r0, [pc, #40]	@ (8010a64 <ip_reass_dequeue_datagram+0x58>)
 8010a3a:	f000 ff81 	bl	8011940 <iprintf>
    prev->next = ipr->next;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681a      	ldr	r2, [r3, #0]
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	2001      	movs	r0, #1
 8010a4a:	f7fc ff49 	bl	800d8e0 <memp_free>
}
 8010a4e:	bf00      	nop
 8010a50:	3708      	adds	r7, #8
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	24012824 	.word	0x24012824
 8010a5c:	08013bf0 	.word	0x08013bf0
 8010a60:	08013cb8 	.word	0x08013cb8
 8010a64:	08013c38 	.word	0x08013c38

08010a68 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b08c      	sub	sp, #48	@ 0x30
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	885b      	ldrh	r3, [r3, #2]
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7fc f92f 	bl	800ccec <lwip_htons>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	781b      	ldrb	r3, [r3, #0]
 8010a96:	f003 030f 	and.w	r3, r3, #15
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010aa0:	7e7b      	ldrb	r3, [r7, #25]
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	8b7a      	ldrh	r2, [r7, #26]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d202      	bcs.n	8010ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8010aae:	e135      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010ab0:	7e7b      	ldrb	r3, [r7, #25]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	8b7a      	ldrh	r2, [r7, #26]
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	88db      	ldrh	r3, [r3, #6]
 8010abe:	b29b      	uxth	r3, r3
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fc f913 	bl	800ccec <lwip_htons>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8010ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ada:	2200      	movs	r2, #0
 8010adc:	701a      	strb	r2, [r3, #0]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	705a      	strb	r2, [r3, #1]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	709a      	strb	r2, [r3, #2]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aec:	8afa      	ldrh	r2, [r7, #22]
 8010aee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010af0:	8afa      	ldrh	r2, [r7, #22]
 8010af2:	8b7b      	ldrh	r3, [r7, #26]
 8010af4:	4413      	add	r3, r2
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afe:	88db      	ldrh	r3, [r3, #6]
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	8afa      	ldrh	r2, [r7, #22]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d902      	bls.n	8010b0e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b08:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0c:	e106      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b14:	e068      	b.n	8010be8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1e:	889b      	ldrh	r3, [r3, #4]
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	889b      	ldrh	r3, [r3, #4]
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d235      	bcs.n	8010b98 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b30:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d020      	beq.n	8010b7a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3a:	889b      	ldrh	r3, [r3, #4]
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b40:	88db      	ldrh	r3, [r3, #6]
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d307      	bcc.n	8010b58 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4a:	88db      	ldrh	r3, [r3, #6]
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	889b      	ldrh	r3, [r3, #4]
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d902      	bls.n	8010b5e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b58:	f04f 33ff 	mov.w	r3, #4294967295
 8010b5c:	e0de      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b60:	68ba      	ldr	r2, [r7, #8]
 8010b62:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b66:	88db      	ldrh	r3, [r3, #6]
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6c:	889b      	ldrh	r3, [r3, #4]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d03d      	beq.n	8010bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b74:	2300      	movs	r3, #0
 8010b76:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010b78:	e03a      	b.n	8010bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7c:	88db      	ldrh	r3, [r3, #6]
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	889b      	ldrh	r3, [r3, #4]
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d902      	bls.n	8010b90 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010b8e:	e0c5      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	605a      	str	r2, [r3, #4]
      break;
 8010b96:	e02b      	b.n	8010bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9a:	889b      	ldrh	r3, [r3, #4]
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	889b      	ldrh	r3, [r3, #4]
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d102      	bne.n	8010bae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8010bac:	e0b6      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb0:	889b      	ldrh	r3, [r3, #4]
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	88db      	ldrh	r3, [r3, #6]
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d202      	bcs.n	8010bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc2:	e0ab      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d009      	beq.n	8010bde <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bcc:	88db      	ldrh	r3, [r3, #6]
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	889b      	ldrh	r3, [r3, #4]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d001      	beq.n	8010bde <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8010be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d193      	bne.n	8010b16 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010bee:	e000      	b.n	8010bf2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010bf0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d12d      	bne.n	8010c54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d01c      	beq.n	8010c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c00:	88db      	ldrh	r3, [r3, #6]
 8010c02:	b29a      	uxth	r2, r3
 8010c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c06:	889b      	ldrh	r3, [r3, #4]
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d906      	bls.n	8010c1c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010c0e:	4b45      	ldr	r3, [pc, #276]	@ (8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c10:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010c14:	4944      	ldr	r1, [pc, #272]	@ (8010d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010c16:	4845      	ldr	r0, [pc, #276]	@ (8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c18:	f000 fe92 	bl	8011940 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c24:	88db      	ldrh	r3, [r3, #6]
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c2a:	889b      	ldrh	r3, [r3, #4]
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d010      	beq.n	8010c54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010c32:	2300      	movs	r3, #0
 8010c34:	623b      	str	r3, [r7, #32]
 8010c36:	e00d      	b.n	8010c54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d006      	beq.n	8010c4e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010c40:	4b38      	ldr	r3, [pc, #224]	@ (8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c42:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8010c46:	493a      	ldr	r1, [pc, #232]	@ (8010d30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010c48:	4838      	ldr	r0, [pc, #224]	@ (8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c4a:	f000 fe79 	bl	8011940 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d105      	bne.n	8010c66 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	7f9b      	ldrb	r3, [r3, #30]
 8010c5e:	f003 0301 	and.w	r3, r3, #1
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d059      	beq.n	8010d1a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010c66:	6a3b      	ldr	r3, [r7, #32]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d04f      	beq.n	8010d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d006      	beq.n	8010c82 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	889b      	ldrh	r3, [r3, #4]
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010c82:	2300      	movs	r3, #0
 8010c84:	623b      	str	r3, [r7, #32]
 8010c86:	e041      	b.n	8010d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8010c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010c92:	e012      	b.n	8010cba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8010c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c9c:	88db      	ldrh	r3, [r3, #6]
 8010c9e:	b29a      	uxth	r2, r3
 8010ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca2:	889b      	ldrh	r3, [r3, #4]
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d002      	beq.n	8010cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	623b      	str	r3, [r7, #32]
            break;
 8010cae:	e007      	b.n	8010cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8010cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d1e9      	bne.n	8010c94 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010cc0:	6a3b      	ldr	r3, [r7, #32]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d022      	beq.n	8010d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d106      	bne.n	8010cdc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010cce:	4b15      	ldr	r3, [pc, #84]	@ (8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010cd0:	f240 12df 	movw	r2, #479	@ 0x1df
 8010cd4:	4917      	ldr	r1, [pc, #92]	@ (8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010cd6:	4815      	ldr	r0, [pc, #84]	@ (8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010cd8:	f000 fe32 	bl	8011940 <iprintf>
          LWIP_ASSERT("sanity check",
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d106      	bne.n	8010cf6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010cea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010cee:	4911      	ldr	r1, [pc, #68]	@ (8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010cf0:	480e      	ldr	r0, [pc, #56]	@ (8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010cf2:	f000 fe25 	bl	8011940 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d006      	beq.n	8010d0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010cfe:	4b09      	ldr	r3, [pc, #36]	@ (8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d00:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010d04:	490c      	ldr	r1, [pc, #48]	@ (8010d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010d06:	4809      	ldr	r0, [pc, #36]	@ (8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d08:	f000 fe1a 	bl	8011940 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	bf14      	ite	ne
 8010d12:	2301      	movne	r3, #1
 8010d14:	2300      	moveq	r3, #0
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	e000      	b.n	8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010d1a:	2300      	movs	r3, #0
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3730      	adds	r7, #48	@ 0x30
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	08013bf0 	.word	0x08013bf0
 8010d28:	08013cd4 	.word	0x08013cd4
 8010d2c:	08013c38 	.word	0x08013c38
 8010d30:	08013cf4 	.word	0x08013cf4
 8010d34:	08013d2c 	.word	0x08013d2c
 8010d38:	08013d3c 	.word	0x08013d3c

08010d3c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08e      	sub	sp, #56	@ 0x38
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	685b      	ldr	r3, [r3, #4]
 8010d48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	f003 030f 	and.w	r3, r3, #15
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	2b14      	cmp	r3, #20
 8010d5a:	f040 8171 	bne.w	8011040 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d60:	88db      	ldrh	r3, [r3, #6]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fb ffc1 	bl	800ccec <lwip_htons>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	00db      	lsls	r3, r3, #3
 8010d74:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d78:	885b      	ldrh	r3, [r3, #2]
 8010d7a:	b29b      	uxth	r3, r3
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fb ffb5 	bl	800ccec <lwip_htons>
 8010d82:	4603      	mov	r3, r0
 8010d84:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	f003 030f 	and.w	r3, r3, #15
 8010d8e:	b2db      	uxtb	r3, r3
 8010d90:	009b      	lsls	r3, r3, #2
 8010d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	f0c0 8150 	bcc.w	8011044 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010da4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f7fd fc43 	bl	800e63c <pbuf_clen>
 8010db6:	4603      	mov	r3, r0
 8010db8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010dba:	4b8c      	ldr	r3, [pc, #560]	@ (8010fec <ip4_reass+0x2b0>)
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	8c3b      	ldrh	r3, [r7, #32]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	2b0a      	cmp	r3, #10
 8010dc6:	dd10      	ble.n	8010dea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010dc8:	8c3b      	ldrh	r3, [r7, #32]
 8010dca:	4619      	mov	r1, r3
 8010dcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dce:	f7ff fd81 	bl	80108d4 <ip_reass_remove_oldest_datagram>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 8137 	beq.w	8011048 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010dda:	4b84      	ldr	r3, [pc, #528]	@ (8010fec <ip4_reass+0x2b0>)
 8010ddc:	881b      	ldrh	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	8c3b      	ldrh	r3, [r7, #32]
 8010de2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010de4:	2b0a      	cmp	r3, #10
 8010de6:	f300 812f 	bgt.w	8011048 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010dea:	4b81      	ldr	r3, [pc, #516]	@ (8010ff0 <ip4_reass+0x2b4>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8010df0:	e015      	b.n	8010e1e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df4:	695a      	ldr	r2, [r3, #20]
 8010df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d10c      	bne.n	8010e18 <ip4_reass+0xdc>
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e00:	699a      	ldr	r2, [r3, #24]
 8010e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e04:	691b      	ldr	r3, [r3, #16]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d106      	bne.n	8010e18 <ip4_reass+0xdc>
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0c:	899a      	ldrh	r2, [r3, #12]
 8010e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e10:	889b      	ldrh	r3, [r3, #4]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d006      	beq.n	8010e26 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1e6      	bne.n	8010df2 <ip4_reass+0xb6>
 8010e24:	e000      	b.n	8010e28 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010e26:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d109      	bne.n	8010e42 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010e2e:	8c3b      	ldrh	r3, [r7, #32]
 8010e30:	4619      	mov	r1, r3
 8010e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e34:	f7ff fdb0 	bl	8010998 <ip_reass_enqueue_new_datagram>
 8010e38:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d11c      	bne.n	8010e7a <ip4_reass+0x13e>
      goto nullreturn;
 8010e40:	e105      	b.n	801104e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e44:	88db      	ldrh	r3, [r3, #6]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fb ff4f 	bl	800ccec <lwip_htons>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d110      	bne.n	8010e7a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5a:	89db      	ldrh	r3, [r3, #14]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fb ff45 	bl	800ccec <lwip_htons>
 8010e62:	4603      	mov	r3, r0
 8010e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d006      	beq.n	8010e7a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e6e:	3308      	adds	r3, #8
 8010e70:	2214      	movs	r2, #20
 8010e72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e74:	4618      	mov	r0, r3
 8010e76:	f000 fe94 	bl	8011ba2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e7c:	88db      	ldrh	r3, [r3, #6]
 8010e7e:	b29b      	uxth	r3, r3
 8010e80:	f003 0320 	and.w	r3, r3, #32
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	bf0c      	ite	eq
 8010e88:	2301      	moveq	r3, #1
 8010e8a:	2300      	movne	r3, #0
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00e      	beq.n	8010eb4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010e98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e9a:	4413      	add	r3, r2
 8010e9c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010e9e:	8b7a      	ldrh	r2, [r7, #26]
 8010ea0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	f0c0 80a0 	bcc.w	8010fe8 <ip4_reass+0x2ac>
 8010ea8:	8b7b      	ldrh	r3, [r7, #26]
 8010eaa:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	f200 809a 	bhi.w	8010fe8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010eb4:	69fa      	ldr	r2, [r7, #28]
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010eba:	f7ff fdd5 	bl	8010a68 <ip_reass_chain_frag_into_datagram_and_validate>
 8010ebe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec6:	f000 809b 	beq.w	8011000 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010eca:	4b48      	ldr	r3, [pc, #288]	@ (8010fec <ip4_reass+0x2b0>)
 8010ecc:	881a      	ldrh	r2, [r3, #0]
 8010ece:	8c3b      	ldrh	r3, [r7, #32]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	4b45      	ldr	r3, [pc, #276]	@ (8010fec <ip4_reass+0x2b0>)
 8010ed6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00d      	beq.n	8010efa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010ede:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010ee0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ee2:	4413      	add	r3, r2
 8010ee4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ee8:	8a7a      	ldrh	r2, [r7, #18]
 8010eea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eee:	7f9b      	ldrb	r3, [r3, #30]
 8010ef0:	f043 0301 	orr.w	r3, r3, #1
 8010ef4:	b2da      	uxtb	r2, r3
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	d171      	bne.n	8010fe4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f02:	8b9b      	ldrh	r3, [r3, #28]
 8010f04:	3314      	adds	r3, #20
 8010f06:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1c:	3308      	adds	r3, #8
 8010f1e:	2214      	movs	r2, #20
 8010f20:	4619      	mov	r1, r3
 8010f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f24:	f000 fe3d 	bl	8011ba2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010f28:	8a3b      	ldrh	r3, [r7, #16]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fb fede 	bl	800ccec <lwip_htons>
 8010f30:	4603      	mov	r3, r0
 8010f32:	461a      	mov	r2, r3
 8010f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f36:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	719a      	strb	r2, [r3, #6]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f44:	2200      	movs	r2, #0
 8010f46:	729a      	strb	r2, [r3, #10]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010f52:	e00d      	b.n	8010f70 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010f5a:	2114      	movs	r1, #20
 8010f5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010f5e:	f7fd fa59 	bl	800e414 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010f62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7fd fba9 	bl	800e6bc <pbuf_cat>
      r = iprh->next_pbuf;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d1ee      	bne.n	8010f54 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010f76:	4b1e      	ldr	r3, [pc, #120]	@ (8010ff0 <ip4_reass+0x2b4>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d102      	bne.n	8010f86 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010f80:	2300      	movs	r3, #0
 8010f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f84:	e010      	b.n	8010fa8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f86:	4b1a      	ldr	r3, [pc, #104]	@ (8010ff0 <ip4_reass+0x2b4>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f8c:	e007      	b.n	8010f9e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d006      	beq.n	8010fa6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d1f4      	bne.n	8010f8e <ip4_reass+0x252>
 8010fa4:	e000      	b.n	8010fa8 <ip4_reass+0x26c>
          break;
 8010fa6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010fa8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010fac:	f7ff fd2e 	bl	8010a0c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7fd fb43 	bl	800e63c <pbuf_clen>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010fba:	4b0c      	ldr	r3, [pc, #48]	@ (8010fec <ip4_reass+0x2b0>)
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	8c3a      	ldrh	r2, [r7, #32]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d906      	bls.n	8010fd2 <ip4_reass+0x296>
 8010fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8010ff4 <ip4_reass+0x2b8>)
 8010fc6:	f240 229b 	movw	r2, #667	@ 0x29b
 8010fca:	490b      	ldr	r1, [pc, #44]	@ (8010ff8 <ip4_reass+0x2bc>)
 8010fcc:	480b      	ldr	r0, [pc, #44]	@ (8010ffc <ip4_reass+0x2c0>)
 8010fce:	f000 fcb7 	bl	8011940 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010fd2:	4b06      	ldr	r3, [pc, #24]	@ (8010fec <ip4_reass+0x2b0>)
 8010fd4:	881a      	ldrh	r2, [r3, #0]
 8010fd6:	8c3b      	ldrh	r3, [r7, #32]
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	4b03      	ldr	r3, [pc, #12]	@ (8010fec <ip4_reass+0x2b0>)
 8010fde:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	e038      	b.n	8011056 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	e036      	b.n	8011056 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010fe8:	bf00      	nop
 8010fea:	e00a      	b.n	8011002 <ip4_reass+0x2c6>
 8010fec:	24012828 	.word	0x24012828
 8010ff0:	24012824 	.word	0x24012824
 8010ff4:	08013bf0 	.word	0x08013bf0
 8010ff8:	08013d60 	.word	0x08013d60
 8010ffc:	08013c38 	.word	0x08013c38
    goto nullreturn_ipr;
 8011000:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011004:	2b00      	cmp	r3, #0
 8011006:	d106      	bne.n	8011016 <ip4_reass+0x2da>
 8011008:	4b15      	ldr	r3, [pc, #84]	@ (8011060 <ip4_reass+0x324>)
 801100a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801100e:	4915      	ldr	r1, [pc, #84]	@ (8011064 <ip4_reass+0x328>)
 8011010:	4815      	ldr	r0, [pc, #84]	@ (8011068 <ip4_reass+0x32c>)
 8011012:	f000 fc95 	bl	8011940 <iprintf>
  if (ipr->p == NULL) {
 8011016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d116      	bne.n	801104c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801101e:	4b13      	ldr	r3, [pc, #76]	@ (801106c <ip4_reass+0x330>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011024:	429a      	cmp	r2, r3
 8011026:	d006      	beq.n	8011036 <ip4_reass+0x2fa>
 8011028:	4b0d      	ldr	r3, [pc, #52]	@ (8011060 <ip4_reass+0x324>)
 801102a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801102e:	4910      	ldr	r1, [pc, #64]	@ (8011070 <ip4_reass+0x334>)
 8011030:	480d      	ldr	r0, [pc, #52]	@ (8011068 <ip4_reass+0x32c>)
 8011032:	f000 fc85 	bl	8011940 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011036:	2100      	movs	r1, #0
 8011038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801103a:	f7ff fce7 	bl	8010a0c <ip_reass_dequeue_datagram>
 801103e:	e006      	b.n	801104e <ip4_reass+0x312>
    goto nullreturn;
 8011040:	bf00      	nop
 8011042:	e004      	b.n	801104e <ip4_reass+0x312>
    goto nullreturn;
 8011044:	bf00      	nop
 8011046:	e002      	b.n	801104e <ip4_reass+0x312>
      goto nullreturn;
 8011048:	bf00      	nop
 801104a:	e000      	b.n	801104e <ip4_reass+0x312>
  }

nullreturn:
 801104c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f7fd fa66 	bl	800e520 <pbuf_free>
  return NULL;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3738      	adds	r7, #56	@ 0x38
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	08013bf0 	.word	0x08013bf0
 8011064:	08013d7c 	.word	0x08013d7c
 8011068:	08013c38 	.word	0x08013c38
 801106c:	24012824 	.word	0x24012824
 8011070:	08013d88 	.word	0x08013d88

08011074 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011078:	2002      	movs	r0, #2
 801107a:	f7fc fbbb 	bl	800d7f4 <memp_malloc>
 801107e:	4603      	mov	r3, r0
}
 8011080:	4618      	mov	r0, r3
 8011082:	bd80      	pop	{r7, pc}

08011084 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d106      	bne.n	80110a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011092:	4b07      	ldr	r3, [pc, #28]	@ (80110b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011094:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011098:	4906      	ldr	r1, [pc, #24]	@ (80110b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801109a:	4807      	ldr	r0, [pc, #28]	@ (80110b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801109c:	f000 fc50 	bl	8011940 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80110a0:	6879      	ldr	r1, [r7, #4]
 80110a2:	2002      	movs	r0, #2
 80110a4:	f7fc fc1c 	bl	800d8e0 <memp_free>
}
 80110a8:	bf00      	nop
 80110aa:	3708      	adds	r7, #8
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	08013bf0 	.word	0x08013bf0
 80110b4:	08013da8 	.word	0x08013da8
 80110b8:	08013c38 	.word	0x08013c38

080110bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d106      	bne.n	80110dc <ipfrag_free_pbuf_custom+0x20>
 80110ce:	4b11      	ldr	r3, [pc, #68]	@ (8011114 <ipfrag_free_pbuf_custom+0x58>)
 80110d0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80110d4:	4910      	ldr	r1, [pc, #64]	@ (8011118 <ipfrag_free_pbuf_custom+0x5c>)
 80110d6:	4811      	ldr	r0, [pc, #68]	@ (801111c <ipfrag_free_pbuf_custom+0x60>)
 80110d8:	f000 fc32 	bl	8011940 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d006      	beq.n	80110f2 <ipfrag_free_pbuf_custom+0x36>
 80110e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011114 <ipfrag_free_pbuf_custom+0x58>)
 80110e6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80110ea:	490d      	ldr	r1, [pc, #52]	@ (8011120 <ipfrag_free_pbuf_custom+0x64>)
 80110ec:	480b      	ldr	r0, [pc, #44]	@ (801111c <ipfrag_free_pbuf_custom+0x60>)
 80110ee:	f000 fc27 	bl	8011940 <iprintf>
  if (pcr->original != NULL) {
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	695b      	ldr	r3, [r3, #20]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d004      	beq.n	8011104 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	695b      	ldr	r3, [r3, #20]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fd fa0e 	bl	800e520 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7ff ffbd 	bl	8011084 <ip_frag_free_pbuf_custom_ref>
}
 801110a:	bf00      	nop
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	08013bf0 	.word	0x08013bf0
 8011118:	08013db4 	.word	0x08013db4
 801111c:	08013c38 	.word	0x08013c38
 8011120:	08013dc0 	.word	0x08013dc0

08011124 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b094      	sub	sp, #80	@ 0x50
 8011128:	af02      	add	r7, sp, #8
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	60b9      	str	r1, [r7, #8]
 801112e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011130:	2300      	movs	r3, #0
 8011132:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801113a:	3b14      	subs	r3, #20
 801113c:	2b00      	cmp	r3, #0
 801113e:	da00      	bge.n	8011142 <ip4_frag+0x1e>
 8011140:	3307      	adds	r3, #7
 8011142:	10db      	asrs	r3, r3, #3
 8011144:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011146:	2314      	movs	r3, #20
 8011148:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8011150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011152:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	f003 030f 	and.w	r3, r3, #15
 801115c:	b2db      	uxtb	r3, r3
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	b2db      	uxtb	r3, r3
 8011162:	2b14      	cmp	r3, #20
 8011164:	d002      	beq.n	801116c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011166:	f06f 0305 	mvn.w	r3, #5
 801116a:	e110      	b.n	801138e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	895b      	ldrh	r3, [r3, #10]
 8011170:	2b13      	cmp	r3, #19
 8011172:	d809      	bhi.n	8011188 <ip4_frag+0x64>
 8011174:	4b88      	ldr	r3, [pc, #544]	@ (8011398 <ip4_frag+0x274>)
 8011176:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801117a:	4988      	ldr	r1, [pc, #544]	@ (801139c <ip4_frag+0x278>)
 801117c:	4888      	ldr	r0, [pc, #544]	@ (80113a0 <ip4_frag+0x27c>)
 801117e:	f000 fbdf 	bl	8011940 <iprintf>
 8011182:	f06f 0305 	mvn.w	r3, #5
 8011186:	e102      	b.n	801138e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118a:	88db      	ldrh	r3, [r3, #6]
 801118c:	b29b      	uxth	r3, r3
 801118e:	4618      	mov	r0, r3
 8011190:	f7fb fdac 	bl	800ccec <lwip_htons>
 8011194:	4603      	mov	r3, r0
 8011196:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011198:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801119a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801119e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80111a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80111a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	891b      	ldrh	r3, [r3, #8]
 80111ae:	3b14      	subs	r3, #20
 80111b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80111b4:	e0e1      	b.n	801137a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80111b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80111c0:	4293      	cmp	r3, r2
 80111c2:	bf28      	it	cs
 80111c4:	4613      	movcs	r3, r2
 80111c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80111c8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80111cc:	2114      	movs	r1, #20
 80111ce:	200e      	movs	r0, #14
 80111d0:	f7fc fec2 	bl	800df58 <pbuf_alloc>
 80111d4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80111d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d8:	2b00      	cmp	r3, #0
 80111da:	f000 80d5 	beq.w	8011388 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80111de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e0:	895b      	ldrh	r3, [r3, #10]
 80111e2:	2b13      	cmp	r3, #19
 80111e4:	d806      	bhi.n	80111f4 <ip4_frag+0xd0>
 80111e6:	4b6c      	ldr	r3, [pc, #432]	@ (8011398 <ip4_frag+0x274>)
 80111e8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80111ec:	496d      	ldr	r1, [pc, #436]	@ (80113a4 <ip4_frag+0x280>)
 80111ee:	486c      	ldr	r0, [pc, #432]	@ (80113a0 <ip4_frag+0x27c>)
 80111f0:	f000 fba6 	bl	8011940 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80111f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	2214      	movs	r2, #20
 80111fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80111fc:	4618      	mov	r0, r3
 80111fe:	f000 fcd0 	bl	8011ba2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011208:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801120a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801120e:	e064      	b.n	80112da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	895a      	ldrh	r2, [r3, #10]
 8011214:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	895b      	ldrh	r3, [r3, #10]
 801121e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011220:	429a      	cmp	r2, r3
 8011222:	d906      	bls.n	8011232 <ip4_frag+0x10e>
 8011224:	4b5c      	ldr	r3, [pc, #368]	@ (8011398 <ip4_frag+0x274>)
 8011226:	f240 322d 	movw	r2, #813	@ 0x32d
 801122a:	495f      	ldr	r1, [pc, #380]	@ (80113a8 <ip4_frag+0x284>)
 801122c:	485c      	ldr	r0, [pc, #368]	@ (80113a0 <ip4_frag+0x27c>)
 801122e:	f000 fb87 	bl	8011940 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011232:	8bfa      	ldrh	r2, [r7, #30]
 8011234:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011238:	4293      	cmp	r3, r2
 801123a:	bf28      	it	cs
 801123c:	4613      	movcs	r3, r2
 801123e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011242:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011246:	2b00      	cmp	r3, #0
 8011248:	d105      	bne.n	8011256 <ip4_frag+0x132>
        poff = 0;
 801124a:	2300      	movs	r3, #0
 801124c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	60fb      	str	r3, [r7, #12]
        continue;
 8011254:	e041      	b.n	80112da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011256:	f7ff ff0d 	bl	8011074 <ip_frag_alloc_pbuf_custom_ref>
 801125a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d103      	bne.n	801126a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011264:	f7fd f95c 	bl	800e520 <pbuf_free>
        goto memerr;
 8011268:	e08f      	b.n	801138a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801126a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011270:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011272:	4413      	add	r3, r2
 8011274:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8011278:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801127c:	9201      	str	r2, [sp, #4]
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	4603      	mov	r3, r0
 8011282:	2241      	movs	r2, #65	@ 0x41
 8011284:	2000      	movs	r0, #0
 8011286:	f7fc ff91 	bl	800e1ac <pbuf_alloced_custom>
 801128a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d106      	bne.n	80112a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011292:	69b8      	ldr	r0, [r7, #24]
 8011294:	f7ff fef6 	bl	8011084 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011298:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801129a:	f7fd f941 	bl	800e520 <pbuf_free>
        goto memerr;
 801129e:	e074      	b.n	801138a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80112a0:	68f8      	ldr	r0, [r7, #12]
 80112a2:	f7fd f9e3 	bl	800e66c <pbuf_ref>
      pcr->original = p;
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	4a3f      	ldr	r2, [pc, #252]	@ (80113ac <ip4_frag+0x288>)
 80112b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80112b2:	6979      	ldr	r1, [r7, #20]
 80112b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112b6:	f7fd fa01 	bl	800e6bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80112ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80112be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80112c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d004      	beq.n	80112da <ip4_frag+0x1b6>
        poff = 0;
 80112d0:	2300      	movs	r3, #0
 80112d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80112da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d196      	bne.n	8011210 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80112e2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80112e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80112e8:	4413      	add	r3, r2
 80112ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80112f0:	f1a3 0213 	sub.w	r2, r3, #19
 80112f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80112f8:	429a      	cmp	r2, r3
 80112fa:	bfcc      	ite	gt
 80112fc:	2301      	movgt	r3, #1
 80112fe:	2300      	movle	r3, #0
 8011300:	b2db      	uxtb	r3, r3
 8011302:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801130c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801130e:	6a3b      	ldr	r3, [r7, #32]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d002      	beq.n	801131a <ip4_frag+0x1f6>
 8011314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011316:	2b00      	cmp	r3, #0
 8011318:	d003      	beq.n	8011322 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801131a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801131c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011320:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011322:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011324:	4618      	mov	r0, r3
 8011326:	f7fb fce1 	bl	800ccec <lwip_htons>
 801132a:	4603      	mov	r3, r0
 801132c:	461a      	mov	r2, r3
 801132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011330:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011332:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011334:	3314      	adds	r3, #20
 8011336:	b29b      	uxth	r3, r3
 8011338:	4618      	mov	r0, r3
 801133a:	f7fb fcd7 	bl	800ccec <lwip_htons>
 801133e:	4603      	mov	r3, r0
 8011340:	461a      	mov	r2, r3
 8011342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011344:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011348:	2200      	movs	r2, #0
 801134a:	729a      	strb	r2, [r3, #10]
 801134c:	2200      	movs	r2, #0
 801134e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	695b      	ldr	r3, [r3, #20]
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011358:	68b8      	ldr	r0, [r7, #8]
 801135a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801135c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801135e:	f7fd f8df 	bl	800e520 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011362:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011366:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011368:	1ad3      	subs	r3, r2, r3
 801136a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801136e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011372:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011374:	4413      	add	r3, r2
 8011376:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801137a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801137e:	2b00      	cmp	r3, #0
 8011380:	f47f af19 	bne.w	80111b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	e002      	b.n	801138e <ip4_frag+0x26a>
      goto memerr;
 8011388:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801138e:	4618      	mov	r0, r3
 8011390:	3748      	adds	r7, #72	@ 0x48
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	08013bf0 	.word	0x08013bf0
 801139c:	08013dcc 	.word	0x08013dcc
 80113a0:	08013c38 	.word	0x08013c38
 80113a4:	08013de8 	.word	0x08013de8
 80113a8:	08013e08 	.word	0x08013e08
 80113ac:	080110bd 	.word	0x080110bd

080113b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80113ba:	230e      	movs	r3, #14
 80113bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	895b      	ldrh	r3, [r3, #10]
 80113c2:	2b0e      	cmp	r3, #14
 80113c4:	d96e      	bls.n	80114a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7bdb      	ldrb	r3, [r3, #15]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d106      	bne.n	80113dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80113d4:	3301      	adds	r3, #1
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	685b      	ldr	r3, [r3, #4]
 80113e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	7b1a      	ldrb	r2, [r3, #12]
 80113e6:	7b5b      	ldrb	r3, [r3, #13]
 80113e8:	021b      	lsls	r3, r3, #8
 80113ea:	4313      	orrs	r3, r2
 80113ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	f003 0301 	and.w	r3, r3, #1
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d023      	beq.n	8011442 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d10f      	bne.n	8011422 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	785b      	ldrb	r3, [r3, #1]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d11b      	bne.n	8011442 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801140e:	2b5e      	cmp	r3, #94	@ 0x5e
 8011410:	d117      	bne.n	8011442 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	7b5b      	ldrb	r3, [r3, #13]
 8011416:	f043 0310 	orr.w	r3, r3, #16
 801141a:	b2da      	uxtb	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	735a      	strb	r2, [r3, #13]
 8011420:	e00f      	b.n	8011442 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	2206      	movs	r2, #6
 8011426:	4928      	ldr	r1, [pc, #160]	@ (80114c8 <ethernet_input+0x118>)
 8011428:	4618      	mov	r0, r3
 801142a:	f000 fade 	bl	80119ea <memcmp>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d106      	bne.n	8011442 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	7b5b      	ldrb	r3, [r3, #13]
 8011438:	f043 0308 	orr.w	r3, r3, #8
 801143c:	b2da      	uxtb	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011442:	89fb      	ldrh	r3, [r7, #14]
 8011444:	2b08      	cmp	r3, #8
 8011446:	d003      	beq.n	8011450 <ethernet_input+0xa0>
 8011448:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801144c:	d014      	beq.n	8011478 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801144e:	e032      	b.n	80114b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011456:	f003 0308 	and.w	r3, r3, #8
 801145a:	2b00      	cmp	r3, #0
 801145c:	d024      	beq.n	80114a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801145e:	8afb      	ldrh	r3, [r7, #22]
 8011460:	4619      	mov	r1, r3
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7fc ffd6 	bl	800e414 <pbuf_remove_header>
 8011468:	4603      	mov	r3, r0
 801146a:	2b00      	cmp	r3, #0
 801146c:	d11e      	bne.n	80114ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 801146e:	6839      	ldr	r1, [r7, #0]
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7fe ff2b 	bl	80102cc <ip4_input>
      break;
 8011476:	e013      	b.n	80114a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801147e:	f003 0308 	and.w	r3, r3, #8
 8011482:	2b00      	cmp	r3, #0
 8011484:	d014      	beq.n	80114b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011486:	8afb      	ldrh	r3, [r7, #22]
 8011488:	4619      	mov	r1, r3
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7fc ffc2 	bl	800e414 <pbuf_remove_header>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10e      	bne.n	80114b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011496:	6839      	ldr	r1, [r7, #0]
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f7fe f8a5 	bl	800f5e8 <etharp_input>
      break;
 801149e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	e00c      	b.n	80114be <ethernet_input+0x10e>
    goto free_and_return;
 80114a4:	bf00      	nop
 80114a6:	e006      	b.n	80114b6 <ethernet_input+0x106>
        goto free_and_return;
 80114a8:	bf00      	nop
 80114aa:	e004      	b.n	80114b6 <ethernet_input+0x106>
        goto free_and_return;
 80114ac:	bf00      	nop
 80114ae:	e002      	b.n	80114b6 <ethernet_input+0x106>
        goto free_and_return;
 80114b0:	bf00      	nop
 80114b2:	e000      	b.n	80114b6 <ethernet_input+0x106>
        goto free_and_return;
 80114b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7fd f832 	bl	800e520 <pbuf_free>
  return ERR_OK;
 80114bc:	2300      	movs	r3, #0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3718      	adds	r7, #24
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	08013fc8 	.word	0x08013fc8

080114cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b086      	sub	sp, #24
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	60f8      	str	r0, [r7, #12]
 80114d4:	60b9      	str	r1, [r7, #8]
 80114d6:	607a      	str	r2, [r7, #4]
 80114d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80114da:	8c3b      	ldrh	r3, [r7, #32]
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fb fc05 	bl	800ccec <lwip_htons>
 80114e2:	4603      	mov	r3, r0
 80114e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80114e6:	210e      	movs	r1, #14
 80114e8:	68b8      	ldr	r0, [r7, #8]
 80114ea:	f7fc ff83 	bl	800e3f4 <pbuf_add_header>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d125      	bne.n	8011540 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	8afa      	ldrh	r2, [r7, #22]
 80114fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	2206      	movs	r2, #6
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	4618      	mov	r0, r3
 8011508:	f000 fb4b 	bl	8011ba2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	3306      	adds	r3, #6
 8011510:	2206      	movs	r2, #6
 8011512:	6879      	ldr	r1, [r7, #4]
 8011514:	4618      	mov	r0, r3
 8011516:	f000 fb44 	bl	8011ba2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011520:	2b06      	cmp	r3, #6
 8011522:	d006      	beq.n	8011532 <ethernet_output+0x66>
 8011524:	4b0a      	ldr	r3, [pc, #40]	@ (8011550 <ethernet_output+0x84>)
 8011526:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801152a:	490a      	ldr	r1, [pc, #40]	@ (8011554 <ethernet_output+0x88>)
 801152c:	480a      	ldr	r0, [pc, #40]	@ (8011558 <ethernet_output+0x8c>)
 801152e:	f000 fa07 	bl	8011940 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	699b      	ldr	r3, [r3, #24]
 8011536:	68b9      	ldr	r1, [r7, #8]
 8011538:	68f8      	ldr	r0, [r7, #12]
 801153a:	4798      	blx	r3
 801153c:	4603      	mov	r3, r0
 801153e:	e002      	b.n	8011546 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011540:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011542:	f06f 0301 	mvn.w	r3, #1
}
 8011546:	4618      	mov	r0, r3
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	08013e18 	.word	0x08013e18
 8011554:	08013e50 	.word	0x08013e50
 8011558:	08013e84 	.word	0x08013e84

0801155c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	2200      	movs	r2, #0
 801156a:	2104      	movs	r1, #4
 801156c:	4618      	mov	r0, r3
 801156e:	f7f7 ff67 	bl	8009440 <osMessageQueueNew>
 8011572:	4602      	mov	r2, r0
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d102      	bne.n	8011586 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011580:	f04f 33ff 	mov.w	r3, #4294967295
 8011584:	e000      	b.n	8011588 <sys_mbox_new+0x2c>

  return ERR_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6818      	ldr	r0, [r3, #0]
 801159e:	4639      	mov	r1, r7
 80115a0:	2300      	movs	r3, #0
 80115a2:	2200      	movs	r2, #0
 80115a4:	f7f7 ffc0 	bl	8009528 <osMessageQueuePut>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d102      	bne.n	80115b4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	73fb      	strb	r3, [r7, #15]
 80115b2:	e001      	b.n	80115b8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80115b4:	23ff      	movs	r3, #255	@ 0xff
 80115b6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80115b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3710      	adds	r7, #16
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b086      	sub	sp, #24
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80115d0:	f7f7 fc46 	bl	8008e60 <osKernelGetTickCount>
 80115d4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d013      	beq.n	8011604 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6818      	ldr	r0, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	68b9      	ldr	r1, [r7, #8]
 80115e6:	f7f7 ffff 	bl	80095e8 <osMessageQueueGet>
 80115ea:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d105      	bne.n	80115fe <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80115f2:	f7f7 fc35 	bl	8008e60 <osKernelGetTickCount>
 80115f6:	4602      	mov	r2, r0
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	e00f      	b.n	801161e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80115fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011602:	e00c      	b.n	801161e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	6818      	ldr	r0, [r3, #0]
 8011608:	f04f 33ff 	mov.w	r3, #4294967295
 801160c:	2200      	movs	r2, #0
 801160e:	68b9      	ldr	r1, [r7, #8]
 8011610:	f7f7 ffea 	bl	80095e8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8011614:	f7f7 fc24 	bl	8008e60 <osKernelGetTickCount>
 8011618:	4602      	mov	r2, r0
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801161e:	4618      	mov	r0, r3
 8011620:	3718      	adds	r7, #24
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}

08011626 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8011626:	b480      	push	{r7}
 8011628:	b083      	sub	sp, #12
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <sys_mbox_valid+0x14>
    return 0;
 8011636:	2300      	movs	r3, #0
 8011638:	e000      	b.n	801163c <sys_mbox_valid+0x16>
  else
    return 1;
 801163a:	2301      	movs	r3, #1
}
 801163c:	4618      	mov	r0, r3
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801164c:	2000      	movs	r0, #0
 801164e:	f7f7 fcc9 	bl	8008fe4 <osMutexNew>
 8011652:	4603      	mov	r3, r0
 8011654:	4a01      	ldr	r2, [pc, #4]	@ (801165c <sys_init+0x14>)
 8011656:	6013      	str	r3, [r2, #0]
#endif
}
 8011658:	bf00      	nop
 801165a:	bd80      	pop	{r7, pc}
 801165c:	2401282c 	.word	0x2401282c

08011660 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8011668:	2000      	movs	r0, #0
 801166a:	f7f7 fcbb 	bl	8008fe4 <osMutexNew>
 801166e:	4602      	mov	r2, r0
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d102      	bne.n	8011682 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801167c:	f04f 33ff 	mov.w	r3, #4294967295
 8011680:	e000      	b.n	8011684 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8011682:	2300      	movs	r3, #0
}
 8011684:	4618      	mov	r0, r3
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	f04f 31ff 	mov.w	r1, #4294967295
 801169c:	4618      	mov	r0, r3
 801169e:	f7f7 fd27 	bl	80090f0 <osMutexAcquire>
#endif
}
 80116a2:	bf00      	nop
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b082      	sub	sp, #8
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4618      	mov	r0, r3
 80116b8:	f7f7 fd65 	bl	8009186 <osMutexRelease>
}
 80116bc:	bf00      	nop
 80116be:	3708      	adds	r7, #8
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b08e      	sub	sp, #56	@ 0x38
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	607a      	str	r2, [r7, #4]
 80116d0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80116d2:	f107 0314 	add.w	r3, r7, #20
 80116d6:	2224      	movs	r2, #36	@ 0x24
 80116d8:	2100      	movs	r1, #0
 80116da:	4618      	mov	r0, r3
 80116dc:	f000 f995 	bl	8011a0a <memset>
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	617b      	str	r3, [r7, #20]
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80116ec:	f107 0314 	add.w	r3, r7, #20
 80116f0:	461a      	mov	r2, r3
 80116f2:	6879      	ldr	r1, [r7, #4]
 80116f4:	68b8      	ldr	r0, [r7, #8]
 80116f6:	f7f7 fbc8 	bl	8008e8a <osThreadNew>
 80116fa:	4603      	mov	r3, r0
#endif
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3738      	adds	r7, #56	@ 0x38
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8011708:	4b04      	ldr	r3, [pc, #16]	@ (801171c <sys_arch_protect+0x18>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f04f 31ff 	mov.w	r1, #4294967295
 8011710:	4618      	mov	r0, r3
 8011712:	f7f7 fced 	bl	80090f0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8011716:	2301      	movs	r3, #1
}
 8011718:	4618      	mov	r0, r3
 801171a:	bd80      	pop	{r7, pc}
 801171c:	2401282c 	.word	0x2401282c

08011720 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b082      	sub	sp, #8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011728:	4b04      	ldr	r3, [pc, #16]	@ (801173c <sys_arch_unprotect+0x1c>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4618      	mov	r0, r3
 801172e:	f7f7 fd2a 	bl	8009186 <osMutexRelease>
}
 8011732:	bf00      	nop
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	2401282c 	.word	0x2401282c

08011740 <rand>:
 8011740:	4b16      	ldr	r3, [pc, #88]	@ (801179c <rand+0x5c>)
 8011742:	b510      	push	{r4, lr}
 8011744:	681c      	ldr	r4, [r3, #0]
 8011746:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011748:	b9b3      	cbnz	r3, 8011778 <rand+0x38>
 801174a:	2018      	movs	r0, #24
 801174c:	f000 faa0 	bl	8011c90 <malloc>
 8011750:	4602      	mov	r2, r0
 8011752:	6320      	str	r0, [r4, #48]	@ 0x30
 8011754:	b920      	cbnz	r0, 8011760 <rand+0x20>
 8011756:	4b12      	ldr	r3, [pc, #72]	@ (80117a0 <rand+0x60>)
 8011758:	4812      	ldr	r0, [pc, #72]	@ (80117a4 <rand+0x64>)
 801175a:	2152      	movs	r1, #82	@ 0x52
 801175c:	f000 fa30 	bl	8011bc0 <__assert_func>
 8011760:	4911      	ldr	r1, [pc, #68]	@ (80117a8 <rand+0x68>)
 8011762:	4b12      	ldr	r3, [pc, #72]	@ (80117ac <rand+0x6c>)
 8011764:	e9c0 1300 	strd	r1, r3, [r0]
 8011768:	4b11      	ldr	r3, [pc, #68]	@ (80117b0 <rand+0x70>)
 801176a:	6083      	str	r3, [r0, #8]
 801176c:	230b      	movs	r3, #11
 801176e:	8183      	strh	r3, [r0, #12]
 8011770:	2100      	movs	r1, #0
 8011772:	2001      	movs	r0, #1
 8011774:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011778:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801177a:	480e      	ldr	r0, [pc, #56]	@ (80117b4 <rand+0x74>)
 801177c:	690b      	ldr	r3, [r1, #16]
 801177e:	694c      	ldr	r4, [r1, #20]
 8011780:	4a0d      	ldr	r2, [pc, #52]	@ (80117b8 <rand+0x78>)
 8011782:	4358      	muls	r0, r3
 8011784:	fb02 0004 	mla	r0, r2, r4, r0
 8011788:	fba3 3202 	umull	r3, r2, r3, r2
 801178c:	3301      	adds	r3, #1
 801178e:	eb40 0002 	adc.w	r0, r0, r2
 8011792:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011796:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801179a:	bd10      	pop	{r4, pc}
 801179c:	24000038 	.word	0x24000038
 80117a0:	08013fd6 	.word	0x08013fd6
 80117a4:	08013fed 	.word	0x08013fed
 80117a8:	abcd330e 	.word	0xabcd330e
 80117ac:	e66d1234 	.word	0xe66d1234
 80117b0:	0005deec 	.word	0x0005deec
 80117b4:	5851f42d 	.word	0x5851f42d
 80117b8:	4c957f2d 	.word	0x4c957f2d

080117bc <std>:
 80117bc:	2300      	movs	r3, #0
 80117be:	b510      	push	{r4, lr}
 80117c0:	4604      	mov	r4, r0
 80117c2:	e9c0 3300 	strd	r3, r3, [r0]
 80117c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117ca:	6083      	str	r3, [r0, #8]
 80117cc:	8181      	strh	r1, [r0, #12]
 80117ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80117d0:	81c2      	strh	r2, [r0, #14]
 80117d2:	6183      	str	r3, [r0, #24]
 80117d4:	4619      	mov	r1, r3
 80117d6:	2208      	movs	r2, #8
 80117d8:	305c      	adds	r0, #92	@ 0x5c
 80117da:	f000 f916 	bl	8011a0a <memset>
 80117de:	4b0d      	ldr	r3, [pc, #52]	@ (8011814 <std+0x58>)
 80117e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80117e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011818 <std+0x5c>)
 80117e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80117e6:	4b0d      	ldr	r3, [pc, #52]	@ (801181c <std+0x60>)
 80117e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80117ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011820 <std+0x64>)
 80117ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80117ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011824 <std+0x68>)
 80117f0:	6224      	str	r4, [r4, #32]
 80117f2:	429c      	cmp	r4, r3
 80117f4:	d006      	beq.n	8011804 <std+0x48>
 80117f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80117fa:	4294      	cmp	r4, r2
 80117fc:	d002      	beq.n	8011804 <std+0x48>
 80117fe:	33d0      	adds	r3, #208	@ 0xd0
 8011800:	429c      	cmp	r4, r3
 8011802:	d105      	bne.n	8011810 <std+0x54>
 8011804:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801180c:	f000 b9c6 	b.w	8011b9c <__retarget_lock_init_recursive>
 8011810:	bd10      	pop	{r4, pc}
 8011812:	bf00      	nop
 8011814:	08011965 	.word	0x08011965
 8011818:	08011987 	.word	0x08011987
 801181c:	080119bf 	.word	0x080119bf
 8011820:	080119e3 	.word	0x080119e3
 8011824:	24012830 	.word	0x24012830

08011828 <stdio_exit_handler>:
 8011828:	4a02      	ldr	r2, [pc, #8]	@ (8011834 <stdio_exit_handler+0xc>)
 801182a:	4903      	ldr	r1, [pc, #12]	@ (8011838 <stdio_exit_handler+0x10>)
 801182c:	4803      	ldr	r0, [pc, #12]	@ (801183c <stdio_exit_handler+0x14>)
 801182e:	f000 b869 	b.w	8011904 <_fwalk_sglue>
 8011832:	bf00      	nop
 8011834:	2400002c 	.word	0x2400002c
 8011838:	080124a5 	.word	0x080124a5
 801183c:	2400003c 	.word	0x2400003c

08011840 <cleanup_stdio>:
 8011840:	6841      	ldr	r1, [r0, #4]
 8011842:	4b0c      	ldr	r3, [pc, #48]	@ (8011874 <cleanup_stdio+0x34>)
 8011844:	4299      	cmp	r1, r3
 8011846:	b510      	push	{r4, lr}
 8011848:	4604      	mov	r4, r0
 801184a:	d001      	beq.n	8011850 <cleanup_stdio+0x10>
 801184c:	f000 fe2a 	bl	80124a4 <_fflush_r>
 8011850:	68a1      	ldr	r1, [r4, #8]
 8011852:	4b09      	ldr	r3, [pc, #36]	@ (8011878 <cleanup_stdio+0x38>)
 8011854:	4299      	cmp	r1, r3
 8011856:	d002      	beq.n	801185e <cleanup_stdio+0x1e>
 8011858:	4620      	mov	r0, r4
 801185a:	f000 fe23 	bl	80124a4 <_fflush_r>
 801185e:	68e1      	ldr	r1, [r4, #12]
 8011860:	4b06      	ldr	r3, [pc, #24]	@ (801187c <cleanup_stdio+0x3c>)
 8011862:	4299      	cmp	r1, r3
 8011864:	d004      	beq.n	8011870 <cleanup_stdio+0x30>
 8011866:	4620      	mov	r0, r4
 8011868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801186c:	f000 be1a 	b.w	80124a4 <_fflush_r>
 8011870:	bd10      	pop	{r4, pc}
 8011872:	bf00      	nop
 8011874:	24012830 	.word	0x24012830
 8011878:	24012898 	.word	0x24012898
 801187c:	24012900 	.word	0x24012900

08011880 <global_stdio_init.part.0>:
 8011880:	b510      	push	{r4, lr}
 8011882:	4b0b      	ldr	r3, [pc, #44]	@ (80118b0 <global_stdio_init.part.0+0x30>)
 8011884:	4c0b      	ldr	r4, [pc, #44]	@ (80118b4 <global_stdio_init.part.0+0x34>)
 8011886:	4a0c      	ldr	r2, [pc, #48]	@ (80118b8 <global_stdio_init.part.0+0x38>)
 8011888:	601a      	str	r2, [r3, #0]
 801188a:	4620      	mov	r0, r4
 801188c:	2200      	movs	r2, #0
 801188e:	2104      	movs	r1, #4
 8011890:	f7ff ff94 	bl	80117bc <std>
 8011894:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011898:	2201      	movs	r2, #1
 801189a:	2109      	movs	r1, #9
 801189c:	f7ff ff8e 	bl	80117bc <std>
 80118a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80118a4:	2202      	movs	r2, #2
 80118a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118aa:	2112      	movs	r1, #18
 80118ac:	f7ff bf86 	b.w	80117bc <std>
 80118b0:	24012968 	.word	0x24012968
 80118b4:	24012830 	.word	0x24012830
 80118b8:	08011829 	.word	0x08011829

080118bc <__sfp_lock_acquire>:
 80118bc:	4801      	ldr	r0, [pc, #4]	@ (80118c4 <__sfp_lock_acquire+0x8>)
 80118be:	f000 b96e 	b.w	8011b9e <__retarget_lock_acquire_recursive>
 80118c2:	bf00      	nop
 80118c4:	24012971 	.word	0x24012971

080118c8 <__sfp_lock_release>:
 80118c8:	4801      	ldr	r0, [pc, #4]	@ (80118d0 <__sfp_lock_release+0x8>)
 80118ca:	f000 b969 	b.w	8011ba0 <__retarget_lock_release_recursive>
 80118ce:	bf00      	nop
 80118d0:	24012971 	.word	0x24012971

080118d4 <__sinit>:
 80118d4:	b510      	push	{r4, lr}
 80118d6:	4604      	mov	r4, r0
 80118d8:	f7ff fff0 	bl	80118bc <__sfp_lock_acquire>
 80118dc:	6a23      	ldr	r3, [r4, #32]
 80118de:	b11b      	cbz	r3, 80118e8 <__sinit+0x14>
 80118e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118e4:	f7ff bff0 	b.w	80118c8 <__sfp_lock_release>
 80118e8:	4b04      	ldr	r3, [pc, #16]	@ (80118fc <__sinit+0x28>)
 80118ea:	6223      	str	r3, [r4, #32]
 80118ec:	4b04      	ldr	r3, [pc, #16]	@ (8011900 <__sinit+0x2c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1f5      	bne.n	80118e0 <__sinit+0xc>
 80118f4:	f7ff ffc4 	bl	8011880 <global_stdio_init.part.0>
 80118f8:	e7f2      	b.n	80118e0 <__sinit+0xc>
 80118fa:	bf00      	nop
 80118fc:	08011841 	.word	0x08011841
 8011900:	24012968 	.word	0x24012968

08011904 <_fwalk_sglue>:
 8011904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011908:	4607      	mov	r7, r0
 801190a:	4688      	mov	r8, r1
 801190c:	4614      	mov	r4, r2
 801190e:	2600      	movs	r6, #0
 8011910:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011914:	f1b9 0901 	subs.w	r9, r9, #1
 8011918:	d505      	bpl.n	8011926 <_fwalk_sglue+0x22>
 801191a:	6824      	ldr	r4, [r4, #0]
 801191c:	2c00      	cmp	r4, #0
 801191e:	d1f7      	bne.n	8011910 <_fwalk_sglue+0xc>
 8011920:	4630      	mov	r0, r6
 8011922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011926:	89ab      	ldrh	r3, [r5, #12]
 8011928:	2b01      	cmp	r3, #1
 801192a:	d907      	bls.n	801193c <_fwalk_sglue+0x38>
 801192c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011930:	3301      	adds	r3, #1
 8011932:	d003      	beq.n	801193c <_fwalk_sglue+0x38>
 8011934:	4629      	mov	r1, r5
 8011936:	4638      	mov	r0, r7
 8011938:	47c0      	blx	r8
 801193a:	4306      	orrs	r6, r0
 801193c:	3568      	adds	r5, #104	@ 0x68
 801193e:	e7e9      	b.n	8011914 <_fwalk_sglue+0x10>

08011940 <iprintf>:
 8011940:	b40f      	push	{r0, r1, r2, r3}
 8011942:	b507      	push	{r0, r1, r2, lr}
 8011944:	4906      	ldr	r1, [pc, #24]	@ (8011960 <iprintf+0x20>)
 8011946:	ab04      	add	r3, sp, #16
 8011948:	6808      	ldr	r0, [r1, #0]
 801194a:	f853 2b04 	ldr.w	r2, [r3], #4
 801194e:	6881      	ldr	r1, [r0, #8]
 8011950:	9301      	str	r3, [sp, #4]
 8011952:	f000 fa7d 	bl	8011e50 <_vfiprintf_r>
 8011956:	b003      	add	sp, #12
 8011958:	f85d eb04 	ldr.w	lr, [sp], #4
 801195c:	b004      	add	sp, #16
 801195e:	4770      	bx	lr
 8011960:	24000038 	.word	0x24000038

08011964 <__sread>:
 8011964:	b510      	push	{r4, lr}
 8011966:	460c      	mov	r4, r1
 8011968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801196c:	f000 f8ce 	bl	8011b0c <_read_r>
 8011970:	2800      	cmp	r0, #0
 8011972:	bfab      	itete	ge
 8011974:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011976:	89a3      	ldrhlt	r3, [r4, #12]
 8011978:	181b      	addge	r3, r3, r0
 801197a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801197e:	bfac      	ite	ge
 8011980:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011982:	81a3      	strhlt	r3, [r4, #12]
 8011984:	bd10      	pop	{r4, pc}

08011986 <__swrite>:
 8011986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801198a:	461f      	mov	r7, r3
 801198c:	898b      	ldrh	r3, [r1, #12]
 801198e:	05db      	lsls	r3, r3, #23
 8011990:	4605      	mov	r5, r0
 8011992:	460c      	mov	r4, r1
 8011994:	4616      	mov	r6, r2
 8011996:	d505      	bpl.n	80119a4 <__swrite+0x1e>
 8011998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801199c:	2302      	movs	r3, #2
 801199e:	2200      	movs	r2, #0
 80119a0:	f000 f8a2 	bl	8011ae8 <_lseek_r>
 80119a4:	89a3      	ldrh	r3, [r4, #12]
 80119a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80119ae:	81a3      	strh	r3, [r4, #12]
 80119b0:	4632      	mov	r2, r6
 80119b2:	463b      	mov	r3, r7
 80119b4:	4628      	mov	r0, r5
 80119b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119ba:	f000 b8b9 	b.w	8011b30 <_write_r>

080119be <__sseek>:
 80119be:	b510      	push	{r4, lr}
 80119c0:	460c      	mov	r4, r1
 80119c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119c6:	f000 f88f 	bl	8011ae8 <_lseek_r>
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	bf15      	itete	ne
 80119d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80119d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80119d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80119da:	81a3      	strheq	r3, [r4, #12]
 80119dc:	bf18      	it	ne
 80119de:	81a3      	strhne	r3, [r4, #12]
 80119e0:	bd10      	pop	{r4, pc}

080119e2 <__sclose>:
 80119e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119e6:	f000 b819 	b.w	8011a1c <_close_r>

080119ea <memcmp>:
 80119ea:	b510      	push	{r4, lr}
 80119ec:	3901      	subs	r1, #1
 80119ee:	4402      	add	r2, r0
 80119f0:	4290      	cmp	r0, r2
 80119f2:	d101      	bne.n	80119f8 <memcmp+0xe>
 80119f4:	2000      	movs	r0, #0
 80119f6:	e005      	b.n	8011a04 <memcmp+0x1a>
 80119f8:	7803      	ldrb	r3, [r0, #0]
 80119fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80119fe:	42a3      	cmp	r3, r4
 8011a00:	d001      	beq.n	8011a06 <memcmp+0x1c>
 8011a02:	1b18      	subs	r0, r3, r4
 8011a04:	bd10      	pop	{r4, pc}
 8011a06:	3001      	adds	r0, #1
 8011a08:	e7f2      	b.n	80119f0 <memcmp+0x6>

08011a0a <memset>:
 8011a0a:	4402      	add	r2, r0
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d100      	bne.n	8011a14 <memset+0xa>
 8011a12:	4770      	bx	lr
 8011a14:	f803 1b01 	strb.w	r1, [r3], #1
 8011a18:	e7f9      	b.n	8011a0e <memset+0x4>
	...

08011a1c <_close_r>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	4d06      	ldr	r5, [pc, #24]	@ (8011a38 <_close_r+0x1c>)
 8011a20:	2300      	movs	r3, #0
 8011a22:	4604      	mov	r4, r0
 8011a24:	4608      	mov	r0, r1
 8011a26:	602b      	str	r3, [r5, #0]
 8011a28:	f7ef ff7a 	bl	8001920 <_close>
 8011a2c:	1c43      	adds	r3, r0, #1
 8011a2e:	d102      	bne.n	8011a36 <_close_r+0x1a>
 8011a30:	682b      	ldr	r3, [r5, #0]
 8011a32:	b103      	cbz	r3, 8011a36 <_close_r+0x1a>
 8011a34:	6023      	str	r3, [r4, #0]
 8011a36:	bd38      	pop	{r3, r4, r5, pc}
 8011a38:	2401296c 	.word	0x2401296c

08011a3c <_reclaim_reent>:
 8011a3c:	4b29      	ldr	r3, [pc, #164]	@ (8011ae4 <_reclaim_reent+0xa8>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	4283      	cmp	r3, r0
 8011a42:	b570      	push	{r4, r5, r6, lr}
 8011a44:	4604      	mov	r4, r0
 8011a46:	d04b      	beq.n	8011ae0 <_reclaim_reent+0xa4>
 8011a48:	69c3      	ldr	r3, [r0, #28]
 8011a4a:	b1ab      	cbz	r3, 8011a78 <_reclaim_reent+0x3c>
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	b16b      	cbz	r3, 8011a6c <_reclaim_reent+0x30>
 8011a50:	2500      	movs	r5, #0
 8011a52:	69e3      	ldr	r3, [r4, #28]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	5959      	ldr	r1, [r3, r5]
 8011a58:	2900      	cmp	r1, #0
 8011a5a:	d13b      	bne.n	8011ad4 <_reclaim_reent+0x98>
 8011a5c:	3504      	adds	r5, #4
 8011a5e:	2d80      	cmp	r5, #128	@ 0x80
 8011a60:	d1f7      	bne.n	8011a52 <_reclaim_reent+0x16>
 8011a62:	69e3      	ldr	r3, [r4, #28]
 8011a64:	4620      	mov	r0, r4
 8011a66:	68d9      	ldr	r1, [r3, #12]
 8011a68:	f000 f8c8 	bl	8011bfc <_free_r>
 8011a6c:	69e3      	ldr	r3, [r4, #28]
 8011a6e:	6819      	ldr	r1, [r3, #0]
 8011a70:	b111      	cbz	r1, 8011a78 <_reclaim_reent+0x3c>
 8011a72:	4620      	mov	r0, r4
 8011a74:	f000 f8c2 	bl	8011bfc <_free_r>
 8011a78:	6961      	ldr	r1, [r4, #20]
 8011a7a:	b111      	cbz	r1, 8011a82 <_reclaim_reent+0x46>
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	f000 f8bd 	bl	8011bfc <_free_r>
 8011a82:	69e1      	ldr	r1, [r4, #28]
 8011a84:	b111      	cbz	r1, 8011a8c <_reclaim_reent+0x50>
 8011a86:	4620      	mov	r0, r4
 8011a88:	f000 f8b8 	bl	8011bfc <_free_r>
 8011a8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011a8e:	b111      	cbz	r1, 8011a96 <_reclaim_reent+0x5a>
 8011a90:	4620      	mov	r0, r4
 8011a92:	f000 f8b3 	bl	8011bfc <_free_r>
 8011a96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a98:	b111      	cbz	r1, 8011aa0 <_reclaim_reent+0x64>
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f000 f8ae 	bl	8011bfc <_free_r>
 8011aa0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011aa2:	b111      	cbz	r1, 8011aaa <_reclaim_reent+0x6e>
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	f000 f8a9 	bl	8011bfc <_free_r>
 8011aaa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011aac:	b111      	cbz	r1, 8011ab4 <_reclaim_reent+0x78>
 8011aae:	4620      	mov	r0, r4
 8011ab0:	f000 f8a4 	bl	8011bfc <_free_r>
 8011ab4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011ab6:	b111      	cbz	r1, 8011abe <_reclaim_reent+0x82>
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f000 f89f 	bl	8011bfc <_free_r>
 8011abe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011ac0:	b111      	cbz	r1, 8011ac8 <_reclaim_reent+0x8c>
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f000 f89a 	bl	8011bfc <_free_r>
 8011ac8:	6a23      	ldr	r3, [r4, #32]
 8011aca:	b14b      	cbz	r3, 8011ae0 <_reclaim_reent+0xa4>
 8011acc:	4620      	mov	r0, r4
 8011ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ad2:	4718      	bx	r3
 8011ad4:	680e      	ldr	r6, [r1, #0]
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	f000 f890 	bl	8011bfc <_free_r>
 8011adc:	4631      	mov	r1, r6
 8011ade:	e7bb      	b.n	8011a58 <_reclaim_reent+0x1c>
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
 8011ae2:	bf00      	nop
 8011ae4:	24000038 	.word	0x24000038

08011ae8 <_lseek_r>:
 8011ae8:	b538      	push	{r3, r4, r5, lr}
 8011aea:	4d07      	ldr	r5, [pc, #28]	@ (8011b08 <_lseek_r+0x20>)
 8011aec:	4604      	mov	r4, r0
 8011aee:	4608      	mov	r0, r1
 8011af0:	4611      	mov	r1, r2
 8011af2:	2200      	movs	r2, #0
 8011af4:	602a      	str	r2, [r5, #0]
 8011af6:	461a      	mov	r2, r3
 8011af8:	f7ef ff39 	bl	800196e <_lseek>
 8011afc:	1c43      	adds	r3, r0, #1
 8011afe:	d102      	bne.n	8011b06 <_lseek_r+0x1e>
 8011b00:	682b      	ldr	r3, [r5, #0]
 8011b02:	b103      	cbz	r3, 8011b06 <_lseek_r+0x1e>
 8011b04:	6023      	str	r3, [r4, #0]
 8011b06:	bd38      	pop	{r3, r4, r5, pc}
 8011b08:	2401296c 	.word	0x2401296c

08011b0c <_read_r>:
 8011b0c:	b538      	push	{r3, r4, r5, lr}
 8011b0e:	4d07      	ldr	r5, [pc, #28]	@ (8011b2c <_read_r+0x20>)
 8011b10:	4604      	mov	r4, r0
 8011b12:	4608      	mov	r0, r1
 8011b14:	4611      	mov	r1, r2
 8011b16:	2200      	movs	r2, #0
 8011b18:	602a      	str	r2, [r5, #0]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	f7ef fec7 	bl	80018ae <_read>
 8011b20:	1c43      	adds	r3, r0, #1
 8011b22:	d102      	bne.n	8011b2a <_read_r+0x1e>
 8011b24:	682b      	ldr	r3, [r5, #0]
 8011b26:	b103      	cbz	r3, 8011b2a <_read_r+0x1e>
 8011b28:	6023      	str	r3, [r4, #0]
 8011b2a:	bd38      	pop	{r3, r4, r5, pc}
 8011b2c:	2401296c 	.word	0x2401296c

08011b30 <_write_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4d07      	ldr	r5, [pc, #28]	@ (8011b50 <_write_r+0x20>)
 8011b34:	4604      	mov	r4, r0
 8011b36:	4608      	mov	r0, r1
 8011b38:	4611      	mov	r1, r2
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	602a      	str	r2, [r5, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	f7ef fed2 	bl	80018e8 <_write>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_write_r+0x1e>
 8011b48:	682b      	ldr	r3, [r5, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_write_r+0x1e>
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	2401296c 	.word	0x2401296c

08011b54 <__libc_init_array>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	4d0d      	ldr	r5, [pc, #52]	@ (8011b8c <__libc_init_array+0x38>)
 8011b58:	4c0d      	ldr	r4, [pc, #52]	@ (8011b90 <__libc_init_array+0x3c>)
 8011b5a:	1b64      	subs	r4, r4, r5
 8011b5c:	10a4      	asrs	r4, r4, #2
 8011b5e:	2600      	movs	r6, #0
 8011b60:	42a6      	cmp	r6, r4
 8011b62:	d109      	bne.n	8011b78 <__libc_init_array+0x24>
 8011b64:	4d0b      	ldr	r5, [pc, #44]	@ (8011b94 <__libc_init_array+0x40>)
 8011b66:	4c0c      	ldr	r4, [pc, #48]	@ (8011b98 <__libc_init_array+0x44>)
 8011b68:	f000 fe4a 	bl	8012800 <_init>
 8011b6c:	1b64      	subs	r4, r4, r5
 8011b6e:	10a4      	asrs	r4, r4, #2
 8011b70:	2600      	movs	r6, #0
 8011b72:	42a6      	cmp	r6, r4
 8011b74:	d105      	bne.n	8011b82 <__libc_init_array+0x2e>
 8011b76:	bd70      	pop	{r4, r5, r6, pc}
 8011b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b7c:	4798      	blx	r3
 8011b7e:	3601      	adds	r6, #1
 8011b80:	e7ee      	b.n	8011b60 <__libc_init_array+0xc>
 8011b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b86:	4798      	blx	r3
 8011b88:	3601      	adds	r6, #1
 8011b8a:	e7f2      	b.n	8011b72 <__libc_init_array+0x1e>
 8011b8c:	080140bc 	.word	0x080140bc
 8011b90:	080140bc 	.word	0x080140bc
 8011b94:	080140bc 	.word	0x080140bc
 8011b98:	080140c0 	.word	0x080140c0

08011b9c <__retarget_lock_init_recursive>:
 8011b9c:	4770      	bx	lr

08011b9e <__retarget_lock_acquire_recursive>:
 8011b9e:	4770      	bx	lr

08011ba0 <__retarget_lock_release_recursive>:
 8011ba0:	4770      	bx	lr

08011ba2 <memcpy>:
 8011ba2:	440a      	add	r2, r1
 8011ba4:	4291      	cmp	r1, r2
 8011ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8011baa:	d100      	bne.n	8011bae <memcpy+0xc>
 8011bac:	4770      	bx	lr
 8011bae:	b510      	push	{r4, lr}
 8011bb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bb8:	4291      	cmp	r1, r2
 8011bba:	d1f9      	bne.n	8011bb0 <memcpy+0xe>
 8011bbc:	bd10      	pop	{r4, pc}
	...

08011bc0 <__assert_func>:
 8011bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bc2:	4614      	mov	r4, r2
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b09      	ldr	r3, [pc, #36]	@ (8011bec <__assert_func+0x2c>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4605      	mov	r5, r0
 8011bcc:	68d8      	ldr	r0, [r3, #12]
 8011bce:	b954      	cbnz	r4, 8011be6 <__assert_func+0x26>
 8011bd0:	4b07      	ldr	r3, [pc, #28]	@ (8011bf0 <__assert_func+0x30>)
 8011bd2:	461c      	mov	r4, r3
 8011bd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bd8:	9100      	str	r1, [sp, #0]
 8011bda:	462b      	mov	r3, r5
 8011bdc:	4905      	ldr	r1, [pc, #20]	@ (8011bf4 <__assert_func+0x34>)
 8011bde:	f000 fc89 	bl	80124f4 <fiprintf>
 8011be2:	f000 fd3d 	bl	8012660 <abort>
 8011be6:	4b04      	ldr	r3, [pc, #16]	@ (8011bf8 <__assert_func+0x38>)
 8011be8:	e7f4      	b.n	8011bd4 <__assert_func+0x14>
 8011bea:	bf00      	nop
 8011bec:	24000038 	.word	0x24000038
 8011bf0:	08014080 	.word	0x08014080
 8011bf4:	08014052 	.word	0x08014052
 8011bf8:	08014045 	.word	0x08014045

08011bfc <_free_r>:
 8011bfc:	b538      	push	{r3, r4, r5, lr}
 8011bfe:	4605      	mov	r5, r0
 8011c00:	2900      	cmp	r1, #0
 8011c02:	d041      	beq.n	8011c88 <_free_r+0x8c>
 8011c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c08:	1f0c      	subs	r4, r1, #4
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	bfb8      	it	lt
 8011c0e:	18e4      	addlt	r4, r4, r3
 8011c10:	f000 f8e8 	bl	8011de4 <__malloc_lock>
 8011c14:	4a1d      	ldr	r2, [pc, #116]	@ (8011c8c <_free_r+0x90>)
 8011c16:	6813      	ldr	r3, [r2, #0]
 8011c18:	b933      	cbnz	r3, 8011c28 <_free_r+0x2c>
 8011c1a:	6063      	str	r3, [r4, #4]
 8011c1c:	6014      	str	r4, [r2, #0]
 8011c1e:	4628      	mov	r0, r5
 8011c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c24:	f000 b8e4 	b.w	8011df0 <__malloc_unlock>
 8011c28:	42a3      	cmp	r3, r4
 8011c2a:	d908      	bls.n	8011c3e <_free_r+0x42>
 8011c2c:	6820      	ldr	r0, [r4, #0]
 8011c2e:	1821      	adds	r1, r4, r0
 8011c30:	428b      	cmp	r3, r1
 8011c32:	bf01      	itttt	eq
 8011c34:	6819      	ldreq	r1, [r3, #0]
 8011c36:	685b      	ldreq	r3, [r3, #4]
 8011c38:	1809      	addeq	r1, r1, r0
 8011c3a:	6021      	streq	r1, [r4, #0]
 8011c3c:	e7ed      	b.n	8011c1a <_free_r+0x1e>
 8011c3e:	461a      	mov	r2, r3
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	b10b      	cbz	r3, 8011c48 <_free_r+0x4c>
 8011c44:	42a3      	cmp	r3, r4
 8011c46:	d9fa      	bls.n	8011c3e <_free_r+0x42>
 8011c48:	6811      	ldr	r1, [r2, #0]
 8011c4a:	1850      	adds	r0, r2, r1
 8011c4c:	42a0      	cmp	r0, r4
 8011c4e:	d10b      	bne.n	8011c68 <_free_r+0x6c>
 8011c50:	6820      	ldr	r0, [r4, #0]
 8011c52:	4401      	add	r1, r0
 8011c54:	1850      	adds	r0, r2, r1
 8011c56:	4283      	cmp	r3, r0
 8011c58:	6011      	str	r1, [r2, #0]
 8011c5a:	d1e0      	bne.n	8011c1e <_free_r+0x22>
 8011c5c:	6818      	ldr	r0, [r3, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	6053      	str	r3, [r2, #4]
 8011c62:	4408      	add	r0, r1
 8011c64:	6010      	str	r0, [r2, #0]
 8011c66:	e7da      	b.n	8011c1e <_free_r+0x22>
 8011c68:	d902      	bls.n	8011c70 <_free_r+0x74>
 8011c6a:	230c      	movs	r3, #12
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	e7d6      	b.n	8011c1e <_free_r+0x22>
 8011c70:	6820      	ldr	r0, [r4, #0]
 8011c72:	1821      	adds	r1, r4, r0
 8011c74:	428b      	cmp	r3, r1
 8011c76:	bf04      	itt	eq
 8011c78:	6819      	ldreq	r1, [r3, #0]
 8011c7a:	685b      	ldreq	r3, [r3, #4]
 8011c7c:	6063      	str	r3, [r4, #4]
 8011c7e:	bf04      	itt	eq
 8011c80:	1809      	addeq	r1, r1, r0
 8011c82:	6021      	streq	r1, [r4, #0]
 8011c84:	6054      	str	r4, [r2, #4]
 8011c86:	e7ca      	b.n	8011c1e <_free_r+0x22>
 8011c88:	bd38      	pop	{r3, r4, r5, pc}
 8011c8a:	bf00      	nop
 8011c8c:	24012978 	.word	0x24012978

08011c90 <malloc>:
 8011c90:	4b02      	ldr	r3, [pc, #8]	@ (8011c9c <malloc+0xc>)
 8011c92:	4601      	mov	r1, r0
 8011c94:	6818      	ldr	r0, [r3, #0]
 8011c96:	f000 b825 	b.w	8011ce4 <_malloc_r>
 8011c9a:	bf00      	nop
 8011c9c:	24000038 	.word	0x24000038

08011ca0 <sbrk_aligned>:
 8011ca0:	b570      	push	{r4, r5, r6, lr}
 8011ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8011ce0 <sbrk_aligned+0x40>)
 8011ca4:	460c      	mov	r4, r1
 8011ca6:	6831      	ldr	r1, [r6, #0]
 8011ca8:	4605      	mov	r5, r0
 8011caa:	b911      	cbnz	r1, 8011cb2 <sbrk_aligned+0x12>
 8011cac:	f000 fcc8 	bl	8012640 <_sbrk_r>
 8011cb0:	6030      	str	r0, [r6, #0]
 8011cb2:	4621      	mov	r1, r4
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	f000 fcc3 	bl	8012640 <_sbrk_r>
 8011cba:	1c43      	adds	r3, r0, #1
 8011cbc:	d103      	bne.n	8011cc6 <sbrk_aligned+0x26>
 8011cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	bd70      	pop	{r4, r5, r6, pc}
 8011cc6:	1cc4      	adds	r4, r0, #3
 8011cc8:	f024 0403 	bic.w	r4, r4, #3
 8011ccc:	42a0      	cmp	r0, r4
 8011cce:	d0f8      	beq.n	8011cc2 <sbrk_aligned+0x22>
 8011cd0:	1a21      	subs	r1, r4, r0
 8011cd2:	4628      	mov	r0, r5
 8011cd4:	f000 fcb4 	bl	8012640 <_sbrk_r>
 8011cd8:	3001      	adds	r0, #1
 8011cda:	d1f2      	bne.n	8011cc2 <sbrk_aligned+0x22>
 8011cdc:	e7ef      	b.n	8011cbe <sbrk_aligned+0x1e>
 8011cde:	bf00      	nop
 8011ce0:	24012974 	.word	0x24012974

08011ce4 <_malloc_r>:
 8011ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce8:	1ccd      	adds	r5, r1, #3
 8011cea:	f025 0503 	bic.w	r5, r5, #3
 8011cee:	3508      	adds	r5, #8
 8011cf0:	2d0c      	cmp	r5, #12
 8011cf2:	bf38      	it	cc
 8011cf4:	250c      	movcc	r5, #12
 8011cf6:	2d00      	cmp	r5, #0
 8011cf8:	4606      	mov	r6, r0
 8011cfa:	db01      	blt.n	8011d00 <_malloc_r+0x1c>
 8011cfc:	42a9      	cmp	r1, r5
 8011cfe:	d904      	bls.n	8011d0a <_malloc_r+0x26>
 8011d00:	230c      	movs	r3, #12
 8011d02:	6033      	str	r3, [r6, #0]
 8011d04:	2000      	movs	r0, #0
 8011d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011de0 <_malloc_r+0xfc>
 8011d0e:	f000 f869 	bl	8011de4 <__malloc_lock>
 8011d12:	f8d8 3000 	ldr.w	r3, [r8]
 8011d16:	461c      	mov	r4, r3
 8011d18:	bb44      	cbnz	r4, 8011d6c <_malloc_r+0x88>
 8011d1a:	4629      	mov	r1, r5
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	f7ff ffbf 	bl	8011ca0 <sbrk_aligned>
 8011d22:	1c43      	adds	r3, r0, #1
 8011d24:	4604      	mov	r4, r0
 8011d26:	d158      	bne.n	8011dda <_malloc_r+0xf6>
 8011d28:	f8d8 4000 	ldr.w	r4, [r8]
 8011d2c:	4627      	mov	r7, r4
 8011d2e:	2f00      	cmp	r7, #0
 8011d30:	d143      	bne.n	8011dba <_malloc_r+0xd6>
 8011d32:	2c00      	cmp	r4, #0
 8011d34:	d04b      	beq.n	8011dce <_malloc_r+0xea>
 8011d36:	6823      	ldr	r3, [r4, #0]
 8011d38:	4639      	mov	r1, r7
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	eb04 0903 	add.w	r9, r4, r3
 8011d40:	f000 fc7e 	bl	8012640 <_sbrk_r>
 8011d44:	4581      	cmp	r9, r0
 8011d46:	d142      	bne.n	8011dce <_malloc_r+0xea>
 8011d48:	6821      	ldr	r1, [r4, #0]
 8011d4a:	1a6d      	subs	r5, r5, r1
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	4630      	mov	r0, r6
 8011d50:	f7ff ffa6 	bl	8011ca0 <sbrk_aligned>
 8011d54:	3001      	adds	r0, #1
 8011d56:	d03a      	beq.n	8011dce <_malloc_r+0xea>
 8011d58:	6823      	ldr	r3, [r4, #0]
 8011d5a:	442b      	add	r3, r5
 8011d5c:	6023      	str	r3, [r4, #0]
 8011d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8011d62:	685a      	ldr	r2, [r3, #4]
 8011d64:	bb62      	cbnz	r2, 8011dc0 <_malloc_r+0xdc>
 8011d66:	f8c8 7000 	str.w	r7, [r8]
 8011d6a:	e00f      	b.n	8011d8c <_malloc_r+0xa8>
 8011d6c:	6822      	ldr	r2, [r4, #0]
 8011d6e:	1b52      	subs	r2, r2, r5
 8011d70:	d420      	bmi.n	8011db4 <_malloc_r+0xd0>
 8011d72:	2a0b      	cmp	r2, #11
 8011d74:	d917      	bls.n	8011da6 <_malloc_r+0xc2>
 8011d76:	1961      	adds	r1, r4, r5
 8011d78:	42a3      	cmp	r3, r4
 8011d7a:	6025      	str	r5, [r4, #0]
 8011d7c:	bf18      	it	ne
 8011d7e:	6059      	strne	r1, [r3, #4]
 8011d80:	6863      	ldr	r3, [r4, #4]
 8011d82:	bf08      	it	eq
 8011d84:	f8c8 1000 	streq.w	r1, [r8]
 8011d88:	5162      	str	r2, [r4, r5]
 8011d8a:	604b      	str	r3, [r1, #4]
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f000 f82f 	bl	8011df0 <__malloc_unlock>
 8011d92:	f104 000b 	add.w	r0, r4, #11
 8011d96:	1d23      	adds	r3, r4, #4
 8011d98:	f020 0007 	bic.w	r0, r0, #7
 8011d9c:	1ac2      	subs	r2, r0, r3
 8011d9e:	bf1c      	itt	ne
 8011da0:	1a1b      	subne	r3, r3, r0
 8011da2:	50a3      	strne	r3, [r4, r2]
 8011da4:	e7af      	b.n	8011d06 <_malloc_r+0x22>
 8011da6:	6862      	ldr	r2, [r4, #4]
 8011da8:	42a3      	cmp	r3, r4
 8011daa:	bf0c      	ite	eq
 8011dac:	f8c8 2000 	streq.w	r2, [r8]
 8011db0:	605a      	strne	r2, [r3, #4]
 8011db2:	e7eb      	b.n	8011d8c <_malloc_r+0xa8>
 8011db4:	4623      	mov	r3, r4
 8011db6:	6864      	ldr	r4, [r4, #4]
 8011db8:	e7ae      	b.n	8011d18 <_malloc_r+0x34>
 8011dba:	463c      	mov	r4, r7
 8011dbc:	687f      	ldr	r7, [r7, #4]
 8011dbe:	e7b6      	b.n	8011d2e <_malloc_r+0x4a>
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	42a3      	cmp	r3, r4
 8011dc6:	d1fb      	bne.n	8011dc0 <_malloc_r+0xdc>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	6053      	str	r3, [r2, #4]
 8011dcc:	e7de      	b.n	8011d8c <_malloc_r+0xa8>
 8011dce:	230c      	movs	r3, #12
 8011dd0:	6033      	str	r3, [r6, #0]
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	f000 f80c 	bl	8011df0 <__malloc_unlock>
 8011dd8:	e794      	b.n	8011d04 <_malloc_r+0x20>
 8011dda:	6005      	str	r5, [r0, #0]
 8011ddc:	e7d6      	b.n	8011d8c <_malloc_r+0xa8>
 8011dde:	bf00      	nop
 8011de0:	24012978 	.word	0x24012978

08011de4 <__malloc_lock>:
 8011de4:	4801      	ldr	r0, [pc, #4]	@ (8011dec <__malloc_lock+0x8>)
 8011de6:	f7ff beda 	b.w	8011b9e <__retarget_lock_acquire_recursive>
 8011dea:	bf00      	nop
 8011dec:	24012970 	.word	0x24012970

08011df0 <__malloc_unlock>:
 8011df0:	4801      	ldr	r0, [pc, #4]	@ (8011df8 <__malloc_unlock+0x8>)
 8011df2:	f7ff bed5 	b.w	8011ba0 <__retarget_lock_release_recursive>
 8011df6:	bf00      	nop
 8011df8:	24012970 	.word	0x24012970

08011dfc <__sfputc_r>:
 8011dfc:	6893      	ldr	r3, [r2, #8]
 8011dfe:	3b01      	subs	r3, #1
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	b410      	push	{r4}
 8011e04:	6093      	str	r3, [r2, #8]
 8011e06:	da08      	bge.n	8011e1a <__sfputc_r+0x1e>
 8011e08:	6994      	ldr	r4, [r2, #24]
 8011e0a:	42a3      	cmp	r3, r4
 8011e0c:	db01      	blt.n	8011e12 <__sfputc_r+0x16>
 8011e0e:	290a      	cmp	r1, #10
 8011e10:	d103      	bne.n	8011e1a <__sfputc_r+0x1e>
 8011e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e16:	f000 bb7f 	b.w	8012518 <__swbuf_r>
 8011e1a:	6813      	ldr	r3, [r2, #0]
 8011e1c:	1c58      	adds	r0, r3, #1
 8011e1e:	6010      	str	r0, [r2, #0]
 8011e20:	7019      	strb	r1, [r3, #0]
 8011e22:	4608      	mov	r0, r1
 8011e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <__sfputs_r>:
 8011e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	460f      	mov	r7, r1
 8011e30:	4614      	mov	r4, r2
 8011e32:	18d5      	adds	r5, r2, r3
 8011e34:	42ac      	cmp	r4, r5
 8011e36:	d101      	bne.n	8011e3c <__sfputs_r+0x12>
 8011e38:	2000      	movs	r0, #0
 8011e3a:	e007      	b.n	8011e4c <__sfputs_r+0x22>
 8011e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e40:	463a      	mov	r2, r7
 8011e42:	4630      	mov	r0, r6
 8011e44:	f7ff ffda 	bl	8011dfc <__sfputc_r>
 8011e48:	1c43      	adds	r3, r0, #1
 8011e4a:	d1f3      	bne.n	8011e34 <__sfputs_r+0xa>
 8011e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e50 <_vfiprintf_r>:
 8011e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e54:	460d      	mov	r5, r1
 8011e56:	b09d      	sub	sp, #116	@ 0x74
 8011e58:	4614      	mov	r4, r2
 8011e5a:	4698      	mov	r8, r3
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	b118      	cbz	r0, 8011e68 <_vfiprintf_r+0x18>
 8011e60:	6a03      	ldr	r3, [r0, #32]
 8011e62:	b90b      	cbnz	r3, 8011e68 <_vfiprintf_r+0x18>
 8011e64:	f7ff fd36 	bl	80118d4 <__sinit>
 8011e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e6a:	07d9      	lsls	r1, r3, #31
 8011e6c:	d405      	bmi.n	8011e7a <_vfiprintf_r+0x2a>
 8011e6e:	89ab      	ldrh	r3, [r5, #12]
 8011e70:	059a      	lsls	r2, r3, #22
 8011e72:	d402      	bmi.n	8011e7a <_vfiprintf_r+0x2a>
 8011e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e76:	f7ff fe92 	bl	8011b9e <__retarget_lock_acquire_recursive>
 8011e7a:	89ab      	ldrh	r3, [r5, #12]
 8011e7c:	071b      	lsls	r3, r3, #28
 8011e7e:	d501      	bpl.n	8011e84 <_vfiprintf_r+0x34>
 8011e80:	692b      	ldr	r3, [r5, #16]
 8011e82:	b99b      	cbnz	r3, 8011eac <_vfiprintf_r+0x5c>
 8011e84:	4629      	mov	r1, r5
 8011e86:	4630      	mov	r0, r6
 8011e88:	f000 fb84 	bl	8012594 <__swsetup_r>
 8011e8c:	b170      	cbz	r0, 8011eac <_vfiprintf_r+0x5c>
 8011e8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e90:	07dc      	lsls	r4, r3, #31
 8011e92:	d504      	bpl.n	8011e9e <_vfiprintf_r+0x4e>
 8011e94:	f04f 30ff 	mov.w	r0, #4294967295
 8011e98:	b01d      	add	sp, #116	@ 0x74
 8011e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e9e:	89ab      	ldrh	r3, [r5, #12]
 8011ea0:	0598      	lsls	r0, r3, #22
 8011ea2:	d4f7      	bmi.n	8011e94 <_vfiprintf_r+0x44>
 8011ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ea6:	f7ff fe7b 	bl	8011ba0 <__retarget_lock_release_recursive>
 8011eaa:	e7f3      	b.n	8011e94 <_vfiprintf_r+0x44>
 8011eac:	2300      	movs	r3, #0
 8011eae:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eb0:	2320      	movs	r3, #32
 8011eb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eba:	2330      	movs	r3, #48	@ 0x30
 8011ebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801206c <_vfiprintf_r+0x21c>
 8011ec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ec4:	f04f 0901 	mov.w	r9, #1
 8011ec8:	4623      	mov	r3, r4
 8011eca:	469a      	mov	sl, r3
 8011ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ed0:	b10a      	cbz	r2, 8011ed6 <_vfiprintf_r+0x86>
 8011ed2:	2a25      	cmp	r2, #37	@ 0x25
 8011ed4:	d1f9      	bne.n	8011eca <_vfiprintf_r+0x7a>
 8011ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8011eda:	d00b      	beq.n	8011ef4 <_vfiprintf_r+0xa4>
 8011edc:	465b      	mov	r3, fp
 8011ede:	4622      	mov	r2, r4
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f7ff ffa1 	bl	8011e2a <__sfputs_r>
 8011ee8:	3001      	adds	r0, #1
 8011eea:	f000 80a7 	beq.w	801203c <_vfiprintf_r+0x1ec>
 8011eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ef0:	445a      	add	r2, fp
 8011ef2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f000 809f 	beq.w	801203c <_vfiprintf_r+0x1ec>
 8011efe:	2300      	movs	r3, #0
 8011f00:	f04f 32ff 	mov.w	r2, #4294967295
 8011f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f08:	f10a 0a01 	add.w	sl, sl, #1
 8011f0c:	9304      	str	r3, [sp, #16]
 8011f0e:	9307      	str	r3, [sp, #28]
 8011f10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f14:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f16:	4654      	mov	r4, sl
 8011f18:	2205      	movs	r2, #5
 8011f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1e:	4853      	ldr	r0, [pc, #332]	@ (801206c <_vfiprintf_r+0x21c>)
 8011f20:	f7ee f9f6 	bl	8000310 <memchr>
 8011f24:	9a04      	ldr	r2, [sp, #16]
 8011f26:	b9d8      	cbnz	r0, 8011f60 <_vfiprintf_r+0x110>
 8011f28:	06d1      	lsls	r1, r2, #27
 8011f2a:	bf44      	itt	mi
 8011f2c:	2320      	movmi	r3, #32
 8011f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f32:	0713      	lsls	r3, r2, #28
 8011f34:	bf44      	itt	mi
 8011f36:	232b      	movmi	r3, #43	@ 0x2b
 8011f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f42:	d015      	beq.n	8011f70 <_vfiprintf_r+0x120>
 8011f44:	9a07      	ldr	r2, [sp, #28]
 8011f46:	4654      	mov	r4, sl
 8011f48:	2000      	movs	r0, #0
 8011f4a:	f04f 0c0a 	mov.w	ip, #10
 8011f4e:	4621      	mov	r1, r4
 8011f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f54:	3b30      	subs	r3, #48	@ 0x30
 8011f56:	2b09      	cmp	r3, #9
 8011f58:	d94b      	bls.n	8011ff2 <_vfiprintf_r+0x1a2>
 8011f5a:	b1b0      	cbz	r0, 8011f8a <_vfiprintf_r+0x13a>
 8011f5c:	9207      	str	r2, [sp, #28]
 8011f5e:	e014      	b.n	8011f8a <_vfiprintf_r+0x13a>
 8011f60:	eba0 0308 	sub.w	r3, r0, r8
 8011f64:	fa09 f303 	lsl.w	r3, r9, r3
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	9304      	str	r3, [sp, #16]
 8011f6c:	46a2      	mov	sl, r4
 8011f6e:	e7d2      	b.n	8011f16 <_vfiprintf_r+0xc6>
 8011f70:	9b03      	ldr	r3, [sp, #12]
 8011f72:	1d19      	adds	r1, r3, #4
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	9103      	str	r1, [sp, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	bfbb      	ittet	lt
 8011f7c:	425b      	neglt	r3, r3
 8011f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8011f82:	9307      	strge	r3, [sp, #28]
 8011f84:	9307      	strlt	r3, [sp, #28]
 8011f86:	bfb8      	it	lt
 8011f88:	9204      	strlt	r2, [sp, #16]
 8011f8a:	7823      	ldrb	r3, [r4, #0]
 8011f8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f8e:	d10a      	bne.n	8011fa6 <_vfiprintf_r+0x156>
 8011f90:	7863      	ldrb	r3, [r4, #1]
 8011f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f94:	d132      	bne.n	8011ffc <_vfiprintf_r+0x1ac>
 8011f96:	9b03      	ldr	r3, [sp, #12]
 8011f98:	1d1a      	adds	r2, r3, #4
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	9203      	str	r2, [sp, #12]
 8011f9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fa2:	3402      	adds	r4, #2
 8011fa4:	9305      	str	r3, [sp, #20]
 8011fa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801207c <_vfiprintf_r+0x22c>
 8011faa:	7821      	ldrb	r1, [r4, #0]
 8011fac:	2203      	movs	r2, #3
 8011fae:	4650      	mov	r0, sl
 8011fb0:	f7ee f9ae 	bl	8000310 <memchr>
 8011fb4:	b138      	cbz	r0, 8011fc6 <_vfiprintf_r+0x176>
 8011fb6:	9b04      	ldr	r3, [sp, #16]
 8011fb8:	eba0 000a 	sub.w	r0, r0, sl
 8011fbc:	2240      	movs	r2, #64	@ 0x40
 8011fbe:	4082      	lsls	r2, r0
 8011fc0:	4313      	orrs	r3, r2
 8011fc2:	3401      	adds	r4, #1
 8011fc4:	9304      	str	r3, [sp, #16]
 8011fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fca:	4829      	ldr	r0, [pc, #164]	@ (8012070 <_vfiprintf_r+0x220>)
 8011fcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fd0:	2206      	movs	r2, #6
 8011fd2:	f7ee f99d 	bl	8000310 <memchr>
 8011fd6:	2800      	cmp	r0, #0
 8011fd8:	d03f      	beq.n	801205a <_vfiprintf_r+0x20a>
 8011fda:	4b26      	ldr	r3, [pc, #152]	@ (8012074 <_vfiprintf_r+0x224>)
 8011fdc:	bb1b      	cbnz	r3, 8012026 <_vfiprintf_r+0x1d6>
 8011fde:	9b03      	ldr	r3, [sp, #12]
 8011fe0:	3307      	adds	r3, #7
 8011fe2:	f023 0307 	bic.w	r3, r3, #7
 8011fe6:	3308      	adds	r3, #8
 8011fe8:	9303      	str	r3, [sp, #12]
 8011fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fec:	443b      	add	r3, r7
 8011fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ff0:	e76a      	b.n	8011ec8 <_vfiprintf_r+0x78>
 8011ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ff6:	460c      	mov	r4, r1
 8011ff8:	2001      	movs	r0, #1
 8011ffa:	e7a8      	b.n	8011f4e <_vfiprintf_r+0xfe>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	3401      	adds	r4, #1
 8012000:	9305      	str	r3, [sp, #20]
 8012002:	4619      	mov	r1, r3
 8012004:	f04f 0c0a 	mov.w	ip, #10
 8012008:	4620      	mov	r0, r4
 801200a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801200e:	3a30      	subs	r2, #48	@ 0x30
 8012010:	2a09      	cmp	r2, #9
 8012012:	d903      	bls.n	801201c <_vfiprintf_r+0x1cc>
 8012014:	2b00      	cmp	r3, #0
 8012016:	d0c6      	beq.n	8011fa6 <_vfiprintf_r+0x156>
 8012018:	9105      	str	r1, [sp, #20]
 801201a:	e7c4      	b.n	8011fa6 <_vfiprintf_r+0x156>
 801201c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012020:	4604      	mov	r4, r0
 8012022:	2301      	movs	r3, #1
 8012024:	e7f0      	b.n	8012008 <_vfiprintf_r+0x1b8>
 8012026:	ab03      	add	r3, sp, #12
 8012028:	9300      	str	r3, [sp, #0]
 801202a:	462a      	mov	r2, r5
 801202c:	4b12      	ldr	r3, [pc, #72]	@ (8012078 <_vfiprintf_r+0x228>)
 801202e:	a904      	add	r1, sp, #16
 8012030:	4630      	mov	r0, r6
 8012032:	f3af 8000 	nop.w
 8012036:	4607      	mov	r7, r0
 8012038:	1c78      	adds	r0, r7, #1
 801203a:	d1d6      	bne.n	8011fea <_vfiprintf_r+0x19a>
 801203c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801203e:	07d9      	lsls	r1, r3, #31
 8012040:	d405      	bmi.n	801204e <_vfiprintf_r+0x1fe>
 8012042:	89ab      	ldrh	r3, [r5, #12]
 8012044:	059a      	lsls	r2, r3, #22
 8012046:	d402      	bmi.n	801204e <_vfiprintf_r+0x1fe>
 8012048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801204a:	f7ff fda9 	bl	8011ba0 <__retarget_lock_release_recursive>
 801204e:	89ab      	ldrh	r3, [r5, #12]
 8012050:	065b      	lsls	r3, r3, #25
 8012052:	f53f af1f 	bmi.w	8011e94 <_vfiprintf_r+0x44>
 8012056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012058:	e71e      	b.n	8011e98 <_vfiprintf_r+0x48>
 801205a:	ab03      	add	r3, sp, #12
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	462a      	mov	r2, r5
 8012060:	4b05      	ldr	r3, [pc, #20]	@ (8012078 <_vfiprintf_r+0x228>)
 8012062:	a904      	add	r1, sp, #16
 8012064:	4630      	mov	r0, r6
 8012066:	f000 f879 	bl	801215c <_printf_i>
 801206a:	e7e4      	b.n	8012036 <_vfiprintf_r+0x1e6>
 801206c:	08014081 	.word	0x08014081
 8012070:	0801408b 	.word	0x0801408b
 8012074:	00000000 	.word	0x00000000
 8012078:	08011e2b 	.word	0x08011e2b
 801207c:	08014087 	.word	0x08014087

08012080 <_printf_common>:
 8012080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012084:	4616      	mov	r6, r2
 8012086:	4698      	mov	r8, r3
 8012088:	688a      	ldr	r2, [r1, #8]
 801208a:	690b      	ldr	r3, [r1, #16]
 801208c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012090:	4293      	cmp	r3, r2
 8012092:	bfb8      	it	lt
 8012094:	4613      	movlt	r3, r2
 8012096:	6033      	str	r3, [r6, #0]
 8012098:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801209c:	4607      	mov	r7, r0
 801209e:	460c      	mov	r4, r1
 80120a0:	b10a      	cbz	r2, 80120a6 <_printf_common+0x26>
 80120a2:	3301      	adds	r3, #1
 80120a4:	6033      	str	r3, [r6, #0]
 80120a6:	6823      	ldr	r3, [r4, #0]
 80120a8:	0699      	lsls	r1, r3, #26
 80120aa:	bf42      	ittt	mi
 80120ac:	6833      	ldrmi	r3, [r6, #0]
 80120ae:	3302      	addmi	r3, #2
 80120b0:	6033      	strmi	r3, [r6, #0]
 80120b2:	6825      	ldr	r5, [r4, #0]
 80120b4:	f015 0506 	ands.w	r5, r5, #6
 80120b8:	d106      	bne.n	80120c8 <_printf_common+0x48>
 80120ba:	f104 0a19 	add.w	sl, r4, #25
 80120be:	68e3      	ldr	r3, [r4, #12]
 80120c0:	6832      	ldr	r2, [r6, #0]
 80120c2:	1a9b      	subs	r3, r3, r2
 80120c4:	42ab      	cmp	r3, r5
 80120c6:	dc26      	bgt.n	8012116 <_printf_common+0x96>
 80120c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80120cc:	6822      	ldr	r2, [r4, #0]
 80120ce:	3b00      	subs	r3, #0
 80120d0:	bf18      	it	ne
 80120d2:	2301      	movne	r3, #1
 80120d4:	0692      	lsls	r2, r2, #26
 80120d6:	d42b      	bmi.n	8012130 <_printf_common+0xb0>
 80120d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80120dc:	4641      	mov	r1, r8
 80120de:	4638      	mov	r0, r7
 80120e0:	47c8      	blx	r9
 80120e2:	3001      	adds	r0, #1
 80120e4:	d01e      	beq.n	8012124 <_printf_common+0xa4>
 80120e6:	6823      	ldr	r3, [r4, #0]
 80120e8:	6922      	ldr	r2, [r4, #16]
 80120ea:	f003 0306 	and.w	r3, r3, #6
 80120ee:	2b04      	cmp	r3, #4
 80120f0:	bf02      	ittt	eq
 80120f2:	68e5      	ldreq	r5, [r4, #12]
 80120f4:	6833      	ldreq	r3, [r6, #0]
 80120f6:	1aed      	subeq	r5, r5, r3
 80120f8:	68a3      	ldr	r3, [r4, #8]
 80120fa:	bf0c      	ite	eq
 80120fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012100:	2500      	movne	r5, #0
 8012102:	4293      	cmp	r3, r2
 8012104:	bfc4      	itt	gt
 8012106:	1a9b      	subgt	r3, r3, r2
 8012108:	18ed      	addgt	r5, r5, r3
 801210a:	2600      	movs	r6, #0
 801210c:	341a      	adds	r4, #26
 801210e:	42b5      	cmp	r5, r6
 8012110:	d11a      	bne.n	8012148 <_printf_common+0xc8>
 8012112:	2000      	movs	r0, #0
 8012114:	e008      	b.n	8012128 <_printf_common+0xa8>
 8012116:	2301      	movs	r3, #1
 8012118:	4652      	mov	r2, sl
 801211a:	4641      	mov	r1, r8
 801211c:	4638      	mov	r0, r7
 801211e:	47c8      	blx	r9
 8012120:	3001      	adds	r0, #1
 8012122:	d103      	bne.n	801212c <_printf_common+0xac>
 8012124:	f04f 30ff 	mov.w	r0, #4294967295
 8012128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212c:	3501      	adds	r5, #1
 801212e:	e7c6      	b.n	80120be <_printf_common+0x3e>
 8012130:	18e1      	adds	r1, r4, r3
 8012132:	1c5a      	adds	r2, r3, #1
 8012134:	2030      	movs	r0, #48	@ 0x30
 8012136:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801213a:	4422      	add	r2, r4
 801213c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012140:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012144:	3302      	adds	r3, #2
 8012146:	e7c7      	b.n	80120d8 <_printf_common+0x58>
 8012148:	2301      	movs	r3, #1
 801214a:	4622      	mov	r2, r4
 801214c:	4641      	mov	r1, r8
 801214e:	4638      	mov	r0, r7
 8012150:	47c8      	blx	r9
 8012152:	3001      	adds	r0, #1
 8012154:	d0e6      	beq.n	8012124 <_printf_common+0xa4>
 8012156:	3601      	adds	r6, #1
 8012158:	e7d9      	b.n	801210e <_printf_common+0x8e>
	...

0801215c <_printf_i>:
 801215c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012160:	7e0f      	ldrb	r7, [r1, #24]
 8012162:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012164:	2f78      	cmp	r7, #120	@ 0x78
 8012166:	4691      	mov	r9, r2
 8012168:	4680      	mov	r8, r0
 801216a:	460c      	mov	r4, r1
 801216c:	469a      	mov	sl, r3
 801216e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012172:	d807      	bhi.n	8012184 <_printf_i+0x28>
 8012174:	2f62      	cmp	r7, #98	@ 0x62
 8012176:	d80a      	bhi.n	801218e <_printf_i+0x32>
 8012178:	2f00      	cmp	r7, #0
 801217a:	f000 80d2 	beq.w	8012322 <_printf_i+0x1c6>
 801217e:	2f58      	cmp	r7, #88	@ 0x58
 8012180:	f000 80b9 	beq.w	80122f6 <_printf_i+0x19a>
 8012184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012188:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801218c:	e03a      	b.n	8012204 <_printf_i+0xa8>
 801218e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012192:	2b15      	cmp	r3, #21
 8012194:	d8f6      	bhi.n	8012184 <_printf_i+0x28>
 8012196:	a101      	add	r1, pc, #4	@ (adr r1, 801219c <_printf_i+0x40>)
 8012198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801219c:	080121f5 	.word	0x080121f5
 80121a0:	08012209 	.word	0x08012209
 80121a4:	08012185 	.word	0x08012185
 80121a8:	08012185 	.word	0x08012185
 80121ac:	08012185 	.word	0x08012185
 80121b0:	08012185 	.word	0x08012185
 80121b4:	08012209 	.word	0x08012209
 80121b8:	08012185 	.word	0x08012185
 80121bc:	08012185 	.word	0x08012185
 80121c0:	08012185 	.word	0x08012185
 80121c4:	08012185 	.word	0x08012185
 80121c8:	08012309 	.word	0x08012309
 80121cc:	08012233 	.word	0x08012233
 80121d0:	080122c3 	.word	0x080122c3
 80121d4:	08012185 	.word	0x08012185
 80121d8:	08012185 	.word	0x08012185
 80121dc:	0801232b 	.word	0x0801232b
 80121e0:	08012185 	.word	0x08012185
 80121e4:	08012233 	.word	0x08012233
 80121e8:	08012185 	.word	0x08012185
 80121ec:	08012185 	.word	0x08012185
 80121f0:	080122cb 	.word	0x080122cb
 80121f4:	6833      	ldr	r3, [r6, #0]
 80121f6:	1d1a      	adds	r2, r3, #4
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	6032      	str	r2, [r6, #0]
 80121fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012200:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012204:	2301      	movs	r3, #1
 8012206:	e09d      	b.n	8012344 <_printf_i+0x1e8>
 8012208:	6833      	ldr	r3, [r6, #0]
 801220a:	6820      	ldr	r0, [r4, #0]
 801220c:	1d19      	adds	r1, r3, #4
 801220e:	6031      	str	r1, [r6, #0]
 8012210:	0606      	lsls	r6, r0, #24
 8012212:	d501      	bpl.n	8012218 <_printf_i+0xbc>
 8012214:	681d      	ldr	r5, [r3, #0]
 8012216:	e003      	b.n	8012220 <_printf_i+0xc4>
 8012218:	0645      	lsls	r5, r0, #25
 801221a:	d5fb      	bpl.n	8012214 <_printf_i+0xb8>
 801221c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012220:	2d00      	cmp	r5, #0
 8012222:	da03      	bge.n	801222c <_printf_i+0xd0>
 8012224:	232d      	movs	r3, #45	@ 0x2d
 8012226:	426d      	negs	r5, r5
 8012228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801222c:	4859      	ldr	r0, [pc, #356]	@ (8012394 <_printf_i+0x238>)
 801222e:	230a      	movs	r3, #10
 8012230:	e011      	b.n	8012256 <_printf_i+0xfa>
 8012232:	6821      	ldr	r1, [r4, #0]
 8012234:	6833      	ldr	r3, [r6, #0]
 8012236:	0608      	lsls	r0, r1, #24
 8012238:	f853 5b04 	ldr.w	r5, [r3], #4
 801223c:	d402      	bmi.n	8012244 <_printf_i+0xe8>
 801223e:	0649      	lsls	r1, r1, #25
 8012240:	bf48      	it	mi
 8012242:	b2ad      	uxthmi	r5, r5
 8012244:	2f6f      	cmp	r7, #111	@ 0x6f
 8012246:	4853      	ldr	r0, [pc, #332]	@ (8012394 <_printf_i+0x238>)
 8012248:	6033      	str	r3, [r6, #0]
 801224a:	bf14      	ite	ne
 801224c:	230a      	movne	r3, #10
 801224e:	2308      	moveq	r3, #8
 8012250:	2100      	movs	r1, #0
 8012252:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012256:	6866      	ldr	r6, [r4, #4]
 8012258:	60a6      	str	r6, [r4, #8]
 801225a:	2e00      	cmp	r6, #0
 801225c:	bfa2      	ittt	ge
 801225e:	6821      	ldrge	r1, [r4, #0]
 8012260:	f021 0104 	bicge.w	r1, r1, #4
 8012264:	6021      	strge	r1, [r4, #0]
 8012266:	b90d      	cbnz	r5, 801226c <_printf_i+0x110>
 8012268:	2e00      	cmp	r6, #0
 801226a:	d04b      	beq.n	8012304 <_printf_i+0x1a8>
 801226c:	4616      	mov	r6, r2
 801226e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012272:	fb03 5711 	mls	r7, r3, r1, r5
 8012276:	5dc7      	ldrb	r7, [r0, r7]
 8012278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801227c:	462f      	mov	r7, r5
 801227e:	42bb      	cmp	r3, r7
 8012280:	460d      	mov	r5, r1
 8012282:	d9f4      	bls.n	801226e <_printf_i+0x112>
 8012284:	2b08      	cmp	r3, #8
 8012286:	d10b      	bne.n	80122a0 <_printf_i+0x144>
 8012288:	6823      	ldr	r3, [r4, #0]
 801228a:	07df      	lsls	r7, r3, #31
 801228c:	d508      	bpl.n	80122a0 <_printf_i+0x144>
 801228e:	6923      	ldr	r3, [r4, #16]
 8012290:	6861      	ldr	r1, [r4, #4]
 8012292:	4299      	cmp	r1, r3
 8012294:	bfde      	ittt	le
 8012296:	2330      	movle	r3, #48	@ 0x30
 8012298:	f806 3c01 	strble.w	r3, [r6, #-1]
 801229c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80122a0:	1b92      	subs	r2, r2, r6
 80122a2:	6122      	str	r2, [r4, #16]
 80122a4:	f8cd a000 	str.w	sl, [sp]
 80122a8:	464b      	mov	r3, r9
 80122aa:	aa03      	add	r2, sp, #12
 80122ac:	4621      	mov	r1, r4
 80122ae:	4640      	mov	r0, r8
 80122b0:	f7ff fee6 	bl	8012080 <_printf_common>
 80122b4:	3001      	adds	r0, #1
 80122b6:	d14a      	bne.n	801234e <_printf_i+0x1f2>
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295
 80122bc:	b004      	add	sp, #16
 80122be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	f043 0320 	orr.w	r3, r3, #32
 80122c8:	6023      	str	r3, [r4, #0]
 80122ca:	4833      	ldr	r0, [pc, #204]	@ (8012398 <_printf_i+0x23c>)
 80122cc:	2778      	movs	r7, #120	@ 0x78
 80122ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	6831      	ldr	r1, [r6, #0]
 80122d6:	061f      	lsls	r7, r3, #24
 80122d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80122dc:	d402      	bmi.n	80122e4 <_printf_i+0x188>
 80122de:	065f      	lsls	r7, r3, #25
 80122e0:	bf48      	it	mi
 80122e2:	b2ad      	uxthmi	r5, r5
 80122e4:	6031      	str	r1, [r6, #0]
 80122e6:	07d9      	lsls	r1, r3, #31
 80122e8:	bf44      	itt	mi
 80122ea:	f043 0320 	orrmi.w	r3, r3, #32
 80122ee:	6023      	strmi	r3, [r4, #0]
 80122f0:	b11d      	cbz	r5, 80122fa <_printf_i+0x19e>
 80122f2:	2310      	movs	r3, #16
 80122f4:	e7ac      	b.n	8012250 <_printf_i+0xf4>
 80122f6:	4827      	ldr	r0, [pc, #156]	@ (8012394 <_printf_i+0x238>)
 80122f8:	e7e9      	b.n	80122ce <_printf_i+0x172>
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	f023 0320 	bic.w	r3, r3, #32
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	e7f6      	b.n	80122f2 <_printf_i+0x196>
 8012304:	4616      	mov	r6, r2
 8012306:	e7bd      	b.n	8012284 <_printf_i+0x128>
 8012308:	6833      	ldr	r3, [r6, #0]
 801230a:	6825      	ldr	r5, [r4, #0]
 801230c:	6961      	ldr	r1, [r4, #20]
 801230e:	1d18      	adds	r0, r3, #4
 8012310:	6030      	str	r0, [r6, #0]
 8012312:	062e      	lsls	r6, r5, #24
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	d501      	bpl.n	801231c <_printf_i+0x1c0>
 8012318:	6019      	str	r1, [r3, #0]
 801231a:	e002      	b.n	8012322 <_printf_i+0x1c6>
 801231c:	0668      	lsls	r0, r5, #25
 801231e:	d5fb      	bpl.n	8012318 <_printf_i+0x1bc>
 8012320:	8019      	strh	r1, [r3, #0]
 8012322:	2300      	movs	r3, #0
 8012324:	6123      	str	r3, [r4, #16]
 8012326:	4616      	mov	r6, r2
 8012328:	e7bc      	b.n	80122a4 <_printf_i+0x148>
 801232a:	6833      	ldr	r3, [r6, #0]
 801232c:	1d1a      	adds	r2, r3, #4
 801232e:	6032      	str	r2, [r6, #0]
 8012330:	681e      	ldr	r6, [r3, #0]
 8012332:	6862      	ldr	r2, [r4, #4]
 8012334:	2100      	movs	r1, #0
 8012336:	4630      	mov	r0, r6
 8012338:	f7ed ffea 	bl	8000310 <memchr>
 801233c:	b108      	cbz	r0, 8012342 <_printf_i+0x1e6>
 801233e:	1b80      	subs	r0, r0, r6
 8012340:	6060      	str	r0, [r4, #4]
 8012342:	6863      	ldr	r3, [r4, #4]
 8012344:	6123      	str	r3, [r4, #16]
 8012346:	2300      	movs	r3, #0
 8012348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801234c:	e7aa      	b.n	80122a4 <_printf_i+0x148>
 801234e:	6923      	ldr	r3, [r4, #16]
 8012350:	4632      	mov	r2, r6
 8012352:	4649      	mov	r1, r9
 8012354:	4640      	mov	r0, r8
 8012356:	47d0      	blx	sl
 8012358:	3001      	adds	r0, #1
 801235a:	d0ad      	beq.n	80122b8 <_printf_i+0x15c>
 801235c:	6823      	ldr	r3, [r4, #0]
 801235e:	079b      	lsls	r3, r3, #30
 8012360:	d413      	bmi.n	801238a <_printf_i+0x22e>
 8012362:	68e0      	ldr	r0, [r4, #12]
 8012364:	9b03      	ldr	r3, [sp, #12]
 8012366:	4298      	cmp	r0, r3
 8012368:	bfb8      	it	lt
 801236a:	4618      	movlt	r0, r3
 801236c:	e7a6      	b.n	80122bc <_printf_i+0x160>
 801236e:	2301      	movs	r3, #1
 8012370:	4632      	mov	r2, r6
 8012372:	4649      	mov	r1, r9
 8012374:	4640      	mov	r0, r8
 8012376:	47d0      	blx	sl
 8012378:	3001      	adds	r0, #1
 801237a:	d09d      	beq.n	80122b8 <_printf_i+0x15c>
 801237c:	3501      	adds	r5, #1
 801237e:	68e3      	ldr	r3, [r4, #12]
 8012380:	9903      	ldr	r1, [sp, #12]
 8012382:	1a5b      	subs	r3, r3, r1
 8012384:	42ab      	cmp	r3, r5
 8012386:	dcf2      	bgt.n	801236e <_printf_i+0x212>
 8012388:	e7eb      	b.n	8012362 <_printf_i+0x206>
 801238a:	2500      	movs	r5, #0
 801238c:	f104 0619 	add.w	r6, r4, #25
 8012390:	e7f5      	b.n	801237e <_printf_i+0x222>
 8012392:	bf00      	nop
 8012394:	08014092 	.word	0x08014092
 8012398:	080140a3 	.word	0x080140a3

0801239c <__sflush_r>:
 801239c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a4:	0716      	lsls	r6, r2, #28
 80123a6:	4605      	mov	r5, r0
 80123a8:	460c      	mov	r4, r1
 80123aa:	d454      	bmi.n	8012456 <__sflush_r+0xba>
 80123ac:	684b      	ldr	r3, [r1, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	dc02      	bgt.n	80123b8 <__sflush_r+0x1c>
 80123b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	dd48      	ble.n	801244a <__sflush_r+0xae>
 80123b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123ba:	2e00      	cmp	r6, #0
 80123bc:	d045      	beq.n	801244a <__sflush_r+0xae>
 80123be:	2300      	movs	r3, #0
 80123c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80123c4:	682f      	ldr	r7, [r5, #0]
 80123c6:	6a21      	ldr	r1, [r4, #32]
 80123c8:	602b      	str	r3, [r5, #0]
 80123ca:	d030      	beq.n	801242e <__sflush_r+0x92>
 80123cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80123ce:	89a3      	ldrh	r3, [r4, #12]
 80123d0:	0759      	lsls	r1, r3, #29
 80123d2:	d505      	bpl.n	80123e0 <__sflush_r+0x44>
 80123d4:	6863      	ldr	r3, [r4, #4]
 80123d6:	1ad2      	subs	r2, r2, r3
 80123d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80123da:	b10b      	cbz	r3, 80123e0 <__sflush_r+0x44>
 80123dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80123de:	1ad2      	subs	r2, r2, r3
 80123e0:	2300      	movs	r3, #0
 80123e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80123e4:	6a21      	ldr	r1, [r4, #32]
 80123e6:	4628      	mov	r0, r5
 80123e8:	47b0      	blx	r6
 80123ea:	1c43      	adds	r3, r0, #1
 80123ec:	89a3      	ldrh	r3, [r4, #12]
 80123ee:	d106      	bne.n	80123fe <__sflush_r+0x62>
 80123f0:	6829      	ldr	r1, [r5, #0]
 80123f2:	291d      	cmp	r1, #29
 80123f4:	d82b      	bhi.n	801244e <__sflush_r+0xb2>
 80123f6:	4a2a      	ldr	r2, [pc, #168]	@ (80124a0 <__sflush_r+0x104>)
 80123f8:	410a      	asrs	r2, r1
 80123fa:	07d6      	lsls	r6, r2, #31
 80123fc:	d427      	bmi.n	801244e <__sflush_r+0xb2>
 80123fe:	2200      	movs	r2, #0
 8012400:	6062      	str	r2, [r4, #4]
 8012402:	04d9      	lsls	r1, r3, #19
 8012404:	6922      	ldr	r2, [r4, #16]
 8012406:	6022      	str	r2, [r4, #0]
 8012408:	d504      	bpl.n	8012414 <__sflush_r+0x78>
 801240a:	1c42      	adds	r2, r0, #1
 801240c:	d101      	bne.n	8012412 <__sflush_r+0x76>
 801240e:	682b      	ldr	r3, [r5, #0]
 8012410:	b903      	cbnz	r3, 8012414 <__sflush_r+0x78>
 8012412:	6560      	str	r0, [r4, #84]	@ 0x54
 8012414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012416:	602f      	str	r7, [r5, #0]
 8012418:	b1b9      	cbz	r1, 801244a <__sflush_r+0xae>
 801241a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801241e:	4299      	cmp	r1, r3
 8012420:	d002      	beq.n	8012428 <__sflush_r+0x8c>
 8012422:	4628      	mov	r0, r5
 8012424:	f7ff fbea 	bl	8011bfc <_free_r>
 8012428:	2300      	movs	r3, #0
 801242a:	6363      	str	r3, [r4, #52]	@ 0x34
 801242c:	e00d      	b.n	801244a <__sflush_r+0xae>
 801242e:	2301      	movs	r3, #1
 8012430:	4628      	mov	r0, r5
 8012432:	47b0      	blx	r6
 8012434:	4602      	mov	r2, r0
 8012436:	1c50      	adds	r0, r2, #1
 8012438:	d1c9      	bne.n	80123ce <__sflush_r+0x32>
 801243a:	682b      	ldr	r3, [r5, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d0c6      	beq.n	80123ce <__sflush_r+0x32>
 8012440:	2b1d      	cmp	r3, #29
 8012442:	d001      	beq.n	8012448 <__sflush_r+0xac>
 8012444:	2b16      	cmp	r3, #22
 8012446:	d11e      	bne.n	8012486 <__sflush_r+0xea>
 8012448:	602f      	str	r7, [r5, #0]
 801244a:	2000      	movs	r0, #0
 801244c:	e022      	b.n	8012494 <__sflush_r+0xf8>
 801244e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012452:	b21b      	sxth	r3, r3
 8012454:	e01b      	b.n	801248e <__sflush_r+0xf2>
 8012456:	690f      	ldr	r7, [r1, #16]
 8012458:	2f00      	cmp	r7, #0
 801245a:	d0f6      	beq.n	801244a <__sflush_r+0xae>
 801245c:	0793      	lsls	r3, r2, #30
 801245e:	680e      	ldr	r6, [r1, #0]
 8012460:	bf08      	it	eq
 8012462:	694b      	ldreq	r3, [r1, #20]
 8012464:	600f      	str	r7, [r1, #0]
 8012466:	bf18      	it	ne
 8012468:	2300      	movne	r3, #0
 801246a:	eba6 0807 	sub.w	r8, r6, r7
 801246e:	608b      	str	r3, [r1, #8]
 8012470:	f1b8 0f00 	cmp.w	r8, #0
 8012474:	dde9      	ble.n	801244a <__sflush_r+0xae>
 8012476:	6a21      	ldr	r1, [r4, #32]
 8012478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801247a:	4643      	mov	r3, r8
 801247c:	463a      	mov	r2, r7
 801247e:	4628      	mov	r0, r5
 8012480:	47b0      	blx	r6
 8012482:	2800      	cmp	r0, #0
 8012484:	dc08      	bgt.n	8012498 <__sflush_r+0xfc>
 8012486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801248a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801248e:	81a3      	strh	r3, [r4, #12]
 8012490:	f04f 30ff 	mov.w	r0, #4294967295
 8012494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012498:	4407      	add	r7, r0
 801249a:	eba8 0800 	sub.w	r8, r8, r0
 801249e:	e7e7      	b.n	8012470 <__sflush_r+0xd4>
 80124a0:	dfbffffe 	.word	0xdfbffffe

080124a4 <_fflush_r>:
 80124a4:	b538      	push	{r3, r4, r5, lr}
 80124a6:	690b      	ldr	r3, [r1, #16]
 80124a8:	4605      	mov	r5, r0
 80124aa:	460c      	mov	r4, r1
 80124ac:	b913      	cbnz	r3, 80124b4 <_fflush_r+0x10>
 80124ae:	2500      	movs	r5, #0
 80124b0:	4628      	mov	r0, r5
 80124b2:	bd38      	pop	{r3, r4, r5, pc}
 80124b4:	b118      	cbz	r0, 80124be <_fflush_r+0x1a>
 80124b6:	6a03      	ldr	r3, [r0, #32]
 80124b8:	b90b      	cbnz	r3, 80124be <_fflush_r+0x1a>
 80124ba:	f7ff fa0b 	bl	80118d4 <__sinit>
 80124be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d0f3      	beq.n	80124ae <_fflush_r+0xa>
 80124c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80124c8:	07d0      	lsls	r0, r2, #31
 80124ca:	d404      	bmi.n	80124d6 <_fflush_r+0x32>
 80124cc:	0599      	lsls	r1, r3, #22
 80124ce:	d402      	bmi.n	80124d6 <_fflush_r+0x32>
 80124d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124d2:	f7ff fb64 	bl	8011b9e <__retarget_lock_acquire_recursive>
 80124d6:	4628      	mov	r0, r5
 80124d8:	4621      	mov	r1, r4
 80124da:	f7ff ff5f 	bl	801239c <__sflush_r>
 80124de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80124e0:	07da      	lsls	r2, r3, #31
 80124e2:	4605      	mov	r5, r0
 80124e4:	d4e4      	bmi.n	80124b0 <_fflush_r+0xc>
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	059b      	lsls	r3, r3, #22
 80124ea:	d4e1      	bmi.n	80124b0 <_fflush_r+0xc>
 80124ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80124ee:	f7ff fb57 	bl	8011ba0 <__retarget_lock_release_recursive>
 80124f2:	e7dd      	b.n	80124b0 <_fflush_r+0xc>

080124f4 <fiprintf>:
 80124f4:	b40e      	push	{r1, r2, r3}
 80124f6:	b503      	push	{r0, r1, lr}
 80124f8:	4601      	mov	r1, r0
 80124fa:	ab03      	add	r3, sp, #12
 80124fc:	4805      	ldr	r0, [pc, #20]	@ (8012514 <fiprintf+0x20>)
 80124fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012502:	6800      	ldr	r0, [r0, #0]
 8012504:	9301      	str	r3, [sp, #4]
 8012506:	f7ff fca3 	bl	8011e50 <_vfiprintf_r>
 801250a:	b002      	add	sp, #8
 801250c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012510:	b003      	add	sp, #12
 8012512:	4770      	bx	lr
 8012514:	24000038 	.word	0x24000038

08012518 <__swbuf_r>:
 8012518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251a:	460e      	mov	r6, r1
 801251c:	4614      	mov	r4, r2
 801251e:	4605      	mov	r5, r0
 8012520:	b118      	cbz	r0, 801252a <__swbuf_r+0x12>
 8012522:	6a03      	ldr	r3, [r0, #32]
 8012524:	b90b      	cbnz	r3, 801252a <__swbuf_r+0x12>
 8012526:	f7ff f9d5 	bl	80118d4 <__sinit>
 801252a:	69a3      	ldr	r3, [r4, #24]
 801252c:	60a3      	str	r3, [r4, #8]
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	071a      	lsls	r2, r3, #28
 8012532:	d501      	bpl.n	8012538 <__swbuf_r+0x20>
 8012534:	6923      	ldr	r3, [r4, #16]
 8012536:	b943      	cbnz	r3, 801254a <__swbuf_r+0x32>
 8012538:	4621      	mov	r1, r4
 801253a:	4628      	mov	r0, r5
 801253c:	f000 f82a 	bl	8012594 <__swsetup_r>
 8012540:	b118      	cbz	r0, 801254a <__swbuf_r+0x32>
 8012542:	f04f 37ff 	mov.w	r7, #4294967295
 8012546:	4638      	mov	r0, r7
 8012548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	6922      	ldr	r2, [r4, #16]
 801254e:	1a98      	subs	r0, r3, r2
 8012550:	6963      	ldr	r3, [r4, #20]
 8012552:	b2f6      	uxtb	r6, r6
 8012554:	4283      	cmp	r3, r0
 8012556:	4637      	mov	r7, r6
 8012558:	dc05      	bgt.n	8012566 <__swbuf_r+0x4e>
 801255a:	4621      	mov	r1, r4
 801255c:	4628      	mov	r0, r5
 801255e:	f7ff ffa1 	bl	80124a4 <_fflush_r>
 8012562:	2800      	cmp	r0, #0
 8012564:	d1ed      	bne.n	8012542 <__swbuf_r+0x2a>
 8012566:	68a3      	ldr	r3, [r4, #8]
 8012568:	3b01      	subs	r3, #1
 801256a:	60a3      	str	r3, [r4, #8]
 801256c:	6823      	ldr	r3, [r4, #0]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	6022      	str	r2, [r4, #0]
 8012572:	701e      	strb	r6, [r3, #0]
 8012574:	6962      	ldr	r2, [r4, #20]
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	429a      	cmp	r2, r3
 801257a:	d004      	beq.n	8012586 <__swbuf_r+0x6e>
 801257c:	89a3      	ldrh	r3, [r4, #12]
 801257e:	07db      	lsls	r3, r3, #31
 8012580:	d5e1      	bpl.n	8012546 <__swbuf_r+0x2e>
 8012582:	2e0a      	cmp	r6, #10
 8012584:	d1df      	bne.n	8012546 <__swbuf_r+0x2e>
 8012586:	4621      	mov	r1, r4
 8012588:	4628      	mov	r0, r5
 801258a:	f7ff ff8b 	bl	80124a4 <_fflush_r>
 801258e:	2800      	cmp	r0, #0
 8012590:	d0d9      	beq.n	8012546 <__swbuf_r+0x2e>
 8012592:	e7d6      	b.n	8012542 <__swbuf_r+0x2a>

08012594 <__swsetup_r>:
 8012594:	b538      	push	{r3, r4, r5, lr}
 8012596:	4b29      	ldr	r3, [pc, #164]	@ (801263c <__swsetup_r+0xa8>)
 8012598:	4605      	mov	r5, r0
 801259a:	6818      	ldr	r0, [r3, #0]
 801259c:	460c      	mov	r4, r1
 801259e:	b118      	cbz	r0, 80125a8 <__swsetup_r+0x14>
 80125a0:	6a03      	ldr	r3, [r0, #32]
 80125a2:	b90b      	cbnz	r3, 80125a8 <__swsetup_r+0x14>
 80125a4:	f7ff f996 	bl	80118d4 <__sinit>
 80125a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125ac:	0719      	lsls	r1, r3, #28
 80125ae:	d422      	bmi.n	80125f6 <__swsetup_r+0x62>
 80125b0:	06da      	lsls	r2, r3, #27
 80125b2:	d407      	bmi.n	80125c4 <__swsetup_r+0x30>
 80125b4:	2209      	movs	r2, #9
 80125b6:	602a      	str	r2, [r5, #0]
 80125b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125bc:	81a3      	strh	r3, [r4, #12]
 80125be:	f04f 30ff 	mov.w	r0, #4294967295
 80125c2:	e033      	b.n	801262c <__swsetup_r+0x98>
 80125c4:	0758      	lsls	r0, r3, #29
 80125c6:	d512      	bpl.n	80125ee <__swsetup_r+0x5a>
 80125c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125ca:	b141      	cbz	r1, 80125de <__swsetup_r+0x4a>
 80125cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125d0:	4299      	cmp	r1, r3
 80125d2:	d002      	beq.n	80125da <__swsetup_r+0x46>
 80125d4:	4628      	mov	r0, r5
 80125d6:	f7ff fb11 	bl	8011bfc <_free_r>
 80125da:	2300      	movs	r3, #0
 80125dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80125de:	89a3      	ldrh	r3, [r4, #12]
 80125e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80125e4:	81a3      	strh	r3, [r4, #12]
 80125e6:	2300      	movs	r3, #0
 80125e8:	6063      	str	r3, [r4, #4]
 80125ea:	6923      	ldr	r3, [r4, #16]
 80125ec:	6023      	str	r3, [r4, #0]
 80125ee:	89a3      	ldrh	r3, [r4, #12]
 80125f0:	f043 0308 	orr.w	r3, r3, #8
 80125f4:	81a3      	strh	r3, [r4, #12]
 80125f6:	6923      	ldr	r3, [r4, #16]
 80125f8:	b94b      	cbnz	r3, 801260e <__swsetup_r+0x7a>
 80125fa:	89a3      	ldrh	r3, [r4, #12]
 80125fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012604:	d003      	beq.n	801260e <__swsetup_r+0x7a>
 8012606:	4621      	mov	r1, r4
 8012608:	4628      	mov	r0, r5
 801260a:	f000 f856 	bl	80126ba <__smakebuf_r>
 801260e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012612:	f013 0201 	ands.w	r2, r3, #1
 8012616:	d00a      	beq.n	801262e <__swsetup_r+0x9a>
 8012618:	2200      	movs	r2, #0
 801261a:	60a2      	str	r2, [r4, #8]
 801261c:	6962      	ldr	r2, [r4, #20]
 801261e:	4252      	negs	r2, r2
 8012620:	61a2      	str	r2, [r4, #24]
 8012622:	6922      	ldr	r2, [r4, #16]
 8012624:	b942      	cbnz	r2, 8012638 <__swsetup_r+0xa4>
 8012626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801262a:	d1c5      	bne.n	80125b8 <__swsetup_r+0x24>
 801262c:	bd38      	pop	{r3, r4, r5, pc}
 801262e:	0799      	lsls	r1, r3, #30
 8012630:	bf58      	it	pl
 8012632:	6962      	ldrpl	r2, [r4, #20]
 8012634:	60a2      	str	r2, [r4, #8]
 8012636:	e7f4      	b.n	8012622 <__swsetup_r+0x8e>
 8012638:	2000      	movs	r0, #0
 801263a:	e7f7      	b.n	801262c <__swsetup_r+0x98>
 801263c:	24000038 	.word	0x24000038

08012640 <_sbrk_r>:
 8012640:	b538      	push	{r3, r4, r5, lr}
 8012642:	4d06      	ldr	r5, [pc, #24]	@ (801265c <_sbrk_r+0x1c>)
 8012644:	2300      	movs	r3, #0
 8012646:	4604      	mov	r4, r0
 8012648:	4608      	mov	r0, r1
 801264a:	602b      	str	r3, [r5, #0]
 801264c:	f7ef f99c 	bl	8001988 <_sbrk>
 8012650:	1c43      	adds	r3, r0, #1
 8012652:	d102      	bne.n	801265a <_sbrk_r+0x1a>
 8012654:	682b      	ldr	r3, [r5, #0]
 8012656:	b103      	cbz	r3, 801265a <_sbrk_r+0x1a>
 8012658:	6023      	str	r3, [r4, #0]
 801265a:	bd38      	pop	{r3, r4, r5, pc}
 801265c:	2401296c 	.word	0x2401296c

08012660 <abort>:
 8012660:	b508      	push	{r3, lr}
 8012662:	2006      	movs	r0, #6
 8012664:	f000 f88e 	bl	8012784 <raise>
 8012668:	2001      	movs	r0, #1
 801266a:	f7ef f915 	bl	8001898 <_exit>

0801266e <__swhatbuf_r>:
 801266e:	b570      	push	{r4, r5, r6, lr}
 8012670:	460c      	mov	r4, r1
 8012672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012676:	2900      	cmp	r1, #0
 8012678:	b096      	sub	sp, #88	@ 0x58
 801267a:	4615      	mov	r5, r2
 801267c:	461e      	mov	r6, r3
 801267e:	da0d      	bge.n	801269c <__swhatbuf_r+0x2e>
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012686:	f04f 0100 	mov.w	r1, #0
 801268a:	bf14      	ite	ne
 801268c:	2340      	movne	r3, #64	@ 0x40
 801268e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012692:	2000      	movs	r0, #0
 8012694:	6031      	str	r1, [r6, #0]
 8012696:	602b      	str	r3, [r5, #0]
 8012698:	b016      	add	sp, #88	@ 0x58
 801269a:	bd70      	pop	{r4, r5, r6, pc}
 801269c:	466a      	mov	r2, sp
 801269e:	f000 f879 	bl	8012794 <_fstat_r>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	dbec      	blt.n	8012680 <__swhatbuf_r+0x12>
 80126a6:	9901      	ldr	r1, [sp, #4]
 80126a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80126ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80126b0:	4259      	negs	r1, r3
 80126b2:	4159      	adcs	r1, r3
 80126b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80126b8:	e7eb      	b.n	8012692 <__swhatbuf_r+0x24>

080126ba <__smakebuf_r>:
 80126ba:	898b      	ldrh	r3, [r1, #12]
 80126bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126be:	079d      	lsls	r5, r3, #30
 80126c0:	4606      	mov	r6, r0
 80126c2:	460c      	mov	r4, r1
 80126c4:	d507      	bpl.n	80126d6 <__smakebuf_r+0x1c>
 80126c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80126ca:	6023      	str	r3, [r4, #0]
 80126cc:	6123      	str	r3, [r4, #16]
 80126ce:	2301      	movs	r3, #1
 80126d0:	6163      	str	r3, [r4, #20]
 80126d2:	b003      	add	sp, #12
 80126d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126d6:	ab01      	add	r3, sp, #4
 80126d8:	466a      	mov	r2, sp
 80126da:	f7ff ffc8 	bl	801266e <__swhatbuf_r>
 80126de:	9f00      	ldr	r7, [sp, #0]
 80126e0:	4605      	mov	r5, r0
 80126e2:	4639      	mov	r1, r7
 80126e4:	4630      	mov	r0, r6
 80126e6:	f7ff fafd 	bl	8011ce4 <_malloc_r>
 80126ea:	b948      	cbnz	r0, 8012700 <__smakebuf_r+0x46>
 80126ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126f0:	059a      	lsls	r2, r3, #22
 80126f2:	d4ee      	bmi.n	80126d2 <__smakebuf_r+0x18>
 80126f4:	f023 0303 	bic.w	r3, r3, #3
 80126f8:	f043 0302 	orr.w	r3, r3, #2
 80126fc:	81a3      	strh	r3, [r4, #12]
 80126fe:	e7e2      	b.n	80126c6 <__smakebuf_r+0xc>
 8012700:	89a3      	ldrh	r3, [r4, #12]
 8012702:	6020      	str	r0, [r4, #0]
 8012704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012708:	81a3      	strh	r3, [r4, #12]
 801270a:	9b01      	ldr	r3, [sp, #4]
 801270c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012710:	b15b      	cbz	r3, 801272a <__smakebuf_r+0x70>
 8012712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012716:	4630      	mov	r0, r6
 8012718:	f000 f84e 	bl	80127b8 <_isatty_r>
 801271c:	b128      	cbz	r0, 801272a <__smakebuf_r+0x70>
 801271e:	89a3      	ldrh	r3, [r4, #12]
 8012720:	f023 0303 	bic.w	r3, r3, #3
 8012724:	f043 0301 	orr.w	r3, r3, #1
 8012728:	81a3      	strh	r3, [r4, #12]
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	431d      	orrs	r5, r3
 801272e:	81a5      	strh	r5, [r4, #12]
 8012730:	e7cf      	b.n	80126d2 <__smakebuf_r+0x18>

08012732 <_raise_r>:
 8012732:	291f      	cmp	r1, #31
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	4605      	mov	r5, r0
 8012738:	460c      	mov	r4, r1
 801273a:	d904      	bls.n	8012746 <_raise_r+0x14>
 801273c:	2316      	movs	r3, #22
 801273e:	6003      	str	r3, [r0, #0]
 8012740:	f04f 30ff 	mov.w	r0, #4294967295
 8012744:	bd38      	pop	{r3, r4, r5, pc}
 8012746:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012748:	b112      	cbz	r2, 8012750 <_raise_r+0x1e>
 801274a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801274e:	b94b      	cbnz	r3, 8012764 <_raise_r+0x32>
 8012750:	4628      	mov	r0, r5
 8012752:	f000 f853 	bl	80127fc <_getpid_r>
 8012756:	4622      	mov	r2, r4
 8012758:	4601      	mov	r1, r0
 801275a:	4628      	mov	r0, r5
 801275c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012760:	f000 b83a 	b.w	80127d8 <_kill_r>
 8012764:	2b01      	cmp	r3, #1
 8012766:	d00a      	beq.n	801277e <_raise_r+0x4c>
 8012768:	1c59      	adds	r1, r3, #1
 801276a:	d103      	bne.n	8012774 <_raise_r+0x42>
 801276c:	2316      	movs	r3, #22
 801276e:	6003      	str	r3, [r0, #0]
 8012770:	2001      	movs	r0, #1
 8012772:	e7e7      	b.n	8012744 <_raise_r+0x12>
 8012774:	2100      	movs	r1, #0
 8012776:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801277a:	4620      	mov	r0, r4
 801277c:	4798      	blx	r3
 801277e:	2000      	movs	r0, #0
 8012780:	e7e0      	b.n	8012744 <_raise_r+0x12>
	...

08012784 <raise>:
 8012784:	4b02      	ldr	r3, [pc, #8]	@ (8012790 <raise+0xc>)
 8012786:	4601      	mov	r1, r0
 8012788:	6818      	ldr	r0, [r3, #0]
 801278a:	f7ff bfd2 	b.w	8012732 <_raise_r>
 801278e:	bf00      	nop
 8012790:	24000038 	.word	0x24000038

08012794 <_fstat_r>:
 8012794:	b538      	push	{r3, r4, r5, lr}
 8012796:	4d07      	ldr	r5, [pc, #28]	@ (80127b4 <_fstat_r+0x20>)
 8012798:	2300      	movs	r3, #0
 801279a:	4604      	mov	r4, r0
 801279c:	4608      	mov	r0, r1
 801279e:	4611      	mov	r1, r2
 80127a0:	602b      	str	r3, [r5, #0]
 80127a2:	f7ef f8c9 	bl	8001938 <_fstat>
 80127a6:	1c43      	adds	r3, r0, #1
 80127a8:	d102      	bne.n	80127b0 <_fstat_r+0x1c>
 80127aa:	682b      	ldr	r3, [r5, #0]
 80127ac:	b103      	cbz	r3, 80127b0 <_fstat_r+0x1c>
 80127ae:	6023      	str	r3, [r4, #0]
 80127b0:	bd38      	pop	{r3, r4, r5, pc}
 80127b2:	bf00      	nop
 80127b4:	2401296c 	.word	0x2401296c

080127b8 <_isatty_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4d06      	ldr	r5, [pc, #24]	@ (80127d4 <_isatty_r+0x1c>)
 80127bc:	2300      	movs	r3, #0
 80127be:	4604      	mov	r4, r0
 80127c0:	4608      	mov	r0, r1
 80127c2:	602b      	str	r3, [r5, #0]
 80127c4:	f7ef f8c8 	bl	8001958 <_isatty>
 80127c8:	1c43      	adds	r3, r0, #1
 80127ca:	d102      	bne.n	80127d2 <_isatty_r+0x1a>
 80127cc:	682b      	ldr	r3, [r5, #0]
 80127ce:	b103      	cbz	r3, 80127d2 <_isatty_r+0x1a>
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	bd38      	pop	{r3, r4, r5, pc}
 80127d4:	2401296c 	.word	0x2401296c

080127d8 <_kill_r>:
 80127d8:	b538      	push	{r3, r4, r5, lr}
 80127da:	4d07      	ldr	r5, [pc, #28]	@ (80127f8 <_kill_r+0x20>)
 80127dc:	2300      	movs	r3, #0
 80127de:	4604      	mov	r4, r0
 80127e0:	4608      	mov	r0, r1
 80127e2:	4611      	mov	r1, r2
 80127e4:	602b      	str	r3, [r5, #0]
 80127e6:	f7ef f845 	bl	8001874 <_kill>
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	d102      	bne.n	80127f4 <_kill_r+0x1c>
 80127ee:	682b      	ldr	r3, [r5, #0]
 80127f0:	b103      	cbz	r3, 80127f4 <_kill_r+0x1c>
 80127f2:	6023      	str	r3, [r4, #0]
 80127f4:	bd38      	pop	{r3, r4, r5, pc}
 80127f6:	bf00      	nop
 80127f8:	2401296c 	.word	0x2401296c

080127fc <_getpid_r>:
 80127fc:	f7ef b832 	b.w	8001864 <_getpid>

08012800 <_init>:
 8012800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012802:	bf00      	nop
 8012804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012806:	bc08      	pop	{r3}
 8012808:	469e      	mov	lr, r3
 801280a:	4770      	bx	lr

0801280c <_fini>:
 801280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280e:	bf00      	nop
 8012810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012812:	bc08      	pop	{r3}
 8012814:	469e      	mov	lr, r3
 8012816:	4770      	bx	lr
